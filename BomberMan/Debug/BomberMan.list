
BomberMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800b160  0800b160  0001b160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5a8  0800b5a8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b0  0800b5b0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200001d4  0800b78c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  0800b78c  00020668  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a13e  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d94  00000000  00000000  0003a383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117d  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b931  00000000  00000000  0004091d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020636  00000000  00000000  0006c24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106dc4  00000000  00000000  0008c884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070b0  00000000  00000000  00193648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0019a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b148 	.word	0x0800b148

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0800b148 	.word	0x0800b148

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <MX_ADC1_Init+0xa0>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a18:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a3a:	f001 f987 	bl	8001d4c <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a44:	f000 fc94 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a5a:	f001 fae9 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a64:	f000 fc84 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200001f0 	.word	0x200001f0
 8000a74:	40012000 	.word	0x40012000

08000a78 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000a8c:	4a34      	ldr	r2, [pc, #208]	; (8000b60 <MX_ADC3_Init+0xe8>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000a92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a96:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aba:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <MX_ADC3_Init+0xec>)
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ad8:	4820      	ldr	r0, [pc, #128]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ada:	f001 f937 	bl	8001d4c <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f000 fc44 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ae8:	230e      	movs	r3, #14
 8000aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000afa:	f001 fa99 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000b04:	f000 fc34 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b08:	2309      	movs	r3, #9
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000b16:	f001 fa8b 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000b20:	f000 fc26 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b24:	2303      	movs	r3, #3
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000b2e:	f001 fa7f 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000b38:	f000 fc1a 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000b46:	f001 fa73 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000b50:	f000 fc0e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000238 	.word	0x20000238
 8000b60:	40012200 	.word	0x40012200
 8000b64:	0f000001 	.word	0x0f000001

08000b68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a56      	ldr	r2, [pc, #344]	; (8000ce0 <HAL_ADC_MspInit+0x178>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12c      	bne.n	8000be4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a55      	ldr	r2, [pc, #340]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4846      	ldr	r0, [pc, #280]	; (8000ce8 <HAL_ADC_MspInit+0x180>)
 8000bce:	f002 f8b5 	bl	8002d3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	2012      	movs	r0, #18
 8000bd8:	f001 fd5f 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f001 fd78 	bl	80026d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000be2:	e079      	b.n	8000cd8 <HAL_ADC_MspInit+0x170>
  else if(adcHandle->Instance==ADC3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a40      	ldr	r2, [pc, #256]	; (8000cec <HAL_ADC_MspInit+0x184>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d174      	bne.n	8000cd8 <HAL_ADC_MspInit+0x170>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Joystick_1_X_Pin|Joystick_1_Y_Pin;
 8000c36:	2318      	movs	r3, #24
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <HAL_ADC_MspInit+0x188>)
 8000c4a:	f002 f877 	bl	8002d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Joystick_2_X_Pin|Joystick_2_Y_Pin;
 8000c4e:	2309      	movs	r3, #9
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <HAL_ADC_MspInit+0x18c>)
 8000c62:	f002 f86b 	bl	8002d3c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c68:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_ADC_MspInit+0x194>)
 8000c6a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000cae:	f001 fd2b 	bl	8002708 <HAL_DMA_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8000cb8:	f000 fb5a 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2102      	movs	r1, #2
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f001 fce4 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd2:	2012      	movs	r0, #18
 8000cd4:	f001 fcfd 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40012200 	.word	0x40012200
 8000cf0:	40021400 	.word	0x40021400
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	20000280 	.word	0x20000280
 8000cfc:	40026410 	.word	0x40026410

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2101      	movs	r1, #1
 8000d22:	2038      	movs	r0, #56	; 0x38
 8000d24:	f001 fcb9 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d28:	2038      	movs	r0, #56	; 0x38
 8000d2a:	f001 fcd2 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
     PB6   ------> S_TIM4_CH1
*/
void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4bab      	ldr	r3, [pc, #684]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4aaa      	ldr	r2, [pc, #680]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4ba8      	ldr	r3, [pc, #672]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4ba5      	ldr	r3, [pc, #660]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4aa4      	ldr	r2, [pc, #656]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4ba2      	ldr	r3, [pc, #648]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	4b9f      	ldr	r3, [pc, #636]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a9e      	ldr	r2, [pc, #632]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b9c      	ldr	r3, [pc, #624]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	4b99      	ldr	r3, [pc, #612]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a98      	ldr	r2, [pc, #608]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b96      	ldr	r3, [pc, #600]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a92      	ldr	r2, [pc, #584]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b90      	ldr	r3, [pc, #576]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a8c      	ldr	r2, [pc, #560]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b8a      	ldr	r3, [pc, #552]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a86      	ldr	r2, [pc, #536]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b84      	ldr	r3, [pc, #528]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfa:	4b81      	ldr	r3, [pc, #516]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a80      	ldr	r2, [pc, #512]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b7e      	ldr	r3, [pc, #504]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2168      	movs	r1, #104	; 0x68
 8000e16:	487b      	ldr	r0, [pc, #492]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e18:	f002 f93c 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e22:	4879      	ldr	r0, [pc, #484]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000e24:	f002 f936 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	4877      	ldr	r0, [pc, #476]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000e2e:	f002 f931 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e38:	4875      	ldr	r0, [pc, #468]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000e3a:	f002 f92b 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000e3e:	2314      	movs	r3, #20
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	486c      	ldr	r0, [pc, #432]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e52:	f001 ff73 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000e56:	2368      	movs	r3, #104	; 0x68
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4865      	ldr	r0, [pc, #404]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e6e:	f001 ff65 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4862      	ldr	r0, [pc, #392]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000e88:	f001 ff58 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e8c:	2332      	movs	r3, #50	; 0x32
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9c:	230b      	movs	r3, #11
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	485a      	ldr	r0, [pc, #360]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000ea8:	f001 ff48 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eac:	2386      	movs	r3, #134	; 0x86
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebc:	230b      	movs	r3, #11
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4853      	ldr	r0, [pc, #332]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000ec8:	f001 ff38 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	484d      	ldr	r0, [pc, #308]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000ee0:	f001 ff2c 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ee4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4842      	ldr	r0, [pc, #264]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000efe:	f001 ff1d 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	483a      	ldr	r0, [pc, #232]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000f1a:	f001 ff0f 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000f3c:	f001 fefe 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482a      	ldr	r0, [pc, #168]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000f5e:	f001 feed 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4824      	ldr	r0, [pc, #144]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000f7a:	f001 fedf 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000f92:	f001 fed3 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000f96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000fb0:	f001 fec4 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc6:	230b      	movs	r3, #11
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000fd2:	f001 feb3 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_BACKLIGHT_Pin;
 8000fd6:	2340      	movs	r3, #64	; 0x40
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_LED_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000ff2:	f001 fea3 	bl	8002d3c <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	; 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40021000 	.word	0x40021000
 8001008:	40020400 	.word	0x40020400
 800100c:	40021800 	.word	0x40021800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020000 	.word	0x40020000

08001018 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C1_Init+0x74>)
 8001054:	f002 f838 	bl	80030c8 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 f987 	bl	8001370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C1_Init+0x74>)
 8001066:	f002 fe3e 	bl	8003ce6 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 f97e 	bl	8001370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C1_Init+0x74>)
 8001078:	f002 fe80 	bl	8003d7c <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 f975 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002e0 	.word	0x200002e0
 8001090:	40005400 	.word	0x40005400
 8001094:	20404768 	.word	0x20404768

08001098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ae      	sub	sp, #184	; 0xb8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2290      	movs	r2, #144	; 0x90
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 fcd4 	bl	8007a66 <memset>
  if(i2cHandle->Instance==I2C1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_I2C_MspInit+0xd4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d14c      	bne.n	8001162 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fbd0 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010e2:	f000 f945 	bl	8001370 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001106:	2312      	movs	r3, #18
 8001108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001118:	2304      	movs	r3, #4
 800111a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001122:	4619      	mov	r1, r3
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <HAL_I2C_MspInit+0xdc>)
 8001126:	f001 fe09 	bl	8002d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 8001130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201f      	movs	r0, #31
 8001148:	f001 faa7 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800114c:	201f      	movs	r0, #31
 800114e:	f001 fac0 	bl	80026d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2020      	movs	r0, #32
 8001158:	f001 fa9f 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800115c:	2020      	movs	r0, #32
 800115e:	f001 fab8 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	37b8      	adds	r7, #184	; 0xb8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800117c:	f3bf 8f4f 	dsb	sy
}
 8001180:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001182:	f3bf 8f6f 	isb	sy
}
 8001186:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <SCB_EnableICache+0x48>)
 800118a:	2200      	movs	r2, #0
 800118c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001190:	f3bf 8f4f 	dsb	sy
}
 8001194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001196:	f3bf 8f6f 	isb	sy
}
 800119a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <SCB_EnableICache+0x48>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <SCB_EnableICache+0x48>)
 80011a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011a8:	f3bf 8f4f 	dsb	sy
}
 80011ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ae:	f3bf 8f6f 	isb	sy
}
 80011b2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SCB_EnableDCache+0x84>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011d2:	f3bf 8f4f 	dsb	sy
}
 80011d6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <SCB_EnableDCache+0x84>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0b5b      	lsrs	r3, r3, #13
 80011e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011e8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011f2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	015a      	lsls	r2, r3, #5
 80011f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80011fc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001202:	4911      	ldr	r1, [pc, #68]	; (8001248 <SCB_EnableDCache+0x84>)
 8001204:	4313      	orrs	r3, r2
 8001206:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ef      	bne.n	80011f4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	60fa      	str	r2, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1e5      	bne.n	80011ea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800121e:	f3bf 8f4f 	dsb	sy
}
 8001222:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <SCB_EnableDCache+0x84>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SCB_EnableDCache+0x84>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001236:	f3bf 8f6f 	isb	sy
}
 800123a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001250:	f7ff ff92 	bl	8001178 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001254:	f7ff ffb6 	bl	80011c4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001258:	f000 fd12 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125c:	f000 f818 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001260:	f7ff fd6c 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001264:	f7ff fd4c 	bl	8000d00 <MX_DMA_Init>
  MX_SPI5_Init();
 8001268:	f000 f8d0 	bl	800140c <MX_SPI5_Init>
  MX_TIM1_Init();
 800126c:	f000 fa88 	bl	8001780 <MX_TIM1_Init>
  MX_RNG_Init();
 8001270:	f000 f884 	bl	800137c <MX_RNG_Init>
  MX_I2C1_Init();
 8001274:	f7ff fed0 	bl	8001018 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001278:	f000 fad6 	bl	8001828 <MX_TIM2_Init>
  MX_ADC1_Init();
 800127c:	f7ff fbaa 	bl	80009d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001280:	f000 fb20 	bl	80018c4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001284:	f000 fc42 	bl	8001b0c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001288:	f7ff fbf6 	bl	8000a78 <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800128c:	e7fe      	b.n	800128c <main+0x40>
	...

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2234      	movs	r2, #52	; 0x34
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f006 fbe1 	bl	8007a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012b4:	f002 fdae 	bl	8003e14 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <SystemClock_Config+0xd8>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <SystemClock_Config+0xd8>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <SystemClock_Config+0xd8>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <SystemClock_Config+0xdc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a25      	ldr	r2, [pc, #148]	; (800136c <SystemClock_Config+0xdc>)
 80012d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <SystemClock_Config+0xdc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001300:	23d8      	movs	r3, #216	; 0xd8
 8001302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001308:	2309      	movs	r3, #9
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fddd 	bl	8003ed4 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001320:	f000 f826 	bl	8001370 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001324:	f002 fd86 	bl	8003e34 <HAL_PWREx_EnableOverDrive>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800132e:	f000 f81f 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2302      	movs	r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800133e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2107      	movs	r1, #7
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f86d 	bl	8004430 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800135c:	f000 f808 	bl	8001370 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_RNG_Init+0x20>)
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <MX_RNG_Init+0x24>)
 8001384:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_RNG_Init+0x20>)
 8001388:	f003 fea0 	bl	80050cc <HAL_RNG_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001392:	f7ff ffed 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000334 	.word	0x20000334
 80013a0:	50060800 	.word	0x50060800

080013a4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0a8      	sub	sp, #160	; 0xa0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2290      	movs	r2, #144	; 0x90
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f006 fb56 	bl	8007a66 <memset>
  if(rngHandle->Instance==RNG)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_RNG_MspInit+0x60>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d11b      	bne.n	80013fc <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa51 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80013e0:	f7ff ffc6 	bl	8001370 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_RNG_MspInit+0x64>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_RNG_MspInit+0x64>)
 80013ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ee:	6353      	str	r3, [r2, #52]	; 0x34
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RNG_MspInit+0x64>)
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80013fc:	bf00      	nop
 80013fe:	37a0      	adds	r7, #160	; 0xa0
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	50060800 	.word	0x50060800
 8001408:	40023800 	.word	0x40023800

0800140c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_SPI5_Init+0x74>)
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <MX_SPI5_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_SPI5_Init+0x74>)
 8001418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800141c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_SPI5_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_SPI5_Init+0x74>)
 8001426:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800142a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_SPI5_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_SPI5_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_SPI5_Init+0x74>)
 800143a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SPI5_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SPI5_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI5_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_SPI5_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI5_Init+0x74>)
 800145a:	2207      	movs	r2, #7
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_SPI5_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI5_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_SPI5_Init+0x74>)
 800146c:	f003 fe58 	bl	8005120 <HAL_SPI_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001476:	f7ff ff7b 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000344 	.word	0x20000344
 8001484:	40015000 	.word	0x40015000

08001488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_SPI_MspInit+0x7c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014da:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014ec:	2305      	movs	r3, #5
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_SPI_MspInit+0x84>)
 80014f8:	f001 fc20 	bl	8002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40015000 	.word	0x40015000
 8001508:	40023800 	.word	0x40023800
 800150c:	40021400 	.word	0x40021400

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x44>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x44>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x44>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x44>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x44>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 fbd6 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <ADC_IRQHandler+0x14>)
 800156a:	f000 fc33 	bl	8001dd4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <ADC_IRQHandler+0x18>)
 8001570:	f000 fc30 	bl	8001dd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001f0 	.word	0x200001f0
 800157c:	20000238 	.word	0x20000238

08001580 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM3_IRQHandler+0x10>)
 8001586:	f003 ff2e 	bl	80053e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000444 	.word	0x20000444

08001594 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <I2C1_EV_IRQHandler+0x10>)
 800159a:	f001 fe25 	bl	80031e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200002e0 	.word	0x200002e0

080015a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <I2C1_ER_IRQHandler+0x10>)
 80015ae:	f001 fe35 	bl	800321c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200002e0 	.word	0x200002e0

080015bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <DMA2_Stream0_IRQHandler+0x10>)
 80015c2:	f001 f971 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000280 	.word	0x20000280

080015d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_kill>:

int _kill(int pid, int sig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ea:	f006 fa8f 	bl	8007b0c <__errno>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2216      	movs	r2, #22
 80015f2:	601a      	str	r2, [r3, #0]
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_exit>:

void _exit (int status)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffe7 	bl	80015e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001612:	e7fe      	b.n	8001612 <_exit+0x12>

08001614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00a      	b.n	800163c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001626:	f3af 8000 	nop.w
 800162a:	4601      	mov	r1, r0
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	b2ca      	uxtb	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf0      	blt.n	8001626 <_read+0x12>
  }

  return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e009      	b.n	8001674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf1      	blt.n	8001660 <_write+0x12>
  }
  return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_close>:

int _close(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ae:	605a      	str	r2, [r3, #4]
  return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_isatty>:

int _isatty(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f006 f9f4 	bl	8007b0c <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20080000 	.word	0x20080000
 8001750:	00000400 	.word	0x00000400
 8001754:	200003a8 	.word	0x200003a8
 8001758:	20000668 	.word	0x20000668

0800175c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <MX_TIM1_Init+0xa4>)
 80017a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80017aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017cc:	4814      	ldr	r0, [pc, #80]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017ce:	f003 fd52 	bl	8005276 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80017d8:	f7ff fdca 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_TIM1_Init+0xa0>)
 80017ea:	f004 f82f 	bl	800584c <HAL_TIM_ConfigClockSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017f4:	f7ff fdbc 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_TIM1_Init+0xa0>)
 800180a:	f004 fcb3 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001814:	f7ff fdac 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200003ac 	.word	0x200003ac
 8001824:	40010000 	.word	0x40010000

08001828 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_TIM2_Init+0x98>)
 8001848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM2_Init+0x98>)
 8001850:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM2_Init+0x98>)
 800185e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_TIM2_Init+0x98>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM2_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_TIM2_Init+0x98>)
 8001872:	f003 fd00 	bl	8005276 <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800187c:	f7ff fd78 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_TIM2_Init+0x98>)
 800188e:	f003 ffdd 	bl	800584c <HAL_TIM_ConfigClockSource>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001898:	f7ff fd6a 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800189c:	2320      	movs	r3, #32
 800189e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM2_Init+0x98>)
 80018aa:	f004 fc63 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80018b4:	f7ff fd5c 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200003f8 	.word	0x200003f8

080018c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <MX_TIM3_Init+0xec>)
 80018f8:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <MX_TIM3_Init+0xf0>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_TIM3_Init+0xec>)
 80018fe:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001902:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_TIM3_Init+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <MX_TIM3_Init+0xec>)
 800190c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001910:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_TIM3_Init+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_TIM3_Init+0xec>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800191e:	4824      	ldr	r0, [pc, #144]	; (80019b0 <MX_TIM3_Init+0xec>)
 8001920:	f003 fca9 	bl	8005276 <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800192a:	f7ff fd21 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001938:	4619      	mov	r1, r3
 800193a:	481d      	ldr	r0, [pc, #116]	; (80019b0 <MX_TIM3_Init+0xec>)
 800193c:	f003 ff86 	bl	800584c <HAL_TIM_ConfigClockSource>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001946:	f7ff fd13 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800194a:	4819      	ldr	r0, [pc, #100]	; (80019b0 <MX_TIM3_Init+0xec>)
 800194c:	f003 fcea 	bl	8005324 <HAL_TIM_PWM_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001956:	f7ff fd0b 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_TIM3_Init+0xec>)
 800196a:	f004 fc03 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001974:	f7ff fcfc 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001978:	2360      	movs	r3, #96	; 0x60
 800197a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 800197c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001980:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM3_Init+0xec>)
 8001992:	f003 fe47 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800199c:	f7ff fce8 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM3_Init+0xec>)
 80019a2:	f000 f87b 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 80019a6:	bf00      	nop
 80019a8:	3738      	adds	r7, #56	; 0x38
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000444 	.word	0x20000444
 80019b4:	40000400 	.word	0x40000400

080019b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_TIM_Base_MspInit+0xd4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10c      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019f2:	e046      	b.n	8001a82 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d128      	bne.n	8001a50 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <HAL_TIM_Base_MspInit+0xdc>)
 8001a4a:	f001 f977 	bl	8002d3c <HAL_GPIO_Init>
}
 8001a4e:	e018      	b.n	8001a82 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_TIM_Base_MspInit+0xe0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d113      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_Base_MspInit+0xd8>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2101      	movs	r1, #1
 8001a76:	201d      	movs	r0, #29
 8001a78:	f000 fe0f 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a7c:	201d      	movs	r0, #29
 8001a7e:	f000 fe28 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40000400 	.word	0x40000400

08001a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_TIM_MspPostInit+0x64>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11b      	bne.n	8001af6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Temperature_and_Humidity_TIMER_Pin;
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temperature_and_Humidity_TIMER_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001af2:	f001 f923 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020000 	.word	0x40020000

08001b0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <MX_USART3_UART_Init+0x5c>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b50:	f004 fbbc 	bl	80062cc <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b5a:	f7ff fc09 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000490 	.word	0x20000490
 8001b68:	40004800 	.word	0x40004800

08001b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0ae      	sub	sp, #184	; 0xb8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2290      	movs	r2, #144	; 0x90
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 ff6a 	bl	8007a66 <memset>
  if(uartHandle->Instance==USART3)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <HAL_UART_MspInit+0xb4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d13c      	bne.n	8001c16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fe66 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bb6:	f7ff fbdb 	bl	8001370 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_UART_MspInit+0xb8>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0xb8>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_UART_MspInit+0xb8>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0xb8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <HAL_UART_MspInit+0xb8>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_UART_MspInit+0xb8>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c04:	2307      	movs	r3, #7
 8001c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_UART_MspInit+0xbc>)
 8001c12:	f001 f893 	bl	8002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c16:	bf00      	nop
 8001c18:	37b8      	adds	r7, #184	; 0xb8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40004800 	.word	0x40004800
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020c00 	.word	0x40020c00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c56:	f7ff fd81 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f005 ff5d 	bl	8007b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff faf5 	bl	800124c <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c70:	0800b5b8 	.word	0x0800b5b8
  ldr r2, =_sbss
 8001c74:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c78:	20000668 	.word	0x20000668

08001c7c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <BusFault_Handler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_Init+0x28>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_Init+0x28>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 fcf7 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fc38 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fd0f 	bl	80026ee <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 fcd7 	bl	800269a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000518 	.word	0x20000518

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000518 	.word	0x20000518

08001d4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e031      	b.n	8001dc6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fefc 	bl	8000b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_ADC_Init+0x84>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa9e 	bl	80022dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	ffffeefd 	.word	0xffffeefd

08001dd4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d049      	beq.n	8001e9e <HAL_ADC_IRQHandler+0xca>
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d046      	beq.n	8001e9e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d12b      	bne.n	8001e8e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d127      	bne.n	8001e8e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d119      	bne.n	8001e8e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0220 	bic.w	r2, r2, #32
 8001e68:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8b0 	bl	8001ff4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0212 	mvn.w	r2, #18
 8001e9c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d057      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x190>
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d054      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d139      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d12b      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d124      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11d      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d119      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fabb 	bl	80024d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 020c 	mvn.w	r2, #12
 8001f62:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <HAL_ADC_IRQHandler+0x1d6>
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d014      	beq.n	8001faa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10d      	bne.n	8001faa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f834 	bl	8002008 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0201 	mvn.w	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fb8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_ADC_IRQHandler+0x218>
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f06f 0220 	mvn.w	r2, #32
 8001fda:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f81d 	bl	800201c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f06f 0220 	mvn.w	r2, #32
 8001fea:	601a      	str	r2, [r3, #0]
  }
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1c>
 8002048:	2302      	movs	r3, #2
 800204a:	e136      	b.n	80022ba <HAL_ADC_ConfigChannel+0x28a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d93a      	bls.n	80020d2 <HAL_ADC_ConfigChannel+0xa2>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002064:	d035      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68d9      	ldr	r1, [r3, #12]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	3b1e      	subs	r3, #30
 800207c:	2207      	movs	r2, #7
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	400a      	ands	r2, r1
 800208a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a8d      	ldr	r2, [pc, #564]	; (80022c8 <HAL_ADC_ConfigChannel+0x298>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68d9      	ldr	r1, [r3, #12]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	061a      	lsls	r2, r3, #24
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020aa:	e035      	b.n	8002118 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4403      	add	r3, r0
 80020c4:	3b1e      	subs	r3, #30
 80020c6:	409a      	lsls	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d0:	e022      	b.n	8002118 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6919      	ldr	r1, [r3, #16]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	2207      	movs	r2, #7
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	4603      	mov	r3, r0
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4403      	add	r3, r0
 800210e:	409a      	lsls	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b06      	cmp	r3, #6
 800211e:	d824      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b05      	subs	r3, #5
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b05      	subs	r3, #5
 800215c:	fa00 f203 	lsl.w	r2, r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
 8002168:	e04c      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d824      	bhi.n	80021bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b23      	subs	r3, #35	; 0x23
 8002184:	221f      	movs	r2, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b23      	subs	r3, #35	; 0x23
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ba:	e023      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b41      	subs	r3, #65	; 0x41
 80021ce:	221f      	movs	r2, #31
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43da      	mvns	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	400a      	ands	r2, r1
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b41      	subs	r3, #65	; 0x41
 80021f8:	fa00 f203 	lsl.w	r2, r0, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a30      	ldr	r2, [pc, #192]	; (80022cc <HAL_ADC_ConfigChannel+0x29c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1f4>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002216:	d105      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800221e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002222:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a28      	ldr	r2, [pc, #160]	; (80022cc <HAL_ADC_ConfigChannel+0x29c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10f      	bne.n	800224e <HAL_ADC_ConfigChannel+0x21e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b12      	cmp	r3, #18
 8002234:	d10b      	bne.n	800224e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800223c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002240:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800224c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_ADC_ConfigChannel+0x29c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d12b      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x280>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <HAL_ADC_ConfigChannel+0x298>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <HAL_ADC_ConfigChannel+0x23a>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b11      	cmp	r3, #17
 8002268:	d122      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002270:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002274:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800227c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002280:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_ADC_ConfigChannel+0x298>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d111      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9a      	lsrs	r2, r3, #18
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022a2:	e002      	b.n	80022aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f9      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	10000012 	.word	0x10000012
 80022cc:	40012000 	.word	0x40012000
 80022d0:	40012300 	.word	0x40012300
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <ADC_Init+0x1ec>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <ADC_Init+0x1ec>)
 80022ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <ADC_Init+0x1ec>)
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4973      	ldr	r1, [pc, #460]	; (80024c8 <ADC_Init+0x1ec>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	4a58      	ldr	r2, [pc, #352]	; (80024cc <ADC_Init+0x1f0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800237e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6899      	ldr	r1, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e00f      	b.n	80023d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0202 	bic.w	r2, r2, #2
 80023e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	005a      	lsls	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	3b01      	subs	r3, #1
 8002430:	035a      	lsls	r2, r3, #13
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e007      	b.n	800244c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	3b01      	subs	r3, #1
 8002468:	051a      	lsls	r2, r3, #20
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800248e:	025a      	lsls	r2, r3, #9
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	029a      	lsls	r2, r3, #10
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40012300 	.word	0x40012300
 80024cc:	0f000001 	.word	0x0f000001

080024d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <__NVIC_SetPriorityGrouping>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <__NVIC_SetPriorityGrouping+0x40>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	; (8002524 <__NVIC_SetPriorityGrouping+0x40>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	05fa0000 	.word	0x05fa0000

0800252c <__NVIC_GetPriorityGrouping>:
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_EnableIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f7ff ff8e 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff29 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff3e 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff8e 	bl	80025d8 <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff31 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa2 	bl	8002640 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff fb0e 	bl	8001d34 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e099      	b.n	8002858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002744:	e00f      	b.n	8002766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002746:	f7ff faf5 	bl	8001d34 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b05      	cmp	r3, #5
 8002752:	d908      	bls.n	8002766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e078      	b.n	8002858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e8      	bne.n	8002746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_DMA_Init+0x158>)
 8002780:	4013      	ands	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d107      	bne.n	80027d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0307 	bic.w	r3, r3, #7
 80027e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d117      	bne.n	800282a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fa19 	bl	8002c44 <DMA_CheckFifoParam>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002826:	2301      	movs	r3, #1
 8002828:	e016      	b.n	8002858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f9d0 	bl	8002bd8 <DMA_CalcBaseAndBitshift>
 8002838:	4603      	mov	r3, r0
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	223f      	movs	r2, #63	; 0x3f
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	e010803f 	.word	0xe010803f

08002864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00c      	b.n	800289c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028b4:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <HAL_DMA_IRQHandler+0x248>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a8e      	ldr	r2, [pc, #568]	; (8002af4 <HAL_DMA_IRQHandler+0x24c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2208      	movs	r2, #8
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2208      	movs	r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2204      	movs	r2, #4
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d043      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2210      	movs	r2, #16
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e01f      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0208 	bic.w	r2, r2, #8
 8002a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 808f 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8087 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2220      	movs	r2, #32
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d136      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x1da>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d07e      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
        }
        return;
 8002abe:	e079      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01d      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d031      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e02c      	b.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
 8002aee:	bf00      	nop
 8002af0:	20000000 	.word	0x20000000
 8002af4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e01e      	b.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10f      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0210 	bic.w	r2, r2, #16
 8002b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d032      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2205      	movs	r2, #5
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d307      	bcc.n	8002b90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f2      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x2cc>
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bb4:	bf00      	nop
    }
  }
}
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bca:	b2db      	uxtb	r3, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b10      	subs	r3, #16
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <DMA_CalcBaseAndBitshift+0x60>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <DMA_CalcBaseAndBitshift+0x64>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d908      	bls.n	8002c18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	1d1a      	adds	r2, r3, #4
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	; 0x58
 8002c16:	e006      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	0800b178 	.word	0x0800b178
 8002c40:	fffffc00 	.word	0xfffffc00

08002c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d856      	bhi.n	8002d12 <DMA_CheckFifoParam+0xce>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <DMA_CheckFifoParam+0x28>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002d13 	.word	0x08002d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e043      	b.n	8002d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c96:	d140      	bne.n	8002d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e03d      	b.n	8002d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca6:	d121      	bne.n	8002cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d837      	bhi.n	8002d1e <DMA_CheckFifoParam+0xda>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <DMA_CheckFifoParam+0x70>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccb 	.word	0x08002ccb
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002cdd 	.word	0x08002cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e030      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e022      	b.n	8002d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cea:	e01c      	b.n	8002d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d903      	bls.n	8002cfa <DMA_CheckFifoParam+0xb6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf8:	e018      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e015      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e00b      	b.n	8002d2a <DMA_CheckFifoParam+0xe6>
      break;
 8002d12:	bf00      	nop
 8002d14:	e00a      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e008      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e006      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e175      	b.n	8003048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f040 8164 	bne.w	8003042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d005      	beq.n	8002d92 <HAL_GPIO_Init+0x56>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d130      	bne.n	8002df4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d017      	beq.n	8002e30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d123      	bne.n	8002e84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80be 	beq.w	8003042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec6:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_GPIO_Init+0x324>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_GPIO_Init+0x324>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed2:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_GPIO_Init+0x328>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_GPIO_Init+0x32c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d037      	beq.n	8002f7a <HAL_GPIO_Init+0x23e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_GPIO_Init+0x330>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_GPIO_Init+0x23a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a56      	ldr	r2, [pc, #344]	; (8003070 <HAL_GPIO_Init+0x334>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02b      	beq.n	8002f72 <HAL_GPIO_Init+0x236>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a55      	ldr	r2, [pc, #340]	; (8003074 <HAL_GPIO_Init+0x338>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d025      	beq.n	8002f6e <HAL_GPIO_Init+0x232>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a54      	ldr	r2, [pc, #336]	; (8003078 <HAL_GPIO_Init+0x33c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <HAL_GPIO_Init+0x22e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a53      	ldr	r2, [pc, #332]	; (800307c <HAL_GPIO_Init+0x340>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0x22a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_GPIO_Init+0x344>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x226>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a51      	ldr	r2, [pc, #324]	; (8003084 <HAL_GPIO_Init+0x348>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x222>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a50      	ldr	r2, [pc, #320]	; (8003088 <HAL_GPIO_Init+0x34c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x21e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	; (800308c <HAL_GPIO_Init+0x350>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f52:	2309      	movs	r3, #9
 8002f54:	e012      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f56:	230a      	movs	r3, #10
 8002f58:	e010      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	e00e      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f5e:	2307      	movs	r3, #7
 8002f60:	e00c      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f62:	2306      	movs	r3, #6
 8002f64:	e00a      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	; (8003064 <HAL_GPIO_Init+0x328>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fbe:	4a34      	ldr	r2, [pc, #208]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe8:	4a29      	ldr	r2, [pc, #164]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_GPIO_Init+0x354>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_GPIO_Init+0x354>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_GPIO_Init+0x354>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f ae86 	bls.w	8002d5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40021400 	.word	0x40021400
 8003080:	40021800 	.word	0x40021800
 8003084:	40021c00 	.word	0x40021c00
 8003088:	40022000 	.word	0x40022000
 800308c:	40022400 	.word	0x40022400
 8003090:	40013c00 	.word	0x40013c00

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030b0:	e003      	b.n	80030ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	041a      	lsls	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	619a      	str	r2, [r3, #24]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd ffd2 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e006      	b.n	8003150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800314e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d104      	bne.n	8003162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_I2C_Init+0x11c>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	02008000 	.word	0x02008000

080031e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
  }
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00f      	beq.n	800325e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00f      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f043 0208 	orr.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003286:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00f      	beq.n	80032b2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f043 0202 	orr.w	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 030b 	and.w	r3, r3, #11
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fb77 	bl	80039b8 <I2C_ITError>
  }
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
 8003306:	4613      	mov	r3, r2
 8003308:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <I2C_Slave_ISR_IT+0x24>
 8003372:	2302      	movs	r3, #2
 8003374:	e0e1      	b.n	800353a <I2C_Slave_ISR_IT+0x1e8>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003392:	6939      	ldr	r1, [r7, #16]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f9b5 	bl	8003704 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d04b      	beq.n	800343c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d046      	beq.n	800343c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d128      	bne.n	800340a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b28      	cmp	r3, #40	; 0x28
 80033c2:	d108      	bne.n	80033d6 <I2C_Slave_ISR_IT+0x84>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ca:	d104      	bne.n	80033d6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033cc:	6939      	ldr	r1, [r7, #16]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fa9e 	bl	8003910 <I2C_ITListenCplt>
 80033d4:	e031      	b.n	800343a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b29      	cmp	r3, #41	; 0x29
 80033e0:	d10e      	bne.n	8003400 <I2C_Slave_ISR_IT+0xae>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e8:	d00a      	beq.n	8003400 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fbd7 	bl	8003ba6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f926 	bl	800364a <I2C_ITSlaveSeqCplt>
 80033fe:	e01c      	b.n	800343a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003408:	e08f      	b.n	800352a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2210      	movs	r2, #16
 8003410:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f043 0204 	orr.w	r2, r3, #4
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <I2C_Slave_ISR_IT+0xda>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342a:	d17e      	bne.n	800352a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	4619      	mov	r1, r3
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fac0 	bl	80039b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003438:	e077      	b.n	800352a <I2C_Slave_ISR_IT+0x1d8>
 800343a:	e076      	b.n	800352a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d02f      	beq.n	80034a6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02a      	beq.n	80034a6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d14b      	bne.n	800352e <I2C_Slave_ISR_IT+0x1dc>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800349c:	d047      	beq.n	800352e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8d3 	bl	800364a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034a4:	e043      	b.n	800352e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d009      	beq.n	80034c4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034ba:	6939      	ldr	r1, [r7, #16]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f840 	bl	8003542 <I2C_ITAddrCplt>
 80034c2:	e035      	b.n	8003530 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d030      	beq.n	8003530 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02b      	beq.n	8003530 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
 8003512:	e00d      	b.n	8003530 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351a:	d002      	beq.n	8003522 <I2C_Slave_ISR_IT+0x1d0>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f891 	bl	800364a <I2C_ITSlaveSeqCplt>
 8003528:	e002      	b.n	8003530 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800352e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003558:	2b28      	cmp	r3, #40	; 0x28
 800355a:	d16a      	bne.n	8003632 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b29b      	uxth	r3, r3
 8003576:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800357a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003588:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003596:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d138      	bne.n	8003612 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	09db      	lsrs	r3, r3, #7
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	89bb      	ldrh	r3, [r7, #12]
 80035a8:	4053      	eors	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f003 0306 	and.w	r3, r3, #6
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d11c      	bne.n	80035ee <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d13b      	bne.n	8003642 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2208      	movs	r2, #8
 80035d6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035e0:	89ba      	ldrh	r2, [r7, #12]
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fe87 	bl	80032fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035ec:	e029      	b.n	8003642 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fb17 	bl	8003c2a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003604:	89ba      	ldrh	r2, [r7, #12]
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fe75 	bl	80032fa <HAL_I2C_AddrCallback>
}
 8003610:	e017      	b.n	8003642 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fb07 	bl	8003c2a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003624:	89ba      	ldrh	r2, [r7, #12]
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fe65 	bl	80032fa <HAL_I2C_AddrCallback>
}
 8003630:	e007      	b.n	8003642 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2208      	movs	r2, #8
 8003638:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e00c      	b.n	8003698 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003696:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b29      	cmp	r3, #41	; 0x29
 80036a2:	d112      	bne.n	80036ca <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2228      	movs	r2, #40	; 0x28
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2221      	movs	r2, #33	; 0x21
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036b2:	2101      	movs	r1, #1
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fab8 	bl	8003c2a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fe05 	bl	80032d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036c8:	e017      	b.n	80036fa <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b2a      	cmp	r3, #42	; 0x2a
 80036d4:	d111      	bne.n	80036fa <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2228      	movs	r2, #40	; 0x28
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2222      	movs	r2, #34	; 0x22
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036e4:	2102      	movs	r1, #2
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa9f 	bl	8003c2a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fdf6 	bl	80032e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003720:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b21      	cmp	r3, #33	; 0x21
 800372e:	d002      	beq.n	8003736 <I2C_ITSlaveCplt+0x32>
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b29      	cmp	r3, #41	; 0x29
 8003734:	d108      	bne.n	8003748 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003736:	f248 0101 	movw	r1, #32769	; 0x8001
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa75 	bl	8003c2a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2221      	movs	r2, #33	; 0x21
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
 8003746:	e00d      	b.n	8003764 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b22      	cmp	r3, #34	; 0x22
 800374c:	d002      	beq.n	8003754 <I2C_ITSlaveCplt+0x50>
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	2b2a      	cmp	r3, #42	; 0x2a
 8003752:	d107      	bne.n	8003764 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003754:	f248 0102 	movw	r1, #32770	; 0x8002
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa66 	bl	8003c2a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2222      	movs	r2, #34	; 0x22
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003772:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b62      	ldr	r3, [pc, #392]	; (8003908 <I2C_ITSlaveCplt+0x204>)
 8003780:	400b      	ands	r3, r1
 8003782:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fa0e 	bl	8003ba6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01f      	beq.n	80037ec <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ba:	e017      	b.n	80037ec <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f043 0204 	orr.w	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8a4 	bl	80039b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b28      	cmp	r3, #40	; 0x28
 800387a:	d141      	bne.n	8003900 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f846 	bl	8003910 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003884:	e03c      	b.n	8003900 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800388e:	d014      	beq.n	80038ba <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff feda 	bl	800364a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <I2C_ITSlaveCplt+0x208>)
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fd2f 	bl	8003316 <HAL_I2C_ListenCpltCallback>
}
 80038b8:	e022      	b.n	8003900 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b22      	cmp	r3, #34	; 0x22
 80038c4:	d10e      	bne.n	80038e4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff fd02 	bl	80032e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80038e2:	e00d      	b.n	8003900 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff fce9 	bl	80032d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003900:	bf00      	nop
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	fe00e800 	.word	0xfe00e800
 800390c:	ffff0000 	.word	0xffff0000

08003910 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <I2C_ITListenCplt+0xa4>)
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d022      	beq.n	800398c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800398c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f94a 	bl	8003c2a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2210      	movs	r2, #16
 800399c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fcb5 	bl	8003316 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	ffff0000 	.word	0xffff0000

080039b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a5d      	ldr	r2, [pc, #372]	; (8003b4c <I2C_ITError+0x194>)
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b28      	cmp	r3, #40	; 0x28
 80039ee:	d005      	beq.n	80039fc <I2C_ITError+0x44>
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b29      	cmp	r3, #41	; 0x29
 80039f4:	d002      	beq.n	80039fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b2a      	cmp	r3, #42	; 0x2a
 80039fa:	d10b      	bne.n	8003a14 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039fc:	2103      	movs	r1, #3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f913 	bl	8003c2a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2228      	movs	r2, #40	; 0x28
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <I2C_ITError+0x198>)
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34
 8003a12:	e011      	b.n	8003a38 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a14:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f906 	bl	8003c2a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b60      	cmp	r3, #96	; 0x60
 8003a28:	d003      	beq.n	8003a32 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d039      	beq.n	8003aba <I2C_ITError+0x102>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b11      	cmp	r3, #17
 8003a4a:	d002      	beq.n	8003a52 <I2C_ITError+0x9a>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b21      	cmp	r3, #33	; 0x21
 8003a50:	d133      	bne.n	8003aba <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a60:	d107      	bne.n	8003a72 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff f8a0 	bl	8002bbc <HAL_DMA_GetState>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d017      	beq.n	8003ab2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <I2C_ITError+0x19c>)
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fee4 	bl	8002864 <HAL_DMA_Abort_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04d      	beq.n	8003b3e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aac:	4610      	mov	r0, r2
 8003aae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ab0:	e045      	b.n	8003b3e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f850 	bl	8003b58 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ab8:	e041      	b.n	8003b3e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d039      	beq.n	8003b36 <I2C_ITError+0x17e>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d002      	beq.n	8003ace <I2C_ITError+0x116>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b22      	cmp	r3, #34	; 0x22
 8003acc:	d133      	bne.n	8003b36 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	d107      	bne.n	8003aee <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f862 	bl	8002bbc <HAL_DMA_GetState>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d017      	beq.n	8003b2e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <I2C_ITError+0x19c>)
 8003b04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fea6 	bl	8002864 <HAL_DMA_Abort_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b2c:	e009      	b.n	8003b42 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f812 	bl	8003b58 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b34:	e005      	b.n	8003b42 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f80e 	bl	8003b58 <I2C_TreatErrorCallback>
  }
}
 8003b3c:	e002      	b.n	8003b44 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b42:	bf00      	nop
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	ffff0000 	.word	0xffff0000
 8003b50:	08003353 	.word	0x08003353
 8003b54:	08003bef 	.word	0x08003bef

08003b58 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b60      	cmp	r3, #96	; 0x60
 8003b6a:	d10e      	bne.n	8003b8a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fbdb 	bl	800333e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b88:	e009      	b.n	8003b9e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fbc6 	bl	800332a <HAL_I2C_ErrorCallback>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d103      	bne.n	8003bc4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	619a      	str	r2, [r3, #24]
  }
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	2200      	movs	r2, #0
 8003c0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff ff9b 	bl	8003b58 <I2C_TreatErrorCallback>
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003c4a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c58:	2b28      	cmp	r3, #40	; 0x28
 8003c5a:	d003      	beq.n	8003c64 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c62:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00f      	beq.n	8003c8e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003c74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c82:	2b28      	cmp	r3, #40	; 0x28
 8003c84:	d003      	beq.n	8003c8e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da03      	bge.n	8003c9e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c9e:	887b      	ldrh	r3, [r7, #2]
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d103      	bne.n	8003cac <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d103      	bne.n	8003cba <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f043 0320 	orr.w	r3, r3, #32
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cba:	887b      	ldrh	r3, [r7, #2]
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d103      	bne.n	8003cc8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d138      	bne.n	8003d6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e032      	b.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2224      	movs	r2, #36	; 0x24
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d139      	bne.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e033      	b.n	8003e08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40007000 	.word	0x40007000

08003e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e62:	f7fd ff67 	bl	8001d34 <HAL_GetTick>
 8003e66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e68:	e009      	b.n	8003e7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e6a:	f7fd ff63 	bl	8001d34 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e78:	d901      	bls.n	8003e7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e022      	b.n	8003ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e98:	f7fd ff4c 	bl	8001d34 <HAL_GetTick>
 8003e9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e9e:	e009      	b.n	8003eb4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ea0:	f7fd ff48 	bl	8001d34 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eae:	d901      	bls.n	8003eb4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e007      	b.n	8003ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec0:	d1ee      	bne.n	8003ea0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40007000 	.word	0x40007000

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e29b      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	4b96      	ldr	r3, [pc, #600]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f04:	4b93      	ldr	r3, [pc, #588]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d112      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62>
 8003f10:	4b90      	ldr	r3, [pc, #576]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1e:	4b8d      	ldr	r3, [pc, #564]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06c      	beq.n	8004004 <HAL_RCC_OscConfig+0x130>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d168      	bne.n	8004004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e275      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7a>
 8003f40:	4b84      	ldr	r3, [pc, #528]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a83      	ldr	r2, [pc, #524]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e02e      	b.n	8003fac <HAL_RCC_OscConfig+0xd8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x9c>
 8003f56:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b7c      	ldr	r3, [pc, #496]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7b      	ldr	r2, [pc, #492]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xd8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0xc0>
 8003f7a:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b73      	ldr	r3, [pc, #460]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a72      	ldr	r2, [pc, #456]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xd8>
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd febe 	bl	8001d34 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd feba 	bl	8001d34 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e229      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b61      	ldr	r3, [pc, #388]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe8>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd feaa 	bl	8001d34 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fea6 	bl	8001d34 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e215      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x110>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d069      	beq.n	80040e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x190>
 800402a:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x17a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1e9      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b41      	ldr	r3, [pc, #260]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	493d      	ldr	r1, [pc, #244]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e040      	b.n	80040e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d023      	beq.n	80040b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b39      	ldr	r3, [pc, #228]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a38      	ldr	r2, [pc, #224]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fe5c 	bl	8001d34 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004080:	f7fd fe58 	bl	8001d34 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1c7      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4929      	ldr	r1, [pc, #164]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
 80040b2:	e018      	b.n	80040e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a26      	ldr	r2, [pc, #152]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fe38 	bl	8001d34 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fd fe34 	bl	8001d34 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e1a3      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d038      	beq.n	8004164 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d019      	beq.n	800412e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b16      	ldr	r3, [pc, #88]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fd fe15 	bl	8001d34 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410e:	f7fd fe11 	bl	8001d34 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e180      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x23a>
 800412c:	e01a      	b.n	8004164 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_RCC_OscConfig+0x280>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fdfb 	bl	8001d34 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004142:	f7fd fdf7 	bl	8001d34 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d903      	bls.n	8004158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e166      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
 8004154:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	4b92      	ldr	r3, [pc, #584]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ee      	bne.n	8004142 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a4 	beq.w	80042ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b8c      	ldr	r3, [pc, #560]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10d      	bne.n	800419a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b89      	ldr	r3, [pc, #548]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a88      	ldr	r2, [pc, #544]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b86      	ldr	r3, [pc, #536]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419a:	4b83      	ldr	r3, [pc, #524]	; (80043a8 <HAL_RCC_OscConfig+0x4d4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d118      	bne.n	80041d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041a6:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <HAL_RCC_OscConfig+0x4d4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7f      	ldr	r2, [pc, #508]	; (80043a8 <HAL_RCC_OscConfig+0x4d4>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7fd fdbf 	bl	8001d34 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fd fdbb 	bl	8001d34 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e12a      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCC_OscConfig+0x4d4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x31a>
 80041e0:	4b70      	ldr	r3, [pc, #448]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a6f      	ldr	r2, [pc, #444]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e02d      	b.n	800424a <HAL_RCC_OscConfig+0x376>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x33c>
 80041f6:	4b6b      	ldr	r3, [pc, #428]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a6a      	ldr	r2, [pc, #424]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	4b68      	ldr	r3, [pc, #416]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a67      	ldr	r2, [pc, #412]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e01c      	b.n	800424a <HAL_RCC_OscConfig+0x376>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d10c      	bne.n	8004232 <HAL_RCC_OscConfig+0x35e>
 8004218:	4b62      	ldr	r3, [pc, #392]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a5e      	ldr	r2, [pc, #376]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e00b      	b.n	800424a <HAL_RCC_OscConfig+0x376>
 8004232:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a5b      	ldr	r2, [pc, #364]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a58      	ldr	r2, [pc, #352]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d015      	beq.n	800427e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd fd6f 	bl	8001d34 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fd fd6b 	bl	8001d34 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0d8      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004270:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ee      	beq.n	800425a <HAL_RCC_OscConfig+0x386>
 800427c:	e014      	b.n	80042a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427e:	f7fd fd59 	bl	8001d34 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd fd55 	bl	8001d34 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0c2      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429c:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ee      	bne.n	8004286 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ae:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80ae 	beq.w	8004420 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c4:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d06d      	beq.n	80043ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d14b      	bne.n	8004370 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a31      	ldr	r2, [pc, #196]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fd26 	bl	8001d34 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fd22 	bl	8001d34 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e091      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	071b      	lsls	r3, r3, #28
 8004336:	491b      	ldr	r1, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fcf4 	bl	8001d34 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fd fcf0 	bl	8001d34 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e05f      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x47c>
 800436e:	e057      	b.n	8004420 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800437a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fcda 	bl	8001d34 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd fcd6 	bl	8001d34 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e045      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x4b0>
 80043a2:	e03d      	b.n	8004420 <HAL_RCC_OscConfig+0x54c>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043ac:	4b1f      	ldr	r3, [pc, #124]	; (800442c <HAL_RCC_OscConfig+0x558>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d030      	beq.n	800441c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d129      	bne.n	800441c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d122      	bne.n	800441c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d119      	bne.n	800441c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d10f      	bne.n	800441c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d107      	bne.n	800441c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0d0      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b67      	ldr	r3, [pc, #412]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 020f 	bic.w	r2, r3, #15
 800445e:	4965      	ldr	r1, [pc, #404]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0b8      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a8:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	494d      	ldr	r1, [pc, #308]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d040      	beq.n	8004554 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d115      	bne.n	8004512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e073      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06b      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4936      	ldr	r1, [pc, #216]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004524:	f7fd fc06 	bl	8001d34 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fd fc02 	bl	8001d34 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e053      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d210      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 020f 	bic.w	r2, r3, #15
 800456a:	4922      	ldr	r1, [pc, #136]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e032      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	490e      	ldr	r1, [pc, #56]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x1cc>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1d0>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1d4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd fb62 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023c00 	.word	0x40023c00
 80045f8:	40023800 	.word	0x40023800
 80045fc:	0800b160 	.word	0x0800b160
 8004600:	20000000 	.word	0x20000000
 8004604:	20000004 	.word	0x20000004

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b094      	sub	sp, #80	; 0x50
 800460e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	2300      	movs	r3, #0
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	2300      	movs	r3, #0
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004620:	4b79      	ldr	r3, [pc, #484]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d00d      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x40>
 800462c:	2b08      	cmp	r3, #8
 800462e:	f200 80e1 	bhi.w	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x3a>
 800463a:	e0db      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b73      	ldr	r3, [pc, #460]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004640:	e0db      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_GetSysClockFreq+0x208>)
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004646:	e0d8      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	2200      	movs	r2, #0
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38
 8004668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
 8004672:	2300      	movs	r3, #0
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	0159      	lsls	r1, r3, #5
 8004688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468c:	0150      	lsls	r0, r2, #5
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4621      	mov	r1, r4
 8004694:	1a51      	subs	r1, r2, r1
 8004696:	6139      	str	r1, [r7, #16]
 8004698:	4629      	mov	r1, r5
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ac:	4659      	mov	r1, fp
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b6:	4651      	mov	r1, sl
 80046b8:	018a      	lsls	r2, r1, #6
 80046ba:	4651      	mov	r1, sl
 80046bc:	ebb2 0801 	subs.w	r8, r2, r1
 80046c0:	4659      	mov	r1, fp
 80046c2:	eb63 0901 	sbc.w	r9, r3, r1
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046da:	4690      	mov	r8, r2
 80046dc:	4699      	mov	r9, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	eb18 0303 	adds.w	r3, r8, r3
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	462b      	mov	r3, r5
 80046e8:	eb49 0303 	adc.w	r3, r9, r3
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046fa:	4629      	mov	r1, r5
 80046fc:	024b      	lsls	r3, r1, #9
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004704:	4621      	mov	r1, r4
 8004706:	024a      	lsls	r2, r1, #9
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	2200      	movs	r2, #0
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004718:	f7fb ffa6 	bl	8000668 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	e058      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	4618      	mov	r0, r3
 8004730:	4611      	mov	r1, r2
 8004732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004752:	0150      	lsls	r0, r2, #5
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4641      	mov	r1, r8
 800475a:	ebb2 0a01 	subs.w	sl, r2, r1
 800475e:	4649      	mov	r1, r9
 8004760:	eb63 0b01 	sbc.w	fp, r3, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004778:	ebb2 040a 	subs.w	r4, r2, sl
 800477c:	eb63 050b 	sbc.w	r5, r3, fp
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	00eb      	lsls	r3, r5, #3
 800478a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478e:	00e2      	lsls	r2, r4, #3
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	4643      	mov	r3, r8
 8004796:	18e3      	adds	r3, r4, r3
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	464b      	mov	r3, r9
 800479c:	eb45 0303 	adc.w	r3, r5, r3
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ae:	4629      	mov	r1, r5
 80047b0:	028b      	lsls	r3, r1, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b8:	4621      	mov	r1, r4
 80047ba:	028a      	lsls	r2, r1, #10
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	2200      	movs	r2, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	61fa      	str	r2, [r7, #28]
 80047c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047cc:	f7fb ff4c 	bl	8000668 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80047e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3750      	adds	r7, #80	; 0x50
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200

08004814 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000000 	.word	0x20000000

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	0800b170 	.word	0x0800b170

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004858:	f7ff ffdc 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0b5b      	lsrs	r3, r3, #13
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	0800b170 	.word	0x0800b170

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d012      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048a4:	4b69      	ldr	r3, [pc, #420]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a68      	ldr	r2, [pc, #416]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048ae:	6093      	str	r3, [r2, #8]
 80048b0:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	4964      	ldr	r1, [pc, #400]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d017      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d6:	4b5d      	ldr	r3, [pc, #372]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	4959      	ldr	r1, [pc, #356]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f4:	d101      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004902:	2301      	movs	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	494a      	ldr	r1, [pc, #296]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d101      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004932:	2301      	movs	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800493e:	2301      	movs	r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 808b 	beq.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	4a39      	ldr	r2, [pc, #228]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6413      	str	r3, [r2, #64]	; 0x40
 800496c:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004978:	4b35      	ldr	r3, [pc, #212]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004984:	f7fd f9d6 	bl	8001d34 <HAL_GetTick>
 8004988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498c:	f7fd f9d2 	bl	8001d34 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e38f      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049aa:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d035      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d02e      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d2:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049ea:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049f0:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d114      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fd f99a 	bl	8001d34 <HAL_GetTick>
 8004a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fd f996 	bl	8001d34 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e351      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ee      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a32:	d111      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a42:	400b      	ands	r3, r1
 8004a44:	4901      	ldr	r1, [pc, #4]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40007000 	.word	0x40007000
 8004a54:	0ffffcff 	.word	0x0ffffcff
 8004a58:	4bac      	ldr	r3, [pc, #688]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4aab      	ldr	r2, [pc, #684]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a62:	6093      	str	r3, [r2, #8]
 8004a64:	4ba9      	ldr	r3, [pc, #676]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a70:	49a6      	ldr	r1, [pc, #664]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d010      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a82:	4ba2      	ldr	r3, [pc, #648]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a88:	4aa0      	ldr	r2, [pc, #640]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a92:	4b9e      	ldr	r3, [pc, #632]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	499b      	ldr	r1, [pc, #620]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab0:	4b96      	ldr	r3, [pc, #600]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004abe:	4993      	ldr	r1, [pc, #588]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ad2:	4b8e      	ldr	r3, [pc, #568]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae0:	498a      	ldr	r1, [pc, #552]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004af4:	4b85      	ldr	r3, [pc, #532]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b02:	4982      	ldr	r1, [pc, #520]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b16:	4b7d      	ldr	r3, [pc, #500]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4979      	ldr	r1, [pc, #484]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b38:	4b74      	ldr	r3, [pc, #464]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	4971      	ldr	r1, [pc, #452]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b5a:	4b6c      	ldr	r3, [pc, #432]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f023 020c 	bic.w	r2, r3, #12
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b68:	4968      	ldr	r1, [pc, #416]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b7c:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	4960      	ldr	r1, [pc, #384]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	4957      	ldr	r1, [pc, #348]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bc0:	4b52      	ldr	r3, [pc, #328]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	494f      	ldr	r1, [pc, #316]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	4946      	ldr	r1, [pc, #280]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c04:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	493e      	ldr	r1, [pc, #248]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c26:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	4935      	ldr	r1, [pc, #212]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c48:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c56:	492d      	ldr	r1, [pc, #180]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c78:	4924      	ldr	r1, [pc, #144]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c88:	d101      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004caa:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb8:	4914      	ldr	r1, [pc, #80]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cdc:	490b      	ldr	r1, [pc, #44]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00f      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d00:	4902      	ldr	r1, [pc, #8]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d08:	e002      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d1c:	4b8a      	ldr	r3, [pc, #552]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	4986      	ldr	r1, [pc, #536]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d40:	4b81      	ldr	r3, [pc, #516]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d50:	497d      	ldr	r1, [pc, #500]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d006      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80d6 	beq.w	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d6c:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a75      	ldr	r2, [pc, #468]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d78:	f7fc ffdc 	bl	8001d34 <HAL_GetTick>
 8004d7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d80:	f7fc ffd8 	bl	8001d34 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e195      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d92:	4b6d      	ldr	r3, [pc, #436]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d021      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004db2:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dc0:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc6:	0e1b      	lsrs	r3, r3, #24
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	019a      	lsls	r2, r3, #6
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	071b      	lsls	r3, r3, #28
 8004de6:	4958      	ldr	r1, [pc, #352]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02e      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e18:	d129      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e1a:	4b4b      	ldr	r3, [pc, #300]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e28:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2e:	0f1b      	lsrs	r3, r3, #28
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	019a      	lsls	r2, r3, #6
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	071b      	lsls	r3, r3, #28
 8004e4e:	493e      	ldr	r1, [pc, #248]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e56:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5c:	f023 021f 	bic.w	r2, r3, #31
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	3b01      	subs	r3, #1
 8004e66:	4938      	ldr	r1, [pc, #224]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01d      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e7a:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e80:	0e1b      	lsrs	r3, r3, #24
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e88:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8e:	0f1b      	lsrs	r3, r3, #28
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	019a      	lsls	r2, r3, #6
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	4926      	ldr	r1, [pc, #152]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	019a      	lsls	r2, r3, #6
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	071b      	lsls	r3, r3, #28
 8004ede:	491a      	ldr	r1, [pc, #104]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fc ff1f 	bl	8001d34 <HAL_GetTick>
 8004ef6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004efa:	f7fc ff1b 	bl	8001d34 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b64      	cmp	r3, #100	; 0x64
 8004f06:	d901      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e0d8      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	f040 80ce 	bne.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fc ff02 	bl	8001d34 <HAL_GetTick>
 8004f30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f32:	e00b      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f34:	f7fc fefe 	bl	8001d34 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d904      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e0bb      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f4c:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f58:	d0ec      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02e      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d12a      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f82:	4b51      	ldr	r3, [pc, #324]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f90:	4b4d      	ldr	r3, [pc, #308]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	0f1b      	lsrs	r3, r3, #28
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	019a      	lsls	r2, r3, #6
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	4944      	ldr	r1, [pc, #272]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	493d      	ldr	r1, [pc, #244]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d022      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d11d      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	0f1b      	lsrs	r3, r3, #28
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	019a      	lsls	r2, r3, #6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	071b      	lsls	r3, r3, #28
 8005022:	4929      	ldr	r1, [pc, #164]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d028      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	0e1b      	lsrs	r3, r3, #24
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	019a      	lsls	r2, r3, #6
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	4917      	ldr	r1, [pc, #92]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4911      	ldr	r1, [pc, #68]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fc fe4e 	bl	8001d34 <HAL_GetTick>
 8005098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800509c:	f7fc fe4a 	bl	8001d34 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e007      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d1ef      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e01c      	b.n	8005118 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	795b      	ldrb	r3, [r3, #5]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc f958 	bl	80013a4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0204 	orr.w	r2, r2, #4
 8005108:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e09d      	b.n	800526e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005142:	d009      	beq.n	8005158 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	61da      	str	r2, [r3, #28]
 800514a:	e005      	b.n	8005158 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc f988 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005198:	d902      	bls.n	80051a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e002      	b.n	80051a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051ae:	d007      	beq.n	80051c0 <HAL_SPI_Init+0xa0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005202:	ea42 0103 	orr.w	r1, r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	f003 0204 	and.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800523c:	ea42 0103 	orr.w	r1, r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800525c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e049      	b.n	800531c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fc fb8b 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f000 fbc5 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e049      	b.n	80053ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f841 	bl	80053d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 fb6e 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d122      	bne.n	8005442 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d11b      	bne.n	8005442 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0202 	mvn.w	r2, #2
 8005412:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 faed 	bl	8005a08 <HAL_TIM_IC_CaptureCallback>
 800542e:	e005      	b.n	800543c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fadf 	bl	80059f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 faf0 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d122      	bne.n	8005496 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d11b      	bne.n	8005496 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0204 	mvn.w	r2, #4
 8005466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fac3 	bl	8005a08 <HAL_TIM_IC_CaptureCallback>
 8005482:	e005      	b.n	8005490 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fab5 	bl	80059f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fac6 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d122      	bne.n	80054ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d11b      	bne.n	80054ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0208 	mvn.w	r2, #8
 80054ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa99 	bl	8005a08 <HAL_TIM_IC_CaptureCallback>
 80054d6:	e005      	b.n	80054e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa8b 	bl	80059f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa9c 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d122      	bne.n	800553e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d11b      	bne.n	800553e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f06f 0210 	mvn.w	r2, #16
 800550e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2208      	movs	r2, #8
 8005514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa6f 	bl	8005a08 <HAL_TIM_IC_CaptureCallback>
 800552a:	e005      	b.n	8005538 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa61 	bl	80059f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa72 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0201 	mvn.w	r2, #1
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fa3b 	bl	80059e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d10e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d107      	bne.n	8005596 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fe87 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b0:	2b80      	cmp	r3, #128	; 0x80
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fe7a 	bl	80062b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa20 	bl	8005a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d10e      	bne.n	800561c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b20      	cmp	r3, #32
 800560a:	d107      	bne.n	800561c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0220 	mvn.w	r2, #32
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fe3a 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ff      	b.n	8005842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b14      	cmp	r3, #20
 800564e:	f200 80f0 	bhi.w	8005832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	080056ad 	.word	0x080056ad
 800565c:	08005833 	.word	0x08005833
 8005660:	08005833 	.word	0x08005833
 8005664:	08005833 	.word	0x08005833
 8005668:	080056ed 	.word	0x080056ed
 800566c:	08005833 	.word	0x08005833
 8005670:	08005833 	.word	0x08005833
 8005674:	08005833 	.word	0x08005833
 8005678:	0800572f 	.word	0x0800572f
 800567c:	08005833 	.word	0x08005833
 8005680:	08005833 	.word	0x08005833
 8005684:	08005833 	.word	0x08005833
 8005688:	0800576f 	.word	0x0800576f
 800568c:	08005833 	.word	0x08005833
 8005690:	08005833 	.word	0x08005833
 8005694:	08005833 	.word	0x08005833
 8005698:	080057b1 	.word	0x080057b1
 800569c:	08005833 	.word	0x08005833
 80056a0:	08005833 	.word	0x08005833
 80056a4:	08005833 	.word	0x08005833
 80056a8:	080057f1 	.word	0x080057f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fa66 	bl	8005b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e0a5      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fab8 	bl	8005c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
      break;
 800572c:	e084      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fb0f 	bl	8005d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0208 	orr.w	r2, r2, #8
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0204 	bic.w	r2, r2, #4
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
      break;
 800576c:	e064      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb65 	bl	8005e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	021a      	lsls	r2, r3, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e043      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fb9c 	bl	8005ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0208 	orr.w	r2, r2, #8
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ee:	e023      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fbce 	bl	8005f98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005830:	e002      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	75fb      	strb	r3, [r7, #23]
      break;
 8005836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop

0800584c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x1c>
 8005864:	2302      	movs	r3, #2
 8005866:	e0b4      	b.n	80059d2 <HAL_TIM_ConfigClockSource+0x186>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	4b56      	ldr	r3, [pc, #344]	; (80059dc <HAL_TIM_ConfigClockSource+0x190>)
 8005884:	4013      	ands	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a0:	d03e      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0xd4>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a6:	f200 8087 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ae:	f000 8086 	beq.w	80059be <HAL_TIM_ConfigClockSource+0x172>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b6:	d87f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b70      	cmp	r3, #112	; 0x70
 80058ba:	d01a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xa6>
 80058bc:	2b70      	cmp	r3, #112	; 0x70
 80058be:	d87b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b60      	cmp	r3, #96	; 0x60
 80058c2:	d050      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x11a>
 80058c4:	2b60      	cmp	r3, #96	; 0x60
 80058c6:	d877      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b50      	cmp	r3, #80	; 0x50
 80058ca:	d03c      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0xfa>
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d873      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d058      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x13a>
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d86f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d064      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d86b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d060      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d867      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d05a      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	e062      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005902:	f000 fc17 	bl	8006134 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	609a      	str	r2, [r3, #8]
      break;
 800591e:	e04f      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005930:	f000 fc00 	bl	8006134 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005942:	609a      	str	r2, [r3, #8]
      break;
 8005944:	e03c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fb74 	bl	8006040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2150      	movs	r1, #80	; 0x50
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fbcd 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005964:	e02c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005972:	461a      	mov	r2, r3
 8005974:	f000 fb93 	bl	800609e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2160      	movs	r1, #96	; 0x60
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fbbd 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005984:	e01c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	461a      	mov	r2, r3
 8005994:	f000 fb54 	bl	8006040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2140      	movs	r1, #64	; 0x40
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fbad 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 80059a4:	e00c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 fba4 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 80059b6:	e003      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e000      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	fffeff88 	.word	0xfffeff88

080059e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a40      	ldr	r2, [pc, #256]	; (8005b58 <TIM_Base_SetConfig+0x114>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d00f      	beq.n	8005a84 <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3d      	ldr	r2, [pc, #244]	; (8005b5c <TIM_Base_SetConfig+0x118>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a3c      	ldr	r2, [pc, #240]	; (8005b60 <TIM_Base_SetConfig+0x11c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_Base_SetConfig+0x40>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a3b      	ldr	r2, [pc, #236]	; (8005b64 <TIM_Base_SetConfig+0x120>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a3a      	ldr	r2, [pc, #232]	; (8005b68 <TIM_Base_SetConfig+0x124>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d108      	bne.n	8005a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <TIM_Base_SetConfig+0x114>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d02b      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa4:	d027      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <TIM_Base_SetConfig+0x118>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d023      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	; (8005b60 <TIM_Base_SetConfig+0x11c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01f      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <TIM_Base_SetConfig+0x120>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d01b      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <TIM_Base_SetConfig+0x124>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d017      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	; (8005b6c <TIM_Base_SetConfig+0x128>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <TIM_Base_SetConfig+0x12c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00f      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <TIM_Base_SetConfig+0x130>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a25      	ldr	r2, [pc, #148]	; (8005b78 <TIM_Base_SetConfig+0x134>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a24      	ldr	r2, [pc, #144]	; (8005b7c <TIM_Base_SetConfig+0x138>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a23      	ldr	r2, [pc, #140]	; (8005b80 <TIM_Base_SetConfig+0x13c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d108      	bne.n	8005b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <TIM_Base_SetConfig+0x114>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0xf8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a0c      	ldr	r2, [pc, #48]	; (8005b68 <TIM_Base_SetConfig+0x124>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d103      	bne.n	8005b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	615a      	str	r2, [r3, #20]
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800
 8005b78:	40001800 	.word	0x40001800
 8005b7c:	40001c00 	.word	0x40001c00
 8005b80:	40002000 	.word	0x40002000

08005b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <TIM_OC1_SetConfig+0xd8>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <TIM_OC1_SetConfig+0xdc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC1_SetConfig+0x64>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <TIM_OC1_SetConfig+0xe0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10c      	bne.n	8005c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0308 	bic.w	r3, r3, #8
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <TIM_OC1_SetConfig+0xdc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC1_SetConfig+0x8e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <TIM_OC1_SetConfig+0xe0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d111      	bne.n	8005c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	fffeff8f 	.word	0xfffeff8f
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0210 	bic.w	r2, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4b2e      	ldr	r3, [pc, #184]	; (8005d4c <TIM_OC2_SetConfig+0xe4>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0320 	bic.w	r3, r3, #32
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <TIM_OC2_SetConfig+0xe8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC2_SetConfig+0x68>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <TIM_OC2_SetConfig+0xec>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d10d      	bne.n	8005cec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <TIM_OC2_SetConfig+0xe8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC2_SetConfig+0x94>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <TIM_OC2_SetConfig+0xec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d113      	bne.n	8005d24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	feff8fff 	.word	0xfeff8fff
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400

08005d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4b2d      	ldr	r3, [pc, #180]	; (8005e38 <TIM_OC3_SetConfig+0xe0>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <TIM_OC3_SetConfig+0xe4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC3_SetConfig+0x66>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_OC3_SetConfig+0xe8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10d      	bne.n	8005dda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC3_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC3_SetConfig+0x92>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC3_SetConfig+0xe8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d113      	bne.n	8005e12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	621a      	str	r2, [r3, #32]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	fffeff8f 	.word	0xfffeff8f
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <TIM_OC4_SetConfig+0xa4>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <TIM_OC4_SetConfig+0xa8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC4_SetConfig+0x68>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <TIM_OC4_SetConfig+0xac>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d109      	bne.n	8005ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	feff8fff 	.word	0xfeff8fff
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <TIM_OC5_SetConfig+0x98>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <TIM_OC5_SetConfig+0x9c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_OC5_SetConfig+0x5e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <TIM_OC5_SetConfig+0xa0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d109      	bne.n	8005f66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	fffeff8f 	.word	0xfffeff8f
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40010400 	.word	0x40010400

08005f98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <TIM_OC6_SetConfig+0x9c>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	051b      	lsls	r3, r3, #20
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a13      	ldr	r2, [pc, #76]	; (8006038 <TIM_OC6_SetConfig+0xa0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_OC6_SetConfig+0x60>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a12      	ldr	r2, [pc, #72]	; (800603c <TIM_OC6_SetConfig+0xa4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d109      	bne.n	800600c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	feff8fff 	.word	0xfeff8fff
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0210 	bic.w	r2, r3, #16
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	f043 0307 	orr.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	431a      	orrs	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006188:	2302      	movs	r3, #2
 800618a:	e06d      	b.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a30      	ldr	r2, [pc, #192]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2f      	ldr	r2, [pc, #188]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d01d      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a15      	ldr	r2, [pc, #84]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10c      	bne.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e040      	b.n	8006360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fc3c 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f82c 	bl	8006368 <UART_SetConfig>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e022      	b.n	8006360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa84 	bl	8006830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fb0b 	bl	8006974 <UART_CheckIdleState>
 800635e:	4603      	mov	r3, r0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4ba6      	ldr	r3, [pc, #664]	; (800662c <UART_SetConfig+0x2c4>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	6979      	ldr	r1, [r7, #20]
 800639c:	430b      	orrs	r3, r1
 800639e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a94      	ldr	r2, [pc, #592]	; (8006630 <UART_SetConfig+0x2c8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d120      	bne.n	8006426 <UART_SetConfig+0xbe>
 80063e4:	4b93      	ldr	r3, [pc, #588]	; (8006634 <UART_SetConfig+0x2cc>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d816      	bhi.n	8006420 <UART_SetConfig+0xb8>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x90>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006415 	.word	0x08006415
 8006400:	0800640f 	.word	0x0800640f
 8006404:	0800641b 	.word	0x0800641b
 8006408:	2301      	movs	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e150      	b.n	80066b0 <UART_SetConfig+0x348>
 800640e:	2302      	movs	r3, #2
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e14d      	b.n	80066b0 <UART_SetConfig+0x348>
 8006414:	2304      	movs	r3, #4
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e14a      	b.n	80066b0 <UART_SetConfig+0x348>
 800641a:	2308      	movs	r3, #8
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e147      	b.n	80066b0 <UART_SetConfig+0x348>
 8006420:	2310      	movs	r3, #16
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e144      	b.n	80066b0 <UART_SetConfig+0x348>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a83      	ldr	r2, [pc, #524]	; (8006638 <UART_SetConfig+0x2d0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d132      	bne.n	8006496 <UART_SetConfig+0x12e>
 8006430:	4b80      	ldr	r3, [pc, #512]	; (8006634 <UART_SetConfig+0x2cc>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d828      	bhi.n	8006490 <UART_SetConfig+0x128>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0xdc>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006479 	.word	0x08006479
 8006448:	08006491 	.word	0x08006491
 800644c:	08006491 	.word	0x08006491
 8006450:	08006491 	.word	0x08006491
 8006454:	08006485 	.word	0x08006485
 8006458:	08006491 	.word	0x08006491
 800645c:	08006491 	.word	0x08006491
 8006460:	08006491 	.word	0x08006491
 8006464:	0800647f 	.word	0x0800647f
 8006468:	08006491 	.word	0x08006491
 800646c:	08006491 	.word	0x08006491
 8006470:	08006491 	.word	0x08006491
 8006474:	0800648b 	.word	0x0800648b
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e118      	b.n	80066b0 <UART_SetConfig+0x348>
 800647e:	2302      	movs	r3, #2
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e115      	b.n	80066b0 <UART_SetConfig+0x348>
 8006484:	2304      	movs	r3, #4
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e112      	b.n	80066b0 <UART_SetConfig+0x348>
 800648a:	2308      	movs	r3, #8
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e10f      	b.n	80066b0 <UART_SetConfig+0x348>
 8006490:	2310      	movs	r3, #16
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e10c      	b.n	80066b0 <UART_SetConfig+0x348>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a68      	ldr	r2, [pc, #416]	; (800663c <UART_SetConfig+0x2d4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d120      	bne.n	80064e2 <UART_SetConfig+0x17a>
 80064a0:	4b64      	ldr	r3, [pc, #400]	; (8006634 <UART_SetConfig+0x2cc>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d013      	beq.n	80064d6 <UART_SetConfig+0x16e>
 80064ae:	2b30      	cmp	r3, #48	; 0x30
 80064b0:	d814      	bhi.n	80064dc <UART_SetConfig+0x174>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d009      	beq.n	80064ca <UART_SetConfig+0x162>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d810      	bhi.n	80064dc <UART_SetConfig+0x174>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <UART_SetConfig+0x15c>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d006      	beq.n	80064d0 <UART_SetConfig+0x168>
 80064c2:	e00b      	b.n	80064dc <UART_SetConfig+0x174>
 80064c4:	2300      	movs	r3, #0
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e0f2      	b.n	80066b0 <UART_SetConfig+0x348>
 80064ca:	2302      	movs	r3, #2
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e0ef      	b.n	80066b0 <UART_SetConfig+0x348>
 80064d0:	2304      	movs	r3, #4
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e0ec      	b.n	80066b0 <UART_SetConfig+0x348>
 80064d6:	2308      	movs	r3, #8
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e0e9      	b.n	80066b0 <UART_SetConfig+0x348>
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0e6      	b.n	80066b0 <UART_SetConfig+0x348>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a56      	ldr	r2, [pc, #344]	; (8006640 <UART_SetConfig+0x2d8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d120      	bne.n	800652e <UART_SetConfig+0x1c6>
 80064ec:	4b51      	ldr	r3, [pc, #324]	; (8006634 <UART_SetConfig+0x2cc>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064f6:	2bc0      	cmp	r3, #192	; 0xc0
 80064f8:	d013      	beq.n	8006522 <UART_SetConfig+0x1ba>
 80064fa:	2bc0      	cmp	r3, #192	; 0xc0
 80064fc:	d814      	bhi.n	8006528 <UART_SetConfig+0x1c0>
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d009      	beq.n	8006516 <UART_SetConfig+0x1ae>
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d810      	bhi.n	8006528 <UART_SetConfig+0x1c0>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <UART_SetConfig+0x1a8>
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d006      	beq.n	800651c <UART_SetConfig+0x1b4>
 800650e:	e00b      	b.n	8006528 <UART_SetConfig+0x1c0>
 8006510:	2300      	movs	r3, #0
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e0cc      	b.n	80066b0 <UART_SetConfig+0x348>
 8006516:	2302      	movs	r3, #2
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e0c9      	b.n	80066b0 <UART_SetConfig+0x348>
 800651c:	2304      	movs	r3, #4
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e0c6      	b.n	80066b0 <UART_SetConfig+0x348>
 8006522:	2308      	movs	r3, #8
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e0c3      	b.n	80066b0 <UART_SetConfig+0x348>
 8006528:	2310      	movs	r3, #16
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e0c0      	b.n	80066b0 <UART_SetConfig+0x348>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <UART_SetConfig+0x2dc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d125      	bne.n	8006584 <UART_SetConfig+0x21c>
 8006538:	4b3e      	ldr	r3, [pc, #248]	; (8006634 <UART_SetConfig+0x2cc>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006546:	d017      	beq.n	8006578 <UART_SetConfig+0x210>
 8006548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800654c:	d817      	bhi.n	800657e <UART_SetConfig+0x216>
 800654e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006552:	d00b      	beq.n	800656c <UART_SetConfig+0x204>
 8006554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006558:	d811      	bhi.n	800657e <UART_SetConfig+0x216>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <UART_SetConfig+0x1fe>
 800655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006562:	d006      	beq.n	8006572 <UART_SetConfig+0x20a>
 8006564:	e00b      	b.n	800657e <UART_SetConfig+0x216>
 8006566:	2300      	movs	r3, #0
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e0a1      	b.n	80066b0 <UART_SetConfig+0x348>
 800656c:	2302      	movs	r3, #2
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e09e      	b.n	80066b0 <UART_SetConfig+0x348>
 8006572:	2304      	movs	r3, #4
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e09b      	b.n	80066b0 <UART_SetConfig+0x348>
 8006578:	2308      	movs	r3, #8
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e098      	b.n	80066b0 <UART_SetConfig+0x348>
 800657e:	2310      	movs	r3, #16
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e095      	b.n	80066b0 <UART_SetConfig+0x348>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <UART_SetConfig+0x2e0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d125      	bne.n	80065da <UART_SetConfig+0x272>
 800658e:	4b29      	ldr	r3, [pc, #164]	; (8006634 <UART_SetConfig+0x2cc>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800659c:	d017      	beq.n	80065ce <UART_SetConfig+0x266>
 800659e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a2:	d817      	bhi.n	80065d4 <UART_SetConfig+0x26c>
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a8:	d00b      	beq.n	80065c2 <UART_SetConfig+0x25a>
 80065aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ae:	d811      	bhi.n	80065d4 <UART_SetConfig+0x26c>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <UART_SetConfig+0x254>
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d006      	beq.n	80065c8 <UART_SetConfig+0x260>
 80065ba:	e00b      	b.n	80065d4 <UART_SetConfig+0x26c>
 80065bc:	2301      	movs	r3, #1
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e076      	b.n	80066b0 <UART_SetConfig+0x348>
 80065c2:	2302      	movs	r3, #2
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e073      	b.n	80066b0 <UART_SetConfig+0x348>
 80065c8:	2304      	movs	r3, #4
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e070      	b.n	80066b0 <UART_SetConfig+0x348>
 80065ce:	2308      	movs	r3, #8
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e06d      	b.n	80066b0 <UART_SetConfig+0x348>
 80065d4:	2310      	movs	r3, #16
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e06a      	b.n	80066b0 <UART_SetConfig+0x348>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1b      	ldr	r2, [pc, #108]	; (800664c <UART_SetConfig+0x2e4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d138      	bne.n	8006656 <UART_SetConfig+0x2ee>
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <UART_SetConfig+0x2cc>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065f2:	d017      	beq.n	8006624 <UART_SetConfig+0x2bc>
 80065f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065f8:	d82a      	bhi.n	8006650 <UART_SetConfig+0x2e8>
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	d00b      	beq.n	8006618 <UART_SetConfig+0x2b0>
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006604:	d824      	bhi.n	8006650 <UART_SetConfig+0x2e8>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <UART_SetConfig+0x2aa>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d006      	beq.n	800661e <UART_SetConfig+0x2b6>
 8006610:	e01e      	b.n	8006650 <UART_SetConfig+0x2e8>
 8006612:	2300      	movs	r3, #0
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e04b      	b.n	80066b0 <UART_SetConfig+0x348>
 8006618:	2302      	movs	r3, #2
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e048      	b.n	80066b0 <UART_SetConfig+0x348>
 800661e:	2304      	movs	r3, #4
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e045      	b.n	80066b0 <UART_SetConfig+0x348>
 8006624:	2308      	movs	r3, #8
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e042      	b.n	80066b0 <UART_SetConfig+0x348>
 800662a:	bf00      	nop
 800662c:	efff69f3 	.word	0xefff69f3
 8006630:	40011000 	.word	0x40011000
 8006634:	40023800 	.word	0x40023800
 8006638:	40004400 	.word	0x40004400
 800663c:	40004800 	.word	0x40004800
 8006640:	40004c00 	.word	0x40004c00
 8006644:	40005000 	.word	0x40005000
 8006648:	40011400 	.word	0x40011400
 800664c:	40007800 	.word	0x40007800
 8006650:	2310      	movs	r3, #16
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e02c      	b.n	80066b0 <UART_SetConfig+0x348>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a72      	ldr	r2, [pc, #456]	; (8006824 <UART_SetConfig+0x4bc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d125      	bne.n	80066ac <UART_SetConfig+0x344>
 8006660:	4b71      	ldr	r3, [pc, #452]	; (8006828 <UART_SetConfig+0x4c0>)
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800666a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800666e:	d017      	beq.n	80066a0 <UART_SetConfig+0x338>
 8006670:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006674:	d817      	bhi.n	80066a6 <UART_SetConfig+0x33e>
 8006676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667a:	d00b      	beq.n	8006694 <UART_SetConfig+0x32c>
 800667c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006680:	d811      	bhi.n	80066a6 <UART_SetConfig+0x33e>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <UART_SetConfig+0x326>
 8006686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668a:	d006      	beq.n	800669a <UART_SetConfig+0x332>
 800668c:	e00b      	b.n	80066a6 <UART_SetConfig+0x33e>
 800668e:	2300      	movs	r3, #0
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e00d      	b.n	80066b0 <UART_SetConfig+0x348>
 8006694:	2302      	movs	r3, #2
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e00a      	b.n	80066b0 <UART_SetConfig+0x348>
 800669a:	2304      	movs	r3, #4
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e007      	b.n	80066b0 <UART_SetConfig+0x348>
 80066a0:	2308      	movs	r3, #8
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e004      	b.n	80066b0 <UART_SetConfig+0x348>
 80066a6:	2310      	movs	r3, #16
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e001      	b.n	80066b0 <UART_SetConfig+0x348>
 80066ac:	2310      	movs	r3, #16
 80066ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	d15b      	bne.n	8006772 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066ba:	7ffb      	ldrb	r3, [r7, #31]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d828      	bhi.n	8006712 <UART_SetConfig+0x3aa>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x360>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	08006713 	.word	0x08006713
 80066d8:	08006703 	.word	0x08006703
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006713 	.word	0x08006713
 80066e4:	08006713 	.word	0x08006713
 80066e8:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fe f89e 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 80066f0:	61b8      	str	r0, [r7, #24]
        break;
 80066f2:	e013      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f4:	f7fe f8ae 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 80066f8:	61b8      	str	r0, [r7, #24]
        break;
 80066fa:	e00f      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b4b      	ldr	r3, [pc, #300]	; (800682c <UART_SetConfig+0x4c4>)
 80066fe:	61bb      	str	r3, [r7, #24]
        break;
 8006700:	e00c      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fd ff81 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006706:	61b8      	str	r0, [r7, #24]
        break;
 8006708:	e008      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	61bb      	str	r3, [r7, #24]
        break;
 8006710:	e004      	b.n	800671c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	77bb      	strb	r3, [r7, #30]
        break;
 800671a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d074      	beq.n	800680c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	005a      	lsls	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	441a      	add	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b0f      	cmp	r3, #15
 800673c:	d916      	bls.n	800676c <UART_SetConfig+0x404>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006744:	d212      	bcs.n	800676c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f023 030f 	bic.w	r3, r3, #15
 800674e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	085b      	lsrs	r3, r3, #1
 8006754:	b29b      	uxth	r3, r3
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	b29a      	uxth	r2, r3
 800675c:	89fb      	ldrh	r3, [r7, #14]
 800675e:	4313      	orrs	r3, r2
 8006760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	89fa      	ldrh	r2, [r7, #14]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	e04f      	b.n	800680c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	77bb      	strb	r3, [r7, #30]
 8006770:	e04c      	b.n	800680c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d828      	bhi.n	80067ca <UART_SetConfig+0x462>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0x418>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067b5 	.word	0x080067b5
 800678c:	080067cb 	.word	0x080067cb
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067cb 	.word	0x080067cb
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
 80067a0:	080067c3 	.word	0x080067c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a4:	f7fe f842 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 80067a8:	61b8      	str	r0, [r7, #24]
        break;
 80067aa:	e013      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ac:	f7fe f852 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 80067b0:	61b8      	str	r0, [r7, #24]
        break;
 80067b2:	e00f      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <UART_SetConfig+0x4c4>)
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e00c      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ba:	f7fd ff25 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80067be:	61b8      	str	r0, [r7, #24]
        break;
 80067c0:	e008      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c6:	61bb      	str	r3, [r7, #24]
        break;
 80067c8:	e004      	b.n	80067d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	77bb      	strb	r3, [r7, #30]
        break;
 80067d2:	bf00      	nop
    }

    if (pclk != 0U)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	085a      	lsrs	r2, r3, #1
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	441a      	add	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d909      	bls.n	8006808 <UART_SetConfig+0x4a0>
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fa:	d205      	bcs.n	8006808 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e001      	b.n	800680c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006818:	7fbb      	ldrb	r3, [r7, #30]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40007c00 	.word	0x40007c00
 8006828:	40023800 	.word	0x40023800
 800682c:	00f42400 	.word	0x00f42400

08006830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01a      	beq.n	8006946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692e:	d10a      	bne.n	8006946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006984:	f7fb f9d6 	bl	8001d34 <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d10e      	bne.n	80069b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f831 	bl	8006a0e <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e027      	b.n	8006a06 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d10e      	bne.n	80069e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f81b 	bl	8006a0e <UART_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e011      	b.n	8006a06 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b09c      	sub	sp, #112	; 0x70
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1e:	e0a7      	b.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a26:	f000 80a3 	beq.w	8006b70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2a:	f7fb f983 	bl	8001d34 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d302      	bcc.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d13f      	bne.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a54:	667b      	str	r3, [r7, #100]	; 0x64
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e6      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	663b      	str	r3, [r7, #96]	; 0x60
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e5      	bne.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e068      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d050      	beq.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006adc:	d148      	bne.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
 8006b08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b3a:	623a      	str	r2, [r7, #32]
 8006b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	69f9      	ldr	r1, [r7, #28]
 8006b40:	6a3a      	ldr	r2, [r7, #32]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e5      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e010      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69da      	ldr	r2, [r3, #28]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	f43f af48 	beq.w	8006a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3770      	adds	r7, #112	; 0x70
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <__cvt>:
 8006b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b9c:	ed2d 8b02 	vpush	{d8}
 8006ba0:	eeb0 8b40 	vmov.f64	d8, d0
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	4617      	mov	r7, r2
 8006ba8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006baa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bac:	ee18 2a90 	vmov	r2, s17
 8006bb0:	f025 0520 	bic.w	r5, r5, #32
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	bfb6      	itet	lt
 8006bb8:	222d      	movlt	r2, #45	; 0x2d
 8006bba:	2200      	movge	r2, #0
 8006bbc:	eeb1 8b40 	vneglt.f64	d8, d0
 8006bc0:	2d46      	cmp	r5, #70	; 0x46
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	d004      	beq.n	8006bd2 <__cvt+0x38>
 8006bc8:	2d45      	cmp	r5, #69	; 0x45
 8006bca:	d100      	bne.n	8006bce <__cvt+0x34>
 8006bcc:	3401      	adds	r4, #1
 8006bce:	2102      	movs	r1, #2
 8006bd0:	e000      	b.n	8006bd4 <__cvt+0x3a>
 8006bd2:	2103      	movs	r1, #3
 8006bd4:	ab03      	add	r3, sp, #12
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	ab02      	add	r3, sp, #8
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4633      	mov	r3, r6
 8006be0:	eeb0 0b48 	vmov.f64	d0, d8
 8006be4:	f001 f850 	bl	8007c88 <_dtoa_r>
 8006be8:	2d47      	cmp	r5, #71	; 0x47
 8006bea:	d101      	bne.n	8006bf0 <__cvt+0x56>
 8006bec:	07fb      	lsls	r3, r7, #31
 8006bee:	d51a      	bpl.n	8006c26 <__cvt+0x8c>
 8006bf0:	2d46      	cmp	r5, #70	; 0x46
 8006bf2:	eb00 0204 	add.w	r2, r0, r4
 8006bf6:	d10c      	bne.n	8006c12 <__cvt+0x78>
 8006bf8:	7803      	ldrb	r3, [r0, #0]
 8006bfa:	2b30      	cmp	r3, #48	; 0x30
 8006bfc:	d107      	bne.n	8006c0e <__cvt+0x74>
 8006bfe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c06:	bf1c      	itt	ne
 8006c08:	f1c4 0401 	rsbne	r4, r4, #1
 8006c0c:	6034      	strne	r4, [r6, #0]
 8006c0e:	6833      	ldr	r3, [r6, #0]
 8006c10:	441a      	add	r2, r3
 8006c12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1a:	bf08      	it	eq
 8006c1c:	9203      	streq	r2, [sp, #12]
 8006c1e:	2130      	movs	r1, #48	; 0x30
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d307      	bcc.n	8006c36 <__cvt+0x9c>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c2a:	1a1b      	subs	r3, r3, r0
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	b005      	add	sp, #20
 8006c30:	ecbd 8b02 	vpop	{d8}
 8006c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c36:	1c5c      	adds	r4, r3, #1
 8006c38:	9403      	str	r4, [sp, #12]
 8006c3a:	7019      	strb	r1, [r3, #0]
 8006c3c:	e7f0      	b.n	8006c20 <__cvt+0x86>

08006c3e <__exponent>:
 8006c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c40:	4603      	mov	r3, r0
 8006c42:	2900      	cmp	r1, #0
 8006c44:	bfb8      	it	lt
 8006c46:	4249      	neglt	r1, r1
 8006c48:	f803 2b02 	strb.w	r2, [r3], #2
 8006c4c:	bfb4      	ite	lt
 8006c4e:	222d      	movlt	r2, #45	; 0x2d
 8006c50:	222b      	movge	r2, #43	; 0x2b
 8006c52:	2909      	cmp	r1, #9
 8006c54:	7042      	strb	r2, [r0, #1]
 8006c56:	dd2a      	ble.n	8006cae <__exponent+0x70>
 8006c58:	f10d 0207 	add.w	r2, sp, #7
 8006c5c:	4617      	mov	r7, r2
 8006c5e:	260a      	movs	r6, #10
 8006c60:	4694      	mov	ip, r2
 8006c62:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c66:	fb06 1415 	mls	r4, r6, r5, r1
 8006c6a:	3430      	adds	r4, #48	; 0x30
 8006c6c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c70:	460c      	mov	r4, r1
 8006c72:	2c63      	cmp	r4, #99	; 0x63
 8006c74:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c78:	4629      	mov	r1, r5
 8006c7a:	dcf1      	bgt.n	8006c60 <__exponent+0x22>
 8006c7c:	3130      	adds	r1, #48	; 0x30
 8006c7e:	f1ac 0402 	sub.w	r4, ip, #2
 8006c82:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c86:	1c41      	adds	r1, r0, #1
 8006c88:	4622      	mov	r2, r4
 8006c8a:	42ba      	cmp	r2, r7
 8006c8c:	d30a      	bcc.n	8006ca4 <__exponent+0x66>
 8006c8e:	f10d 0209 	add.w	r2, sp, #9
 8006c92:	eba2 020c 	sub.w	r2, r2, ip
 8006c96:	42bc      	cmp	r4, r7
 8006c98:	bf88      	it	hi
 8006c9a:	2200      	movhi	r2, #0
 8006c9c:	4413      	add	r3, r2
 8006c9e:	1a18      	subs	r0, r3, r0
 8006ca0:	b003      	add	sp, #12
 8006ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ca8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006cac:	e7ed      	b.n	8006c8a <__exponent+0x4c>
 8006cae:	2330      	movs	r3, #48	; 0x30
 8006cb0:	3130      	adds	r1, #48	; 0x30
 8006cb2:	7083      	strb	r3, [r0, #2]
 8006cb4:	70c1      	strb	r1, [r0, #3]
 8006cb6:	1d03      	adds	r3, r0, #4
 8006cb8:	e7f1      	b.n	8006c9e <__exponent+0x60>
 8006cba:	0000      	movs	r0, r0
 8006cbc:	0000      	movs	r0, r0
	...

08006cc0 <_printf_float>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	b08b      	sub	sp, #44	; 0x2c
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006ccc:	4616      	mov	r6, r2
 8006cce:	461f      	mov	r7, r3
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	f000 fed1 	bl	8007a78 <_localeconv_r>
 8006cd6:	f8d0 b000 	ldr.w	fp, [r0]
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f7f9 fb00 	bl	80002e0 <strlen>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9308      	str	r3, [sp, #32]
 8006ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	3307      	adds	r3, #7
 8006cf0:	f023 0307 	bic.w	r3, r3, #7
 8006cf4:	f103 0108 	add.w	r1, r3, #8
 8006cf8:	f8c8 1000 	str.w	r1, [r8]
 8006cfc:	ed93 0b00 	vldr	d0, [r3]
 8006d00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006f60 <_printf_float+0x2a0>
 8006d04:	eeb0 7bc0 	vabs.f64	d7, d0
 8006d08:	eeb4 7b46 	vcmp.f64	d7, d6
 8006d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006d14:	4682      	mov	sl, r0
 8006d16:	dd24      	ble.n	8006d62 <_printf_float+0xa2>
 8006d18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	d502      	bpl.n	8006d28 <_printf_float+0x68>
 8006d22:	232d      	movs	r3, #45	; 0x2d
 8006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d28:	498f      	ldr	r1, [pc, #572]	; (8006f68 <_printf_float+0x2a8>)
 8006d2a:	4b90      	ldr	r3, [pc, #576]	; (8006f6c <_printf_float+0x2ac>)
 8006d2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d30:	bf94      	ite	ls
 8006d32:	4688      	movls	r8, r1
 8006d34:	4698      	movhi	r8, r3
 8006d36:	2303      	movs	r3, #3
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	f022 0204 	bic.w	r2, r2, #4
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6022      	str	r2, [r4, #0]
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	9700      	str	r7, [sp, #0]
 8006d46:	4633      	mov	r3, r6
 8006d48:	aa09      	add	r2, sp, #36	; 0x24
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 f9d1 	bl	80070f4 <_printf_common>
 8006d52:	3001      	adds	r0, #1
 8006d54:	f040 808a 	bne.w	8006e6c <_printf_float+0x1ac>
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	b00b      	add	sp, #44	; 0x2c
 8006d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d62:	eeb4 0b40 	vcmp.f64	d0, d0
 8006d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6a:	d709      	bvc.n	8006d80 <_printf_float+0xc0>
 8006d6c:	ee10 3a90 	vmov	r3, s1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bfbc      	itt	lt
 8006d74:	232d      	movlt	r3, #45	; 0x2d
 8006d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d7a:	497d      	ldr	r1, [pc, #500]	; (8006f70 <_printf_float+0x2b0>)
 8006d7c:	4b7d      	ldr	r3, [pc, #500]	; (8006f74 <_printf_float+0x2b4>)
 8006d7e:	e7d5      	b.n	8006d2c <_printf_float+0x6c>
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d86:	9104      	str	r1, [sp, #16]
 8006d88:	1c59      	adds	r1, r3, #1
 8006d8a:	d13c      	bne.n	8006e06 <_printf_float+0x146>
 8006d8c:	2306      	movs	r3, #6
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	2300      	movs	r3, #0
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	ab08      	add	r3, sp, #32
 8006d96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d9e:	ab07      	add	r3, sp, #28
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	6022      	str	r2, [r4, #0]
 8006da6:	f10d 031b 	add.w	r3, sp, #27
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7ff fef5 	bl	8006b9a <__cvt>
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	9907      	ldr	r1, [sp, #28]
 8006db4:	2b47      	cmp	r3, #71	; 0x47
 8006db6:	4680      	mov	r8, r0
 8006db8:	d108      	bne.n	8006dcc <_printf_float+0x10c>
 8006dba:	1cc8      	adds	r0, r1, #3
 8006dbc:	db02      	blt.n	8006dc4 <_printf_float+0x104>
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	dd41      	ble.n	8006e48 <_printf_float+0x188>
 8006dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8006dc8:	fa5f f989 	uxtb.w	r9, r9
 8006dcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dd0:	d820      	bhi.n	8006e14 <_printf_float+0x154>
 8006dd2:	3901      	subs	r1, #1
 8006dd4:	464a      	mov	r2, r9
 8006dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dda:	9107      	str	r1, [sp, #28]
 8006ddc:	f7ff ff2f 	bl	8006c3e <__exponent>
 8006de0:	9a08      	ldr	r2, [sp, #32]
 8006de2:	9004      	str	r0, [sp, #16]
 8006de4:	1813      	adds	r3, r2, r0
 8006de6:	2a01      	cmp	r2, #1
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	dc02      	bgt.n	8006df2 <_printf_float+0x132>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	07d2      	lsls	r2, r2, #31
 8006df0:	d501      	bpl.n	8006df6 <_printf_float+0x136>
 8006df2:	3301      	adds	r3, #1
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0a2      	beq.n	8006d44 <_printf_float+0x84>
 8006dfe:	232d      	movs	r3, #45	; 0x2d
 8006e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e04:	e79e      	b.n	8006d44 <_printf_float+0x84>
 8006e06:	9904      	ldr	r1, [sp, #16]
 8006e08:	2947      	cmp	r1, #71	; 0x47
 8006e0a:	d1c1      	bne.n	8006d90 <_printf_float+0xd0>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1bf      	bne.n	8006d90 <_printf_float+0xd0>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e7bc      	b.n	8006d8e <_printf_float+0xce>
 8006e14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e18:	d118      	bne.n	8006e4c <_printf_float+0x18c>
 8006e1a:	2900      	cmp	r1, #0
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	dd0b      	ble.n	8006e38 <_printf_float+0x178>
 8006e20:	6121      	str	r1, [r4, #16]
 8006e22:	b913      	cbnz	r3, 8006e2a <_printf_float+0x16a>
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	07d0      	lsls	r0, r2, #31
 8006e28:	d502      	bpl.n	8006e30 <_printf_float+0x170>
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	440b      	add	r3, r1
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	2300      	movs	r3, #0
 8006e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	e7de      	b.n	8006df6 <_printf_float+0x136>
 8006e38:	b913      	cbnz	r3, 8006e40 <_printf_float+0x180>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	07d2      	lsls	r2, r2, #31
 8006e3e:	d501      	bpl.n	8006e44 <_printf_float+0x184>
 8006e40:	3302      	adds	r3, #2
 8006e42:	e7f4      	b.n	8006e2e <_printf_float+0x16e>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7f2      	b.n	8006e2e <_printf_float+0x16e>
 8006e48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	db05      	blt.n	8006e5e <_printf_float+0x19e>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6121      	str	r1, [r4, #16]
 8006e56:	07d8      	lsls	r0, r3, #31
 8006e58:	d5ea      	bpl.n	8006e30 <_printf_float+0x170>
 8006e5a:	1c4b      	adds	r3, r1, #1
 8006e5c:	e7e7      	b.n	8006e2e <_printf_float+0x16e>
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	bfd4      	ite	le
 8006e62:	f1c1 0202 	rsble	r2, r1, #2
 8006e66:	2201      	movgt	r2, #1
 8006e68:	4413      	add	r3, r2
 8006e6a:	e7e0      	b.n	8006e2e <_printf_float+0x16e>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	055a      	lsls	r2, r3, #21
 8006e70:	d407      	bmi.n	8006e82 <_printf_float+0x1c2>
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	4642      	mov	r2, r8
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d12a      	bne.n	8006ed6 <_printf_float+0x216>
 8006e80:	e76a      	b.n	8006d58 <_printf_float+0x98>
 8006e82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e86:	f240 80e0 	bls.w	800704a <_printf_float+0x38a>
 8006e8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e96:	d133      	bne.n	8006f00 <_printf_float+0x240>
 8006e98:	4a37      	ldr	r2, [pc, #220]	; (8006f78 <_printf_float+0x2b8>)
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f af58 	beq.w	8006d58 <_printf_float+0x98>
 8006ea8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	db02      	blt.n	8006eb6 <_printf_float+0x1f6>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	07d8      	lsls	r0, r3, #31
 8006eb4:	d50f      	bpl.n	8006ed6 <_printf_float+0x216>
 8006eb6:	4653      	mov	r3, sl
 8006eb8:	465a      	mov	r2, fp
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f af49 	beq.w	8006d58 <_printf_float+0x98>
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	f104 091a 	add.w	r9, r4, #26
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	4543      	cmp	r3, r8
 8006ed4:	dc09      	bgt.n	8006eea <_printf_float+0x22a>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	079b      	lsls	r3, r3, #30
 8006eda:	f100 8106 	bmi.w	80070ea <_printf_float+0x42a>
 8006ede:	68e0      	ldr	r0, [r4, #12]
 8006ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee2:	4298      	cmp	r0, r3
 8006ee4:	bfb8      	it	lt
 8006ee6:	4618      	movlt	r0, r3
 8006ee8:	e738      	b.n	8006d5c <_printf_float+0x9c>
 8006eea:	2301      	movs	r3, #1
 8006eec:	464a      	mov	r2, r9
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	f43f af2f 	beq.w	8006d58 <_printf_float+0x98>
 8006efa:	f108 0801 	add.w	r8, r8, #1
 8006efe:	e7e6      	b.n	8006ece <_printf_float+0x20e>
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	dc3a      	bgt.n	8006f7c <_printf_float+0x2bc>
 8006f06:	4a1c      	ldr	r2, [pc, #112]	; (8006f78 <_printf_float+0x2b8>)
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f af21 	beq.w	8006d58 <_printf_float+0x98>
 8006f16:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	d102      	bne.n	8006f24 <_printf_float+0x264>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	07d9      	lsls	r1, r3, #31
 8006f22:	d5d8      	bpl.n	8006ed6 <_printf_float+0x216>
 8006f24:	4653      	mov	r3, sl
 8006f26:	465a      	mov	r2, fp
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f af12 	beq.w	8006d58 <_printf_float+0x98>
 8006f34:	f04f 0900 	mov.w	r9, #0
 8006f38:	f104 0a1a 	add.w	sl, r4, #26
 8006f3c:	9b07      	ldr	r3, [sp, #28]
 8006f3e:	425b      	negs	r3, r3
 8006f40:	454b      	cmp	r3, r9
 8006f42:	dc01      	bgt.n	8006f48 <_printf_float+0x288>
 8006f44:	9b08      	ldr	r3, [sp, #32]
 8006f46:	e795      	b.n	8006e74 <_printf_float+0x1b4>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4652      	mov	r2, sl
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f af00 	beq.w	8006d58 <_printf_float+0x98>
 8006f58:	f109 0901 	add.w	r9, r9, #1
 8006f5c:	e7ee      	b.n	8006f3c <_printf_float+0x27c>
 8006f5e:	bf00      	nop
 8006f60:	ffffffff 	.word	0xffffffff
 8006f64:	7fefffff 	.word	0x7fefffff
 8006f68:	0800b180 	.word	0x0800b180
 8006f6c:	0800b184 	.word	0x0800b184
 8006f70:	0800b188 	.word	0x0800b188
 8006f74:	0800b18c 	.word	0x0800b18c
 8006f78:	0800b190 	.word	0x0800b190
 8006f7c:	9a08      	ldr	r2, [sp, #32]
 8006f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bfa8      	it	ge
 8006f84:	461a      	movge	r2, r3
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	4691      	mov	r9, r2
 8006f8a:	dc38      	bgt.n	8006ffe <_printf_float+0x33e>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9305      	str	r3, [sp, #20]
 8006f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f94:	f104 021a 	add.w	r2, r4, #26
 8006f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f9a:	9905      	ldr	r1, [sp, #20]
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	eba3 0309 	sub.w	r3, r3, r9
 8006fa2:	428b      	cmp	r3, r1
 8006fa4:	dc33      	bgt.n	800700e <_printf_float+0x34e>
 8006fa6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	db3c      	blt.n	8007028 <_printf_float+0x368>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	07da      	lsls	r2, r3, #31
 8006fb2:	d439      	bmi.n	8007028 <_printf_float+0x368>
 8006fb4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006fb8:	eba2 0903 	sub.w	r9, r2, r3
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	4591      	cmp	r9, r2
 8006fc2:	bfa8      	it	ge
 8006fc4:	4691      	movge	r9, r2
 8006fc6:	f1b9 0f00 	cmp.w	r9, #0
 8006fca:	dc35      	bgt.n	8007038 <_printf_float+0x378>
 8006fcc:	f04f 0800 	mov.w	r8, #0
 8006fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fd4:	f104 0a1a 	add.w	sl, r4, #26
 8006fd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	eba3 0309 	sub.w	r3, r3, r9
 8006fe2:	4543      	cmp	r3, r8
 8006fe4:	f77f af77 	ble.w	8006ed6 <_printf_float+0x216>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4652      	mov	r2, sl
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f aeb0 	beq.w	8006d58 <_printf_float+0x98>
 8006ff8:	f108 0801 	add.w	r8, r8, #1
 8006ffc:	e7ec      	b.n	8006fd8 <_printf_float+0x318>
 8006ffe:	4613      	mov	r3, r2
 8007000:	4631      	mov	r1, r6
 8007002:	4642      	mov	r2, r8
 8007004:	4628      	mov	r0, r5
 8007006:	47b8      	blx	r7
 8007008:	3001      	adds	r0, #1
 800700a:	d1bf      	bne.n	8006f8c <_printf_float+0x2cc>
 800700c:	e6a4      	b.n	8006d58 <_printf_float+0x98>
 800700e:	2301      	movs	r3, #1
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	9204      	str	r2, [sp, #16]
 8007016:	47b8      	blx	r7
 8007018:	3001      	adds	r0, #1
 800701a:	f43f ae9d 	beq.w	8006d58 <_printf_float+0x98>
 800701e:	9b05      	ldr	r3, [sp, #20]
 8007020:	9a04      	ldr	r2, [sp, #16]
 8007022:	3301      	adds	r3, #1
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	e7b7      	b.n	8006f98 <_printf_float+0x2d8>
 8007028:	4653      	mov	r3, sl
 800702a:	465a      	mov	r2, fp
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	d1be      	bne.n	8006fb4 <_printf_float+0x2f4>
 8007036:	e68f      	b.n	8006d58 <_printf_float+0x98>
 8007038:	9a04      	ldr	r2, [sp, #16]
 800703a:	464b      	mov	r3, r9
 800703c:	4442      	add	r2, r8
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	d1c1      	bne.n	8006fcc <_printf_float+0x30c>
 8007048:	e686      	b.n	8006d58 <_printf_float+0x98>
 800704a:	9a08      	ldr	r2, [sp, #32]
 800704c:	2a01      	cmp	r2, #1
 800704e:	dc01      	bgt.n	8007054 <_printf_float+0x394>
 8007050:	07db      	lsls	r3, r3, #31
 8007052:	d537      	bpl.n	80070c4 <_printf_float+0x404>
 8007054:	2301      	movs	r3, #1
 8007056:	4642      	mov	r2, r8
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	f43f ae7a 	beq.w	8006d58 <_printf_float+0x98>
 8007064:	4653      	mov	r3, sl
 8007066:	465a      	mov	r2, fp
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f ae72 	beq.w	8006d58 <_printf_float+0x98>
 8007074:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007078:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	d01a      	beq.n	80070ba <_printf_float+0x3fa>
 8007084:	3b01      	subs	r3, #1
 8007086:	f108 0201 	add.w	r2, r8, #1
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d10e      	bne.n	80070b2 <_printf_float+0x3f2>
 8007094:	e660      	b.n	8006d58 <_printf_float+0x98>
 8007096:	2301      	movs	r3, #1
 8007098:	464a      	mov	r2, r9
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae59 	beq.w	8006d58 <_printf_float+0x98>
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	9b08      	ldr	r3, [sp, #32]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4543      	cmp	r3, r8
 80070b0:	dcf1      	bgt.n	8007096 <_printf_float+0x3d6>
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070b8:	e6dd      	b.n	8006e76 <_printf_float+0x1b6>
 80070ba:	f04f 0800 	mov.w	r8, #0
 80070be:	f104 091a 	add.w	r9, r4, #26
 80070c2:	e7f2      	b.n	80070aa <_printf_float+0x3ea>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4642      	mov	r2, r8
 80070c8:	e7df      	b.n	800708a <_printf_float+0x3ca>
 80070ca:	2301      	movs	r3, #1
 80070cc:	464a      	mov	r2, r9
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f ae3f 	beq.w	8006d58 <_printf_float+0x98>
 80070da:	f108 0801 	add.w	r8, r8, #1
 80070de:	68e3      	ldr	r3, [r4, #12]
 80070e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070e2:	1a5b      	subs	r3, r3, r1
 80070e4:	4543      	cmp	r3, r8
 80070e6:	dcf0      	bgt.n	80070ca <_printf_float+0x40a>
 80070e8:	e6f9      	b.n	8006ede <_printf_float+0x21e>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	f104 0919 	add.w	r9, r4, #25
 80070f2:	e7f4      	b.n	80070de <_printf_float+0x41e>

080070f4 <_printf_common>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	4616      	mov	r6, r2
 80070fa:	4699      	mov	r9, r3
 80070fc:	688a      	ldr	r2, [r1, #8]
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007104:	4293      	cmp	r3, r2
 8007106:	bfb8      	it	lt
 8007108:	4613      	movlt	r3, r2
 800710a:	6033      	str	r3, [r6, #0]
 800710c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007110:	4607      	mov	r7, r0
 8007112:	460c      	mov	r4, r1
 8007114:	b10a      	cbz	r2, 800711a <_printf_common+0x26>
 8007116:	3301      	adds	r3, #1
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	0699      	lsls	r1, r3, #26
 800711e:	bf42      	ittt	mi
 8007120:	6833      	ldrmi	r3, [r6, #0]
 8007122:	3302      	addmi	r3, #2
 8007124:	6033      	strmi	r3, [r6, #0]
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	f015 0506 	ands.w	r5, r5, #6
 800712c:	d106      	bne.n	800713c <_printf_common+0x48>
 800712e:	f104 0a19 	add.w	sl, r4, #25
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	6832      	ldr	r2, [r6, #0]
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	42ab      	cmp	r3, r5
 800713a:	dc26      	bgt.n	800718a <_printf_common+0x96>
 800713c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007140:	1e13      	subs	r3, r2, #0
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	bf18      	it	ne
 8007146:	2301      	movne	r3, #1
 8007148:	0692      	lsls	r2, r2, #26
 800714a:	d42b      	bmi.n	80071a4 <_printf_common+0xb0>
 800714c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007150:	4649      	mov	r1, r9
 8007152:	4638      	mov	r0, r7
 8007154:	47c0      	blx	r8
 8007156:	3001      	adds	r0, #1
 8007158:	d01e      	beq.n	8007198 <_printf_common+0xa4>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	f003 0306 	and.w	r3, r3, #6
 8007162:	2b04      	cmp	r3, #4
 8007164:	bf02      	ittt	eq
 8007166:	68e5      	ldreq	r5, [r4, #12]
 8007168:	6833      	ldreq	r3, [r6, #0]
 800716a:	1aed      	subeq	r5, r5, r3
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	bf0c      	ite	eq
 8007170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007174:	2500      	movne	r5, #0
 8007176:	4293      	cmp	r3, r2
 8007178:	bfc4      	itt	gt
 800717a:	1a9b      	subgt	r3, r3, r2
 800717c:	18ed      	addgt	r5, r5, r3
 800717e:	2600      	movs	r6, #0
 8007180:	341a      	adds	r4, #26
 8007182:	42b5      	cmp	r5, r6
 8007184:	d11a      	bne.n	80071bc <_printf_common+0xc8>
 8007186:	2000      	movs	r0, #0
 8007188:	e008      	b.n	800719c <_printf_common+0xa8>
 800718a:	2301      	movs	r3, #1
 800718c:	4652      	mov	r2, sl
 800718e:	4649      	mov	r1, r9
 8007190:	4638      	mov	r0, r7
 8007192:	47c0      	blx	r8
 8007194:	3001      	adds	r0, #1
 8007196:	d103      	bne.n	80071a0 <_printf_common+0xac>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	3501      	adds	r5, #1
 80071a2:	e7c6      	b.n	8007132 <_printf_common+0x3e>
 80071a4:	18e1      	adds	r1, r4, r3
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	2030      	movs	r0, #48	; 0x30
 80071aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ae:	4422      	add	r2, r4
 80071b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071b8:	3302      	adds	r3, #2
 80071ba:	e7c7      	b.n	800714c <_printf_common+0x58>
 80071bc:	2301      	movs	r3, #1
 80071be:	4622      	mov	r2, r4
 80071c0:	4649      	mov	r1, r9
 80071c2:	4638      	mov	r0, r7
 80071c4:	47c0      	blx	r8
 80071c6:	3001      	adds	r0, #1
 80071c8:	d0e6      	beq.n	8007198 <_printf_common+0xa4>
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7d9      	b.n	8007182 <_printf_common+0x8e>
	...

080071d0 <_printf_i>:
 80071d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	7e0f      	ldrb	r7, [r1, #24]
 80071d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071d8:	2f78      	cmp	r7, #120	; 0x78
 80071da:	4691      	mov	r9, r2
 80071dc:	4680      	mov	r8, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	469a      	mov	sl, r3
 80071e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071e6:	d807      	bhi.n	80071f8 <_printf_i+0x28>
 80071e8:	2f62      	cmp	r7, #98	; 0x62
 80071ea:	d80a      	bhi.n	8007202 <_printf_i+0x32>
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	f000 80d4 	beq.w	800739a <_printf_i+0x1ca>
 80071f2:	2f58      	cmp	r7, #88	; 0x58
 80071f4:	f000 80c0 	beq.w	8007378 <_printf_i+0x1a8>
 80071f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007200:	e03a      	b.n	8007278 <_printf_i+0xa8>
 8007202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007206:	2b15      	cmp	r3, #21
 8007208:	d8f6      	bhi.n	80071f8 <_printf_i+0x28>
 800720a:	a101      	add	r1, pc, #4	; (adr r1, 8007210 <_printf_i+0x40>)
 800720c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007210:	08007269 	.word	0x08007269
 8007214:	0800727d 	.word	0x0800727d
 8007218:	080071f9 	.word	0x080071f9
 800721c:	080071f9 	.word	0x080071f9
 8007220:	080071f9 	.word	0x080071f9
 8007224:	080071f9 	.word	0x080071f9
 8007228:	0800727d 	.word	0x0800727d
 800722c:	080071f9 	.word	0x080071f9
 8007230:	080071f9 	.word	0x080071f9
 8007234:	080071f9 	.word	0x080071f9
 8007238:	080071f9 	.word	0x080071f9
 800723c:	08007381 	.word	0x08007381
 8007240:	080072a9 	.word	0x080072a9
 8007244:	0800733b 	.word	0x0800733b
 8007248:	080071f9 	.word	0x080071f9
 800724c:	080071f9 	.word	0x080071f9
 8007250:	080073a3 	.word	0x080073a3
 8007254:	080071f9 	.word	0x080071f9
 8007258:	080072a9 	.word	0x080072a9
 800725c:	080071f9 	.word	0x080071f9
 8007260:	080071f9 	.word	0x080071f9
 8007264:	08007343 	.word	0x08007343
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	602a      	str	r2, [r5, #0]
 8007270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007278:	2301      	movs	r3, #1
 800727a:	e09f      	b.n	80073bc <_printf_i+0x1ec>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	0607      	lsls	r7, r0, #24
 8007282:	f103 0104 	add.w	r1, r3, #4
 8007286:	6029      	str	r1, [r5, #0]
 8007288:	d501      	bpl.n	800728e <_printf_i+0xbe>
 800728a:	681e      	ldr	r6, [r3, #0]
 800728c:	e003      	b.n	8007296 <_printf_i+0xc6>
 800728e:	0646      	lsls	r6, r0, #25
 8007290:	d5fb      	bpl.n	800728a <_printf_i+0xba>
 8007292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007296:	2e00      	cmp	r6, #0
 8007298:	da03      	bge.n	80072a2 <_printf_i+0xd2>
 800729a:	232d      	movs	r3, #45	; 0x2d
 800729c:	4276      	negs	r6, r6
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	485a      	ldr	r0, [pc, #360]	; (800740c <_printf_i+0x23c>)
 80072a4:	230a      	movs	r3, #10
 80072a6:	e012      	b.n	80072ce <_printf_i+0xfe>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	6820      	ldr	r0, [r4, #0]
 80072ac:	1d19      	adds	r1, r3, #4
 80072ae:	6029      	str	r1, [r5, #0]
 80072b0:	0605      	lsls	r5, r0, #24
 80072b2:	d501      	bpl.n	80072b8 <_printf_i+0xe8>
 80072b4:	681e      	ldr	r6, [r3, #0]
 80072b6:	e002      	b.n	80072be <_printf_i+0xee>
 80072b8:	0641      	lsls	r1, r0, #25
 80072ba:	d5fb      	bpl.n	80072b4 <_printf_i+0xe4>
 80072bc:	881e      	ldrh	r6, [r3, #0]
 80072be:	4853      	ldr	r0, [pc, #332]	; (800740c <_printf_i+0x23c>)
 80072c0:	2f6f      	cmp	r7, #111	; 0x6f
 80072c2:	bf0c      	ite	eq
 80072c4:	2308      	moveq	r3, #8
 80072c6:	230a      	movne	r3, #10
 80072c8:	2100      	movs	r1, #0
 80072ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ce:	6865      	ldr	r5, [r4, #4]
 80072d0:	60a5      	str	r5, [r4, #8]
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	bfa2      	ittt	ge
 80072d6:	6821      	ldrge	r1, [r4, #0]
 80072d8:	f021 0104 	bicge.w	r1, r1, #4
 80072dc:	6021      	strge	r1, [r4, #0]
 80072de:	b90e      	cbnz	r6, 80072e4 <_printf_i+0x114>
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d04b      	beq.n	800737c <_printf_i+0x1ac>
 80072e4:	4615      	mov	r5, r2
 80072e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ea:	fb03 6711 	mls	r7, r3, r1, r6
 80072ee:	5dc7      	ldrb	r7, [r0, r7]
 80072f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072f4:	4637      	mov	r7, r6
 80072f6:	42bb      	cmp	r3, r7
 80072f8:	460e      	mov	r6, r1
 80072fa:	d9f4      	bls.n	80072e6 <_printf_i+0x116>
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d10b      	bne.n	8007318 <_printf_i+0x148>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	07de      	lsls	r6, r3, #31
 8007304:	d508      	bpl.n	8007318 <_printf_i+0x148>
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	6861      	ldr	r1, [r4, #4]
 800730a:	4299      	cmp	r1, r3
 800730c:	bfde      	ittt	le
 800730e:	2330      	movle	r3, #48	; 0x30
 8007310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007314:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007318:	1b52      	subs	r2, r2, r5
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	f8cd a000 	str.w	sl, [sp]
 8007320:	464b      	mov	r3, r9
 8007322:	aa03      	add	r2, sp, #12
 8007324:	4621      	mov	r1, r4
 8007326:	4640      	mov	r0, r8
 8007328:	f7ff fee4 	bl	80070f4 <_printf_common>
 800732c:	3001      	adds	r0, #1
 800732e:	d14a      	bne.n	80073c6 <_printf_i+0x1f6>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	b004      	add	sp, #16
 8007336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f043 0320 	orr.w	r3, r3, #32
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	4833      	ldr	r0, [pc, #204]	; (8007410 <_printf_i+0x240>)
 8007344:	2778      	movs	r7, #120	; 0x78
 8007346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	6829      	ldr	r1, [r5, #0]
 800734e:	061f      	lsls	r7, r3, #24
 8007350:	f851 6b04 	ldr.w	r6, [r1], #4
 8007354:	d402      	bmi.n	800735c <_printf_i+0x18c>
 8007356:	065f      	lsls	r7, r3, #25
 8007358:	bf48      	it	mi
 800735a:	b2b6      	uxthmi	r6, r6
 800735c:	07df      	lsls	r7, r3, #31
 800735e:	bf48      	it	mi
 8007360:	f043 0320 	orrmi.w	r3, r3, #32
 8007364:	6029      	str	r1, [r5, #0]
 8007366:	bf48      	it	mi
 8007368:	6023      	strmi	r3, [r4, #0]
 800736a:	b91e      	cbnz	r6, 8007374 <_printf_i+0x1a4>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	f023 0320 	bic.w	r3, r3, #32
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	2310      	movs	r3, #16
 8007376:	e7a7      	b.n	80072c8 <_printf_i+0xf8>
 8007378:	4824      	ldr	r0, [pc, #144]	; (800740c <_printf_i+0x23c>)
 800737a:	e7e4      	b.n	8007346 <_printf_i+0x176>
 800737c:	4615      	mov	r5, r2
 800737e:	e7bd      	b.n	80072fc <_printf_i+0x12c>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	6826      	ldr	r6, [r4, #0]
 8007384:	6961      	ldr	r1, [r4, #20]
 8007386:	1d18      	adds	r0, r3, #4
 8007388:	6028      	str	r0, [r5, #0]
 800738a:	0635      	lsls	r5, r6, #24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	d501      	bpl.n	8007394 <_printf_i+0x1c4>
 8007390:	6019      	str	r1, [r3, #0]
 8007392:	e002      	b.n	800739a <_printf_i+0x1ca>
 8007394:	0670      	lsls	r0, r6, #25
 8007396:	d5fb      	bpl.n	8007390 <_printf_i+0x1c0>
 8007398:	8019      	strh	r1, [r3, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	4615      	mov	r5, r2
 80073a0:	e7bc      	b.n	800731c <_printf_i+0x14c>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	681d      	ldr	r5, [r3, #0]
 80073aa:	6862      	ldr	r2, [r4, #4]
 80073ac:	2100      	movs	r1, #0
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7f8 ff46 	bl	8000240 <memchr>
 80073b4:	b108      	cbz	r0, 80073ba <_printf_i+0x1ea>
 80073b6:	1b40      	subs	r0, r0, r5
 80073b8:	6060      	str	r0, [r4, #4]
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	2300      	movs	r3, #0
 80073c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c4:	e7aa      	b.n	800731c <_printf_i+0x14c>
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4649      	mov	r1, r9
 80073cc:	4640      	mov	r0, r8
 80073ce:	47d0      	blx	sl
 80073d0:	3001      	adds	r0, #1
 80073d2:	d0ad      	beq.n	8007330 <_printf_i+0x160>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	079b      	lsls	r3, r3, #30
 80073d8:	d413      	bmi.n	8007402 <_printf_i+0x232>
 80073da:	68e0      	ldr	r0, [r4, #12]
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	4298      	cmp	r0, r3
 80073e0:	bfb8      	it	lt
 80073e2:	4618      	movlt	r0, r3
 80073e4:	e7a6      	b.n	8007334 <_printf_i+0x164>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4632      	mov	r2, r6
 80073ea:	4649      	mov	r1, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	47d0      	blx	sl
 80073f0:	3001      	adds	r0, #1
 80073f2:	d09d      	beq.n	8007330 <_printf_i+0x160>
 80073f4:	3501      	adds	r5, #1
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	9903      	ldr	r1, [sp, #12]
 80073fa:	1a5b      	subs	r3, r3, r1
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	dcf2      	bgt.n	80073e6 <_printf_i+0x216>
 8007400:	e7eb      	b.n	80073da <_printf_i+0x20a>
 8007402:	2500      	movs	r5, #0
 8007404:	f104 0619 	add.w	r6, r4, #25
 8007408:	e7f5      	b.n	80073f6 <_printf_i+0x226>
 800740a:	bf00      	nop
 800740c:	0800b192 	.word	0x0800b192
 8007410:	0800b1a3 	.word	0x0800b1a3

08007414 <_scanf_float>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	b087      	sub	sp, #28
 800741a:	4617      	mov	r7, r2
 800741c:	9303      	str	r3, [sp, #12]
 800741e:	688b      	ldr	r3, [r1, #8]
 8007420:	1e5a      	subs	r2, r3, #1
 8007422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007426:	bf83      	ittte	hi
 8007428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800742c:	195b      	addhi	r3, r3, r5
 800742e:	9302      	strhi	r3, [sp, #8]
 8007430:	2300      	movls	r3, #0
 8007432:	bf86      	itte	hi
 8007434:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007438:	608b      	strhi	r3, [r1, #8]
 800743a:	9302      	strls	r3, [sp, #8]
 800743c:	680b      	ldr	r3, [r1, #0]
 800743e:	468b      	mov	fp, r1
 8007440:	2500      	movs	r5, #0
 8007442:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007446:	f84b 3b1c 	str.w	r3, [fp], #28
 800744a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800744e:	4680      	mov	r8, r0
 8007450:	460c      	mov	r4, r1
 8007452:	465e      	mov	r6, fp
 8007454:	46aa      	mov	sl, r5
 8007456:	46a9      	mov	r9, r5
 8007458:	9501      	str	r5, [sp, #4]
 800745a:	68a2      	ldr	r2, [r4, #8]
 800745c:	b152      	cbz	r2, 8007474 <_scanf_float+0x60>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b4e      	cmp	r3, #78	; 0x4e
 8007464:	d864      	bhi.n	8007530 <_scanf_float+0x11c>
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d83c      	bhi.n	80074e4 <_scanf_float+0xd0>
 800746a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800746e:	b2c8      	uxtb	r0, r1
 8007470:	280e      	cmp	r0, #14
 8007472:	d93a      	bls.n	80074ea <_scanf_float+0xd6>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	d003      	beq.n	8007482 <_scanf_float+0x6e>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007486:	f1ba 0f01 	cmp.w	sl, #1
 800748a:	f200 8113 	bhi.w	80076b4 <_scanf_float+0x2a0>
 800748e:	455e      	cmp	r6, fp
 8007490:	f200 8105 	bhi.w	800769e <_scanf_float+0x28a>
 8007494:	2501      	movs	r5, #1
 8007496:	4628      	mov	r0, r5
 8007498:	b007      	add	sp, #28
 800749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80074a2:	2a0d      	cmp	r2, #13
 80074a4:	d8e6      	bhi.n	8007474 <_scanf_float+0x60>
 80074a6:	a101      	add	r1, pc, #4	; (adr r1, 80074ac <_scanf_float+0x98>)
 80074a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074ac:	080075eb 	.word	0x080075eb
 80074b0:	08007475 	.word	0x08007475
 80074b4:	08007475 	.word	0x08007475
 80074b8:	08007475 	.word	0x08007475
 80074bc:	0800764b 	.word	0x0800764b
 80074c0:	08007623 	.word	0x08007623
 80074c4:	08007475 	.word	0x08007475
 80074c8:	08007475 	.word	0x08007475
 80074cc:	080075f9 	.word	0x080075f9
 80074d0:	08007475 	.word	0x08007475
 80074d4:	08007475 	.word	0x08007475
 80074d8:	08007475 	.word	0x08007475
 80074dc:	08007475 	.word	0x08007475
 80074e0:	080075b1 	.word	0x080075b1
 80074e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80074e8:	e7db      	b.n	80074a2 <_scanf_float+0x8e>
 80074ea:	290e      	cmp	r1, #14
 80074ec:	d8c2      	bhi.n	8007474 <_scanf_float+0x60>
 80074ee:	a001      	add	r0, pc, #4	; (adr r0, 80074f4 <_scanf_float+0xe0>)
 80074f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074f4:	080075a3 	.word	0x080075a3
 80074f8:	08007475 	.word	0x08007475
 80074fc:	080075a3 	.word	0x080075a3
 8007500:	08007637 	.word	0x08007637
 8007504:	08007475 	.word	0x08007475
 8007508:	08007551 	.word	0x08007551
 800750c:	0800758d 	.word	0x0800758d
 8007510:	0800758d 	.word	0x0800758d
 8007514:	0800758d 	.word	0x0800758d
 8007518:	0800758d 	.word	0x0800758d
 800751c:	0800758d 	.word	0x0800758d
 8007520:	0800758d 	.word	0x0800758d
 8007524:	0800758d 	.word	0x0800758d
 8007528:	0800758d 	.word	0x0800758d
 800752c:	0800758d 	.word	0x0800758d
 8007530:	2b6e      	cmp	r3, #110	; 0x6e
 8007532:	d809      	bhi.n	8007548 <_scanf_float+0x134>
 8007534:	2b60      	cmp	r3, #96	; 0x60
 8007536:	d8b2      	bhi.n	800749e <_scanf_float+0x8a>
 8007538:	2b54      	cmp	r3, #84	; 0x54
 800753a:	d077      	beq.n	800762c <_scanf_float+0x218>
 800753c:	2b59      	cmp	r3, #89	; 0x59
 800753e:	d199      	bne.n	8007474 <_scanf_float+0x60>
 8007540:	2d07      	cmp	r5, #7
 8007542:	d197      	bne.n	8007474 <_scanf_float+0x60>
 8007544:	2508      	movs	r5, #8
 8007546:	e029      	b.n	800759c <_scanf_float+0x188>
 8007548:	2b74      	cmp	r3, #116	; 0x74
 800754a:	d06f      	beq.n	800762c <_scanf_float+0x218>
 800754c:	2b79      	cmp	r3, #121	; 0x79
 800754e:	e7f6      	b.n	800753e <_scanf_float+0x12a>
 8007550:	6821      	ldr	r1, [r4, #0]
 8007552:	05c8      	lsls	r0, r1, #23
 8007554:	d51a      	bpl.n	800758c <_scanf_float+0x178>
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800755c:	6021      	str	r1, [r4, #0]
 800755e:	f109 0901 	add.w	r9, r9, #1
 8007562:	b11b      	cbz	r3, 800756c <_scanf_float+0x158>
 8007564:	3b01      	subs	r3, #1
 8007566:	3201      	adds	r2, #1
 8007568:	9302      	str	r3, [sp, #8]
 800756a:	60a2      	str	r2, [r4, #8]
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	3b01      	subs	r3, #1
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	3301      	adds	r3, #1
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3b01      	subs	r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	f340 8084 	ble.w	800768c <_scanf_float+0x278>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	603b      	str	r3, [r7, #0]
 800758a:	e766      	b.n	800745a <_scanf_float+0x46>
 800758c:	eb1a 0f05 	cmn.w	sl, r5
 8007590:	f47f af70 	bne.w	8007474 <_scanf_float+0x60>
 8007594:	6822      	ldr	r2, [r4, #0]
 8007596:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800759a:	6022      	str	r2, [r4, #0]
 800759c:	f806 3b01 	strb.w	r3, [r6], #1
 80075a0:	e7e4      	b.n	800756c <_scanf_float+0x158>
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	0610      	lsls	r0, r2, #24
 80075a6:	f57f af65 	bpl.w	8007474 <_scanf_float+0x60>
 80075aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ae:	e7f4      	b.n	800759a <_scanf_float+0x186>
 80075b0:	f1ba 0f00 	cmp.w	sl, #0
 80075b4:	d10e      	bne.n	80075d4 <_scanf_float+0x1c0>
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	d10e      	bne.n	80075da <_scanf_float+0x1c6>
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80075c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80075c6:	d108      	bne.n	80075da <_scanf_float+0x1c6>
 80075c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075cc:	6022      	str	r2, [r4, #0]
 80075ce:	f04f 0a01 	mov.w	sl, #1
 80075d2:	e7e3      	b.n	800759c <_scanf_float+0x188>
 80075d4:	f1ba 0f02 	cmp.w	sl, #2
 80075d8:	d055      	beq.n	8007686 <_scanf_float+0x272>
 80075da:	2d01      	cmp	r5, #1
 80075dc:	d002      	beq.n	80075e4 <_scanf_float+0x1d0>
 80075de:	2d04      	cmp	r5, #4
 80075e0:	f47f af48 	bne.w	8007474 <_scanf_float+0x60>
 80075e4:	3501      	adds	r5, #1
 80075e6:	b2ed      	uxtb	r5, r5
 80075e8:	e7d8      	b.n	800759c <_scanf_float+0x188>
 80075ea:	f1ba 0f01 	cmp.w	sl, #1
 80075ee:	f47f af41 	bne.w	8007474 <_scanf_float+0x60>
 80075f2:	f04f 0a02 	mov.w	sl, #2
 80075f6:	e7d1      	b.n	800759c <_scanf_float+0x188>
 80075f8:	b97d      	cbnz	r5, 800761a <_scanf_float+0x206>
 80075fa:	f1b9 0f00 	cmp.w	r9, #0
 80075fe:	f47f af3c 	bne.w	800747a <_scanf_float+0x66>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800760c:	f47f af39 	bne.w	8007482 <_scanf_float+0x6e>
 8007610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	2501      	movs	r5, #1
 8007618:	e7c0      	b.n	800759c <_scanf_float+0x188>
 800761a:	2d03      	cmp	r5, #3
 800761c:	d0e2      	beq.n	80075e4 <_scanf_float+0x1d0>
 800761e:	2d05      	cmp	r5, #5
 8007620:	e7de      	b.n	80075e0 <_scanf_float+0x1cc>
 8007622:	2d02      	cmp	r5, #2
 8007624:	f47f af26 	bne.w	8007474 <_scanf_float+0x60>
 8007628:	2503      	movs	r5, #3
 800762a:	e7b7      	b.n	800759c <_scanf_float+0x188>
 800762c:	2d06      	cmp	r5, #6
 800762e:	f47f af21 	bne.w	8007474 <_scanf_float+0x60>
 8007632:	2507      	movs	r5, #7
 8007634:	e7b2      	b.n	800759c <_scanf_float+0x188>
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	0591      	lsls	r1, r2, #22
 800763a:	f57f af1b 	bpl.w	8007474 <_scanf_float+0x60>
 800763e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	f8cd 9004 	str.w	r9, [sp, #4]
 8007648:	e7a8      	b.n	800759c <_scanf_float+0x188>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007654:	d006      	beq.n	8007664 <_scanf_float+0x250>
 8007656:	0550      	lsls	r0, r2, #21
 8007658:	f57f af0c 	bpl.w	8007474 <_scanf_float+0x60>
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	f43f af0f 	beq.w	8007482 <_scanf_float+0x6e>
 8007664:	0591      	lsls	r1, r2, #22
 8007666:	bf58      	it	pl
 8007668:	9901      	ldrpl	r1, [sp, #4]
 800766a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800766e:	bf58      	it	pl
 8007670:	eba9 0101 	subpl.w	r1, r9, r1
 8007674:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007678:	bf58      	it	pl
 800767a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	e78a      	b.n	800759c <_scanf_float+0x188>
 8007686:	f04f 0a03 	mov.w	sl, #3
 800768a:	e787      	b.n	800759c <_scanf_float+0x188>
 800768c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007690:	4639      	mov	r1, r7
 8007692:	4640      	mov	r0, r8
 8007694:	4798      	blx	r3
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f aedf 	beq.w	800745a <_scanf_float+0x46>
 800769c:	e6ea      	b.n	8007474 <_scanf_float+0x60>
 800769e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076a6:	463a      	mov	r2, r7
 80076a8:	4640      	mov	r0, r8
 80076aa:	4798      	blx	r3
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	e6ec      	b.n	800748e <_scanf_float+0x7a>
 80076b4:	1e6b      	subs	r3, r5, #1
 80076b6:	2b06      	cmp	r3, #6
 80076b8:	d825      	bhi.n	8007706 <_scanf_float+0x2f2>
 80076ba:	2d02      	cmp	r5, #2
 80076bc:	d836      	bhi.n	800772c <_scanf_float+0x318>
 80076be:	455e      	cmp	r6, fp
 80076c0:	f67f aee8 	bls.w	8007494 <_scanf_float+0x80>
 80076c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076cc:	463a      	mov	r2, r7
 80076ce:	4640      	mov	r0, r8
 80076d0:	4798      	blx	r3
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	e7f1      	b.n	80076be <_scanf_float+0x2aa>
 80076da:	9802      	ldr	r0, [sp, #8]
 80076dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	463a      	mov	r2, r7
 80076e8:	4640      	mov	r0, r8
 80076ea:	4798      	blx	r3
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076f6:	fa5f fa8a 	uxtb.w	sl, sl
 80076fa:	f1ba 0f02 	cmp.w	sl, #2
 80076fe:	d1ec      	bne.n	80076da <_scanf_float+0x2c6>
 8007700:	3d03      	subs	r5, #3
 8007702:	b2ed      	uxtb	r5, r5
 8007704:	1b76      	subs	r6, r6, r5
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	05da      	lsls	r2, r3, #23
 800770a:	d52f      	bpl.n	800776c <_scanf_float+0x358>
 800770c:	055b      	lsls	r3, r3, #21
 800770e:	d510      	bpl.n	8007732 <_scanf_float+0x31e>
 8007710:	455e      	cmp	r6, fp
 8007712:	f67f aebf 	bls.w	8007494 <_scanf_float+0x80>
 8007716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800771a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800771e:	463a      	mov	r2, r7
 8007720:	4640      	mov	r0, r8
 8007722:	4798      	blx	r3
 8007724:	6923      	ldr	r3, [r4, #16]
 8007726:	3b01      	subs	r3, #1
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	e7f1      	b.n	8007710 <_scanf_float+0x2fc>
 800772c:	46aa      	mov	sl, r5
 800772e:	9602      	str	r6, [sp, #8]
 8007730:	e7df      	b.n	80076f2 <_scanf_float+0x2de>
 8007732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	2965      	cmp	r1, #101	; 0x65
 800773a:	f103 33ff 	add.w	r3, r3, #4294967295
 800773e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007742:	6123      	str	r3, [r4, #16]
 8007744:	d00c      	beq.n	8007760 <_scanf_float+0x34c>
 8007746:	2945      	cmp	r1, #69	; 0x45
 8007748:	d00a      	beq.n	8007760 <_scanf_float+0x34c>
 800774a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800774e:	463a      	mov	r2, r7
 8007750:	4640      	mov	r0, r8
 8007752:	4798      	blx	r3
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800775a:	3b01      	subs	r3, #1
 800775c:	1eb5      	subs	r5, r6, #2
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007764:	463a      	mov	r2, r7
 8007766:	4640      	mov	r0, r8
 8007768:	4798      	blx	r3
 800776a:	462e      	mov	r6, r5
 800776c:	6825      	ldr	r5, [r4, #0]
 800776e:	f015 0510 	ands.w	r5, r5, #16
 8007772:	d14d      	bne.n	8007810 <_scanf_float+0x3fc>
 8007774:	7035      	strb	r5, [r6, #0]
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800777c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007780:	d11a      	bne.n	80077b8 <_scanf_float+0x3a4>
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	454b      	cmp	r3, r9
 8007786:	eba3 0209 	sub.w	r2, r3, r9
 800778a:	d122      	bne.n	80077d2 <_scanf_float+0x3be>
 800778c:	2200      	movs	r2, #0
 800778e:	4659      	mov	r1, fp
 8007790:	4640      	mov	r0, r8
 8007792:	f002 fb5b 	bl	8009e4c <_strtod_r>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	6821      	ldr	r1, [r4, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f011 0f02 	tst.w	r1, #2
 80077a0:	f103 0204 	add.w	r2, r3, #4
 80077a4:	d020      	beq.n	80077e8 <_scanf_float+0x3d4>
 80077a6:	9903      	ldr	r1, [sp, #12]
 80077a8:	600a      	str	r2, [r1, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	ed83 0b00 	vstr	d0, [r3]
 80077b0:	68e3      	ldr	r3, [r4, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60e3      	str	r3, [r4, #12]
 80077b6:	e66e      	b.n	8007496 <_scanf_float+0x82>
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0e6      	beq.n	800778c <_scanf_float+0x378>
 80077be:	9905      	ldr	r1, [sp, #20]
 80077c0:	230a      	movs	r3, #10
 80077c2:	462a      	mov	r2, r5
 80077c4:	3101      	adds	r1, #1
 80077c6:	4640      	mov	r0, r8
 80077c8:	f002 fbc8 	bl	8009f5c <_strtol_r>
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	9e05      	ldr	r6, [sp, #20]
 80077d0:	1ac2      	subs	r2, r0, r3
 80077d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80077d6:	429e      	cmp	r6, r3
 80077d8:	bf28      	it	cs
 80077da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80077de:	490d      	ldr	r1, [pc, #52]	; (8007814 <_scanf_float+0x400>)
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 f8dd 	bl	80079a0 <siprintf>
 80077e6:	e7d1      	b.n	800778c <_scanf_float+0x378>
 80077e8:	f011 0f04 	tst.w	r1, #4
 80077ec:	9903      	ldr	r1, [sp, #12]
 80077ee:	600a      	str	r2, [r1, #0]
 80077f0:	d1db      	bne.n	80077aa <_scanf_float+0x396>
 80077f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80077f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077fa:	681e      	ldr	r6, [r3, #0]
 80077fc:	d705      	bvc.n	800780a <_scanf_float+0x3f6>
 80077fe:	4806      	ldr	r0, [pc, #24]	; (8007818 <_scanf_float+0x404>)
 8007800:	f000 f9b2 	bl	8007b68 <nanf>
 8007804:	ed86 0a00 	vstr	s0, [r6]
 8007808:	e7d2      	b.n	80077b0 <_scanf_float+0x39c>
 800780a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800780e:	e7f9      	b.n	8007804 <_scanf_float+0x3f0>
 8007810:	2500      	movs	r5, #0
 8007812:	e640      	b.n	8007496 <_scanf_float+0x82>
 8007814:	0800b1b4 	.word	0x0800b1b4
 8007818:	0800b545 	.word	0x0800b545

0800781c <std>:
 800781c:	2300      	movs	r3, #0
 800781e:	b510      	push	{r4, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	e9c0 3300 	strd	r3, r3, [r0]
 8007826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782a:	6083      	str	r3, [r0, #8]
 800782c:	8181      	strh	r1, [r0, #12]
 800782e:	6643      	str	r3, [r0, #100]	; 0x64
 8007830:	81c2      	strh	r2, [r0, #14]
 8007832:	6183      	str	r3, [r0, #24]
 8007834:	4619      	mov	r1, r3
 8007836:	2208      	movs	r2, #8
 8007838:	305c      	adds	r0, #92	; 0x5c
 800783a:	f000 f914 	bl	8007a66 <memset>
 800783e:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <std+0x58>)
 8007840:	6263      	str	r3, [r4, #36]	; 0x24
 8007842:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <std+0x5c>)
 8007844:	62a3      	str	r3, [r4, #40]	; 0x28
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <std+0x60>)
 8007848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800784a:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <std+0x64>)
 800784c:	6323      	str	r3, [r4, #48]	; 0x30
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <std+0x68>)
 8007850:	6224      	str	r4, [r4, #32]
 8007852:	429c      	cmp	r4, r3
 8007854:	d006      	beq.n	8007864 <std+0x48>
 8007856:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800785a:	4294      	cmp	r4, r2
 800785c:	d002      	beq.n	8007864 <std+0x48>
 800785e:	33d0      	adds	r3, #208	; 0xd0
 8007860:	429c      	cmp	r4, r3
 8007862:	d105      	bne.n	8007870 <std+0x54>
 8007864:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800786c:	f000 b978 	b.w	8007b60 <__retarget_lock_init_recursive>
 8007870:	bd10      	pop	{r4, pc}
 8007872:	bf00      	nop
 8007874:	080079e1 	.word	0x080079e1
 8007878:	08007a03 	.word	0x08007a03
 800787c:	08007a3b 	.word	0x08007a3b
 8007880:	08007a5f 	.word	0x08007a5f
 8007884:	2000051c 	.word	0x2000051c

08007888 <stdio_exit_handler>:
 8007888:	4a02      	ldr	r2, [pc, #8]	; (8007894 <stdio_exit_handler+0xc>)
 800788a:	4903      	ldr	r1, [pc, #12]	; (8007898 <stdio_exit_handler+0x10>)
 800788c:	4803      	ldr	r0, [pc, #12]	; (800789c <stdio_exit_handler+0x14>)
 800788e:	f000 b869 	b.w	8007964 <_fwalk_sglue>
 8007892:	bf00      	nop
 8007894:	2000000c 	.word	0x2000000c
 8007898:	0800a31d 	.word	0x0800a31d
 800789c:	20000018 	.word	0x20000018

080078a0 <cleanup_stdio>:
 80078a0:	6841      	ldr	r1, [r0, #4]
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <cleanup_stdio+0x34>)
 80078a4:	4299      	cmp	r1, r3
 80078a6:	b510      	push	{r4, lr}
 80078a8:	4604      	mov	r4, r0
 80078aa:	d001      	beq.n	80078b0 <cleanup_stdio+0x10>
 80078ac:	f002 fd36 	bl	800a31c <_fflush_r>
 80078b0:	68a1      	ldr	r1, [r4, #8]
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <cleanup_stdio+0x38>)
 80078b4:	4299      	cmp	r1, r3
 80078b6:	d002      	beq.n	80078be <cleanup_stdio+0x1e>
 80078b8:	4620      	mov	r0, r4
 80078ba:	f002 fd2f 	bl	800a31c <_fflush_r>
 80078be:	68e1      	ldr	r1, [r4, #12]
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <cleanup_stdio+0x3c>)
 80078c2:	4299      	cmp	r1, r3
 80078c4:	d004      	beq.n	80078d0 <cleanup_stdio+0x30>
 80078c6:	4620      	mov	r0, r4
 80078c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078cc:	f002 bd26 	b.w	800a31c <_fflush_r>
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	bf00      	nop
 80078d4:	2000051c 	.word	0x2000051c
 80078d8:	20000584 	.word	0x20000584
 80078dc:	200005ec 	.word	0x200005ec

080078e0 <global_stdio_init.part.0>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <global_stdio_init.part.0+0x30>)
 80078e4:	4c0b      	ldr	r4, [pc, #44]	; (8007914 <global_stdio_init.part.0+0x34>)
 80078e6:	4a0c      	ldr	r2, [pc, #48]	; (8007918 <global_stdio_init.part.0+0x38>)
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	4620      	mov	r0, r4
 80078ec:	2200      	movs	r2, #0
 80078ee:	2104      	movs	r1, #4
 80078f0:	f7ff ff94 	bl	800781c <std>
 80078f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078f8:	2201      	movs	r2, #1
 80078fa:	2109      	movs	r1, #9
 80078fc:	f7ff ff8e 	bl	800781c <std>
 8007900:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007904:	2202      	movs	r2, #2
 8007906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800790a:	2112      	movs	r1, #18
 800790c:	f7ff bf86 	b.w	800781c <std>
 8007910:	20000654 	.word	0x20000654
 8007914:	2000051c 	.word	0x2000051c
 8007918:	08007889 	.word	0x08007889

0800791c <__sfp_lock_acquire>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__sfp_lock_acquire+0x8>)
 800791e:	f000 b920 	b.w	8007b62 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	2000065d 	.word	0x2000065d

08007928 <__sfp_lock_release>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__sfp_lock_release+0x8>)
 800792a:	f000 b91b 	b.w	8007b64 <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	2000065d 	.word	0x2000065d

08007934 <__sinit>:
 8007934:	b510      	push	{r4, lr}
 8007936:	4604      	mov	r4, r0
 8007938:	f7ff fff0 	bl	800791c <__sfp_lock_acquire>
 800793c:	6a23      	ldr	r3, [r4, #32]
 800793e:	b11b      	cbz	r3, 8007948 <__sinit+0x14>
 8007940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007944:	f7ff bff0 	b.w	8007928 <__sfp_lock_release>
 8007948:	4b04      	ldr	r3, [pc, #16]	; (800795c <__sinit+0x28>)
 800794a:	6223      	str	r3, [r4, #32]
 800794c:	4b04      	ldr	r3, [pc, #16]	; (8007960 <__sinit+0x2c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f5      	bne.n	8007940 <__sinit+0xc>
 8007954:	f7ff ffc4 	bl	80078e0 <global_stdio_init.part.0>
 8007958:	e7f2      	b.n	8007940 <__sinit+0xc>
 800795a:	bf00      	nop
 800795c:	080078a1 	.word	0x080078a1
 8007960:	20000654 	.word	0x20000654

08007964 <_fwalk_sglue>:
 8007964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007968:	4607      	mov	r7, r0
 800796a:	4688      	mov	r8, r1
 800796c:	4614      	mov	r4, r2
 800796e:	2600      	movs	r6, #0
 8007970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007974:	f1b9 0901 	subs.w	r9, r9, #1
 8007978:	d505      	bpl.n	8007986 <_fwalk_sglue+0x22>
 800797a:	6824      	ldr	r4, [r4, #0]
 800797c:	2c00      	cmp	r4, #0
 800797e:	d1f7      	bne.n	8007970 <_fwalk_sglue+0xc>
 8007980:	4630      	mov	r0, r6
 8007982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d907      	bls.n	800799c <_fwalk_sglue+0x38>
 800798c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007990:	3301      	adds	r3, #1
 8007992:	d003      	beq.n	800799c <_fwalk_sglue+0x38>
 8007994:	4629      	mov	r1, r5
 8007996:	4638      	mov	r0, r7
 8007998:	47c0      	blx	r8
 800799a:	4306      	orrs	r6, r0
 800799c:	3568      	adds	r5, #104	; 0x68
 800799e:	e7e9      	b.n	8007974 <_fwalk_sglue+0x10>

080079a0 <siprintf>:
 80079a0:	b40e      	push	{r1, r2, r3}
 80079a2:	b500      	push	{lr}
 80079a4:	b09c      	sub	sp, #112	; 0x70
 80079a6:	ab1d      	add	r3, sp, #116	; 0x74
 80079a8:	9002      	str	r0, [sp, #8]
 80079aa:	9006      	str	r0, [sp, #24]
 80079ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079b0:	4809      	ldr	r0, [pc, #36]	; (80079d8 <siprintf+0x38>)
 80079b2:	9107      	str	r1, [sp, #28]
 80079b4:	9104      	str	r1, [sp, #16]
 80079b6:	4909      	ldr	r1, [pc, #36]	; (80079dc <siprintf+0x3c>)
 80079b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079bc:	9105      	str	r1, [sp, #20]
 80079be:	6800      	ldr	r0, [r0, #0]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	a902      	add	r1, sp, #8
 80079c4:	f002 fb26 	bl	800a014 <_svfiprintf_r>
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	b01c      	add	sp, #112	; 0x70
 80079d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d4:	b003      	add	sp, #12
 80079d6:	4770      	bx	lr
 80079d8:	20000064 	.word	0x20000064
 80079dc:	ffff0208 	.word	0xffff0208

080079e0 <__sread>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	460c      	mov	r4, r1
 80079e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e8:	f000 f86c 	bl	8007ac4 <_read_r>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	bfab      	itete	ge
 80079f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079f2:	89a3      	ldrhlt	r3, [r4, #12]
 80079f4:	181b      	addge	r3, r3, r0
 80079f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079fa:	bfac      	ite	ge
 80079fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80079fe:	81a3      	strhlt	r3, [r4, #12]
 8007a00:	bd10      	pop	{r4, pc}

08007a02 <__swrite>:
 8007a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a06:	461f      	mov	r7, r3
 8007a08:	898b      	ldrh	r3, [r1, #12]
 8007a0a:	05db      	lsls	r3, r3, #23
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	4616      	mov	r6, r2
 8007a12:	d505      	bpl.n	8007a20 <__swrite+0x1e>
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	2302      	movs	r3, #2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f000 f840 	bl	8007aa0 <_lseek_r>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	4628      	mov	r0, r5
 8007a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	f000 b857 	b.w	8007ae8 <_write_r>

08007a3a <__sseek>:
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a42:	f000 f82d 	bl	8007aa0 <_lseek_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	bf15      	itete	ne
 8007a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a56:	81a3      	strheq	r3, [r4, #12]
 8007a58:	bf18      	it	ne
 8007a5a:	81a3      	strhne	r3, [r4, #12]
 8007a5c:	bd10      	pop	{r4, pc}

08007a5e <__sclose>:
 8007a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a62:	f000 b80d 	b.w	8007a80 <_close_r>

08007a66 <memset>:
 8007a66:	4402      	add	r2, r0
 8007a68:	4603      	mov	r3, r0
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d100      	bne.n	8007a70 <memset+0xa>
 8007a6e:	4770      	bx	lr
 8007a70:	f803 1b01 	strb.w	r1, [r3], #1
 8007a74:	e7f9      	b.n	8007a6a <memset+0x4>
	...

08007a78 <_localeconv_r>:
 8007a78:	4800      	ldr	r0, [pc, #0]	; (8007a7c <_localeconv_r+0x4>)
 8007a7a:	4770      	bx	lr
 8007a7c:	20000158 	.word	0x20000158

08007a80 <_close_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_close_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7f9 fdfb 	bl	8001686 <_close>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_close_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_close_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000658 	.word	0x20000658

08007aa0 <_lseek_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d07      	ldr	r5, [pc, #28]	; (8007ac0 <_lseek_r+0x20>)
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	602a      	str	r2, [r5, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f7f9 fe10 	bl	80016d4 <_lseek>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_lseek_r+0x1e>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_lseek_r+0x1e>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20000658 	.word	0x20000658

08007ac4 <_read_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	; (8007ae4 <_read_r+0x20>)
 8007ac8:	4604      	mov	r4, r0
 8007aca:	4608      	mov	r0, r1
 8007acc:	4611      	mov	r1, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f7f9 fd9e 	bl	8001614 <_read>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_read_r+0x1e>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_read_r+0x1e>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20000658 	.word	0x20000658

08007ae8 <_write_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d07      	ldr	r5, [pc, #28]	; (8007b08 <_write_r+0x20>)
 8007aec:	4604      	mov	r4, r0
 8007aee:	4608      	mov	r0, r1
 8007af0:	4611      	mov	r1, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7f9 fda9 	bl	800164e <_write>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_write_r+0x1e>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_write_r+0x1e>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20000658 	.word	0x20000658

08007b0c <__errno>:
 8007b0c:	4b01      	ldr	r3, [pc, #4]	; (8007b14 <__errno+0x8>)
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000064 	.word	0x20000064

08007b18 <__libc_init_array>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4d0d      	ldr	r5, [pc, #52]	; (8007b50 <__libc_init_array+0x38>)
 8007b1c:	4c0d      	ldr	r4, [pc, #52]	; (8007b54 <__libc_init_array+0x3c>)
 8007b1e:	1b64      	subs	r4, r4, r5
 8007b20:	10a4      	asrs	r4, r4, #2
 8007b22:	2600      	movs	r6, #0
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	d109      	bne.n	8007b3c <__libc_init_array+0x24>
 8007b28:	4d0b      	ldr	r5, [pc, #44]	; (8007b58 <__libc_init_array+0x40>)
 8007b2a:	4c0c      	ldr	r4, [pc, #48]	; (8007b5c <__libc_init_array+0x44>)
 8007b2c:	f003 fb0c 	bl	800b148 <_init>
 8007b30:	1b64      	subs	r4, r4, r5
 8007b32:	10a4      	asrs	r4, r4, #2
 8007b34:	2600      	movs	r6, #0
 8007b36:	42a6      	cmp	r6, r4
 8007b38:	d105      	bne.n	8007b46 <__libc_init_array+0x2e>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b40:	4798      	blx	r3
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7ee      	b.n	8007b24 <__libc_init_array+0xc>
 8007b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4a:	4798      	blx	r3
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	e7f2      	b.n	8007b36 <__libc_init_array+0x1e>
 8007b50:	0800b5b0 	.word	0x0800b5b0
 8007b54:	0800b5b0 	.word	0x0800b5b0
 8007b58:	0800b5b0 	.word	0x0800b5b0
 8007b5c:	0800b5b4 	.word	0x0800b5b4

08007b60 <__retarget_lock_init_recursive>:
 8007b60:	4770      	bx	lr

08007b62 <__retarget_lock_acquire_recursive>:
 8007b62:	4770      	bx	lr

08007b64 <__retarget_lock_release_recursive>:
 8007b64:	4770      	bx	lr
	...

08007b68 <nanf>:
 8007b68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b70 <nanf+0x8>
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	7fc00000 	.word	0x7fc00000

08007b74 <quorem>:
 8007b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	6903      	ldr	r3, [r0, #16]
 8007b7a:	690c      	ldr	r4, [r1, #16]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	4607      	mov	r7, r0
 8007b80:	db7e      	blt.n	8007c80 <quorem+0x10c>
 8007b82:	3c01      	subs	r4, #1
 8007b84:	f101 0814 	add.w	r8, r1, #20
 8007b88:	f100 0514 	add.w	r5, r0, #20
 8007b8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ba2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ba6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007baa:	d331      	bcc.n	8007c10 <quorem+0x9c>
 8007bac:	f04f 0e00 	mov.w	lr, #0
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	46ac      	mov	ip, r5
 8007bb4:	46f2      	mov	sl, lr
 8007bb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bba:	b293      	uxth	r3, r2
 8007bbc:	fb06 e303 	mla	r3, r6, r3, lr
 8007bc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bc4:	0c1a      	lsrs	r2, r3, #16
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007bcc:	f8dc a000 	ldr.w	sl, [ip]
 8007bd0:	fa13 f38a 	uxtah	r3, r3, sl
 8007bd4:	fb06 220e 	mla	r2, r6, lr, r2
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007be0:	b292      	uxth	r2, r2
 8007be2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007be6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bea:	f8bd 3000 	ldrh.w	r3, [sp]
 8007bee:	4581      	cmp	r9, r0
 8007bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf4:	f84c 3b04 	str.w	r3, [ip], #4
 8007bf8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007bfc:	d2db      	bcs.n	8007bb6 <quorem+0x42>
 8007bfe:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c02:	b92b      	cbnz	r3, 8007c10 <quorem+0x9c>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	3b04      	subs	r3, #4
 8007c08:	429d      	cmp	r5, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	d32c      	bcc.n	8007c68 <quorem+0xf4>
 8007c0e:	613c      	str	r4, [r7, #16]
 8007c10:	4638      	mov	r0, r7
 8007c12:	f001 f96b 	bl	8008eec <__mcmp>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	db22      	blt.n	8007c60 <quorem+0xec>
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c24:	f8d1 c000 	ldr.w	ip, [r1]
 8007c28:	b293      	uxth	r3, r2
 8007c2a:	1ac3      	subs	r3, r0, r3
 8007c2c:	0c12      	lsrs	r2, r2, #16
 8007c2e:	fa13 f38c 	uxtah	r3, r3, ip
 8007c32:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c40:	45c1      	cmp	r9, r8
 8007c42:	f841 3b04 	str.w	r3, [r1], #4
 8007c46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c4a:	d2e9      	bcs.n	8007c20 <quorem+0xac>
 8007c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c54:	b922      	cbnz	r2, 8007c60 <quorem+0xec>
 8007c56:	3b04      	subs	r3, #4
 8007c58:	429d      	cmp	r5, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	d30a      	bcc.n	8007c74 <quorem+0x100>
 8007c5e:	613c      	str	r4, [r7, #16]
 8007c60:	4630      	mov	r0, r6
 8007c62:	b003      	add	sp, #12
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	6812      	ldr	r2, [r2, #0]
 8007c6a:	3b04      	subs	r3, #4
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	d1ce      	bne.n	8007c0e <quorem+0x9a>
 8007c70:	3c01      	subs	r4, #1
 8007c72:	e7c9      	b.n	8007c08 <quorem+0x94>
 8007c74:	6812      	ldr	r2, [r2, #0]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	d1f0      	bne.n	8007c5e <quorem+0xea>
 8007c7c:	3c01      	subs	r4, #1
 8007c7e:	e7eb      	b.n	8007c58 <quorem+0xe4>
 8007c80:	2000      	movs	r0, #0
 8007c82:	e7ee      	b.n	8007c62 <quorem+0xee>
 8007c84:	0000      	movs	r0, r0
	...

08007c88 <_dtoa_r>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	ed2d 8b02 	vpush	{d8}
 8007c90:	69c5      	ldr	r5, [r0, #28]
 8007c92:	b091      	sub	sp, #68	; 0x44
 8007c94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c98:	ec59 8b10 	vmov	r8, r9, d0
 8007c9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007c9e:	9106      	str	r1, [sp, #24]
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	9208      	str	r2, [sp, #32]
 8007ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ca6:	b975      	cbnz	r5, 8007cc6 <_dtoa_r+0x3e>
 8007ca8:	2010      	movs	r0, #16
 8007caa:	f000 fda5 	bl	80087f8 <malloc>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	61f0      	str	r0, [r6, #28]
 8007cb2:	b920      	cbnz	r0, 8007cbe <_dtoa_r+0x36>
 8007cb4:	4ba6      	ldr	r3, [pc, #664]	; (8007f50 <_dtoa_r+0x2c8>)
 8007cb6:	21ef      	movs	r1, #239	; 0xef
 8007cb8:	48a6      	ldr	r0, [pc, #664]	; (8007f54 <_dtoa_r+0x2cc>)
 8007cba:	f002 fba9 	bl	800a410 <__assert_func>
 8007cbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cc2:	6005      	str	r5, [r0, #0]
 8007cc4:	60c5      	str	r5, [r0, #12]
 8007cc6:	69f3      	ldr	r3, [r6, #28]
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	b151      	cbz	r1, 8007ce2 <_dtoa_r+0x5a>
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	604a      	str	r2, [r1, #4]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4093      	lsls	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 fe82 	bl	80089e0 <_Bfree>
 8007cdc:	69f3      	ldr	r3, [r6, #28]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f1b9 0300 	subs.w	r3, r9, #0
 8007ce6:	bfbb      	ittet	lt
 8007ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cec:	9303      	strlt	r3, [sp, #12]
 8007cee:	2300      	movge	r3, #0
 8007cf0:	2201      	movlt	r2, #1
 8007cf2:	bfac      	ite	ge
 8007cf4:	6023      	strge	r3, [r4, #0]
 8007cf6:	6022      	strlt	r2, [r4, #0]
 8007cf8:	4b97      	ldr	r3, [pc, #604]	; (8007f58 <_dtoa_r+0x2d0>)
 8007cfa:	9c03      	ldr	r4, [sp, #12]
 8007cfc:	43a3      	bics	r3, r4
 8007cfe:	d11c      	bne.n	8007d3a <_dtoa_r+0xb2>
 8007d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007d0c:	ea53 0308 	orrs.w	r3, r3, r8
 8007d10:	f000 84fb 	beq.w	800870a <_dtoa_r+0xa82>
 8007d14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d16:	b963      	cbnz	r3, 8007d32 <_dtoa_r+0xaa>
 8007d18:	4b90      	ldr	r3, [pc, #576]	; (8007f5c <_dtoa_r+0x2d4>)
 8007d1a:	e020      	b.n	8007d5e <_dtoa_r+0xd6>
 8007d1c:	4b90      	ldr	r3, [pc, #576]	; (8007f60 <_dtoa_r+0x2d8>)
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	3308      	adds	r3, #8
 8007d22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	9801      	ldr	r0, [sp, #4]
 8007d28:	b011      	add	sp, #68	; 0x44
 8007d2a:	ecbd 8b02 	vpop	{d8}
 8007d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d32:	4b8a      	ldr	r3, [pc, #552]	; (8007f5c <_dtoa_r+0x2d4>)
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	3303      	adds	r3, #3
 8007d38:	e7f3      	b.n	8007d22 <_dtoa_r+0x9a>
 8007d3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007d3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	d10c      	bne.n	8007d62 <_dtoa_r+0xda>
 8007d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 84d7 	beq.w	8008704 <_dtoa_r+0xa7c>
 8007d56:	4b83      	ldr	r3, [pc, #524]	; (8007f64 <_dtoa_r+0x2dc>)
 8007d58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	e7e1      	b.n	8007d26 <_dtoa_r+0x9e>
 8007d62:	aa0e      	add	r2, sp, #56	; 0x38
 8007d64:	a90f      	add	r1, sp, #60	; 0x3c
 8007d66:	4630      	mov	r0, r6
 8007d68:	eeb0 0b48 	vmov.f64	d0, d8
 8007d6c:	f001 f9d4 	bl	8009118 <__d2b>
 8007d70:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d76:	4605      	mov	r5, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d046      	beq.n	8007e0a <_dtoa_r+0x182>
 8007d7c:	eeb0 7b48 	vmov.f64	d7, d8
 8007d80:	ee18 1a90 	vmov	r1, s17
 8007d84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007d88:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007d8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d94:	2000      	movs	r0, #0
 8007d96:	ee07 1a90 	vmov	s15, r1
 8007d9a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007d9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007f38 <_dtoa_r+0x2b0>
 8007da2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007da6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007f40 <_dtoa_r+0x2b8>
 8007daa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007dae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007f48 <_dtoa_r+0x2c0>
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007dba:	eeb0 7b46 	vmov.f64	d7, d6
 8007dbe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007dc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007dc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dce:	ee16 ba90 	vmov	fp, s13
 8007dd2:	9009      	str	r0, [sp, #36]	; 0x24
 8007dd4:	d508      	bpl.n	8007de8 <_dtoa_r+0x160>
 8007dd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007dda:	eeb4 6b47 	vcmp.f64	d6, d7
 8007dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de2:	bf18      	it	ne
 8007de4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007de8:	f1bb 0f16 	cmp.w	fp, #22
 8007dec:	d82b      	bhi.n	8007e46 <_dtoa_r+0x1be>
 8007dee:	495e      	ldr	r1, [pc, #376]	; (8007f68 <_dtoa_r+0x2e0>)
 8007df0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007df4:	ed91 7b00 	vldr	d7, [r1]
 8007df8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e00:	d501      	bpl.n	8007e06 <_dtoa_r+0x17e>
 8007e02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e06:	2100      	movs	r1, #0
 8007e08:	e01e      	b.n	8007e48 <_dtoa_r+0x1c0>
 8007e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007e12:	2920      	cmp	r1, #32
 8007e14:	bfc1      	itttt	gt
 8007e16:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007e1a:	408c      	lslgt	r4, r1
 8007e1c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007e20:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007e24:	bfd6      	itet	le
 8007e26:	f1c1 0120 	rsble	r1, r1, #32
 8007e2a:	4321      	orrgt	r1, r4
 8007e2c:	fa08 f101 	lslle.w	r1, r8, r1
 8007e30:	ee07 1a90 	vmov	s15, r1
 8007e34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	ee17 1a90 	vmov	r1, s15
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e44:	e7a7      	b.n	8007d96 <_dtoa_r+0x10e>
 8007e46:	2101      	movs	r1, #1
 8007e48:	1ad2      	subs	r2, r2, r3
 8007e4a:	1e53      	subs	r3, r2, #1
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	bf45      	ittet	mi
 8007e50:	f1c2 0301 	rsbmi	r3, r2, #1
 8007e54:	9304      	strmi	r3, [sp, #16]
 8007e56:	2300      	movpl	r3, #0
 8007e58:	2300      	movmi	r3, #0
 8007e5a:	bf4c      	ite	mi
 8007e5c:	9305      	strmi	r3, [sp, #20]
 8007e5e:	9304      	strpl	r3, [sp, #16]
 8007e60:	f1bb 0f00 	cmp.w	fp, #0
 8007e64:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e66:	db18      	blt.n	8007e9a <_dtoa_r+0x212>
 8007e68:	9b05      	ldr	r3, [sp, #20]
 8007e6a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007e6e:	445b      	add	r3, fp
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9a06      	ldr	r2, [sp, #24]
 8007e76:	2a09      	cmp	r2, #9
 8007e78:	d848      	bhi.n	8007f0c <_dtoa_r+0x284>
 8007e7a:	2a05      	cmp	r2, #5
 8007e7c:	bfc4      	itt	gt
 8007e7e:	3a04      	subgt	r2, #4
 8007e80:	9206      	strgt	r2, [sp, #24]
 8007e82:	9a06      	ldr	r2, [sp, #24]
 8007e84:	f1a2 0202 	sub.w	r2, r2, #2
 8007e88:	bfcc      	ite	gt
 8007e8a:	2400      	movgt	r4, #0
 8007e8c:	2401      	movle	r4, #1
 8007e8e:	2a03      	cmp	r2, #3
 8007e90:	d847      	bhi.n	8007f22 <_dtoa_r+0x29a>
 8007e92:	e8df f002 	tbb	[pc, r2]
 8007e96:	2d0b      	.short	0x2d0b
 8007e98:	392b      	.short	0x392b
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	eba3 030b 	sub.w	r3, r3, fp
 8007ea2:	9304      	str	r3, [sp, #16]
 8007ea4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ea6:	f1cb 0300 	rsb	r3, fp, #0
 8007eaa:	e7e3      	b.n	8007e74 <_dtoa_r+0x1ec>
 8007eac:	2200      	movs	r2, #0
 8007eae:	9207      	str	r2, [sp, #28]
 8007eb0:	9a08      	ldr	r2, [sp, #32]
 8007eb2:	2a00      	cmp	r2, #0
 8007eb4:	dc38      	bgt.n	8007f28 <_dtoa_r+0x2a0>
 8007eb6:	f04f 0a01 	mov.w	sl, #1
 8007eba:	46d1      	mov	r9, sl
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	f8cd a020 	str.w	sl, [sp, #32]
 8007ec2:	69f7      	ldr	r7, [r6, #28]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	2004      	movs	r0, #4
 8007ec8:	f100 0c14 	add.w	ip, r0, #20
 8007ecc:	4594      	cmp	ip, r2
 8007ece:	d930      	bls.n	8007f32 <_dtoa_r+0x2aa>
 8007ed0:	6079      	str	r1, [r7, #4]
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ed6:	f000 fd43 	bl	8008960 <_Balloc>
 8007eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007edc:	9001      	str	r0, [sp, #4]
 8007ede:	4602      	mov	r2, r0
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d145      	bne.n	8007f70 <_dtoa_r+0x2e8>
 8007ee4:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <_dtoa_r+0x2e4>)
 8007ee6:	f240 11af 	movw	r1, #431	; 0x1af
 8007eea:	e6e5      	b.n	8007cb8 <_dtoa_r+0x30>
 8007eec:	2201      	movs	r2, #1
 8007eee:	e7de      	b.n	8007eae <_dtoa_r+0x226>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	9207      	str	r2, [sp, #28]
 8007ef4:	9a08      	ldr	r2, [sp, #32]
 8007ef6:	eb0b 0a02 	add.w	sl, fp, r2
 8007efa:	f10a 0901 	add.w	r9, sl, #1
 8007efe:	464a      	mov	r2, r9
 8007f00:	2a01      	cmp	r2, #1
 8007f02:	bfb8      	it	lt
 8007f04:	2201      	movlt	r2, #1
 8007f06:	e7dc      	b.n	8007ec2 <_dtoa_r+0x23a>
 8007f08:	2201      	movs	r2, #1
 8007f0a:	e7f2      	b.n	8007ef2 <_dtoa_r+0x26a>
 8007f0c:	2401      	movs	r4, #1
 8007f0e:	2200      	movs	r2, #0
 8007f10:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007f14:	f04f 3aff 	mov.w	sl, #4294967295
 8007f18:	2100      	movs	r1, #0
 8007f1a:	46d1      	mov	r9, sl
 8007f1c:	2212      	movs	r2, #18
 8007f1e:	9108      	str	r1, [sp, #32]
 8007f20:	e7cf      	b.n	8007ec2 <_dtoa_r+0x23a>
 8007f22:	2201      	movs	r2, #1
 8007f24:	9207      	str	r2, [sp, #28]
 8007f26:	e7f5      	b.n	8007f14 <_dtoa_r+0x28c>
 8007f28:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f2c:	46d1      	mov	r9, sl
 8007f2e:	4652      	mov	r2, sl
 8007f30:	e7c7      	b.n	8007ec2 <_dtoa_r+0x23a>
 8007f32:	3101      	adds	r1, #1
 8007f34:	0040      	lsls	r0, r0, #1
 8007f36:	e7c7      	b.n	8007ec8 <_dtoa_r+0x240>
 8007f38:	636f4361 	.word	0x636f4361
 8007f3c:	3fd287a7 	.word	0x3fd287a7
 8007f40:	8b60c8b3 	.word	0x8b60c8b3
 8007f44:	3fc68a28 	.word	0x3fc68a28
 8007f48:	509f79fb 	.word	0x509f79fb
 8007f4c:	3fd34413 	.word	0x3fd34413
 8007f50:	0800b1c6 	.word	0x0800b1c6
 8007f54:	0800b1dd 	.word	0x0800b1dd
 8007f58:	7ff00000 	.word	0x7ff00000
 8007f5c:	0800b1c2 	.word	0x0800b1c2
 8007f60:	0800b1b9 	.word	0x0800b1b9
 8007f64:	0800b191 	.word	0x0800b191
 8007f68:	0800b2c8 	.word	0x0800b2c8
 8007f6c:	0800b235 	.word	0x0800b235
 8007f70:	69f2      	ldr	r2, [r6, #28]
 8007f72:	9901      	ldr	r1, [sp, #4]
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	f1b9 0f0e 	cmp.w	r9, #14
 8007f7a:	d86c      	bhi.n	8008056 <_dtoa_r+0x3ce>
 8007f7c:	2c00      	cmp	r4, #0
 8007f7e:	d06a      	beq.n	8008056 <_dtoa_r+0x3ce>
 8007f80:	f1bb 0f00 	cmp.w	fp, #0
 8007f84:	f340 80a0 	ble.w	80080c8 <_dtoa_r+0x440>
 8007f88:	4ac1      	ldr	r2, [pc, #772]	; (8008290 <_dtoa_r+0x608>)
 8007f8a:	f00b 010f 	and.w	r1, fp, #15
 8007f8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007f92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007f96:	ed92 7b00 	vldr	d7, [r2]
 8007f9a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007f9e:	f000 8087 	beq.w	80080b0 <_dtoa_r+0x428>
 8007fa2:	49bc      	ldr	r1, [pc, #752]	; (8008294 <_dtoa_r+0x60c>)
 8007fa4:	ed91 6b08 	vldr	d6, [r1, #32]
 8007fa8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007fac:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007fb0:	f002 020f 	and.w	r2, r2, #15
 8007fb4:	2103      	movs	r1, #3
 8007fb6:	48b7      	ldr	r0, [pc, #732]	; (8008294 <_dtoa_r+0x60c>)
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	d17b      	bne.n	80080b4 <_dtoa_r+0x42c>
 8007fbc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007fc0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007fc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	f000 80a0 	beq.w	8008114 <_dtoa_r+0x48c>
 8007fd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007fd8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe0:	f140 8098 	bpl.w	8008114 <_dtoa_r+0x48c>
 8007fe4:	f1b9 0f00 	cmp.w	r9, #0
 8007fe8:	f000 8094 	beq.w	8008114 <_dtoa_r+0x48c>
 8007fec:	f1ba 0f00 	cmp.w	sl, #0
 8007ff0:	dd2f      	ble.n	8008052 <_dtoa_r+0x3ca>
 8007ff2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ffa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ffe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008002:	3101      	adds	r1, #1
 8008004:	4654      	mov	r4, sl
 8008006:	ed9d 6b02 	vldr	d6, [sp, #8]
 800800a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800800e:	ee07 1a90 	vmov	s15, r1
 8008012:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008016:	eea7 5b06 	vfma.f64	d5, d7, d6
 800801a:	ee15 7a90 	vmov	r7, s11
 800801e:	ec51 0b15 	vmov	r0, r1, d5
 8008022:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008026:	2c00      	cmp	r4, #0
 8008028:	d177      	bne.n	800811a <_dtoa_r+0x492>
 800802a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800802e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008032:	ec41 0b17 	vmov	d7, r0, r1
 8008036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803e:	f300 826a 	bgt.w	8008516 <_dtoa_r+0x88e>
 8008042:	eeb1 7b47 	vneg.f64	d7, d7
 8008046:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804e:	f100 8260 	bmi.w	8008512 <_dtoa_r+0x88a>
 8008052:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008058:	2a00      	cmp	r2, #0
 800805a:	f2c0 811d 	blt.w	8008298 <_dtoa_r+0x610>
 800805e:	f1bb 0f0e 	cmp.w	fp, #14
 8008062:	f300 8119 	bgt.w	8008298 <_dtoa_r+0x610>
 8008066:	4b8a      	ldr	r3, [pc, #552]	; (8008290 <_dtoa_r+0x608>)
 8008068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800806c:	ed93 6b00 	vldr	d6, [r3]
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f280 80b7 	bge.w	80081e6 <_dtoa_r+0x55e>
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	f300 80b3 	bgt.w	80081e6 <_dtoa_r+0x55e>
 8008080:	f040 8246 	bne.w	8008510 <_dtoa_r+0x888>
 8008084:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008088:	ee26 6b07 	vmul.f64	d6, d6, d7
 800808c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008098:	464c      	mov	r4, r9
 800809a:	464f      	mov	r7, r9
 800809c:	f280 821c 	bge.w	80084d8 <_dtoa_r+0x850>
 80080a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080a4:	2331      	movs	r3, #49	; 0x31
 80080a6:	f808 3b01 	strb.w	r3, [r8], #1
 80080aa:	f10b 0b01 	add.w	fp, fp, #1
 80080ae:	e218      	b.n	80084e2 <_dtoa_r+0x85a>
 80080b0:	2102      	movs	r1, #2
 80080b2:	e780      	b.n	8007fb6 <_dtoa_r+0x32e>
 80080b4:	07d4      	lsls	r4, r2, #31
 80080b6:	d504      	bpl.n	80080c2 <_dtoa_r+0x43a>
 80080b8:	ed90 6b00 	vldr	d6, [r0]
 80080bc:	3101      	adds	r1, #1
 80080be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080c2:	1052      	asrs	r2, r2, #1
 80080c4:	3008      	adds	r0, #8
 80080c6:	e777      	b.n	8007fb8 <_dtoa_r+0x330>
 80080c8:	d022      	beq.n	8008110 <_dtoa_r+0x488>
 80080ca:	f1cb 0200 	rsb	r2, fp, #0
 80080ce:	4970      	ldr	r1, [pc, #448]	; (8008290 <_dtoa_r+0x608>)
 80080d0:	f002 000f 	and.w	r0, r2, #15
 80080d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80080d8:	ed91 7b00 	vldr	d7, [r1]
 80080dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80080e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080e4:	486b      	ldr	r0, [pc, #428]	; (8008294 <_dtoa_r+0x60c>)
 80080e6:	1112      	asrs	r2, r2, #4
 80080e8:	2400      	movs	r4, #0
 80080ea:	2102      	movs	r1, #2
 80080ec:	b92a      	cbnz	r2, 80080fa <_dtoa_r+0x472>
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	f43f af6a 	beq.w	8007fc8 <_dtoa_r+0x340>
 80080f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080f8:	e766      	b.n	8007fc8 <_dtoa_r+0x340>
 80080fa:	07d7      	lsls	r7, r2, #31
 80080fc:	d505      	bpl.n	800810a <_dtoa_r+0x482>
 80080fe:	ed90 6b00 	vldr	d6, [r0]
 8008102:	3101      	adds	r1, #1
 8008104:	2401      	movs	r4, #1
 8008106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800810a:	1052      	asrs	r2, r2, #1
 800810c:	3008      	adds	r0, #8
 800810e:	e7ed      	b.n	80080ec <_dtoa_r+0x464>
 8008110:	2102      	movs	r1, #2
 8008112:	e759      	b.n	8007fc8 <_dtoa_r+0x340>
 8008114:	465a      	mov	r2, fp
 8008116:	464c      	mov	r4, r9
 8008118:	e775      	b.n	8008006 <_dtoa_r+0x37e>
 800811a:	ec41 0b17 	vmov	d7, r0, r1
 800811e:	495c      	ldr	r1, [pc, #368]	; (8008290 <_dtoa_r+0x608>)
 8008120:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008124:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008128:	9901      	ldr	r1, [sp, #4]
 800812a:	440c      	add	r4, r1
 800812c:	9907      	ldr	r1, [sp, #28]
 800812e:	b351      	cbz	r1, 8008186 <_dtoa_r+0x4fe>
 8008130:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008134:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008138:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800813c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008140:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008144:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008148:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800814c:	ee14 1a90 	vmov	r1, s9
 8008150:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008154:	3130      	adds	r1, #48	; 0x30
 8008156:	ee36 6b45 	vsub.f64	d6, d6, d5
 800815a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800815e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008162:	f808 1b01 	strb.w	r1, [r8], #1
 8008166:	d439      	bmi.n	80081dc <_dtoa_r+0x554>
 8008168:	ee32 5b46 	vsub.f64	d5, d2, d6
 800816c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008174:	d472      	bmi.n	800825c <_dtoa_r+0x5d4>
 8008176:	45a0      	cmp	r8, r4
 8008178:	f43f af6b 	beq.w	8008052 <_dtoa_r+0x3ca>
 800817c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008180:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008184:	e7e0      	b.n	8008148 <_dtoa_r+0x4c0>
 8008186:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800818a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800818e:	4620      	mov	r0, r4
 8008190:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008194:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008198:	ee14 1a90 	vmov	r1, s9
 800819c:	3130      	adds	r1, #48	; 0x30
 800819e:	f808 1b01 	strb.w	r1, [r8], #1
 80081a2:	45a0      	cmp	r8, r4
 80081a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081ac:	d118      	bne.n	80081e0 <_dtoa_r+0x558>
 80081ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80081b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80081b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80081ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081be:	dc4d      	bgt.n	800825c <_dtoa_r+0x5d4>
 80081c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80081c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80081c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081cc:	f57f af41 	bpl.w	8008052 <_dtoa_r+0x3ca>
 80081d0:	4680      	mov	r8, r0
 80081d2:	3801      	subs	r0, #1
 80081d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80081d8:	2b30      	cmp	r3, #48	; 0x30
 80081da:	d0f9      	beq.n	80081d0 <_dtoa_r+0x548>
 80081dc:	4693      	mov	fp, r2
 80081de:	e02a      	b.n	8008236 <_dtoa_r+0x5ae>
 80081e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80081e4:	e7d6      	b.n	8008194 <_dtoa_r+0x50c>
 80081e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80081ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80081f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80081fa:	ee15 3a10 	vmov	r3, s10
 80081fe:	3330      	adds	r3, #48	; 0x30
 8008200:	f808 3b01 	strb.w	r3, [r8], #1
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	eba8 0303 	sub.w	r3, r8, r3
 800820a:	4599      	cmp	r9, r3
 800820c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008210:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008214:	d133      	bne.n	800827e <_dtoa_r+0x5f6>
 8008216:	ee37 7b07 	vadd.f64	d7, d7, d7
 800821a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008222:	dc1a      	bgt.n	800825a <_dtoa_r+0x5d2>
 8008224:	eeb4 7b46 	vcmp.f64	d7, d6
 8008228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822c:	d103      	bne.n	8008236 <_dtoa_r+0x5ae>
 800822e:	ee15 3a10 	vmov	r3, s10
 8008232:	07d9      	lsls	r1, r3, #31
 8008234:	d411      	bmi.n	800825a <_dtoa_r+0x5d2>
 8008236:	4629      	mov	r1, r5
 8008238:	4630      	mov	r0, r6
 800823a:	f000 fbd1 	bl	80089e0 <_Bfree>
 800823e:	2300      	movs	r3, #0
 8008240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008242:	f888 3000 	strb.w	r3, [r8]
 8008246:	f10b 0301 	add.w	r3, fp, #1
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800824e:	2b00      	cmp	r3, #0
 8008250:	f43f ad69 	beq.w	8007d26 <_dtoa_r+0x9e>
 8008254:	f8c3 8000 	str.w	r8, [r3]
 8008258:	e565      	b.n	8007d26 <_dtoa_r+0x9e>
 800825a:	465a      	mov	r2, fp
 800825c:	4643      	mov	r3, r8
 800825e:	4698      	mov	r8, r3
 8008260:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008264:	2939      	cmp	r1, #57	; 0x39
 8008266:	d106      	bne.n	8008276 <_dtoa_r+0x5ee>
 8008268:	9901      	ldr	r1, [sp, #4]
 800826a:	4299      	cmp	r1, r3
 800826c:	d1f7      	bne.n	800825e <_dtoa_r+0x5d6>
 800826e:	9801      	ldr	r0, [sp, #4]
 8008270:	2130      	movs	r1, #48	; 0x30
 8008272:	3201      	adds	r2, #1
 8008274:	7001      	strb	r1, [r0, #0]
 8008276:	7819      	ldrb	r1, [r3, #0]
 8008278:	3101      	adds	r1, #1
 800827a:	7019      	strb	r1, [r3, #0]
 800827c:	e7ae      	b.n	80081dc <_dtoa_r+0x554>
 800827e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008282:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828a:	d1b2      	bne.n	80081f2 <_dtoa_r+0x56a>
 800828c:	e7d3      	b.n	8008236 <_dtoa_r+0x5ae>
 800828e:	bf00      	nop
 8008290:	0800b2c8 	.word	0x0800b2c8
 8008294:	0800b2a0 	.word	0x0800b2a0
 8008298:	9907      	ldr	r1, [sp, #28]
 800829a:	2900      	cmp	r1, #0
 800829c:	f000 80d0 	beq.w	8008440 <_dtoa_r+0x7b8>
 80082a0:	9906      	ldr	r1, [sp, #24]
 80082a2:	2901      	cmp	r1, #1
 80082a4:	f300 80b4 	bgt.w	8008410 <_dtoa_r+0x788>
 80082a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082aa:	2900      	cmp	r1, #0
 80082ac:	f000 80ac 	beq.w	8008408 <_dtoa_r+0x780>
 80082b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80082b8:	461c      	mov	r4, r3
 80082ba:	9309      	str	r3, [sp, #36]	; 0x24
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	4413      	add	r3, r2
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	9b05      	ldr	r3, [sp, #20]
 80082c4:	2101      	movs	r1, #1
 80082c6:	4413      	add	r3, r2
 80082c8:	4630      	mov	r0, r6
 80082ca:	9305      	str	r3, [sp, #20]
 80082cc:	f000 fc88 	bl	8008be0 <__i2b>
 80082d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d2:	4607      	mov	r7, r0
 80082d4:	f1b8 0f00 	cmp.w	r8, #0
 80082d8:	d00d      	beq.n	80082f6 <_dtoa_r+0x66e>
 80082da:	9a05      	ldr	r2, [sp, #20]
 80082dc:	2a00      	cmp	r2, #0
 80082de:	dd0a      	ble.n	80082f6 <_dtoa_r+0x66e>
 80082e0:	4542      	cmp	r2, r8
 80082e2:	9904      	ldr	r1, [sp, #16]
 80082e4:	bfa8      	it	ge
 80082e6:	4642      	movge	r2, r8
 80082e8:	1a89      	subs	r1, r1, r2
 80082ea:	9104      	str	r1, [sp, #16]
 80082ec:	9905      	ldr	r1, [sp, #20]
 80082ee:	eba8 0802 	sub.w	r8, r8, r2
 80082f2:	1a8a      	subs	r2, r1, r2
 80082f4:	9205      	str	r2, [sp, #20]
 80082f6:	b303      	cbz	r3, 800833a <_dtoa_r+0x6b2>
 80082f8:	9a07      	ldr	r2, [sp, #28]
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	f000 80a5 	beq.w	800844a <_dtoa_r+0x7c2>
 8008300:	2c00      	cmp	r4, #0
 8008302:	dd13      	ble.n	800832c <_dtoa_r+0x6a4>
 8008304:	4639      	mov	r1, r7
 8008306:	4622      	mov	r2, r4
 8008308:	4630      	mov	r0, r6
 800830a:	930d      	str	r3, [sp, #52]	; 0x34
 800830c:	f000 fd28 	bl	8008d60 <__pow5mult>
 8008310:	462a      	mov	r2, r5
 8008312:	4601      	mov	r1, r0
 8008314:	4607      	mov	r7, r0
 8008316:	4630      	mov	r0, r6
 8008318:	f000 fc78 	bl	8008c0c <__multiply>
 800831c:	4629      	mov	r1, r5
 800831e:	9009      	str	r0, [sp, #36]	; 0x24
 8008320:	4630      	mov	r0, r6
 8008322:	f000 fb5d 	bl	80089e0 <_Bfree>
 8008326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832a:	4615      	mov	r5, r2
 800832c:	1b1a      	subs	r2, r3, r4
 800832e:	d004      	beq.n	800833a <_dtoa_r+0x6b2>
 8008330:	4629      	mov	r1, r5
 8008332:	4630      	mov	r0, r6
 8008334:	f000 fd14 	bl	8008d60 <__pow5mult>
 8008338:	4605      	mov	r5, r0
 800833a:	2101      	movs	r1, #1
 800833c:	4630      	mov	r0, r6
 800833e:	f000 fc4f 	bl	8008be0 <__i2b>
 8008342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008344:	2b00      	cmp	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	f340 8081 	ble.w	800844e <_dtoa_r+0x7c6>
 800834c:	461a      	mov	r2, r3
 800834e:	4601      	mov	r1, r0
 8008350:	4630      	mov	r0, r6
 8008352:	f000 fd05 	bl	8008d60 <__pow5mult>
 8008356:	9b06      	ldr	r3, [sp, #24]
 8008358:	2b01      	cmp	r3, #1
 800835a:	4604      	mov	r4, r0
 800835c:	dd7a      	ble.n	8008454 <_dtoa_r+0x7cc>
 800835e:	2300      	movs	r3, #0
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	6922      	ldr	r2, [r4, #16]
 8008364:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008368:	6910      	ldr	r0, [r2, #16]
 800836a:	f000 fbeb 	bl	8008b44 <__hi0bits>
 800836e:	f1c0 0020 	rsb	r0, r0, #32
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	4418      	add	r0, r3
 8008376:	f010 001f 	ands.w	r0, r0, #31
 800837a:	f000 8093 	beq.w	80084a4 <_dtoa_r+0x81c>
 800837e:	f1c0 0220 	rsb	r2, r0, #32
 8008382:	2a04      	cmp	r2, #4
 8008384:	f340 8085 	ble.w	8008492 <_dtoa_r+0x80a>
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	f1c0 001c 	rsb	r0, r0, #28
 800838e:	4403      	add	r3, r0
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	4480      	add	r8, r0
 8008396:	4403      	add	r3, r0
 8008398:	9305      	str	r3, [sp, #20]
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	dd05      	ble.n	80083ac <_dtoa_r+0x724>
 80083a0:	4629      	mov	r1, r5
 80083a2:	461a      	mov	r2, r3
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 fd35 	bl	8008e14 <__lshift>
 80083aa:	4605      	mov	r5, r0
 80083ac:	9b05      	ldr	r3, [sp, #20]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dd05      	ble.n	80083be <_dtoa_r+0x736>
 80083b2:	4621      	mov	r1, r4
 80083b4:	461a      	mov	r2, r3
 80083b6:	4630      	mov	r0, r6
 80083b8:	f000 fd2c 	bl	8008e14 <__lshift>
 80083bc:	4604      	mov	r4, r0
 80083be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d071      	beq.n	80084a8 <_dtoa_r+0x820>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fd90 	bl	8008eec <__mcmp>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	da6b      	bge.n	80084a8 <_dtoa_r+0x820>
 80083d0:	2300      	movs	r3, #0
 80083d2:	4629      	mov	r1, r5
 80083d4:	220a      	movs	r2, #10
 80083d6:	4630      	mov	r0, r6
 80083d8:	f000 fb24 	bl	8008a24 <__multadd>
 80083dc:	9b07      	ldr	r3, [sp, #28]
 80083de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083e2:	4605      	mov	r5, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8197 	beq.w	8008718 <_dtoa_r+0xa90>
 80083ea:	4639      	mov	r1, r7
 80083ec:	2300      	movs	r3, #0
 80083ee:	220a      	movs	r2, #10
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 fb17 	bl	8008a24 <__multadd>
 80083f6:	f1ba 0f00 	cmp.w	sl, #0
 80083fa:	4607      	mov	r7, r0
 80083fc:	f300 8093 	bgt.w	8008526 <_dtoa_r+0x89e>
 8008400:	9b06      	ldr	r3, [sp, #24]
 8008402:	2b02      	cmp	r3, #2
 8008404:	dc57      	bgt.n	80084b6 <_dtoa_r+0x82e>
 8008406:	e08e      	b.n	8008526 <_dtoa_r+0x89e>
 8008408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800840a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800840e:	e751      	b.n	80082b4 <_dtoa_r+0x62c>
 8008410:	f109 34ff 	add.w	r4, r9, #4294967295
 8008414:	42a3      	cmp	r3, r4
 8008416:	bfbf      	itttt	lt
 8008418:	1ae2      	sublt	r2, r4, r3
 800841a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800841c:	189b      	addlt	r3, r3, r2
 800841e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008420:	bfae      	itee	ge
 8008422:	1b1c      	subge	r4, r3, r4
 8008424:	4623      	movlt	r3, r4
 8008426:	2400      	movlt	r4, #0
 8008428:	f1b9 0f00 	cmp.w	r9, #0
 800842c:	bfb5      	itete	lt
 800842e:	9a04      	ldrlt	r2, [sp, #16]
 8008430:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008434:	eba2 0809 	sublt.w	r8, r2, r9
 8008438:	464a      	movge	r2, r9
 800843a:	bfb8      	it	lt
 800843c:	2200      	movlt	r2, #0
 800843e:	e73c      	b.n	80082ba <_dtoa_r+0x632>
 8008440:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008444:	9f07      	ldr	r7, [sp, #28]
 8008446:	461c      	mov	r4, r3
 8008448:	e744      	b.n	80082d4 <_dtoa_r+0x64c>
 800844a:	461a      	mov	r2, r3
 800844c:	e770      	b.n	8008330 <_dtoa_r+0x6a8>
 800844e:	9b06      	ldr	r3, [sp, #24]
 8008450:	2b01      	cmp	r3, #1
 8008452:	dc18      	bgt.n	8008486 <_dtoa_r+0x7fe>
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	b9b3      	cbnz	r3, 8008486 <_dtoa_r+0x7fe>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800845e:	b9a2      	cbnz	r2, 800848a <_dtoa_r+0x802>
 8008460:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008464:	0d12      	lsrs	r2, r2, #20
 8008466:	0512      	lsls	r2, r2, #20
 8008468:	b18a      	cbz	r2, 800848e <_dtoa_r+0x806>
 800846a:	9b04      	ldr	r3, [sp, #16]
 800846c:	3301      	adds	r3, #1
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	9b05      	ldr	r3, [sp, #20]
 8008472:	3301      	adds	r3, #1
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	2301      	movs	r3, #1
 8008478:	9309      	str	r3, [sp, #36]	; 0x24
 800847a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847c:	2b00      	cmp	r3, #0
 800847e:	f47f af70 	bne.w	8008362 <_dtoa_r+0x6da>
 8008482:	2001      	movs	r0, #1
 8008484:	e775      	b.n	8008372 <_dtoa_r+0x6ea>
 8008486:	2300      	movs	r3, #0
 8008488:	e7f6      	b.n	8008478 <_dtoa_r+0x7f0>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	e7f4      	b.n	8008478 <_dtoa_r+0x7f0>
 800848e:	9209      	str	r2, [sp, #36]	; 0x24
 8008490:	e7f3      	b.n	800847a <_dtoa_r+0x7f2>
 8008492:	d082      	beq.n	800839a <_dtoa_r+0x712>
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	321c      	adds	r2, #28
 8008498:	4413      	add	r3, r2
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	4490      	add	r8, r2
 80084a0:	4413      	add	r3, r2
 80084a2:	e779      	b.n	8008398 <_dtoa_r+0x710>
 80084a4:	4602      	mov	r2, r0
 80084a6:	e7f5      	b.n	8008494 <_dtoa_r+0x80c>
 80084a8:	f1b9 0f00 	cmp.w	r9, #0
 80084ac:	dc36      	bgt.n	800851c <_dtoa_r+0x894>
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	dd33      	ble.n	800851c <_dtoa_r+0x894>
 80084b4:	46ca      	mov	sl, r9
 80084b6:	f1ba 0f00 	cmp.w	sl, #0
 80084ba:	d10d      	bne.n	80084d8 <_dtoa_r+0x850>
 80084bc:	4621      	mov	r1, r4
 80084be:	4653      	mov	r3, sl
 80084c0:	2205      	movs	r2, #5
 80084c2:	4630      	mov	r0, r6
 80084c4:	f000 faae 	bl	8008a24 <__multadd>
 80084c8:	4601      	mov	r1, r0
 80084ca:	4604      	mov	r4, r0
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 fd0d 	bl	8008eec <__mcmp>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f73f ade4 	bgt.w	80080a0 <_dtoa_r+0x418>
 80084d8:	9b08      	ldr	r3, [sp, #32]
 80084da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084de:	ea6f 0b03 	mvn.w	fp, r3
 80084e2:	f04f 0900 	mov.w	r9, #0
 80084e6:	4621      	mov	r1, r4
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fa79 	bl	80089e0 <_Bfree>
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	f43f aea1 	beq.w	8008236 <_dtoa_r+0x5ae>
 80084f4:	f1b9 0f00 	cmp.w	r9, #0
 80084f8:	d005      	beq.n	8008506 <_dtoa_r+0x87e>
 80084fa:	45b9      	cmp	r9, r7
 80084fc:	d003      	beq.n	8008506 <_dtoa_r+0x87e>
 80084fe:	4649      	mov	r1, r9
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fa6d 	bl	80089e0 <_Bfree>
 8008506:	4639      	mov	r1, r7
 8008508:	4630      	mov	r0, r6
 800850a:	f000 fa69 	bl	80089e0 <_Bfree>
 800850e:	e692      	b.n	8008236 <_dtoa_r+0x5ae>
 8008510:	2400      	movs	r4, #0
 8008512:	4627      	mov	r7, r4
 8008514:	e7e0      	b.n	80084d8 <_dtoa_r+0x850>
 8008516:	4693      	mov	fp, r2
 8008518:	4627      	mov	r7, r4
 800851a:	e5c1      	b.n	80080a0 <_dtoa_r+0x418>
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	46ca      	mov	sl, r9
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8100 	beq.w	8008726 <_dtoa_r+0xa9e>
 8008526:	f1b8 0f00 	cmp.w	r8, #0
 800852a:	dd05      	ble.n	8008538 <_dtoa_r+0x8b0>
 800852c:	4639      	mov	r1, r7
 800852e:	4642      	mov	r2, r8
 8008530:	4630      	mov	r0, r6
 8008532:	f000 fc6f 	bl	8008e14 <__lshift>
 8008536:	4607      	mov	r7, r0
 8008538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853a:	2b00      	cmp	r3, #0
 800853c:	d05d      	beq.n	80085fa <_dtoa_r+0x972>
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 fa0d 	bl	8008960 <_Balloc>
 8008546:	4680      	mov	r8, r0
 8008548:	b928      	cbnz	r0, 8008556 <_dtoa_r+0x8ce>
 800854a:	4b82      	ldr	r3, [pc, #520]	; (8008754 <_dtoa_r+0xacc>)
 800854c:	4602      	mov	r2, r0
 800854e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008552:	f7ff bbb1 	b.w	8007cb8 <_dtoa_r+0x30>
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	3202      	adds	r2, #2
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	f107 010c 	add.w	r1, r7, #12
 8008560:	300c      	adds	r0, #12
 8008562:	f001 ff3f 	bl	800a3e4 <memcpy>
 8008566:	2201      	movs	r2, #1
 8008568:	4641      	mov	r1, r8
 800856a:	4630      	mov	r0, r6
 800856c:	f000 fc52 	bl	8008e14 <__lshift>
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	4453      	add	r3, sl
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	9b02      	ldr	r3, [sp, #8]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	46b9      	mov	r9, r7
 8008584:	9307      	str	r3, [sp, #28]
 8008586:	4607      	mov	r7, r0
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	4621      	mov	r1, r4
 800858c:	3b01      	subs	r3, #1
 800858e:	4628      	mov	r0, r5
 8008590:	9302      	str	r3, [sp, #8]
 8008592:	f7ff faef 	bl	8007b74 <quorem>
 8008596:	4603      	mov	r3, r0
 8008598:	3330      	adds	r3, #48	; 0x30
 800859a:	9005      	str	r0, [sp, #20]
 800859c:	4649      	mov	r1, r9
 800859e:	4628      	mov	r0, r5
 80085a0:	9309      	str	r3, [sp, #36]	; 0x24
 80085a2:	f000 fca3 	bl	8008eec <__mcmp>
 80085a6:	463a      	mov	r2, r7
 80085a8:	4682      	mov	sl, r0
 80085aa:	4621      	mov	r1, r4
 80085ac:	4630      	mov	r0, r6
 80085ae:	f000 fcb9 	bl	8008f24 <__mdiff>
 80085b2:	68c2      	ldr	r2, [r0, #12]
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	4680      	mov	r8, r0
 80085b8:	bb0a      	cbnz	r2, 80085fe <_dtoa_r+0x976>
 80085ba:	4601      	mov	r1, r0
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 fc95 	bl	8008eec <__mcmp>
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	4602      	mov	r2, r0
 80085c6:	4641      	mov	r1, r8
 80085c8:	4630      	mov	r0, r6
 80085ca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80085ce:	f000 fa07 	bl	80089e0 <_Bfree>
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085da:	ea43 0102 	orr.w	r1, r3, r2
 80085de:	9b07      	ldr	r3, [sp, #28]
 80085e0:	4319      	orrs	r1, r3
 80085e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e4:	d10d      	bne.n	8008602 <_dtoa_r+0x97a>
 80085e6:	2b39      	cmp	r3, #57	; 0x39
 80085e8:	d029      	beq.n	800863e <_dtoa_r+0x9b6>
 80085ea:	f1ba 0f00 	cmp.w	sl, #0
 80085ee:	dd01      	ble.n	80085f4 <_dtoa_r+0x96c>
 80085f0:	9b05      	ldr	r3, [sp, #20]
 80085f2:	3331      	adds	r3, #49	; 0x31
 80085f4:	9a02      	ldr	r2, [sp, #8]
 80085f6:	7013      	strb	r3, [r2, #0]
 80085f8:	e775      	b.n	80084e6 <_dtoa_r+0x85e>
 80085fa:	4638      	mov	r0, r7
 80085fc:	e7b8      	b.n	8008570 <_dtoa_r+0x8e8>
 80085fe:	2201      	movs	r2, #1
 8008600:	e7e1      	b.n	80085c6 <_dtoa_r+0x93e>
 8008602:	f1ba 0f00 	cmp.w	sl, #0
 8008606:	db06      	blt.n	8008616 <_dtoa_r+0x98e>
 8008608:	9906      	ldr	r1, [sp, #24]
 800860a:	ea41 0a0a 	orr.w	sl, r1, sl
 800860e:	9907      	ldr	r1, [sp, #28]
 8008610:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008614:	d120      	bne.n	8008658 <_dtoa_r+0x9d0>
 8008616:	2a00      	cmp	r2, #0
 8008618:	ddec      	ble.n	80085f4 <_dtoa_r+0x96c>
 800861a:	4629      	mov	r1, r5
 800861c:	2201      	movs	r2, #1
 800861e:	4630      	mov	r0, r6
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	f000 fbf7 	bl	8008e14 <__lshift>
 8008626:	4621      	mov	r1, r4
 8008628:	4605      	mov	r5, r0
 800862a:	f000 fc5f 	bl	8008eec <__mcmp>
 800862e:	2800      	cmp	r0, #0
 8008630:	9b04      	ldr	r3, [sp, #16]
 8008632:	dc02      	bgt.n	800863a <_dtoa_r+0x9b2>
 8008634:	d1de      	bne.n	80085f4 <_dtoa_r+0x96c>
 8008636:	07da      	lsls	r2, r3, #31
 8008638:	d5dc      	bpl.n	80085f4 <_dtoa_r+0x96c>
 800863a:	2b39      	cmp	r3, #57	; 0x39
 800863c:	d1d8      	bne.n	80085f0 <_dtoa_r+0x968>
 800863e:	9a02      	ldr	r2, [sp, #8]
 8008640:	2339      	movs	r3, #57	; 0x39
 8008642:	7013      	strb	r3, [r2, #0]
 8008644:	4643      	mov	r3, r8
 8008646:	4698      	mov	r8, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800864e:	2a39      	cmp	r2, #57	; 0x39
 8008650:	d051      	beq.n	80086f6 <_dtoa_r+0xa6e>
 8008652:	3201      	adds	r2, #1
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e746      	b.n	80084e6 <_dtoa_r+0x85e>
 8008658:	2a00      	cmp	r2, #0
 800865a:	dd03      	ble.n	8008664 <_dtoa_r+0x9dc>
 800865c:	2b39      	cmp	r3, #57	; 0x39
 800865e:	d0ee      	beq.n	800863e <_dtoa_r+0x9b6>
 8008660:	3301      	adds	r3, #1
 8008662:	e7c7      	b.n	80085f4 <_dtoa_r+0x96c>
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	9908      	ldr	r1, [sp, #32]
 8008668:	f802 3c01 	strb.w	r3, [r2, #-1]
 800866c:	428a      	cmp	r2, r1
 800866e:	d02b      	beq.n	80086c8 <_dtoa_r+0xa40>
 8008670:	4629      	mov	r1, r5
 8008672:	2300      	movs	r3, #0
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f9d4 	bl	8008a24 <__multadd>
 800867c:	45b9      	cmp	r9, r7
 800867e:	4605      	mov	r5, r0
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	f04f 020a 	mov.w	r2, #10
 8008688:	4649      	mov	r1, r9
 800868a:	4630      	mov	r0, r6
 800868c:	d107      	bne.n	800869e <_dtoa_r+0xa16>
 800868e:	f000 f9c9 	bl	8008a24 <__multadd>
 8008692:	4681      	mov	r9, r0
 8008694:	4607      	mov	r7, r0
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	3301      	adds	r3, #1
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	e774      	b.n	8008588 <_dtoa_r+0x900>
 800869e:	f000 f9c1 	bl	8008a24 <__multadd>
 80086a2:	4639      	mov	r1, r7
 80086a4:	4681      	mov	r9, r0
 80086a6:	2300      	movs	r3, #0
 80086a8:	220a      	movs	r2, #10
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 f9ba 	bl	8008a24 <__multadd>
 80086b0:	4607      	mov	r7, r0
 80086b2:	e7f0      	b.n	8008696 <_dtoa_r+0xa0e>
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	9a01      	ldr	r2, [sp, #4]
 80086ba:	bfcc      	ite	gt
 80086bc:	46d0      	movgt	r8, sl
 80086be:	f04f 0801 	movle.w	r8, #1
 80086c2:	4490      	add	r8, r2
 80086c4:	f04f 0900 	mov.w	r9, #0
 80086c8:	4629      	mov	r1, r5
 80086ca:	2201      	movs	r2, #1
 80086cc:	4630      	mov	r0, r6
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	f000 fba0 	bl	8008e14 <__lshift>
 80086d4:	4621      	mov	r1, r4
 80086d6:	4605      	mov	r5, r0
 80086d8:	f000 fc08 	bl	8008eec <__mcmp>
 80086dc:	2800      	cmp	r0, #0
 80086de:	dcb1      	bgt.n	8008644 <_dtoa_r+0x9bc>
 80086e0:	d102      	bne.n	80086e8 <_dtoa_r+0xa60>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	07db      	lsls	r3, r3, #31
 80086e6:	d4ad      	bmi.n	8008644 <_dtoa_r+0x9bc>
 80086e8:	4643      	mov	r3, r8
 80086ea:	4698      	mov	r8, r3
 80086ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086f0:	2a30      	cmp	r2, #48	; 0x30
 80086f2:	d0fa      	beq.n	80086ea <_dtoa_r+0xa62>
 80086f4:	e6f7      	b.n	80084e6 <_dtoa_r+0x85e>
 80086f6:	9a01      	ldr	r2, [sp, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d1a4      	bne.n	8008646 <_dtoa_r+0x9be>
 80086fc:	f10b 0b01 	add.w	fp, fp, #1
 8008700:	2331      	movs	r3, #49	; 0x31
 8008702:	e778      	b.n	80085f6 <_dtoa_r+0x96e>
 8008704:	4b14      	ldr	r3, [pc, #80]	; (8008758 <_dtoa_r+0xad0>)
 8008706:	f7ff bb2a 	b.w	8007d5e <_dtoa_r+0xd6>
 800870a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800870c:	2b00      	cmp	r3, #0
 800870e:	f47f ab05 	bne.w	8007d1c <_dtoa_r+0x94>
 8008712:	4b12      	ldr	r3, [pc, #72]	; (800875c <_dtoa_r+0xad4>)
 8008714:	f7ff bb23 	b.w	8007d5e <_dtoa_r+0xd6>
 8008718:	f1ba 0f00 	cmp.w	sl, #0
 800871c:	dc03      	bgt.n	8008726 <_dtoa_r+0xa9e>
 800871e:	9b06      	ldr	r3, [sp, #24]
 8008720:	2b02      	cmp	r3, #2
 8008722:	f73f aec8 	bgt.w	80084b6 <_dtoa_r+0x82e>
 8008726:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800872a:	4621      	mov	r1, r4
 800872c:	4628      	mov	r0, r5
 800872e:	f7ff fa21 	bl	8007b74 <quorem>
 8008732:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008736:	f808 3b01 	strb.w	r3, [r8], #1
 800873a:	9a01      	ldr	r2, [sp, #4]
 800873c:	eba8 0202 	sub.w	r2, r8, r2
 8008740:	4592      	cmp	sl, r2
 8008742:	ddb7      	ble.n	80086b4 <_dtoa_r+0xa2c>
 8008744:	4629      	mov	r1, r5
 8008746:	2300      	movs	r3, #0
 8008748:	220a      	movs	r2, #10
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f96a 	bl	8008a24 <__multadd>
 8008750:	4605      	mov	r5, r0
 8008752:	e7ea      	b.n	800872a <_dtoa_r+0xaa2>
 8008754:	0800b235 	.word	0x0800b235
 8008758:	0800b190 	.word	0x0800b190
 800875c:	0800b1b9 	.word	0x0800b1b9

08008760 <_free_r>:
 8008760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008762:	2900      	cmp	r1, #0
 8008764:	d044      	beq.n	80087f0 <_free_r+0x90>
 8008766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800876a:	9001      	str	r0, [sp, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f1a1 0404 	sub.w	r4, r1, #4
 8008772:	bfb8      	it	lt
 8008774:	18e4      	addlt	r4, r4, r3
 8008776:	f000 f8e7 	bl	8008948 <__malloc_lock>
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <_free_r+0x94>)
 800877c:	9801      	ldr	r0, [sp, #4]
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	b933      	cbnz	r3, 8008790 <_free_r+0x30>
 8008782:	6063      	str	r3, [r4, #4]
 8008784:	6014      	str	r4, [r2, #0]
 8008786:	b003      	add	sp, #12
 8008788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878c:	f000 b8e2 	b.w	8008954 <__malloc_unlock>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d908      	bls.n	80087a6 <_free_r+0x46>
 8008794:	6825      	ldr	r5, [r4, #0]
 8008796:	1961      	adds	r1, r4, r5
 8008798:	428b      	cmp	r3, r1
 800879a:	bf01      	itttt	eq
 800879c:	6819      	ldreq	r1, [r3, #0]
 800879e:	685b      	ldreq	r3, [r3, #4]
 80087a0:	1949      	addeq	r1, r1, r5
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	e7ed      	b.n	8008782 <_free_r+0x22>
 80087a6:	461a      	mov	r2, r3
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b10b      	cbz	r3, 80087b0 <_free_r+0x50>
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d9fa      	bls.n	80087a6 <_free_r+0x46>
 80087b0:	6811      	ldr	r1, [r2, #0]
 80087b2:	1855      	adds	r5, r2, r1
 80087b4:	42a5      	cmp	r5, r4
 80087b6:	d10b      	bne.n	80087d0 <_free_r+0x70>
 80087b8:	6824      	ldr	r4, [r4, #0]
 80087ba:	4421      	add	r1, r4
 80087bc:	1854      	adds	r4, r2, r1
 80087be:	42a3      	cmp	r3, r4
 80087c0:	6011      	str	r1, [r2, #0]
 80087c2:	d1e0      	bne.n	8008786 <_free_r+0x26>
 80087c4:	681c      	ldr	r4, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	6053      	str	r3, [r2, #4]
 80087ca:	440c      	add	r4, r1
 80087cc:	6014      	str	r4, [r2, #0]
 80087ce:	e7da      	b.n	8008786 <_free_r+0x26>
 80087d0:	d902      	bls.n	80087d8 <_free_r+0x78>
 80087d2:	230c      	movs	r3, #12
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	e7d6      	b.n	8008786 <_free_r+0x26>
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf04      	itt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	bf04      	itt	eq
 80087e8:	1949      	addeq	r1, r1, r5
 80087ea:	6021      	streq	r1, [r4, #0]
 80087ec:	6054      	str	r4, [r2, #4]
 80087ee:	e7ca      	b.n	8008786 <_free_r+0x26>
 80087f0:	b003      	add	sp, #12
 80087f2:	bd30      	pop	{r4, r5, pc}
 80087f4:	20000660 	.word	0x20000660

080087f8 <malloc>:
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <malloc+0xc>)
 80087fa:	4601      	mov	r1, r0
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f000 b823 	b.w	8008848 <_malloc_r>
 8008802:	bf00      	nop
 8008804:	20000064 	.word	0x20000064

08008808 <sbrk_aligned>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4e0e      	ldr	r6, [pc, #56]	; (8008844 <sbrk_aligned+0x3c>)
 800880c:	460c      	mov	r4, r1
 800880e:	6831      	ldr	r1, [r6, #0]
 8008810:	4605      	mov	r5, r0
 8008812:	b911      	cbnz	r1, 800881a <sbrk_aligned+0x12>
 8008814:	f001 fdd6 	bl	800a3c4 <_sbrk_r>
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f001 fdd1 	bl	800a3c4 <_sbrk_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d00a      	beq.n	800883c <sbrk_aligned+0x34>
 8008826:	1cc4      	adds	r4, r0, #3
 8008828:	f024 0403 	bic.w	r4, r4, #3
 800882c:	42a0      	cmp	r0, r4
 800882e:	d007      	beq.n	8008840 <sbrk_aligned+0x38>
 8008830:	1a21      	subs	r1, r4, r0
 8008832:	4628      	mov	r0, r5
 8008834:	f001 fdc6 	bl	800a3c4 <_sbrk_r>
 8008838:	3001      	adds	r0, #1
 800883a:	d101      	bne.n	8008840 <sbrk_aligned+0x38>
 800883c:	f04f 34ff 	mov.w	r4, #4294967295
 8008840:	4620      	mov	r0, r4
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	20000664 	.word	0x20000664

08008848 <_malloc_r>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	1ccd      	adds	r5, r1, #3
 800884e:	f025 0503 	bic.w	r5, r5, #3
 8008852:	3508      	adds	r5, #8
 8008854:	2d0c      	cmp	r5, #12
 8008856:	bf38      	it	cc
 8008858:	250c      	movcc	r5, #12
 800885a:	2d00      	cmp	r5, #0
 800885c:	4607      	mov	r7, r0
 800885e:	db01      	blt.n	8008864 <_malloc_r+0x1c>
 8008860:	42a9      	cmp	r1, r5
 8008862:	d905      	bls.n	8008870 <_malloc_r+0x28>
 8008864:	230c      	movs	r3, #12
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	2600      	movs	r6, #0
 800886a:	4630      	mov	r0, r6
 800886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008870:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008944 <_malloc_r+0xfc>
 8008874:	f000 f868 	bl	8008948 <__malloc_lock>
 8008878:	f8d8 3000 	ldr.w	r3, [r8]
 800887c:	461c      	mov	r4, r3
 800887e:	bb5c      	cbnz	r4, 80088d8 <_malloc_r+0x90>
 8008880:	4629      	mov	r1, r5
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ffc0 	bl	8008808 <sbrk_aligned>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	4604      	mov	r4, r0
 800888c:	d155      	bne.n	800893a <_malloc_r+0xf2>
 800888e:	f8d8 4000 	ldr.w	r4, [r8]
 8008892:	4626      	mov	r6, r4
 8008894:	2e00      	cmp	r6, #0
 8008896:	d145      	bne.n	8008924 <_malloc_r+0xdc>
 8008898:	2c00      	cmp	r4, #0
 800889a:	d048      	beq.n	800892e <_malloc_r+0xe6>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	4631      	mov	r1, r6
 80088a0:	4638      	mov	r0, r7
 80088a2:	eb04 0903 	add.w	r9, r4, r3
 80088a6:	f001 fd8d 	bl	800a3c4 <_sbrk_r>
 80088aa:	4581      	cmp	r9, r0
 80088ac:	d13f      	bne.n	800892e <_malloc_r+0xe6>
 80088ae:	6821      	ldr	r1, [r4, #0]
 80088b0:	1a6d      	subs	r5, r5, r1
 80088b2:	4629      	mov	r1, r5
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ffa7 	bl	8008808 <sbrk_aligned>
 80088ba:	3001      	adds	r0, #1
 80088bc:	d037      	beq.n	800892e <_malloc_r+0xe6>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	442b      	add	r3, r5
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	f8d8 3000 	ldr.w	r3, [r8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d038      	beq.n	800893e <_malloc_r+0xf6>
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	42a2      	cmp	r2, r4
 80088d0:	d12b      	bne.n	800892a <_malloc_r+0xe2>
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	e00f      	b.n	80088f8 <_malloc_r+0xb0>
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	1b52      	subs	r2, r2, r5
 80088dc:	d41f      	bmi.n	800891e <_malloc_r+0xd6>
 80088de:	2a0b      	cmp	r2, #11
 80088e0:	d917      	bls.n	8008912 <_malloc_r+0xca>
 80088e2:	1961      	adds	r1, r4, r5
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	6025      	str	r5, [r4, #0]
 80088e8:	bf18      	it	ne
 80088ea:	6059      	strne	r1, [r3, #4]
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	bf08      	it	eq
 80088f0:	f8c8 1000 	streq.w	r1, [r8]
 80088f4:	5162      	str	r2, [r4, r5]
 80088f6:	604b      	str	r3, [r1, #4]
 80088f8:	4638      	mov	r0, r7
 80088fa:	f104 060b 	add.w	r6, r4, #11
 80088fe:	f000 f829 	bl	8008954 <__malloc_unlock>
 8008902:	f026 0607 	bic.w	r6, r6, #7
 8008906:	1d23      	adds	r3, r4, #4
 8008908:	1af2      	subs	r2, r6, r3
 800890a:	d0ae      	beq.n	800886a <_malloc_r+0x22>
 800890c:	1b9b      	subs	r3, r3, r6
 800890e:	50a3      	str	r3, [r4, r2]
 8008910:	e7ab      	b.n	800886a <_malloc_r+0x22>
 8008912:	42a3      	cmp	r3, r4
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	d1dd      	bne.n	80088d4 <_malloc_r+0x8c>
 8008918:	f8c8 2000 	str.w	r2, [r8]
 800891c:	e7ec      	b.n	80088f8 <_malloc_r+0xb0>
 800891e:	4623      	mov	r3, r4
 8008920:	6864      	ldr	r4, [r4, #4]
 8008922:	e7ac      	b.n	800887e <_malloc_r+0x36>
 8008924:	4634      	mov	r4, r6
 8008926:	6876      	ldr	r6, [r6, #4]
 8008928:	e7b4      	b.n	8008894 <_malloc_r+0x4c>
 800892a:	4613      	mov	r3, r2
 800892c:	e7cc      	b.n	80088c8 <_malloc_r+0x80>
 800892e:	230c      	movs	r3, #12
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4638      	mov	r0, r7
 8008934:	f000 f80e 	bl	8008954 <__malloc_unlock>
 8008938:	e797      	b.n	800886a <_malloc_r+0x22>
 800893a:	6025      	str	r5, [r4, #0]
 800893c:	e7dc      	b.n	80088f8 <_malloc_r+0xb0>
 800893e:	605b      	str	r3, [r3, #4]
 8008940:	deff      	udf	#255	; 0xff
 8008942:	bf00      	nop
 8008944:	20000660 	.word	0x20000660

08008948 <__malloc_lock>:
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__malloc_lock+0x8>)
 800894a:	f7ff b90a 	b.w	8007b62 <__retarget_lock_acquire_recursive>
 800894e:	bf00      	nop
 8008950:	2000065c 	.word	0x2000065c

08008954 <__malloc_unlock>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__malloc_unlock+0x8>)
 8008956:	f7ff b905 	b.w	8007b64 <__retarget_lock_release_recursive>
 800895a:	bf00      	nop
 800895c:	2000065c 	.word	0x2000065c

08008960 <_Balloc>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	69c6      	ldr	r6, [r0, #28]
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	b976      	cbnz	r6, 8008988 <_Balloc+0x28>
 800896a:	2010      	movs	r0, #16
 800896c:	f7ff ff44 	bl	80087f8 <malloc>
 8008970:	4602      	mov	r2, r0
 8008972:	61e0      	str	r0, [r4, #28]
 8008974:	b920      	cbnz	r0, 8008980 <_Balloc+0x20>
 8008976:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <_Balloc+0x78>)
 8008978:	4818      	ldr	r0, [pc, #96]	; (80089dc <_Balloc+0x7c>)
 800897a:	216b      	movs	r1, #107	; 0x6b
 800897c:	f001 fd48 	bl	800a410 <__assert_func>
 8008980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008984:	6006      	str	r6, [r0, #0]
 8008986:	60c6      	str	r6, [r0, #12]
 8008988:	69e6      	ldr	r6, [r4, #28]
 800898a:	68f3      	ldr	r3, [r6, #12]
 800898c:	b183      	cbz	r3, 80089b0 <_Balloc+0x50>
 800898e:	69e3      	ldr	r3, [r4, #28]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008996:	b9b8      	cbnz	r0, 80089c8 <_Balloc+0x68>
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f605 	lsl.w	r6, r1, r5
 800899e:	1d72      	adds	r2, r6, #5
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	4620      	mov	r0, r4
 80089a4:	f001 fd52 	bl	800a44c <_calloc_r>
 80089a8:	b160      	cbz	r0, 80089c4 <_Balloc+0x64>
 80089aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089ae:	e00e      	b.n	80089ce <_Balloc+0x6e>
 80089b0:	2221      	movs	r2, #33	; 0x21
 80089b2:	2104      	movs	r1, #4
 80089b4:	4620      	mov	r0, r4
 80089b6:	f001 fd49 	bl	800a44c <_calloc_r>
 80089ba:	69e3      	ldr	r3, [r4, #28]
 80089bc:	60f0      	str	r0, [r6, #12]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <_Balloc+0x2e>
 80089c4:	2000      	movs	r0, #0
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	6802      	ldr	r2, [r0, #0]
 80089ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ce:	2300      	movs	r3, #0
 80089d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d4:	e7f7      	b.n	80089c6 <_Balloc+0x66>
 80089d6:	bf00      	nop
 80089d8:	0800b1c6 	.word	0x0800b1c6
 80089dc:	0800b246 	.word	0x0800b246

080089e0 <_Bfree>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	69c6      	ldr	r6, [r0, #28]
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	b976      	cbnz	r6, 8008a08 <_Bfree+0x28>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f7ff ff04 	bl	80087f8 <malloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	61e8      	str	r0, [r5, #28]
 80089f4:	b920      	cbnz	r0, 8008a00 <_Bfree+0x20>
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <_Bfree+0x3c>)
 80089f8:	4809      	ldr	r0, [pc, #36]	; (8008a20 <_Bfree+0x40>)
 80089fa:	218f      	movs	r1, #143	; 0x8f
 80089fc:	f001 fd08 	bl	800a410 <__assert_func>
 8008a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a04:	6006      	str	r6, [r0, #0]
 8008a06:	60c6      	str	r6, [r0, #12]
 8008a08:	b13c      	cbz	r4, 8008a1a <_Bfree+0x3a>
 8008a0a:	69eb      	ldr	r3, [r5, #28]
 8008a0c:	6862      	ldr	r2, [r4, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a14:	6021      	str	r1, [r4, #0]
 8008a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	0800b1c6 	.word	0x0800b1c6
 8008a20:	0800b246 	.word	0x0800b246

08008a24 <__multadd>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	690d      	ldr	r5, [r1, #16]
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	461e      	mov	r6, r3
 8008a30:	f101 0c14 	add.w	ip, r1, #20
 8008a34:	2000      	movs	r0, #0
 8008a36:	f8dc 3000 	ldr.w	r3, [ip]
 8008a3a:	b299      	uxth	r1, r3
 8008a3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a40:	0c1e      	lsrs	r6, r3, #16
 8008a42:	0c0b      	lsrs	r3, r1, #16
 8008a44:	fb02 3306 	mla	r3, r2, r6, r3
 8008a48:	b289      	uxth	r1, r1
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a50:	4285      	cmp	r5, r0
 8008a52:	f84c 1b04 	str.w	r1, [ip], #4
 8008a56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a5a:	dcec      	bgt.n	8008a36 <__multadd+0x12>
 8008a5c:	b30e      	cbz	r6, 8008aa2 <__multadd+0x7e>
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dc19      	bgt.n	8008a98 <__multadd+0x74>
 8008a64:	6861      	ldr	r1, [r4, #4]
 8008a66:	4638      	mov	r0, r7
 8008a68:	3101      	adds	r1, #1
 8008a6a:	f7ff ff79 	bl	8008960 <_Balloc>
 8008a6e:	4680      	mov	r8, r0
 8008a70:	b928      	cbnz	r0, 8008a7e <__multadd+0x5a>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <__multadd+0x84>)
 8008a76:	480d      	ldr	r0, [pc, #52]	; (8008aac <__multadd+0x88>)
 8008a78:	21ba      	movs	r1, #186	; 0xba
 8008a7a:	f001 fcc9 	bl	800a410 <__assert_func>
 8008a7e:	6922      	ldr	r2, [r4, #16]
 8008a80:	3202      	adds	r2, #2
 8008a82:	f104 010c 	add.w	r1, r4, #12
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	300c      	adds	r0, #12
 8008a8a:	f001 fcab 	bl	800a3e4 <memcpy>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ffa5 	bl	80089e0 <_Bfree>
 8008a96:	4644      	mov	r4, r8
 8008a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	615e      	str	r6, [r3, #20]
 8008aa0:	6125      	str	r5, [r4, #16]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa8:	0800b235 	.word	0x0800b235
 8008aac:	0800b246 	.word	0x0800b246

08008ab0 <__s2b>:
 8008ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	4615      	mov	r5, r2
 8008ab8:	461f      	mov	r7, r3
 8008aba:	2209      	movs	r2, #9
 8008abc:	3308      	adds	r3, #8
 8008abe:	4606      	mov	r6, r0
 8008ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	db09      	blt.n	8008ae0 <__s2b+0x30>
 8008acc:	4630      	mov	r0, r6
 8008ace:	f7ff ff47 	bl	8008960 <_Balloc>
 8008ad2:	b940      	cbnz	r0, 8008ae6 <__s2b+0x36>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	4b19      	ldr	r3, [pc, #100]	; (8008b3c <__s2b+0x8c>)
 8008ad8:	4819      	ldr	r0, [pc, #100]	; (8008b40 <__s2b+0x90>)
 8008ada:	21d3      	movs	r1, #211	; 0xd3
 8008adc:	f001 fc98 	bl	800a410 <__assert_func>
 8008ae0:	0052      	lsls	r2, r2, #1
 8008ae2:	3101      	adds	r1, #1
 8008ae4:	e7f0      	b.n	8008ac8 <__s2b+0x18>
 8008ae6:	9b08      	ldr	r3, [sp, #32]
 8008ae8:	6143      	str	r3, [r0, #20]
 8008aea:	2d09      	cmp	r5, #9
 8008aec:	f04f 0301 	mov.w	r3, #1
 8008af0:	6103      	str	r3, [r0, #16]
 8008af2:	dd16      	ble.n	8008b22 <__s2b+0x72>
 8008af4:	f104 0909 	add.w	r9, r4, #9
 8008af8:	46c8      	mov	r8, r9
 8008afa:	442c      	add	r4, r5
 8008afc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b00:	4601      	mov	r1, r0
 8008b02:	3b30      	subs	r3, #48	; 0x30
 8008b04:	220a      	movs	r2, #10
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff ff8c 	bl	8008a24 <__multadd>
 8008b0c:	45a0      	cmp	r8, r4
 8008b0e:	d1f5      	bne.n	8008afc <__s2b+0x4c>
 8008b10:	f1a5 0408 	sub.w	r4, r5, #8
 8008b14:	444c      	add	r4, r9
 8008b16:	1b2d      	subs	r5, r5, r4
 8008b18:	1963      	adds	r3, r4, r5
 8008b1a:	42bb      	cmp	r3, r7
 8008b1c:	db04      	blt.n	8008b28 <__s2b+0x78>
 8008b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b22:	340a      	adds	r4, #10
 8008b24:	2509      	movs	r5, #9
 8008b26:	e7f6      	b.n	8008b16 <__s2b+0x66>
 8008b28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b2c:	4601      	mov	r1, r0
 8008b2e:	3b30      	subs	r3, #48	; 0x30
 8008b30:	220a      	movs	r2, #10
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff ff76 	bl	8008a24 <__multadd>
 8008b38:	e7ee      	b.n	8008b18 <__s2b+0x68>
 8008b3a:	bf00      	nop
 8008b3c:	0800b235 	.word	0x0800b235
 8008b40:	0800b246 	.word	0x0800b246

08008b44 <__hi0bits>:
 8008b44:	0c03      	lsrs	r3, r0, #16
 8008b46:	041b      	lsls	r3, r3, #16
 8008b48:	b9d3      	cbnz	r3, 8008b80 <__hi0bits+0x3c>
 8008b4a:	0400      	lsls	r0, r0, #16
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b52:	bf04      	itt	eq
 8008b54:	0200      	lsleq	r0, r0, #8
 8008b56:	3308      	addeq	r3, #8
 8008b58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b5c:	bf04      	itt	eq
 8008b5e:	0100      	lsleq	r0, r0, #4
 8008b60:	3304      	addeq	r3, #4
 8008b62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b66:	bf04      	itt	eq
 8008b68:	0080      	lsleq	r0, r0, #2
 8008b6a:	3302      	addeq	r3, #2
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	db05      	blt.n	8008b7c <__hi0bits+0x38>
 8008b70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b74:	f103 0301 	add.w	r3, r3, #1
 8008b78:	bf08      	it	eq
 8008b7a:	2320      	moveq	r3, #32
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	4770      	bx	lr
 8008b80:	2300      	movs	r3, #0
 8008b82:	e7e4      	b.n	8008b4e <__hi0bits+0xa>

08008b84 <__lo0bits>:
 8008b84:	6803      	ldr	r3, [r0, #0]
 8008b86:	f013 0207 	ands.w	r2, r3, #7
 8008b8a:	d00c      	beq.n	8008ba6 <__lo0bits+0x22>
 8008b8c:	07d9      	lsls	r1, r3, #31
 8008b8e:	d422      	bmi.n	8008bd6 <__lo0bits+0x52>
 8008b90:	079a      	lsls	r2, r3, #30
 8008b92:	bf49      	itett	mi
 8008b94:	085b      	lsrmi	r3, r3, #1
 8008b96:	089b      	lsrpl	r3, r3, #2
 8008b98:	6003      	strmi	r3, [r0, #0]
 8008b9a:	2201      	movmi	r2, #1
 8008b9c:	bf5c      	itt	pl
 8008b9e:	6003      	strpl	r3, [r0, #0]
 8008ba0:	2202      	movpl	r2, #2
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4770      	bx	lr
 8008ba6:	b299      	uxth	r1, r3
 8008ba8:	b909      	cbnz	r1, 8008bae <__lo0bits+0x2a>
 8008baa:	0c1b      	lsrs	r3, r3, #16
 8008bac:	2210      	movs	r2, #16
 8008bae:	b2d9      	uxtb	r1, r3
 8008bb0:	b909      	cbnz	r1, 8008bb6 <__lo0bits+0x32>
 8008bb2:	3208      	adds	r2, #8
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	0719      	lsls	r1, r3, #28
 8008bb8:	bf04      	itt	eq
 8008bba:	091b      	lsreq	r3, r3, #4
 8008bbc:	3204      	addeq	r2, #4
 8008bbe:	0799      	lsls	r1, r3, #30
 8008bc0:	bf04      	itt	eq
 8008bc2:	089b      	lsreq	r3, r3, #2
 8008bc4:	3202      	addeq	r2, #2
 8008bc6:	07d9      	lsls	r1, r3, #31
 8008bc8:	d403      	bmi.n	8008bd2 <__lo0bits+0x4e>
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	f102 0201 	add.w	r2, r2, #1
 8008bd0:	d003      	beq.n	8008bda <__lo0bits+0x56>
 8008bd2:	6003      	str	r3, [r0, #0]
 8008bd4:	e7e5      	b.n	8008ba2 <__lo0bits+0x1e>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	e7e3      	b.n	8008ba2 <__lo0bits+0x1e>
 8008bda:	2220      	movs	r2, #32
 8008bdc:	e7e1      	b.n	8008ba2 <__lo0bits+0x1e>
	...

08008be0 <__i2b>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	460c      	mov	r4, r1
 8008be4:	2101      	movs	r1, #1
 8008be6:	f7ff febb 	bl	8008960 <_Balloc>
 8008bea:	4602      	mov	r2, r0
 8008bec:	b928      	cbnz	r0, 8008bfa <__i2b+0x1a>
 8008bee:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <__i2b+0x24>)
 8008bf0:	4805      	ldr	r0, [pc, #20]	; (8008c08 <__i2b+0x28>)
 8008bf2:	f240 1145 	movw	r1, #325	; 0x145
 8008bf6:	f001 fc0b 	bl	800a410 <__assert_func>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	6144      	str	r4, [r0, #20]
 8008bfe:	6103      	str	r3, [r0, #16]
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	bf00      	nop
 8008c04:	0800b235 	.word	0x0800b235
 8008c08:	0800b246 	.word	0x0800b246

08008c0c <__multiply>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	4691      	mov	r9, r2
 8008c12:	690a      	ldr	r2, [r1, #16]
 8008c14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bfb8      	it	lt
 8008c1c:	460b      	movlt	r3, r1
 8008c1e:	460c      	mov	r4, r1
 8008c20:	bfbc      	itt	lt
 8008c22:	464c      	movlt	r4, r9
 8008c24:	4699      	movlt	r9, r3
 8008c26:	6927      	ldr	r7, [r4, #16]
 8008c28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	6861      	ldr	r1, [r4, #4]
 8008c30:	eb07 060a 	add.w	r6, r7, sl
 8008c34:	42b3      	cmp	r3, r6
 8008c36:	b085      	sub	sp, #20
 8008c38:	bfb8      	it	lt
 8008c3a:	3101      	addlt	r1, #1
 8008c3c:	f7ff fe90 	bl	8008960 <_Balloc>
 8008c40:	b930      	cbnz	r0, 8008c50 <__multiply+0x44>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b44      	ldr	r3, [pc, #272]	; (8008d58 <__multiply+0x14c>)
 8008c46:	4845      	ldr	r0, [pc, #276]	; (8008d5c <__multiply+0x150>)
 8008c48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008c4c:	f001 fbe0 	bl	800a410 <__assert_func>
 8008c50:	f100 0514 	add.w	r5, r0, #20
 8008c54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c58:	462b      	mov	r3, r5
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4543      	cmp	r3, r8
 8008c5e:	d321      	bcc.n	8008ca4 <__multiply+0x98>
 8008c60:	f104 0314 	add.w	r3, r4, #20
 8008c64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c68:	f109 0314 	add.w	r3, r9, #20
 8008c6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c70:	9202      	str	r2, [sp, #8]
 8008c72:	1b3a      	subs	r2, r7, r4
 8008c74:	3a15      	subs	r2, #21
 8008c76:	f022 0203 	bic.w	r2, r2, #3
 8008c7a:	3204      	adds	r2, #4
 8008c7c:	f104 0115 	add.w	r1, r4, #21
 8008c80:	428f      	cmp	r7, r1
 8008c82:	bf38      	it	cc
 8008c84:	2204      	movcc	r2, #4
 8008c86:	9201      	str	r2, [sp, #4]
 8008c88:	9a02      	ldr	r2, [sp, #8]
 8008c8a:	9303      	str	r3, [sp, #12]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d80c      	bhi.n	8008caa <__multiply+0x9e>
 8008c90:	2e00      	cmp	r6, #0
 8008c92:	dd03      	ble.n	8008c9c <__multiply+0x90>
 8008c94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d05b      	beq.n	8008d54 <__multiply+0x148>
 8008c9c:	6106      	str	r6, [r0, #16]
 8008c9e:	b005      	add	sp, #20
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	f843 2b04 	str.w	r2, [r3], #4
 8008ca8:	e7d8      	b.n	8008c5c <__multiply+0x50>
 8008caa:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cae:	f1ba 0f00 	cmp.w	sl, #0
 8008cb2:	d024      	beq.n	8008cfe <__multiply+0xf2>
 8008cb4:	f104 0e14 	add.w	lr, r4, #20
 8008cb8:	46a9      	mov	r9, r5
 8008cba:	f04f 0c00 	mov.w	ip, #0
 8008cbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008cc2:	f8d9 1000 	ldr.w	r1, [r9]
 8008cc6:	fa1f fb82 	uxth.w	fp, r2
 8008cca:	b289      	uxth	r1, r1
 8008ccc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008cd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8008cd8:	4461      	add	r1, ip
 8008cda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cde:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ce6:	b289      	uxth	r1, r1
 8008ce8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008cec:	4577      	cmp	r7, lr
 8008cee:	f849 1b04 	str.w	r1, [r9], #4
 8008cf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cf6:	d8e2      	bhi.n	8008cbe <__multiply+0xb2>
 8008cf8:	9a01      	ldr	r2, [sp, #4]
 8008cfa:	f845 c002 	str.w	ip, [r5, r2]
 8008cfe:	9a03      	ldr	r2, [sp, #12]
 8008d00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d04:	3304      	adds	r3, #4
 8008d06:	f1b9 0f00 	cmp.w	r9, #0
 8008d0a:	d021      	beq.n	8008d50 <__multiply+0x144>
 8008d0c:	6829      	ldr	r1, [r5, #0]
 8008d0e:	f104 0c14 	add.w	ip, r4, #20
 8008d12:	46ae      	mov	lr, r5
 8008d14:	f04f 0a00 	mov.w	sl, #0
 8008d18:	f8bc b000 	ldrh.w	fp, [ip]
 8008d1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d20:	fb09 220b 	mla	r2, r9, fp, r2
 8008d24:	4452      	add	r2, sl
 8008d26:	b289      	uxth	r1, r1
 8008d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d2c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008d34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d38:	f8be 1000 	ldrh.w	r1, [lr]
 8008d3c:	fb09 110a 	mla	r1, r9, sl, r1
 8008d40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d44:	4567      	cmp	r7, ip
 8008d46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d4a:	d8e5      	bhi.n	8008d18 <__multiply+0x10c>
 8008d4c:	9a01      	ldr	r2, [sp, #4]
 8008d4e:	50a9      	str	r1, [r5, r2]
 8008d50:	3504      	adds	r5, #4
 8008d52:	e799      	b.n	8008c88 <__multiply+0x7c>
 8008d54:	3e01      	subs	r6, #1
 8008d56:	e79b      	b.n	8008c90 <__multiply+0x84>
 8008d58:	0800b235 	.word	0x0800b235
 8008d5c:	0800b246 	.word	0x0800b246

08008d60 <__pow5mult>:
 8008d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d64:	4615      	mov	r5, r2
 8008d66:	f012 0203 	ands.w	r2, r2, #3
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	460f      	mov	r7, r1
 8008d6e:	d007      	beq.n	8008d80 <__pow5mult+0x20>
 8008d70:	4c25      	ldr	r4, [pc, #148]	; (8008e08 <__pow5mult+0xa8>)
 8008d72:	3a01      	subs	r2, #1
 8008d74:	2300      	movs	r3, #0
 8008d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d7a:	f7ff fe53 	bl	8008a24 <__multadd>
 8008d7e:	4607      	mov	r7, r0
 8008d80:	10ad      	asrs	r5, r5, #2
 8008d82:	d03d      	beq.n	8008e00 <__pow5mult+0xa0>
 8008d84:	69f4      	ldr	r4, [r6, #28]
 8008d86:	b97c      	cbnz	r4, 8008da8 <__pow5mult+0x48>
 8008d88:	2010      	movs	r0, #16
 8008d8a:	f7ff fd35 	bl	80087f8 <malloc>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	61f0      	str	r0, [r6, #28]
 8008d92:	b928      	cbnz	r0, 8008da0 <__pow5mult+0x40>
 8008d94:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <__pow5mult+0xac>)
 8008d96:	481e      	ldr	r0, [pc, #120]	; (8008e10 <__pow5mult+0xb0>)
 8008d98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d9c:	f001 fb38 	bl	800a410 <__assert_func>
 8008da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008da4:	6004      	str	r4, [r0, #0]
 8008da6:	60c4      	str	r4, [r0, #12]
 8008da8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008db0:	b94c      	cbnz	r4, 8008dc6 <__pow5mult+0x66>
 8008db2:	f240 2171 	movw	r1, #625	; 0x271
 8008db6:	4630      	mov	r0, r6
 8008db8:	f7ff ff12 	bl	8008be0 <__i2b>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	6003      	str	r3, [r0, #0]
 8008dc6:	f04f 0900 	mov.w	r9, #0
 8008dca:	07eb      	lsls	r3, r5, #31
 8008dcc:	d50a      	bpl.n	8008de4 <__pow5mult+0x84>
 8008dce:	4639      	mov	r1, r7
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7ff ff1a 	bl	8008c0c <__multiply>
 8008dd8:	4639      	mov	r1, r7
 8008dda:	4680      	mov	r8, r0
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7ff fdff 	bl	80089e0 <_Bfree>
 8008de2:	4647      	mov	r7, r8
 8008de4:	106d      	asrs	r5, r5, #1
 8008de6:	d00b      	beq.n	8008e00 <__pow5mult+0xa0>
 8008de8:	6820      	ldr	r0, [r4, #0]
 8008dea:	b938      	cbnz	r0, 8008dfc <__pow5mult+0x9c>
 8008dec:	4622      	mov	r2, r4
 8008dee:	4621      	mov	r1, r4
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff ff0b 	bl	8008c0c <__multiply>
 8008df6:	6020      	str	r0, [r4, #0]
 8008df8:	f8c0 9000 	str.w	r9, [r0]
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	e7e4      	b.n	8008dca <__pow5mult+0x6a>
 8008e00:	4638      	mov	r0, r7
 8008e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e06:	bf00      	nop
 8008e08:	0800b390 	.word	0x0800b390
 8008e0c:	0800b1c6 	.word	0x0800b1c6
 8008e10:	0800b246 	.word	0x0800b246

08008e14 <__lshift>:
 8008e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e18:	460c      	mov	r4, r1
 8008e1a:	6849      	ldr	r1, [r1, #4]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	4607      	mov	r7, r0
 8008e26:	4691      	mov	r9, r2
 8008e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e2c:	f108 0601 	add.w	r6, r8, #1
 8008e30:	42b3      	cmp	r3, r6
 8008e32:	db0b      	blt.n	8008e4c <__lshift+0x38>
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff fd93 	bl	8008960 <_Balloc>
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	b948      	cbnz	r0, 8008e52 <__lshift+0x3e>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	4b28      	ldr	r3, [pc, #160]	; (8008ee4 <__lshift+0xd0>)
 8008e42:	4829      	ldr	r0, [pc, #164]	; (8008ee8 <__lshift+0xd4>)
 8008e44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e48:	f001 fae2 	bl	800a410 <__assert_func>
 8008e4c:	3101      	adds	r1, #1
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	e7ee      	b.n	8008e30 <__lshift+0x1c>
 8008e52:	2300      	movs	r3, #0
 8008e54:	f100 0114 	add.w	r1, r0, #20
 8008e58:	f100 0210 	add.w	r2, r0, #16
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	4553      	cmp	r3, sl
 8008e60:	db33      	blt.n	8008eca <__lshift+0xb6>
 8008e62:	6920      	ldr	r0, [r4, #16]
 8008e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e68:	f104 0314 	add.w	r3, r4, #20
 8008e6c:	f019 091f 	ands.w	r9, r9, #31
 8008e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e78:	d02b      	beq.n	8008ed2 <__lshift+0xbe>
 8008e7a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e7e:	468a      	mov	sl, r1
 8008e80:	2200      	movs	r2, #0
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	fa00 f009 	lsl.w	r0, r0, r9
 8008e88:	4310      	orrs	r0, r2
 8008e8a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e92:	459c      	cmp	ip, r3
 8008e94:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e98:	d8f3      	bhi.n	8008e82 <__lshift+0x6e>
 8008e9a:	ebac 0304 	sub.w	r3, ip, r4
 8008e9e:	3b15      	subs	r3, #21
 8008ea0:	f023 0303 	bic.w	r3, r3, #3
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	f104 0015 	add.w	r0, r4, #21
 8008eaa:	4584      	cmp	ip, r0
 8008eac:	bf38      	it	cc
 8008eae:	2304      	movcc	r3, #4
 8008eb0:	50ca      	str	r2, [r1, r3]
 8008eb2:	b10a      	cbz	r2, 8008eb8 <__lshift+0xa4>
 8008eb4:	f108 0602 	add.w	r6, r8, #2
 8008eb8:	3e01      	subs	r6, #1
 8008eba:	4638      	mov	r0, r7
 8008ebc:	612e      	str	r6, [r5, #16]
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	f7ff fd8e 	bl	80089e0 <_Bfree>
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ece:	3301      	adds	r3, #1
 8008ed0:	e7c5      	b.n	8008e5e <__lshift+0x4a>
 8008ed2:	3904      	subs	r1, #4
 8008ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008edc:	459c      	cmp	ip, r3
 8008ede:	d8f9      	bhi.n	8008ed4 <__lshift+0xc0>
 8008ee0:	e7ea      	b.n	8008eb8 <__lshift+0xa4>
 8008ee2:	bf00      	nop
 8008ee4:	0800b235 	.word	0x0800b235
 8008ee8:	0800b246 	.word	0x0800b246

08008eec <__mcmp>:
 8008eec:	b530      	push	{r4, r5, lr}
 8008eee:	6902      	ldr	r2, [r0, #16]
 8008ef0:	690c      	ldr	r4, [r1, #16]
 8008ef2:	1b12      	subs	r2, r2, r4
 8008ef4:	d10e      	bne.n	8008f14 <__mcmp+0x28>
 8008ef6:	f100 0314 	add.w	r3, r0, #20
 8008efa:	3114      	adds	r1, #20
 8008efc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f0c:	42a5      	cmp	r5, r4
 8008f0e:	d003      	beq.n	8008f18 <__mcmp+0x2c>
 8008f10:	d305      	bcc.n	8008f1e <__mcmp+0x32>
 8008f12:	2201      	movs	r2, #1
 8008f14:	4610      	mov	r0, r2
 8008f16:	bd30      	pop	{r4, r5, pc}
 8008f18:	4283      	cmp	r3, r0
 8008f1a:	d3f3      	bcc.n	8008f04 <__mcmp+0x18>
 8008f1c:	e7fa      	b.n	8008f14 <__mcmp+0x28>
 8008f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f22:	e7f7      	b.n	8008f14 <__mcmp+0x28>

08008f24 <__mdiff>:
 8008f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	460c      	mov	r4, r1
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4690      	mov	r8, r2
 8008f32:	f7ff ffdb 	bl	8008eec <__mcmp>
 8008f36:	1e05      	subs	r5, r0, #0
 8008f38:	d110      	bne.n	8008f5c <__mdiff+0x38>
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff fd0f 	bl	8008960 <_Balloc>
 8008f42:	b930      	cbnz	r0, 8008f52 <__mdiff+0x2e>
 8008f44:	4b3a      	ldr	r3, [pc, #232]	; (8009030 <__mdiff+0x10c>)
 8008f46:	4602      	mov	r2, r0
 8008f48:	f240 2137 	movw	r1, #567	; 0x237
 8008f4c:	4839      	ldr	r0, [pc, #228]	; (8009034 <__mdiff+0x110>)
 8008f4e:	f001 fa5f 	bl	800a410 <__assert_func>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	bfa4      	itt	ge
 8008f5e:	4643      	movge	r3, r8
 8008f60:	46a0      	movge	r8, r4
 8008f62:	4630      	mov	r0, r6
 8008f64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f68:	bfa6      	itte	ge
 8008f6a:	461c      	movge	r4, r3
 8008f6c:	2500      	movge	r5, #0
 8008f6e:	2501      	movlt	r5, #1
 8008f70:	f7ff fcf6 	bl	8008960 <_Balloc>
 8008f74:	b920      	cbnz	r0, 8008f80 <__mdiff+0x5c>
 8008f76:	4b2e      	ldr	r3, [pc, #184]	; (8009030 <__mdiff+0x10c>)
 8008f78:	4602      	mov	r2, r0
 8008f7a:	f240 2145 	movw	r1, #581	; 0x245
 8008f7e:	e7e5      	b.n	8008f4c <__mdiff+0x28>
 8008f80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f84:	6926      	ldr	r6, [r4, #16]
 8008f86:	60c5      	str	r5, [r0, #12]
 8008f88:	f104 0914 	add.w	r9, r4, #20
 8008f8c:	f108 0514 	add.w	r5, r8, #20
 8008f90:	f100 0e14 	add.w	lr, r0, #20
 8008f94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f9c:	f108 0210 	add.w	r2, r8, #16
 8008fa0:	46f2      	mov	sl, lr
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008fac:	fa11 f88b 	uxtah	r8, r1, fp
 8008fb0:	b299      	uxth	r1, r3
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	eba8 0801 	sub.w	r8, r8, r1
 8008fb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fc0:	fa1f f888 	uxth.w	r8, r8
 8008fc4:	1419      	asrs	r1, r3, #16
 8008fc6:	454e      	cmp	r6, r9
 8008fc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fcc:	f84a 3b04 	str.w	r3, [sl], #4
 8008fd0:	d8e8      	bhi.n	8008fa4 <__mdiff+0x80>
 8008fd2:	1b33      	subs	r3, r6, r4
 8008fd4:	3b15      	subs	r3, #21
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	3304      	adds	r3, #4
 8008fdc:	3415      	adds	r4, #21
 8008fde:	42a6      	cmp	r6, r4
 8008fe0:	bf38      	it	cc
 8008fe2:	2304      	movcc	r3, #4
 8008fe4:	441d      	add	r5, r3
 8008fe6:	4473      	add	r3, lr
 8008fe8:	469e      	mov	lr, r3
 8008fea:	462e      	mov	r6, r5
 8008fec:	4566      	cmp	r6, ip
 8008fee:	d30e      	bcc.n	800900e <__mdiff+0xea>
 8008ff0:	f10c 0203 	add.w	r2, ip, #3
 8008ff4:	1b52      	subs	r2, r2, r5
 8008ff6:	f022 0203 	bic.w	r2, r2, #3
 8008ffa:	3d03      	subs	r5, #3
 8008ffc:	45ac      	cmp	ip, r5
 8008ffe:	bf38      	it	cc
 8009000:	2200      	movcc	r2, #0
 8009002:	4413      	add	r3, r2
 8009004:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009008:	b17a      	cbz	r2, 800902a <__mdiff+0x106>
 800900a:	6107      	str	r7, [r0, #16]
 800900c:	e7a4      	b.n	8008f58 <__mdiff+0x34>
 800900e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009012:	fa11 f288 	uxtah	r2, r1, r8
 8009016:	1414      	asrs	r4, r2, #16
 8009018:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800901c:	b292      	uxth	r2, r2
 800901e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009022:	f84e 2b04 	str.w	r2, [lr], #4
 8009026:	1421      	asrs	r1, r4, #16
 8009028:	e7e0      	b.n	8008fec <__mdiff+0xc8>
 800902a:	3f01      	subs	r7, #1
 800902c:	e7ea      	b.n	8009004 <__mdiff+0xe0>
 800902e:	bf00      	nop
 8009030:	0800b235 	.word	0x0800b235
 8009034:	0800b246 	.word	0x0800b246

08009038 <__ulp>:
 8009038:	b082      	sub	sp, #8
 800903a:	ed8d 0b00 	vstr	d0, [sp]
 800903e:	9a01      	ldr	r2, [sp, #4]
 8009040:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <__ulp+0x48>)
 8009042:	4013      	ands	r3, r2
 8009044:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009048:	2b00      	cmp	r3, #0
 800904a:	dc08      	bgt.n	800905e <__ulp+0x26>
 800904c:	425b      	negs	r3, r3
 800904e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009052:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009056:	da04      	bge.n	8009062 <__ulp+0x2a>
 8009058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800905c:	4113      	asrs	r3, r2
 800905e:	2200      	movs	r2, #0
 8009060:	e008      	b.n	8009074 <__ulp+0x3c>
 8009062:	f1a2 0314 	sub.w	r3, r2, #20
 8009066:	2b1e      	cmp	r3, #30
 8009068:	bfda      	itte	le
 800906a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800906e:	40da      	lsrle	r2, r3
 8009070:	2201      	movgt	r2, #1
 8009072:	2300      	movs	r3, #0
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	ec41 0b10 	vmov	d0, r0, r1
 800907c:	b002      	add	sp, #8
 800907e:	4770      	bx	lr
 8009080:	7ff00000 	.word	0x7ff00000

08009084 <__b2d>:
 8009084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009088:	6906      	ldr	r6, [r0, #16]
 800908a:	f100 0814 	add.w	r8, r0, #20
 800908e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009092:	1f37      	subs	r7, r6, #4
 8009094:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009098:	4610      	mov	r0, r2
 800909a:	f7ff fd53 	bl	8008b44 <__hi0bits>
 800909e:	f1c0 0320 	rsb	r3, r0, #32
 80090a2:	280a      	cmp	r0, #10
 80090a4:	600b      	str	r3, [r1, #0]
 80090a6:	491b      	ldr	r1, [pc, #108]	; (8009114 <__b2d+0x90>)
 80090a8:	dc15      	bgt.n	80090d6 <__b2d+0x52>
 80090aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80090ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80090b2:	45b8      	cmp	r8, r7
 80090b4:	ea43 0501 	orr.w	r5, r3, r1
 80090b8:	bf34      	ite	cc
 80090ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090be:	2300      	movcs	r3, #0
 80090c0:	3015      	adds	r0, #21
 80090c2:	fa02 f000 	lsl.w	r0, r2, r0
 80090c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80090ca:	4303      	orrs	r3, r0
 80090cc:	461c      	mov	r4, r3
 80090ce:	ec45 4b10 	vmov	d0, r4, r5
 80090d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d6:	45b8      	cmp	r8, r7
 80090d8:	bf3a      	itte	cc
 80090da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090de:	f1a6 0708 	subcc.w	r7, r6, #8
 80090e2:	2300      	movcs	r3, #0
 80090e4:	380b      	subs	r0, #11
 80090e6:	d012      	beq.n	800910e <__b2d+0x8a>
 80090e8:	f1c0 0120 	rsb	r1, r0, #32
 80090ec:	fa23 f401 	lsr.w	r4, r3, r1
 80090f0:	4082      	lsls	r2, r0
 80090f2:	4322      	orrs	r2, r4
 80090f4:	4547      	cmp	r7, r8
 80090f6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80090fa:	bf8c      	ite	hi
 80090fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009100:	2200      	movls	r2, #0
 8009102:	4083      	lsls	r3, r0
 8009104:	40ca      	lsrs	r2, r1
 8009106:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800910a:	4313      	orrs	r3, r2
 800910c:	e7de      	b.n	80090cc <__b2d+0x48>
 800910e:	ea42 0501 	orr.w	r5, r2, r1
 8009112:	e7db      	b.n	80090cc <__b2d+0x48>
 8009114:	3ff00000 	.word	0x3ff00000

08009118 <__d2b>:
 8009118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800911c:	460f      	mov	r7, r1
 800911e:	2101      	movs	r1, #1
 8009120:	ec59 8b10 	vmov	r8, r9, d0
 8009124:	4616      	mov	r6, r2
 8009126:	f7ff fc1b 	bl	8008960 <_Balloc>
 800912a:	4604      	mov	r4, r0
 800912c:	b930      	cbnz	r0, 800913c <__d2b+0x24>
 800912e:	4602      	mov	r2, r0
 8009130:	4b24      	ldr	r3, [pc, #144]	; (80091c4 <__d2b+0xac>)
 8009132:	4825      	ldr	r0, [pc, #148]	; (80091c8 <__d2b+0xb0>)
 8009134:	f240 310f 	movw	r1, #783	; 0x30f
 8009138:	f001 f96a 	bl	800a410 <__assert_func>
 800913c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009144:	bb2d      	cbnz	r5, 8009192 <__d2b+0x7a>
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	f1b8 0300 	subs.w	r3, r8, #0
 800914c:	d026      	beq.n	800919c <__d2b+0x84>
 800914e:	4668      	mov	r0, sp
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	f7ff fd17 	bl	8008b84 <__lo0bits>
 8009156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800915a:	b1e8      	cbz	r0, 8009198 <__d2b+0x80>
 800915c:	f1c0 0320 	rsb	r3, r0, #32
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	430b      	orrs	r3, r1
 8009166:	40c2      	lsrs	r2, r0
 8009168:	6163      	str	r3, [r4, #20]
 800916a:	9201      	str	r2, [sp, #4]
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	61a3      	str	r3, [r4, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf14      	ite	ne
 8009174:	2202      	movne	r2, #2
 8009176:	2201      	moveq	r2, #1
 8009178:	6122      	str	r2, [r4, #16]
 800917a:	b1bd      	cbz	r5, 80091ac <__d2b+0x94>
 800917c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009180:	4405      	add	r5, r0
 8009182:	603d      	str	r5, [r7, #0]
 8009184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009188:	6030      	str	r0, [r6, #0]
 800918a:	4620      	mov	r0, r4
 800918c:	b003      	add	sp, #12
 800918e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009196:	e7d6      	b.n	8009146 <__d2b+0x2e>
 8009198:	6161      	str	r1, [r4, #20]
 800919a:	e7e7      	b.n	800916c <__d2b+0x54>
 800919c:	a801      	add	r0, sp, #4
 800919e:	f7ff fcf1 	bl	8008b84 <__lo0bits>
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	6163      	str	r3, [r4, #20]
 80091a6:	3020      	adds	r0, #32
 80091a8:	2201      	movs	r2, #1
 80091aa:	e7e5      	b.n	8009178 <__d2b+0x60>
 80091ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091b4:	6038      	str	r0, [r7, #0]
 80091b6:	6918      	ldr	r0, [r3, #16]
 80091b8:	f7ff fcc4 	bl	8008b44 <__hi0bits>
 80091bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091c0:	e7e2      	b.n	8009188 <__d2b+0x70>
 80091c2:	bf00      	nop
 80091c4:	0800b235 	.word	0x0800b235
 80091c8:	0800b246 	.word	0x0800b246

080091cc <__ratio>:
 80091cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	4688      	mov	r8, r1
 80091d2:	4669      	mov	r1, sp
 80091d4:	4681      	mov	r9, r0
 80091d6:	f7ff ff55 	bl	8009084 <__b2d>
 80091da:	a901      	add	r1, sp, #4
 80091dc:	4640      	mov	r0, r8
 80091de:	ec55 4b10 	vmov	r4, r5, d0
 80091e2:	ee10 aa10 	vmov	sl, s0
 80091e6:	f7ff ff4d 	bl	8009084 <__b2d>
 80091ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80091ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80091f8:	1a5b      	subs	r3, r3, r1
 80091fa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80091fe:	ec57 6b10 	vmov	r6, r7, d0
 8009202:	2b00      	cmp	r3, #0
 8009204:	bfd6      	itet	le
 8009206:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800920a:	462a      	movgt	r2, r5
 800920c:	463a      	movle	r2, r7
 800920e:	46ab      	mov	fp, r5
 8009210:	bfd6      	itet	le
 8009212:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009216:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800921a:	ee00 3a90 	vmovle	s1, r3
 800921e:	ec4b ab17 	vmov	d7, sl, fp
 8009222:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8009226:	b003      	add	sp, #12
 8009228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800922c <__copybits>:
 800922c:	3901      	subs	r1, #1
 800922e:	b570      	push	{r4, r5, r6, lr}
 8009230:	1149      	asrs	r1, r1, #5
 8009232:	6914      	ldr	r4, [r2, #16]
 8009234:	3101      	adds	r1, #1
 8009236:	f102 0314 	add.w	r3, r2, #20
 800923a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800923e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009242:	1f05      	subs	r5, r0, #4
 8009244:	42a3      	cmp	r3, r4
 8009246:	d30c      	bcc.n	8009262 <__copybits+0x36>
 8009248:	1aa3      	subs	r3, r4, r2
 800924a:	3b11      	subs	r3, #17
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	3211      	adds	r2, #17
 8009252:	42a2      	cmp	r2, r4
 8009254:	bf88      	it	hi
 8009256:	2300      	movhi	r3, #0
 8009258:	4418      	add	r0, r3
 800925a:	2300      	movs	r3, #0
 800925c:	4288      	cmp	r0, r1
 800925e:	d305      	bcc.n	800926c <__copybits+0x40>
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	f853 6b04 	ldr.w	r6, [r3], #4
 8009266:	f845 6f04 	str.w	r6, [r5, #4]!
 800926a:	e7eb      	b.n	8009244 <__copybits+0x18>
 800926c:	f840 3b04 	str.w	r3, [r0], #4
 8009270:	e7f4      	b.n	800925c <__copybits+0x30>

08009272 <__any_on>:
 8009272:	f100 0214 	add.w	r2, r0, #20
 8009276:	6900      	ldr	r0, [r0, #16]
 8009278:	114b      	asrs	r3, r1, #5
 800927a:	4298      	cmp	r0, r3
 800927c:	b510      	push	{r4, lr}
 800927e:	db11      	blt.n	80092a4 <__any_on+0x32>
 8009280:	dd0a      	ble.n	8009298 <__any_on+0x26>
 8009282:	f011 011f 	ands.w	r1, r1, #31
 8009286:	d007      	beq.n	8009298 <__any_on+0x26>
 8009288:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800928c:	fa24 f001 	lsr.w	r0, r4, r1
 8009290:	fa00 f101 	lsl.w	r1, r0, r1
 8009294:	428c      	cmp	r4, r1
 8009296:	d10b      	bne.n	80092b0 <__any_on+0x3e>
 8009298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800929c:	4293      	cmp	r3, r2
 800929e:	d803      	bhi.n	80092a8 <__any_on+0x36>
 80092a0:	2000      	movs	r0, #0
 80092a2:	bd10      	pop	{r4, pc}
 80092a4:	4603      	mov	r3, r0
 80092a6:	e7f7      	b.n	8009298 <__any_on+0x26>
 80092a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d0f5      	beq.n	800929c <__any_on+0x2a>
 80092b0:	2001      	movs	r0, #1
 80092b2:	e7f6      	b.n	80092a2 <__any_on+0x30>

080092b4 <sulp>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	4616      	mov	r6, r2
 80092bc:	ec45 4b10 	vmov	d0, r4, r5
 80092c0:	f7ff feba 	bl	8009038 <__ulp>
 80092c4:	b17e      	cbz	r6, 80092e6 <sulp+0x32>
 80092c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dd09      	ble.n	80092e6 <sulp+0x32>
 80092d2:	051b      	lsls	r3, r3, #20
 80092d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80092d8:	2000      	movs	r0, #0
 80092da:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80092de:	ec41 0b17 	vmov	d7, r0, r1
 80092e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80092e6:	bd70      	pop	{r4, r5, r6, pc}

080092e8 <_strtod_l>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	ed2d 8b0e 	vpush	{d8-d14}
 80092f0:	b097      	sub	sp, #92	; 0x5c
 80092f2:	4604      	mov	r4, r0
 80092f4:	920d      	str	r2, [sp, #52]	; 0x34
 80092f6:	2200      	movs	r2, #0
 80092f8:	9212      	str	r2, [sp, #72]	; 0x48
 80092fa:	468a      	mov	sl, r1
 80092fc:	f04f 0800 	mov.w	r8, #0
 8009300:	f04f 0900 	mov.w	r9, #0
 8009304:	460a      	mov	r2, r1
 8009306:	9211      	str	r2, [sp, #68]	; 0x44
 8009308:	7811      	ldrb	r1, [r2, #0]
 800930a:	292b      	cmp	r1, #43	; 0x2b
 800930c:	d04c      	beq.n	80093a8 <_strtod_l+0xc0>
 800930e:	d839      	bhi.n	8009384 <_strtod_l+0x9c>
 8009310:	290d      	cmp	r1, #13
 8009312:	d833      	bhi.n	800937c <_strtod_l+0x94>
 8009314:	2908      	cmp	r1, #8
 8009316:	d833      	bhi.n	8009380 <_strtod_l+0x98>
 8009318:	2900      	cmp	r1, #0
 800931a:	d03c      	beq.n	8009396 <_strtod_l+0xae>
 800931c:	2200      	movs	r2, #0
 800931e:	9208      	str	r2, [sp, #32]
 8009320:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009322:	7832      	ldrb	r2, [r6, #0]
 8009324:	2a30      	cmp	r2, #48	; 0x30
 8009326:	f040 80b8 	bne.w	800949a <_strtod_l+0x1b2>
 800932a:	7872      	ldrb	r2, [r6, #1]
 800932c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009330:	2a58      	cmp	r2, #88	; 0x58
 8009332:	d170      	bne.n	8009416 <_strtod_l+0x12e>
 8009334:	9302      	str	r3, [sp, #8]
 8009336:	9b08      	ldr	r3, [sp, #32]
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	ab12      	add	r3, sp, #72	; 0x48
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	4a91      	ldr	r2, [pc, #580]	; (8009584 <_strtod_l+0x29c>)
 8009340:	ab13      	add	r3, sp, #76	; 0x4c
 8009342:	a911      	add	r1, sp, #68	; 0x44
 8009344:	4620      	mov	r0, r4
 8009346:	f001 f8ff 	bl	800a548 <__gethex>
 800934a:	f010 070f 	ands.w	r7, r0, #15
 800934e:	4605      	mov	r5, r0
 8009350:	d005      	beq.n	800935e <_strtod_l+0x76>
 8009352:	2f06      	cmp	r7, #6
 8009354:	d12a      	bne.n	80093ac <_strtod_l+0xc4>
 8009356:	3601      	adds	r6, #1
 8009358:	2300      	movs	r3, #0
 800935a:	9611      	str	r6, [sp, #68]	; 0x44
 800935c:	9308      	str	r3, [sp, #32]
 800935e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009360:	2b00      	cmp	r3, #0
 8009362:	f040 8555 	bne.w	8009e10 <_strtod_l+0xb28>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	ec49 8b10 	vmov	d0, r8, r9
 800936c:	b1cb      	cbz	r3, 80093a2 <_strtod_l+0xba>
 800936e:	eeb1 0b40 	vneg.f64	d0, d0
 8009372:	b017      	add	sp, #92	; 0x5c
 8009374:	ecbd 8b0e 	vpop	{d8-d14}
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	2920      	cmp	r1, #32
 800937e:	d1cd      	bne.n	800931c <_strtod_l+0x34>
 8009380:	3201      	adds	r2, #1
 8009382:	e7c0      	b.n	8009306 <_strtod_l+0x1e>
 8009384:	292d      	cmp	r1, #45	; 0x2d
 8009386:	d1c9      	bne.n	800931c <_strtod_l+0x34>
 8009388:	2101      	movs	r1, #1
 800938a:	9108      	str	r1, [sp, #32]
 800938c:	1c51      	adds	r1, r2, #1
 800938e:	9111      	str	r1, [sp, #68]	; 0x44
 8009390:	7852      	ldrb	r2, [r2, #1]
 8009392:	2a00      	cmp	r2, #0
 8009394:	d1c4      	bne.n	8009320 <_strtod_l+0x38>
 8009396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009398:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8535 	bne.w	8009e0c <_strtod_l+0xb24>
 80093a2:	ec49 8b10 	vmov	d0, r8, r9
 80093a6:	e7e4      	b.n	8009372 <_strtod_l+0x8a>
 80093a8:	2100      	movs	r1, #0
 80093aa:	e7ee      	b.n	800938a <_strtod_l+0xa2>
 80093ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093ae:	b13a      	cbz	r2, 80093c0 <_strtod_l+0xd8>
 80093b0:	2135      	movs	r1, #53	; 0x35
 80093b2:	a814      	add	r0, sp, #80	; 0x50
 80093b4:	f7ff ff3a 	bl	800922c <__copybits>
 80093b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fb10 	bl	80089e0 <_Bfree>
 80093c0:	1e7b      	subs	r3, r7, #1
 80093c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d806      	bhi.n	80093d6 <_strtod_l+0xee>
 80093c8:	e8df f003 	tbb	[pc, r3]
 80093cc:	201d0314 	.word	0x201d0314
 80093d0:	14          	.byte	0x14
 80093d1:	00          	.byte	0x00
 80093d2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80093d6:	05eb      	lsls	r3, r5, #23
 80093d8:	bf48      	it	mi
 80093da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80093de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093e2:	0d1b      	lsrs	r3, r3, #20
 80093e4:	051b      	lsls	r3, r3, #20
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1b9      	bne.n	800935e <_strtod_l+0x76>
 80093ea:	f7fe fb8f 	bl	8007b0c <__errno>
 80093ee:	2322      	movs	r3, #34	; 0x22
 80093f0:	6003      	str	r3, [r0, #0]
 80093f2:	e7b4      	b.n	800935e <_strtod_l+0x76>
 80093f4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80093f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009400:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009404:	e7e7      	b.n	80093d6 <_strtod_l+0xee>
 8009406:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800958c <_strtod_l+0x2a4>
 800940a:	e7e4      	b.n	80093d6 <_strtod_l+0xee>
 800940c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009410:	f04f 38ff 	mov.w	r8, #4294967295
 8009414:	e7df      	b.n	80093d6 <_strtod_l+0xee>
 8009416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	9211      	str	r2, [sp, #68]	; 0x44
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b30      	cmp	r3, #48	; 0x30
 8009420:	d0f9      	beq.n	8009416 <_strtod_l+0x12e>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d09b      	beq.n	800935e <_strtod_l+0x76>
 8009426:	2301      	movs	r3, #1
 8009428:	9306      	str	r3, [sp, #24]
 800942a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800942c:	9309      	str	r3, [sp, #36]	; 0x24
 800942e:	2300      	movs	r3, #0
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	9307      	str	r3, [sp, #28]
 8009434:	461e      	mov	r6, r3
 8009436:	220a      	movs	r2, #10
 8009438:	9811      	ldr	r0, [sp, #68]	; 0x44
 800943a:	7805      	ldrb	r5, [r0, #0]
 800943c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009440:	b2d9      	uxtb	r1, r3
 8009442:	2909      	cmp	r1, #9
 8009444:	d92b      	bls.n	800949e <_strtod_l+0x1b6>
 8009446:	4950      	ldr	r1, [pc, #320]	; (8009588 <_strtod_l+0x2a0>)
 8009448:	2201      	movs	r2, #1
 800944a:	f000 ffa9 	bl	800a3a0 <strncmp>
 800944e:	2800      	cmp	r0, #0
 8009450:	d035      	beq.n	80094be <_strtod_l+0x1d6>
 8009452:	2000      	movs	r0, #0
 8009454:	462a      	mov	r2, r5
 8009456:	4633      	mov	r3, r6
 8009458:	4683      	mov	fp, r0
 800945a:	4601      	mov	r1, r0
 800945c:	2a65      	cmp	r2, #101	; 0x65
 800945e:	d001      	beq.n	8009464 <_strtod_l+0x17c>
 8009460:	2a45      	cmp	r2, #69	; 0x45
 8009462:	d118      	bne.n	8009496 <_strtod_l+0x1ae>
 8009464:	b91b      	cbnz	r3, 800946e <_strtod_l+0x186>
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	4303      	orrs	r3, r0
 800946a:	d094      	beq.n	8009396 <_strtod_l+0xae>
 800946c:	2300      	movs	r3, #0
 800946e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009472:	f10a 0201 	add.w	r2, sl, #1
 8009476:	9211      	str	r2, [sp, #68]	; 0x44
 8009478:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800947c:	2a2b      	cmp	r2, #43	; 0x2b
 800947e:	d075      	beq.n	800956c <_strtod_l+0x284>
 8009480:	2a2d      	cmp	r2, #45	; 0x2d
 8009482:	d07b      	beq.n	800957c <_strtod_l+0x294>
 8009484:	f04f 0e00 	mov.w	lr, #0
 8009488:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800948c:	2d09      	cmp	r5, #9
 800948e:	f240 8083 	bls.w	8009598 <_strtod_l+0x2b0>
 8009492:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009496:	2500      	movs	r5, #0
 8009498:	e09e      	b.n	80095d8 <_strtod_l+0x2f0>
 800949a:	2300      	movs	r3, #0
 800949c:	e7c4      	b.n	8009428 <_strtod_l+0x140>
 800949e:	2e08      	cmp	r6, #8
 80094a0:	bfd5      	itete	le
 80094a2:	9907      	ldrle	r1, [sp, #28]
 80094a4:	9905      	ldrgt	r1, [sp, #20]
 80094a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80094aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80094ae:	f100 0001 	add.w	r0, r0, #1
 80094b2:	bfd4      	ite	le
 80094b4:	9307      	strle	r3, [sp, #28]
 80094b6:	9305      	strgt	r3, [sp, #20]
 80094b8:	3601      	adds	r6, #1
 80094ba:	9011      	str	r0, [sp, #68]	; 0x44
 80094bc:	e7bc      	b.n	8009438 <_strtod_l+0x150>
 80094be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	9211      	str	r2, [sp, #68]	; 0x44
 80094c4:	785a      	ldrb	r2, [r3, #1]
 80094c6:	b3ae      	cbz	r6, 8009534 <_strtod_l+0x24c>
 80094c8:	4683      	mov	fp, r0
 80094ca:	4633      	mov	r3, r6
 80094cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094d0:	2909      	cmp	r1, #9
 80094d2:	d912      	bls.n	80094fa <_strtod_l+0x212>
 80094d4:	2101      	movs	r1, #1
 80094d6:	e7c1      	b.n	800945c <_strtod_l+0x174>
 80094d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	9211      	str	r2, [sp, #68]	; 0x44
 80094de:	785a      	ldrb	r2, [r3, #1]
 80094e0:	3001      	adds	r0, #1
 80094e2:	2a30      	cmp	r2, #48	; 0x30
 80094e4:	d0f8      	beq.n	80094d8 <_strtod_l+0x1f0>
 80094e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	f200 8495 	bhi.w	8009e1a <_strtod_l+0xb32>
 80094f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094f2:	9309      	str	r3, [sp, #36]	; 0x24
 80094f4:	4683      	mov	fp, r0
 80094f6:	2000      	movs	r0, #0
 80094f8:	4603      	mov	r3, r0
 80094fa:	3a30      	subs	r2, #48	; 0x30
 80094fc:	f100 0101 	add.w	r1, r0, #1
 8009500:	d012      	beq.n	8009528 <_strtod_l+0x240>
 8009502:	448b      	add	fp, r1
 8009504:	eb00 0c03 	add.w	ip, r0, r3
 8009508:	4619      	mov	r1, r3
 800950a:	250a      	movs	r5, #10
 800950c:	4561      	cmp	r1, ip
 800950e:	d113      	bne.n	8009538 <_strtod_l+0x250>
 8009510:	1819      	adds	r1, r3, r0
 8009512:	2908      	cmp	r1, #8
 8009514:	f103 0301 	add.w	r3, r3, #1
 8009518:	4403      	add	r3, r0
 800951a:	dc1b      	bgt.n	8009554 <_strtod_l+0x26c>
 800951c:	9807      	ldr	r0, [sp, #28]
 800951e:	210a      	movs	r1, #10
 8009520:	fb01 2200 	mla	r2, r1, r0, r2
 8009524:	9207      	str	r2, [sp, #28]
 8009526:	2100      	movs	r1, #0
 8009528:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800952a:	1c50      	adds	r0, r2, #1
 800952c:	9011      	str	r0, [sp, #68]	; 0x44
 800952e:	7852      	ldrb	r2, [r2, #1]
 8009530:	4608      	mov	r0, r1
 8009532:	e7cb      	b.n	80094cc <_strtod_l+0x1e4>
 8009534:	4630      	mov	r0, r6
 8009536:	e7d4      	b.n	80094e2 <_strtod_l+0x1fa>
 8009538:	2908      	cmp	r1, #8
 800953a:	f101 0101 	add.w	r1, r1, #1
 800953e:	dc03      	bgt.n	8009548 <_strtod_l+0x260>
 8009540:	9f07      	ldr	r7, [sp, #28]
 8009542:	436f      	muls	r7, r5
 8009544:	9707      	str	r7, [sp, #28]
 8009546:	e7e1      	b.n	800950c <_strtod_l+0x224>
 8009548:	2910      	cmp	r1, #16
 800954a:	bfde      	ittt	le
 800954c:	9f05      	ldrle	r7, [sp, #20]
 800954e:	436f      	mulle	r7, r5
 8009550:	9705      	strle	r7, [sp, #20]
 8009552:	e7db      	b.n	800950c <_strtod_l+0x224>
 8009554:	2b10      	cmp	r3, #16
 8009556:	bfdf      	itttt	le
 8009558:	9805      	ldrle	r0, [sp, #20]
 800955a:	210a      	movle	r1, #10
 800955c:	fb01 2200 	mlale	r2, r1, r0, r2
 8009560:	9205      	strle	r2, [sp, #20]
 8009562:	e7e0      	b.n	8009526 <_strtod_l+0x23e>
 8009564:	f04f 0b00 	mov.w	fp, #0
 8009568:	2101      	movs	r1, #1
 800956a:	e77c      	b.n	8009466 <_strtod_l+0x17e>
 800956c:	f04f 0e00 	mov.w	lr, #0
 8009570:	f10a 0202 	add.w	r2, sl, #2
 8009574:	9211      	str	r2, [sp, #68]	; 0x44
 8009576:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800957a:	e785      	b.n	8009488 <_strtod_l+0x1a0>
 800957c:	f04f 0e01 	mov.w	lr, #1
 8009580:	e7f6      	b.n	8009570 <_strtod_l+0x288>
 8009582:	bf00      	nop
 8009584:	0800b3a0 	.word	0x0800b3a0
 8009588:	0800b39c 	.word	0x0800b39c
 800958c:	7ff00000 	.word	0x7ff00000
 8009590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009592:	1c55      	adds	r5, r2, #1
 8009594:	9511      	str	r5, [sp, #68]	; 0x44
 8009596:	7852      	ldrb	r2, [r2, #1]
 8009598:	2a30      	cmp	r2, #48	; 0x30
 800959a:	d0f9      	beq.n	8009590 <_strtod_l+0x2a8>
 800959c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80095a0:	2d08      	cmp	r5, #8
 80095a2:	f63f af78 	bhi.w	8009496 <_strtod_l+0x1ae>
 80095a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80095aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095ac:	920a      	str	r2, [sp, #40]	; 0x28
 80095ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095b0:	1c55      	adds	r5, r2, #1
 80095b2:	9511      	str	r5, [sp, #68]	; 0x44
 80095b4:	7852      	ldrb	r2, [r2, #1]
 80095b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80095ba:	2f09      	cmp	r7, #9
 80095bc:	d937      	bls.n	800962e <_strtod_l+0x346>
 80095be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80095c0:	1bed      	subs	r5, r5, r7
 80095c2:	2d08      	cmp	r5, #8
 80095c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80095c8:	dc02      	bgt.n	80095d0 <_strtod_l+0x2e8>
 80095ca:	4565      	cmp	r5, ip
 80095cc:	bfa8      	it	ge
 80095ce:	4665      	movge	r5, ip
 80095d0:	f1be 0f00 	cmp.w	lr, #0
 80095d4:	d000      	beq.n	80095d8 <_strtod_l+0x2f0>
 80095d6:	426d      	negs	r5, r5
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d14d      	bne.n	8009678 <_strtod_l+0x390>
 80095dc:	9b06      	ldr	r3, [sp, #24]
 80095de:	4303      	orrs	r3, r0
 80095e0:	f47f aebd 	bne.w	800935e <_strtod_l+0x76>
 80095e4:	2900      	cmp	r1, #0
 80095e6:	f47f aed6 	bne.w	8009396 <_strtod_l+0xae>
 80095ea:	2a69      	cmp	r2, #105	; 0x69
 80095ec:	d027      	beq.n	800963e <_strtod_l+0x356>
 80095ee:	dc24      	bgt.n	800963a <_strtod_l+0x352>
 80095f0:	2a49      	cmp	r2, #73	; 0x49
 80095f2:	d024      	beq.n	800963e <_strtod_l+0x356>
 80095f4:	2a4e      	cmp	r2, #78	; 0x4e
 80095f6:	f47f aece 	bne.w	8009396 <_strtod_l+0xae>
 80095fa:	4995      	ldr	r1, [pc, #596]	; (8009850 <_strtod_l+0x568>)
 80095fc:	a811      	add	r0, sp, #68	; 0x44
 80095fe:	f001 f9e3 	bl	800a9c8 <__match>
 8009602:	2800      	cmp	r0, #0
 8009604:	f43f aec7 	beq.w	8009396 <_strtod_l+0xae>
 8009608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b28      	cmp	r3, #40	; 0x28
 800960e:	d12d      	bne.n	800966c <_strtod_l+0x384>
 8009610:	4990      	ldr	r1, [pc, #576]	; (8009854 <_strtod_l+0x56c>)
 8009612:	aa14      	add	r2, sp, #80	; 0x50
 8009614:	a811      	add	r0, sp, #68	; 0x44
 8009616:	f001 f9eb 	bl	800a9f0 <__hexnan>
 800961a:	2805      	cmp	r0, #5
 800961c:	d126      	bne.n	800966c <_strtod_l+0x384>
 800961e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009620:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009624:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009628:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800962c:	e697      	b.n	800935e <_strtod_l+0x76>
 800962e:	250a      	movs	r5, #10
 8009630:	fb05 2c0c 	mla	ip, r5, ip, r2
 8009634:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009638:	e7b9      	b.n	80095ae <_strtod_l+0x2c6>
 800963a:	2a6e      	cmp	r2, #110	; 0x6e
 800963c:	e7db      	b.n	80095f6 <_strtod_l+0x30e>
 800963e:	4986      	ldr	r1, [pc, #536]	; (8009858 <_strtod_l+0x570>)
 8009640:	a811      	add	r0, sp, #68	; 0x44
 8009642:	f001 f9c1 	bl	800a9c8 <__match>
 8009646:	2800      	cmp	r0, #0
 8009648:	f43f aea5 	beq.w	8009396 <_strtod_l+0xae>
 800964c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800964e:	4983      	ldr	r1, [pc, #524]	; (800985c <_strtod_l+0x574>)
 8009650:	3b01      	subs	r3, #1
 8009652:	a811      	add	r0, sp, #68	; 0x44
 8009654:	9311      	str	r3, [sp, #68]	; 0x44
 8009656:	f001 f9b7 	bl	800a9c8 <__match>
 800965a:	b910      	cbnz	r0, 8009662 <_strtod_l+0x37a>
 800965c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800965e:	3301      	adds	r3, #1
 8009660:	9311      	str	r3, [sp, #68]	; 0x44
 8009662:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8009870 <_strtod_l+0x588>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	e678      	b.n	800935e <_strtod_l+0x76>
 800966c:	487c      	ldr	r0, [pc, #496]	; (8009860 <_strtod_l+0x578>)
 800966e:	f000 fec7 	bl	800a400 <nan>
 8009672:	ec59 8b10 	vmov	r8, r9, d0
 8009676:	e672      	b.n	800935e <_strtod_l+0x76>
 8009678:	eddd 7a07 	vldr	s15, [sp, #28]
 800967c:	eba5 020b 	sub.w	r2, r5, fp
 8009680:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009684:	2e00      	cmp	r6, #0
 8009686:	bf08      	it	eq
 8009688:	461e      	moveq	r6, r3
 800968a:	2b10      	cmp	r3, #16
 800968c:	9206      	str	r2, [sp, #24]
 800968e:	461a      	mov	r2, r3
 8009690:	bfa8      	it	ge
 8009692:	2210      	movge	r2, #16
 8009694:	2b09      	cmp	r3, #9
 8009696:	ec59 8b17 	vmov	r8, r9, d7
 800969a:	dd0c      	ble.n	80096b6 <_strtod_l+0x3ce>
 800969c:	4971      	ldr	r1, [pc, #452]	; (8009864 <_strtod_l+0x57c>)
 800969e:	eddd 6a05 	vldr	s13, [sp, #20]
 80096a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80096a6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80096aa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80096ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 80096b2:	ec59 8b16 	vmov	r8, r9, d6
 80096b6:	2b0f      	cmp	r3, #15
 80096b8:	dc37      	bgt.n	800972a <_strtod_l+0x442>
 80096ba:	9906      	ldr	r1, [sp, #24]
 80096bc:	2900      	cmp	r1, #0
 80096be:	f43f ae4e 	beq.w	800935e <_strtod_l+0x76>
 80096c2:	dd23      	ble.n	800970c <_strtod_l+0x424>
 80096c4:	2916      	cmp	r1, #22
 80096c6:	dc0b      	bgt.n	80096e0 <_strtod_l+0x3f8>
 80096c8:	4b66      	ldr	r3, [pc, #408]	; (8009864 <_strtod_l+0x57c>)
 80096ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80096ce:	ed93 7b00 	vldr	d7, [r3]
 80096d2:	ec49 8b16 	vmov	d6, r8, r9
 80096d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096da:	ec59 8b17 	vmov	r8, r9, d7
 80096de:	e63e      	b.n	800935e <_strtod_l+0x76>
 80096e0:	9806      	ldr	r0, [sp, #24]
 80096e2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80096e6:	4281      	cmp	r1, r0
 80096e8:	db1f      	blt.n	800972a <_strtod_l+0x442>
 80096ea:	4a5e      	ldr	r2, [pc, #376]	; (8009864 <_strtod_l+0x57c>)
 80096ec:	f1c3 030f 	rsb	r3, r3, #15
 80096f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80096f4:	ed91 7b00 	vldr	d7, [r1]
 80096f8:	ec49 8b16 	vmov	d6, r8, r9
 80096fc:	1ac3      	subs	r3, r0, r3
 80096fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009702:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009706:	ed92 6b00 	vldr	d6, [r2]
 800970a:	e7e4      	b.n	80096d6 <_strtod_l+0x3ee>
 800970c:	9906      	ldr	r1, [sp, #24]
 800970e:	3116      	adds	r1, #22
 8009710:	db0b      	blt.n	800972a <_strtod_l+0x442>
 8009712:	4b54      	ldr	r3, [pc, #336]	; (8009864 <_strtod_l+0x57c>)
 8009714:	ebab 0505 	sub.w	r5, fp, r5
 8009718:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800971c:	ed95 7b00 	vldr	d7, [r5]
 8009720:	ec49 8b16 	vmov	d6, r8, r9
 8009724:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009728:	e7d7      	b.n	80096da <_strtod_l+0x3f2>
 800972a:	9906      	ldr	r1, [sp, #24]
 800972c:	1a9a      	subs	r2, r3, r2
 800972e:	440a      	add	r2, r1
 8009730:	2a00      	cmp	r2, #0
 8009732:	dd6e      	ble.n	8009812 <_strtod_l+0x52a>
 8009734:	f012 000f 	ands.w	r0, r2, #15
 8009738:	d00a      	beq.n	8009750 <_strtod_l+0x468>
 800973a:	494a      	ldr	r1, [pc, #296]	; (8009864 <_strtod_l+0x57c>)
 800973c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009740:	ed91 7b00 	vldr	d7, [r1]
 8009744:	ec49 8b16 	vmov	d6, r8, r9
 8009748:	ee27 7b06 	vmul.f64	d7, d7, d6
 800974c:	ec59 8b17 	vmov	r8, r9, d7
 8009750:	f032 020f 	bics.w	r2, r2, #15
 8009754:	d04e      	beq.n	80097f4 <_strtod_l+0x50c>
 8009756:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800975a:	dd22      	ble.n	80097a2 <_strtod_l+0x4ba>
 800975c:	2500      	movs	r5, #0
 800975e:	462e      	mov	r6, r5
 8009760:	9507      	str	r5, [sp, #28]
 8009762:	462f      	mov	r7, r5
 8009764:	2322      	movs	r3, #34	; 0x22
 8009766:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009870 <_strtod_l+0x588>
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	f04f 0800 	mov.w	r8, #0
 8009770:	9b07      	ldr	r3, [sp, #28]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f43f adf3 	beq.w	800935e <_strtod_l+0x76>
 8009778:	9912      	ldr	r1, [sp, #72]	; 0x48
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff f930 	bl	80089e0 <_Bfree>
 8009780:	4639      	mov	r1, r7
 8009782:	4620      	mov	r0, r4
 8009784:	f7ff f92c 	bl	80089e0 <_Bfree>
 8009788:	4631      	mov	r1, r6
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff f928 	bl	80089e0 <_Bfree>
 8009790:	9907      	ldr	r1, [sp, #28]
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff f924 	bl	80089e0 <_Bfree>
 8009798:	4629      	mov	r1, r5
 800979a:	4620      	mov	r0, r4
 800979c:	f7ff f920 	bl	80089e0 <_Bfree>
 80097a0:	e5dd      	b.n	800935e <_strtod_l+0x76>
 80097a2:	2000      	movs	r0, #0
 80097a4:	ec49 8b17 	vmov	d7, r8, r9
 80097a8:	4f2f      	ldr	r7, [pc, #188]	; (8009868 <_strtod_l+0x580>)
 80097aa:	1112      	asrs	r2, r2, #4
 80097ac:	4601      	mov	r1, r0
 80097ae:	2a01      	cmp	r2, #1
 80097b0:	dc23      	bgt.n	80097fa <_strtod_l+0x512>
 80097b2:	b108      	cbz	r0, 80097b8 <_strtod_l+0x4d0>
 80097b4:	ec59 8b17 	vmov	r8, r9, d7
 80097b8:	4a2b      	ldr	r2, [pc, #172]	; (8009868 <_strtod_l+0x580>)
 80097ba:	482c      	ldr	r0, [pc, #176]	; (800986c <_strtod_l+0x584>)
 80097bc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80097c0:	ed92 7b00 	vldr	d7, [r2]
 80097c4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80097c8:	ec49 8b16 	vmov	d6, r8, r9
 80097cc:	4a28      	ldr	r2, [pc, #160]	; (8009870 <_strtod_l+0x588>)
 80097ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097d2:	ee17 1a90 	vmov	r1, s15
 80097d6:	400a      	ands	r2, r1
 80097d8:	4282      	cmp	r2, r0
 80097da:	ec59 8b17 	vmov	r8, r9, d7
 80097de:	d8bd      	bhi.n	800975c <_strtod_l+0x474>
 80097e0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80097e4:	4282      	cmp	r2, r0
 80097e6:	bf86      	itte	hi
 80097e8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8009874 <_strtod_l+0x58c>
 80097ec:	f04f 38ff 	movhi.w	r8, #4294967295
 80097f0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80097f4:	2200      	movs	r2, #0
 80097f6:	9205      	str	r2, [sp, #20]
 80097f8:	e076      	b.n	80098e8 <_strtod_l+0x600>
 80097fa:	f012 0f01 	tst.w	r2, #1
 80097fe:	d004      	beq.n	800980a <_strtod_l+0x522>
 8009800:	ed97 6b00 	vldr	d6, [r7]
 8009804:	2001      	movs	r0, #1
 8009806:	ee27 7b06 	vmul.f64	d7, d7, d6
 800980a:	3101      	adds	r1, #1
 800980c:	1052      	asrs	r2, r2, #1
 800980e:	3708      	adds	r7, #8
 8009810:	e7cd      	b.n	80097ae <_strtod_l+0x4c6>
 8009812:	d0ef      	beq.n	80097f4 <_strtod_l+0x50c>
 8009814:	4252      	negs	r2, r2
 8009816:	f012 000f 	ands.w	r0, r2, #15
 800981a:	d00a      	beq.n	8009832 <_strtod_l+0x54a>
 800981c:	4911      	ldr	r1, [pc, #68]	; (8009864 <_strtod_l+0x57c>)
 800981e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009822:	ed91 7b00 	vldr	d7, [r1]
 8009826:	ec49 8b16 	vmov	d6, r8, r9
 800982a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800982e:	ec59 8b17 	vmov	r8, r9, d7
 8009832:	1112      	asrs	r2, r2, #4
 8009834:	d0de      	beq.n	80097f4 <_strtod_l+0x50c>
 8009836:	2a1f      	cmp	r2, #31
 8009838:	dd1e      	ble.n	8009878 <_strtod_l+0x590>
 800983a:	2500      	movs	r5, #0
 800983c:	462e      	mov	r6, r5
 800983e:	9507      	str	r5, [sp, #28]
 8009840:	462f      	mov	r7, r5
 8009842:	2322      	movs	r3, #34	; 0x22
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	f04f 0900 	mov.w	r9, #0
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	e78f      	b.n	8009770 <_strtod_l+0x488>
 8009850:	0800b18d 	.word	0x0800b18d
 8009854:	0800b3b4 	.word	0x0800b3b4
 8009858:	0800b185 	.word	0x0800b185
 800985c:	0800b1bc 	.word	0x0800b1bc
 8009860:	0800b545 	.word	0x0800b545
 8009864:	0800b2c8 	.word	0x0800b2c8
 8009868:	0800b2a0 	.word	0x0800b2a0
 800986c:	7ca00000 	.word	0x7ca00000
 8009870:	7ff00000 	.word	0x7ff00000
 8009874:	7fefffff 	.word	0x7fefffff
 8009878:	f012 0110 	ands.w	r1, r2, #16
 800987c:	bf18      	it	ne
 800987e:	216a      	movne	r1, #106	; 0x6a
 8009880:	9105      	str	r1, [sp, #20]
 8009882:	ec49 8b17 	vmov	d7, r8, r9
 8009886:	49be      	ldr	r1, [pc, #760]	; (8009b80 <_strtod_l+0x898>)
 8009888:	2000      	movs	r0, #0
 800988a:	07d7      	lsls	r7, r2, #31
 800988c:	d504      	bpl.n	8009898 <_strtod_l+0x5b0>
 800988e:	ed91 6b00 	vldr	d6, [r1]
 8009892:	2001      	movs	r0, #1
 8009894:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009898:	1052      	asrs	r2, r2, #1
 800989a:	f101 0108 	add.w	r1, r1, #8
 800989e:	d1f4      	bne.n	800988a <_strtod_l+0x5a2>
 80098a0:	b108      	cbz	r0, 80098a6 <_strtod_l+0x5be>
 80098a2:	ec59 8b17 	vmov	r8, r9, d7
 80098a6:	9a05      	ldr	r2, [sp, #20]
 80098a8:	b1ba      	cbz	r2, 80098da <_strtod_l+0x5f2>
 80098aa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80098ae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80098b2:	2a00      	cmp	r2, #0
 80098b4:	4648      	mov	r0, r9
 80098b6:	dd10      	ble.n	80098da <_strtod_l+0x5f2>
 80098b8:	2a1f      	cmp	r2, #31
 80098ba:	f340 812c 	ble.w	8009b16 <_strtod_l+0x82e>
 80098be:	2a34      	cmp	r2, #52	; 0x34
 80098c0:	bfde      	ittt	le
 80098c2:	f04f 32ff 	movle.w	r2, #4294967295
 80098c6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80098ca:	408a      	lslle	r2, r1
 80098cc:	f04f 0800 	mov.w	r8, #0
 80098d0:	bfcc      	ite	gt
 80098d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80098d6:	ea02 0900 	andle.w	r9, r2, r0
 80098da:	ec49 8b17 	vmov	d7, r8, r9
 80098de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e6:	d0a8      	beq.n	800983a <_strtod_l+0x552>
 80098e8:	9a07      	ldr	r2, [sp, #28]
 80098ea:	9200      	str	r2, [sp, #0]
 80098ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098ee:	4632      	mov	r2, r6
 80098f0:	4620      	mov	r0, r4
 80098f2:	f7ff f8dd 	bl	8008ab0 <__s2b>
 80098f6:	9007      	str	r0, [sp, #28]
 80098f8:	2800      	cmp	r0, #0
 80098fa:	f43f af2f 	beq.w	800975c <_strtod_l+0x474>
 80098fe:	9a06      	ldr	r2, [sp, #24]
 8009900:	2a00      	cmp	r2, #0
 8009902:	ebab 0305 	sub.w	r3, fp, r5
 8009906:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8009b60 <_strtod_l+0x878>
 800990a:	bfa8      	it	ge
 800990c:	2300      	movge	r3, #0
 800990e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009b68 <_strtod_l+0x880>
 8009912:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009b70 <_strtod_l+0x888>
 8009916:	9309      	str	r3, [sp, #36]	; 0x24
 8009918:	2500      	movs	r5, #0
 800991a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800991e:	930c      	str	r3, [sp, #48]	; 0x30
 8009920:	462e      	mov	r6, r5
 8009922:	9b07      	ldr	r3, [sp, #28]
 8009924:	4620      	mov	r0, r4
 8009926:	6859      	ldr	r1, [r3, #4]
 8009928:	f7ff f81a 	bl	8008960 <_Balloc>
 800992c:	4607      	mov	r7, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f af18 	beq.w	8009764 <_strtod_l+0x47c>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	691a      	ldr	r2, [r3, #16]
 8009938:	3202      	adds	r2, #2
 800993a:	f103 010c 	add.w	r1, r3, #12
 800993e:	0092      	lsls	r2, r2, #2
 8009940:	300c      	adds	r0, #12
 8009942:	f000 fd4f 	bl	800a3e4 <memcpy>
 8009946:	ec49 8b10 	vmov	d0, r8, r9
 800994a:	aa14      	add	r2, sp, #80	; 0x50
 800994c:	a913      	add	r1, sp, #76	; 0x4c
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff fbe2 	bl	8009118 <__d2b>
 8009954:	ec49 8b18 	vmov	d8, r8, r9
 8009958:	9012      	str	r0, [sp, #72]	; 0x48
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f af02 	beq.w	8009764 <_strtod_l+0x47c>
 8009960:	2101      	movs	r1, #1
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff f93c 	bl	8008be0 <__i2b>
 8009968:	4606      	mov	r6, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	f43f aefa 	beq.w	8009764 <_strtod_l+0x47c>
 8009970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009972:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfab      	itete	ge
 8009978:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800997a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800997c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009980:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009984:	bfac      	ite	ge
 8009986:	eb03 0b02 	addge.w	fp, r3, r2
 800998a:	eba2 0a03 	sublt.w	sl, r2, r3
 800998e:	9a05      	ldr	r2, [sp, #20]
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	440b      	add	r3, r1
 8009994:	4a7b      	ldr	r2, [pc, #492]	; (8009b84 <_strtod_l+0x89c>)
 8009996:	3b01      	subs	r3, #1
 8009998:	4293      	cmp	r3, r2
 800999a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800999e:	f280 80cd 	bge.w	8009b3c <_strtod_l+0x854>
 80099a2:	1ad2      	subs	r2, r2, r3
 80099a4:	2a1f      	cmp	r2, #31
 80099a6:	eba1 0102 	sub.w	r1, r1, r2
 80099aa:	f04f 0001 	mov.w	r0, #1
 80099ae:	f300 80b9 	bgt.w	8009b24 <_strtod_l+0x83c>
 80099b2:	fa00 f302 	lsl.w	r3, r0, r2
 80099b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80099b8:	2300      	movs	r3, #0
 80099ba:	930a      	str	r3, [sp, #40]	; 0x28
 80099bc:	eb0b 0301 	add.w	r3, fp, r1
 80099c0:	9a05      	ldr	r2, [sp, #20]
 80099c2:	459b      	cmp	fp, r3
 80099c4:	448a      	add	sl, r1
 80099c6:	4492      	add	sl, r2
 80099c8:	465a      	mov	r2, fp
 80099ca:	bfa8      	it	ge
 80099cc:	461a      	movge	r2, r3
 80099ce:	4552      	cmp	r2, sl
 80099d0:	bfa8      	it	ge
 80099d2:	4652      	movge	r2, sl
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	bfc2      	ittt	gt
 80099d8:	1a9b      	subgt	r3, r3, r2
 80099da:	ebaa 0a02 	subgt.w	sl, sl, r2
 80099de:	ebab 0b02 	subgt.w	fp, fp, r2
 80099e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	dd18      	ble.n	8009a1a <_strtod_l+0x732>
 80099e8:	4631      	mov	r1, r6
 80099ea:	4620      	mov	r0, r4
 80099ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80099ee:	f7ff f9b7 	bl	8008d60 <__pow5mult>
 80099f2:	4606      	mov	r6, r0
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f43f aeb5 	beq.w	8009764 <_strtod_l+0x47c>
 80099fa:	4601      	mov	r1, r0
 80099fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7ff f904 	bl	8008c0c <__multiply>
 8009a04:	900e      	str	r0, [sp, #56]	; 0x38
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f aeac 	beq.w	8009764 <_strtod_l+0x47c>
 8009a0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7fe ffe6 	bl	80089e0 <_Bfree>
 8009a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a18:	9212      	str	r2, [sp, #72]	; 0x48
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f300 8093 	bgt.w	8009b46 <_strtod_l+0x85e>
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dd08      	ble.n	8009a38 <_strtod_l+0x750>
 8009a26:	4639      	mov	r1, r7
 8009a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff f998 	bl	8008d60 <__pow5mult>
 8009a30:	4607      	mov	r7, r0
 8009a32:	2800      	cmp	r0, #0
 8009a34:	f43f ae96 	beq.w	8009764 <_strtod_l+0x47c>
 8009a38:	f1ba 0f00 	cmp.w	sl, #0
 8009a3c:	dd08      	ble.n	8009a50 <_strtod_l+0x768>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4652      	mov	r2, sl
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff f9e6 	bl	8008e14 <__lshift>
 8009a48:	4607      	mov	r7, r0
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f43f ae8a 	beq.w	8009764 <_strtod_l+0x47c>
 8009a50:	f1bb 0f00 	cmp.w	fp, #0
 8009a54:	dd08      	ble.n	8009a68 <_strtod_l+0x780>
 8009a56:	4631      	mov	r1, r6
 8009a58:	465a      	mov	r2, fp
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff f9da 	bl	8008e14 <__lshift>
 8009a60:	4606      	mov	r6, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f43f ae7e 	beq.w	8009764 <_strtod_l+0x47c>
 8009a68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f7ff fa59 	bl	8008f24 <__mdiff>
 8009a72:	4605      	mov	r5, r0
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f43f ae75 	beq.w	8009764 <_strtod_l+0x47c>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009a80:	60c3      	str	r3, [r0, #12]
 8009a82:	4631      	mov	r1, r6
 8009a84:	f7ff fa32 	bl	8008eec <__mcmp>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	da7f      	bge.n	8009b8c <_strtod_l+0x8a4>
 8009a8c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8009a90:	f040 80a5 	bne.w	8009bde <_strtod_l+0x8f6>
 8009a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 80a0 	bne.w	8009bde <_strtod_l+0x8f6>
 8009a9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009aa2:	0d1b      	lsrs	r3, r3, #20
 8009aa4:	051b      	lsls	r3, r3, #20
 8009aa6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009aaa:	f240 8098 	bls.w	8009bde <_strtod_l+0x8f6>
 8009aae:	696b      	ldr	r3, [r5, #20]
 8009ab0:	b91b      	cbnz	r3, 8009aba <_strtod_l+0x7d2>
 8009ab2:	692b      	ldr	r3, [r5, #16]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	f340 8092 	ble.w	8009bde <_strtod_l+0x8f6>
 8009aba:	4629      	mov	r1, r5
 8009abc:	2201      	movs	r2, #1
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7ff f9a8 	bl	8008e14 <__lshift>
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	f7ff fa10 	bl	8008eec <__mcmp>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f340 8086 	ble.w	8009bde <_strtod_l+0x8f6>
 8009ad2:	9905      	ldr	r1, [sp, #20]
 8009ad4:	4a2c      	ldr	r2, [pc, #176]	; (8009b88 <_strtod_l+0x8a0>)
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	f000 809f 	beq.w	8009c1c <_strtod_l+0x934>
 8009ade:	ea02 0109 	and.w	r1, r2, r9
 8009ae2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ae6:	f300 8099 	bgt.w	8009c1c <_strtod_l+0x934>
 8009aea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aee:	f77f aea8 	ble.w	8009842 <_strtod_l+0x55a>
 8009af2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009b78 <_strtod_l+0x890>
 8009af6:	ec49 8b16 	vmov	d6, r8, r9
 8009afa:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <_strtod_l+0x8a0>)
 8009afc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b00:	ee17 2a90 	vmov	r2, s15
 8009b04:	4013      	ands	r3, r2
 8009b06:	ec59 8b17 	vmov	r8, r9, d7
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f47f ae34 	bne.w	8009778 <_strtod_l+0x490>
 8009b10:	2322      	movs	r3, #34	; 0x22
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	e630      	b.n	8009778 <_strtod_l+0x490>
 8009b16:	f04f 31ff 	mov.w	r1, #4294967295
 8009b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8009b1e:	ea02 0808 	and.w	r8, r2, r8
 8009b22:	e6da      	b.n	80098da <_strtod_l+0x5f2>
 8009b24:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009b28:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009b2c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009b30:	33e2      	adds	r3, #226	; 0xe2
 8009b32:	fa00 f303 	lsl.w	r3, r0, r3
 8009b36:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009b3a:	e73f      	b.n	80099bc <_strtod_l+0x6d4>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b44:	e73a      	b.n	80099bc <_strtod_l+0x6d4>
 8009b46:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f7ff f962 	bl	8008e14 <__lshift>
 8009b50:	9012      	str	r0, [sp, #72]	; 0x48
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f47f af64 	bne.w	8009a20 <_strtod_l+0x738>
 8009b58:	e604      	b.n	8009764 <_strtod_l+0x47c>
 8009b5a:	bf00      	nop
 8009b5c:	f3af 8000 	nop.w
 8009b60:	94a03595 	.word	0x94a03595
 8009b64:	3fcfffff 	.word	0x3fcfffff
 8009b68:	94a03595 	.word	0x94a03595
 8009b6c:	3fdfffff 	.word	0x3fdfffff
 8009b70:	35afe535 	.word	0x35afe535
 8009b74:	3fe00000 	.word	0x3fe00000
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	39500000 	.word	0x39500000
 8009b80:	0800b3c8 	.word	0x0800b3c8
 8009b84:	fffffc02 	.word	0xfffffc02
 8009b88:	7ff00000 	.word	0x7ff00000
 8009b8c:	46cb      	mov	fp, r9
 8009b8e:	d15f      	bne.n	8009c50 <_strtod_l+0x968>
 8009b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b94:	f1ba 0f00 	cmp.w	sl, #0
 8009b98:	d02a      	beq.n	8009bf0 <_strtod_l+0x908>
 8009b9a:	4aa7      	ldr	r2, [pc, #668]	; (8009e38 <_strtod_l+0xb50>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d12b      	bne.n	8009bf8 <_strtod_l+0x910>
 8009ba0:	9b05      	ldr	r3, [sp, #20]
 8009ba2:	4642      	mov	r2, r8
 8009ba4:	b1fb      	cbz	r3, 8009be6 <_strtod_l+0x8fe>
 8009ba6:	4ba5      	ldr	r3, [pc, #660]	; (8009e3c <_strtod_l+0xb54>)
 8009ba8:	ea09 0303 	and.w	r3, r9, r3
 8009bac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8009bb4:	d81a      	bhi.n	8009bec <_strtod_l+0x904>
 8009bb6:	0d1b      	lsrs	r3, r3, #20
 8009bb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d119      	bne.n	8009bf8 <_strtod_l+0x910>
 8009bc4:	4b9e      	ldr	r3, [pc, #632]	; (8009e40 <_strtod_l+0xb58>)
 8009bc6:	459b      	cmp	fp, r3
 8009bc8:	d102      	bne.n	8009bd0 <_strtod_l+0x8e8>
 8009bca:	3201      	adds	r2, #1
 8009bcc:	f43f adca 	beq.w	8009764 <_strtod_l+0x47c>
 8009bd0:	4b9a      	ldr	r3, [pc, #616]	; (8009e3c <_strtod_l+0xb54>)
 8009bd2:	ea0b 0303 	and.w	r3, fp, r3
 8009bd6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009bda:	f04f 0800 	mov.w	r8, #0
 8009bde:	9b05      	ldr	r3, [sp, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d186      	bne.n	8009af2 <_strtod_l+0x80a>
 8009be4:	e5c8      	b.n	8009778 <_strtod_l+0x490>
 8009be6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bea:	e7e9      	b.n	8009bc0 <_strtod_l+0x8d8>
 8009bec:	460b      	mov	r3, r1
 8009bee:	e7e7      	b.n	8009bc0 <_strtod_l+0x8d8>
 8009bf0:	ea53 0308 	orrs.w	r3, r3, r8
 8009bf4:	f43f af6d 	beq.w	8009ad2 <_strtod_l+0x7ea>
 8009bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfa:	b1cb      	cbz	r3, 8009c30 <_strtod_l+0x948>
 8009bfc:	ea13 0f0b 	tst.w	r3, fp
 8009c00:	d0ed      	beq.n	8009bde <_strtod_l+0x8f6>
 8009c02:	9a05      	ldr	r2, [sp, #20]
 8009c04:	4640      	mov	r0, r8
 8009c06:	4649      	mov	r1, r9
 8009c08:	f1ba 0f00 	cmp.w	sl, #0
 8009c0c:	d014      	beq.n	8009c38 <_strtod_l+0x950>
 8009c0e:	f7ff fb51 	bl	80092b4 <sulp>
 8009c12:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009c16:	ec59 8b17 	vmov	r8, r9, d7
 8009c1a:	e7e0      	b.n	8009bde <_strtod_l+0x8f6>
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c22:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009c26:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009c2a:	f04f 38ff 	mov.w	r8, #4294967295
 8009c2e:	e7d6      	b.n	8009bde <_strtod_l+0x8f6>
 8009c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c32:	ea13 0f08 	tst.w	r3, r8
 8009c36:	e7e3      	b.n	8009c00 <_strtod_l+0x918>
 8009c38:	f7ff fb3c 	bl	80092b4 <sulp>
 8009c3c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009c40:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c48:	ec59 8b10 	vmov	r8, r9, d0
 8009c4c:	d1c7      	bne.n	8009bde <_strtod_l+0x8f6>
 8009c4e:	e5f8      	b.n	8009842 <_strtod_l+0x55a>
 8009c50:	4631      	mov	r1, r6
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7ff faba 	bl	80091cc <__ratio>
 8009c58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009c5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	d85f      	bhi.n	8009d26 <_strtod_l+0xa3e>
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	d166      	bne.n	8009d3a <_strtod_l+0xa52>
 8009c6c:	f1b8 0f00 	cmp.w	r8, #0
 8009c70:	d14d      	bne.n	8009d0e <_strtod_l+0xa26>
 8009c72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c76:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d162      	bne.n	8009d44 <_strtod_l+0xa5c>
 8009c7e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8009c82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8a:	d401      	bmi.n	8009c90 <_strtod_l+0x9a8>
 8009c8c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009c90:	eeb1 cb4d 	vneg.f64	d12, d13
 8009c94:	4869      	ldr	r0, [pc, #420]	; (8009e3c <_strtod_l+0xb54>)
 8009c96:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8009e48 <_strtod_l+0xb60>
 8009c9a:	ea0b 0100 	and.w	r1, fp, r0
 8009c9e:	4561      	cmp	r1, ip
 8009ca0:	ec53 2b1c 	vmov	r2, r3, d12
 8009ca4:	d17a      	bne.n	8009d9c <_strtod_l+0xab4>
 8009ca6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009caa:	ec49 8b10 	vmov	d0, r8, r9
 8009cae:	910a      	str	r1, [sp, #40]	; 0x28
 8009cb0:	f7ff f9c2 	bl	8009038 <__ulp>
 8009cb4:	ec49 8b1e 	vmov	d14, r8, r9
 8009cb8:	4860      	ldr	r0, [pc, #384]	; (8009e3c <_strtod_l+0xb54>)
 8009cba:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8009cbe:	ee1e 3a90 	vmov	r3, s29
 8009cc2:	4a60      	ldr	r2, [pc, #384]	; (8009e44 <_strtod_l+0xb5c>)
 8009cc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cc6:	4018      	ands	r0, r3
 8009cc8:	4290      	cmp	r0, r2
 8009cca:	ec59 8b1e 	vmov	r8, r9, d14
 8009cce:	d93c      	bls.n	8009d4a <_strtod_l+0xa62>
 8009cd0:	ee18 2a90 	vmov	r2, s17
 8009cd4:	4b5a      	ldr	r3, [pc, #360]	; (8009e40 <_strtod_l+0xb58>)
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d104      	bne.n	8009ce4 <_strtod_l+0x9fc>
 8009cda:	ee18 3a10 	vmov	r3, s16
 8009cde:	3301      	adds	r3, #1
 8009ce0:	f43f ad40 	beq.w	8009764 <_strtod_l+0x47c>
 8009ce4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8009e40 <_strtod_l+0xb58>
 8009ce8:	f04f 38ff 	mov.w	r8, #4294967295
 8009cec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7fe fe76 	bl	80089e0 <_Bfree>
 8009cf4:	4639      	mov	r1, r7
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7fe fe72 	bl	80089e0 <_Bfree>
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7fe fe6e 	bl	80089e0 <_Bfree>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7fe fe6a 	bl	80089e0 <_Bfree>
 8009d0c:	e609      	b.n	8009922 <_strtod_l+0x63a>
 8009d0e:	f1b8 0f01 	cmp.w	r8, #1
 8009d12:	d103      	bne.n	8009d1c <_strtod_l+0xa34>
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	f43f ad93 	beq.w	8009842 <_strtod_l+0x55a>
 8009d1c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8009d20:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009d24:	e7b6      	b.n	8009c94 <_strtod_l+0x9ac>
 8009d26:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009d2a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009d2e:	f1ba 0f00 	cmp.w	sl, #0
 8009d32:	d0ad      	beq.n	8009c90 <_strtod_l+0x9a8>
 8009d34:	eeb0 cb4d 	vmov.f64	d12, d13
 8009d38:	e7ac      	b.n	8009c94 <_strtod_l+0x9ac>
 8009d3a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8009d3e:	eeb0 db4c 	vmov.f64	d13, d12
 8009d42:	e7a7      	b.n	8009c94 <_strtod_l+0x9ac>
 8009d44:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8009d48:	e7a4      	b.n	8009c94 <_strtod_l+0x9ac>
 8009d4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009d4e:	9b05      	ldr	r3, [sp, #20]
 8009d50:	46cb      	mov	fp, r9
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1ca      	bne.n	8009cec <_strtod_l+0xa04>
 8009d56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d5a:	0d1b      	lsrs	r3, r3, #20
 8009d5c:	051b      	lsls	r3, r3, #20
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	d1c4      	bne.n	8009cec <_strtod_l+0xa04>
 8009d62:	ec51 0b1d 	vmov	r0, r1, d13
 8009d66:	f7f6 fc97 	bl	8000698 <__aeabi_d2lz>
 8009d6a:	f7f6 fc4f 	bl	800060c <__aeabi_l2d>
 8009d6e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8009d72:	ec41 0b17 	vmov	d7, r0, r1
 8009d76:	ea4b 0b08 	orr.w	fp, fp, r8
 8009d7a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8009d7e:	ee3d db47 	vsub.f64	d13, d13, d7
 8009d82:	d03c      	beq.n	8009dfe <_strtod_l+0xb16>
 8009d84:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8c:	f53f acf4 	bmi.w	8009778 <_strtod_l+0x490>
 8009d90:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d98:	dda8      	ble.n	8009cec <_strtod_l+0xa04>
 8009d9a:	e4ed      	b.n	8009778 <_strtod_l+0x490>
 8009d9c:	9805      	ldr	r0, [sp, #20]
 8009d9e:	b1f0      	cbz	r0, 8009dde <_strtod_l+0xaf6>
 8009da0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009da4:	d81b      	bhi.n	8009dde <_strtod_l+0xaf6>
 8009da6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8009e30 <_strtod_l+0xb48>
 8009daa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	d811      	bhi.n	8009dd8 <_strtod_l+0xaf0>
 8009db4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009db8:	ee1d 3a10 	vmov	r3, s26
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	bf38      	it	cc
 8009dc0:	2301      	movcc	r3, #1
 8009dc2:	ee0d 3a10 	vmov	s26, r3
 8009dc6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009dca:	f1ba 0f00 	cmp.w	sl, #0
 8009dce:	d113      	bne.n	8009df8 <_strtod_l+0xb10>
 8009dd0:	eeb1 7b4d 	vneg.f64	d7, d13
 8009dd4:	ec53 2b17 	vmov	r2, r3, d7
 8009dd8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009ddc:	1a43      	subs	r3, r0, r1
 8009dde:	eeb0 0b48 	vmov.f64	d0, d8
 8009de2:	ec43 2b1c 	vmov	d12, r2, r3
 8009de6:	910a      	str	r1, [sp, #40]	; 0x28
 8009de8:	f7ff f926 	bl	8009038 <__ulp>
 8009dec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dee:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009df2:	ec59 8b18 	vmov	r8, r9, d8
 8009df6:	e7aa      	b.n	8009d4e <_strtod_l+0xa66>
 8009df8:	eeb0 7b4d 	vmov.f64	d7, d13
 8009dfc:	e7ea      	b.n	8009dd4 <_strtod_l+0xaec>
 8009dfe:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e06:	f57f af71 	bpl.w	8009cec <_strtod_l+0xa04>
 8009e0a:	e4b5      	b.n	8009778 <_strtod_l+0x490>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9308      	str	r3, [sp, #32]
 8009e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	f7ff baa6 	b.w	8009366 <_strtod_l+0x7e>
 8009e1a:	2a65      	cmp	r2, #101	; 0x65
 8009e1c:	f43f aba2 	beq.w	8009564 <_strtod_l+0x27c>
 8009e20:	2a45      	cmp	r2, #69	; 0x45
 8009e22:	f43f ab9f 	beq.w	8009564 <_strtod_l+0x27c>
 8009e26:	2101      	movs	r1, #1
 8009e28:	f7ff bbd8 	b.w	80095dc <_strtod_l+0x2f4>
 8009e2c:	f3af 8000 	nop.w
 8009e30:	ffc00000 	.word	0xffc00000
 8009e34:	41dfffff 	.word	0x41dfffff
 8009e38:	000fffff 	.word	0x000fffff
 8009e3c:	7ff00000 	.word	0x7ff00000
 8009e40:	7fefffff 	.word	0x7fefffff
 8009e44:	7c9fffff 	.word	0x7c9fffff
 8009e48:	7fe00000 	.word	0x7fe00000

08009e4c <_strtod_r>:
 8009e4c:	4b01      	ldr	r3, [pc, #4]	; (8009e54 <_strtod_r+0x8>)
 8009e4e:	f7ff ba4b 	b.w	80092e8 <_strtod_l>
 8009e52:	bf00      	nop
 8009e54:	20000068 	.word	0x20000068

08009e58 <_strtol_l.constprop.0>:
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5e:	d001      	beq.n	8009e64 <_strtol_l.constprop.0+0xc>
 8009e60:	2b24      	cmp	r3, #36	; 0x24
 8009e62:	d906      	bls.n	8009e72 <_strtol_l.constprop.0+0x1a>
 8009e64:	f7fd fe52 	bl	8007b0c <__errno>
 8009e68:	2316      	movs	r3, #22
 8009e6a:	6003      	str	r3, [r0, #0]
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f58 <_strtol_l.constprop.0+0x100>
 8009e76:	460d      	mov	r5, r1
 8009e78:	462e      	mov	r6, r5
 8009e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e7e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009e82:	f017 0708 	ands.w	r7, r7, #8
 8009e86:	d1f7      	bne.n	8009e78 <_strtol_l.constprop.0+0x20>
 8009e88:	2c2d      	cmp	r4, #45	; 0x2d
 8009e8a:	d132      	bne.n	8009ef2 <_strtol_l.constprop.0+0x9a>
 8009e8c:	782c      	ldrb	r4, [r5, #0]
 8009e8e:	2701      	movs	r7, #1
 8009e90:	1cb5      	adds	r5, r6, #2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d05b      	beq.n	8009f4e <_strtol_l.constprop.0+0xf6>
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	d109      	bne.n	8009eae <_strtol_l.constprop.0+0x56>
 8009e9a:	2c30      	cmp	r4, #48	; 0x30
 8009e9c:	d107      	bne.n	8009eae <_strtol_l.constprop.0+0x56>
 8009e9e:	782c      	ldrb	r4, [r5, #0]
 8009ea0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ea4:	2c58      	cmp	r4, #88	; 0x58
 8009ea6:	d14d      	bne.n	8009f44 <_strtol_l.constprop.0+0xec>
 8009ea8:	786c      	ldrb	r4, [r5, #1]
 8009eaa:	2310      	movs	r3, #16
 8009eac:	3502      	adds	r5, #2
 8009eae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009eb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eb6:	f04f 0e00 	mov.w	lr, #0
 8009eba:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ebe:	4676      	mov	r6, lr
 8009ec0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ec4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ec8:	f1bc 0f09 	cmp.w	ip, #9
 8009ecc:	d816      	bhi.n	8009efc <_strtol_l.constprop.0+0xa4>
 8009ece:	4664      	mov	r4, ip
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	dd24      	ble.n	8009f1e <_strtol_l.constprop.0+0xc6>
 8009ed4:	f1be 3fff 	cmp.w	lr, #4294967295
 8009ed8:	d008      	beq.n	8009eec <_strtol_l.constprop.0+0x94>
 8009eda:	45b1      	cmp	r9, r6
 8009edc:	d31c      	bcc.n	8009f18 <_strtol_l.constprop.0+0xc0>
 8009ede:	d101      	bne.n	8009ee4 <_strtol_l.constprop.0+0x8c>
 8009ee0:	45a2      	cmp	sl, r4
 8009ee2:	db19      	blt.n	8009f18 <_strtol_l.constprop.0+0xc0>
 8009ee4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ee8:	f04f 0e01 	mov.w	lr, #1
 8009eec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ef0:	e7e8      	b.n	8009ec4 <_strtol_l.constprop.0+0x6c>
 8009ef2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ef4:	bf04      	itt	eq
 8009ef6:	782c      	ldrbeq	r4, [r5, #0]
 8009ef8:	1cb5      	addeq	r5, r6, #2
 8009efa:	e7ca      	b.n	8009e92 <_strtol_l.constprop.0+0x3a>
 8009efc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f00:	f1bc 0f19 	cmp.w	ip, #25
 8009f04:	d801      	bhi.n	8009f0a <_strtol_l.constprop.0+0xb2>
 8009f06:	3c37      	subs	r4, #55	; 0x37
 8009f08:	e7e2      	b.n	8009ed0 <_strtol_l.constprop.0+0x78>
 8009f0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f0e:	f1bc 0f19 	cmp.w	ip, #25
 8009f12:	d804      	bhi.n	8009f1e <_strtol_l.constprop.0+0xc6>
 8009f14:	3c57      	subs	r4, #87	; 0x57
 8009f16:	e7db      	b.n	8009ed0 <_strtol_l.constprop.0+0x78>
 8009f18:	f04f 3eff 	mov.w	lr, #4294967295
 8009f1c:	e7e6      	b.n	8009eec <_strtol_l.constprop.0+0x94>
 8009f1e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f22:	d105      	bne.n	8009f30 <_strtol_l.constprop.0+0xd8>
 8009f24:	2322      	movs	r3, #34	; 0x22
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	4646      	mov	r6, r8
 8009f2a:	b942      	cbnz	r2, 8009f3e <_strtol_l.constprop.0+0xe6>
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	e79e      	b.n	8009e6e <_strtol_l.constprop.0+0x16>
 8009f30:	b107      	cbz	r7, 8009f34 <_strtol_l.constprop.0+0xdc>
 8009f32:	4276      	negs	r6, r6
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	d0f9      	beq.n	8009f2c <_strtol_l.constprop.0+0xd4>
 8009f38:	f1be 0f00 	cmp.w	lr, #0
 8009f3c:	d000      	beq.n	8009f40 <_strtol_l.constprop.0+0xe8>
 8009f3e:	1e69      	subs	r1, r5, #1
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	e7f3      	b.n	8009f2c <_strtol_l.constprop.0+0xd4>
 8009f44:	2430      	movs	r4, #48	; 0x30
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1b1      	bne.n	8009eae <_strtol_l.constprop.0+0x56>
 8009f4a:	2308      	movs	r3, #8
 8009f4c:	e7af      	b.n	8009eae <_strtol_l.constprop.0+0x56>
 8009f4e:	2c30      	cmp	r4, #48	; 0x30
 8009f50:	d0a5      	beq.n	8009e9e <_strtol_l.constprop.0+0x46>
 8009f52:	230a      	movs	r3, #10
 8009f54:	e7ab      	b.n	8009eae <_strtol_l.constprop.0+0x56>
 8009f56:	bf00      	nop
 8009f58:	0800b3f1 	.word	0x0800b3f1

08009f5c <_strtol_r>:
 8009f5c:	f7ff bf7c 	b.w	8009e58 <_strtol_l.constprop.0>

08009f60 <__ssputs_r>:
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	688e      	ldr	r6, [r1, #8]
 8009f66:	461f      	mov	r7, r3
 8009f68:	42be      	cmp	r6, r7
 8009f6a:	680b      	ldr	r3, [r1, #0]
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	4690      	mov	r8, r2
 8009f72:	d82c      	bhi.n	8009fce <__ssputs_r+0x6e>
 8009f74:	898a      	ldrh	r2, [r1, #12]
 8009f76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f7a:	d026      	beq.n	8009fca <__ssputs_r+0x6a>
 8009f7c:	6965      	ldr	r5, [r4, #20]
 8009f7e:	6909      	ldr	r1, [r1, #16]
 8009f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f84:	eba3 0901 	sub.w	r9, r3, r1
 8009f88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f8c:	1c7b      	adds	r3, r7, #1
 8009f8e:	444b      	add	r3, r9
 8009f90:	106d      	asrs	r5, r5, #1
 8009f92:	429d      	cmp	r5, r3
 8009f94:	bf38      	it	cc
 8009f96:	461d      	movcc	r5, r3
 8009f98:	0553      	lsls	r3, r2, #21
 8009f9a:	d527      	bpl.n	8009fec <__ssputs_r+0x8c>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7fe fc53 	bl	8008848 <_malloc_r>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	b360      	cbz	r0, 800a000 <__ssputs_r+0xa0>
 8009fa6:	6921      	ldr	r1, [r4, #16]
 8009fa8:	464a      	mov	r2, r9
 8009faa:	f000 fa1b 	bl	800a3e4 <memcpy>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	6126      	str	r6, [r4, #16]
 8009fbc:	6165      	str	r5, [r4, #20]
 8009fbe:	444e      	add	r6, r9
 8009fc0:	eba5 0509 	sub.w	r5, r5, r9
 8009fc4:	6026      	str	r6, [r4, #0]
 8009fc6:	60a5      	str	r5, [r4, #8]
 8009fc8:	463e      	mov	r6, r7
 8009fca:	42be      	cmp	r6, r7
 8009fcc:	d900      	bls.n	8009fd0 <__ssputs_r+0x70>
 8009fce:	463e      	mov	r6, r7
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	f000 f9c9 	bl	800a36c <memmove>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	1b9b      	subs	r3, r3, r6
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	4433      	add	r3, r6
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	462a      	mov	r2, r5
 8009fee:	f000 fdac 	bl	800ab4a <_realloc_r>
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1e0      	bne.n	8009fba <__ssputs_r+0x5a>
 8009ff8:	6921      	ldr	r1, [r4, #16]
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f7fe fbb0 	bl	8008760 <_free_r>
 800a000:	230c      	movs	r3, #12
 800a002:	f8ca 3000 	str.w	r3, [sl]
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	e7e9      	b.n	8009fe8 <__ssputs_r+0x88>

0800a014 <_svfiprintf_r>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	4698      	mov	r8, r3
 800a01a:	898b      	ldrh	r3, [r1, #12]
 800a01c:	061b      	lsls	r3, r3, #24
 800a01e:	b09d      	sub	sp, #116	; 0x74
 800a020:	4607      	mov	r7, r0
 800a022:	460d      	mov	r5, r1
 800a024:	4614      	mov	r4, r2
 800a026:	d50e      	bpl.n	800a046 <_svfiprintf_r+0x32>
 800a028:	690b      	ldr	r3, [r1, #16]
 800a02a:	b963      	cbnz	r3, 800a046 <_svfiprintf_r+0x32>
 800a02c:	2140      	movs	r1, #64	; 0x40
 800a02e:	f7fe fc0b 	bl	8008848 <_malloc_r>
 800a032:	6028      	str	r0, [r5, #0]
 800a034:	6128      	str	r0, [r5, #16]
 800a036:	b920      	cbnz	r0, 800a042 <_svfiprintf_r+0x2e>
 800a038:	230c      	movs	r3, #12
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	e0d0      	b.n	800a1e4 <_svfiprintf_r+0x1d0>
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	616b      	str	r3, [r5, #20]
 800a046:	2300      	movs	r3, #0
 800a048:	9309      	str	r3, [sp, #36]	; 0x24
 800a04a:	2320      	movs	r3, #32
 800a04c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a050:	f8cd 800c 	str.w	r8, [sp, #12]
 800a054:	2330      	movs	r3, #48	; 0x30
 800a056:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1fc <_svfiprintf_r+0x1e8>
 800a05a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05e:	f04f 0901 	mov.w	r9, #1
 800a062:	4623      	mov	r3, r4
 800a064:	469a      	mov	sl, r3
 800a066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a06a:	b10a      	cbz	r2, 800a070 <_svfiprintf_r+0x5c>
 800a06c:	2a25      	cmp	r2, #37	; 0x25
 800a06e:	d1f9      	bne.n	800a064 <_svfiprintf_r+0x50>
 800a070:	ebba 0b04 	subs.w	fp, sl, r4
 800a074:	d00b      	beq.n	800a08e <_svfiprintf_r+0x7a>
 800a076:	465b      	mov	r3, fp
 800a078:	4622      	mov	r2, r4
 800a07a:	4629      	mov	r1, r5
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7ff ff6f 	bl	8009f60 <__ssputs_r>
 800a082:	3001      	adds	r0, #1
 800a084:	f000 80a9 	beq.w	800a1da <_svfiprintf_r+0x1c6>
 800a088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a08a:	445a      	add	r2, fp
 800a08c:	9209      	str	r2, [sp, #36]	; 0x24
 800a08e:	f89a 3000 	ldrb.w	r3, [sl]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80a1 	beq.w	800a1da <_svfiprintf_r+0x1c6>
 800a098:	2300      	movs	r3, #0
 800a09a:	f04f 32ff 	mov.w	r2, #4294967295
 800a09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a2:	f10a 0a01 	add.w	sl, sl, #1
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	9307      	str	r3, [sp, #28]
 800a0aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ae:	931a      	str	r3, [sp, #104]	; 0x68
 800a0b0:	4654      	mov	r4, sl
 800a0b2:	2205      	movs	r2, #5
 800a0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b8:	4850      	ldr	r0, [pc, #320]	; (800a1fc <_svfiprintf_r+0x1e8>)
 800a0ba:	f7f6 f8c1 	bl	8000240 <memchr>
 800a0be:	9a04      	ldr	r2, [sp, #16]
 800a0c0:	b9d8      	cbnz	r0, 800a0fa <_svfiprintf_r+0xe6>
 800a0c2:	06d0      	lsls	r0, r2, #27
 800a0c4:	bf44      	itt	mi
 800a0c6:	2320      	movmi	r3, #32
 800a0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0cc:	0711      	lsls	r1, r2, #28
 800a0ce:	bf44      	itt	mi
 800a0d0:	232b      	movmi	r3, #43	; 0x2b
 800a0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0da:	2b2a      	cmp	r3, #42	; 0x2a
 800a0dc:	d015      	beq.n	800a10a <_svfiprintf_r+0xf6>
 800a0de:	9a07      	ldr	r2, [sp, #28]
 800a0e0:	4654      	mov	r4, sl
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	f04f 0c0a 	mov.w	ip, #10
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ee:	3b30      	subs	r3, #48	; 0x30
 800a0f0:	2b09      	cmp	r3, #9
 800a0f2:	d94d      	bls.n	800a190 <_svfiprintf_r+0x17c>
 800a0f4:	b1b0      	cbz	r0, 800a124 <_svfiprintf_r+0x110>
 800a0f6:	9207      	str	r2, [sp, #28]
 800a0f8:	e014      	b.n	800a124 <_svfiprintf_r+0x110>
 800a0fa:	eba0 0308 	sub.w	r3, r0, r8
 800a0fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a102:	4313      	orrs	r3, r2
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	46a2      	mov	sl, r4
 800a108:	e7d2      	b.n	800a0b0 <_svfiprintf_r+0x9c>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	1d19      	adds	r1, r3, #4
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	9103      	str	r1, [sp, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	bfbb      	ittet	lt
 800a116:	425b      	neglt	r3, r3
 800a118:	f042 0202 	orrlt.w	r2, r2, #2
 800a11c:	9307      	strge	r3, [sp, #28]
 800a11e:	9307      	strlt	r3, [sp, #28]
 800a120:	bfb8      	it	lt
 800a122:	9204      	strlt	r2, [sp, #16]
 800a124:	7823      	ldrb	r3, [r4, #0]
 800a126:	2b2e      	cmp	r3, #46	; 0x2e
 800a128:	d10c      	bne.n	800a144 <_svfiprintf_r+0x130>
 800a12a:	7863      	ldrb	r3, [r4, #1]
 800a12c:	2b2a      	cmp	r3, #42	; 0x2a
 800a12e:	d134      	bne.n	800a19a <_svfiprintf_r+0x186>
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	9203      	str	r2, [sp, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfb8      	it	lt
 800a13c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a140:	3402      	adds	r4, #2
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a20c <_svfiprintf_r+0x1f8>
 800a148:	7821      	ldrb	r1, [r4, #0]
 800a14a:	2203      	movs	r2, #3
 800a14c:	4650      	mov	r0, sl
 800a14e:	f7f6 f877 	bl	8000240 <memchr>
 800a152:	b138      	cbz	r0, 800a164 <_svfiprintf_r+0x150>
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	eba0 000a 	sub.w	r0, r0, sl
 800a15a:	2240      	movs	r2, #64	; 0x40
 800a15c:	4082      	lsls	r2, r0
 800a15e:	4313      	orrs	r3, r2
 800a160:	3401      	adds	r4, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	4825      	ldr	r0, [pc, #148]	; (800a200 <_svfiprintf_r+0x1ec>)
 800a16a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16e:	2206      	movs	r2, #6
 800a170:	f7f6 f866 	bl	8000240 <memchr>
 800a174:	2800      	cmp	r0, #0
 800a176:	d038      	beq.n	800a1ea <_svfiprintf_r+0x1d6>
 800a178:	4b22      	ldr	r3, [pc, #136]	; (800a204 <_svfiprintf_r+0x1f0>)
 800a17a:	bb1b      	cbnz	r3, 800a1c4 <_svfiprintf_r+0x1b0>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	3307      	adds	r3, #7
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	9303      	str	r3, [sp, #12]
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	4433      	add	r3, r6
 800a18c:	9309      	str	r3, [sp, #36]	; 0x24
 800a18e:	e768      	b.n	800a062 <_svfiprintf_r+0x4e>
 800a190:	fb0c 3202 	mla	r2, ip, r2, r3
 800a194:	460c      	mov	r4, r1
 800a196:	2001      	movs	r0, #1
 800a198:	e7a6      	b.n	800a0e8 <_svfiprintf_r+0xd4>
 800a19a:	2300      	movs	r3, #0
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f04f 0c0a 	mov.w	ip, #10
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ac:	3a30      	subs	r2, #48	; 0x30
 800a1ae:	2a09      	cmp	r2, #9
 800a1b0:	d903      	bls.n	800a1ba <_svfiprintf_r+0x1a6>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0c6      	beq.n	800a144 <_svfiprintf_r+0x130>
 800a1b6:	9105      	str	r1, [sp, #20]
 800a1b8:	e7c4      	b.n	800a144 <_svfiprintf_r+0x130>
 800a1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1be:	4604      	mov	r4, r0
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f0      	b.n	800a1a6 <_svfiprintf_r+0x192>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <_svfiprintf_r+0x1f4>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	f7fc fd76 	bl	8006cc0 <_printf_float>
 800a1d4:	1c42      	adds	r2, r0, #1
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	d1d6      	bne.n	800a188 <_svfiprintf_r+0x174>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	065b      	lsls	r3, r3, #25
 800a1de:	f53f af2d 	bmi.w	800a03c <_svfiprintf_r+0x28>
 800a1e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e4:	b01d      	add	sp, #116	; 0x74
 800a1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ea:	ab03      	add	r3, sp, #12
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <_svfiprintf_r+0x1f4>)
 800a1f2:	a904      	add	r1, sp, #16
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7fc ffeb 	bl	80071d0 <_printf_i>
 800a1fa:	e7eb      	b.n	800a1d4 <_svfiprintf_r+0x1c0>
 800a1fc:	0800b4f1 	.word	0x0800b4f1
 800a200:	0800b4fb 	.word	0x0800b4fb
 800a204:	08006cc1 	.word	0x08006cc1
 800a208:	08009f61 	.word	0x08009f61
 800a20c:	0800b4f7 	.word	0x0800b4f7

0800a210 <__sflush_r>:
 800a210:	898a      	ldrh	r2, [r1, #12]
 800a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	4605      	mov	r5, r0
 800a218:	0710      	lsls	r0, r2, #28
 800a21a:	460c      	mov	r4, r1
 800a21c:	d458      	bmi.n	800a2d0 <__sflush_r+0xc0>
 800a21e:	684b      	ldr	r3, [r1, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	dc05      	bgt.n	800a230 <__sflush_r+0x20>
 800a224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	dc02      	bgt.n	800a230 <__sflush_r+0x20>
 800a22a:	2000      	movs	r0, #0
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a232:	2e00      	cmp	r6, #0
 800a234:	d0f9      	beq.n	800a22a <__sflush_r+0x1a>
 800a236:	2300      	movs	r3, #0
 800a238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a23c:	682f      	ldr	r7, [r5, #0]
 800a23e:	6a21      	ldr	r1, [r4, #32]
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	d032      	beq.n	800a2aa <__sflush_r+0x9a>
 800a244:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	075a      	lsls	r2, r3, #29
 800a24a:	d505      	bpl.n	800a258 <__sflush_r+0x48>
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	1ac0      	subs	r0, r0, r3
 800a250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a252:	b10b      	cbz	r3, 800a258 <__sflush_r+0x48>
 800a254:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a256:	1ac0      	subs	r0, r0, r3
 800a258:	2300      	movs	r3, #0
 800a25a:	4602      	mov	r2, r0
 800a25c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a25e:	6a21      	ldr	r1, [r4, #32]
 800a260:	4628      	mov	r0, r5
 800a262:	47b0      	blx	r6
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	d106      	bne.n	800a278 <__sflush_r+0x68>
 800a26a:	6829      	ldr	r1, [r5, #0]
 800a26c:	291d      	cmp	r1, #29
 800a26e:	d82b      	bhi.n	800a2c8 <__sflush_r+0xb8>
 800a270:	4a29      	ldr	r2, [pc, #164]	; (800a318 <__sflush_r+0x108>)
 800a272:	410a      	asrs	r2, r1
 800a274:	07d6      	lsls	r6, r2, #31
 800a276:	d427      	bmi.n	800a2c8 <__sflush_r+0xb8>
 800a278:	2200      	movs	r2, #0
 800a27a:	6062      	str	r2, [r4, #4]
 800a27c:	04d9      	lsls	r1, r3, #19
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	6022      	str	r2, [r4, #0]
 800a282:	d504      	bpl.n	800a28e <__sflush_r+0x7e>
 800a284:	1c42      	adds	r2, r0, #1
 800a286:	d101      	bne.n	800a28c <__sflush_r+0x7c>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b903      	cbnz	r3, 800a28e <__sflush_r+0x7e>
 800a28c:	6560      	str	r0, [r4, #84]	; 0x54
 800a28e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a290:	602f      	str	r7, [r5, #0]
 800a292:	2900      	cmp	r1, #0
 800a294:	d0c9      	beq.n	800a22a <__sflush_r+0x1a>
 800a296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a29a:	4299      	cmp	r1, r3
 800a29c:	d002      	beq.n	800a2a4 <__sflush_r+0x94>
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f7fe fa5e 	bl	8008760 <_free_r>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	6360      	str	r0, [r4, #52]	; 0x34
 800a2a8:	e7c0      	b.n	800a22c <__sflush_r+0x1c>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	47b0      	blx	r6
 800a2b0:	1c41      	adds	r1, r0, #1
 800a2b2:	d1c8      	bne.n	800a246 <__sflush_r+0x36>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0c5      	beq.n	800a246 <__sflush_r+0x36>
 800a2ba:	2b1d      	cmp	r3, #29
 800a2bc:	d001      	beq.n	800a2c2 <__sflush_r+0xb2>
 800a2be:	2b16      	cmp	r3, #22
 800a2c0:	d101      	bne.n	800a2c6 <__sflush_r+0xb6>
 800a2c2:	602f      	str	r7, [r5, #0]
 800a2c4:	e7b1      	b.n	800a22a <__sflush_r+0x1a>
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	e7ad      	b.n	800a22c <__sflush_r+0x1c>
 800a2d0:	690f      	ldr	r7, [r1, #16]
 800a2d2:	2f00      	cmp	r7, #0
 800a2d4:	d0a9      	beq.n	800a22a <__sflush_r+0x1a>
 800a2d6:	0793      	lsls	r3, r2, #30
 800a2d8:	680e      	ldr	r6, [r1, #0]
 800a2da:	bf08      	it	eq
 800a2dc:	694b      	ldreq	r3, [r1, #20]
 800a2de:	600f      	str	r7, [r1, #0]
 800a2e0:	bf18      	it	ne
 800a2e2:	2300      	movne	r3, #0
 800a2e4:	eba6 0807 	sub.w	r8, r6, r7
 800a2e8:	608b      	str	r3, [r1, #8]
 800a2ea:	f1b8 0f00 	cmp.w	r8, #0
 800a2ee:	dd9c      	ble.n	800a22a <__sflush_r+0x1a>
 800a2f0:	6a21      	ldr	r1, [r4, #32]
 800a2f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2f4:	4643      	mov	r3, r8
 800a2f6:	463a      	mov	r2, r7
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b0      	blx	r6
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	dc06      	bgt.n	800a30e <__sflush_r+0xfe>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	f04f 30ff 	mov.w	r0, #4294967295
 800a30c:	e78e      	b.n	800a22c <__sflush_r+0x1c>
 800a30e:	4407      	add	r7, r0
 800a310:	eba8 0800 	sub.w	r8, r8, r0
 800a314:	e7e9      	b.n	800a2ea <__sflush_r+0xda>
 800a316:	bf00      	nop
 800a318:	dfbffffe 	.word	0xdfbffffe

0800a31c <_fflush_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	690b      	ldr	r3, [r1, #16]
 800a320:	4605      	mov	r5, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b913      	cbnz	r3, 800a32c <_fflush_r+0x10>
 800a326:	2500      	movs	r5, #0
 800a328:	4628      	mov	r0, r5
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	b118      	cbz	r0, 800a336 <_fflush_r+0x1a>
 800a32e:	6a03      	ldr	r3, [r0, #32]
 800a330:	b90b      	cbnz	r3, 800a336 <_fflush_r+0x1a>
 800a332:	f7fd faff 	bl	8007934 <__sinit>
 800a336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0f3      	beq.n	800a326 <_fflush_r+0xa>
 800a33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a340:	07d0      	lsls	r0, r2, #31
 800a342:	d404      	bmi.n	800a34e <_fflush_r+0x32>
 800a344:	0599      	lsls	r1, r3, #22
 800a346:	d402      	bmi.n	800a34e <_fflush_r+0x32>
 800a348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34a:	f7fd fc0a 	bl	8007b62 <__retarget_lock_acquire_recursive>
 800a34e:	4628      	mov	r0, r5
 800a350:	4621      	mov	r1, r4
 800a352:	f7ff ff5d 	bl	800a210 <__sflush_r>
 800a356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a358:	07da      	lsls	r2, r3, #31
 800a35a:	4605      	mov	r5, r0
 800a35c:	d4e4      	bmi.n	800a328 <_fflush_r+0xc>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	059b      	lsls	r3, r3, #22
 800a362:	d4e1      	bmi.n	800a328 <_fflush_r+0xc>
 800a364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a366:	f7fd fbfd 	bl	8007b64 <__retarget_lock_release_recursive>
 800a36a:	e7dd      	b.n	800a328 <_fflush_r+0xc>

0800a36c <memmove>:
 800a36c:	4288      	cmp	r0, r1
 800a36e:	b510      	push	{r4, lr}
 800a370:	eb01 0402 	add.w	r4, r1, r2
 800a374:	d902      	bls.n	800a37c <memmove+0x10>
 800a376:	4284      	cmp	r4, r0
 800a378:	4623      	mov	r3, r4
 800a37a:	d807      	bhi.n	800a38c <memmove+0x20>
 800a37c:	1e43      	subs	r3, r0, #1
 800a37e:	42a1      	cmp	r1, r4
 800a380:	d008      	beq.n	800a394 <memmove+0x28>
 800a382:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a38a:	e7f8      	b.n	800a37e <memmove+0x12>
 800a38c:	4402      	add	r2, r0
 800a38e:	4601      	mov	r1, r0
 800a390:	428a      	cmp	r2, r1
 800a392:	d100      	bne.n	800a396 <memmove+0x2a>
 800a394:	bd10      	pop	{r4, pc}
 800a396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a39a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a39e:	e7f7      	b.n	800a390 <memmove+0x24>

0800a3a0 <strncmp>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	b16a      	cbz	r2, 800a3c0 <strncmp+0x20>
 800a3a4:	3901      	subs	r1, #1
 800a3a6:	1884      	adds	r4, r0, r2
 800a3a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d103      	bne.n	800a3bc <strncmp+0x1c>
 800a3b4:	42a0      	cmp	r0, r4
 800a3b6:	d001      	beq.n	800a3bc <strncmp+0x1c>
 800a3b8:	2a00      	cmp	r2, #0
 800a3ba:	d1f5      	bne.n	800a3a8 <strncmp+0x8>
 800a3bc:	1ad0      	subs	r0, r2, r3
 800a3be:	bd10      	pop	{r4, pc}
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	e7fc      	b.n	800a3be <strncmp+0x1e>

0800a3c4 <_sbrk_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d06      	ldr	r5, [pc, #24]	; (800a3e0 <_sbrk_r+0x1c>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	f7f7 f98e 	bl	80016f0 <_sbrk>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_sbrk_r+0x1a>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_sbrk_r+0x1a>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	20000658 	.word	0x20000658

0800a3e4 <memcpy>:
 800a3e4:	440a      	add	r2, r1
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3ec:	d100      	bne.n	800a3f0 <memcpy+0xc>
 800a3ee:	4770      	bx	lr
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3fa:	4291      	cmp	r1, r2
 800a3fc:	d1f9      	bne.n	800a3f2 <memcpy+0xe>
 800a3fe:	bd10      	pop	{r4, pc}

0800a400 <nan>:
 800a400:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a408 <nan+0x8>
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	00000000 	.word	0x00000000
 800a40c:	7ff80000 	.word	0x7ff80000

0800a410 <__assert_func>:
 800a410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a412:	4614      	mov	r4, r2
 800a414:	461a      	mov	r2, r3
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <__assert_func+0x2c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4605      	mov	r5, r0
 800a41c:	68d8      	ldr	r0, [r3, #12]
 800a41e:	b14c      	cbz	r4, 800a434 <__assert_func+0x24>
 800a420:	4b07      	ldr	r3, [pc, #28]	; (800a440 <__assert_func+0x30>)
 800a422:	9100      	str	r1, [sp, #0]
 800a424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a428:	4906      	ldr	r1, [pc, #24]	; (800a444 <__assert_func+0x34>)
 800a42a:	462b      	mov	r3, r5
 800a42c:	f000 fbca 	bl	800abc4 <fiprintf>
 800a430:	f000 fbda 	bl	800abe8 <abort>
 800a434:	4b04      	ldr	r3, [pc, #16]	; (800a448 <__assert_func+0x38>)
 800a436:	461c      	mov	r4, r3
 800a438:	e7f3      	b.n	800a422 <__assert_func+0x12>
 800a43a:	bf00      	nop
 800a43c:	20000064 	.word	0x20000064
 800a440:	0800b50a 	.word	0x0800b50a
 800a444:	0800b517 	.word	0x0800b517
 800a448:	0800b545 	.word	0x0800b545

0800a44c <_calloc_r>:
 800a44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a44e:	fba1 2402 	umull	r2, r4, r1, r2
 800a452:	b94c      	cbnz	r4, 800a468 <_calloc_r+0x1c>
 800a454:	4611      	mov	r1, r2
 800a456:	9201      	str	r2, [sp, #4]
 800a458:	f7fe f9f6 	bl	8008848 <_malloc_r>
 800a45c:	9a01      	ldr	r2, [sp, #4]
 800a45e:	4605      	mov	r5, r0
 800a460:	b930      	cbnz	r0, 800a470 <_calloc_r+0x24>
 800a462:	4628      	mov	r0, r5
 800a464:	b003      	add	sp, #12
 800a466:	bd30      	pop	{r4, r5, pc}
 800a468:	220c      	movs	r2, #12
 800a46a:	6002      	str	r2, [r0, #0]
 800a46c:	2500      	movs	r5, #0
 800a46e:	e7f8      	b.n	800a462 <_calloc_r+0x16>
 800a470:	4621      	mov	r1, r4
 800a472:	f7fd faf8 	bl	8007a66 <memset>
 800a476:	e7f4      	b.n	800a462 <_calloc_r+0x16>

0800a478 <rshift>:
 800a478:	6903      	ldr	r3, [r0, #16]
 800a47a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a47e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a482:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a486:	f100 0414 	add.w	r4, r0, #20
 800a48a:	dd45      	ble.n	800a518 <rshift+0xa0>
 800a48c:	f011 011f 	ands.w	r1, r1, #31
 800a490:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a494:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a498:	d10c      	bne.n	800a4b4 <rshift+0x3c>
 800a49a:	f100 0710 	add.w	r7, r0, #16
 800a49e:	4629      	mov	r1, r5
 800a4a0:	42b1      	cmp	r1, r6
 800a4a2:	d334      	bcc.n	800a50e <rshift+0x96>
 800a4a4:	1a9b      	subs	r3, r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	1eea      	subs	r2, r5, #3
 800a4aa:	4296      	cmp	r6, r2
 800a4ac:	bf38      	it	cc
 800a4ae:	2300      	movcc	r3, #0
 800a4b0:	4423      	add	r3, r4
 800a4b2:	e015      	b.n	800a4e0 <rshift+0x68>
 800a4b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4b8:	f1c1 0820 	rsb	r8, r1, #32
 800a4bc:	40cf      	lsrs	r7, r1
 800a4be:	f105 0e04 	add.w	lr, r5, #4
 800a4c2:	46a1      	mov	r9, r4
 800a4c4:	4576      	cmp	r6, lr
 800a4c6:	46f4      	mov	ip, lr
 800a4c8:	d815      	bhi.n	800a4f6 <rshift+0x7e>
 800a4ca:	1a9a      	subs	r2, r3, r2
 800a4cc:	0092      	lsls	r2, r2, #2
 800a4ce:	3a04      	subs	r2, #4
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	42ae      	cmp	r6, r5
 800a4d4:	bf38      	it	cc
 800a4d6:	2200      	movcc	r2, #0
 800a4d8:	18a3      	adds	r3, r4, r2
 800a4da:	50a7      	str	r7, [r4, r2]
 800a4dc:	b107      	cbz	r7, 800a4e0 <rshift+0x68>
 800a4de:	3304      	adds	r3, #4
 800a4e0:	1b1a      	subs	r2, r3, r4
 800a4e2:	42a3      	cmp	r3, r4
 800a4e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4e8:	bf08      	it	eq
 800a4ea:	2300      	moveq	r3, #0
 800a4ec:	6102      	str	r2, [r0, #16]
 800a4ee:	bf08      	it	eq
 800a4f0:	6143      	streq	r3, [r0, #20]
 800a4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f6:	f8dc c000 	ldr.w	ip, [ip]
 800a4fa:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4fe:	ea4c 0707 	orr.w	r7, ip, r7
 800a502:	f849 7b04 	str.w	r7, [r9], #4
 800a506:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a50a:	40cf      	lsrs	r7, r1
 800a50c:	e7da      	b.n	800a4c4 <rshift+0x4c>
 800a50e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a512:	f847 cf04 	str.w	ip, [r7, #4]!
 800a516:	e7c3      	b.n	800a4a0 <rshift+0x28>
 800a518:	4623      	mov	r3, r4
 800a51a:	e7e1      	b.n	800a4e0 <rshift+0x68>

0800a51c <__hexdig_fun>:
 800a51c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a520:	2b09      	cmp	r3, #9
 800a522:	d802      	bhi.n	800a52a <__hexdig_fun+0xe>
 800a524:	3820      	subs	r0, #32
 800a526:	b2c0      	uxtb	r0, r0
 800a528:	4770      	bx	lr
 800a52a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a52e:	2b05      	cmp	r3, #5
 800a530:	d801      	bhi.n	800a536 <__hexdig_fun+0x1a>
 800a532:	3847      	subs	r0, #71	; 0x47
 800a534:	e7f7      	b.n	800a526 <__hexdig_fun+0xa>
 800a536:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d801      	bhi.n	800a542 <__hexdig_fun+0x26>
 800a53e:	3827      	subs	r0, #39	; 0x27
 800a540:	e7f1      	b.n	800a526 <__hexdig_fun+0xa>
 800a542:	2000      	movs	r0, #0
 800a544:	4770      	bx	lr
	...

0800a548 <__gethex>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	4617      	mov	r7, r2
 800a54e:	680a      	ldr	r2, [r1, #0]
 800a550:	b085      	sub	sp, #20
 800a552:	f102 0b02 	add.w	fp, r2, #2
 800a556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a55a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a55e:	4681      	mov	r9, r0
 800a560:	468a      	mov	sl, r1
 800a562:	9302      	str	r3, [sp, #8]
 800a564:	32fe      	adds	r2, #254	; 0xfe
 800a566:	eb02 030b 	add.w	r3, r2, fp
 800a56a:	46d8      	mov	r8, fp
 800a56c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	2830      	cmp	r0, #48	; 0x30
 800a574:	d0f7      	beq.n	800a566 <__gethex+0x1e>
 800a576:	f7ff ffd1 	bl	800a51c <__hexdig_fun>
 800a57a:	4604      	mov	r4, r0
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d138      	bne.n	800a5f2 <__gethex+0xaa>
 800a580:	49a7      	ldr	r1, [pc, #668]	; (800a820 <__gethex+0x2d8>)
 800a582:	2201      	movs	r2, #1
 800a584:	4640      	mov	r0, r8
 800a586:	f7ff ff0b 	bl	800a3a0 <strncmp>
 800a58a:	4606      	mov	r6, r0
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d169      	bne.n	800a664 <__gethex+0x11c>
 800a590:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a594:	465d      	mov	r5, fp
 800a596:	f7ff ffc1 	bl	800a51c <__hexdig_fun>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d064      	beq.n	800a668 <__gethex+0x120>
 800a59e:	465a      	mov	r2, fp
 800a5a0:	7810      	ldrb	r0, [r2, #0]
 800a5a2:	2830      	cmp	r0, #48	; 0x30
 800a5a4:	4690      	mov	r8, r2
 800a5a6:	f102 0201 	add.w	r2, r2, #1
 800a5aa:	d0f9      	beq.n	800a5a0 <__gethex+0x58>
 800a5ac:	f7ff ffb6 	bl	800a51c <__hexdig_fun>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	fab0 f480 	clz	r4, r0
 800a5b6:	0964      	lsrs	r4, r4, #5
 800a5b8:	465e      	mov	r6, fp
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	4642      	mov	r2, r8
 800a5be:	4615      	mov	r5, r2
 800a5c0:	3201      	adds	r2, #1
 800a5c2:	7828      	ldrb	r0, [r5, #0]
 800a5c4:	f7ff ffaa 	bl	800a51c <__hexdig_fun>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d1f8      	bne.n	800a5be <__gethex+0x76>
 800a5cc:	4994      	ldr	r1, [pc, #592]	; (800a820 <__gethex+0x2d8>)
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f7ff fee5 	bl	800a3a0 <strncmp>
 800a5d6:	b978      	cbnz	r0, 800a5f8 <__gethex+0xb0>
 800a5d8:	b946      	cbnz	r6, 800a5ec <__gethex+0xa4>
 800a5da:	1c6e      	adds	r6, r5, #1
 800a5dc:	4632      	mov	r2, r6
 800a5de:	4615      	mov	r5, r2
 800a5e0:	3201      	adds	r2, #1
 800a5e2:	7828      	ldrb	r0, [r5, #0]
 800a5e4:	f7ff ff9a 	bl	800a51c <__hexdig_fun>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d1f8      	bne.n	800a5de <__gethex+0x96>
 800a5ec:	1b73      	subs	r3, r6, r5
 800a5ee:	009e      	lsls	r6, r3, #2
 800a5f0:	e004      	b.n	800a5fc <__gethex+0xb4>
 800a5f2:	2400      	movs	r4, #0
 800a5f4:	4626      	mov	r6, r4
 800a5f6:	e7e1      	b.n	800a5bc <__gethex+0x74>
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	d1f7      	bne.n	800a5ec <__gethex+0xa4>
 800a5fc:	782b      	ldrb	r3, [r5, #0]
 800a5fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a602:	2b50      	cmp	r3, #80	; 0x50
 800a604:	d13d      	bne.n	800a682 <__gethex+0x13a>
 800a606:	786b      	ldrb	r3, [r5, #1]
 800a608:	2b2b      	cmp	r3, #43	; 0x2b
 800a60a:	d02f      	beq.n	800a66c <__gethex+0x124>
 800a60c:	2b2d      	cmp	r3, #45	; 0x2d
 800a60e:	d031      	beq.n	800a674 <__gethex+0x12c>
 800a610:	1c69      	adds	r1, r5, #1
 800a612:	f04f 0b00 	mov.w	fp, #0
 800a616:	7808      	ldrb	r0, [r1, #0]
 800a618:	f7ff ff80 	bl	800a51c <__hexdig_fun>
 800a61c:	1e42      	subs	r2, r0, #1
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	2a18      	cmp	r2, #24
 800a622:	d82e      	bhi.n	800a682 <__gethex+0x13a>
 800a624:	f1a0 0210 	sub.w	r2, r0, #16
 800a628:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a62c:	f7ff ff76 	bl	800a51c <__hexdig_fun>
 800a630:	f100 3cff 	add.w	ip, r0, #4294967295
 800a634:	fa5f fc8c 	uxtb.w	ip, ip
 800a638:	f1bc 0f18 	cmp.w	ip, #24
 800a63c:	d91d      	bls.n	800a67a <__gethex+0x132>
 800a63e:	f1bb 0f00 	cmp.w	fp, #0
 800a642:	d000      	beq.n	800a646 <__gethex+0xfe>
 800a644:	4252      	negs	r2, r2
 800a646:	4416      	add	r6, r2
 800a648:	f8ca 1000 	str.w	r1, [sl]
 800a64c:	b1dc      	cbz	r4, 800a686 <__gethex+0x13e>
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	bf14      	ite	ne
 800a654:	f04f 0800 	movne.w	r8, #0
 800a658:	f04f 0806 	moveq.w	r8, #6
 800a65c:	4640      	mov	r0, r8
 800a65e:	b005      	add	sp, #20
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	4645      	mov	r5, r8
 800a666:	4626      	mov	r6, r4
 800a668:	2401      	movs	r4, #1
 800a66a:	e7c7      	b.n	800a5fc <__gethex+0xb4>
 800a66c:	f04f 0b00 	mov.w	fp, #0
 800a670:	1ca9      	adds	r1, r5, #2
 800a672:	e7d0      	b.n	800a616 <__gethex+0xce>
 800a674:	f04f 0b01 	mov.w	fp, #1
 800a678:	e7fa      	b.n	800a670 <__gethex+0x128>
 800a67a:	230a      	movs	r3, #10
 800a67c:	fb03 0002 	mla	r0, r3, r2, r0
 800a680:	e7d0      	b.n	800a624 <__gethex+0xdc>
 800a682:	4629      	mov	r1, r5
 800a684:	e7e0      	b.n	800a648 <__gethex+0x100>
 800a686:	eba5 0308 	sub.w	r3, r5, r8
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4621      	mov	r1, r4
 800a68e:	2b07      	cmp	r3, #7
 800a690:	dc0a      	bgt.n	800a6a8 <__gethex+0x160>
 800a692:	4648      	mov	r0, r9
 800a694:	f7fe f964 	bl	8008960 <_Balloc>
 800a698:	4604      	mov	r4, r0
 800a69a:	b940      	cbnz	r0, 800a6ae <__gethex+0x166>
 800a69c:	4b61      	ldr	r3, [pc, #388]	; (800a824 <__gethex+0x2dc>)
 800a69e:	4602      	mov	r2, r0
 800a6a0:	21e4      	movs	r1, #228	; 0xe4
 800a6a2:	4861      	ldr	r0, [pc, #388]	; (800a828 <__gethex+0x2e0>)
 800a6a4:	f7ff feb4 	bl	800a410 <__assert_func>
 800a6a8:	3101      	adds	r1, #1
 800a6aa:	105b      	asrs	r3, r3, #1
 800a6ac:	e7ef      	b.n	800a68e <__gethex+0x146>
 800a6ae:	f100 0a14 	add.w	sl, r0, #20
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	495a      	ldr	r1, [pc, #360]	; (800a820 <__gethex+0x2d8>)
 800a6b6:	f8cd a004 	str.w	sl, [sp, #4]
 800a6ba:	469b      	mov	fp, r3
 800a6bc:	45a8      	cmp	r8, r5
 800a6be:	d342      	bcc.n	800a746 <__gethex+0x1fe>
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	f840 bb04 	str.w	fp, [r0], #4
 800a6c6:	eba0 000a 	sub.w	r0, r0, sl
 800a6ca:	1080      	asrs	r0, r0, #2
 800a6cc:	6120      	str	r0, [r4, #16]
 800a6ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a6d2:	4658      	mov	r0, fp
 800a6d4:	f7fe fa36 	bl	8008b44 <__hi0bits>
 800a6d8:	683d      	ldr	r5, [r7, #0]
 800a6da:	eba8 0000 	sub.w	r0, r8, r0
 800a6de:	42a8      	cmp	r0, r5
 800a6e0:	dd59      	ble.n	800a796 <__gethex+0x24e>
 800a6e2:	eba0 0805 	sub.w	r8, r0, r5
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7fe fdc2 	bl	8009272 <__any_on>
 800a6ee:	4683      	mov	fp, r0
 800a6f0:	b1b8      	cbz	r0, 800a722 <__gethex+0x1da>
 800a6f2:	f108 33ff 	add.w	r3, r8, #4294967295
 800a6f6:	1159      	asrs	r1, r3, #5
 800a6f8:	f003 021f 	and.w	r2, r3, #31
 800a6fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a700:	f04f 0b01 	mov.w	fp, #1
 800a704:	fa0b f202 	lsl.w	r2, fp, r2
 800a708:	420a      	tst	r2, r1
 800a70a:	d00a      	beq.n	800a722 <__gethex+0x1da>
 800a70c:	455b      	cmp	r3, fp
 800a70e:	dd06      	ble.n	800a71e <__gethex+0x1d6>
 800a710:	f1a8 0102 	sub.w	r1, r8, #2
 800a714:	4620      	mov	r0, r4
 800a716:	f7fe fdac 	bl	8009272 <__any_on>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d138      	bne.n	800a790 <__gethex+0x248>
 800a71e:	f04f 0b02 	mov.w	fp, #2
 800a722:	4641      	mov	r1, r8
 800a724:	4620      	mov	r0, r4
 800a726:	f7ff fea7 	bl	800a478 <rshift>
 800a72a:	4446      	add	r6, r8
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	42b3      	cmp	r3, r6
 800a730:	da41      	bge.n	800a7b6 <__gethex+0x26e>
 800a732:	4621      	mov	r1, r4
 800a734:	4648      	mov	r0, r9
 800a736:	f7fe f953 	bl	80089e0 <_Bfree>
 800a73a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a73c:	2300      	movs	r3, #0
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a744:	e78a      	b.n	800a65c <__gethex+0x114>
 800a746:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a74a:	2a2e      	cmp	r2, #46	; 0x2e
 800a74c:	d014      	beq.n	800a778 <__gethex+0x230>
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d106      	bne.n	800a760 <__gethex+0x218>
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	f843 bb04 	str.w	fp, [r3], #4
 800a758:	f04f 0b00 	mov.w	fp, #0
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	465b      	mov	r3, fp
 800a760:	7828      	ldrb	r0, [r5, #0]
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	f7ff feda 	bl	800a51c <__hexdig_fun>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	f000 000f 	and.w	r0, r0, #15
 800a76e:	4098      	lsls	r0, r3
 800a770:	ea4b 0b00 	orr.w	fp, fp, r0
 800a774:	3304      	adds	r3, #4
 800a776:	e7a1      	b.n	800a6bc <__gethex+0x174>
 800a778:	45a8      	cmp	r8, r5
 800a77a:	d8e8      	bhi.n	800a74e <__gethex+0x206>
 800a77c:	2201      	movs	r2, #1
 800a77e:	4628      	mov	r0, r5
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	f7ff fe0d 	bl	800a3a0 <strncmp>
 800a786:	4926      	ldr	r1, [pc, #152]	; (800a820 <__gethex+0x2d8>)
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d1df      	bne.n	800a74e <__gethex+0x206>
 800a78e:	e795      	b.n	800a6bc <__gethex+0x174>
 800a790:	f04f 0b03 	mov.w	fp, #3
 800a794:	e7c5      	b.n	800a722 <__gethex+0x1da>
 800a796:	da0b      	bge.n	800a7b0 <__gethex+0x268>
 800a798:	eba5 0800 	sub.w	r8, r5, r0
 800a79c:	4621      	mov	r1, r4
 800a79e:	4642      	mov	r2, r8
 800a7a0:	4648      	mov	r0, r9
 800a7a2:	f7fe fb37 	bl	8008e14 <__lshift>
 800a7a6:	eba6 0608 	sub.w	r6, r6, r8
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	f100 0a14 	add.w	sl, r0, #20
 800a7b0:	f04f 0b00 	mov.w	fp, #0
 800a7b4:	e7ba      	b.n	800a72c <__gethex+0x1e4>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	42b3      	cmp	r3, r6
 800a7ba:	dd73      	ble.n	800a8a4 <__gethex+0x35c>
 800a7bc:	1b9e      	subs	r6, r3, r6
 800a7be:	42b5      	cmp	r5, r6
 800a7c0:	dc34      	bgt.n	800a82c <__gethex+0x2e4>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d023      	beq.n	800a810 <__gethex+0x2c8>
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d025      	beq.n	800a818 <__gethex+0x2d0>
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d115      	bne.n	800a7fc <__gethex+0x2b4>
 800a7d0:	42b5      	cmp	r5, r6
 800a7d2:	d113      	bne.n	800a7fc <__gethex+0x2b4>
 800a7d4:	2d01      	cmp	r5, #1
 800a7d6:	d10b      	bne.n	800a7f0 <__gethex+0x2a8>
 800a7d8:	9a02      	ldr	r2, [sp, #8]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	2301      	movs	r3, #1
 800a7e0:	6123      	str	r3, [r4, #16]
 800a7e2:	f8ca 3000 	str.w	r3, [sl]
 800a7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a7ec:	601c      	str	r4, [r3, #0]
 800a7ee:	e735      	b.n	800a65c <__gethex+0x114>
 800a7f0:	1e69      	subs	r1, r5, #1
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7fe fd3d 	bl	8009272 <__any_on>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d1ed      	bne.n	800a7d8 <__gethex+0x290>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4648      	mov	r0, r9
 800a800:	f7fe f8ee 	bl	80089e0 <_Bfree>
 800a804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a806:	2300      	movs	r3, #0
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a80e:	e725      	b.n	800a65c <__gethex+0x114>
 800a810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1f2      	bne.n	800a7fc <__gethex+0x2b4>
 800a816:	e7df      	b.n	800a7d8 <__gethex+0x290>
 800a818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1dc      	bne.n	800a7d8 <__gethex+0x290>
 800a81e:	e7ed      	b.n	800a7fc <__gethex+0x2b4>
 800a820:	0800b39c 	.word	0x0800b39c
 800a824:	0800b235 	.word	0x0800b235
 800a828:	0800b546 	.word	0x0800b546
 800a82c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a830:	f1bb 0f00 	cmp.w	fp, #0
 800a834:	d133      	bne.n	800a89e <__gethex+0x356>
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	d004      	beq.n	800a846 <__gethex+0x2fe>
 800a83c:	4641      	mov	r1, r8
 800a83e:	4620      	mov	r0, r4
 800a840:	f7fe fd17 	bl	8009272 <__any_on>
 800a844:	4683      	mov	fp, r0
 800a846:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a84a:	2301      	movs	r3, #1
 800a84c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a850:	f008 081f 	and.w	r8, r8, #31
 800a854:	fa03 f308 	lsl.w	r3, r3, r8
 800a858:	4213      	tst	r3, r2
 800a85a:	4631      	mov	r1, r6
 800a85c:	4620      	mov	r0, r4
 800a85e:	bf18      	it	ne
 800a860:	f04b 0b02 	orrne.w	fp, fp, #2
 800a864:	1bad      	subs	r5, r5, r6
 800a866:	f7ff fe07 	bl	800a478 <rshift>
 800a86a:	687e      	ldr	r6, [r7, #4]
 800a86c:	f04f 0802 	mov.w	r8, #2
 800a870:	f1bb 0f00 	cmp.w	fp, #0
 800a874:	d04a      	beq.n	800a90c <__gethex+0x3c4>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d016      	beq.n	800a8aa <__gethex+0x362>
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d018      	beq.n	800a8b2 <__gethex+0x36a>
 800a880:	2b01      	cmp	r3, #1
 800a882:	d109      	bne.n	800a898 <__gethex+0x350>
 800a884:	f01b 0f02 	tst.w	fp, #2
 800a888:	d006      	beq.n	800a898 <__gethex+0x350>
 800a88a:	f8da 3000 	ldr.w	r3, [sl]
 800a88e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a892:	f01b 0f01 	tst.w	fp, #1
 800a896:	d10f      	bne.n	800a8b8 <__gethex+0x370>
 800a898:	f048 0810 	orr.w	r8, r8, #16
 800a89c:	e036      	b.n	800a90c <__gethex+0x3c4>
 800a89e:	f04f 0b01 	mov.w	fp, #1
 800a8a2:	e7d0      	b.n	800a846 <__gethex+0x2fe>
 800a8a4:	f04f 0801 	mov.w	r8, #1
 800a8a8:	e7e2      	b.n	800a870 <__gethex+0x328>
 800a8aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8ac:	f1c3 0301 	rsb	r3, r3, #1
 800a8b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0ef      	beq.n	800a898 <__gethex+0x350>
 800a8b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8bc:	f104 0214 	add.w	r2, r4, #20
 800a8c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a8c4:	9301      	str	r3, [sp, #4]
 800a8c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4694      	mov	ip, r2
 800a8ce:	f852 1b04 	ldr.w	r1, [r2], #4
 800a8d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a8d6:	d01e      	beq.n	800a916 <__gethex+0x3ce>
 800a8d8:	3101      	adds	r1, #1
 800a8da:	f8cc 1000 	str.w	r1, [ip]
 800a8de:	f1b8 0f02 	cmp.w	r8, #2
 800a8e2:	f104 0214 	add.w	r2, r4, #20
 800a8e6:	d13d      	bne.n	800a964 <__gethex+0x41c>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	42ab      	cmp	r3, r5
 800a8ee:	d10b      	bne.n	800a908 <__gethex+0x3c0>
 800a8f0:	1169      	asrs	r1, r5, #5
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f005 051f 	and.w	r5, r5, #31
 800a8f8:	fa03 f505 	lsl.w	r5, r3, r5
 800a8fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a900:	421d      	tst	r5, r3
 800a902:	bf18      	it	ne
 800a904:	f04f 0801 	movne.w	r8, #1
 800a908:	f048 0820 	orr.w	r8, r8, #32
 800a90c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a90e:	601c      	str	r4, [r3, #0]
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	601e      	str	r6, [r3, #0]
 800a914:	e6a2      	b.n	800a65c <__gethex+0x114>
 800a916:	4290      	cmp	r0, r2
 800a918:	f842 3c04 	str.w	r3, [r2, #-4]
 800a91c:	d8d6      	bhi.n	800a8cc <__gethex+0x384>
 800a91e:	68a2      	ldr	r2, [r4, #8]
 800a920:	4593      	cmp	fp, r2
 800a922:	db17      	blt.n	800a954 <__gethex+0x40c>
 800a924:	6861      	ldr	r1, [r4, #4]
 800a926:	4648      	mov	r0, r9
 800a928:	3101      	adds	r1, #1
 800a92a:	f7fe f819 	bl	8008960 <_Balloc>
 800a92e:	4682      	mov	sl, r0
 800a930:	b918      	cbnz	r0, 800a93a <__gethex+0x3f2>
 800a932:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <__gethex+0x458>)
 800a934:	4602      	mov	r2, r0
 800a936:	2184      	movs	r1, #132	; 0x84
 800a938:	e6b3      	b.n	800a6a2 <__gethex+0x15a>
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	3202      	adds	r2, #2
 800a93e:	f104 010c 	add.w	r1, r4, #12
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	300c      	adds	r0, #12
 800a946:	f7ff fd4d 	bl	800a3e4 <memcpy>
 800a94a:	4621      	mov	r1, r4
 800a94c:	4648      	mov	r0, r9
 800a94e:	f7fe f847 	bl	80089e0 <_Bfree>
 800a952:	4654      	mov	r4, sl
 800a954:	6922      	ldr	r2, [r4, #16]
 800a956:	1c51      	adds	r1, r2, #1
 800a958:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a95c:	6121      	str	r1, [r4, #16]
 800a95e:	2101      	movs	r1, #1
 800a960:	6151      	str	r1, [r2, #20]
 800a962:	e7bc      	b.n	800a8de <__gethex+0x396>
 800a964:	6921      	ldr	r1, [r4, #16]
 800a966:	4559      	cmp	r1, fp
 800a968:	dd0b      	ble.n	800a982 <__gethex+0x43a>
 800a96a:	2101      	movs	r1, #1
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7ff fd83 	bl	800a478 <rshift>
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	3601      	adds	r6, #1
 800a976:	42b3      	cmp	r3, r6
 800a978:	f6ff aedb 	blt.w	800a732 <__gethex+0x1ea>
 800a97c:	f04f 0801 	mov.w	r8, #1
 800a980:	e7c2      	b.n	800a908 <__gethex+0x3c0>
 800a982:	f015 051f 	ands.w	r5, r5, #31
 800a986:	d0f9      	beq.n	800a97c <__gethex+0x434>
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	441a      	add	r2, r3
 800a98c:	f1c5 0520 	rsb	r5, r5, #32
 800a990:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a994:	f7fe f8d6 	bl	8008b44 <__hi0bits>
 800a998:	42a8      	cmp	r0, r5
 800a99a:	dbe6      	blt.n	800a96a <__gethex+0x422>
 800a99c:	e7ee      	b.n	800a97c <__gethex+0x434>
 800a99e:	bf00      	nop
 800a9a0:	0800b235 	.word	0x0800b235

0800a9a4 <L_shift>:
 800a9a4:	f1c2 0208 	rsb	r2, r2, #8
 800a9a8:	0092      	lsls	r2, r2, #2
 800a9aa:	b570      	push	{r4, r5, r6, lr}
 800a9ac:	f1c2 0620 	rsb	r6, r2, #32
 800a9b0:	6843      	ldr	r3, [r0, #4]
 800a9b2:	6804      	ldr	r4, [r0, #0]
 800a9b4:	fa03 f506 	lsl.w	r5, r3, r6
 800a9b8:	432c      	orrs	r4, r5
 800a9ba:	40d3      	lsrs	r3, r2
 800a9bc:	6004      	str	r4, [r0, #0]
 800a9be:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9c2:	4288      	cmp	r0, r1
 800a9c4:	d3f4      	bcc.n	800a9b0 <L_shift+0xc>
 800a9c6:	bd70      	pop	{r4, r5, r6, pc}

0800a9c8 <__match>:
 800a9c8:	b530      	push	{r4, r5, lr}
 800a9ca:	6803      	ldr	r3, [r0, #0]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d2:	b914      	cbnz	r4, 800a9da <__match+0x12>
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	bd30      	pop	{r4, r5, pc}
 800a9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9e2:	2d19      	cmp	r5, #25
 800a9e4:	bf98      	it	ls
 800a9e6:	3220      	addls	r2, #32
 800a9e8:	42a2      	cmp	r2, r4
 800a9ea:	d0f0      	beq.n	800a9ce <__match+0x6>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	e7f3      	b.n	800a9d8 <__match+0x10>

0800a9f0 <__hexnan>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	680b      	ldr	r3, [r1, #0]
 800a9f6:	6801      	ldr	r1, [r0, #0]
 800a9f8:	115e      	asrs	r6, r3, #5
 800a9fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9fe:	f013 031f 	ands.w	r3, r3, #31
 800aa02:	b087      	sub	sp, #28
 800aa04:	bf18      	it	ne
 800aa06:	3604      	addne	r6, #4
 800aa08:	2500      	movs	r5, #0
 800aa0a:	1f37      	subs	r7, r6, #4
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	4690      	mov	r8, r2
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa16:	46b9      	mov	r9, r7
 800aa18:	463c      	mov	r4, r7
 800aa1a:	9502      	str	r5, [sp, #8]
 800aa1c:	46ab      	mov	fp, r5
 800aa1e:	784a      	ldrb	r2, [r1, #1]
 800aa20:	1c4b      	adds	r3, r1, #1
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	b342      	cbz	r2, 800aa78 <__hexnan+0x88>
 800aa26:	4610      	mov	r0, r2
 800aa28:	9105      	str	r1, [sp, #20]
 800aa2a:	9204      	str	r2, [sp, #16]
 800aa2c:	f7ff fd76 	bl	800a51c <__hexdig_fun>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d14f      	bne.n	800aad4 <__hexnan+0xe4>
 800aa34:	9a04      	ldr	r2, [sp, #16]
 800aa36:	9905      	ldr	r1, [sp, #20]
 800aa38:	2a20      	cmp	r2, #32
 800aa3a:	d818      	bhi.n	800aa6e <__hexnan+0x7e>
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	459b      	cmp	fp, r3
 800aa40:	dd13      	ble.n	800aa6a <__hexnan+0x7a>
 800aa42:	454c      	cmp	r4, r9
 800aa44:	d206      	bcs.n	800aa54 <__hexnan+0x64>
 800aa46:	2d07      	cmp	r5, #7
 800aa48:	dc04      	bgt.n	800aa54 <__hexnan+0x64>
 800aa4a:	462a      	mov	r2, r5
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff ffa8 	bl	800a9a4 <L_shift>
 800aa54:	4544      	cmp	r4, r8
 800aa56:	d950      	bls.n	800aafa <__hexnan+0x10a>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f1a4 0904 	sub.w	r9, r4, #4
 800aa5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa62:	f8cd b008 	str.w	fp, [sp, #8]
 800aa66:	464c      	mov	r4, r9
 800aa68:	461d      	mov	r5, r3
 800aa6a:	9903      	ldr	r1, [sp, #12]
 800aa6c:	e7d7      	b.n	800aa1e <__hexnan+0x2e>
 800aa6e:	2a29      	cmp	r2, #41	; 0x29
 800aa70:	d155      	bne.n	800ab1e <__hexnan+0x12e>
 800aa72:	3102      	adds	r1, #2
 800aa74:	f8ca 1000 	str.w	r1, [sl]
 800aa78:	f1bb 0f00 	cmp.w	fp, #0
 800aa7c:	d04f      	beq.n	800ab1e <__hexnan+0x12e>
 800aa7e:	454c      	cmp	r4, r9
 800aa80:	d206      	bcs.n	800aa90 <__hexnan+0xa0>
 800aa82:	2d07      	cmp	r5, #7
 800aa84:	dc04      	bgt.n	800aa90 <__hexnan+0xa0>
 800aa86:	462a      	mov	r2, r5
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f7ff ff8a 	bl	800a9a4 <L_shift>
 800aa90:	4544      	cmp	r4, r8
 800aa92:	d934      	bls.n	800aafe <__hexnan+0x10e>
 800aa94:	f1a8 0204 	sub.w	r2, r8, #4
 800aa98:	4623      	mov	r3, r4
 800aa9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaa2:	429f      	cmp	r7, r3
 800aaa4:	d2f9      	bcs.n	800aa9a <__hexnan+0xaa>
 800aaa6:	1b3b      	subs	r3, r7, r4
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	3304      	adds	r3, #4
 800aaae:	3e03      	subs	r6, #3
 800aab0:	3401      	adds	r4, #1
 800aab2:	42a6      	cmp	r6, r4
 800aab4:	bf38      	it	cc
 800aab6:	2304      	movcc	r3, #4
 800aab8:	4443      	add	r3, r8
 800aaba:	2200      	movs	r2, #0
 800aabc:	f843 2b04 	str.w	r2, [r3], #4
 800aac0:	429f      	cmp	r7, r3
 800aac2:	d2fb      	bcs.n	800aabc <__hexnan+0xcc>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	b91b      	cbnz	r3, 800aad0 <__hexnan+0xe0>
 800aac8:	4547      	cmp	r7, r8
 800aaca:	d126      	bne.n	800ab1a <__hexnan+0x12a>
 800aacc:	2301      	movs	r3, #1
 800aace:	603b      	str	r3, [r7, #0]
 800aad0:	2005      	movs	r0, #5
 800aad2:	e025      	b.n	800ab20 <__hexnan+0x130>
 800aad4:	3501      	adds	r5, #1
 800aad6:	2d08      	cmp	r5, #8
 800aad8:	f10b 0b01 	add.w	fp, fp, #1
 800aadc:	dd06      	ble.n	800aaec <__hexnan+0xfc>
 800aade:	4544      	cmp	r4, r8
 800aae0:	d9c3      	bls.n	800aa6a <__hexnan+0x7a>
 800aae2:	2300      	movs	r3, #0
 800aae4:	f844 3c04 	str.w	r3, [r4, #-4]
 800aae8:	2501      	movs	r5, #1
 800aaea:	3c04      	subs	r4, #4
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	f000 000f 	and.w	r0, r0, #15
 800aaf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aaf6:	6020      	str	r0, [r4, #0]
 800aaf8:	e7b7      	b.n	800aa6a <__hexnan+0x7a>
 800aafa:	2508      	movs	r5, #8
 800aafc:	e7b5      	b.n	800aa6a <__hexnan+0x7a>
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0df      	beq.n	800aac4 <__hexnan+0xd4>
 800ab04:	f1c3 0320 	rsb	r3, r3, #32
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0c:	40da      	lsrs	r2, r3
 800ab0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab12:	4013      	ands	r3, r2
 800ab14:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab18:	e7d4      	b.n	800aac4 <__hexnan+0xd4>
 800ab1a:	3f04      	subs	r7, #4
 800ab1c:	e7d2      	b.n	800aac4 <__hexnan+0xd4>
 800ab1e:	2004      	movs	r0, #4
 800ab20:	b007      	add	sp, #28
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab26 <__ascii_mbtowc>:
 800ab26:	b082      	sub	sp, #8
 800ab28:	b901      	cbnz	r1, 800ab2c <__ascii_mbtowc+0x6>
 800ab2a:	a901      	add	r1, sp, #4
 800ab2c:	b142      	cbz	r2, 800ab40 <__ascii_mbtowc+0x1a>
 800ab2e:	b14b      	cbz	r3, 800ab44 <__ascii_mbtowc+0x1e>
 800ab30:	7813      	ldrb	r3, [r2, #0]
 800ab32:	600b      	str	r3, [r1, #0]
 800ab34:	7812      	ldrb	r2, [r2, #0]
 800ab36:	1e10      	subs	r0, r2, #0
 800ab38:	bf18      	it	ne
 800ab3a:	2001      	movne	r0, #1
 800ab3c:	b002      	add	sp, #8
 800ab3e:	4770      	bx	lr
 800ab40:	4610      	mov	r0, r2
 800ab42:	e7fb      	b.n	800ab3c <__ascii_mbtowc+0x16>
 800ab44:	f06f 0001 	mvn.w	r0, #1
 800ab48:	e7f8      	b.n	800ab3c <__ascii_mbtowc+0x16>

0800ab4a <_realloc_r>:
 800ab4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	4680      	mov	r8, r0
 800ab50:	4614      	mov	r4, r2
 800ab52:	460e      	mov	r6, r1
 800ab54:	b921      	cbnz	r1, 800ab60 <_realloc_r+0x16>
 800ab56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	f7fd be74 	b.w	8008848 <_malloc_r>
 800ab60:	b92a      	cbnz	r2, 800ab6e <_realloc_r+0x24>
 800ab62:	f7fd fdfd 	bl	8008760 <_free_r>
 800ab66:	4625      	mov	r5, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6e:	f000 f842 	bl	800abf6 <_malloc_usable_size_r>
 800ab72:	4284      	cmp	r4, r0
 800ab74:	4607      	mov	r7, r0
 800ab76:	d802      	bhi.n	800ab7e <_realloc_r+0x34>
 800ab78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab7c:	d812      	bhi.n	800aba4 <_realloc_r+0x5a>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4640      	mov	r0, r8
 800ab82:	f7fd fe61 	bl	8008848 <_malloc_r>
 800ab86:	4605      	mov	r5, r0
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0ed      	beq.n	800ab68 <_realloc_r+0x1e>
 800ab8c:	42bc      	cmp	r4, r7
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4631      	mov	r1, r6
 800ab92:	bf28      	it	cs
 800ab94:	463a      	movcs	r2, r7
 800ab96:	f7ff fc25 	bl	800a3e4 <memcpy>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4640      	mov	r0, r8
 800ab9e:	f7fd fddf 	bl	8008760 <_free_r>
 800aba2:	e7e1      	b.n	800ab68 <_realloc_r+0x1e>
 800aba4:	4635      	mov	r5, r6
 800aba6:	e7df      	b.n	800ab68 <_realloc_r+0x1e>

0800aba8 <__ascii_wctomb>:
 800aba8:	b149      	cbz	r1, 800abbe <__ascii_wctomb+0x16>
 800abaa:	2aff      	cmp	r2, #255	; 0xff
 800abac:	bf85      	ittet	hi
 800abae:	238a      	movhi	r3, #138	; 0x8a
 800abb0:	6003      	strhi	r3, [r0, #0]
 800abb2:	700a      	strbls	r2, [r1, #0]
 800abb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800abb8:	bf98      	it	ls
 800abba:	2001      	movls	r0, #1
 800abbc:	4770      	bx	lr
 800abbe:	4608      	mov	r0, r1
 800abc0:	4770      	bx	lr
	...

0800abc4 <fiprintf>:
 800abc4:	b40e      	push	{r1, r2, r3}
 800abc6:	b503      	push	{r0, r1, lr}
 800abc8:	4601      	mov	r1, r0
 800abca:	ab03      	add	r3, sp, #12
 800abcc:	4805      	ldr	r0, [pc, #20]	; (800abe4 <fiprintf+0x20>)
 800abce:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd2:	6800      	ldr	r0, [r0, #0]
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	f000 f83f 	bl	800ac58 <_vfiprintf_r>
 800abda:	b002      	add	sp, #8
 800abdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe0:	b003      	add	sp, #12
 800abe2:	4770      	bx	lr
 800abe4:	20000064 	.word	0x20000064

0800abe8 <abort>:
 800abe8:	b508      	push	{r3, lr}
 800abea:	2006      	movs	r0, #6
 800abec:	f000 fa0c 	bl	800b008 <raise>
 800abf0:	2001      	movs	r0, #1
 800abf2:	f7f6 fd05 	bl	8001600 <_exit>

0800abf6 <_malloc_usable_size_r>:
 800abf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abfa:	1f18      	subs	r0, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfbc      	itt	lt
 800ac00:	580b      	ldrlt	r3, [r1, r0]
 800ac02:	18c0      	addlt	r0, r0, r3
 800ac04:	4770      	bx	lr

0800ac06 <__sfputc_r>:
 800ac06:	6893      	ldr	r3, [r2, #8]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	b410      	push	{r4}
 800ac0e:	6093      	str	r3, [r2, #8]
 800ac10:	da08      	bge.n	800ac24 <__sfputc_r+0x1e>
 800ac12:	6994      	ldr	r4, [r2, #24]
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	db01      	blt.n	800ac1c <__sfputc_r+0x16>
 800ac18:	290a      	cmp	r1, #10
 800ac1a:	d103      	bne.n	800ac24 <__sfputc_r+0x1e>
 800ac1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac20:	f000 b934 	b.w	800ae8c <__swbuf_r>
 800ac24:	6813      	ldr	r3, [r2, #0]
 800ac26:	1c58      	adds	r0, r3, #1
 800ac28:	6010      	str	r0, [r2, #0]
 800ac2a:	7019      	strb	r1, [r3, #0]
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <__sfputs_r>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	4606      	mov	r6, r0
 800ac38:	460f      	mov	r7, r1
 800ac3a:	4614      	mov	r4, r2
 800ac3c:	18d5      	adds	r5, r2, r3
 800ac3e:	42ac      	cmp	r4, r5
 800ac40:	d101      	bne.n	800ac46 <__sfputs_r+0x12>
 800ac42:	2000      	movs	r0, #0
 800ac44:	e007      	b.n	800ac56 <__sfputs_r+0x22>
 800ac46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f7ff ffda 	bl	800ac06 <__sfputc_r>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d1f3      	bne.n	800ac3e <__sfputs_r+0xa>
 800ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac58 <_vfiprintf_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	b09d      	sub	sp, #116	; 0x74
 800ac60:	4614      	mov	r4, r2
 800ac62:	4698      	mov	r8, r3
 800ac64:	4606      	mov	r6, r0
 800ac66:	b118      	cbz	r0, 800ac70 <_vfiprintf_r+0x18>
 800ac68:	6a03      	ldr	r3, [r0, #32]
 800ac6a:	b90b      	cbnz	r3, 800ac70 <_vfiprintf_r+0x18>
 800ac6c:	f7fc fe62 	bl	8007934 <__sinit>
 800ac70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac72:	07d9      	lsls	r1, r3, #31
 800ac74:	d405      	bmi.n	800ac82 <_vfiprintf_r+0x2a>
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	059a      	lsls	r2, r3, #22
 800ac7a:	d402      	bmi.n	800ac82 <_vfiprintf_r+0x2a>
 800ac7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac7e:	f7fc ff70 	bl	8007b62 <__retarget_lock_acquire_recursive>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	071b      	lsls	r3, r3, #28
 800ac86:	d501      	bpl.n	800ac8c <_vfiprintf_r+0x34>
 800ac88:	692b      	ldr	r3, [r5, #16]
 800ac8a:	b99b      	cbnz	r3, 800acb4 <_vfiprintf_r+0x5c>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f000 f93a 	bl	800af08 <__swsetup_r>
 800ac94:	b170      	cbz	r0, 800acb4 <_vfiprintf_r+0x5c>
 800ac96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac98:	07dc      	lsls	r4, r3, #31
 800ac9a:	d504      	bpl.n	800aca6 <_vfiprintf_r+0x4e>
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	b01d      	add	sp, #116	; 0x74
 800aca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	0598      	lsls	r0, r3, #22
 800acaa:	d4f7      	bmi.n	800ac9c <_vfiprintf_r+0x44>
 800acac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acae:	f7fc ff59 	bl	8007b64 <__retarget_lock_release_recursive>
 800acb2:	e7f3      	b.n	800ac9c <_vfiprintf_r+0x44>
 800acb4:	2300      	movs	r3, #0
 800acb6:	9309      	str	r3, [sp, #36]	; 0x24
 800acb8:	2320      	movs	r3, #32
 800acba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800acc2:	2330      	movs	r3, #48	; 0x30
 800acc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae78 <_vfiprintf_r+0x220>
 800acc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800accc:	f04f 0901 	mov.w	r9, #1
 800acd0:	4623      	mov	r3, r4
 800acd2:	469a      	mov	sl, r3
 800acd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acd8:	b10a      	cbz	r2, 800acde <_vfiprintf_r+0x86>
 800acda:	2a25      	cmp	r2, #37	; 0x25
 800acdc:	d1f9      	bne.n	800acd2 <_vfiprintf_r+0x7a>
 800acde:	ebba 0b04 	subs.w	fp, sl, r4
 800ace2:	d00b      	beq.n	800acfc <_vfiprintf_r+0xa4>
 800ace4:	465b      	mov	r3, fp
 800ace6:	4622      	mov	r2, r4
 800ace8:	4629      	mov	r1, r5
 800acea:	4630      	mov	r0, r6
 800acec:	f7ff ffa2 	bl	800ac34 <__sfputs_r>
 800acf0:	3001      	adds	r0, #1
 800acf2:	f000 80a9 	beq.w	800ae48 <_vfiprintf_r+0x1f0>
 800acf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf8:	445a      	add	r2, fp
 800acfa:	9209      	str	r2, [sp, #36]	; 0x24
 800acfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 80a1 	beq.w	800ae48 <_vfiprintf_r+0x1f0>
 800ad06:	2300      	movs	r3, #0
 800ad08:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad10:	f10a 0a01 	add.w	sl, sl, #1
 800ad14:	9304      	str	r3, [sp, #16]
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad1e:	4654      	mov	r4, sl
 800ad20:	2205      	movs	r2, #5
 800ad22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad26:	4854      	ldr	r0, [pc, #336]	; (800ae78 <_vfiprintf_r+0x220>)
 800ad28:	f7f5 fa8a 	bl	8000240 <memchr>
 800ad2c:	9a04      	ldr	r2, [sp, #16]
 800ad2e:	b9d8      	cbnz	r0, 800ad68 <_vfiprintf_r+0x110>
 800ad30:	06d1      	lsls	r1, r2, #27
 800ad32:	bf44      	itt	mi
 800ad34:	2320      	movmi	r3, #32
 800ad36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad3a:	0713      	lsls	r3, r2, #28
 800ad3c:	bf44      	itt	mi
 800ad3e:	232b      	movmi	r3, #43	; 0x2b
 800ad40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad44:	f89a 3000 	ldrb.w	r3, [sl]
 800ad48:	2b2a      	cmp	r3, #42	; 0x2a
 800ad4a:	d015      	beq.n	800ad78 <_vfiprintf_r+0x120>
 800ad4c:	9a07      	ldr	r2, [sp, #28]
 800ad4e:	4654      	mov	r4, sl
 800ad50:	2000      	movs	r0, #0
 800ad52:	f04f 0c0a 	mov.w	ip, #10
 800ad56:	4621      	mov	r1, r4
 800ad58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad5c:	3b30      	subs	r3, #48	; 0x30
 800ad5e:	2b09      	cmp	r3, #9
 800ad60:	d94d      	bls.n	800adfe <_vfiprintf_r+0x1a6>
 800ad62:	b1b0      	cbz	r0, 800ad92 <_vfiprintf_r+0x13a>
 800ad64:	9207      	str	r2, [sp, #28]
 800ad66:	e014      	b.n	800ad92 <_vfiprintf_r+0x13a>
 800ad68:	eba0 0308 	sub.w	r3, r0, r8
 800ad6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad70:	4313      	orrs	r3, r2
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	46a2      	mov	sl, r4
 800ad76:	e7d2      	b.n	800ad1e <_vfiprintf_r+0xc6>
 800ad78:	9b03      	ldr	r3, [sp, #12]
 800ad7a:	1d19      	adds	r1, r3, #4
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	9103      	str	r1, [sp, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bfbb      	ittet	lt
 800ad84:	425b      	neglt	r3, r3
 800ad86:	f042 0202 	orrlt.w	r2, r2, #2
 800ad8a:	9307      	strge	r3, [sp, #28]
 800ad8c:	9307      	strlt	r3, [sp, #28]
 800ad8e:	bfb8      	it	lt
 800ad90:	9204      	strlt	r2, [sp, #16]
 800ad92:	7823      	ldrb	r3, [r4, #0]
 800ad94:	2b2e      	cmp	r3, #46	; 0x2e
 800ad96:	d10c      	bne.n	800adb2 <_vfiprintf_r+0x15a>
 800ad98:	7863      	ldrb	r3, [r4, #1]
 800ad9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad9c:	d134      	bne.n	800ae08 <_vfiprintf_r+0x1b0>
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	1d1a      	adds	r2, r3, #4
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	9203      	str	r2, [sp, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bfb8      	it	lt
 800adaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800adae:	3402      	adds	r4, #2
 800adb0:	9305      	str	r3, [sp, #20]
 800adb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae88 <_vfiprintf_r+0x230>
 800adb6:	7821      	ldrb	r1, [r4, #0]
 800adb8:	2203      	movs	r2, #3
 800adba:	4650      	mov	r0, sl
 800adbc:	f7f5 fa40 	bl	8000240 <memchr>
 800adc0:	b138      	cbz	r0, 800add2 <_vfiprintf_r+0x17a>
 800adc2:	9b04      	ldr	r3, [sp, #16]
 800adc4:	eba0 000a 	sub.w	r0, r0, sl
 800adc8:	2240      	movs	r2, #64	; 0x40
 800adca:	4082      	lsls	r2, r0
 800adcc:	4313      	orrs	r3, r2
 800adce:	3401      	adds	r4, #1
 800add0:	9304      	str	r3, [sp, #16]
 800add2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add6:	4829      	ldr	r0, [pc, #164]	; (800ae7c <_vfiprintf_r+0x224>)
 800add8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800addc:	2206      	movs	r2, #6
 800adde:	f7f5 fa2f 	bl	8000240 <memchr>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d03f      	beq.n	800ae66 <_vfiprintf_r+0x20e>
 800ade6:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <_vfiprintf_r+0x228>)
 800ade8:	bb1b      	cbnz	r3, 800ae32 <_vfiprintf_r+0x1da>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	3307      	adds	r3, #7
 800adee:	f023 0307 	bic.w	r3, r3, #7
 800adf2:	3308      	adds	r3, #8
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf8:	443b      	add	r3, r7
 800adfa:	9309      	str	r3, [sp, #36]	; 0x24
 800adfc:	e768      	b.n	800acd0 <_vfiprintf_r+0x78>
 800adfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae02:	460c      	mov	r4, r1
 800ae04:	2001      	movs	r0, #1
 800ae06:	e7a6      	b.n	800ad56 <_vfiprintf_r+0xfe>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	3401      	adds	r4, #1
 800ae0c:	9305      	str	r3, [sp, #20]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	f04f 0c0a 	mov.w	ip, #10
 800ae14:	4620      	mov	r0, r4
 800ae16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae1a:	3a30      	subs	r2, #48	; 0x30
 800ae1c:	2a09      	cmp	r2, #9
 800ae1e:	d903      	bls.n	800ae28 <_vfiprintf_r+0x1d0>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0c6      	beq.n	800adb2 <_vfiprintf_r+0x15a>
 800ae24:	9105      	str	r1, [sp, #20]
 800ae26:	e7c4      	b.n	800adb2 <_vfiprintf_r+0x15a>
 800ae28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e7f0      	b.n	800ae14 <_vfiprintf_r+0x1bc>
 800ae32:	ab03      	add	r3, sp, #12
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	462a      	mov	r2, r5
 800ae38:	4b12      	ldr	r3, [pc, #72]	; (800ae84 <_vfiprintf_r+0x22c>)
 800ae3a:	a904      	add	r1, sp, #16
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7fb ff3f 	bl	8006cc0 <_printf_float>
 800ae42:	4607      	mov	r7, r0
 800ae44:	1c78      	adds	r0, r7, #1
 800ae46:	d1d6      	bne.n	800adf6 <_vfiprintf_r+0x19e>
 800ae48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae4a:	07d9      	lsls	r1, r3, #31
 800ae4c:	d405      	bmi.n	800ae5a <_vfiprintf_r+0x202>
 800ae4e:	89ab      	ldrh	r3, [r5, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_vfiprintf_r+0x202>
 800ae54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae56:	f7fc fe85 	bl	8007b64 <__retarget_lock_release_recursive>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	065b      	lsls	r3, r3, #25
 800ae5e:	f53f af1d 	bmi.w	800ac9c <_vfiprintf_r+0x44>
 800ae62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae64:	e71c      	b.n	800aca0 <_vfiprintf_r+0x48>
 800ae66:	ab03      	add	r3, sp, #12
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <_vfiprintf_r+0x22c>)
 800ae6e:	a904      	add	r1, sp, #16
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7fc f9ad 	bl	80071d0 <_printf_i>
 800ae76:	e7e4      	b.n	800ae42 <_vfiprintf_r+0x1ea>
 800ae78:	0800b4f1 	.word	0x0800b4f1
 800ae7c:	0800b4fb 	.word	0x0800b4fb
 800ae80:	08006cc1 	.word	0x08006cc1
 800ae84:	0800ac35 	.word	0x0800ac35
 800ae88:	0800b4f7 	.word	0x0800b4f7

0800ae8c <__swbuf_r>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	460e      	mov	r6, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	4605      	mov	r5, r0
 800ae94:	b118      	cbz	r0, 800ae9e <__swbuf_r+0x12>
 800ae96:	6a03      	ldr	r3, [r0, #32]
 800ae98:	b90b      	cbnz	r3, 800ae9e <__swbuf_r+0x12>
 800ae9a:	f7fc fd4b 	bl	8007934 <__sinit>
 800ae9e:	69a3      	ldr	r3, [r4, #24]
 800aea0:	60a3      	str	r3, [r4, #8]
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	071a      	lsls	r2, r3, #28
 800aea6:	d525      	bpl.n	800aef4 <__swbuf_r+0x68>
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	b31b      	cbz	r3, 800aef4 <__swbuf_r+0x68>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	6922      	ldr	r2, [r4, #16]
 800aeb0:	1a98      	subs	r0, r3, r2
 800aeb2:	6963      	ldr	r3, [r4, #20]
 800aeb4:	b2f6      	uxtb	r6, r6
 800aeb6:	4283      	cmp	r3, r0
 800aeb8:	4637      	mov	r7, r6
 800aeba:	dc04      	bgt.n	800aec6 <__swbuf_r+0x3a>
 800aebc:	4621      	mov	r1, r4
 800aebe:	4628      	mov	r0, r5
 800aec0:	f7ff fa2c 	bl	800a31c <_fflush_r>
 800aec4:	b9e0      	cbnz	r0, 800af00 <__swbuf_r+0x74>
 800aec6:	68a3      	ldr	r3, [r4, #8]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	60a3      	str	r3, [r4, #8]
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	1c5a      	adds	r2, r3, #1
 800aed0:	6022      	str	r2, [r4, #0]
 800aed2:	701e      	strb	r6, [r3, #0]
 800aed4:	6962      	ldr	r2, [r4, #20]
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d004      	beq.n	800aee6 <__swbuf_r+0x5a>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	07db      	lsls	r3, r3, #31
 800aee0:	d506      	bpl.n	800aef0 <__swbuf_r+0x64>
 800aee2:	2e0a      	cmp	r6, #10
 800aee4:	d104      	bne.n	800aef0 <__swbuf_r+0x64>
 800aee6:	4621      	mov	r1, r4
 800aee8:	4628      	mov	r0, r5
 800aeea:	f7ff fa17 	bl	800a31c <_fflush_r>
 800aeee:	b938      	cbnz	r0, 800af00 <__swbuf_r+0x74>
 800aef0:	4638      	mov	r0, r7
 800aef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef4:	4621      	mov	r1, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 f806 	bl	800af08 <__swsetup_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0d5      	beq.n	800aeac <__swbuf_r+0x20>
 800af00:	f04f 37ff 	mov.w	r7, #4294967295
 800af04:	e7f4      	b.n	800aef0 <__swbuf_r+0x64>
	...

0800af08 <__swsetup_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4b2a      	ldr	r3, [pc, #168]	; (800afb4 <__swsetup_r+0xac>)
 800af0c:	4605      	mov	r5, r0
 800af0e:	6818      	ldr	r0, [r3, #0]
 800af10:	460c      	mov	r4, r1
 800af12:	b118      	cbz	r0, 800af1c <__swsetup_r+0x14>
 800af14:	6a03      	ldr	r3, [r0, #32]
 800af16:	b90b      	cbnz	r3, 800af1c <__swsetup_r+0x14>
 800af18:	f7fc fd0c 	bl	8007934 <__sinit>
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af22:	0718      	lsls	r0, r3, #28
 800af24:	d422      	bmi.n	800af6c <__swsetup_r+0x64>
 800af26:	06d9      	lsls	r1, r3, #27
 800af28:	d407      	bmi.n	800af3a <__swsetup_r+0x32>
 800af2a:	2309      	movs	r3, #9
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	e034      	b.n	800afa4 <__swsetup_r+0x9c>
 800af3a:	0758      	lsls	r0, r3, #29
 800af3c:	d512      	bpl.n	800af64 <__swsetup_r+0x5c>
 800af3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af40:	b141      	cbz	r1, 800af54 <__swsetup_r+0x4c>
 800af42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af46:	4299      	cmp	r1, r3
 800af48:	d002      	beq.n	800af50 <__swsetup_r+0x48>
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7fd fc08 	bl	8008760 <_free_r>
 800af50:	2300      	movs	r3, #0
 800af52:	6363      	str	r3, [r4, #52]	; 0x34
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af5a:	81a3      	strh	r3, [r4, #12]
 800af5c:	2300      	movs	r3, #0
 800af5e:	6063      	str	r3, [r4, #4]
 800af60:	6923      	ldr	r3, [r4, #16]
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f043 0308 	orr.w	r3, r3, #8
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	b94b      	cbnz	r3, 800af84 <__swsetup_r+0x7c>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af7a:	d003      	beq.n	800af84 <__swsetup_r+0x7c>
 800af7c:	4621      	mov	r1, r4
 800af7e:	4628      	mov	r0, r5
 800af80:	f000 f884 	bl	800b08c <__smakebuf_r>
 800af84:	89a0      	ldrh	r0, [r4, #12]
 800af86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af8a:	f010 0301 	ands.w	r3, r0, #1
 800af8e:	d00a      	beq.n	800afa6 <__swsetup_r+0x9e>
 800af90:	2300      	movs	r3, #0
 800af92:	60a3      	str	r3, [r4, #8]
 800af94:	6963      	ldr	r3, [r4, #20]
 800af96:	425b      	negs	r3, r3
 800af98:	61a3      	str	r3, [r4, #24]
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	b943      	cbnz	r3, 800afb0 <__swsetup_r+0xa8>
 800af9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afa2:	d1c4      	bne.n	800af2e <__swsetup_r+0x26>
 800afa4:	bd38      	pop	{r3, r4, r5, pc}
 800afa6:	0781      	lsls	r1, r0, #30
 800afa8:	bf58      	it	pl
 800afaa:	6963      	ldrpl	r3, [r4, #20]
 800afac:	60a3      	str	r3, [r4, #8]
 800afae:	e7f4      	b.n	800af9a <__swsetup_r+0x92>
 800afb0:	2000      	movs	r0, #0
 800afb2:	e7f7      	b.n	800afa4 <__swsetup_r+0x9c>
 800afb4:	20000064 	.word	0x20000064

0800afb8 <_raise_r>:
 800afb8:	291f      	cmp	r1, #31
 800afba:	b538      	push	{r3, r4, r5, lr}
 800afbc:	4604      	mov	r4, r0
 800afbe:	460d      	mov	r5, r1
 800afc0:	d904      	bls.n	800afcc <_raise_r+0x14>
 800afc2:	2316      	movs	r3, #22
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	f04f 30ff 	mov.w	r0, #4294967295
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afce:	b112      	cbz	r2, 800afd6 <_raise_r+0x1e>
 800afd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afd4:	b94b      	cbnz	r3, 800afea <_raise_r+0x32>
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f830 	bl	800b03c <_getpid_r>
 800afdc:	462a      	mov	r2, r5
 800afde:	4601      	mov	r1, r0
 800afe0:	4620      	mov	r0, r4
 800afe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afe6:	f000 b817 	b.w	800b018 <_kill_r>
 800afea:	2b01      	cmp	r3, #1
 800afec:	d00a      	beq.n	800b004 <_raise_r+0x4c>
 800afee:	1c59      	adds	r1, r3, #1
 800aff0:	d103      	bne.n	800affa <_raise_r+0x42>
 800aff2:	2316      	movs	r3, #22
 800aff4:	6003      	str	r3, [r0, #0]
 800aff6:	2001      	movs	r0, #1
 800aff8:	e7e7      	b.n	800afca <_raise_r+0x12>
 800affa:	2400      	movs	r4, #0
 800affc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b000:	4628      	mov	r0, r5
 800b002:	4798      	blx	r3
 800b004:	2000      	movs	r0, #0
 800b006:	e7e0      	b.n	800afca <_raise_r+0x12>

0800b008 <raise>:
 800b008:	4b02      	ldr	r3, [pc, #8]	; (800b014 <raise+0xc>)
 800b00a:	4601      	mov	r1, r0
 800b00c:	6818      	ldr	r0, [r3, #0]
 800b00e:	f7ff bfd3 	b.w	800afb8 <_raise_r>
 800b012:	bf00      	nop
 800b014:	20000064 	.word	0x20000064

0800b018 <_kill_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d07      	ldr	r5, [pc, #28]	; (800b038 <_kill_r+0x20>)
 800b01c:	2300      	movs	r3, #0
 800b01e:	4604      	mov	r4, r0
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	602b      	str	r3, [r5, #0]
 800b026:	f7f6 fadb 	bl	80015e0 <_kill>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	d102      	bne.n	800b034 <_kill_r+0x1c>
 800b02e:	682b      	ldr	r3, [r5, #0]
 800b030:	b103      	cbz	r3, 800b034 <_kill_r+0x1c>
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	bd38      	pop	{r3, r4, r5, pc}
 800b036:	bf00      	nop
 800b038:	20000658 	.word	0x20000658

0800b03c <_getpid_r>:
 800b03c:	f7f6 bac8 	b.w	80015d0 <_getpid>

0800b040 <__swhatbuf_r>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	460c      	mov	r4, r1
 800b044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b048:	2900      	cmp	r1, #0
 800b04a:	b096      	sub	sp, #88	; 0x58
 800b04c:	4615      	mov	r5, r2
 800b04e:	461e      	mov	r6, r3
 800b050:	da0d      	bge.n	800b06e <__swhatbuf_r+0x2e>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b058:	f04f 0100 	mov.w	r1, #0
 800b05c:	bf0c      	ite	eq
 800b05e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b062:	2340      	movne	r3, #64	; 0x40
 800b064:	2000      	movs	r0, #0
 800b066:	6031      	str	r1, [r6, #0]
 800b068:	602b      	str	r3, [r5, #0]
 800b06a:	b016      	add	sp, #88	; 0x58
 800b06c:	bd70      	pop	{r4, r5, r6, pc}
 800b06e:	466a      	mov	r2, sp
 800b070:	f000 f848 	bl	800b104 <_fstat_r>
 800b074:	2800      	cmp	r0, #0
 800b076:	dbec      	blt.n	800b052 <__swhatbuf_r+0x12>
 800b078:	9901      	ldr	r1, [sp, #4]
 800b07a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b07e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b082:	4259      	negs	r1, r3
 800b084:	4159      	adcs	r1, r3
 800b086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08a:	e7eb      	b.n	800b064 <__swhatbuf_r+0x24>

0800b08c <__smakebuf_r>:
 800b08c:	898b      	ldrh	r3, [r1, #12]
 800b08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b090:	079d      	lsls	r5, r3, #30
 800b092:	4606      	mov	r6, r0
 800b094:	460c      	mov	r4, r1
 800b096:	d507      	bpl.n	800b0a8 <__smakebuf_r+0x1c>
 800b098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	6163      	str	r3, [r4, #20]
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}
 800b0a8:	ab01      	add	r3, sp, #4
 800b0aa:	466a      	mov	r2, sp
 800b0ac:	f7ff ffc8 	bl	800b040 <__swhatbuf_r>
 800b0b0:	9900      	ldr	r1, [sp, #0]
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7fd fbc7 	bl	8008848 <_malloc_r>
 800b0ba:	b948      	cbnz	r0, 800b0d0 <__smakebuf_r+0x44>
 800b0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c0:	059a      	lsls	r2, r3, #22
 800b0c2:	d4ef      	bmi.n	800b0a4 <__smakebuf_r+0x18>
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	f043 0302 	orr.w	r3, r3, #2
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	e7e3      	b.n	800b098 <__smakebuf_r+0xc>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	6020      	str	r0, [r4, #0]
 800b0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d8:	81a3      	strh	r3, [r4, #12]
 800b0da:	9b00      	ldr	r3, [sp, #0]
 800b0dc:	6163      	str	r3, [r4, #20]
 800b0de:	9b01      	ldr	r3, [sp, #4]
 800b0e0:	6120      	str	r0, [r4, #16]
 800b0e2:	b15b      	cbz	r3, 800b0fc <__smakebuf_r+0x70>
 800b0e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f000 f81d 	bl	800b128 <_isatty_r>
 800b0ee:	b128      	cbz	r0, 800b0fc <__smakebuf_r+0x70>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
 800b0f6:	f043 0301 	orr.w	r3, r3, #1
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	431d      	orrs	r5, r3
 800b100:	81a5      	strh	r5, [r4, #12]
 800b102:	e7cf      	b.n	800b0a4 <__smakebuf_r+0x18>

0800b104 <_fstat_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d07      	ldr	r5, [pc, #28]	; (800b124 <_fstat_r+0x20>)
 800b108:	2300      	movs	r3, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	4611      	mov	r1, r2
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	f7f6 fac4 	bl	800169e <_fstat>
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	d102      	bne.n	800b120 <_fstat_r+0x1c>
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	b103      	cbz	r3, 800b120 <_fstat_r+0x1c>
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	bd38      	pop	{r3, r4, r5, pc}
 800b122:	bf00      	nop
 800b124:	20000658 	.word	0x20000658

0800b128 <_isatty_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4d06      	ldr	r5, [pc, #24]	; (800b144 <_isatty_r+0x1c>)
 800b12c:	2300      	movs	r3, #0
 800b12e:	4604      	mov	r4, r0
 800b130:	4608      	mov	r0, r1
 800b132:	602b      	str	r3, [r5, #0]
 800b134:	f7f6 fac3 	bl	80016be <_isatty>
 800b138:	1c43      	adds	r3, r0, #1
 800b13a:	d102      	bne.n	800b142 <_isatty_r+0x1a>
 800b13c:	682b      	ldr	r3, [r5, #0]
 800b13e:	b103      	cbz	r3, 800b142 <_isatty_r+0x1a>
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	bd38      	pop	{r3, r4, r5, pc}
 800b144:	20000658 	.word	0x20000658

0800b148 <_init>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	bf00      	nop
 800b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14e:	bc08      	pop	{r3}
 800b150:	469e      	mov	lr, r3
 800b152:	4770      	bx	lr

0800b154 <_fini>:
 800b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b156:	bf00      	nop
 800b158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15a:	bc08      	pop	{r3}
 800b15c:	469e      	mov	lr, r3
 800b15e:	4770      	bx	lr
