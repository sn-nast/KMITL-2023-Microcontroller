
BomberMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d040  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  0800d240  0800d240  0001d240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e170  0800e170  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e170  0800e170  0001e170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e178  0800e178  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e178  0800e178  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e17c  0800e17c  0001e17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200001e4  0800e364  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  0800e364  00020678  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d690  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047e7  00000000  00000000  0003d8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c8  00000000  00000000  000420d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001319  00000000  00000000  00043998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cc5f  00000000  00000000  00044cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002453e  00000000  00000000  00071910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107d07  00000000  00000000  00095e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000794c  00000000  00000000  0019db58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001a54a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d228 	.word	0x0800d228

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800d228 	.word	0x0800d228

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <MX_ADC1_Init+0xa0>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a18:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a3a:	f002 fded 	bl	8003618 <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a44:	f001 f93c 	bl	8001cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a5a:	f002 ff4f 	bl	80038fc <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a64:	f001 f92c 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000200 	.word	0x20000200
 8000a74:	40012000 	.word	0x40012000

08000a78 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000a8c:	4a34      	ldr	r2, [pc, #208]	; (8000b60 <MX_ADC3_Init+0xe8>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000a92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a96:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000aba:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <MX_ADC3_Init+0xec>)
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ad8:	4820      	ldr	r0, [pc, #128]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000ada:	f002 fd9d 	bl	8003618 <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f001 f8ec 	bl	8001cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ae8:	230e      	movs	r3, #14
 8000aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000afa:	f002 feff 	bl	80038fc <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000b04:	f001 f8dc 	bl	8001cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b08:	2309      	movs	r3, #9
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000b16:	f002 fef1 	bl	80038fc <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000b20:	f001 f8ce 	bl	8001cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b24:	2303      	movs	r3, #3
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000b2e:	f002 fee5 	bl	80038fc <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000b38:	f001 f8c2 	bl	8001cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_ADC3_Init+0xe4>)
 8000b46:	f002 fed9 	bl	80038fc <HAL_ADC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000b50:	f001 f8b6 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000248 	.word	0x20000248
 8000b60:	40012200 	.word	0x40012200
 8000b64:	0f000001 	.word	0x0f000001

08000b68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a56      	ldr	r2, [pc, #344]	; (8000ce0 <HAL_ADC_MspInit+0x178>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12c      	bne.n	8000be4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a55      	ldr	r2, [pc, #340]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4846      	ldr	r0, [pc, #280]	; (8000ce8 <HAL_ADC_MspInit+0x180>)
 8000bce:	f003 fd1b 	bl	8004608 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	2012      	movs	r0, #18
 8000bd8:	f003 f9c5 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f003 f9de 	bl	8003f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000be2:	e079      	b.n	8000cd8 <HAL_ADC_MspInit+0x170>
  else if(adcHandle->Instance==ADC3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a40      	ldr	r2, [pc, #256]	; (8000cec <HAL_ADC_MspInit+0x184>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d174      	bne.n	8000cd8 <HAL_ADC_MspInit+0x170>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <HAL_ADC_MspInit+0x17c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Joystick_1_X_Pin|Joystick_1_Y_Pin;
 8000c36:	2318      	movs	r3, #24
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <HAL_ADC_MspInit+0x188>)
 8000c4a:	f003 fcdd 	bl	8004608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Joystick_2_X_Pin|Joystick_2_Y_Pin;
 8000c4e:	2309      	movs	r3, #9
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <HAL_ADC_MspInit+0x18c>)
 8000c62:	f003 fcd1 	bl	8004608 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c68:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_ADC_MspInit+0x194>)
 8000c6a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000cae:	f003 f991 	bl	8003fd4 <HAL_DMA_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8000cb8:	f001 f802 	bl	8001cc0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_ADC_MspInit+0x190>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2102      	movs	r1, #2
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f003 f94a 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd2:	2012      	movs	r0, #18
 8000cd4:	f003 f963 	bl	8003f9e <HAL_NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40012200 	.word	0x40012200
 8000cf0:	40021400 	.word	0x40021400
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	20000290 	.word	0x20000290
 8000cfc:	40026410 	.word	0x40026410

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2101      	movs	r1, #1
 8000d22:	2038      	movs	r0, #56	; 0x38
 8000d24:	f003 f91f 	bl	8003f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d28:	2038      	movs	r0, #56	; 0x38
 8000d2a:	f003 f938 	bl	8003f9e <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
     PB6   ------> S_TIM4_CH1
*/
void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4bab      	ldr	r3, [pc, #684]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4aaa      	ldr	r2, [pc, #680]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4ba8      	ldr	r3, [pc, #672]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4ba5      	ldr	r3, [pc, #660]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4aa4      	ldr	r2, [pc, #656]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4ba2      	ldr	r3, [pc, #648]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	4b9f      	ldr	r3, [pc, #636]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a9e      	ldr	r2, [pc, #632]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b9c      	ldr	r3, [pc, #624]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	4b99      	ldr	r3, [pc, #612]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a98      	ldr	r2, [pc, #608]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b96      	ldr	r3, [pc, #600]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a92      	ldr	r2, [pc, #584]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b90      	ldr	r3, [pc, #576]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a8c      	ldr	r2, [pc, #560]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b8a      	ldr	r3, [pc, #552]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a86      	ldr	r2, [pc, #536]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b84      	ldr	r3, [pc, #528]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfa:	4b81      	ldr	r3, [pc, #516]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a80      	ldr	r2, [pc, #512]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b7e      	ldr	r3, [pc, #504]	; (8001000 <MX_GPIO_Init+0x2c4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2168      	movs	r1, #104	; 0x68
 8000e16:	487b      	ldr	r0, [pc, #492]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e18:	f003 fdba 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e22:	4879      	ldr	r0, [pc, #484]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000e24:	f003 fdb4 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	4877      	ldr	r0, [pc, #476]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000e2e:	f003 fdaf 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e38:	4875      	ldr	r0, [pc, #468]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000e3a:	f003 fda9 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000e3e:	2314      	movs	r3, #20
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	486c      	ldr	r0, [pc, #432]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e52:	f003 fbd9 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000e56:	2368      	movs	r3, #104	; 0x68
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4865      	ldr	r0, [pc, #404]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000e6e:	f003 fbcb 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4862      	ldr	r0, [pc, #392]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000e88:	f003 fbbe 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e8c:	2332      	movs	r3, #50	; 0x32
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9c:	230b      	movs	r3, #11
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	485a      	ldr	r0, [pc, #360]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000ea8:	f003 fbae 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eac:	2386      	movs	r3, #134	; 0x86
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebc:	230b      	movs	r3, #11
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4853      	ldr	r0, [pc, #332]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000ec8:	f003 fb9e 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	484d      	ldr	r0, [pc, #308]	; (8001014 <MX_GPIO_Init+0x2d8>)
 8000ee0:	f003 fb92 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ee4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4842      	ldr	r0, [pc, #264]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000efe:	f003 fb83 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	483a      	ldr	r0, [pc, #232]	; (8001004 <MX_GPIO_Init+0x2c8>)
 8000f1a:	f003 fb75 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000f3c:	f003 fb64 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482a      	ldr	r0, [pc, #168]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000f5e:	f003 fb53 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4824      	ldr	r0, [pc, #144]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000f7a:	f003 fb45 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000f92:	f003 fb39 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000f96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_GPIO_Init+0x2d4>)
 8000fb0:	f003 fb2a 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc6:	230b      	movs	r3, #11
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_GPIO_Init+0x2d0>)
 8000fd2:	f003 fb19 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_BACKLIGHT_Pin;
 8000fd6:	2340      	movs	r3, #64	; 0x40
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_LED_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_GPIO_Init+0x2cc>)
 8000ff2:	f003 fb09 	bl	8004608 <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	; 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40021000 	.word	0x40021000
 8001008:	40020400 	.word	0x40020400
 800100c:	40021800 	.word	0x40021800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020000 	.word	0x40020000

08001018 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C1_Init+0x74>)
 8001054:	f003 fcb6 	bl	80049c4 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 fe2f 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C1_Init+0x74>)
 8001066:	f004 fabc 	bl	80055e2 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 fe26 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C1_Init+0x74>)
 8001078:	f004 fafe 	bl	8005678 <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fe1d 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002f0 	.word	0x200002f0
 8001090:	40005400 	.word	0x40005400
 8001094:	20404768 	.word	0x20404768

08001098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ae      	sub	sp, #184	; 0xb8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2290      	movs	r2, #144	; 0x90
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 fd44 	bl	8009b46 <memset>
  if(i2cHandle->Instance==I2C1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_I2C_MspInit+0xd4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d14c      	bne.n	8001162 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 f84e 	bl	8006178 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010e2:	f000 fded 	bl	8001cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001106:	2312      	movs	r3, #18
 8001108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001118:	2304      	movs	r3, #4
 800111a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001122:	4619      	mov	r1, r3
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <HAL_I2C_MspInit+0xdc>)
 8001126:	f003 fa6f 	bl	8004608 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 8001130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_I2C_MspInit+0xd8>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201f      	movs	r0, #31
 8001148:	f002 ff0d 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800114c:	201f      	movs	r0, #31
 800114e:	f002 ff26 	bl	8003f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2020      	movs	r0, #32
 8001158:	f002 ff05 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800115c:	2020      	movs	r0, #32
 800115e:	f002 ff1e 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	37b8      	adds	r7, #184	; 0xb8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800117c:	f3bf 8f4f 	dsb	sy
}
 8001180:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001182:	f3bf 8f6f 	isb	sy
}
 8001186:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <SCB_EnableICache+0x48>)
 800118a:	2200      	movs	r2, #0
 800118c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001190:	f3bf 8f4f 	dsb	sy
}
 8001194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001196:	f3bf 8f6f 	isb	sy
}
 800119a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <SCB_EnableICache+0x48>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <SCB_EnableICache+0x48>)
 80011a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011a8:	f3bf 8f4f 	dsb	sy
}
 80011ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ae:	f3bf 8f6f 	isb	sy
}
 80011b2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SCB_EnableDCache+0x84>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011d2:	f3bf 8f4f 	dsb	sy
}
 80011d6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <SCB_EnableDCache+0x84>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0b5b      	lsrs	r3, r3, #13
 80011e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011e8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011f2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	015a      	lsls	r2, r3, #5
 80011f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80011fc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001202:	4911      	ldr	r1, [pc, #68]	; (8001248 <SCB_EnableDCache+0x84>)
 8001204:	4313      	orrs	r3, r2
 8001206:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ef      	bne.n	80011f4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	60fa      	str	r2, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1e5      	bne.n	80011ea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800121e:	f3bf 8f4f 	dsb	sy
}
 8001222:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <SCB_EnableDCache+0x84>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SCB_EnableDCache+0x84>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001236:	f3bf 8f6f 	isb	sy
}
 800123a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <isTouchWithinRectangle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t isTouchWithinRectangle(uint16_t rSXPos, uint16_t rSYPos,uint16_t rEXPos, uint16_t rEYPos , uint16_t xPos, uint16_t yPos)
{
 800124c:	b490      	push	{r4, r7}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	4603      	mov	r3, r0
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]
 8001266:	4613      	mov	r3, r2
 8001268:	803b      	strh	r3, [r7, #0]
	if (xPos >= rSXPos && xPos <= rEXPos && yPos <= rEYPos && yPos >= rSYPos)
 800126a:	8a3a      	ldrh	r2, [r7, #16]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	429a      	cmp	r2, r3
 8001270:	d30d      	bcc.n	800128e <isTouchWithinRectangle+0x42>
 8001272:	8a3a      	ldrh	r2, [r7, #16]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	429a      	cmp	r2, r3
 8001278:	d809      	bhi.n	800128e <isTouchWithinRectangle+0x42>
 800127a:	8aba      	ldrh	r2, [r7, #20]
 800127c:	883b      	ldrh	r3, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d805      	bhi.n	800128e <isTouchWithinRectangle+0x42>
 8001282:	8aba      	ldrh	r2, [r7, #20]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d301      	bcc.n	800128e <isTouchWithinRectangle+0x42>
	{
		return 1;
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <isTouchWithinRectangle+0x44>
	} else
	{
		return 0;
 800128e:	2300      	movs	r3, #0
	}

}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bc90      	pop	{r4, r7}
 8001298:	4770      	bx	lr
	...

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b0ac      	sub	sp, #176	; 0xb0
 80012a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80012a2:	f7ff ff69 	bl	8001178 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80012a6:	f7ff ff8d 	bl	80011c4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012aa:	f002 f92b 	bl	8003504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ae:	f000 fc97 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b2:	f7ff fd43 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80012b6:	f7ff fd23 	bl	8000d00 <MX_DMA_Init>
  MX_SPI5_Init();
 80012ba:	f000 fd4f 	bl	8001d5c <MX_SPI5_Init>
  MX_TIM1_Init();
 80012be:	f000 ff07 	bl	80020d0 <MX_TIM1_Init>
  MX_RNG_Init();
 80012c2:	f000 fd03 	bl	8001ccc <MX_RNG_Init>
  MX_I2C1_Init();
 80012c6:	f7ff fea7 	bl	8001018 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012ca:	f000 ff55 	bl	8002178 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012ce:	f7ff fb81 	bl	80009d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012d2:	f000 ff9f 	bl	8002214 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80012d6:	f001 f8c1 	bl	800245c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 80012da:	f7ff fbcd 	bl	8000a78 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80012de:	f001 fc4d 	bl	8002b7c <ILI9341_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  	/* USER CODE BEGIN WHILE */

	int displayScreen = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int mapID = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int selectNumberPlayer[2] = {0,0};
 80012ee:	2300      	movs	r3, #0
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012f2:	2300      	movs	r3, #0
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
	int numberPositionX[2] = {100,170};
 80012f6:	4acc      	ldr	r2, [pc, #816]	; (8001628 <main+0x38c>)
 80012f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001300:	e883 0003 	stmia.w	r3, {r0, r1}
	int selectPlayer[5] = {0,0,0,0,0};
 8001304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
	int playerPositionX[5] = {50,97,144,191,238};
 8001314:	4bc5      	ldr	r3, [pc, #788]	; (800162c <main+0x390>)
 8001316:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	6023      	str	r3, [r4, #0]
	int selectMap[3] = {0,0,0};
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
	int mapPositionX[3] = {95,142,189};
 8001330:	4abf      	ldr	r2, [pc, #764]	; (8001630 <main+0x394>)
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	ca07      	ldmia	r2, {r0, r1, r2}
 8001338:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int checkPlay = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	const uint8_t SCREEN_ROTATION = SCREEN_HORIZONTAL_1;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67


	uint16_t xPos = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t yPos = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001354:	2001      	movs	r0, #1
 8001356:	f001 fbb3 	bl	8002ac0 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(WHITE);
 800135a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800135e:	f001 fdb9 	bl	8002ed4 <ILI9341_Fill_Screen>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(displayScreen==0){
 8001362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8357 	bne.w	8001a1a <main+0x77e>
			ILI9341_Fill_Screen(WHITE);
 800136c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001370:	f001 fdb0 	bl	8002ed4 <ILI9341_Fill_Screen>
			ILI9341_Draw_Text("BOMBER MAN", 75, 10, BLACK, 3, WHITE);
 8001374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	2303      	movs	r3, #3
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	220a      	movs	r2, #10
 8001382:	214b      	movs	r1, #75	; 0x4b
 8001384:	48ab      	ldr	r0, [pc, #684]	; (8001634 <main+0x398>)
 8001386:	f001 fa9b 	bl	80028c0 <ILI9341_Draw_Text>
			//Draw background
			ILI9341_Draw_Filled_Rectangle_Coord(10, 38, 310, 78, CYAN);
 800138a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	234e      	movs	r3, #78	; 0x4e
 8001392:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001396:	2126      	movs	r1, #38	; 0x26
 8001398:	200a      	movs	r0, #10
 800139a:	f001 f999 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(10, 88, 310, 141, YELLOW);
 800139e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	238d      	movs	r3, #141	; 0x8d
 80013a6:	f44f 729b 	mov.w	r2, #310	; 0x136
 80013aa:	2158      	movs	r1, #88	; 0x58
 80013ac:	200a      	movs	r0, #10
 80013ae:	f001 f98f 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(10, 148, 310, 205, GREEN);
 80013b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	23cd      	movs	r3, #205	; 0xcd
 80013ba:	f44f 729b 	mov.w	r2, #310	; 0x136
 80013be:	2194      	movs	r1, #148	; 0x94
 80013c0:	200a      	movs	r0, #10
 80013c2:	f001 f985 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			//Choose number of player box
			ILI9341_Draw_Text("Choose Number Of Player", 96, 42, BLACK, 1, CYAN);
 80013c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2300      	movs	r3, #0
 80013d2:	222a      	movs	r2, #42	; 0x2a
 80013d4:	2160      	movs	r1, #96	; 0x60
 80013d6:	4898      	ldr	r0, [pc, #608]	; (8001638 <main+0x39c>)
 80013d8:	f001 fa72 	bl	80028c0 <ILI9341_Draw_Text>
		//			ILI9341_Draw_Hollow_Rectangle_Coord(100, 55, 160, 72, BLUE);
		//			ILI9341_Draw_Hollow_Rectangle_Coord(170, 55, 230, 72, BLUE);
		//			ILI9341_Draw_Text("1 Player", 108, 60, BLUE, 1, CYAN);
		//			ILI9341_Draw_Text("2 Player", 177, 60, BLUE, 1, CYAN);
			//Choose player box (from 5 player) (size: 32*32)
			ILI9341_Draw_Text("Choose Player", 125, 90, BLACK, 1, YELLOW);
 80013dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	225a      	movs	r2, #90	; 0x5a
 80013ea:	217d      	movs	r1, #125	; 0x7d
 80013ec:	4893      	ldr	r0, [pc, #588]	; (800163c <main+0x3a0>)
 80013ee:	f001 fa67 	bl	80028c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Filled_Rectangle_Coord(50, 102, 82, 134, RED);
 80013f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2386      	movs	r3, #134	; 0x86
 80013fa:	2252      	movs	r2, #82	; 0x52
 80013fc:	2166      	movs	r1, #102	; 0x66
 80013fe:	2032      	movs	r0, #50	; 0x32
 8001400:	f001 f966 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(97, 102, 129, 134, RED);
 8001404:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2386      	movs	r3, #134	; 0x86
 800140c:	2281      	movs	r2, #129	; 0x81
 800140e:	2166      	movs	r1, #102	; 0x66
 8001410:	2061      	movs	r0, #97	; 0x61
 8001412:	f001 f95d 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(144, 102, 176, 134, RED);
 8001416:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2386      	movs	r3, #134	; 0x86
 800141e:	22b0      	movs	r2, #176	; 0xb0
 8001420:	2166      	movs	r1, #102	; 0x66
 8001422:	2090      	movs	r0, #144	; 0x90
 8001424:	f001 f954 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(191, 102, 223, 134, RED);
 8001428:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2386      	movs	r3, #134	; 0x86
 8001430:	22df      	movs	r2, #223	; 0xdf
 8001432:	2166      	movs	r1, #102	; 0x66
 8001434:	20bf      	movs	r0, #191	; 0xbf
 8001436:	f001 f94b 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(238, 102, 270, 134, RED);
 800143a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2386      	movs	r3, #134	; 0x86
 8001442:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001446:	2166      	movs	r1, #102	; 0x66
 8001448:	20ee      	movs	r0, #238	; 0xee
 800144a:	f001 f941 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			//Choose map box (from 3 player) (size: 32*32)
			ILI9341_Draw_Text("Choose Map", 135, 152, BLACK, 1, GREEN);
 800144e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2301      	movs	r3, #1
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2298      	movs	r2, #152	; 0x98
 800145c:	2187      	movs	r1, #135	; 0x87
 800145e:	4878      	ldr	r0, [pc, #480]	; (8001640 <main+0x3a4>)
 8001460:	f001 fa2e 	bl	80028c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Filled_Rectangle_Coord(95, 165, 127, 197, RED);
 8001464:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	23c5      	movs	r3, #197	; 0xc5
 800146c:	227f      	movs	r2, #127	; 0x7f
 800146e:	21a5      	movs	r1, #165	; 0xa5
 8001470:	205f      	movs	r0, #95	; 0x5f
 8001472:	f001 f92d 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(142, 165, 174, 197, RED);
 8001476:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	23c5      	movs	r3, #197	; 0xc5
 800147e:	22ae      	movs	r2, #174	; 0xae
 8001480:	21a5      	movs	r1, #165	; 0xa5
 8001482:	208e      	movs	r0, #142	; 0x8e
 8001484:	f001 f924 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(189, 165, 221, 197, RED);
 8001488:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	23c5      	movs	r3, #197	; 0xc5
 8001490:	22dd      	movs	r2, #221	; 0xdd
 8001492:	21a5      	movs	r1, #165	; 0xa5
 8001494:	20bd      	movs	r0, #189	; 0xbd
 8001496:	f001 f91b 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			//Play button
			ILI9341_Draw_Filled_Rectangle_Coord(140, 215, 185, 230, PINK);
 800149a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	23e6      	movs	r3, #230	; 0xe6
 80014a2:	22b9      	movs	r2, #185	; 0xb9
 80014a4:	21d7      	movs	r1, #215	; 0xd7
 80014a6:	208c      	movs	r0, #140	; 0x8c
 80014a8:	f001 f912 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Text("PLAY", 152, 218, WHITE, 1, PINK);
 80014ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ba:	22da      	movs	r2, #218	; 0xda
 80014bc:	2198      	movs	r1, #152	; 0x98
 80014be:	4861      	ldr	r0, [pc, #388]	; (8001644 <main+0x3a8>)
 80014c0:	f001 f9fe 	bl	80028c0 <ILI9341_Draw_Text>
			//Draw Players
			Image image = playerIcon_1_32;
 80014c4:	4a60      	ldr	r2, [pc, #384]	; (8001648 <main+0x3ac>)
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80014cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			drawImageAtPoint(image, SCREEN_HORIZONTAL_1);
 80014d0:	2301      	movs	r3, #1
 80014d2:	f107 0208 	add.w	r2, r7, #8
 80014d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d8:	f007 fae2 	bl	8008aa0 <drawImageAtPoint>
			//Check when user choose
			if (TP_Touchpad_Pressed())
 80014dc:	f002 f802 	bl	80034e4 <TP_Touchpad_Pressed>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01f      	beq.n	8001526 <main+0x28a>
			{
				uint16_t position_array[2];
				if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 ff39 	bl	8003360 <TP_Read_Coordinates>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d118      	bne.n	8001526 <main+0x28a>
				{
					if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 80014f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <main+0x272>
					{
						xPos = position_array[1];
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
						yPos = SCREEN_HEIGHT - position_array[0];
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001508:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800150c:	e00b      	b.n	8001526 <main+0x28a>
					} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 800150e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001512:	2b03      	cmp	r3, #3
 8001514:	d107      	bne.n	8001526 <main+0x28a>
					{
						xPos = SCREEN_WIDTH - position_array[1];
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800151c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
						yPos = position_array[0];
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
					}
				}

			}
			//Number Box
			for(int i=0;i <2; i++){
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800152c:	e048      	b.n	80015c0 <main+0x324>
				if (isTouchWithinRectangle(numberPositionX[i], 55, numberPositionX[i]+60, 72, xPos, yPos)){
 800152e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	33a8      	adds	r3, #168	; 0xa8
 8001536:	443b      	add	r3, r7
 8001538:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800153c:	b298      	uxth	r0, r3
 800153e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	33a8      	adds	r3, #168	; 0xa8
 8001546:	443b      	add	r3, r7
 8001548:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800154c:	b29b      	uxth	r3, r3
 800154e:	333c      	adds	r3, #60	; 0x3c
 8001550:	b29a      	uxth	r2, r3
 8001552:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2348      	movs	r3, #72	; 0x48
 8001560:	2137      	movs	r1, #55	; 0x37
 8001562:	f7ff fe73 	bl	800124c <isTouchWithinRectangle>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d024      	beq.n	80015b6 <main+0x31a>
					selectNumberPlayer[i]=1;
 800156c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	33a8      	adds	r3, #168	; 0xa8
 8001574:	443b      	add	r3, r7
 8001576:	2201      	movs	r2, #1
 8001578:	f843 2c4c 	str.w	r2, [r3, #-76]
					for(int j=0;j <2; j++){
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001582:	e014      	b.n	80015ae <main+0x312>
						if(j==i)
 8001584:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800158c:	429a      	cmp	r2, r3
 800158e:	d008      	beq.n	80015a2 <main+0x306>
							continue;
						selectNumberPlayer[j]=0;
 8001590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	33a8      	adds	r3, #168	; 0xa8
 8001598:	443b      	add	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	f843 2c4c 	str.w	r2, [r3, #-76]
 80015a0:	e000      	b.n	80015a4 <main+0x308>
							continue;
 80015a2:	bf00      	nop
					for(int j=0;j <2; j++){
 80015a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	dde6      	ble.n	8001584 <main+0x2e8>
			for(int i=0;i <2; i++){
 80015b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015ba:	3301      	adds	r3, #1
 80015bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	ddb2      	ble.n	800152e <main+0x292>
					}
				}
			}
			//Player Box
			for(int i=0;i <5; i++){
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ce:	e05b      	b.n	8001688 <main+0x3ec>
				if (isTouchWithinRectangle(playerPositionX[i], 102, playerPositionX[i]+32, 102+32, xPos, yPos)){
 80015d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	33a8      	adds	r3, #168	; 0xa8
 80015d8:	443b      	add	r3, r7
 80015da:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80015de:	b298      	uxth	r0, r3
 80015e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	33a8      	adds	r3, #168	; 0xa8
 80015e8:	443b      	add	r3, r7
 80015ea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3320      	adds	r3, #32
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2386      	movs	r3, #134	; 0x86
 8001602:	2166      	movs	r1, #102	; 0x66
 8001604:	f7ff fe22 	bl	800124c <isTouchWithinRectangle>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d037      	beq.n	800167e <main+0x3e2>
					selectPlayer[i]=1;
 800160e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	33a8      	adds	r3, #168	; 0xa8
 8001616:	443b      	add	r3, r7
 8001618:	2201      	movs	r2, #1
 800161a:	f843 2c68 	str.w	r2, [r3, #-104]
					for(int j=0;j <5; j++){
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001624:	e027      	b.n	8001676 <main+0x3da>
 8001626:	bf00      	nop
 8001628:	0800d2c0 	.word	0x0800d2c0
 800162c:	0800d2c8 	.word	0x0800d2c8
 8001630:	0800d2dc 	.word	0x0800d2dc
 8001634:	0800d240 	.word	0x0800d240
 8001638:	0800d24c 	.word	0x0800d24c
 800163c:	0800d27c 	.word	0x0800d27c
 8001640:	0800d28c 	.word	0x0800d28c
 8001644:	0800d298 	.word	0x0800d298
 8001648:	20000010 	.word	0x20000010
						if(j==i)
 800164c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001654:	429a      	cmp	r2, r3
 8001656:	d008      	beq.n	800166a <main+0x3ce>
							continue;
						selectPlayer[j]=0;
 8001658:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	33a8      	adds	r3, #168	; 0xa8
 8001660:	443b      	add	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	f843 2c68 	str.w	r2, [r3, #-104]
 8001668:	e000      	b.n	800166c <main+0x3d0>
							continue;
 800166a:	bf00      	nop
					for(int j=0;j <5; j++){
 800166c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001670:	3301      	adds	r3, #1
 8001672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800167a:	2b04      	cmp	r3, #4
 800167c:	dde6      	ble.n	800164c <main+0x3b0>
			for(int i=0;i <5; i++){
 800167e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001682:	3301      	adds	r3, #1
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800168c:	2b04      	cmp	r3, #4
 800168e:	dd9f      	ble.n	80015d0 <main+0x334>
					}
				}
			}
			//Map Box
			for(int i=0;i <3; i++){
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001696:	e048      	b.n	800172a <main+0x48e>
				if (isTouchWithinRectangle(mapPositionX[i], 165, mapPositionX[i]+32, 165+32, xPos, yPos)){
 8001698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	33a8      	adds	r3, #168	; 0xa8
 80016a0:	443b      	add	r3, r7
 80016a2:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80016a6:	b298      	uxth	r0, r3
 80016a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	33a8      	adds	r3, #168	; 0xa8
 80016b0:	443b      	add	r3, r7
 80016b2:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3320      	adds	r3, #32
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	23c5      	movs	r3, #197	; 0xc5
 80016ca:	21a5      	movs	r1, #165	; 0xa5
 80016cc:	f7ff fdbe 	bl	800124c <isTouchWithinRectangle>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <main+0x484>
					selectMap[i]=1;
 80016d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	33a8      	adds	r3, #168	; 0xa8
 80016de:	443b      	add	r3, r7
 80016e0:	2201      	movs	r2, #1
 80016e2:	f843 2c88 	str.w	r2, [r3, #-136]
					for(int j=0;j <3; j++){
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016ec:	e014      	b.n	8001718 <main+0x47c>
						if(j==i)
 80016ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80016f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d008      	beq.n	800170c <main+0x470>
							continue;
						selectMap[j]=0;
 80016fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	33a8      	adds	r3, #168	; 0xa8
 8001702:	443b      	add	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	f843 2c88 	str.w	r2, [r3, #-136]
 800170a:	e000      	b.n	800170e <main+0x472>
							continue;
 800170c:	bf00      	nop
					for(int j=0;j <3; j++){
 800170e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001712:	3301      	adds	r3, #1
 8001714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800171c:	2b02      	cmp	r3, #2
 800171e:	dde6      	ble.n	80016ee <main+0x452>
			for(int i=0;i <3; i++){
 8001720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001724:	3301      	adds	r3, #1
 8001726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800172a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800172e:	2b02      	cmp	r3, #2
 8001730:	ddb2      	ble.n	8001698 <main+0x3fc>
					}
				}
			}
			//Check Button press
			if (isTouchWithinRectangle(140, 215, 140+45, 215+15, xPos, yPos)){
 8001732:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	23e6      	movs	r3, #230	; 0xe6
 8001740:	22b9      	movs	r2, #185	; 0xb9
 8001742:	21d7      	movs	r1, #215	; 0xd7
 8001744:	208c      	movs	r0, #140	; 0x8c
 8001746:	f7ff fd81 	bl	800124c <isTouchWithinRectangle>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d04f      	beq.n	80017f0 <main+0x554>
				for(int i=0;i <2; i++){
 8001750:	2300      	movs	r3, #0
 8001752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001754:	e010      	b.n	8001778 <main+0x4dc>
					if(selectNumberPlayer[i]==1){
 8001756:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	33a8      	adds	r3, #168	; 0xa8
 800175c:	443b      	add	r3, r7
 800175e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <main+0x4d6>
						checkPlay++;
 8001766:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800176a:	3301      	adds	r3, #1
 800176c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
						break;
 8001770:	e005      	b.n	800177e <main+0x4e2>
				for(int i=0;i <2; i++){
 8001772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001774:	3301      	adds	r3, #1
 8001776:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800177a:	2b01      	cmp	r3, #1
 800177c:	ddeb      	ble.n	8001756 <main+0x4ba>
					}

				}
				for(int i=0;i <5; i++){
 800177e:	2300      	movs	r3, #0
 8001780:	67bb      	str	r3, [r7, #120]	; 0x78
 8001782:	e010      	b.n	80017a6 <main+0x50a>
					if(selectPlayer[i]==1){
 8001784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	33a8      	adds	r3, #168	; 0xa8
 800178a:	443b      	add	r3, r7
 800178c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <main+0x504>
						checkPlay++;
 8001794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001798:	3301      	adds	r3, #1
 800179a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
						break;
 800179e:	e005      	b.n	80017ac <main+0x510>
				for(int i=0;i <5; i++){
 80017a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a2:	3301      	adds	r3, #1
 80017a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80017a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	ddeb      	ble.n	8001784 <main+0x4e8>
					}
				}
				for(int i=0;i <3; i++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	677b      	str	r3, [r7, #116]	; 0x74
 80017b0:	e010      	b.n	80017d4 <main+0x538>
					if(selectMap[i]==1){
 80017b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	33a8      	adds	r3, #168	; 0xa8
 80017b8:	443b      	add	r3, r7
 80017ba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d105      	bne.n	80017ce <main+0x532>
						checkPlay++;
 80017c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c6:	3301      	adds	r3, #1
 80017c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
						break;
 80017cc:	e005      	b.n	80017da <main+0x53e>
				for(int i=0;i <3; i++){
 80017ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d0:	3301      	adds	r3, #1
 80017d2:	677b      	str	r3, [r7, #116]	; 0x74
 80017d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	ddeb      	ble.n	80017b2 <main+0x516>
					}
				}
				if(checkPlay==3)
 80017da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d103      	bne.n	80017ea <main+0x54e>
					displayScreen=1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80017e8:	e002      	b.n	80017f0 <main+0x554>
				else
					checkPlay=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}


			//Display when user choose
			for(int i=0;i <2; i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	673b      	str	r3, [r7, #112]	; 0x70
 80017f4:	e082      	b.n	80018fc <main+0x660>
				if(selectNumberPlayer[i]){
 80017f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	33a8      	adds	r3, #168	; 0xa8
 80017fc:	443b      	add	r3, r7
 80017fe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d030      	beq.n	8001868 <main+0x5cc>
					ILI9341_Draw_Filled_Rectangle_Coord(numberPositionX[i], 55, numberPositionX[i]+60 , 72, BLUE);
 8001806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	33a8      	adds	r3, #168	; 0xa8
 800180c:	443b      	add	r3, r7
 800180e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001812:	b298      	uxth	r0, r3
 8001814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	33a8      	adds	r3, #168	; 0xa8
 800181a:	443b      	add	r3, r7
 800181c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001820:	b29b      	uxth	r3, r3
 8001822:	333c      	adds	r3, #60	; 0x3c
 8001824:	b29a      	uxth	r2, r3
 8001826:	231f      	movs	r3, #31
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2348      	movs	r3, #72	; 0x48
 800182c:	2137      	movs	r1, #55	; 0x37
 800182e:	f000 ff4f 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
					if(i==0)
 8001832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10b      	bne.n	8001850 <main+0x5b4>
						ILI9341_Draw_Text("1 Player", 108, 60, WHITE, 1, BLUE);
 8001838:	231f      	movs	r3, #31
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2301      	movs	r3, #1
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001844:	223c      	movs	r2, #60	; 0x3c
 8001846:	216c      	movs	r1, #108	; 0x6c
 8001848:	48b5      	ldr	r0, [pc, #724]	; (8001b20 <main+0x884>)
 800184a:	f001 f839 	bl	80028c0 <ILI9341_Draw_Text>
 800184e:	e052      	b.n	80018f6 <main+0x65a>
					else
						ILI9341_Draw_Text("2 Player", 177, 60, WHITE, 1, BLUE);
 8001850:	231f      	movs	r3, #31
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2301      	movs	r3, #1
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800185c:	223c      	movs	r2, #60	; 0x3c
 800185e:	21b1      	movs	r1, #177	; 0xb1
 8001860:	48b0      	ldr	r0, [pc, #704]	; (8001b24 <main+0x888>)
 8001862:	f001 f82d 	bl	80028c0 <ILI9341_Draw_Text>
 8001866:	e046      	b.n	80018f6 <main+0x65a>
				}
				else{
					ILI9341_Draw_Filled_Rectangle_Coord(numberPositionX[i], 55, numberPositionX[i]+60 , 72, CYAN);
 8001868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	33a8      	adds	r3, #168	; 0xa8
 800186e:	443b      	add	r3, r7
 8001870:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001874:	b298      	uxth	r0, r3
 8001876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	33a8      	adds	r3, #168	; 0xa8
 800187c:	443b      	add	r3, r7
 800187e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001882:	b29b      	uxth	r3, r3
 8001884:	333c      	adds	r3, #60	; 0x3c
 8001886:	b29a      	uxth	r2, r3
 8001888:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2348      	movs	r3, #72	; 0x48
 8001890:	2137      	movs	r1, #55	; 0x37
 8001892:	f000 ff1d 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
					ILI9341_Draw_Hollow_Rectangle_Coord(numberPositionX[i], 55, numberPositionX[i]+60 , 72, BLUE);
 8001896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	33a8      	adds	r3, #168	; 0xa8
 800189c:	443b      	add	r3, r7
 800189e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80018a2:	b298      	uxth	r0, r3
 80018a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	33a8      	adds	r3, #168	; 0xa8
 80018aa:	443b      	add	r3, r7
 80018ac:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	333c      	adds	r3, #60	; 0x3c
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	231f      	movs	r3, #31
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2348      	movs	r3, #72	; 0x48
 80018bc:	2137      	movs	r1, #55	; 0x37
 80018be:	f000 fe86 	bl	80025ce <ILI9341_Draw_Hollow_Rectangle_Coord>
					if(i==0)
 80018c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10b      	bne.n	80018e0 <main+0x644>
						ILI9341_Draw_Text("1 Player", 108, 60, BLUE, 1, CYAN);
 80018c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	231f      	movs	r3, #31
 80018d4:	223c      	movs	r2, #60	; 0x3c
 80018d6:	216c      	movs	r1, #108	; 0x6c
 80018d8:	4891      	ldr	r0, [pc, #580]	; (8001b20 <main+0x884>)
 80018da:	f000 fff1 	bl	80028c0 <ILI9341_Draw_Text>
 80018de:	e00a      	b.n	80018f6 <main+0x65a>
					else
						ILI9341_Draw_Text("2 Player", 177, 60, BLUE, 1, CYAN);
 80018e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	231f      	movs	r3, #31
 80018ec:	223c      	movs	r2, #60	; 0x3c
 80018ee:	21b1      	movs	r1, #177	; 0xb1
 80018f0:	488c      	ldr	r0, [pc, #560]	; (8001b24 <main+0x888>)
 80018f2:	f000 ffe5 	bl	80028c0 <ILI9341_Draw_Text>
			for(int i=0;i <2; i++){
 80018f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f8:	3301      	adds	r3, #1
 80018fa:	673b      	str	r3, [r7, #112]	; 0x70
 80018fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018fe:	2b01      	cmp	r3, #1
 8001900:	f77f af79 	ble.w	80017f6 <main+0x55a>
				}
			}
			for(int i=0;i <5; i++){
 8001904:	2300      	movs	r3, #0
 8001906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001908:	e03d      	b.n	8001986 <main+0x6ea>
				if(selectPlayer[i])
 800190a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	33a8      	adds	r3, #168	; 0xa8
 8001910:	443b      	add	r3, r7
 8001912:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d019      	beq.n	800194e <main+0x6b2>
					ILI9341_Draw_Hollow_Rectangle_Coord(playerPositionX[i]-2, 102-2, playerPositionX[i]+32+2 , 102+32+2, RED);
 800191a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	33a8      	adds	r3, #168	; 0xa8
 8001920:	443b      	add	r3, r7
 8001922:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b02      	subs	r3, #2
 800192a:	b298      	uxth	r0, r3
 800192c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	33a8      	adds	r3, #168	; 0xa8
 8001932:	443b      	add	r3, r7
 8001934:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001938:	b29b      	uxth	r3, r3
 800193a:	3322      	adds	r3, #34	; 0x22
 800193c:	b29a      	uxth	r2, r3
 800193e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2388      	movs	r3, #136	; 0x88
 8001946:	2164      	movs	r1, #100	; 0x64
 8001948:	f000 fe41 	bl	80025ce <ILI9341_Draw_Hollow_Rectangle_Coord>
 800194c:	e018      	b.n	8001980 <main+0x6e4>
				else
					ILI9341_Draw_Hollow_Rectangle_Coord(playerPositionX[i]-2, 102-2, playerPositionX[i]+32+2 , 102+32+2, YELLOW);
 800194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	33a8      	adds	r3, #168	; 0xa8
 8001954:	443b      	add	r3, r7
 8001956:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b02      	subs	r3, #2
 800195e:	b298      	uxth	r0, r3
 8001960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	33a8      	adds	r3, #168	; 0xa8
 8001966:	443b      	add	r3, r7
 8001968:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800196c:	b29b      	uxth	r3, r3
 800196e:	3322      	adds	r3, #34	; 0x22
 8001970:	b29a      	uxth	r2, r3
 8001972:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2388      	movs	r3, #136	; 0x88
 800197a:	2164      	movs	r1, #100	; 0x64
 800197c:	f000 fe27 	bl	80025ce <ILI9341_Draw_Hollow_Rectangle_Coord>
			for(int i=0;i <5; i++){
 8001980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001982:	3301      	adds	r3, #1
 8001984:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001988:	2b04      	cmp	r3, #4
 800198a:	ddbe      	ble.n	800190a <main+0x66e>
			}
			for(int i=0;i <3; i++){
 800198c:	2300      	movs	r3, #0
 800198e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001990:	e03d      	b.n	8001a0e <main+0x772>
				if(selectMap[i])
 8001992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	33a8      	adds	r3, #168	; 0xa8
 8001998:	443b      	add	r3, r7
 800199a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d019      	beq.n	80019d6 <main+0x73a>
					ILI9341_Draw_Hollow_Rectangle_Coord(mapPositionX[i]-2, 165-2, mapPositionX[i]+32+2 , 165+32+2, RED);
 80019a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	33a8      	adds	r3, #168	; 0xa8
 80019a8:	443b      	add	r3, r7
 80019aa:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b02      	subs	r3, #2
 80019b2:	b298      	uxth	r0, r3
 80019b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	33a8      	adds	r3, #168	; 0xa8
 80019ba:	443b      	add	r3, r7
 80019bc:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3322      	adds	r3, #34	; 0x22
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	23c7      	movs	r3, #199	; 0xc7
 80019ce:	21a3      	movs	r1, #163	; 0xa3
 80019d0:	f000 fdfd 	bl	80025ce <ILI9341_Draw_Hollow_Rectangle_Coord>
 80019d4:	e018      	b.n	8001a08 <main+0x76c>
				else
					ILI9341_Draw_Hollow_Rectangle_Coord(mapPositionX[i]-2, 165-2, mapPositionX[i]+32+2 , 165+32+2, GREEN);
 80019d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	33a8      	adds	r3, #168	; 0xa8
 80019dc:	443b      	add	r3, r7
 80019de:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b02      	subs	r3, #2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	33a8      	adds	r3, #168	; 0xa8
 80019ee:	443b      	add	r3, r7
 80019f0:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3322      	adds	r3, #34	; 0x22
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	23c7      	movs	r3, #199	; 0xc7
 8001a02:	21a3      	movs	r1, #163	; 0xa3
 8001a04:	f000 fde3 	bl	80025ce <ILI9341_Draw_Hollow_Rectangle_Coord>
			for(int i=0;i <3; i++){
 8001a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	ddbe      	ble.n	8001992 <main+0x6f6>
			}
			HAL_Delay(200);
 8001a14:	20c8      	movs	r0, #200	; 0xc8
 8001a16:	f001 fddb 	bl	80035d0 <HAL_Delay>
		}
		if(displayScreen==1){
 8001a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d102      	bne.n	8001a28 <main+0x78c>
			ILI9341_Fill_Screen(BLACK);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f001 fa56 	bl	8002ed4 <ILI9341_Fill_Screen>
		}
		if(displayScreen==2){
 8001a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f47f ac98 	bne.w	8001362 <main+0xc6>
			ILI9341_Fill_Screen(WHITE);
 8001a32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a36:	f001 fa4d 	bl	8002ed4 <ILI9341_Fill_Screen>
			ILI9341_Draw_Filled_Rectangle_Coord(100, 25, 212 , 137, RED);
 8001a3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2389      	movs	r3, #137	; 0x89
 8001a42:	22d4      	movs	r2, #212	; 0xd4
 8001a44:	2119      	movs	r1, #25
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f000 fe42 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(90, 142, 222 , 170, YELLOW);
 8001a4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	23aa      	movs	r3, #170	; 0xaa
 8001a54:	22de      	movs	r2, #222	; 0xde
 8001a56:	218e      	movs	r1, #142	; 0x8e
 8001a58:	205a      	movs	r0, #90	; 0x5a
 8001a5a:	f000 fe39 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Text("WINNER", 104, 143, BLUE, 3, YELLOW);
 8001a5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2303      	movs	r3, #3
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	231f      	movs	r3, #31
 8001a6a:	228f      	movs	r2, #143	; 0x8f
 8001a6c:	2168      	movs	r1, #104	; 0x68
 8001a6e:	482e      	ldr	r0, [pc, #184]	; (8001b28 <main+0x88c>)
 8001a70:	f000 ff26 	bl	80028c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Filled_Rectangle_Coord(55, 175, 150 , 200, GREEN);
 8001a74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	23c8      	movs	r3, #200	; 0xc8
 8001a7c:	2296      	movs	r2, #150	; 0x96
 8001a7e:	21af      	movs	r1, #175	; 0xaf
 8001a80:	2037      	movs	r0, #55	; 0x37
 8001a82:	f000 fe25 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Text("<REPLAY", 60, 179, BLACK, 2, GREEN);
 8001a86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	22b3      	movs	r2, #179	; 0xb3
 8001a94:	213c      	movs	r1, #60	; 0x3c
 8001a96:	4825      	ldr	r0, [pc, #148]	; (8001b2c <main+0x890>)
 8001a98:	f000 ff12 	bl	80028c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Filled_Rectangle_Coord(155, 175, 250 , 200, CYAN);
 8001a9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	23c8      	movs	r3, #200	; 0xc8
 8001aa4:	22fa      	movs	r2, #250	; 0xfa
 8001aa6:	21af      	movs	r1, #175	; 0xaf
 8001aa8:	209b      	movs	r0, #155	; 0x9b
 8001aaa:	f000 fe11 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Text("NEXT>", 175, 179, BLACK, 2, CYAN);
 8001aae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	22b3      	movs	r2, #179	; 0xb3
 8001abc:	21af      	movs	r1, #175	; 0xaf
 8001abe:	481c      	ldr	r0, [pc, #112]	; (8001b30 <main+0x894>)
 8001ac0:	f000 fefe 	bl	80028c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Filled_Rectangle_Coord(108, 205, 203 , 230, ORANGE);
 8001ac4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	23e6      	movs	r3, #230	; 0xe6
 8001acc:	22cb      	movs	r2, #203	; 0xcb
 8001ace:	21cd      	movs	r1, #205	; 0xcd
 8001ad0:	206c      	movs	r0, #108	; 0x6c
 8001ad2:	f000 fdfd 	bl	80026d0 <ILI9341_Draw_Filled_Rectangle_Coord>
			ILI9341_Draw_Text("EXIT", 133, 209, RED, 2, ORANGE);
 8001ad6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ae4:	22d1      	movs	r2, #209	; 0xd1
 8001ae6:	2185      	movs	r1, #133	; 0x85
 8001ae8:	4812      	ldr	r0, [pc, #72]	; (8001b34 <main+0x898>)
 8001aea:	f000 fee9 	bl	80028c0 <ILI9341_Draw_Text>
			if (TP_Touchpad_Pressed())
 8001aee:	f001 fcf9 	bl	80034e4 <TP_Touchpad_Pressed>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d02b      	beq.n	8001b50 <main+0x8b4>
					{
						uint16_t position_array[2];
						if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fc30 	bl	8003360 <TP_Read_Coordinates>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d124      	bne.n	8001b50 <main+0x8b4>
						{
							if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001b06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d114      	bne.n	8001b38 <main+0x89c>
							{
								xPos = position_array[1];
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
								yPos = SCREEN_HEIGHT - position_array[0];
 8001b14:	883b      	ldrh	r3, [r7, #0]
 8001b16:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001b1a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8001b1e:	e017      	b.n	8001b50 <main+0x8b4>
 8001b20:	0800d264 	.word	0x0800d264
 8001b24:	0800d270 	.word	0x0800d270
 8001b28:	0800d2a0 	.word	0x0800d2a0
 8001b2c:	0800d2a8 	.word	0x0800d2a8
 8001b30:	0800d2b0 	.word	0x0800d2b0
 8001b34:	0800d2b8 	.word	0x0800d2b8
							} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001b38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d107      	bne.n	8001b50 <main+0x8b4>
							{
								xPos = SCREEN_WIDTH - position_array[1];
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001b46:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
								yPos = position_array[0];
 8001b4a:	883b      	ldrh	r3, [r7, #0]
 8001b4c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
							}
						}

					}
			if (isTouchWithinRectangle(55, 175, 150, 200, xPos, yPos)){
 8001b50:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	23c8      	movs	r3, #200	; 0xc8
 8001b5e:	2296      	movs	r2, #150	; 0x96
 8001b60:	21af      	movs	r1, #175	; 0xaf
 8001b62:	2037      	movs	r0, #55	; 0x37
 8001b64:	f7ff fb72 	bl	800124c <isTouchWithinRectangle>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <main+0x8de>
				displayScreen = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				mapID = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}
			if (isTouchWithinRectangle(155, 175, 250, 200, xPos, yPos)){
 8001b7a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	23c8      	movs	r3, #200	; 0xc8
 8001b88:	22fa      	movs	r2, #250	; 0xfa
 8001b8a:	21af      	movs	r1, #175	; 0xaf
 8001b8c:	209b      	movs	r0, #155	; 0x9b
 8001b8e:	f7ff fb5d 	bl	800124c <isTouchWithinRectangle>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <main+0x90c>
				displayScreen = 1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				mapID++;
 8001b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}
			if (isTouchWithinRectangle(108, 205, 203, 230, xPos, yPos)){
 8001ba8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	23e6      	movs	r3, #230	; 0xe6
 8001bb6:	22cb      	movs	r2, #203	; 0xcb
 8001bb8:	21cd      	movs	r1, #205	; 0xcd
 8001bba:	206c      	movs	r0, #108	; 0x6c
 8001bbc:	f7ff fb46 	bl	800124c <isTouchWithinRectangle>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <main+0x93a>
				displayScreen = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				mapID++;
 8001bcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}
			HAL_Delay(200);
 8001bd6:	20c8      	movs	r0, #200	; 0xc8
 8001bd8:	f001 fcfa 	bl	80035d0 <HAL_Delay>
		if(displayScreen==0){
 8001bdc:	f7ff bbc1 	b.w	8001362 <main+0xc6>

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	2234      	movs	r2, #52	; 0x34
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f007 ffa9 	bl	8009b46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c04:	f003 fd84 	bl	8005710 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <SystemClock_Config+0xd8>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <SystemClock_Config+0xd8>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <SystemClock_Config+0xd8>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <SystemClock_Config+0xdc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c50:	23d8      	movs	r3, #216	; 0xd8
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c58:	2309      	movs	r3, #9
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fdb3 	bl	80057d0 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c70:	f000 f826 	bl	8001cc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c74:	f003 fd5c 	bl	8005730 <HAL_PWREx_EnableOverDrive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c7e:	f000 f81f 	bl	8001cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	2107      	movs	r1, #7
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 f843 	bl	8005d2c <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001cac:	f000 f808 	bl	8001cc0 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_RNG_Init+0x20>)
 8001cd2:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <MX_RNG_Init+0x24>)
 8001cd4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_RNG_Init+0x20>)
 8001cd8:	f004 fe76 	bl	80069c8 <HAL_RNG_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001ce2:	f7ff ffed 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000344 	.word	0x20000344
 8001cf0:	50060800 	.word	0x50060800

08001cf4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0a8      	sub	sp, #160	; 0xa0
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2290      	movs	r2, #144	; 0x90
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 ff1e 	bl	8009b46 <memset>
  if(rngHandle->Instance==RNG)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_RNG_MspInit+0x60>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d11b      	bne.n	8001d4c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fa27 	bl	8006178 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001d30:	f7ff ffc6 	bl	8001cc0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_RNG_MspInit+0x64>)
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_RNG_MspInit+0x64>)
 8001d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3e:	6353      	str	r3, [r2, #52]	; 0x34
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RNG_MspInit+0x64>)
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	37a0      	adds	r7, #160	; 0xa0
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	50060800 	.word	0x50060800
 8001d58:	40023800 	.word	0x40023800

08001d5c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <MX_SPI5_Init+0x78>)
 8001d64:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d6c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d7a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001daa:	2207      	movs	r2, #7
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_SPI5_Init+0x74>)
 8001dbc:	f004 fe2e 	bl	8006a1c <HAL_SPI_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001dc6:	f7ff ff7b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000354 	.word	0x20000354
 8001dd4:	40015000 	.word	0x40015000

08001dd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_SPI_MspInit+0x7c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d128      	bne.n	8001e4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e2a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_SPI_MspInit+0x84>)
 8001e48:	f002 fbde 	bl	8004608 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40015000 	.word	0x40015000
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40021400 	.word	0x40021400

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_MspInit+0x44>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <HAL_MspInit+0x44>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_MspInit+0x44>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_MspInit+0x44>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_MspInit+0x44>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_MspInit+0x44>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f001 fb70 	bl	8003590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <ADC_IRQHandler+0x14>)
 8001eba:	f001 fbf1 	bl	80036a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <ADC_IRQHandler+0x18>)
 8001ec0:	f001 fbee 	bl	80036a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000200 	.word	0x20000200
 8001ecc:	20000248 	.word	0x20000248

08001ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM3_IRQHandler+0x10>)
 8001ed6:	f005 f9fb 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000454 	.word	0x20000454

08001ee4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <I2C1_EV_IRQHandler+0x10>)
 8001eea:	f002 fdfb 	bl	8004ae4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200002f0 	.word	0x200002f0

08001ef8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <I2C1_ER_IRQHandler+0x10>)
 8001efe:	f002 fe0b 	bl	8004b18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200002f0 	.word	0x200002f0

08001f0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DMA2_Stream0_IRQHandler+0x10>)
 8001f12:	f002 f92f 	bl	8004174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000290 	.word	0x20000290

08001f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_kill>:

int _kill(int pid, int sig)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f3a:	f007 fe57 	bl	8009bec <__errno>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2216      	movs	r2, #22
 8001f42:	601a      	str	r2, [r3, #0]
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_exit>:

void _exit (int status)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffe7 	bl	8001f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f62:	e7fe      	b.n	8001f62 <_exit+0x12>

08001f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e00a      	b.n	8001f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f76:	f3af 8000 	nop.w
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	b2ca      	uxtb	r2, r1
 8001f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf0      	blt.n	8001f76 <_read+0x12>
  }

  return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e009      	b.n	8001fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf1      	blt.n	8001fb0 <_write+0x12>
  }
  return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_close>:

int _close(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_isatty>:

int _isatty(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f007 fdbc 	bl	8009bec <__errno>
 8002074:	4603      	mov	r3, r0
 8002076:	220c      	movs	r2, #12
 8002078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20080000 	.word	0x20080000
 80020a0:	00000400 	.word	0x00000400
 80020a4:	200003b8 	.word	0x200003b8
 80020a8:	20000678 	.word	0x20000678

080020ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <SystemInit+0x20>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <SystemInit+0x20>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <MX_TIM1_Init+0xa0>)
 80020f0:	4a20      	ldr	r2, [pc, #128]	; (8002174 <MX_TIM1_Init+0xa4>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <MX_TIM1_Init+0xa0>)
 80020f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80020fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <MX_TIM1_Init+0xa0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <MX_TIM1_Init+0xa0>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <MX_TIM1_Init+0xa0>)
 800210a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <MX_TIM1_Init+0xa0>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <MX_TIM1_Init+0xa0>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800211c:	4814      	ldr	r0, [pc, #80]	; (8002170 <MX_TIM1_Init+0xa0>)
 800211e:	f005 f81f 	bl	8007160 <HAL_TIM_Base_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002128:	f7ff fdca 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002130:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4619      	mov	r1, r3
 8002138:	480d      	ldr	r0, [pc, #52]	; (8002170 <MX_TIM1_Init+0xa0>)
 800213a:	f005 fafd 	bl	8007738 <HAL_TIM_ConfigClockSource>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002144:	f7ff fdbc 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_TIM1_Init+0xa0>)
 800215a:	f005 ff81 	bl	8008060 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002164:	f7ff fdac 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200003bc 	.word	0x200003bc
 8002174:	40010000 	.word	0x40010000

08002178 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_TIM2_Init+0x98>)
 8002198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_TIM2_Init+0x98>)
 80021a0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80021a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_TIM2_Init+0x98>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_TIM2_Init+0x98>)
 80021ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80021b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MX_TIM2_Init+0x98>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_TIM2_Init+0x98>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c0:	4813      	ldr	r0, [pc, #76]	; (8002210 <MX_TIM2_Init+0x98>)
 80021c2:	f004 ffcd 	bl	8007160 <HAL_TIM_Base_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021cc:	f7ff fd78 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <MX_TIM2_Init+0x98>)
 80021de:	f005 faab 	bl	8007738 <HAL_TIM_ConfigClockSource>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80021e8:	f7ff fd6a 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021ec:	2320      	movs	r3, #32
 80021ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_TIM2_Init+0x98>)
 80021fa:	f005 ff31 	bl	8008060 <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002204:	f7ff fd5c 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000408 	.word	0x20000408

08002214 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002234:	463b      	mov	r3, r7
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	615a      	str	r2, [r3, #20]
 8002244:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <MX_TIM3_Init+0xec>)
 8002248:	4a2e      	ldr	r2, [pc, #184]	; (8002304 <MX_TIM3_Init+0xf0>)
 800224a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <MX_TIM3_Init+0xec>)
 800224e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <MX_TIM3_Init+0xec>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <MX_TIM3_Init+0xec>)
 800225c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <MX_TIM3_Init+0xec>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <MX_TIM3_Init+0xec>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800226e:	4824      	ldr	r0, [pc, #144]	; (8002300 <MX_TIM3_Init+0xec>)
 8002270:	f004 ff76 	bl	8007160 <HAL_TIM_Base_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800227a:	f7ff fd21 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002288:	4619      	mov	r1, r3
 800228a:	481d      	ldr	r0, [pc, #116]	; (8002300 <MX_TIM3_Init+0xec>)
 800228c:	f005 fa54 	bl	8007738 <HAL_TIM_ConfigClockSource>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002296:	f7ff fd13 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800229a:	4819      	ldr	r0, [pc, #100]	; (8002300 <MX_TIM3_Init+0xec>)
 800229c:	f004 ffb7 	bl	800720e <HAL_TIM_PWM_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80022a6:	f7ff fd0b 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	4811      	ldr	r0, [pc, #68]	; (8002300 <MX_TIM3_Init+0xec>)
 80022ba:	f005 fed1 	bl	8008060 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80022c4:	f7ff fcfc 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c8:	2360      	movs	r3, #96	; 0x60
 80022ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80022cc:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80022d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022da:	463b      	mov	r3, r7
 80022dc:	2200      	movs	r2, #0
 80022de:	4619      	mov	r1, r3
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <MX_TIM3_Init+0xec>)
 80022e2:	f005 f915 	bl	8007510 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80022ec:	f7ff fce8 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <MX_TIM3_Init+0xec>)
 80022f2:	f000 f87b 	bl	80023ec <HAL_TIM_MspPostInit>

}
 80022f6:	bf00      	nop
 80022f8:	3738      	adds	r7, #56	; 0x38
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000454 	.word	0x20000454
 8002304:	40000400 	.word	0x40000400

08002308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <HAL_TIM_Base_MspInit+0xd4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10c      	bne.n	8002344 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a2c      	ldr	r2, [pc, #176]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002342:	e046      	b.n	80023d2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d128      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800237e:	2320      	movs	r3, #32
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238e:	2301      	movs	r3, #1
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	4812      	ldr	r0, [pc, #72]	; (80023e4 <HAL_TIM_Base_MspInit+0xdc>)
 800239a:	f002 f935 	bl	8004608 <HAL_GPIO_Init>
}
 800239e:	e018      	b.n	80023d2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_TIM_Base_MspInit+0xe0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d113      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_TIM_Base_MspInit+0xd8>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2101      	movs	r1, #1
 80023c6:	201d      	movs	r0, #29
 80023c8:	f001 fdcd 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023cc:	201d      	movs	r0, #29
 80023ce:	f001 fde6 	bl	8003f9e <HAL_NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3730      	adds	r7, #48	; 0x30
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40000400 	.word	0x40000400

080023ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_TIM_MspPostInit+0x64>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d11b      	bne.n	8002446 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_TIM_MspPostInit+0x68>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_TIM_MspPostInit+0x68>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_TIM_MspPostInit+0x68>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Temperature_and_Humidity_TIMER_Pin;
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002436:	2302      	movs	r3, #2
 8002438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temperature_and_Humidity_TIMER_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_TIM_MspPostInit+0x6c>)
 8002442:	f002 f8e1 	bl	8004608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40000400 	.word	0x40000400
 8002454:	40023800 	.word	0x40023800
 8002458:	40020000 	.word	0x40020000

0800245c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <MX_USART3_UART_Init+0x5c>)
 8002464:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_USART3_UART_Init+0x58>)
 80024a0:	f005 fe8a 	bl	80081b8 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024aa:	f7ff fc09 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200004a0 	.word	0x200004a0
 80024b8:	40004800 	.word	0x40004800

080024bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0ae      	sub	sp, #184	; 0xb8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2290      	movs	r2, #144	; 0x90
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f007 fb32 	bl	8009b46 <memset>
  if(uartHandle->Instance==USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_UART_MspInit+0xb4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d13c      	bne.n	8002566 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fe3c 	bl	8006178 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002506:	f7ff fbdb 	bl	8001cc0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_UART_MspInit+0xb8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_UART_MspInit+0xb8>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_UART_MspInit+0xb8>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_UART_MspInit+0xb8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a13      	ldr	r2, [pc, #76]	; (8002574 <HAL_UART_MspInit+0xb8>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_UART_MspInit+0xb8>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800253a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800253e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002554:	2307      	movs	r3, #7
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <HAL_UART_MspInit+0xbc>)
 8002562:	f002 f851 	bl	8004608 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	37b8      	adds	r7, #184	; 0xb8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40004800 	.word	0x40004800
 8002574:	40023800 	.word	0x40023800
 8002578:	40020c00 	.word	0x40020c00

0800257c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800257c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002582:	490e      	ldr	r1, [pc, #56]	; (80025bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002588:	e002      	b.n	8002590 <LoopCopyDataInit>

0800258a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800258c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258e:	3304      	adds	r3, #4

08002590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002594:	d3f9      	bcc.n	800258a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002598:	4c0b      	ldr	r4, [pc, #44]	; (80025c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800259c:	e001      	b.n	80025a2 <LoopFillZerobss>

0800259e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a0:	3204      	adds	r2, #4

080025a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a4:	d3fb      	bcc.n	800259e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025a6:	f7ff fd81 	bl	80020ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025aa:	f007 fb25 	bl	8009bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ae:	f7fe fe75 	bl	800129c <main>
  bx  lr    
 80025b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025bc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80025c0:	0800e180 	.word	0x0800e180
  ldr r2, =_sbss
 80025c4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80025c8:	20000678 	.word	0x20000678

080025cc <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025cc:	e7fe      	b.n	80025cc <BusFault_Handler>

080025ce <ILI9341_Draw_Hollow_Rectangle_Coord>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80025ce:	b590      	push	{r4, r7, lr}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4604      	mov	r4, r0
 80025d6:	4608      	mov	r0, r1
 80025d8:	4611      	mov	r1, r2
 80025da:	461a      	mov	r2, r3
 80025dc:	4623      	mov	r3, r4
 80025de:	80fb      	strh	r3, [r7, #6]
 80025e0:	4603      	mov	r3, r0
 80025e2:	80bb      	strh	r3, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002610:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8002614:	edd7 7a03 	vldr	s15, [r7, #12]
 8002618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	d501      	bpl.n	8002626 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
		Negative_X = 1;
 8002622:	2301      	movs	r3, #1
 8002624:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 800262c:	883a      	ldrh	r2, [r7, #0]
 800262e:	88bb      	ldrh	r3, [r7, #4]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 800263e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d501      	bpl.n	8002650 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
		Negative_Y = 1;
 800264c:	2301      	movs	r3, #1
 800264e:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	82fb      	strh	r3, [r7, #22]
 800265e:	e003      	b.n	8002668 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8002668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800266a:	8afa      	ldrh	r2, [r7, #22]
 800266c:	88b9      	ldrh	r1, [r7, #4]
 800266e:	88f8      	ldrh	r0, [r7, #6]
 8002670:	f000 fd8c 	bl	800318c <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8002674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002676:	8afa      	ldrh	r2, [r7, #22]
 8002678:	8839      	ldrh	r1, [r7, #0]
 800267a:	88f8      	ldrh	r0, [r7, #6]
 800267c:	f000 fd86 	bl	800318c <ILI9341_Draw_Horizontal_Line>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002680:	7cbb      	ldrb	r3, [r7, #18]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;
 8002686:	883a      	ldrh	r2, [r7, #0]
 8002688:	88bb      	ldrh	r3, [r7, #4]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	82bb      	strh	r3, [r7, #20]
 800268e:	e003      	b.n	8002698 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002690:	88ba      	ldrh	r2, [r7, #4]
 8002692:	883b      	ldrh	r3, [r7, #0]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8002698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800269a:	8aba      	ldrh	r2, [r7, #20]
 800269c:	88b9      	ldrh	r1, [r7, #4]
 800269e:	88f8      	ldrh	r0, [r7, #6]
 80026a0:	f000 fdb8 	bl	8003214 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80026a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026a6:	8aba      	ldrh	r2, [r7, #20]
 80026a8:	88b9      	ldrh	r1, [r7, #4]
 80026aa:	8878      	ldrh	r0, [r7, #2]
 80026ac:	f000 fdb2 	bl	8003214 <ILI9341_Draw_Vertical_Line>

	if ((X_length > 0) || (Y_length > 0))
 80026b0:	8afb      	ldrh	r3, [r7, #22]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 80026b6:	8abb      	ldrh	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80026bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026be:	8839      	ldrh	r1, [r7, #0]
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fc2c 	bl	8002f20 <ILI9341_Draw_Pixel>
	}

}
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}

080026d0 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	4604      	mov	r4, r0
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4623      	mov	r3, r4
 80026e0:	80fb      	strh	r3, [r7, #6]
 80026e2:	4603      	mov	r3, r0
 80026e4:	80bb      	strh	r3, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]
 80026ea:	4613      	mov	r3, r2
 80026ec:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da01      	bge.n	800271c <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8002718:	2301      	movs	r3, #1
 800271a:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8002720:	883a      	ldrh	r2, [r7, #0]
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da01      	bge.n	8002732 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	823b      	strh	r3, [r7, #16]
 8002744:	e005      	b.n	8002752 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002752:	7cbb      	ldrb	r3, [r7, #18]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002758:	883a      	ldrh	r2, [r7, #0]
 800275a:	88bb      	ldrh	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8002760:	88bb      	ldrh	r3, [r7, #4]
 8002762:	81fb      	strh	r3, [r7, #14]
 8002764:	e005      	b.n	8002772 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002766:	88ba      	ldrh	r2, [r7, #4]
 8002768:	883b      	ldrh	r3, [r7, #0]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 800276e:	883b      	ldrh	r3, [r7, #0]
 8002770:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8002772:	8abc      	ldrh	r4, [r7, #20]
 8002774:	8afa      	ldrh	r2, [r7, #22]
 8002776:	89f9      	ldrh	r1, [r7, #14]
 8002778:	8a38      	ldrh	r0, [r7, #16]
 800277a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4623      	mov	r3, r4
 8002780:	f000 fca8 	bl	80030d4 <ILI9341_Draw_Rectangle>
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}

0800278c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af02      	add	r7, sp, #8
 8002792:	4604      	mov	r4, r0
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4623      	mov	r3, r4
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	4603      	mov	r3, r0
 80027a0:	71bb      	strb	r3, [r7, #6]
 80027a2:	460b      	mov	r3, r1
 80027a4:	717b      	strb	r3, [r7, #5]
 80027a6:	4613      	mov	r3, r2
 80027a8:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b1f      	cmp	r3, #31
 80027b2:	d802      	bhi.n	80027ba <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	71fb      	strb	r3, [r7, #7]
 80027b8:	e002      	b.n	80027c0 <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	3b20      	subs	r3, #32
 80027be:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	753b      	strb	r3, [r7, #20]
 80027c4:	e012      	b.n	80027ec <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80027c6:	7dfa      	ldrb	r2, [r7, #23]
 80027c8:	7d38      	ldrb	r0, [r7, #20]
 80027ca:	7d39      	ldrb	r1, [r7, #20]
 80027cc:	4c3b      	ldr	r4, [pc, #236]	; (80028bc <ILI9341_Draw_Char+0x130>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4423      	add	r3, r4
 80027d8:	4403      	add	r3, r0
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	f101 0318 	add.w	r3, r1, #24
 80027e0:	443b      	add	r3, r7
 80027e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80027e6:	7d3b      	ldrb	r3, [r7, #20]
 80027e8:	3301      	adds	r3, #1
 80027ea:	753b      	strb	r3, [r7, #20]
 80027ec:	7d3b      	ldrb	r3, [r7, #20]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d9e9      	bls.n	80027c6 <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	b298      	uxth	r0, r3
 80027f6:	797b      	ldrb	r3, [r7, #5]
 80027f8:	b299      	uxth	r1, r3
 80027fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027fc:	461a      	mov	r2, r3
 80027fe:	0052      	lsls	r2, r2, #1
 8002800:	4413      	add	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	b29c      	uxth	r4, r3
 800280c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4623      	mov	r3, r4
 8002812:	f000 fc5f 	bl	80030d4 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8002816:	2300      	movs	r3, #0
 8002818:	757b      	strb	r3, [r7, #21]
 800281a:	e047      	b.n	80028ac <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 800281c:	2300      	movs	r3, #0
 800281e:	75bb      	strb	r3, [r7, #22]
 8002820:	e03e      	b.n	80028a0 <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 8002822:	7d7b      	ldrb	r3, [r7, #21]
 8002824:	3318      	adds	r3, #24
 8002826:	443b      	add	r3, r7
 8002828:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800282c:	461a      	mov	r2, r3
 800282e:	7dbb      	ldrb	r3, [r7, #22]
 8002830:	fa42 f303 	asr.w	r3, r2, r3
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02e      	beq.n	800289a <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 800283c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800283e:	2b01      	cmp	r3, #1
 8002840:	d110      	bne.n	8002864 <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8002842:	79bb      	ldrb	r3, [r7, #6]
 8002844:	b29a      	uxth	r2, r3
 8002846:	7d7b      	ldrb	r3, [r7, #21]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4413      	add	r3, r2
 800284c:	b298      	uxth	r0, r3
 800284e:	797b      	ldrb	r3, [r7, #5]
 8002850:	b29a      	uxth	r2, r3
 8002852:	7dbb      	ldrb	r3, [r7, #22]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4413      	add	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	4619      	mov	r1, r3
 800285e:	f000 fb5f 	bl	8002f20 <ILI9341_Draw_Pixel>
 8002862:	e01a      	b.n	800289a <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	b29a      	uxth	r2, r3
 8002868:	7d7b      	ldrb	r3, [r7, #21]
 800286a:	b29b      	uxth	r3, r3
 800286c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800286e:	fb11 f303 	smulbb	r3, r1, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	4413      	add	r3, r2
 8002876:	b298      	uxth	r0, r3
 8002878:	797b      	ldrb	r3, [r7, #5]
 800287a:	b29a      	uxth	r2, r3
 800287c:	7dbb      	ldrb	r3, [r7, #22]
 800287e:	b29b      	uxth	r3, r3
 8002880:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002882:	fb11 f303 	smulbb	r3, r1, r3
 8002886:	b29b      	uxth	r3, r3
 8002888:	4413      	add	r3, r2
 800288a:	b299      	uxth	r1, r3
 800288c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800288e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4623      	mov	r3, r4
 8002896:	f000 fc1d 	bl	80030d4 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 800289a:	7dbb      	ldrb	r3, [r7, #22]
 800289c:	3301      	adds	r3, #1
 800289e:	75bb      	strb	r3, [r7, #22]
 80028a0:	7dbb      	ldrb	r3, [r7, #22]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d9bd      	bls.n	8002822 <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 80028a6:	7d7b      	ldrb	r3, [r7, #21]
 80028a8:	3301      	adds	r3, #1
 80028aa:	757b      	strb	r3, [r7, #21]
 80028ac:	7d7b      	ldrb	r3, [r7, #21]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d9b4      	bls.n	800281c <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	0800d300 	.word	0x0800d300

080028c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	70fb      	strb	r3, [r7, #3]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70bb      	strb	r3, [r7, #2]
 80028d6:	4613      	mov	r3, r2
 80028d8:	803b      	strh	r3, [r7, #0]
	while (*Text)
 80028da:	e017      	b.n	800290c <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	7818      	ldrb	r0, [r3, #0]
 80028e4:	883c      	ldrh	r4, [r7, #0]
 80028e6:	78ba      	ldrb	r2, [r7, #2]
 80028e8:	78f9      	ldrb	r1, [r7, #3]
 80028ea:	8bbb      	ldrh	r3, [r7, #28]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	8b3b      	ldrh	r3, [r7, #24]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4623      	mov	r3, r4
 80028f4:	f7ff ff4a 	bl	800278c <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 80028f8:	8b3b      	ldrh	r3, [r7, #24]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	4413      	add	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	4413      	add	r3, r2
 800290a:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e3      	bne.n	80028dc <ILI9341_Draw_Text+0x1c>
	}
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
	...

08002920 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 8002924:	f7ff fa1a 	bl	8001d5c <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 8002928:	f7fe fa08 	bl	8000d3c <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800292c:	2200      	movs	r2, #0
 800292e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002932:	4802      	ldr	r0, [pc, #8]	; (800293c <ILI9341_SPI_Init+0x1c>)
 8002934:	f002 f82c 	bl	8004990 <HAL_GPIO_WritePin>
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40020800 	.word	0x40020800

08002940 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800294a:	1df9      	adds	r1, r7, #7
 800294c:	2301      	movs	r3, #1
 800294e:	2201      	movs	r2, #1
 8002950:	4803      	ldr	r0, [pc, #12]	; (8002960 <ILI9341_SPI_Send+0x20>)
 8002952:	f004 f90e 	bl	8006b72 <HAL_SPI_Transmit>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000354 	.word	0x20000354

08002964 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <ILI9341_Write_Command+0x40>)
 8002976:	f002 f80b 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002980:	4808      	ldr	r0, [pc, #32]	; (80029a4 <ILI9341_Write_Command+0x40>)
 8002982:	f002 f805 	bl	8004990 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ffd9 	bl	8002940 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <ILI9341_Write_Command+0x40>)
 8002996:	f001 fffb 	bl	8004990 <HAL_GPIO_WritePin>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40020800 	.word	0x40020800

080029a8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80029b2:	2201      	movs	r2, #1
 80029b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <ILI9341_Write_Data+0x40>)
 80029ba:	f001 ffe9 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029c4:	4808      	ldr	r0, [pc, #32]	; (80029e8 <ILI9341_Write_Data+0x40>)
 80029c6:	f001 ffe3 	bl	8004990 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ffb7 	bl	8002940 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029d2:	2201      	movs	r2, #1
 80029d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <ILI9341_Write_Data+0x40>)
 80029da:	f001 ffd9 	bl	8004990 <HAL_GPIO_WritePin>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40020800 	.word	0x40020800

080029ec <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	80fb      	strh	r3, [r7, #6]
 80029fe:	4603      	mov	r3, r0
 8002a00:	80bb      	strh	r3, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	807b      	strh	r3, [r7, #2]
 8002a06:	4613      	mov	r3, r2
 8002a08:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8002a0a:	202a      	movs	r0, #42	; 0x2a
 8002a0c:	f7ff ffaa 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ffc5 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ffc0 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ffb9 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffb4 	bl	80029a8 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8002a40:	202b      	movs	r0, #43	; 0x2b
 8002a42:	f7ff ff8f 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffaa 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8002a54:	88bb      	ldrh	r3, [r7, #4]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ffa5 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 8002a5e:	883b      	ldrh	r3, [r7, #0]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff9e 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8002a6c:	883b      	ldrh	r3, [r7, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff99 	bl	80029a8 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8002a76:	202c      	movs	r0, #44	; 0x2c
 8002a78:	f7ff ff74 	bl	8002964 <ILI9341_Write_Command>
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}

08002a84 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a8e:	480b      	ldr	r0, [pc, #44]	; (8002abc <ILI9341_Reset+0x38>)
 8002a90:	f001 ff7e 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002a94:	20c8      	movs	r0, #200	; 0xc8
 8002a96:	f000 fd9b 	bl	80035d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa0:	4806      	ldr	r0, [pc, #24]	; (8002abc <ILI9341_Reset+0x38>)
 8002aa2:	f001 ff75 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002aa6:	20c8      	movs	r0, #200	; 0xc8
 8002aa8:	f000 fd92 	bl	80035d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab2:	4802      	ldr	r0, [pc, #8]	; (8002abc <ILI9341_Reset+0x38>)
 8002ab4:	f001 ff6c 	bl	8004990 <HAL_GPIO_WritePin>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40020800 	.word	0x40020800

08002ac0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8002ace:	2036      	movs	r0, #54	; 0x36
 8002ad0:	f7ff ff48 	bl	8002964 <ILI9341_Write_Command>
	HAL_Delay(1);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f000 fd7b 	bl	80035d0 <HAL_Delay>

	switch (screen_rotation)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d837      	bhi.n	8002b50 <ILI9341_Set_Rotation+0x90>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <ILI9341_Set_Rotation+0x28>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002b0f 	.word	0x08002b0f
 8002af0:	08002b25 	.word	0x08002b25
 8002af4:	08002b3b 	.word	0x08002b3b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8002af8:	2048      	movs	r0, #72	; 0x48
 8002afa:	f7ff ff55 	bl	80029a8 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <ILI9341_Set_Rotation+0x9c>)
 8002b00:	22f0      	movs	r2, #240	; 0xf0
 8002b02:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <ILI9341_Set_Rotation+0xa0>)
 8002b06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b0a:	801a      	strh	r2, [r3, #0]
		break;
 8002b0c:	e021      	b.n	8002b52 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8002b0e:	2028      	movs	r0, #40	; 0x28
 8002b10:	f7ff ff4a 	bl	80029a8 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <ILI9341_Set_Rotation+0x9c>)
 8002b16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b1a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <ILI9341_Set_Rotation+0xa0>)
 8002b1e:	22f0      	movs	r2, #240	; 0xf0
 8002b20:	801a      	strh	r2, [r3, #0]
		break;
 8002b22:	e016      	b.n	8002b52 <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8002b24:	2088      	movs	r0, #136	; 0x88
 8002b26:	f7ff ff3f 	bl	80029a8 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <ILI9341_Set_Rotation+0x9c>)
 8002b2c:	22f0      	movs	r2, #240	; 0xf0
 8002b2e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <ILI9341_Set_Rotation+0xa0>)
 8002b32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b36:	801a      	strh	r2, [r3, #0]
		break;
 8002b38:	e00b      	b.n	8002b52 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8002b3a:	20e8      	movs	r0, #232	; 0xe8
 8002b3c:	f7ff ff34 	bl	80029a8 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <ILI9341_Set_Rotation+0x9c>)
 8002b42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b46:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <ILI9341_Set_Rotation+0xa0>)
 8002b4a:	22f0      	movs	r2, #240	; 0xf0
 8002b4c:	801a      	strh	r2, [r3, #0]
		break;
 8002b4e:	e000      	b.n	8002b52 <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8002b50:	bf00      	nop
	}
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000006 	.word	0x20000006
 8002b60:	20000004 	.word	0x20000004

08002b64 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b6e:	4802      	ldr	r0, [pc, #8]	; (8002b78 <ILI9341_Enable+0x14>)
 8002b70:	f001 ff0e 	bl	8004990 <HAL_GPIO_WritePin>
}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40020800 	.word	0x40020800

08002b7c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8002b80:	f7ff fff0 	bl	8002b64 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8002b84:	f7ff fecc 	bl	8002920 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8002b88:	f7ff ff7c 	bl	8002a84 <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff fee9 	bl	8002964 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8002b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b96:	f000 fd1b 	bl	80035d0 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8002b9a:	20cb      	movs	r0, #203	; 0xcb
 8002b9c:	f7ff fee2 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8002ba0:	2039      	movs	r0, #57	; 0x39
 8002ba2:	f7ff ff01 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8002ba6:	202c      	movs	r0, #44	; 0x2c
 8002ba8:	f7ff fefe 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7ff fefb 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8002bb2:	2034      	movs	r0, #52	; 0x34
 8002bb4:	f7ff fef8 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7ff fef5 	bl	80029a8 <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8002bbe:	20cf      	movs	r0, #207	; 0xcf
 8002bc0:	f7ff fed0 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff feef 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002bca:	20c1      	movs	r0, #193	; 0xc1
 8002bcc:	f7ff feec 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8002bd0:	2030      	movs	r0, #48	; 0x30
 8002bd2:	f7ff fee9 	bl	80029a8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8002bd6:	20e8      	movs	r0, #232	; 0xe8
 8002bd8:	f7ff fec4 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8002bdc:	2085      	movs	r0, #133	; 0x85
 8002bde:	f7ff fee3 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fee0 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8002be8:	2078      	movs	r0, #120	; 0x78
 8002bea:	f7ff fedd 	bl	80029a8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8002bee:	20ea      	movs	r0, #234	; 0xea
 8002bf0:	f7ff feb8 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff fed7 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7ff fed4 	bl	80029a8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8002c00:	20ed      	movs	r0, #237	; 0xed
 8002c02:	f7ff feaf 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8002c06:	2064      	movs	r0, #100	; 0x64
 8002c08:	f7ff fece 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f7ff fecb 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8002c12:	2012      	movs	r0, #18
 8002c14:	f7ff fec8 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8002c18:	2081      	movs	r0, #129	; 0x81
 8002c1a:	f7ff fec5 	bl	80029a8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8002c1e:	20f7      	movs	r0, #247	; 0xf7
 8002c20:	f7ff fea0 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8002c24:	2020      	movs	r0, #32
 8002c26:	f7ff febf 	bl	80029a8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8002c2a:	20c0      	movs	r0, #192	; 0xc0
 8002c2c:	f7ff fe9a 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8002c30:	2023      	movs	r0, #35	; 0x23
 8002c32:	f7ff feb9 	bl	80029a8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8002c36:	20c1      	movs	r0, #193	; 0xc1
 8002c38:	f7ff fe94 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8002c3c:	2010      	movs	r0, #16
 8002c3e:	f7ff feb3 	bl	80029a8 <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8002c42:	20c5      	movs	r0, #197	; 0xc5
 8002c44:	f7ff fe8e 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8002c48:	203e      	movs	r0, #62	; 0x3e
 8002c4a:	f7ff fead 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8002c4e:	2028      	movs	r0, #40	; 0x28
 8002c50:	f7ff feaa 	bl	80029a8 <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8002c54:	20c7      	movs	r0, #199	; 0xc7
 8002c56:	f7ff fe85 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8002c5a:	2086      	movs	r0, #134	; 0x86
 8002c5c:	f7ff fea4 	bl	80029a8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8002c60:	2036      	movs	r0, #54	; 0x36
 8002c62:	f7ff fe7f 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8002c66:	2048      	movs	r0, #72	; 0x48
 8002c68:	f7ff fe9e 	bl	80029a8 <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8002c6c:	203a      	movs	r0, #58	; 0x3a
 8002c6e:	f7ff fe79 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8002c72:	2055      	movs	r0, #85	; 0x55
 8002c74:	f7ff fe98 	bl	80029a8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8002c78:	20b1      	movs	r0, #177	; 0xb1
 8002c7a:	f7ff fe73 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7ff fe92 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8002c84:	2018      	movs	r0, #24
 8002c86:	f7ff fe8f 	bl	80029a8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8002c8a:	20b6      	movs	r0, #182	; 0xb6
 8002c8c:	f7ff fe6a 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8002c90:	2008      	movs	r0, #8
 8002c92:	f7ff fe89 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8002c96:	2082      	movs	r0, #130	; 0x82
 8002c98:	f7ff fe86 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8002c9c:	2027      	movs	r0, #39	; 0x27
 8002c9e:	f7ff fe83 	bl	80029a8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8002ca2:	20f2      	movs	r0, #242	; 0xf2
 8002ca4:	f7ff fe5e 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff fe7d 	bl	80029a8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8002cae:	2026      	movs	r0, #38	; 0x26
 8002cb0:	f7ff fe58 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7ff fe77 	bl	80029a8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8002cba:	20e0      	movs	r0, #224	; 0xe0
 8002cbc:	f7ff fe52 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8002cc0:	200f      	movs	r0, #15
 8002cc2:	f7ff fe71 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002cc6:	2031      	movs	r0, #49	; 0x31
 8002cc8:	f7ff fe6e 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8002ccc:	202b      	movs	r0, #43	; 0x2b
 8002cce:	f7ff fe6b 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002cd2:	200c      	movs	r0, #12
 8002cd4:	f7ff fe68 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002cd8:	200e      	movs	r0, #14
 8002cda:	f7ff fe65 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002cde:	2008      	movs	r0, #8
 8002ce0:	f7ff fe62 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8002ce4:	204e      	movs	r0, #78	; 0x4e
 8002ce6:	f7ff fe5f 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8002cea:	20f1      	movs	r0, #241	; 0xf1
 8002cec:	f7ff fe5c 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8002cf0:	2037      	movs	r0, #55	; 0x37
 8002cf2:	f7ff fe59 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002cf6:	2007      	movs	r0, #7
 8002cf8:	f7ff fe56 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8002cfc:	2010      	movs	r0, #16
 8002cfe:	f7ff fe53 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002d02:	2003      	movs	r0, #3
 8002d04:	f7ff fe50 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002d08:	200e      	movs	r0, #14
 8002d0a:	f7ff fe4d 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8002d0e:	2009      	movs	r0, #9
 8002d10:	f7ff fe4a 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7ff fe47 	bl	80029a8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8002d1a:	20e1      	movs	r0, #225	; 0xe1
 8002d1c:	f7ff fe22 	bl	8002964 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7ff fe41 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002d26:	200e      	movs	r0, #14
 8002d28:	f7ff fe3e 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8002d2c:	2014      	movs	r0, #20
 8002d2e:	f7ff fe3b 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002d32:	2003      	movs	r0, #3
 8002d34:	f7ff fe38 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8002d38:	2011      	movs	r0, #17
 8002d3a:	f7ff fe35 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002d3e:	2007      	movs	r0, #7
 8002d40:	f7ff fe32 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002d44:	2031      	movs	r0, #49	; 0x31
 8002d46:	f7ff fe2f 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002d4a:	20c1      	movs	r0, #193	; 0xc1
 8002d4c:	f7ff fe2c 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8002d50:	2048      	movs	r0, #72	; 0x48
 8002d52:	f7ff fe29 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002d56:	2008      	movs	r0, #8
 8002d58:	f7ff fe26 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002d5c:	200f      	movs	r0, #15
 8002d5e:	f7ff fe23 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002d62:	200c      	movs	r0, #12
 8002d64:	f7ff fe20 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002d68:	2031      	movs	r0, #49	; 0x31
 8002d6a:	f7ff fe1d 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8002d6e:	2036      	movs	r0, #54	; 0x36
 8002d70:	f7ff fe1a 	bl	80029a8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002d74:	200f      	movs	r0, #15
 8002d76:	f7ff fe17 	bl	80029a8 <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8002d7a:	2011      	movs	r0, #17
 8002d7c:	f7ff fdf2 	bl	8002964 <ILI9341_Write_Command>
	HAL_Delay(120);
 8002d80:	2078      	movs	r0, #120	; 0x78
 8002d82:	f000 fc25 	bl	80035d0 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8002d86:	2029      	movs	r0, #41	; 0x29
 8002d88:	f7ff fdec 	bl	8002964 <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7ff fe97 	bl	8002ac0 <ILI9341_Set_Rotation>
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	b08d      	sub	sp, #52	; 0x34
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	6039      	str	r1, [r7, #0]
 8002da4:	80fb      	strh	r3, [r7, #6]
 8002da6:	466b      	mov	r3, sp
 8002da8:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002db6:	d202      	bcs.n	8002dbe <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dbc:	e002      	b.n	8002dc4 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8002dbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dca:	4840      	ldr	r0, [pc, #256]	; (8002ecc <ILI9341_Draw_Colour_Burst+0x134>)
 8002dcc:	f001 fde0 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd6:	483d      	ldr	r0, [pc, #244]	; (8002ecc <ILI9341_Draw_Colour_Burst+0x134>)
 8002dd8:	f001 fdda 	bl	8004990 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 8002de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de8:	460b      	mov	r3, r1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	4688      	mov	r8, r1
 8002df2:	4699      	mov	r9, r3
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e08:	2300      	movs	r3, #0
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	461d      	mov	r5, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	00eb      	lsls	r3, r5, #3
 8002e18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1c:	00e2      	lsls	r2, r4, #3
 8002e1e:	1dcb      	adds	r3, r1, #7
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	ebad 0d03 	sub.w	sp, sp, r3
 8002e28:	466b      	mov	r3, sp
 8002e2a:	3300      	adds	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e32:	e00e      	b.n	8002e52 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	4413      	add	r3, r2
 8002e3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e3e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	3301      	adds	r3, #1
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	b2d1      	uxtb	r1, r2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	3302      	adds	r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d3ec      	bcc.n	8002e34 <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e74:	fb01 f202 	mul.w	r2, r1, r2
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e009      	b.n	8002e9c <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	230a      	movs	r3, #10
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	480f      	ldr	r0, [pc, #60]	; (8002ed0 <ILI9341_Draw_Colour_Burst+0x138>)
 8002e92:	f003 fe6e 	bl	8006b72 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3301      	adds	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3f1      	bcc.n	8002e88 <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	230a      	movs	r3, #10
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	4808      	ldr	r0, [pc, #32]	; (8002ed0 <ILI9341_Draw_Colour_Burst+0x138>)
 8002eae:	f003 fe60 	bl	8006b72 <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eb8:	4804      	ldr	r0, [pc, #16]	; (8002ecc <ILI9341_Draw_Colour_Burst+0x134>)
 8002eba:	f001 fd69 	bl	8004990 <HAL_GPIO_WritePin>
 8002ebe:	46b5      	mov	sp, r6
}
 8002ec0:	bf00      	nop
 8002ec2:	3734      	adds	r7, #52	; 0x34
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eca:	bf00      	nop
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	20000354 	.word	0x20000354

08002ed4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <ILI9341_Fill_Screen+0x44>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <ILI9341_Fill_Screen+0x48>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff fd7d 	bl	80029ec <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <ILI9341_Fill_Screen+0x44>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <ILI9341_Fill_Screen+0x48>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff44 	bl	8002d98 <ILI9341_Draw_Colour_Burst>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000006 	.word	0x20000006
 8002f1c:	20000004 	.word	0x20000004

08002f20 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	80bb      	strh	r3, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8002f32:	4b64      	ldr	r3, [pc, #400]	; (80030c4 <ILI9341_Draw_Pixel+0x1a4>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	f080 80be 	bcs.w	80030bc <ILI9341_Draw_Pixel+0x19c>
 8002f40:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <ILI9341_Draw_Pixel+0x1a8>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	88ba      	ldrh	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f080 80b7 	bcs.w	80030bc <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f54:	485d      	ldr	r0, [pc, #372]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002f56:	f001 fd1b 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f60:	485a      	ldr	r0, [pc, #360]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002f62:	f001 fd15 	bl	8004990 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8002f66:	202a      	movs	r0, #42	; 0x2a
 8002f68:	f7ff fcea 	bl	8002940 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f72:	4856      	ldr	r0, [pc, #344]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002f74:	f001 fd0c 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f7e:	4853      	ldr	r0, [pc, #332]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002f80:	f001 fd06 	bl	8004990 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f84:	2200      	movs	r2, #0
 8002f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f8a:	4850      	ldr	r0, [pc, #320]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002f8c:	f001 fd00 	bl	8004990 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	753b      	strb	r3, [r7, #20]
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 8002fb2:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002fb4:	f107 0114 	add.w	r1, r7, #20
 8002fb8:	2301      	movs	r3, #1
 8002fba:	2204      	movs	r2, #4
 8002fbc:	4844      	ldr	r0, [pc, #272]	; (80030d0 <ILI9341_Draw_Pixel+0x1b0>)
 8002fbe:	f003 fdd8 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc8:	4840      	ldr	r0, [pc, #256]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002fca:	f001 fce1 	bl	8004990 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd4:	483d      	ldr	r0, [pc, #244]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002fd6:	f001 fcdb 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fe0:	483a      	ldr	r0, [pc, #232]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002fe2:	f001 fcd5 	bl	8004990 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8002fe6:	202b      	movs	r0, #43	; 0x2b
 8002fe8:	f7ff fcaa 	bl	8002940 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002fec:	2201      	movs	r2, #1
 8002fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff2:	4836      	ldr	r0, [pc, #216]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8002ff4:	f001 fccc 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffe:	4833      	ldr	r0, [pc, #204]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8003000:	f001 fcc6 	bl	8004990 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300a:	4830      	ldr	r0, [pc, #192]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 800300c:	f001 fcc0 	bl	8004990 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 8003010:	88bb      	ldrh	r3, [r7, #4]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	b29b      	uxth	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	743b      	strb	r3, [r7, #16]
 800301a:	88bb      	ldrh	r3, [r7, #4]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	3301      	adds	r3, #1
 8003024:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 8003026:	b2db      	uxtb	r3, r3
 8003028:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 800302a:	88bb      	ldrh	r3, [r7, #4]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 8003032:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003034:	f107 0110 	add.w	r1, r7, #16
 8003038:	2301      	movs	r3, #1
 800303a:	2204      	movs	r2, #4
 800303c:	4824      	ldr	r0, [pc, #144]	; (80030d0 <ILI9341_Draw_Pixel+0x1b0>)
 800303e:	f003 fd98 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003042:	2201      	movs	r2, #1
 8003044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003048:	4820      	ldr	r0, [pc, #128]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 800304a:	f001 fca1 	bl	8004990 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003054:	481d      	ldr	r0, [pc, #116]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8003056:	f001 fc9b 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003060:	481a      	ldr	r0, [pc, #104]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8003062:	f001 fc95 	bl	8004990 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8003066:	202c      	movs	r0, #44	; 0x2c
 8003068:	f7ff fc6a 	bl	8002940 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800306c:	2201      	movs	r2, #1
 800306e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003072:	4816      	ldr	r0, [pc, #88]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8003074:	f001 fc8c 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800307e:	4813      	ldr	r0, [pc, #76]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 8003080:	f001 fc86 	bl	8004990 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308a:	4810      	ldr	r0, [pc, #64]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 800308c:	f001 fc80 	bl	8004990 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	733b      	strb	r3, [r7, #12]
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80030a0:	f107 010c 	add.w	r1, r7, #12
 80030a4:	2301      	movs	r3, #1
 80030a6:	2202      	movs	r2, #2
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <ILI9341_Draw_Pixel+0x1b0>)
 80030aa:	f003 fd62 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80030ae:	2201      	movs	r2, #1
 80030b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <ILI9341_Draw_Pixel+0x1ac>)
 80030b6:	f001 fc6b 	bl	8004990 <HAL_GPIO_WritePin>
 80030ba:	e000      	b.n	80030be <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 80030bc:	bf00      	nop

}
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000006 	.word	0x20000006
 80030c8:	20000004 	.word	0x20000004
 80030cc:	40020800 	.word	0x40020800
 80030d0:	20000354 	.word	0x20000354

080030d4 <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	80fb      	strh	r3, [r7, #6]
 80030e6:	4603      	mov	r3, r0
 80030e8:	80bb      	strh	r3, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	807b      	strh	r3, [r7, #2]
 80030ee:	4613      	mov	r3, r2
 80030f0:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <ILI9341_Draw_Rectangle+0xb0>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d23d      	bcs.n	800317a <ILI9341_Draw_Rectangle+0xa6>
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <ILI9341_Draw_Rectangle+0xb4>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	88ba      	ldrh	r2, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d237      	bcs.n	800317a <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	4413      	add	r3, r2
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <ILI9341_Draw_Rectangle+0xb0>)
 8003112:	8812      	ldrh	r2, [r2, #0]
 8003114:	b292      	uxth	r2, r2
 8003116:	4293      	cmp	r3, r2
 8003118:	dd05      	ble.n	8003126 <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <ILI9341_Draw_Rectangle+0xb0>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29a      	uxth	r2, r3
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8003126:	88ba      	ldrh	r2, [r7, #4]
 8003128:	883b      	ldrh	r3, [r7, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a16      	ldr	r2, [pc, #88]	; (8003188 <ILI9341_Draw_Rectangle+0xb4>)
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	b292      	uxth	r2, r2
 8003132:	4293      	cmp	r3, r2
 8003134:	dd05      	ble.n	8003142 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <ILI9341_Draw_Rectangle+0xb4>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29a      	uxth	r2, r3
 800313c:	88bb      	ldrh	r3, [r7, #4]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	4413      	add	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29c      	uxth	r4, r3
 800314e:	88ba      	ldrh	r2, [r7, #4]
 8003150:	883b      	ldrh	r3, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	88b9      	ldrh	r1, [r7, #4]
 800315c:	88f8      	ldrh	r0, [r7, #6]
 800315e:	4622      	mov	r2, r4
 8003160:	f7ff fc44 	bl	80029ec <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8003164:	883b      	ldrh	r3, [r7, #0]
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	461a      	mov	r2, r3
 800316e:	8b3b      	ldrh	r3, [r7, #24]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe10 	bl	8002d98 <ILI9341_Draw_Colour_Burst>
 8003178:	e000      	b.n	800317c <ILI9341_Draw_Rectangle+0xa8>
		return;
 800317a:	bf00      	nop
}
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	20000006 	.word	0x20000006
 8003188:	20000004 	.word	0x20000004

0800318c <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4604      	mov	r4, r0
 8003194:	4608      	mov	r0, r1
 8003196:	4611      	mov	r1, r2
 8003198:	461a      	mov	r2, r3
 800319a:	4623      	mov	r3, r4
 800319c:	80fb      	strh	r3, [r7, #6]
 800319e:	4603      	mov	r3, r0
 80031a0:	80bb      	strh	r3, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	807b      	strh	r3, [r7, #2]
 80031a6:	4613      	mov	r3, r2
 80031a8:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <ILI9341_Draw_Horizontal_Line+0x80>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d225      	bcs.n	8003202 <ILI9341_Draw_Horizontal_Line+0x76>
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <ILI9341_Draw_Horizontal_Line+0x84>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	88ba      	ldrh	r2, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d21f      	bcs.n	8003202 <ILI9341_Draw_Horizontal_Line+0x76>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a10      	ldr	r2, [pc, #64]	; (800320c <ILI9341_Draw_Horizontal_Line+0x80>)
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	b292      	uxth	r2, r2
 80031ce:	4293      	cmp	r3, r2
 80031d0:	dd05      	ble.n	80031de <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width = LCD_WIDTH - X;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <ILI9341_Draw_Horizontal_Line+0x80>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	4413      	add	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	88bb      	ldrh	r3, [r7, #4]
 80031ec:	88b9      	ldrh	r1, [r7, #4]
 80031ee:	88f8      	ldrh	r0, [r7, #6]
 80031f0:	f7ff fbfc 	bl	80029ec <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 80031f4:	887a      	ldrh	r2, [r7, #2]
 80031f6:	883b      	ldrh	r3, [r7, #0]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fdcc 	bl	8002d98 <ILI9341_Draw_Colour_Burst>
 8003200:	e000      	b.n	8003204 <ILI9341_Draw_Horizontal_Line+0x78>
		return;
 8003202:	bf00      	nop
}
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	bf00      	nop
 800320c:	20000006 	.word	0x20000006
 8003210:	20000004 	.word	0x20000004

08003214 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4623      	mov	r3, r4
 8003224:	80fb      	strh	r3, [r7, #6]
 8003226:	4603      	mov	r3, r0
 8003228:	80bb      	strh	r3, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]
 800322e:	4613      	mov	r3, r2
 8003230:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <ILI9341_Draw_Vertical_Line+0x80>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	429a      	cmp	r2, r3
 800323c:	d225      	bcs.n	800328a <ILI9341_Draw_Vertical_Line+0x76>
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <ILI9341_Draw_Vertical_Line+0x84>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	88ba      	ldrh	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d21f      	bcs.n	800328a <ILI9341_Draw_Vertical_Line+0x76>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800324a:	88ba      	ldrh	r2, [r7, #4]
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	4413      	add	r3, r2
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <ILI9341_Draw_Vertical_Line+0x84>)
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	b292      	uxth	r2, r2
 8003256:	4293      	cmp	r3, r2
 8003258:	dd05      	ble.n	8003266 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height = LCD_HEIGHT - Y;
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <ILI9341_Draw_Vertical_Line+0x84>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29a      	uxth	r2, r3
 8003260:	88bb      	ldrh	r3, [r7, #4]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8003266:	88ba      	ldrh	r2, [r7, #4]
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	4413      	add	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	88b9      	ldrh	r1, [r7, #4]
 8003276:	88f8      	ldrh	r0, [r7, #6]
 8003278:	f7ff fbb8 	bl	80029ec <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 800327c:	887a      	ldrh	r2, [r7, #2]
 800327e:	883b      	ldrh	r3, [r7, #0]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fd88 	bl	8002d98 <ILI9341_Draw_Colour_Burst>
 8003288:	e000      	b.n	800328c <ILI9341_Draw_Vertical_Line+0x78>
		return;
 800328a:	bf00      	nop
}
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	20000006 	.word	0x20000006
 8003298:	20000004 	.word	0x20000004

0800329c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 80032a2:	2310      	movs	r3, #16
 80032a4:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 80032aa:	e019      	b.n	80032e0 <TP_Read+0x44>
	{
		value <<= 1;
 80032ac:	88bb      	ldrh	r3, [r7, #4]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80032b2:	2201      	movs	r2, #1
 80032b4:	2108      	movs	r1, #8
 80032b6:	480e      	ldr	r0, [pc, #56]	; (80032f0 <TP_Read+0x54>)
 80032b8:	f001 fb6a 	bl	8004990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2108      	movs	r1, #8
 80032c0:	480b      	ldr	r0, [pc, #44]	; (80032f0 <TP_Read+0x54>)
 80032c2:	f001 fb65 	bl	8004990 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80032c6:	2110      	movs	r1, #16
 80032c8:	4809      	ldr	r0, [pc, #36]	; (80032f0 <TP_Read+0x54>)
 80032ca:	f001 fb49 	bl	8004960 <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <TP_Read+0x3e>
		{
			value++;
 80032d4:	88bb      	ldrh	r3, [r7, #4]
 80032d6:	3301      	adds	r3, #1
 80032d8:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	3b01      	subs	r3, #1
 80032de:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e2      	bne.n	80032ac <TP_Read+0x10>
	};

	return value;
 80032e6:	88bb      	ldrh	r3, [r7, #4]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 80032fe:	2308      	movs	r3, #8
 8003300:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	2108      	movs	r1, #8
 8003306:	4815      	ldr	r0, [pc, #84]	; (800335c <TP_Write+0x68>)
 8003308:	f001 fb42 	bl	8004990 <HAL_GPIO_WritePin>

	while (i > 0)
 800330c:	e01e      	b.n	800334c <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	da05      	bge.n	8003322 <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003316:	2201      	movs	r2, #1
 8003318:	2120      	movs	r1, #32
 800331a:	4810      	ldr	r0, [pc, #64]	; (800335c <TP_Write+0x68>)
 800331c:	f001 fb38 	bl	8004990 <HAL_GPIO_WritePin>
 8003320:	e004      	b.n	800332c <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8003322:	2200      	movs	r2, #0
 8003324:	2120      	movs	r1, #32
 8003326:	480d      	ldr	r0, [pc, #52]	; (800335c <TP_Write+0x68>)
 8003328:	f001 fb32 	bl	8004990 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003332:	2201      	movs	r2, #1
 8003334:	2108      	movs	r1, #8
 8003336:	4809      	ldr	r0, [pc, #36]	; (800335c <TP_Write+0x68>)
 8003338:	f001 fb2a 	bl	8004990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800333c:	2200      	movs	r2, #0
 800333e:	2108      	movs	r1, #8
 8003340:	4806      	ldr	r0, [pc, #24]	; (800335c <TP_Write+0x68>)
 8003342:	f001 fb25 	bl	8004990 <HAL_GPIO_WritePin>
		i--;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	3b01      	subs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1dd      	bne.n	800330e <TP_Write+0x1a>
	};
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000

08003360 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003368:	2201      	movs	r2, #1
 800336a:	2108      	movs	r1, #8
 800336c:	485a      	ldr	r0, [pc, #360]	; (80034d8 <TP_Read_Coordinates+0x178>)
 800336e:	f001 fb0f 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003372:	2201      	movs	r2, #1
 8003374:	2120      	movs	r1, #32
 8003376:	4858      	ldr	r0, [pc, #352]	; (80034d8 <TP_Read_Coordinates+0x178>)
 8003378:	f001 fb0a 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800337c:	2201      	movs	r2, #1
 800337e:	2140      	movs	r1, #64	; 0x40
 8003380:	4855      	ldr	r0, [pc, #340]	; (80034d8 <TP_Read_Coordinates+0x178>)
 8003382:	f001 fb05 	bl	8004990 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800339c:	2200      	movs	r2, #0
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	484d      	ldr	r0, [pc, #308]	; (80034d8 <TP_Read_Coordinates+0x178>)
 80033a2:	f001 faf5 	bl	8004990 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80033a6:	e023      	b.n	80033f0 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 80033a8:	2090      	movs	r0, #144	; 0x90
 80033aa:	f7ff ffa3 	bl	80032f4 <TP_Write>

		rawy = TP_Read();
 80033ae:	f7ff ff75 	bl	800329c <TP_Read>
 80033b2:	4603      	mov	r3, r0
 80033b4:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	4413      	add	r3, r2
 80033bc:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 80033c6:	20d0      	movs	r0, #208	; 0xd0
 80033c8:	f7ff ff94 	bl	80032f4 <TP_Write>
		rawx = TP_Read();
 80033cc:	f7ff ff66 	bl	800329c <TP_Read>
 80033d0:	4603      	mov	r3, r0
 80033d2:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 80033d4:	89bb      	ldrh	r3, [r7, #12]
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	4413      	add	r3, r2
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80033dc:	89bb      	ldrh	r3, [r7, #12]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
		samples--;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	3301      	adds	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <TP_Read_Coordinates+0xa4>
 80033f6:	2104      	movs	r1, #4
 80033f8:	4837      	ldr	r0, [pc, #220]	; (80034d8 <TP_Read_Coordinates+0x178>)
 80033fa:	f001 fab1 	bl	8004960 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0d1      	beq.n	80033a8 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003404:	2201      	movs	r2, #1
 8003406:	2140      	movs	r1, #64	; 0x40
 8003408:	4833      	ldr	r0, [pc, #204]	; (80034d8 <TP_Read_Coordinates+0x178>)
 800340a:	f001 fac1 	bl	8004990 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003414:	d14d      	bne.n	80034b2 <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003416:	2104      	movs	r1, #4
 8003418:	482f      	ldr	r0, [pc, #188]	; (80034d8 <TP_Read_Coordinates+0x178>)
 800341a:	f001 faa1 	bl	8004960 <HAL_GPIO_ReadPin>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d146      	bne.n	80034b2 <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8003440:	89bb      	ldrh	r3, [r7, #12]
 8003442:	425b      	negs	r3, r3
 8003444:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003446:	89fb      	ldrh	r3, [r7, #14]
 8003448:	425b      	negs	r3, r3
 800344a:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 800344c:	89ba      	ldrh	r2, [r7, #12]
 800344e:	4b23      	ldr	r3, [pc, #140]	; (80034dc <TP_Read_Coordinates+0x17c>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	0852      	lsrs	r2, r2, #1
 8003458:	4413      	add	r3, r2
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	b29b      	uxth	r3, r3
 800345e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800346a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80034d0 <TP_Read_Coordinates+0x170>
 800346e:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003472:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003476:	ee17 3a90 	vmov	r3, s15
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8003480:	89fb      	ldrh	r3, [r7, #14]
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <TP_Read_Coordinates+0x180>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	09db      	lsrs	r3, r3, #7
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b0f      	subs	r3, #15
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003496:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80034d0 <TP_Read_Coordinates+0x170>
 800349a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3302      	adds	r3, #2
 80034a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034a6:	ee17 2a90 	vmov	r2, s15
 80034aa:	b292      	uxth	r2, r2
 80034ac:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e007      	b.n	80034c2 <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3302      	adds	r3, #2
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 80034c0:	2300      	movs	r3, #0
	}
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	f3af 8000 	nop.w
 80034d0:	28f5c28f 	.word	0x28f5c28f
 80034d4:	3ff28f5c 	.word	0x3ff28f5c
 80034d8:	40021000 	.word	0x40021000
 80034dc:	e01e01e1 	.word	0xe01e01e1
 80034e0:	a0a0a0a1 	.word	0xa0a0a0a1

080034e4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80034e8:	2104      	movs	r1, #4
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <TP_Touchpad_Pressed+0x1c>)
 80034ec:	f001 fa38 	bl	8004960 <HAL_GPIO_ReadPin>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80034fa:	2300      	movs	r3, #0
	}
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_Init+0x28>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_Init+0x28>)
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003514:	2003      	movs	r0, #3
 8003516:	f000 fd1b 	bl	8003f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800351a:	2000      	movs	r0, #0
 800351c:	f000 f808 	bl	8003530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003520:	f7fe fc9e 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00

08003530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_InitTick+0x54>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_InitTick+0x58>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4619      	mov	r1, r3
 8003542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003546:	fbb3 f3f1 	udiv	r3, r3, r1
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fd33 	bl	8003fba <HAL_SYSTICK_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e00e      	b.n	800357c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0f      	cmp	r3, #15
 8003562:	d80a      	bhi.n	800357a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003564:	2200      	movs	r2, #0
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f000 fcfb 	bl	8003f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003570:	4a06      	ldr	r2, [pc, #24]	; (800358c <HAL_InitTick+0x5c>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000000 	.word	0x20000000
 8003588:	2000000c 	.word	0x2000000c
 800358c:	20000008 	.word	0x20000008

08003590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_IncTick+0x20>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_IncTick+0x24>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_IncTick+0x24>)
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000000c 	.word	0x2000000c
 80035b4:	20000528 	.word	0x20000528

080035b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return uwTick;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_GetTick+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000528 	.word	0x20000528

080035d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff ffee 	bl	80035b8 <HAL_GetTick>
 80035dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d005      	beq.n	80035f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_Delay+0x44>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035f6:	bf00      	nop
 80035f8:	f7ff ffde 	bl	80035b8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	d8f7      	bhi.n	80035f8 <HAL_Delay+0x28>
  {
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000000c 	.word	0x2000000c

08003618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e031      	b.n	8003692 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fa96 	bl	8000b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_ADC_Init+0x84>)
 800365c:	4013      	ands	r3, r2
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fa9e 	bl	8003ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
 8003682:	e001      	b.n	8003688 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	ffffeefd 	.word	0xffffeefd

080036a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d049      	beq.n	800376a <HAL_ADC_IRQHandler+0xca>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d046      	beq.n	800376a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12b      	bne.n	800375a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	d127      	bne.n	800375a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0220 	bic.w	r2, r2, #32
 8003734:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8b0 	bl	80038c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0212 	mvn.w	r2, #18
 8003768:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d057      	beq.n	8003830 <HAL_ADC_IRQHandler+0x190>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d054      	beq.n	8003830 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d139      	bne.n	8003820 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d12b      	bne.n	8003820 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d124      	bne.n	8003820 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11d      	bne.n	8003820 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d119      	bne.n	8003820 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fabb 	bl	8003d9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f06f 020c 	mvn.w	r2, #12
 800382e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <HAL_ADC_IRQHandler+0x1d6>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d014      	beq.n	8003876 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d10d      	bne.n	8003876 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f834 	bl	80038d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0201 	mvn.w	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003884:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x218>
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d012      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0202 	orr.w	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0220 	mvn.w	r2, #32
 80038a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f81d 	bl	80038e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f06f 0220 	mvn.w	r2, #32
 80038b6:	601a      	str	r2, [r3, #0]
  }
}
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1c>
 8003914:	2302      	movs	r3, #2
 8003916:	e136      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x28a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b09      	cmp	r3, #9
 8003926:	d93a      	bls.n	800399e <HAL_ADC_ConfigChannel+0xa2>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003930:	d035      	beq.n	800399e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68d9      	ldr	r1, [r3, #12]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	3b1e      	subs	r3, #30
 8003948:	2207      	movs	r2, #7
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	400a      	ands	r2, r1
 8003956:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a8d      	ldr	r2, [pc, #564]	; (8003b94 <HAL_ADC_ConfigChannel+0x298>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10a      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68d9      	ldr	r1, [r3, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	061a      	lsls	r2, r3, #24
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003976:	e035      	b.n	80039e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	4618      	mov	r0, r3
 800398a:	4603      	mov	r3, r0
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4403      	add	r3, r0
 8003990:	3b1e      	subs	r3, #30
 8003992:	409a      	lsls	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800399c:	e022      	b.n	80039e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6919      	ldr	r1, [r3, #16]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	2207      	movs	r2, #7
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43da      	mvns	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	400a      	ands	r2, r1
 80039c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6919      	ldr	r1, [r3, #16]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4618      	mov	r0, r3
 80039d4:	4603      	mov	r3, r0
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4403      	add	r3, r0
 80039da:	409a      	lsls	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d824      	bhi.n	8003a36 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	3b05      	subs	r3, #5
 80039fe:	221f      	movs	r2, #31
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43da      	mvns	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	3b05      	subs	r3, #5
 8003a28:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34
 8003a34:	e04c      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d824      	bhi.n	8003a88 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3b23      	subs	r3, #35	; 0x23
 8003a50:	221f      	movs	r2, #31
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	3b23      	subs	r3, #35	; 0x23
 8003a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
 8003a86:	e023      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	3b41      	subs	r3, #65	; 0x41
 8003a9a:	221f      	movs	r2, #31
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3b41      	subs	r3, #65	; 0x41
 8003ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <HAL_ADC_ConfigChannel+0x29c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10a      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1f4>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae2:	d105      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003aea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003aee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_ADC_ConfigChannel+0x29c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10f      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x21e>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b12      	cmp	r3, #18
 8003b00:	d10b      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b0c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b18:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_ADC_ConfigChannel+0x29c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d12b      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x280>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <HAL_ADC_ConfigChannel+0x298>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x23a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b11      	cmp	r3, #17
 8003b34:	d122      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b40:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b4c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_ADC_ConfigChannel+0x298>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_ADC_ConfigChannel+0x2a4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <HAL_ADC_ConfigChannel+0x2a8>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0c9a      	lsrs	r2, r3, #18
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b6e:	e002      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f9      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	10000012 	.word	0x10000012
 8003b98:	40012000 	.word	0x40012000
 8003b9c:	40012300 	.word	0x40012300
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	431bde83 	.word	0x431bde83

08003ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bb0:	4b78      	ldr	r3, [pc, #480]	; (8003d94 <ADC_Init+0x1ec>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a77      	ldr	r2, [pc, #476]	; (8003d94 <ADC_Init+0x1ec>)
 8003bb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <ADC_Init+0x1ec>)
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4973      	ldr	r1, [pc, #460]	; (8003d94 <ADC_Init+0x1ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	021a      	lsls	r2, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6899      	ldr	r1, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	4a58      	ldr	r2, [pc, #352]	; (8003d98 <ADC_Init+0x1f0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	e00f      	b.n	8003ca2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0202 	bic.w	r2, r2, #2
 8003cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01b      	beq.n	8003d08 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	035a      	lsls	r2, r3, #13
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	e007      	b.n	8003d18 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	051a      	lsls	r2, r3, #20
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d5a:	025a      	lsls	r2, r3, #9
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	029a      	lsls	r2, r3, #10
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40012300 	.word	0x40012300
 8003d98:	0f000001 	.word	0x0f000001

08003d9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <__NVIC_SetPriorityGrouping>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <__NVIC_SetPriorityGrouping+0x40>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <__NVIC_SetPriorityGrouping+0x40>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00
 8003df4:	05fa0000 	.word	0x05fa0000

08003df8 <__NVIC_GetPriorityGrouping>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <__NVIC_GetPriorityGrouping+0x18>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	f003 0307 	and.w	r3, r3, #7
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_EnableIRQ>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db0b      	blt.n	8003e3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	4907      	ldr	r1, [pc, #28]	; (8003e4c <__NVIC_EnableIRQ+0x38>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2001      	movs	r0, #1
 8003e36:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	e000e100 	.word	0xe000e100

08003e50 <__NVIC_SetPriority>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db0a      	blt.n	8003e7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	490c      	ldr	r1, [pc, #48]	; (8003e9c <__NVIC_SetPriority+0x4c>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	440b      	add	r3, r1
 8003e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e78:	e00a      	b.n	8003e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4908      	ldr	r1, [pc, #32]	; (8003ea0 <__NVIC_SetPriority+0x50>)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3b04      	subs	r3, #4
 8003e88:	0112      	lsls	r2, r2, #4
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	761a      	strb	r2, [r3, #24]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000e100 	.word	0xe000e100
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <NVIC_EncodePriority>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f1c3 0307 	rsb	r3, r3, #7
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	bf28      	it	cs
 8003ec2:	2304      	movcs	r3, #4
 8003ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d902      	bls.n	8003ed4 <NVIC_EncodePriority+0x30>
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3b03      	subs	r3, #3
 8003ed2:	e000      	b.n	8003ed6 <NVIC_EncodePriority+0x32>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	43d9      	mvns	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	4313      	orrs	r3, r2
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	; 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f1c:	d301      	bcc.n	8003f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00f      	b.n	8003f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <SysTick_Config+0x40>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	f7ff ff8e 	bl	8003e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <SysTick_Config+0x40>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <SysTick_Config+0x40>)
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000e010 	.word	0xe000e010

08003f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff29 	bl	8003db0 <__NVIC_SetPriorityGrouping>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f78:	f7ff ff3e 	bl	8003df8 <__NVIC_GetPriorityGrouping>
 8003f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff8e 	bl	8003ea4 <NVIC_EncodePriority>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff5d 	bl	8003e50 <__NVIC_SetPriority>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff31 	bl	8003e14 <__NVIC_EnableIRQ>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ffa2 	bl	8003f0c <SysTick_Config>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff faea 	bl	80035b8 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e099      	b.n	8004124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004010:	e00f      	b.n	8004032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004012:	f7ff fad1 	bl	80035b8 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b05      	cmp	r3, #5
 800401e:	d908      	bls.n	8004032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2203      	movs	r2, #3
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e078      	b.n	8004124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e8      	bne.n	8004012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_DMA_Init+0x158>)
 800404c:	4013      	ands	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800405e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	2b04      	cmp	r3, #4
 800408a:	d107      	bne.n	800409c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4313      	orrs	r3, r2
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d117      	bne.n	80040f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa19 	bl	8004510 <DMA_CheckFifoParam>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040f2:	2301      	movs	r3, #1
 80040f4:	e016      	b.n	8004124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9d0 	bl	80044a4 <DMA_CalcBaseAndBitshift>
 8004104:	4603      	mov	r3, r0
 8004106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	223f      	movs	r2, #63	; 0x3f
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	e010803f 	.word	0xe010803f

08004130 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d004      	beq.n	800414e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e00c      	b.n	8004168 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2205      	movs	r2, #5
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004180:	4b8e      	ldr	r3, [pc, #568]	; (80043bc <HAL_DMA_IRQHandler+0x248>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a8e      	ldr	r2, [pc, #568]	; (80043c0 <HAL_DMA_IRQHandler+0x24c>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a9b      	lsrs	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	2208      	movs	r2, #8
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01a      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	2208      	movs	r2, #8
 80041ce:	409a      	lsls	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d012      	beq.n	8004216 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	2201      	movs	r2, #1
 8004204:	409a      	lsls	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0202 	orr.w	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	2204      	movs	r2, #4
 800421c:	409a      	lsls	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	2204      	movs	r2, #4
 800423a:	409a      	lsls	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	2210      	movs	r2, #16
 8004252:	409a      	lsls	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d043      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03c      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	2210      	movs	r2, #16
 8004270:	409a      	lsls	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d018      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d024      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
 80042a2:	e01f      	b.n	80042e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
 80042b4:	e016      	b.n	80042e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0208 	bic.w	r2, r2, #8
 80042d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	2220      	movs	r2, #32
 80042ea:	409a      	lsls	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 808f 	beq.w	8004414 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8087 	beq.w	8004414 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	2220      	movs	r2, #32
 800430c:	409a      	lsls	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b05      	cmp	r3, #5
 800431c:	d136      	bne.n	800438c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0216 	bic.w	r2, r2, #22
 800432c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800433c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_DMA_IRQHandler+0x1da>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0208 	bic.w	r2, r2, #8
 800435c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	223f      	movs	r2, #63	; 0x3f
 8004364:	409a      	lsls	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d07e      	beq.n	8004480 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
        }
        return;
 800438a:	e079      	b.n	8004480 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01d      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10d      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d031      	beq.n	8004414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	e02c      	b.n	8004414 <HAL_DMA_IRQHandler+0x2a0>
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000
 80043c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e01e      	b.n	8004414 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10f      	bne.n	8004404 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0210 	bic.w	r2, r2, #16
 80043f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d032      	beq.n	8004482 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d022      	beq.n	800446e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2205      	movs	r2, #5
 800442c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3301      	adds	r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	429a      	cmp	r2, r3
 800444a:	d307      	bcc.n	800445c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f2      	bne.n	8004440 <HAL_DMA_IRQHandler+0x2cc>
 800445a:	e000      	b.n	800445e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800445c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e000      	b.n	8004482 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004480:	bf00      	nop
    }
  }
}
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004496:	b2db      	uxtb	r3, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b10      	subs	r3, #16
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <DMA_CalcBaseAndBitshift+0x60>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <DMA_CalcBaseAndBitshift+0x64>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d908      	bls.n	80044e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <DMA_CalcBaseAndBitshift+0x68>)
 80044da:	4013      	ands	r3, r2
 80044dc:	1d1a      	adds	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	659a      	str	r2, [r3, #88]	; 0x58
 80044e2:	e006      	b.n	80044f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <DMA_CalcBaseAndBitshift+0x68>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	aaaaaaab 	.word	0xaaaaaaab
 8004508:	0800d540 	.word	0x0800d540
 800450c:	fffffc00 	.word	0xfffffc00

08004510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11f      	bne.n	800456a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d856      	bhi.n	80045de <DMA_CheckFifoParam+0xce>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <DMA_CheckFifoParam+0x28>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	08004549 	.word	0x08004549
 800453c:	0800455b 	.word	0x0800455b
 8004540:	08004549 	.word	0x08004549
 8004544:	080045df 	.word	0x080045df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d046      	beq.n	80045e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004558:	e043      	b.n	80045e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004562:	d140      	bne.n	80045e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004568:	e03d      	b.n	80045e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004572:	d121      	bne.n	80045b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d837      	bhi.n	80045ea <DMA_CheckFifoParam+0xda>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <DMA_CheckFifoParam+0x70>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004591 	.word	0x08004591
 8004584:	08004597 	.word	0x08004597
 8004588:	08004591 	.word	0x08004591
 800458c:	080045a9 	.word	0x080045a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e030      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d025      	beq.n	80045ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a6:	e022      	b.n	80045ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045b0:	d11f      	bne.n	80045f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045b6:	e01c      	b.n	80045f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d903      	bls.n	80045c6 <DMA_CheckFifoParam+0xb6>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d003      	beq.n	80045cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045c4:	e018      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ca:	e015      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00e      	beq.n	80045f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	e00b      	b.n	80045f6 <DMA_CheckFifoParam+0xe6>
      break;
 80045de:	bf00      	nop
 80045e0:	e00a      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045e2:	bf00      	nop
 80045e4:	e008      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045e6:	bf00      	nop
 80045e8:	e006      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e004      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ee:	bf00      	nop
 80045f0:	e002      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80045f2:	bf00      	nop
 80045f4:	e000      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045f6:	bf00      	nop
    }
  } 
  
  return status; 
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e175      	b.n	8004914 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004628:	2201      	movs	r2, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	429a      	cmp	r2, r3
 8004642:	f040 8164 	bne.w	800490e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d005      	beq.n	800465e <HAL_GPIO_Init+0x56>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d130      	bne.n	80046c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004694:	2201      	movs	r2, #1
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 0201 	and.w	r2, r3, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d017      	beq.n	80046fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d123      	bne.n	8004750 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	220f      	movs	r2, #15
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	08da      	lsrs	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3208      	adds	r2, #8
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0203 	and.w	r2, r3, #3
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80be 	beq.w	800490e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004792:	4b66      	ldr	r3, [pc, #408]	; (800492c <HAL_GPIO_Init+0x324>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4a65      	ldr	r2, [pc, #404]	; (800492c <HAL_GPIO_Init+0x324>)
 8004798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800479c:	6453      	str	r3, [r2, #68]	; 0x44
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_GPIO_Init+0x324>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047aa:	4a61      	ldr	r2, [pc, #388]	; (8004930 <HAL_GPIO_Init+0x328>)
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	3302      	adds	r3, #2
 80047b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	220f      	movs	r2, #15
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a58      	ldr	r2, [pc, #352]	; (8004934 <HAL_GPIO_Init+0x32c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d037      	beq.n	8004846 <HAL_GPIO_Init+0x23e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a57      	ldr	r2, [pc, #348]	; (8004938 <HAL_GPIO_Init+0x330>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <HAL_GPIO_Init+0x23a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a56      	ldr	r2, [pc, #344]	; (800493c <HAL_GPIO_Init+0x334>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d02b      	beq.n	800483e <HAL_GPIO_Init+0x236>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a55      	ldr	r2, [pc, #340]	; (8004940 <HAL_GPIO_Init+0x338>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d025      	beq.n	800483a <HAL_GPIO_Init+0x232>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a54      	ldr	r2, [pc, #336]	; (8004944 <HAL_GPIO_Init+0x33c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01f      	beq.n	8004836 <HAL_GPIO_Init+0x22e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a53      	ldr	r2, [pc, #332]	; (8004948 <HAL_GPIO_Init+0x340>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d019      	beq.n	8004832 <HAL_GPIO_Init+0x22a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a52      	ldr	r2, [pc, #328]	; (800494c <HAL_GPIO_Init+0x344>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_GPIO_Init+0x226>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a51      	ldr	r2, [pc, #324]	; (8004950 <HAL_GPIO_Init+0x348>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00d      	beq.n	800482a <HAL_GPIO_Init+0x222>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a50      	ldr	r2, [pc, #320]	; (8004954 <HAL_GPIO_Init+0x34c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <HAL_GPIO_Init+0x21e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a4f      	ldr	r2, [pc, #316]	; (8004958 <HAL_GPIO_Init+0x350>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <HAL_GPIO_Init+0x21a>
 800481e:	2309      	movs	r3, #9
 8004820:	e012      	b.n	8004848 <HAL_GPIO_Init+0x240>
 8004822:	230a      	movs	r3, #10
 8004824:	e010      	b.n	8004848 <HAL_GPIO_Init+0x240>
 8004826:	2308      	movs	r3, #8
 8004828:	e00e      	b.n	8004848 <HAL_GPIO_Init+0x240>
 800482a:	2307      	movs	r3, #7
 800482c:	e00c      	b.n	8004848 <HAL_GPIO_Init+0x240>
 800482e:	2306      	movs	r3, #6
 8004830:	e00a      	b.n	8004848 <HAL_GPIO_Init+0x240>
 8004832:	2305      	movs	r3, #5
 8004834:	e008      	b.n	8004848 <HAL_GPIO_Init+0x240>
 8004836:	2304      	movs	r3, #4
 8004838:	e006      	b.n	8004848 <HAL_GPIO_Init+0x240>
 800483a:	2303      	movs	r3, #3
 800483c:	e004      	b.n	8004848 <HAL_GPIO_Init+0x240>
 800483e:	2302      	movs	r3, #2
 8004840:	e002      	b.n	8004848 <HAL_GPIO_Init+0x240>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_GPIO_Init+0x240>
 8004846:	2300      	movs	r3, #0
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	f002 0203 	and.w	r2, r2, #3
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	4093      	lsls	r3, r2
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004858:	4935      	ldr	r1, [pc, #212]	; (8004930 <HAL_GPIO_Init+0x328>)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004866:	4b3d      	ldr	r3, [pc, #244]	; (800495c <HAL_GPIO_Init+0x354>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488a:	4a34      	ldr	r2, [pc, #208]	; (800495c <HAL_GPIO_Init+0x354>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004890:	4b32      	ldr	r3, [pc, #200]	; (800495c <HAL_GPIO_Init+0x354>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <HAL_GPIO_Init+0x354>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ba:	4b28      	ldr	r3, [pc, #160]	; (800495c <HAL_GPIO_Init+0x354>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_GPIO_Init+0x354>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e4:	4b1d      	ldr	r3, [pc, #116]	; (800495c <HAL_GPIO_Init+0x354>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_GPIO_Init+0x354>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	f67f ae86 	bls.w	8004628 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	40013800 	.word	0x40013800
 8004934:	40020000 	.word	0x40020000
 8004938:	40020400 	.word	0x40020400
 800493c:	40020800 	.word	0x40020800
 8004940:	40020c00 	.word	0x40020c00
 8004944:	40021000 	.word	0x40021000
 8004948:	40021400 	.word	0x40021400
 800494c:	40021800 	.word	0x40021800
 8004950:	40021c00 	.word	0x40021c00
 8004954:	40022000 	.word	0x40022000
 8004958:	40022400 	.word	0x40022400
 800495c:	40013c00 	.word	0x40013c00

08004960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e001      	b.n	8004982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049ac:	e003      	b.n	80049b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	041a      	lsls	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e07f      	b.n	8004ad6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fb54 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	; 0x24
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e006      	b.n	8004a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d104      	bne.n	8004a5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_I2C_Init+0x11c>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	02008000 	.word	0x02008000

08004ae4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
  }
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00f      	beq.n	8004b5a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b58:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00f      	beq.n	8004b84 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f043 0208 	orr.w	r2, r3, #8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00f      	beq.n	8004bae <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	f043 0202 	orr.w	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 030b 	and.w	r3, r3, #11
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fb77 	bl	80052b4 <I2C_ITError>
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	70fb      	strb	r3, [r7, #3]
 8004c02:	4613      	mov	r3, r2
 8004c04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <I2C_Slave_ISR_IT+0x24>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0e1      	b.n	8004e36 <I2C_Slave_ISR_IT+0x1e8>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004c8e:	6939      	ldr	r1, [r7, #16]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f9b5 	bl	8005000 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d04b      	beq.n	8004d38 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d046      	beq.n	8004d38 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d128      	bne.n	8004d06 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b28      	cmp	r3, #40	; 0x28
 8004cbe:	d108      	bne.n	8004cd2 <I2C_Slave_ISR_IT+0x84>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cc6:	d104      	bne.n	8004cd2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cc8:	6939      	ldr	r1, [r7, #16]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fa9e 	bl	800520c <I2C_ITListenCplt>
 8004cd0:	e031      	b.n	8004d36 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b29      	cmp	r3, #41	; 0x29
 8004cdc:	d10e      	bne.n	8004cfc <I2C_Slave_ISR_IT+0xae>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ce4:	d00a      	beq.n	8004cfc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2210      	movs	r2, #16
 8004cec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fbd7 	bl	80054a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f926 	bl	8004f46 <I2C_ITSlaveSeqCplt>
 8004cfa:	e01c      	b.n	8004d36 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2210      	movs	r2, #16
 8004d02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004d04:	e08f      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <I2C_Slave_ISR_IT+0xda>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d26:	d17e      	bne.n	8004e26 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fac0 	bl	80052b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d34:	e077      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1d8>
 8004d36:	e076      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d02f      	beq.n	8004da2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d02a      	beq.n	8004da2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d018      	beq.n	8004d88 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d14b      	bne.n	8004e2a <I2C_Slave_ISR_IT+0x1dc>
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d98:	d047      	beq.n	8004e2a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8d3 	bl	8004f46 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004da0:	e043      	b.n	8004e2a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004db6:	6939      	ldr	r1, [r7, #16]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f840 	bl	8004e3e <I2C_ITAddrCplt>
 8004dbe:	e035      	b.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d030      	beq.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02b      	beq.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	781a      	ldrb	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e0e:	e00d      	b.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e16:	d002      	beq.n	8004e1e <I2C_Slave_ISR_IT+0x1d0>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f891 	bl	8004f46 <I2C_ITSlaveSeqCplt>
 8004e24:	e002      	b.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004e26:	bf00      	nop
 8004e28:	e000      	b.n	8004e2c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004e2a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e54:	2b28      	cmp	r3, #40	; 0x28
 8004e56:	d16a      	bne.n	8004f2e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004e76:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e84:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004e92:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d138      	bne.n	8004f0e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004e9c:	897b      	ldrh	r3, [r7, #10]
 8004e9e:	09db      	lsrs	r3, r3, #7
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	89bb      	ldrh	r3, [r7, #12]
 8004ea4:	4053      	eors	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f003 0306 	and.w	r3, r3, #6
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d11c      	bne.n	8004eea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004eb0:	897b      	ldrh	r3, [r7, #10]
 8004eb2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d13b      	bne.n	8004f3e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004edc:	89ba      	ldrh	r2, [r7, #12]
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fe87 	bl	8004bf6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ee8:	e029      	b.n	8004f3e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004eea:	893b      	ldrh	r3, [r7, #8]
 8004eec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fb17 	bl	8005526 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f00:	89ba      	ldrh	r2, [r7, #12]
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe75 	bl	8004bf6 <HAL_I2C_AddrCallback>
}
 8004f0c:	e017      	b.n	8004f3e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fb07 	bl	8005526 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f20:	89ba      	ldrh	r2, [r7, #12]
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fe65 	bl	8004bf6 <HAL_I2C_AddrCallback>
}
 8004f2c:	e007      	b.n	8004f3e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2208      	movs	r2, #8
 8004f34:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e00c      	b.n	8004f94 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f92:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b29      	cmp	r3, #41	; 0x29
 8004f9e:	d112      	bne.n	8004fc6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2228      	movs	r2, #40	; 0x28
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2221      	movs	r2, #33	; 0x21
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fae:	2101      	movs	r1, #1
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fab8 	bl	8005526 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff fe05 	bl	8004bce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fc4:	e017      	b.n	8004ff6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd0:	d111      	bne.n	8004ff6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2228      	movs	r2, #40	; 0x28
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2222      	movs	r2, #34	; 0x22
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa9f 	bl	8005526 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fdf6 	bl	8004be2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2220      	movs	r2, #32
 8005024:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b21      	cmp	r3, #33	; 0x21
 800502a:	d002      	beq.n	8005032 <I2C_ITSlaveCplt+0x32>
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b29      	cmp	r3, #41	; 0x29
 8005030:	d108      	bne.n	8005044 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005032:	f248 0101 	movw	r1, #32769	; 0x8001
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa75 	bl	8005526 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2221      	movs	r2, #33	; 0x21
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
 8005042:	e00d      	b.n	8005060 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b22      	cmp	r3, #34	; 0x22
 8005048:	d002      	beq.n	8005050 <I2C_ITSlaveCplt+0x50>
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b2a      	cmp	r3, #42	; 0x2a
 800504e:	d107      	bne.n	8005060 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005050:	f248 0102 	movw	r1, #32770	; 0x8002
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fa66 	bl	8005526 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2222      	movs	r2, #34	; 0x22
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800506e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b62      	ldr	r3, [pc, #392]	; (8005204 <I2C_ITSlaveCplt+0x204>)
 800507c:	400b      	ands	r3, r1
 800507e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa0e 	bl	80054a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800509e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01f      	beq.n	80050e8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050b6:	e017      	b.n	80050e8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d012      	beq.n	80050e8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0304 	bic.w	r3, r3, #4
 80050f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f043 0204 	orr.w	r2, r3, #4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8a4 	bl	80052b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b28      	cmp	r3, #40	; 0x28
 8005176:	d141      	bne.n	80051fc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f846 	bl	800520c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005180:	e03c      	b.n	80051fc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800518a:	d014      	beq.n	80051b6 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff feda 	bl	8004f46 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <I2C_ITSlaveCplt+0x208>)
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fd2f 	bl	8004c12 <HAL_I2C_ListenCpltCallback>
}
 80051b4:	e022      	b.n	80051fc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b22      	cmp	r3, #34	; 0x22
 80051c0:	d10e      	bne.n	80051e0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fd02 	bl	8004be2 <HAL_I2C_SlaveRxCpltCallback>
}
 80051de:	e00d      	b.n	80051fc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fce9 	bl	8004bce <HAL_I2C_SlaveTxCpltCallback>
}
 80051fc:	bf00      	nop
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fe00e800 	.word	0xfe00e800
 8005208:	ffff0000 	.word	0xffff0000

0800520c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <I2C_ITListenCplt+0xa4>)
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d022      	beq.n	8005288 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	d012      	beq.n	8005288 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	f043 0204 	orr.w	r2, r3, #4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005288:	f248 0103 	movw	r1, #32771	; 0x8003
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f94a 	bl	8005526 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2210      	movs	r2, #16
 8005298:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fcb5 	bl	8004c12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	ffff0000 	.word	0xffff0000

080052b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a5d      	ldr	r2, [pc, #372]	; (8005448 <I2C_ITError+0x194>)
 80052d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b28      	cmp	r3, #40	; 0x28
 80052ea:	d005      	beq.n	80052f8 <I2C_ITError+0x44>
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b29      	cmp	r3, #41	; 0x29
 80052f0:	d002      	beq.n	80052f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b2a      	cmp	r3, #42	; 0x2a
 80052f6:	d10b      	bne.n	8005310 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052f8:	2103      	movs	r1, #3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f913 	bl	8005526 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2228      	movs	r2, #40	; 0x28
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a50      	ldr	r2, [pc, #320]	; (800544c <I2C_ITError+0x198>)
 800530c:	635a      	str	r2, [r3, #52]	; 0x34
 800530e:	e011      	b.n	8005334 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005310:	f248 0103 	movw	r1, #32771	; 0x8003
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f906 	bl	8005526 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b60      	cmp	r3, #96	; 0x60
 8005324:	d003      	beq.n	800532e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d039      	beq.n	80053b6 <I2C_ITError+0x102>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b11      	cmp	r3, #17
 8005346:	d002      	beq.n	800534e <I2C_ITError+0x9a>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b21      	cmp	r3, #33	; 0x21
 800534c:	d133      	bne.n	80053b6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800535c:	d107      	bne.n	800536e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800536c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff f888 	bl	8004488 <HAL_DMA_GetState>
 8005378:	4603      	mov	r3, r0
 800537a:	2b01      	cmp	r3, #1
 800537c:	d017      	beq.n	80053ae <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	4a33      	ldr	r2, [pc, #204]	; (8005450 <I2C_ITError+0x19c>)
 8005384:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fecc 	bl	8004130 <HAL_DMA_Abort_IT>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04d      	beq.n	800543a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053a8:	4610      	mov	r0, r2
 80053aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053ac:	e045      	b.n	800543a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f850 	bl	8005454 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053b4:	e041      	b.n	800543a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d039      	beq.n	8005432 <I2C_ITError+0x17e>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b12      	cmp	r3, #18
 80053c2:	d002      	beq.n	80053ca <I2C_ITError+0x116>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b22      	cmp	r3, #34	; 0x22
 80053c8:	d133      	bne.n	8005432 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d8:	d107      	bne.n	80053ea <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f84a 	bl	8004488 <HAL_DMA_GetState>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d017      	beq.n	800542a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <I2C_ITError+0x19c>)
 8005400:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe fe8e 	bl	8004130 <HAL_DMA_Abort_IT>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d011      	beq.n	800543e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005428:	e009      	b.n	800543e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f812 	bl	8005454 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005430:	e005      	b.n	800543e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f80e 	bl	8005454 <I2C_TreatErrorCallback>
  }
}
 8005438:	e002      	b.n	8005440 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800543e:	bf00      	nop
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	ffff0000 	.word	0xffff0000
 800544c:	08004c4f 	.word	0x08004c4f
 8005450:	080054eb 	.word	0x080054eb

08005454 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d10e      	bne.n	8005486 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fbdb 	bl	8004c3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005484:	e009      	b.n	800549a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fbc6 	bl	8004c26 <HAL_I2C_ErrorCallback>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d103      	bne.n	80054c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2200      	movs	r2, #0
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d007      	beq.n	80054de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	619a      	str	r2, [r3, #24]
  }
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	2200      	movs	r2, #0
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005514:	2200      	movs	r2, #0
 8005516:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff ff9b 	bl	8005454 <I2C_TreatErrorCallback>
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005536:	887b      	ldrh	r3, [r7, #2]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00f      	beq.n	8005560 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005546:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005554:	2b28      	cmp	r3, #40	; 0x28
 8005556:	d003      	beq.n	8005560 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800555e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00f      	beq.n	800558a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005570:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800557e:	2b28      	cmp	r3, #40	; 0x28
 8005580:	d003      	beq.n	800558a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005588:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800558a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da03      	bge.n	800559a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	2b10      	cmp	r3, #16
 800559e:	d103      	bne.n	80055a8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80055a8:	887b      	ldrh	r3, [r7, #2]
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d103      	bne.n	80055b6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f043 0320 	orr.w	r3, r3, #32
 80055b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d103      	bne.n	80055c4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	43da      	mvns	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d138      	bne.n	800566a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005602:	2302      	movs	r3, #2
 8005604:	e032      	b.n	800566c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2224      	movs	r2, #36	; 0x24
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005634:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800566a:	2302      	movs	r3, #2
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	d139      	bne.n	8005702 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005698:	2302      	movs	r3, #2
 800569a:	e033      	b.n	8005704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	; 0x24
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a04      	ldr	r2, [pc, #16]	; (800572c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800571a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571e:	6013      	str	r3, [r2, #0]
}
 8005720:	bf00      	nop
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40007000 	.word	0x40007000

08005730 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005744:	6413      	str	r3, [r2, #64]	; 0x40
 8005746:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800575e:	f7fd ff2b 	bl	80035b8 <HAL_GetTick>
 8005762:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005764:	e009      	b.n	800577a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005766:	f7fd ff27 	bl	80035b8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005774:	d901      	bls.n	800577a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e022      	b.n	80057c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005786:	d1ee      	bne.n	8005766 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0f      	ldr	r2, [pc, #60]	; (80057cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005792:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005794:	f7fd ff10 	bl	80035b8 <HAL_GetTick>
 8005798:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800579a:	e009      	b.n	80057b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800579c:	f7fd ff0c 	bl	80035b8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057aa:	d901      	bls.n	80057b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e007      	b.n	80057c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057b0:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057bc:	d1ee      	bne.n	800579c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40007000 	.word	0x40007000

080057d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e29b      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 8087 	beq.w	8005902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057f4:	4b96      	ldr	r3, [pc, #600]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d00c      	beq.n	800581a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005800:	4b93      	ldr	r3, [pc, #588]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 030c 	and.w	r3, r3, #12
 8005808:	2b08      	cmp	r3, #8
 800580a:	d112      	bne.n	8005832 <HAL_RCC_OscConfig+0x62>
 800580c:	4b90      	ldr	r3, [pc, #576]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005818:	d10b      	bne.n	8005832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581a:	4b8d      	ldr	r3, [pc, #564]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d06c      	beq.n	8005900 <HAL_RCC_OscConfig+0x130>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d168      	bne.n	8005900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e275      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583a:	d106      	bne.n	800584a <HAL_RCC_OscConfig+0x7a>
 800583c:	4b84      	ldr	r3, [pc, #528]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a83      	ldr	r2, [pc, #524]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	e02e      	b.n	80058a8 <HAL_RCC_OscConfig+0xd8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10c      	bne.n	800586c <HAL_RCC_OscConfig+0x9c>
 8005852:	4b7f      	ldr	r3, [pc, #508]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a7e      	ldr	r2, [pc, #504]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b7c      	ldr	r3, [pc, #496]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7b      	ldr	r2, [pc, #492]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e01d      	b.n	80058a8 <HAL_RCC_OscConfig+0xd8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005874:	d10c      	bne.n	8005890 <HAL_RCC_OscConfig+0xc0>
 8005876:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a75      	ldr	r2, [pc, #468]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800587c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a72      	ldr	r2, [pc, #456]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e00b      	b.n	80058a8 <HAL_RCC_OscConfig+0xd8>
 8005890:	4b6f      	ldr	r3, [pc, #444]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6e      	ldr	r2, [pc, #440]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4b6c      	ldr	r3, [pc, #432]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a6b      	ldr	r2, [pc, #428]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80058a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d013      	beq.n	80058d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fd fe82 	bl	80035b8 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b8:	f7fd fe7e 	bl	80035b8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b64      	cmp	r3, #100	; 0x64
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e229      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ca:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0xe8>
 80058d6:	e014      	b.n	8005902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fd fe6e 	bl	80035b8 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e0:	f7fd fe6a 	bl	80035b8 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e215      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f2:	4b57      	ldr	r3, [pc, #348]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x110>
 80058fe:	e000      	b.n	8005902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d069      	beq.n	80059e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800590e:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800591a:	4b4d      	ldr	r3, [pc, #308]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
 8005922:	2b08      	cmp	r3, #8
 8005924:	d11c      	bne.n	8005960 <HAL_RCC_OscConfig+0x190>
 8005926:	4b4a      	ldr	r3, [pc, #296]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d116      	bne.n	8005960 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_RCC_OscConfig+0x17a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d001      	beq.n	800594a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e1e9      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594a:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	493d      	ldr	r1, [pc, #244]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800595a:	4313      	orrs	r3, r2
 800595c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800595e:	e040      	b.n	80059e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d023      	beq.n	80059b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005968:	4b39      	ldr	r3, [pc, #228]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a38      	ldr	r2, [pc, #224]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fd fe20 	bl	80035b8 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800597c:	f7fd fe1c 	bl	80035b8 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1c7      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598e:	4b30      	ldr	r3, [pc, #192]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599a:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4929      	ldr	r1, [pc, #164]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
 80059ae:	e018      	b.n	80059e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b0:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7fd fdfc 	bl	80035b8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c4:	f7fd fdf8 	bl	80035b8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e1a3      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d6:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d038      	beq.n	8005a60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d019      	beq.n	8005a2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f6:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fd fdd9 	bl	80035b8 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0a:	f7fd fdd5 	bl	80035b8 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e180      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x23a>
 8005a28:	e01a      	b.n	8005a60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2e:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <HAL_RCC_OscConfig+0x280>)
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a36:	f7fd fdbf 	bl	80035b8 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7fd fdbb 	bl	80035b8 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d903      	bls.n	8005a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e166      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
 8005a50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a54:	4b92      	ldr	r3, [pc, #584]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ee      	bne.n	8005a3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a4 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6e:	4b8c      	ldr	r3, [pc, #560]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7a:	4b89      	ldr	r3, [pc, #548]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a88      	ldr	r2, [pc, #544]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
 8005a86:	4b86      	ldr	r3, [pc, #536]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a96:	4b83      	ldr	r3, [pc, #524]	; (8005ca4 <HAL_RCC_OscConfig+0x4d4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d118      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005aa2:	4b80      	ldr	r3, [pc, #512]	; (8005ca4 <HAL_RCC_OscConfig+0x4d4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a7f      	ldr	r2, [pc, #508]	; (8005ca4 <HAL_RCC_OscConfig+0x4d4>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aae:	f7fd fd83 	bl	80035b8 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab6:	f7fd fd7f 	bl	80035b8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b64      	cmp	r3, #100	; 0x64
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e12a      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac8:	4b76      	ldr	r3, [pc, #472]	; (8005ca4 <HAL_RCC_OscConfig+0x4d4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x31a>
 8005adc:	4b70      	ldr	r3, [pc, #448]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	4a6f      	ldr	r2, [pc, #444]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae8:	e02d      	b.n	8005b46 <HAL_RCC_OscConfig+0x376>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x33c>
 8005af2:	4b6b      	ldr	r3, [pc, #428]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	6713      	str	r3, [r2, #112]	; 0x70
 8005afe:	4b68      	ldr	r3, [pc, #416]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a67      	ldr	r2, [pc, #412]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	f023 0304 	bic.w	r3, r3, #4
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0a:	e01c      	b.n	8005b46 <HAL_RCC_OscConfig+0x376>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d10c      	bne.n	8005b2e <HAL_RCC_OscConfig+0x35e>
 8005b14:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	4a61      	ldr	r2, [pc, #388]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b1a:	f043 0304 	orr.w	r3, r3, #4
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b20:	4b5f      	ldr	r3, [pc, #380]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4a5e      	ldr	r2, [pc, #376]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2c:	e00b      	b.n	8005b46 <HAL_RCC_OscConfig+0x376>
 8005b2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a5b      	ldr	r2, [pc, #364]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	4b59      	ldr	r3, [pc, #356]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a58      	ldr	r2, [pc, #352]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b40:	f023 0304 	bic.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d015      	beq.n	8005b7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7fd fd33 	bl	80035b8 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7fd fd2f 	bl	80035b8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0d8      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ee      	beq.n	8005b56 <HAL_RCC_OscConfig+0x386>
 8005b78:	e014      	b.n	8005ba4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7a:	f7fd fd1d 	bl	80035b8 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b80:	e00a      	b.n	8005b98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fd fd19 	bl	80035b8 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0c2      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b98:	4b41      	ldr	r3, [pc, #260]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005baa:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80ae 	beq.w	8005d1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc0:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d06d      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d14b      	bne.n	8005c6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a31      	ldr	r2, [pc, #196]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fd fcea 	bl	80035b8 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fd fce6 	bl	80035b8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e091      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfa:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	071b      	lsls	r3, r3, #28
 8005c32:	491b      	ldr	r1, [pc, #108]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fd fcb8 	bl	80035b8 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fd fcb4 	bl	80035b8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e05f      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x47c>
 8005c6a:	e057      	b.n	8005d1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fd fc9e 	bl	80035b8 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fd fc9a 	bl	80035b8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e045      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c92:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <HAL_RCC_OscConfig+0x4d0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x4b0>
 8005c9e:	e03d      	b.n	8005d1c <HAL_RCC_OscConfig+0x54c>
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ca8:	4b1f      	ldr	r3, [pc, #124]	; (8005d28 <HAL_RCC_OscConfig+0x558>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d030      	beq.n	8005d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d129      	bne.n	8005d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d122      	bne.n	8005d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d119      	bne.n	8005d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d10f      	bne.n	8005d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d107      	bne.n	8005d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800

08005d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0d0      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d44:	4b6a      	ldr	r3, [pc, #424]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d910      	bls.n	8005d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d52:	4b67      	ldr	r3, [pc, #412]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 020f 	bic.w	r2, r3, #15
 8005d5a:	4965      	ldr	r1, [pc, #404]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b63      	ldr	r3, [pc, #396]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0b8      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d8c:	4b59      	ldr	r3, [pc, #356]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a58      	ldr	r2, [pc, #352]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da4:	4b53      	ldr	r3, [pc, #332]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a52      	ldr	r2, [pc, #328]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db0:	4b50      	ldr	r3, [pc, #320]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	494d      	ldr	r1, [pc, #308]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d040      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd6:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d115      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e07f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d107      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dee:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e073      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfe:	4b3d      	ldr	r3, [pc, #244]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e06b      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e0e:	4b39      	ldr	r3, [pc, #228]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f023 0203 	bic.w	r2, r3, #3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4936      	ldr	r1, [pc, #216]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e20:	f7fd fbca 	bl	80035b8 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e28:	f7fd fbc6 	bl	80035b8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e053      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3e:	4b2d      	ldr	r3, [pc, #180]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 020c 	and.w	r2, r3, #12
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d1eb      	bne.n	8005e28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d210      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5e:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 020f 	bic.w	r2, r3, #15
 8005e66:	4922      	ldr	r1, [pc, #136]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e032      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8c:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4916      	ldr	r1, [pc, #88]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eaa:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	490e      	ldr	r1, [pc, #56]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ebe:	f000 f821 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	490a      	ldr	r1, [pc, #40]	; (8005ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8005ed0:	5ccb      	ldrb	r3, [r1, r3]
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <HAL_RCC_ClockConfig+0x1d0>)
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_ClockConfig+0x1d4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fd fb26 	bl	8003530 <HAL_InitTick>

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40023c00 	.word	0x40023c00
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	0800d2e8 	.word	0x0800d2e8
 8005efc:	20000000 	.word	0x20000000
 8005f00:	20000008 	.word	0x20000008

08005f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f08:	b094      	sub	sp, #80	; 0x50
 8005f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f10:	2300      	movs	r3, #0
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f14:	2300      	movs	r3, #0
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f1c:	4b79      	ldr	r3, [pc, #484]	; (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d00d      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x40>
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	f200 80e1 	bhi.w	80060f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x34>
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d003      	beq.n	8005f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f36:	e0db      	b.n	80060f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f38:	4b73      	ldr	r3, [pc, #460]	; (8006108 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f3c:	e0db      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f3e:	4b73      	ldr	r3, [pc, #460]	; (800610c <HAL_RCC_GetSysClockFreq+0x208>)
 8005f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f42:	e0d8      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f44:	4b6f      	ldr	r3, [pc, #444]	; (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f4e:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d063      	beq.n	8006022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b6a      	ldr	r3, [pc, #424]	; (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6e:	2300      	movs	r3, #0
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
 8005f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	f04f 0000 	mov.w	r0, #0
 8005f7e:	f04f 0100 	mov.w	r1, #0
 8005f82:	0159      	lsls	r1, r3, #5
 8005f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f88:	0150      	lsls	r0, r2, #5
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4621      	mov	r1, r4
 8005f90:	1a51      	subs	r1, r2, r1
 8005f92:	6139      	str	r1, [r7, #16]
 8005f94:	4629      	mov	r1, r5
 8005f96:	eb63 0301 	sbc.w	r3, r3, r1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	018b      	lsls	r3, r1, #6
 8005fac:	4651      	mov	r1, sl
 8005fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	018a      	lsls	r2, r1, #6
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fd6:	4690      	mov	r8, r2
 8005fd8:	4699      	mov	r9, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	eb18 0303 	adds.w	r3, r8, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	eb49 0303 	adc.w	r3, r9, r3
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	024b      	lsls	r3, r1, #9
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006000:	4621      	mov	r1, r4
 8006002:	024a      	lsls	r2, r1, #9
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	2200      	movs	r2, #0
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
 800600e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006014:	f7fa fb28 	bl	8000668 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4613      	mov	r3, r2
 800601e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006020:	e058      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006022:	4b38      	ldr	r3, [pc, #224]	; (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	2200      	movs	r2, #0
 800602a:	4618      	mov	r0, r3
 800602c:	4611      	mov	r1, r2
 800602e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
 8006038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	f04f 0000 	mov.w	r0, #0
 8006044:	f04f 0100 	mov.w	r1, #0
 8006048:	0159      	lsls	r1, r3, #5
 800604a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800604e:	0150      	lsls	r0, r2, #5
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4641      	mov	r1, r8
 8006056:	ebb2 0a01 	subs.w	sl, r2, r1
 800605a:	4649      	mov	r1, r9
 800605c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800606c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006074:	ebb2 040a 	subs.w	r4, r2, sl
 8006078:	eb63 050b 	sbc.w	r5, r3, fp
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	00eb      	lsls	r3, r5, #3
 8006086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800608a:	00e2      	lsls	r2, r4, #3
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	4643      	mov	r3, r8
 8006092:	18e3      	adds	r3, r4, r3
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	464b      	mov	r3, r9
 8006098:	eb45 0303 	adc.w	r3, r5, r3
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060aa:	4629      	mov	r1, r5
 80060ac:	028b      	lsls	r3, r1, #10
 80060ae:	4621      	mov	r1, r4
 80060b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060b4:	4621      	mov	r1, r4
 80060b6:	028a      	lsls	r2, r1, #10
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060be:	2200      	movs	r2, #0
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	61fa      	str	r2, [r7, #28]
 80060c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c8:	f7fa face 	bl	8000668 <__aeabi_uldivmod>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4613      	mov	r3, r2
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	3301      	adds	r3, #1
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80060e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060ee:	e002      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <HAL_RCC_GetSysClockFreq+0x204>)
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3750      	adds	r7, #80	; 0x50
 80060fc:	46bd      	mov	sp, r7
 80060fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800
 8006108:	00f42400 	.word	0x00f42400
 800610c:	007a1200 	.word	0x007a1200

08006110 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_RCC_GetHCLKFreq+0x14>)
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000000 	.word	0x20000000

08006128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800612c:	f7ff fff0 	bl	8006110 <HAL_RCC_GetHCLKFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	0a9b      	lsrs	r3, r3, #10
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	4903      	ldr	r1, [pc, #12]	; (800614c <HAL_RCC_GetPCLK1Freq+0x24>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40023800 	.word	0x40023800
 800614c:	0800d2f8 	.word	0x0800d2f8

08006150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006154:	f7ff ffdc 	bl	8006110 <HAL_RCC_GetHCLKFreq>
 8006158:	4602      	mov	r2, r0
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	0b5b      	lsrs	r3, r3, #13
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	4903      	ldr	r1, [pc, #12]	; (8006174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006166:	5ccb      	ldrb	r3, [r1, r3]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40023800 	.word	0x40023800
 8006174:	0800d2f8 	.word	0x0800d2f8

08006178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d012      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061a0:	4b69      	ldr	r3, [pc, #420]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4a68      	ldr	r2, [pc, #416]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061aa:	6093      	str	r3, [r2, #8]
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	4964      	ldr	r1, [pc, #400]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d017      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061d2:	4b5d      	ldr	r3, [pc, #372]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e0:	4959      	ldr	r1, [pc, #356]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f0:	d101      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80061f2:	2301      	movs	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d017      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800620e:	4b4e      	ldr	r3, [pc, #312]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	494a      	ldr	r1, [pc, #296]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800622c:	d101      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800622e:	2301      	movs	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800623a:	2301      	movs	r3, #1
 800623c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 808b 	beq.w	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800625c:	4b3a      	ldr	r3, [pc, #232]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	4a39      	ldr	r2, [pc, #228]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006266:	6413      	str	r3, [r2, #64]	; 0x40
 8006268:	4b37      	ldr	r3, [pc, #220]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006274:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a34      	ldr	r2, [pc, #208]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800627a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006280:	f7fd f99a 	bl	80035b8 <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006286:	e008      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006288:	f7fd f996 	bl	80035b8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	; 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e38f      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800629a:	4b2c      	ldr	r3, [pc, #176]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062a6:	4b28      	ldr	r3, [pc, #160]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d035      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d02e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062c4:	4b20      	ldr	r3, [pc, #128]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062ce:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062da:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a1a      	ldr	r2, [pc, #104]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80062e6:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d114      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fd f95e 	bl	80035b8 <HAL_GetTick>
 80062fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fe:	e00a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fd f95a 	bl	80035b8 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e351      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ee      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800632e:	d111      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800633c:	4b04      	ldr	r3, [pc, #16]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800633e:	400b      	ands	r3, r1
 8006340:	4901      	ldr	r1, [pc, #4]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
 8006346:	e00b      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006348:	40023800 	.word	0x40023800
 800634c:	40007000 	.word	0x40007000
 8006350:	0ffffcff 	.word	0x0ffffcff
 8006354:	4bac      	ldr	r3, [pc, #688]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4aab      	ldr	r2, [pc, #684]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800635a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800635e:	6093      	str	r3, [r2, #8]
 8006360:	4ba9      	ldr	r3, [pc, #676]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636c:	49a6      	ldr	r1, [pc, #664]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800636e:	4313      	orrs	r3, r2
 8006370:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d010      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800637e:	4ba2      	ldr	r3, [pc, #648]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006384:	4aa0      	ldr	r2, [pc, #640]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800638a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800638e:	4b9e      	ldr	r3, [pc, #632]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006390:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	499b      	ldr	r1, [pc, #620]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ac:	4b96      	ldr	r3, [pc, #600]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ba:	4993      	ldr	r1, [pc, #588]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063ce:	4b8e      	ldr	r3, [pc, #568]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063dc:	498a      	ldr	r1, [pc, #552]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063f0:	4b85      	ldr	r3, [pc, #532]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fe:	4982      	ldr	r1, [pc, #520]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006412:	4b7d      	ldr	r3, [pc, #500]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006420:	4979      	ldr	r1, [pc, #484]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006434:	4b74      	ldr	r3, [pc, #464]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f023 0203 	bic.w	r2, r3, #3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	4971      	ldr	r1, [pc, #452]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006456:	4b6c      	ldr	r3, [pc, #432]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645c:	f023 020c 	bic.w	r2, r3, #12
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006464:	4968      	ldr	r1, [pc, #416]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006478:	4b63      	ldr	r3, [pc, #396]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006486:	4960      	ldr	r1, [pc, #384]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800649a:	4b5b      	ldr	r3, [pc, #364]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	4957      	ldr	r1, [pc, #348]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064bc:	4b52      	ldr	r3, [pc, #328]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	494f      	ldr	r1, [pc, #316]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80064de:	4b4a      	ldr	r3, [pc, #296]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	4946      	ldr	r1, [pc, #280]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006500:	4b41      	ldr	r3, [pc, #260]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	493e      	ldr	r1, [pc, #248]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006522:	4b39      	ldr	r3, [pc, #228]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006528:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	4935      	ldr	r1, [pc, #212]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006544:	4b30      	ldr	r3, [pc, #192]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006552:	492d      	ldr	r1, [pc, #180]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d011      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006566:	4b28      	ldr	r3, [pc, #160]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006574:	4924      	ldr	r1, [pc, #144]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006584:	d101      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006586:	2301      	movs	r3, #1
 8006588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006596:	2301      	movs	r3, #1
 8006598:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065a6:	4b18      	ldr	r3, [pc, #96]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b4:	4914      	ldr	r1, [pc, #80]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d8:	490b      	ldr	r1, [pc, #44]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00f      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fc:	4902      	ldr	r1, [pc, #8]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006604:	e002      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006618:	4b8a      	ldr	r3, [pc, #552]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800661a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006628:	4986      	ldr	r1, [pc, #536]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800663c:	4b81      	ldr	r3, [pc, #516]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800663e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006642:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664c:	497d      	ldr	r1, [pc, #500]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d006      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80d6 	beq.w	8006814 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006668:	4b76      	ldr	r3, [pc, #472]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a75      	ldr	r2, [pc, #468]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800666e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006674:	f7fc ffa0 	bl	80035b8 <HAL_GetTick>
 8006678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800667c:	f7fc ff9c 	bl	80035b8 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e195      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800668e:	4b6d      	ldr	r3, [pc, #436]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d021      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d11d      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066ae:	4b65      	ldr	r3, [pc, #404]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066bc:	4b61      	ldr	r3, [pc, #388]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c2:	0e1b      	lsrs	r3, r3, #24
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	019a      	lsls	r2, r3, #6
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	071b      	lsls	r3, r3, #28
 80066e2:	4958      	ldr	r1, [pc, #352]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02e      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006714:	d129      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006716:	4b4b      	ldr	r3, [pc, #300]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006724:	4b47      	ldr	r3, [pc, #284]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672a:	0f1b      	lsrs	r3, r3, #28
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	019a      	lsls	r2, r3, #6
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	071b      	lsls	r3, r3, #28
 800674a:	493e      	ldr	r1, [pc, #248]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006752:	4b3c      	ldr	r3, [pc, #240]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006758:	f023 021f 	bic.w	r2, r3, #31
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	3b01      	subs	r3, #1
 8006762:	4938      	ldr	r1, [pc, #224]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01d      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006776:	4b33      	ldr	r3, [pc, #204]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800677c:	0e1b      	lsrs	r3, r3, #24
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006784:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678a:	0f1b      	lsrs	r3, r3, #28
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	019a      	lsls	r2, r3, #6
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	431a      	orrs	r2, r3
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	4926      	ldr	r1, [pc, #152]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d011      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	019a      	lsls	r2, r3, #6
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	061b      	lsls	r3, r3, #24
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	491a      	ldr	r1, [pc, #104]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067e2:	4b18      	ldr	r3, [pc, #96]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a17      	ldr	r2, [pc, #92]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ee:	f7fc fee3 	bl	80035b8 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067f4:	e008      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067f6:	f7fc fedf 	bl	80035b8 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b64      	cmp	r3, #100	; 0x64
 8006802:	d901      	bls.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e0d8      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b01      	cmp	r3, #1
 8006818:	f040 80ce 	bne.w	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006828:	f7fc fec6 	bl	80035b8 <HAL_GetTick>
 800682c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800682e:	e00b      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006830:	f7fc fec2 	bl	80035b8 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b64      	cmp	r3, #100	; 0x64
 800683c:	d904      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e0bb      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006848:	4b5e      	ldr	r3, [pc, #376]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006854:	d0ec      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006872:	2b00      	cmp	r3, #0
 8006874:	d02e      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d12a      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800687e:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800688c:	4b4d      	ldr	r3, [pc, #308]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800688e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006892:	0f1b      	lsrs	r3, r3, #28
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	019a      	lsls	r2, r3, #6
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	061b      	lsls	r3, r3, #24
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	071b      	lsls	r3, r3, #28
 80068b2:	4944      	ldr	r1, [pc, #272]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068ba:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	493d      	ldr	r1, [pc, #244]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d022      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e8:	d11d      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068f8:	4b32      	ldr	r3, [pc, #200]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	0f1b      	lsrs	r3, r3, #28
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	019a      	lsls	r2, r3, #6
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	041b      	lsls	r3, r3, #16
 8006912:	431a      	orrs	r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	071b      	lsls	r3, r3, #28
 800691e:	4929      	ldr	r1, [pc, #164]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d028      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	0e1b      	lsrs	r3, r3, #24
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006940:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	019a      	lsls	r2, r3, #6
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	431a      	orrs	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	071b      	lsls	r3, r3, #28
 8006966:	4917      	ldr	r1, [pc, #92]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4911      	ldr	r1, [pc, #68]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a0e      	ldr	r2, [pc, #56]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800698a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006990:	f7fc fe12 	bl	80035b8 <HAL_GetTick>
 8006994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006998:	f7fc fe0e 	bl	80035b8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	; 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e007      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069b6:	d1ef      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023800 	.word	0x40023800

080069c8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e01c      	b.n	8006a14 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	795b      	ldrb	r3, [r3, #5]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fb f982 	bl	8001cf4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0204 	orr.w	r2, r2, #4
 8006a04:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e09d      	b.n	8006b6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d108      	bne.n	8006a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3e:	d009      	beq.n	8006a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	61da      	str	r2, [r3, #28]
 8006a46:	e005      	b.n	8006a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fb f9b2 	bl	8001dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a94:	d902      	bls.n	8006a9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e002      	b.n	8006aa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006aaa:	d007      	beq.n	8006abc <HAL_SPI_Init+0xa0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	ea42 0103 	orr.w	r1, r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	f003 0204 	and.w	r2, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b38:	ea42 0103 	orr.w	r1, r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_SPI_Transmit+0x22>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e158      	b.n	8006e46 <HAL_SPI_Transmit+0x2d4>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b9c:	f7fc fd0c 	bl	80035b8 <HAL_GetTick>
 8006ba0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d002      	beq.n	8006bb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bb6:	e13d      	b.n	8006e34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_SPI_Transmit+0x52>
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bc8:	e134      	b.n	8006e34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2203      	movs	r2, #3
 8006bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	88fa      	ldrh	r2, [r7, #6]
 8006be2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	88fa      	ldrh	r2, [r7, #6]
 8006be8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c14:	d10f      	bne.n	8006c36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d007      	beq.n	8006c54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c5c:	d94b      	bls.n	8006cf6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_SPI_Transmit+0xfa>
 8006c66:	8afb      	ldrh	r3, [r7, #22]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d13e      	bne.n	8006cea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	881a      	ldrh	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	1c9a      	adds	r2, r3, #2
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c90:	e02b      	b.n	8006cea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d112      	bne.n	8006cc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	1c9a      	adds	r2, r3, #2
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc4:	e011      	b.n	8006cea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc6:	f7fc fc77 	bl	80035b8 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d803      	bhi.n	8006cde <HAL_SPI_Transmit+0x16c>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SPI_Transmit+0x172>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ce8:	e0a4      	b.n	8006e34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ce      	bne.n	8006c92 <HAL_SPI_Transmit+0x120>
 8006cf4:	e07c      	b.n	8006df0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x192>
 8006cfe:	8afb      	ldrh	r3, [r7, #22]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d170      	bne.n	8006de6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d912      	bls.n	8006d34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	1c9a      	adds	r2, r3, #2
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b02      	subs	r3, #2
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d32:	e058      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d5a:	e044      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d12b      	bne.n	8006dc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d912      	bls.n	8006d9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b02      	subs	r3, #2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d98:	e025      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dc0:	e011      	b.n	8006de6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc2:	f7fc fbf9 	bl	80035b8 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d803      	bhi.n	8006dda <HAL_SPI_Transmit+0x268>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d102      	bne.n	8006de0 <HAL_SPI_Transmit+0x26e>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006de4:	e026      	b.n	8006e34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1b5      	bne.n	8006d5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f949 	bl	800708c <SPI_EndRxTxTransaction>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e000      	b.n	8006e34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e60:	f7fc fbaa 	bl	80035b8 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e70:	f7fc fba2 	bl	80035b8 <HAL_GetTick>
 8006e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e76:	4b39      	ldr	r3, [pc, #228]	; (8006f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	015b      	lsls	r3, r3, #5
 8006e7c:	0d1b      	lsrs	r3, r3, #20
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e86:	e054      	b.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d050      	beq.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e90:	f7fc fb92 	bl	80035b8 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d902      	bls.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d13d      	bne.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ebe:	d111      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec8:	d004      	beq.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed2:	d107      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eec:	d10f      	bne.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e017      	b.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d19b      	bne.n	8006e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3720      	adds	r7, #32
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000000 	.word	0x20000000

08006f60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f72:	f7fc fb21 	bl	80035b8 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f82:	f7fc fb19 	bl	80035b8 <HAL_GetTick>
 8006f86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f90:	4b3d      	ldr	r3, [pc, #244]	; (8007088 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	00da      	lsls	r2, r3, #3
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	0d1b      	lsrs	r3, r3, #20
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fa8:	e060      	b.n	800706c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fb0:	d107      	bne.n	8006fc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d050      	beq.n	800706c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fca:	f7fc faf5 	bl	80035b8 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d902      	bls.n	8006fe0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d13d      	bne.n	800705c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff8:	d111      	bne.n	800701e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007002:	d004      	beq.n	800700e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700c:	d107      	bne.n	800701e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007026:	d10f      	bne.n	8007048 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007046:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e010      	b.n	800707e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	3b01      	subs	r3, #1
 800706a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d196      	bne.n	8006faa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3728      	adds	r7, #40	; 0x28
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000000 	.word	0x20000000

0800708c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff ff5b 	bl	8006f60 <SPI_WaitFifoStateUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b4:	f043 0220 	orr.w	r2, r3, #32
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e046      	b.n	800714e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <SPI_EndRxTxTransaction+0xcc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a25      	ldr	r2, [pc, #148]	; (800715c <SPI_EndRxTxTransaction+0xd0>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	0d5b      	lsrs	r3, r3, #21
 80070cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070de:	d112      	bne.n	8007106 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	2180      	movs	r1, #128	; 0x80
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff feb0 	bl	8006e50 <SPI_WaitFlagStateUntilTimeout>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d016      	beq.n	8007124 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e023      	b.n	800714e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3b01      	subs	r3, #1
 8007110:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711c:	2b80      	cmp	r3, #128	; 0x80
 800711e:	d0f2      	beq.n	8007106 <SPI_EndRxTxTransaction+0x7a>
 8007120:	e000      	b.n	8007124 <SPI_EndRxTxTransaction+0x98>
        break;
 8007122:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff ff15 	bl	8006f60 <SPI_WaitFifoStateUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007140:	f043 0220 	orr.w	r2, r3, #32
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e000      	b.n	800714e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000000 	.word	0x20000000
 800715c:	165e9f81 	.word	0x165e9f81

08007160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e049      	b.n	8007206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fb f8be 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f000 fbc6 	bl	8007930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e049      	b.n	80072b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f841 	bl	80072bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f000 fb6f 	bl	8007930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d122      	bne.n	800732c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d11b      	bne.n	800732c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0202 	mvn.w	r2, #2
 80072fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 faee 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fae0 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 faf1 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b04      	cmp	r3, #4
 8007338:	d122      	bne.n	8007380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b04      	cmp	r3, #4
 8007346:	d11b      	bne.n	8007380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0204 	mvn.w	r2, #4
 8007350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fac4 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 800736c:	e005      	b.n	800737a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fab6 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fac7 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b08      	cmp	r3, #8
 800738c:	d122      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b08      	cmp	r3, #8
 800739a:	d11b      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0208 	mvn.w	r2, #8
 80073a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa9a 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 80073c0:	e005      	b.n	80073ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa8c 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa9d 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b10      	cmp	r3, #16
 80073e0:	d122      	bne.n	8007428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0210 	mvn.w	r2, #16
 80073f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2208      	movs	r2, #8
 80073fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa70 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa62 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa73 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10e      	bne.n	8007454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d107      	bne.n	8007454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0201 	mvn.w	r2, #1
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa3c 	bl	80078cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	2b80      	cmp	r3, #128	; 0x80
 8007460:	d10e      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746c:	2b80      	cmp	r3, #128	; 0x80
 800746e:	d107      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fe88 	bl	8008190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748e:	d10e      	bne.n	80074ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d107      	bne.n	80074ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fe7b 	bl	80081a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d10e      	bne.n	80074da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d107      	bne.n	80074da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa21 	bl	800791c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d10e      	bne.n	8007506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d107      	bne.n	8007506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f06f 0220 	mvn.w	r2, #32
 80074fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fe3b 	bl	800817c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800752a:	2302      	movs	r3, #2
 800752c:	e0ff      	b.n	800772e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b14      	cmp	r3, #20
 800753a:	f200 80f0 	bhi.w	800771e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007599 	.word	0x08007599
 8007548:	0800771f 	.word	0x0800771f
 800754c:	0800771f 	.word	0x0800771f
 8007550:	0800771f 	.word	0x0800771f
 8007554:	080075d9 	.word	0x080075d9
 8007558:	0800771f 	.word	0x0800771f
 800755c:	0800771f 	.word	0x0800771f
 8007560:	0800771f 	.word	0x0800771f
 8007564:	0800761b 	.word	0x0800761b
 8007568:	0800771f 	.word	0x0800771f
 800756c:	0800771f 	.word	0x0800771f
 8007570:	0800771f 	.word	0x0800771f
 8007574:	0800765b 	.word	0x0800765b
 8007578:	0800771f 	.word	0x0800771f
 800757c:	0800771f 	.word	0x0800771f
 8007580:	0800771f 	.word	0x0800771f
 8007584:	0800769d 	.word	0x0800769d
 8007588:	0800771f 	.word	0x0800771f
 800758c:	0800771f 	.word	0x0800771f
 8007590:	0800771f 	.word	0x0800771f
 8007594:	080076dd 	.word	0x080076dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fa66 	bl	8007a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0208 	orr.w	r2, r2, #8
 80075b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0204 	bic.w	r2, r2, #4
 80075c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6999      	ldr	r1, [r3, #24]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	619a      	str	r2, [r3, #24]
      break;
 80075d6:	e0a5      	b.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fab8 	bl	8007b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6999      	ldr	r1, [r3, #24]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	021a      	lsls	r2, r3, #8
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	619a      	str	r2, [r3, #24]
      break;
 8007618:	e084      	b.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fb0f 	bl	8007c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0208 	orr.w	r2, r2, #8
 8007634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0204 	bic.w	r2, r2, #4
 8007644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69d9      	ldr	r1, [r3, #28]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	61da      	str	r2, [r3, #28]
      break;
 8007658:	e064      	b.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fb65 	bl	8007d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69d9      	ldr	r1, [r3, #28]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	021a      	lsls	r2, r3, #8
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	61da      	str	r2, [r3, #28]
      break;
 800769a:	e043      	b.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fb9c 	bl	8007de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0208 	orr.w	r2, r2, #8
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0204 	bic.w	r2, r2, #4
 80076c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076da:	e023      	b.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fbce 	bl	8007e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	021a      	lsls	r2, r3, #8
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800771c:	e002      	b.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
      break;
 8007722:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop

08007738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIM_ConfigClockSource+0x1c>
 8007750:	2302      	movs	r3, #2
 8007752:	e0b4      	b.n	80078be <HAL_TIM_ConfigClockSource+0x186>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	4b56      	ldr	r3, [pc, #344]	; (80078c8 <HAL_TIM_ConfigClockSource+0x190>)
 8007770:	4013      	ands	r3, r2
 8007772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800778c:	d03e      	beq.n	800780c <HAL_TIM_ConfigClockSource+0xd4>
 800778e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007792:	f200 8087 	bhi.w	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 8007796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779a:	f000 8086 	beq.w	80078aa <HAL_TIM_ConfigClockSource+0x172>
 800779e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a2:	d87f      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b70      	cmp	r3, #112	; 0x70
 80077a6:	d01a      	beq.n	80077de <HAL_TIM_ConfigClockSource+0xa6>
 80077a8:	2b70      	cmp	r3, #112	; 0x70
 80077aa:	d87b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b60      	cmp	r3, #96	; 0x60
 80077ae:	d050      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x11a>
 80077b0:	2b60      	cmp	r3, #96	; 0x60
 80077b2:	d877      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b50      	cmp	r3, #80	; 0x50
 80077b6:	d03c      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0xfa>
 80077b8:	2b50      	cmp	r3, #80	; 0x50
 80077ba:	d873      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d058      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x13a>
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d86f      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077c4:	2b30      	cmp	r3, #48	; 0x30
 80077c6:	d064      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077c8:	2b30      	cmp	r3, #48	; 0x30
 80077ca:	d86b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d060      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d867      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d05c      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d05a      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077dc:	e062      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077ee:	f000 fc17 	bl	8008020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	609a      	str	r2, [r3, #8]
      break;
 800780a:	e04f      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800781c:	f000 fc00 	bl	8008020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800782e:	609a      	str	r2, [r3, #8]
      break;
 8007830:	e03c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800783e:	461a      	mov	r2, r3
 8007840:	f000 fb74 	bl	8007f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2150      	movs	r1, #80	; 0x50
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fbcd 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007850:	e02c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800785e:	461a      	mov	r2, r3
 8007860:	f000 fb93 	bl	8007f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2160      	movs	r1, #96	; 0x60
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fbbd 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007870:	e01c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787e:	461a      	mov	r2, r3
 8007880:	f000 fb54 	bl	8007f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2140      	movs	r1, #64	; 0x40
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fbad 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007890:	e00c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f000 fba4 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 80078a2:	e003      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
      break;
 80078a8:	e000      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	fffeff88 	.word	0xfffeff88

080078cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a40      	ldr	r2, [pc, #256]	; (8007a44 <TIM_Base_SetConfig+0x114>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794e:	d00f      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a3d      	ldr	r2, [pc, #244]	; (8007a48 <TIM_Base_SetConfig+0x118>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00b      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a3c      	ldr	r2, [pc, #240]	; (8007a4c <TIM_Base_SetConfig+0x11c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d007      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a3b      	ldr	r2, [pc, #236]	; (8007a50 <TIM_Base_SetConfig+0x120>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a3a      	ldr	r2, [pc, #232]	; (8007a54 <TIM_Base_SetConfig+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a2f      	ldr	r2, [pc, #188]	; (8007a44 <TIM_Base_SetConfig+0x114>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02b      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d027      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a2c      	ldr	r2, [pc, #176]	; (8007a48 <TIM_Base_SetConfig+0x118>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d023      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a2b      	ldr	r2, [pc, #172]	; (8007a4c <TIM_Base_SetConfig+0x11c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01f      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2a      	ldr	r2, [pc, #168]	; (8007a50 <TIM_Base_SetConfig+0x120>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01b      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a29      	ldr	r2, [pc, #164]	; (8007a54 <TIM_Base_SetConfig+0x124>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d017      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a28      	ldr	r2, [pc, #160]	; (8007a58 <TIM_Base_SetConfig+0x128>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a27      	ldr	r2, [pc, #156]	; (8007a5c <TIM_Base_SetConfig+0x12c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <TIM_Base_SetConfig+0x130>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a25      	ldr	r2, [pc, #148]	; (8007a64 <TIM_Base_SetConfig+0x134>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a24      	ldr	r2, [pc, #144]	; (8007a68 <TIM_Base_SetConfig+0x138>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a23      	ldr	r2, [pc, #140]	; (8007a6c <TIM_Base_SetConfig+0x13c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d108      	bne.n	80079f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <TIM_Base_SetConfig+0x114>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_Base_SetConfig+0xf8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a0c      	ldr	r2, [pc, #48]	; (8007a54 <TIM_Base_SetConfig+0x124>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d103      	bne.n	8007a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	615a      	str	r2, [r3, #20]
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800
 8007a64:	40001800 	.word	0x40001800
 8007a68:	40001c00 	.word	0x40001c00
 8007a6c:	40002000 	.word	0x40002000

08007a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0201 	bic.w	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4b2b      	ldr	r3, [pc, #172]	; (8007b48 <TIM_OC1_SetConfig+0xd8>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f023 0302 	bic.w	r3, r3, #2
 8007ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <TIM_OC1_SetConfig+0xdc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC1_SetConfig+0x64>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <TIM_OC1_SetConfig+0xe0>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d10c      	bne.n	8007aee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0308 	bic.w	r3, r3, #8
 8007ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 0304 	bic.w	r3, r3, #4
 8007aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <TIM_OC1_SetConfig+0xdc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC1_SetConfig+0x8e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <TIM_OC1_SetConfig+0xe0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d111      	bne.n	8007b22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	fffeff8f 	.word	0xfffeff8f
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400

08007b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f023 0210 	bic.w	r2, r3, #16
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <TIM_OC2_SetConfig+0xe4>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0320 	bic.w	r3, r3, #32
 8007b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a23      	ldr	r2, [pc, #140]	; (8007c3c <TIM_OC2_SetConfig+0xe8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC2_SetConfig+0x68>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <TIM_OC2_SetConfig+0xec>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d10d      	bne.n	8007bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <TIM_OC2_SetConfig+0xe8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC2_SetConfig+0x94>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <TIM_OC2_SetConfig+0xec>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d113      	bne.n	8007c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	feff8fff 	.word	0xfeff8fff
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40010400 	.word	0x40010400

08007c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <TIM_OC3_SetConfig+0xe0>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a22      	ldr	r2, [pc, #136]	; (8007d28 <TIM_OC3_SetConfig+0xe4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d003      	beq.n	8007caa <TIM_OC3_SetConfig+0x66>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a21      	ldr	r2, [pc, #132]	; (8007d2c <TIM_OC3_SetConfig+0xe8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10d      	bne.n	8007cc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <TIM_OC3_SetConfig+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d003      	beq.n	8007cd6 <TIM_OC3_SetConfig+0x92>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a16      	ldr	r2, [pc, #88]	; (8007d2c <TIM_OC3_SetConfig+0xe8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d113      	bne.n	8007cfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	621a      	str	r2, [r3, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	fffeff8f 	.word	0xfffeff8f
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40010400 	.word	0x40010400

08007d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <TIM_OC4_SetConfig+0xa4>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	031b      	lsls	r3, r3, #12
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a13      	ldr	r2, [pc, #76]	; (8007dd8 <TIM_OC4_SetConfig+0xa8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_OC4_SetConfig+0x68>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a12      	ldr	r2, [pc, #72]	; (8007ddc <TIM_OC4_SetConfig+0xac>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d109      	bne.n	8007dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	019b      	lsls	r3, r3, #6
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	feff8fff 	.word	0xfeff8fff
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40010400 	.word	0x40010400

08007de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <TIM_OC5_SetConfig+0x98>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <TIM_OC5_SetConfig+0x9c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_OC5_SetConfig+0x5e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a11      	ldr	r2, [pc, #68]	; (8007e80 <TIM_OC5_SetConfig+0xa0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d109      	bne.n	8007e52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	621a      	str	r2, [r3, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	fffeff8f 	.word	0xfffeff8f
 8007e7c:	40010000 	.word	0x40010000
 8007e80:	40010400 	.word	0x40010400

08007e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4b1c      	ldr	r3, [pc, #112]	; (8007f20 <TIM_OC6_SetConfig+0x9c>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	021b      	lsls	r3, r3, #8
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	051b      	lsls	r3, r3, #20
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <TIM_OC6_SetConfig+0xa0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_OC6_SetConfig+0x60>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a12      	ldr	r2, [pc, #72]	; (8007f28 <TIM_OC6_SetConfig+0xa4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d109      	bne.n	8007ef8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	029b      	lsls	r3, r3, #10
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	feff8fff 	.word	0xfeff8fff
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40010400 	.word	0x40010400

08007f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f023 0201 	bic.w	r2, r3, #1
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f023 030a 	bic.w	r3, r3, #10
 8007f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b087      	sub	sp, #28
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f023 0210 	bic.w	r2, r3, #16
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	031b      	lsls	r3, r3, #12
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	f043 0307 	orr.w	r3, r3, #7
 800800c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	609a      	str	r2, [r3, #8]
}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800803a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	431a      	orrs	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4313      	orrs	r3, r2
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	609a      	str	r2, [r3, #8]
}
 8008054:	bf00      	nop
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008074:	2302      	movs	r3, #2
 8008076:	e06d      	b.n	8008154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a30      	ldr	r2, [pc, #192]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a2f      	ldr	r2, [pc, #188]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d108      	bne.n	80080be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a20      	ldr	r2, [pc, #128]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d022      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ea:	d01d      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1d      	ldr	r2, [pc, #116]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d018      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1c      	ldr	r2, [pc, #112]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d013      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00e      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a15      	ldr	r2, [pc, #84]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d009      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a16      	ldr	r2, [pc, #88]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d004      	beq.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a15      	ldr	r2, [pc, #84]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d10c      	bne.n	8008142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800812e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	40010000 	.word	0x40010000
 8008164:	40010400 	.word	0x40010400
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014000 	.word	0x40014000
 8008178:	40001800 	.word	0x40001800

0800817c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e040      	b.n	800824c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fa f96e 	bl	80024bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2224      	movs	r2, #36	; 0x24
 80081e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f82c 	bl	8008254 <UART_SetConfig>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e022      	b.n	800824c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa84 	bl	800871c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fb0b 	bl	8008860 <UART_CheckIdleState>
 800824a:	4603      	mov	r3, r0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4ba6      	ldr	r3, [pc, #664]	; (8008518 <UART_SetConfig+0x2c4>)
 8008280:	4013      	ands	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	6979      	ldr	r1, [r7, #20]
 8008288:	430b      	orrs	r3, r1
 800828a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a94      	ldr	r2, [pc, #592]	; (800851c <UART_SetConfig+0x2c8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d120      	bne.n	8008312 <UART_SetConfig+0xbe>
 80082d0:	4b93      	ldr	r3, [pc, #588]	; (8008520 <UART_SetConfig+0x2cc>)
 80082d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d816      	bhi.n	800830c <UART_SetConfig+0xb8>
 80082de:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <UART_SetConfig+0x90>)
 80082e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e4:	080082f5 	.word	0x080082f5
 80082e8:	08008301 	.word	0x08008301
 80082ec:	080082fb 	.word	0x080082fb
 80082f0:	08008307 	.word	0x08008307
 80082f4:	2301      	movs	r3, #1
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	e150      	b.n	800859c <UART_SetConfig+0x348>
 80082fa:	2302      	movs	r3, #2
 80082fc:	77fb      	strb	r3, [r7, #31]
 80082fe:	e14d      	b.n	800859c <UART_SetConfig+0x348>
 8008300:	2304      	movs	r3, #4
 8008302:	77fb      	strb	r3, [r7, #31]
 8008304:	e14a      	b.n	800859c <UART_SetConfig+0x348>
 8008306:	2308      	movs	r3, #8
 8008308:	77fb      	strb	r3, [r7, #31]
 800830a:	e147      	b.n	800859c <UART_SetConfig+0x348>
 800830c:	2310      	movs	r3, #16
 800830e:	77fb      	strb	r3, [r7, #31]
 8008310:	e144      	b.n	800859c <UART_SetConfig+0x348>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a83      	ldr	r2, [pc, #524]	; (8008524 <UART_SetConfig+0x2d0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d132      	bne.n	8008382 <UART_SetConfig+0x12e>
 800831c:	4b80      	ldr	r3, [pc, #512]	; (8008520 <UART_SetConfig+0x2cc>)
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008322:	f003 030c 	and.w	r3, r3, #12
 8008326:	2b0c      	cmp	r3, #12
 8008328:	d828      	bhi.n	800837c <UART_SetConfig+0x128>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <UART_SetConfig+0xdc>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008365 	.word	0x08008365
 8008334:	0800837d 	.word	0x0800837d
 8008338:	0800837d 	.word	0x0800837d
 800833c:	0800837d 	.word	0x0800837d
 8008340:	08008371 	.word	0x08008371
 8008344:	0800837d 	.word	0x0800837d
 8008348:	0800837d 	.word	0x0800837d
 800834c:	0800837d 	.word	0x0800837d
 8008350:	0800836b 	.word	0x0800836b
 8008354:	0800837d 	.word	0x0800837d
 8008358:	0800837d 	.word	0x0800837d
 800835c:	0800837d 	.word	0x0800837d
 8008360:	08008377 	.word	0x08008377
 8008364:	2300      	movs	r3, #0
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e118      	b.n	800859c <UART_SetConfig+0x348>
 800836a:	2302      	movs	r3, #2
 800836c:	77fb      	strb	r3, [r7, #31]
 800836e:	e115      	b.n	800859c <UART_SetConfig+0x348>
 8008370:	2304      	movs	r3, #4
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e112      	b.n	800859c <UART_SetConfig+0x348>
 8008376:	2308      	movs	r3, #8
 8008378:	77fb      	strb	r3, [r7, #31]
 800837a:	e10f      	b.n	800859c <UART_SetConfig+0x348>
 800837c:	2310      	movs	r3, #16
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e10c      	b.n	800859c <UART_SetConfig+0x348>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a68      	ldr	r2, [pc, #416]	; (8008528 <UART_SetConfig+0x2d4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d120      	bne.n	80083ce <UART_SetConfig+0x17a>
 800838c:	4b64      	ldr	r3, [pc, #400]	; (8008520 <UART_SetConfig+0x2cc>)
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008396:	2b30      	cmp	r3, #48	; 0x30
 8008398:	d013      	beq.n	80083c2 <UART_SetConfig+0x16e>
 800839a:	2b30      	cmp	r3, #48	; 0x30
 800839c:	d814      	bhi.n	80083c8 <UART_SetConfig+0x174>
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d009      	beq.n	80083b6 <UART_SetConfig+0x162>
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d810      	bhi.n	80083c8 <UART_SetConfig+0x174>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <UART_SetConfig+0x15c>
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	d006      	beq.n	80083bc <UART_SetConfig+0x168>
 80083ae:	e00b      	b.n	80083c8 <UART_SetConfig+0x174>
 80083b0:	2300      	movs	r3, #0
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e0f2      	b.n	800859c <UART_SetConfig+0x348>
 80083b6:	2302      	movs	r3, #2
 80083b8:	77fb      	strb	r3, [r7, #31]
 80083ba:	e0ef      	b.n	800859c <UART_SetConfig+0x348>
 80083bc:	2304      	movs	r3, #4
 80083be:	77fb      	strb	r3, [r7, #31]
 80083c0:	e0ec      	b.n	800859c <UART_SetConfig+0x348>
 80083c2:	2308      	movs	r3, #8
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e0e9      	b.n	800859c <UART_SetConfig+0x348>
 80083c8:	2310      	movs	r3, #16
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e0e6      	b.n	800859c <UART_SetConfig+0x348>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a56      	ldr	r2, [pc, #344]	; (800852c <UART_SetConfig+0x2d8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d120      	bne.n	800841a <UART_SetConfig+0x1c6>
 80083d8:	4b51      	ldr	r3, [pc, #324]	; (8008520 <UART_SetConfig+0x2cc>)
 80083da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083e2:	2bc0      	cmp	r3, #192	; 0xc0
 80083e4:	d013      	beq.n	800840e <UART_SetConfig+0x1ba>
 80083e6:	2bc0      	cmp	r3, #192	; 0xc0
 80083e8:	d814      	bhi.n	8008414 <UART_SetConfig+0x1c0>
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	d009      	beq.n	8008402 <UART_SetConfig+0x1ae>
 80083ee:	2b80      	cmp	r3, #128	; 0x80
 80083f0:	d810      	bhi.n	8008414 <UART_SetConfig+0x1c0>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <UART_SetConfig+0x1a8>
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d006      	beq.n	8008408 <UART_SetConfig+0x1b4>
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x1c0>
 80083fc:	2300      	movs	r3, #0
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e0cc      	b.n	800859c <UART_SetConfig+0x348>
 8008402:	2302      	movs	r3, #2
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e0c9      	b.n	800859c <UART_SetConfig+0x348>
 8008408:	2304      	movs	r3, #4
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e0c6      	b.n	800859c <UART_SetConfig+0x348>
 800840e:	2308      	movs	r3, #8
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e0c3      	b.n	800859c <UART_SetConfig+0x348>
 8008414:	2310      	movs	r3, #16
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e0c0      	b.n	800859c <UART_SetConfig+0x348>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a44      	ldr	r2, [pc, #272]	; (8008530 <UART_SetConfig+0x2dc>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d125      	bne.n	8008470 <UART_SetConfig+0x21c>
 8008424:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <UART_SetConfig+0x2cc>)
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008432:	d017      	beq.n	8008464 <UART_SetConfig+0x210>
 8008434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008438:	d817      	bhi.n	800846a <UART_SetConfig+0x216>
 800843a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843e:	d00b      	beq.n	8008458 <UART_SetConfig+0x204>
 8008440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008444:	d811      	bhi.n	800846a <UART_SetConfig+0x216>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <UART_SetConfig+0x1fe>
 800844a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844e:	d006      	beq.n	800845e <UART_SetConfig+0x20a>
 8008450:	e00b      	b.n	800846a <UART_SetConfig+0x216>
 8008452:	2300      	movs	r3, #0
 8008454:	77fb      	strb	r3, [r7, #31]
 8008456:	e0a1      	b.n	800859c <UART_SetConfig+0x348>
 8008458:	2302      	movs	r3, #2
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e09e      	b.n	800859c <UART_SetConfig+0x348>
 800845e:	2304      	movs	r3, #4
 8008460:	77fb      	strb	r3, [r7, #31]
 8008462:	e09b      	b.n	800859c <UART_SetConfig+0x348>
 8008464:	2308      	movs	r3, #8
 8008466:	77fb      	strb	r3, [r7, #31]
 8008468:	e098      	b.n	800859c <UART_SetConfig+0x348>
 800846a:	2310      	movs	r3, #16
 800846c:	77fb      	strb	r3, [r7, #31]
 800846e:	e095      	b.n	800859c <UART_SetConfig+0x348>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2f      	ldr	r2, [pc, #188]	; (8008534 <UART_SetConfig+0x2e0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d125      	bne.n	80084c6 <UART_SetConfig+0x272>
 800847a:	4b29      	ldr	r3, [pc, #164]	; (8008520 <UART_SetConfig+0x2cc>)
 800847c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008488:	d017      	beq.n	80084ba <UART_SetConfig+0x266>
 800848a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848e:	d817      	bhi.n	80084c0 <UART_SetConfig+0x26c>
 8008490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008494:	d00b      	beq.n	80084ae <UART_SetConfig+0x25a>
 8008496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849a:	d811      	bhi.n	80084c0 <UART_SetConfig+0x26c>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <UART_SetConfig+0x254>
 80084a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a4:	d006      	beq.n	80084b4 <UART_SetConfig+0x260>
 80084a6:	e00b      	b.n	80084c0 <UART_SetConfig+0x26c>
 80084a8:	2301      	movs	r3, #1
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e076      	b.n	800859c <UART_SetConfig+0x348>
 80084ae:	2302      	movs	r3, #2
 80084b0:	77fb      	strb	r3, [r7, #31]
 80084b2:	e073      	b.n	800859c <UART_SetConfig+0x348>
 80084b4:	2304      	movs	r3, #4
 80084b6:	77fb      	strb	r3, [r7, #31]
 80084b8:	e070      	b.n	800859c <UART_SetConfig+0x348>
 80084ba:	2308      	movs	r3, #8
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	e06d      	b.n	800859c <UART_SetConfig+0x348>
 80084c0:	2310      	movs	r3, #16
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e06a      	b.n	800859c <UART_SetConfig+0x348>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <UART_SetConfig+0x2e4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d138      	bne.n	8008542 <UART_SetConfig+0x2ee>
 80084d0:	4b13      	ldr	r3, [pc, #76]	; (8008520 <UART_SetConfig+0x2cc>)
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084de:	d017      	beq.n	8008510 <UART_SetConfig+0x2bc>
 80084e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084e4:	d82a      	bhi.n	800853c <UART_SetConfig+0x2e8>
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ea:	d00b      	beq.n	8008504 <UART_SetConfig+0x2b0>
 80084ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084f0:	d824      	bhi.n	800853c <UART_SetConfig+0x2e8>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <UART_SetConfig+0x2aa>
 80084f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fa:	d006      	beq.n	800850a <UART_SetConfig+0x2b6>
 80084fc:	e01e      	b.n	800853c <UART_SetConfig+0x2e8>
 80084fe:	2300      	movs	r3, #0
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e04b      	b.n	800859c <UART_SetConfig+0x348>
 8008504:	2302      	movs	r3, #2
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e048      	b.n	800859c <UART_SetConfig+0x348>
 800850a:	2304      	movs	r3, #4
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	e045      	b.n	800859c <UART_SetConfig+0x348>
 8008510:	2308      	movs	r3, #8
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e042      	b.n	800859c <UART_SetConfig+0x348>
 8008516:	bf00      	nop
 8008518:	efff69f3 	.word	0xefff69f3
 800851c:	40011000 	.word	0x40011000
 8008520:	40023800 	.word	0x40023800
 8008524:	40004400 	.word	0x40004400
 8008528:	40004800 	.word	0x40004800
 800852c:	40004c00 	.word	0x40004c00
 8008530:	40005000 	.word	0x40005000
 8008534:	40011400 	.word	0x40011400
 8008538:	40007800 	.word	0x40007800
 800853c:	2310      	movs	r3, #16
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e02c      	b.n	800859c <UART_SetConfig+0x348>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a72      	ldr	r2, [pc, #456]	; (8008710 <UART_SetConfig+0x4bc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d125      	bne.n	8008598 <UART_SetConfig+0x344>
 800854c:	4b71      	ldr	r3, [pc, #452]	; (8008714 <UART_SetConfig+0x4c0>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008556:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800855a:	d017      	beq.n	800858c <UART_SetConfig+0x338>
 800855c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008560:	d817      	bhi.n	8008592 <UART_SetConfig+0x33e>
 8008562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008566:	d00b      	beq.n	8008580 <UART_SetConfig+0x32c>
 8008568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856c:	d811      	bhi.n	8008592 <UART_SetConfig+0x33e>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <UART_SetConfig+0x326>
 8008572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008576:	d006      	beq.n	8008586 <UART_SetConfig+0x332>
 8008578:	e00b      	b.n	8008592 <UART_SetConfig+0x33e>
 800857a:	2300      	movs	r3, #0
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	e00d      	b.n	800859c <UART_SetConfig+0x348>
 8008580:	2302      	movs	r3, #2
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e00a      	b.n	800859c <UART_SetConfig+0x348>
 8008586:	2304      	movs	r3, #4
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e007      	b.n	800859c <UART_SetConfig+0x348>
 800858c:	2308      	movs	r3, #8
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e004      	b.n	800859c <UART_SetConfig+0x348>
 8008592:	2310      	movs	r3, #16
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e001      	b.n	800859c <UART_SetConfig+0x348>
 8008598:	2310      	movs	r3, #16
 800859a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a4:	d15b      	bne.n	800865e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80085a6:	7ffb      	ldrb	r3, [r7, #31]
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d828      	bhi.n	80085fe <UART_SetConfig+0x3aa>
 80085ac:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0x360>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085d9 	.word	0x080085d9
 80085b8:	080085e1 	.word	0x080085e1
 80085bc:	080085e9 	.word	0x080085e9
 80085c0:	080085ff 	.word	0x080085ff
 80085c4:	080085ef 	.word	0x080085ef
 80085c8:	080085ff 	.word	0x080085ff
 80085cc:	080085ff 	.word	0x080085ff
 80085d0:	080085ff 	.word	0x080085ff
 80085d4:	080085f7 	.word	0x080085f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d8:	f7fd fda6 	bl	8006128 <HAL_RCC_GetPCLK1Freq>
 80085dc:	61b8      	str	r0, [r7, #24]
        break;
 80085de:	e013      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085e0:	f7fd fdb6 	bl	8006150 <HAL_RCC_GetPCLK2Freq>
 80085e4:	61b8      	str	r0, [r7, #24]
        break;
 80085e6:	e00f      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085e8:	4b4b      	ldr	r3, [pc, #300]	; (8008718 <UART_SetConfig+0x4c4>)
 80085ea:	61bb      	str	r3, [r7, #24]
        break;
 80085ec:	e00c      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ee:	f7fd fc89 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 80085f2:	61b8      	str	r0, [r7, #24]
        break;
 80085f4:	e008      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fa:	61bb      	str	r3, [r7, #24]
        break;
 80085fc:	e004      	b.n	8008608 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	77bb      	strb	r3, [r7, #30]
        break;
 8008606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d074      	beq.n	80086f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	005a      	lsls	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	085b      	lsrs	r3, r3, #1
 8008618:	441a      	add	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	2b0f      	cmp	r3, #15
 8008628:	d916      	bls.n	8008658 <UART_SetConfig+0x404>
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008630:	d212      	bcs.n	8008658 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f023 030f 	bic.w	r3, r3, #15
 800863a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	b29b      	uxth	r3, r3
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	b29a      	uxth	r2, r3
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	4313      	orrs	r3, r2
 800864c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	89fa      	ldrh	r2, [r7, #14]
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	e04f      	b.n	80086f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	77bb      	strb	r3, [r7, #30]
 800865c:	e04c      	b.n	80086f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800865e:	7ffb      	ldrb	r3, [r7, #31]
 8008660:	2b08      	cmp	r3, #8
 8008662:	d828      	bhi.n	80086b6 <UART_SetConfig+0x462>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0x418>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008691 	.word	0x08008691
 8008670:	08008699 	.word	0x08008699
 8008674:	080086a1 	.word	0x080086a1
 8008678:	080086b7 	.word	0x080086b7
 800867c:	080086a7 	.word	0x080086a7
 8008680:	080086b7 	.word	0x080086b7
 8008684:	080086b7 	.word	0x080086b7
 8008688:	080086b7 	.word	0x080086b7
 800868c:	080086af 	.word	0x080086af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008690:	f7fd fd4a 	bl	8006128 <HAL_RCC_GetPCLK1Freq>
 8008694:	61b8      	str	r0, [r7, #24]
        break;
 8008696:	e013      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008698:	f7fd fd5a 	bl	8006150 <HAL_RCC_GetPCLK2Freq>
 800869c:	61b8      	str	r0, [r7, #24]
        break;
 800869e:	e00f      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086a0:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <UART_SetConfig+0x4c4>)
 80086a2:	61bb      	str	r3, [r7, #24]
        break;
 80086a4:	e00c      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086a6:	f7fd fc2d 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 80086aa:	61b8      	str	r0, [r7, #24]
        break;
 80086ac:	e008      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b2:	61bb      	str	r3, [r7, #24]
        break;
 80086b4:	e004      	b.n	80086c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	77bb      	strb	r3, [r7, #30]
        break;
 80086be:	bf00      	nop
    }

    if (pclk != 0U)
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d018      	beq.n	80086f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	085a      	lsrs	r2, r3, #1
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	441a      	add	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b0f      	cmp	r3, #15
 80086de:	d909      	bls.n	80086f4 <UART_SetConfig+0x4a0>
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e6:	d205      	bcs.n	80086f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60da      	str	r2, [r3, #12]
 80086f2:	e001      	b.n	80086f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008704:	7fbb      	ldrb	r3, [r7, #30]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40007c00 	.word	0x40007c00
 8008714:	40023800 	.word	0x40023800
 8008718:	00f42400 	.word	0x00f42400

0800871c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01a      	beq.n	8008832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800881a:	d10a      	bne.n	8008832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	605a      	str	r2, [r3, #4]
  }
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af02      	add	r7, sp, #8
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008870:	f7fa fea2 	bl	80035b8 <HAL_GetTick>
 8008874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b08      	cmp	r3, #8
 8008882:	d10e      	bne.n	80088a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f831 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e027      	b.n	80088f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d10e      	bne.n	80088ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f81b 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e011      	b.n	80088f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b09c      	sub	sp, #112	; 0x70
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800890a:	e0a7      	b.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	f000 80a3 	beq.w	8008a5c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008916:	f7fa fe4f 	bl	80035b8 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008922:	429a      	cmp	r2, r3
 8008924:	d302      	bcc.n	800892c <UART_WaitOnFlagUntilTimeout+0x32>
 8008926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008928:	2b00      	cmp	r3, #0
 800892a:	d13f      	bne.n	80089ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800893a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008940:	667b      	str	r3, [r7, #100]	; 0x64
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800894a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800894c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	663b      	str	r3, [r7, #96]	; 0x60
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800897e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800898c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e5      	bne.n	800895e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2220      	movs	r2, #32
 8008996:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e068      	b.n	8008a7e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d050      	beq.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c8:	d148      	bne.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
 80089f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e6      	bne.n	80089d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	613b      	str	r3, [r7, #16]
   return(result);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a26:	623a      	str	r2, [r7, #32]
 8008a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	69f9      	ldr	r1, [r7, #28]
 8008a2c:	6a3a      	ldr	r2, [r7, #32]
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e5      	bne.n	8008a06 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e010      	b.n	8008a7e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69da      	ldr	r2, [r3, #28]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4013      	ands	r3, r2
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	bf0c      	ite	eq
 8008a6c:	2301      	moveq	r3, #1
 8008a6e:	2300      	movne	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	f43f af48 	beq.w	800890c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3770      	adds	r7, #112	; 0x70
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <setRotation>:
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
}

void setRotation(uint8_t rotation)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fa f814 	bl	8002ac0 <ILI9341_Set_Rotation>
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <drawImageAtPoint>:
{
	ILI9341_Draw_Image(imageArray, orientation);
}

void drawImageAtPoint(Image image, uint8_t rotation)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8008aac:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8008ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008aba:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8008abe:	701a      	strb	r2, [r3, #0]
	setRotation(rotation);
 8008ac0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008ac4:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff ffdb 	bl	8008a86 <setRotation>

	Point startPoint = image.drawPoint;
 8008ad0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008ad4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008ad8:	889b      	ldrh	r3, [r3, #4]
 8008ada:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
	Point endPoint = { 0, 0};
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

	switch (rotation)
 8008aea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008aee:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d841      	bhi.n	8008b7c <drawImageAtPoint+0xdc>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <drawImageAtPoint+0x60>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b47 	.word	0x08008b47
 8008b04:	08008b11 	.word	0x08008b11
 8008b08:	08008b47 	.word	0x08008b47
 8008b0c:	08008b11 	.word	0x08008b11
	{
	case SCREEN_HORIZONTAL_1:
	case SCREEN_HORIZONTAL_2:
		endPoint.x = startPoint.x + image.width - 1;
 8008b10:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8008b14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008b18:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008b1c:	88db      	ldrh	r3, [r3, #6]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.y + image.height;
 8008b2c:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8008b30:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008b34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008b38:	891b      	ldrh	r3, [r3, #8]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8008b44:	e01a      	b.n	8008b7c <drawImageAtPoint+0xdc>
	case SCREEN_VERTICAL_1:
	case SCREEN_VERTICAL_2:
		endPoint.x = startPoint.y + image.height - 1;
 8008b46:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8008b4a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008b4e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008b52:	891b      	ldrh	r3, [r3, #8]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	4413      	add	r3, r2
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.x + image.width;
 8008b62:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8008b66:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008b6a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008b6e:	88db      	ldrh	r3, [r3, #6]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8008b7a:	bf00      	nop
	}

	ILI9341_Set_Address(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
 8008b7c:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8008b80:	b298      	uxth	r0, r3
 8008b82:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8008b86:	b299      	uxth	r1, r3
 8008b88:	f897 3204 	ldrb.w	r3, [r7, #516]	; 0x204
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	f7f9 ff2a 	bl	80029ec <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b9e:	4834      	ldr	r0, [pc, #208]	; (8008c70 <drawImageAtPoint+0x1d0>)
 8008ba0:	f7fb fef6 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008baa:	4831      	ldr	r0, [pc, #196]	; (8008c70 <drawImageAtPoint+0x1d0>)
 8008bac:	f7fb fef0 	bl	8004990 <HAL_GPIO_WritePin>

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];
	uint32_t counter = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8008bbc:	e035      	b.n	8008c2a <drawImageAtPoint+0x18a>
	{
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8008bc4:	e019      	b.n	8008bfa <drawImageAtPoint+0x15a>
		{
			Temp_small_buffer[k] = image.imageArray[counter + k];
 8008bc6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008bca:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8008bd4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008bd8:	440b      	add	r3, r1
 8008bda:	4413      	add	r3, r2
 8008bdc:	7819      	ldrb	r1, [r3, #0]
 8008bde:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008be2:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8008be6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008bea:	4413      	add	r3, r2
 8008bec:	460a      	mov	r2, r1
 8008bee:	701a      	strb	r2, [r3, #0]
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8008bf0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8008bfa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008bfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c02:	d3e0      	bcc.n	8008bc6 <drawImageAtPoint+0x126>
		}
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer, BURST_MAX_SIZE, 10);
 8008c04:	f107 0110 	add.w	r1, r7, #16
 8008c08:	230a      	movs	r3, #10
 8008c0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008c0e:	4819      	ldr	r0, [pc, #100]	; (8008c74 <drawImageAtPoint+0x1d4>)
 8008c10:	f7fd ffaf 	bl	8006b72 <HAL_SPI_Transmit>
		counter += BURST_MAX_SIZE;
 8008c14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008c18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008c1c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8008c20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8008c2a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008c2e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008c32:	88db      	ldrh	r3, [r3, #6]
 8008c34:	461a      	mov	r2, r3
 8008c36:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008c3a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008c3e:	891b      	ldrh	r3, [r3, #8]
 8008c40:	fb02 f303 	mul.w	r3, r2, r3
 8008c44:	4a0c      	ldr	r2, [pc, #48]	; (8008c78 <drawImageAtPoint+0x1d8>)
 8008c46:	fb82 1203 	smull	r1, r2, r2, r3
 8008c4a:	1112      	asrs	r2, r2, #4
 8008c4c:	17db      	asrs	r3, r3, #31
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d3b1      	bcc.n	8008bbe <drawImageAtPoint+0x11e>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c60:	4803      	ldr	r0, [pc, #12]	; (8008c70 <drawImageAtPoint+0x1d0>)
 8008c62:	f7fb fe95 	bl	8004990 <HAL_GPIO_WritePin>
}
 8008c66:	bf00      	nop
 8008c68:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd90      	pop	{r4, r7, pc}
 8008c70:	40020800 	.word	0x40020800
 8008c74:	20000354 	.word	0x20000354
 8008c78:	10624dd3 	.word	0x10624dd3

08008c7c <__cvt>:
 8008c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7e:	ed2d 8b02 	vpush	{d8}
 8008c82:	eeb0 8b40 	vmov.f64	d8, d0
 8008c86:	b085      	sub	sp, #20
 8008c88:	4617      	mov	r7, r2
 8008c8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008c8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c8e:	ee18 2a90 	vmov	r2, s17
 8008c92:	f025 0520 	bic.w	r5, r5, #32
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	bfb6      	itet	lt
 8008c9a:	222d      	movlt	r2, #45	; 0x2d
 8008c9c:	2200      	movge	r2, #0
 8008c9e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008ca2:	2d46      	cmp	r5, #70	; 0x46
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	701a      	strb	r2, [r3, #0]
 8008ca8:	d004      	beq.n	8008cb4 <__cvt+0x38>
 8008caa:	2d45      	cmp	r5, #69	; 0x45
 8008cac:	d100      	bne.n	8008cb0 <__cvt+0x34>
 8008cae:	3401      	adds	r4, #1
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	e000      	b.n	8008cb6 <__cvt+0x3a>
 8008cb4:	2103      	movs	r1, #3
 8008cb6:	ab03      	add	r3, sp, #12
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	ab02      	add	r3, sp, #8
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	4633      	mov	r3, r6
 8008cc2:	eeb0 0b48 	vmov.f64	d0, d8
 8008cc6:	f001 f84f 	bl	8009d68 <_dtoa_r>
 8008cca:	2d47      	cmp	r5, #71	; 0x47
 8008ccc:	d101      	bne.n	8008cd2 <__cvt+0x56>
 8008cce:	07fb      	lsls	r3, r7, #31
 8008cd0:	d51a      	bpl.n	8008d08 <__cvt+0x8c>
 8008cd2:	2d46      	cmp	r5, #70	; 0x46
 8008cd4:	eb00 0204 	add.w	r2, r0, r4
 8008cd8:	d10c      	bne.n	8008cf4 <__cvt+0x78>
 8008cda:	7803      	ldrb	r3, [r0, #0]
 8008cdc:	2b30      	cmp	r3, #48	; 0x30
 8008cde:	d107      	bne.n	8008cf0 <__cvt+0x74>
 8008ce0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce8:	bf1c      	itt	ne
 8008cea:	f1c4 0401 	rsbne	r4, r4, #1
 8008cee:	6034      	strne	r4, [r6, #0]
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	441a      	add	r2, r3
 8008cf4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfc:	bf08      	it	eq
 8008cfe:	9203      	streq	r2, [sp, #12]
 8008d00:	2130      	movs	r1, #48	; 0x30
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d307      	bcc.n	8008d18 <__cvt+0x9c>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d0c:	1a1b      	subs	r3, r3, r0
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	b005      	add	sp, #20
 8008d12:	ecbd 8b02 	vpop	{d8}
 8008d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d18:	1c5c      	adds	r4, r3, #1
 8008d1a:	9403      	str	r4, [sp, #12]
 8008d1c:	7019      	strb	r1, [r3, #0]
 8008d1e:	e7f0      	b.n	8008d02 <__cvt+0x86>

08008d20 <__exponent>:
 8008d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d22:	4603      	mov	r3, r0
 8008d24:	2900      	cmp	r1, #0
 8008d26:	bfb8      	it	lt
 8008d28:	4249      	neglt	r1, r1
 8008d2a:	f803 2b02 	strb.w	r2, [r3], #2
 8008d2e:	bfb4      	ite	lt
 8008d30:	222d      	movlt	r2, #45	; 0x2d
 8008d32:	222b      	movge	r2, #43	; 0x2b
 8008d34:	2909      	cmp	r1, #9
 8008d36:	7042      	strb	r2, [r0, #1]
 8008d38:	dd2a      	ble.n	8008d90 <__exponent+0x70>
 8008d3a:	f10d 0207 	add.w	r2, sp, #7
 8008d3e:	4617      	mov	r7, r2
 8008d40:	260a      	movs	r6, #10
 8008d42:	4694      	mov	ip, r2
 8008d44:	fb91 f5f6 	sdiv	r5, r1, r6
 8008d48:	fb06 1415 	mls	r4, r6, r5, r1
 8008d4c:	3430      	adds	r4, #48	; 0x30
 8008d4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008d52:	460c      	mov	r4, r1
 8008d54:	2c63      	cmp	r4, #99	; 0x63
 8008d56:	f102 32ff 	add.w	r2, r2, #4294967295
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	dcf1      	bgt.n	8008d42 <__exponent+0x22>
 8008d5e:	3130      	adds	r1, #48	; 0x30
 8008d60:	f1ac 0402 	sub.w	r4, ip, #2
 8008d64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008d68:	1c41      	adds	r1, r0, #1
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	42ba      	cmp	r2, r7
 8008d6e:	d30a      	bcc.n	8008d86 <__exponent+0x66>
 8008d70:	f10d 0209 	add.w	r2, sp, #9
 8008d74:	eba2 020c 	sub.w	r2, r2, ip
 8008d78:	42bc      	cmp	r4, r7
 8008d7a:	bf88      	it	hi
 8008d7c:	2200      	movhi	r2, #0
 8008d7e:	4413      	add	r3, r2
 8008d80:	1a18      	subs	r0, r3, r0
 8008d82:	b003      	add	sp, #12
 8008d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008d8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008d8e:	e7ed      	b.n	8008d6c <__exponent+0x4c>
 8008d90:	2330      	movs	r3, #48	; 0x30
 8008d92:	3130      	adds	r1, #48	; 0x30
 8008d94:	7083      	strb	r3, [r0, #2]
 8008d96:	70c1      	strb	r1, [r0, #3]
 8008d98:	1d03      	adds	r3, r0, #4
 8008d9a:	e7f1      	b.n	8008d80 <__exponent+0x60>
 8008d9c:	0000      	movs	r0, r0
	...

08008da0 <_printf_float>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	b08b      	sub	sp, #44	; 0x2c
 8008da6:	460c      	mov	r4, r1
 8008da8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008dac:	4616      	mov	r6, r2
 8008dae:	461f      	mov	r7, r3
 8008db0:	4605      	mov	r5, r0
 8008db2:	f000 fed1 	bl	8009b58 <_localeconv_r>
 8008db6:	f8d0 b000 	ldr.w	fp, [r0]
 8008dba:	4658      	mov	r0, fp
 8008dbc:	f7f7 fa90 	bl	80002e0 <strlen>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008dcc:	6822      	ldr	r2, [r4, #0]
 8008dce:	3307      	adds	r3, #7
 8008dd0:	f023 0307 	bic.w	r3, r3, #7
 8008dd4:	f103 0108 	add.w	r1, r3, #8
 8008dd8:	f8c8 1000 	str.w	r1, [r8]
 8008ddc:	ed93 0b00 	vldr	d0, [r3]
 8008de0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009040 <_printf_float+0x2a0>
 8008de4:	eeb0 7bc0 	vabs.f64	d7, d0
 8008de8:	eeb4 7b46 	vcmp.f64	d7, d6
 8008dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008df4:	4682      	mov	sl, r0
 8008df6:	dd24      	ble.n	8008e42 <_printf_float+0xa2>
 8008df8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e00:	d502      	bpl.n	8008e08 <_printf_float+0x68>
 8008e02:	232d      	movs	r3, #45	; 0x2d
 8008e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e08:	498f      	ldr	r1, [pc, #572]	; (8009048 <_printf_float+0x2a8>)
 8008e0a:	4b90      	ldr	r3, [pc, #576]	; (800904c <_printf_float+0x2ac>)
 8008e0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008e10:	bf94      	ite	ls
 8008e12:	4688      	movls	r8, r1
 8008e14:	4698      	movhi	r8, r3
 8008e16:	2303      	movs	r3, #3
 8008e18:	6123      	str	r3, [r4, #16]
 8008e1a:	f022 0204 	bic.w	r2, r2, #4
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6022      	str	r2, [r4, #0]
 8008e22:	9304      	str	r3, [sp, #16]
 8008e24:	9700      	str	r7, [sp, #0]
 8008e26:	4633      	mov	r3, r6
 8008e28:	aa09      	add	r2, sp, #36	; 0x24
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f000 f9d1 	bl	80091d4 <_printf_common>
 8008e32:	3001      	adds	r0, #1
 8008e34:	f040 808a 	bne.w	8008f4c <_printf_float+0x1ac>
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	b00b      	add	sp, #44	; 0x2c
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	eeb4 0b40 	vcmp.f64	d0, d0
 8008e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4a:	d709      	bvc.n	8008e60 <_printf_float+0xc0>
 8008e4c:	ee10 3a90 	vmov	r3, s1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bfbc      	itt	lt
 8008e54:	232d      	movlt	r3, #45	; 0x2d
 8008e56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e5a:	497d      	ldr	r1, [pc, #500]	; (8009050 <_printf_float+0x2b0>)
 8008e5c:	4b7d      	ldr	r3, [pc, #500]	; (8009054 <_printf_float+0x2b4>)
 8008e5e:	e7d5      	b.n	8008e0c <_printf_float+0x6c>
 8008e60:	6863      	ldr	r3, [r4, #4]
 8008e62:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008e66:	9104      	str	r1, [sp, #16]
 8008e68:	1c59      	adds	r1, r3, #1
 8008e6a:	d13c      	bne.n	8008ee6 <_printf_float+0x146>
 8008e6c:	2306      	movs	r3, #6
 8008e6e:	6063      	str	r3, [r4, #4]
 8008e70:	2300      	movs	r3, #0
 8008e72:	9303      	str	r3, [sp, #12]
 8008e74:	ab08      	add	r3, sp, #32
 8008e76:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008e7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e7e:	ab07      	add	r3, sp, #28
 8008e80:	6861      	ldr	r1, [r4, #4]
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	6022      	str	r2, [r4, #0]
 8008e86:	f10d 031b 	add.w	r3, sp, #27
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7ff fef6 	bl	8008c7c <__cvt>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	9907      	ldr	r1, [sp, #28]
 8008e94:	2b47      	cmp	r3, #71	; 0x47
 8008e96:	4680      	mov	r8, r0
 8008e98:	d108      	bne.n	8008eac <_printf_float+0x10c>
 8008e9a:	1cc8      	adds	r0, r1, #3
 8008e9c:	db02      	blt.n	8008ea4 <_printf_float+0x104>
 8008e9e:	6863      	ldr	r3, [r4, #4]
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	dd41      	ble.n	8008f28 <_printf_float+0x188>
 8008ea4:	f1a9 0902 	sub.w	r9, r9, #2
 8008ea8:	fa5f f989 	uxtb.w	r9, r9
 8008eac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008eb0:	d820      	bhi.n	8008ef4 <_printf_float+0x154>
 8008eb2:	3901      	subs	r1, #1
 8008eb4:	464a      	mov	r2, r9
 8008eb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008eba:	9107      	str	r1, [sp, #28]
 8008ebc:	f7ff ff30 	bl	8008d20 <__exponent>
 8008ec0:	9a08      	ldr	r2, [sp, #32]
 8008ec2:	9004      	str	r0, [sp, #16]
 8008ec4:	1813      	adds	r3, r2, r0
 8008ec6:	2a01      	cmp	r2, #1
 8008ec8:	6123      	str	r3, [r4, #16]
 8008eca:	dc02      	bgt.n	8008ed2 <_printf_float+0x132>
 8008ecc:	6822      	ldr	r2, [r4, #0]
 8008ece:	07d2      	lsls	r2, r2, #31
 8008ed0:	d501      	bpl.n	8008ed6 <_printf_float+0x136>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0a2      	beq.n	8008e24 <_printf_float+0x84>
 8008ede:	232d      	movs	r3, #45	; 0x2d
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ee4:	e79e      	b.n	8008e24 <_printf_float+0x84>
 8008ee6:	9904      	ldr	r1, [sp, #16]
 8008ee8:	2947      	cmp	r1, #71	; 0x47
 8008eea:	d1c1      	bne.n	8008e70 <_printf_float+0xd0>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1bf      	bne.n	8008e70 <_printf_float+0xd0>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e7bc      	b.n	8008e6e <_printf_float+0xce>
 8008ef4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ef8:	d118      	bne.n	8008f2c <_printf_float+0x18c>
 8008efa:	2900      	cmp	r1, #0
 8008efc:	6863      	ldr	r3, [r4, #4]
 8008efe:	dd0b      	ble.n	8008f18 <_printf_float+0x178>
 8008f00:	6121      	str	r1, [r4, #16]
 8008f02:	b913      	cbnz	r3, 8008f0a <_printf_float+0x16a>
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	07d0      	lsls	r0, r2, #31
 8008f08:	d502      	bpl.n	8008f10 <_printf_float+0x170>
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	440b      	add	r3, r1
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	2300      	movs	r3, #0
 8008f12:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	e7de      	b.n	8008ed6 <_printf_float+0x136>
 8008f18:	b913      	cbnz	r3, 8008f20 <_printf_float+0x180>
 8008f1a:	6822      	ldr	r2, [r4, #0]
 8008f1c:	07d2      	lsls	r2, r2, #31
 8008f1e:	d501      	bpl.n	8008f24 <_printf_float+0x184>
 8008f20:	3302      	adds	r3, #2
 8008f22:	e7f4      	b.n	8008f0e <_printf_float+0x16e>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7f2      	b.n	8008f0e <_printf_float+0x16e>
 8008f28:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	db05      	blt.n	8008f3e <_printf_float+0x19e>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	6121      	str	r1, [r4, #16]
 8008f36:	07d8      	lsls	r0, r3, #31
 8008f38:	d5ea      	bpl.n	8008f10 <_printf_float+0x170>
 8008f3a:	1c4b      	adds	r3, r1, #1
 8008f3c:	e7e7      	b.n	8008f0e <_printf_float+0x16e>
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	bfd4      	ite	le
 8008f42:	f1c1 0202 	rsble	r2, r1, #2
 8008f46:	2201      	movgt	r2, #1
 8008f48:	4413      	add	r3, r2
 8008f4a:	e7e0      	b.n	8008f0e <_printf_float+0x16e>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	055a      	lsls	r2, r3, #21
 8008f50:	d407      	bmi.n	8008f62 <_printf_float+0x1c2>
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	4642      	mov	r2, r8
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d12a      	bne.n	8008fb6 <_printf_float+0x216>
 8008f60:	e76a      	b.n	8008e38 <_printf_float+0x98>
 8008f62:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f66:	f240 80e0 	bls.w	800912a <_printf_float+0x38a>
 8008f6a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008f6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	d133      	bne.n	8008fe0 <_printf_float+0x240>
 8008f78:	4a37      	ldr	r2, [pc, #220]	; (8009058 <_printf_float+0x2b8>)
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f af58 	beq.w	8008e38 <_printf_float+0x98>
 8008f88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	db02      	blt.n	8008f96 <_printf_float+0x1f6>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	07d8      	lsls	r0, r3, #31
 8008f94:	d50f      	bpl.n	8008fb6 <_printf_float+0x216>
 8008f96:	4653      	mov	r3, sl
 8008f98:	465a      	mov	r2, fp
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	f43f af49 	beq.w	8008e38 <_printf_float+0x98>
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	f104 091a 	add.w	r9, r4, #26
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	4543      	cmp	r3, r8
 8008fb4:	dc09      	bgt.n	8008fca <_printf_float+0x22a>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	079b      	lsls	r3, r3, #30
 8008fba:	f100 8106 	bmi.w	80091ca <_printf_float+0x42a>
 8008fbe:	68e0      	ldr	r0, [r4, #12]
 8008fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc2:	4298      	cmp	r0, r3
 8008fc4:	bfb8      	it	lt
 8008fc6:	4618      	movlt	r0, r3
 8008fc8:	e738      	b.n	8008e3c <_printf_float+0x9c>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	464a      	mov	r2, r9
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	f43f af2f 	beq.w	8008e38 <_printf_float+0x98>
 8008fda:	f108 0801 	add.w	r8, r8, #1
 8008fde:	e7e6      	b.n	8008fae <_printf_float+0x20e>
 8008fe0:	9b07      	ldr	r3, [sp, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dc3a      	bgt.n	800905c <_printf_float+0x2bc>
 8008fe6:	4a1c      	ldr	r2, [pc, #112]	; (8009058 <_printf_float+0x2b8>)
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f43f af21 	beq.w	8008e38 <_printf_float+0x98>
 8008ff6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	d102      	bne.n	8009004 <_printf_float+0x264>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	07d9      	lsls	r1, r3, #31
 8009002:	d5d8      	bpl.n	8008fb6 <_printf_float+0x216>
 8009004:	4653      	mov	r3, sl
 8009006:	465a      	mov	r2, fp
 8009008:	4631      	mov	r1, r6
 800900a:	4628      	mov	r0, r5
 800900c:	47b8      	blx	r7
 800900e:	3001      	adds	r0, #1
 8009010:	f43f af12 	beq.w	8008e38 <_printf_float+0x98>
 8009014:	f04f 0900 	mov.w	r9, #0
 8009018:	f104 0a1a 	add.w	sl, r4, #26
 800901c:	9b07      	ldr	r3, [sp, #28]
 800901e:	425b      	negs	r3, r3
 8009020:	454b      	cmp	r3, r9
 8009022:	dc01      	bgt.n	8009028 <_printf_float+0x288>
 8009024:	9b08      	ldr	r3, [sp, #32]
 8009026:	e795      	b.n	8008f54 <_printf_float+0x1b4>
 8009028:	2301      	movs	r3, #1
 800902a:	4652      	mov	r2, sl
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	f43f af00 	beq.w	8008e38 <_printf_float+0x98>
 8009038:	f109 0901 	add.w	r9, r9, #1
 800903c:	e7ee      	b.n	800901c <_printf_float+0x27c>
 800903e:	bf00      	nop
 8009040:	ffffffff 	.word	0xffffffff
 8009044:	7fefffff 	.word	0x7fefffff
 8009048:	0800dd48 	.word	0x0800dd48
 800904c:	0800dd4c 	.word	0x0800dd4c
 8009050:	0800dd50 	.word	0x0800dd50
 8009054:	0800dd54 	.word	0x0800dd54
 8009058:	0800dd58 	.word	0x0800dd58
 800905c:	9a08      	ldr	r2, [sp, #32]
 800905e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009060:	429a      	cmp	r2, r3
 8009062:	bfa8      	it	ge
 8009064:	461a      	movge	r2, r3
 8009066:	2a00      	cmp	r2, #0
 8009068:	4691      	mov	r9, r2
 800906a:	dc38      	bgt.n	80090de <_printf_float+0x33e>
 800906c:	2300      	movs	r3, #0
 800906e:	9305      	str	r3, [sp, #20]
 8009070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009074:	f104 021a 	add.w	r2, r4, #26
 8009078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800907a:	9905      	ldr	r1, [sp, #20]
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	eba3 0309 	sub.w	r3, r3, r9
 8009082:	428b      	cmp	r3, r1
 8009084:	dc33      	bgt.n	80090ee <_printf_float+0x34e>
 8009086:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800908a:	429a      	cmp	r2, r3
 800908c:	db3c      	blt.n	8009108 <_printf_float+0x368>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	07da      	lsls	r2, r3, #31
 8009092:	d439      	bmi.n	8009108 <_printf_float+0x368>
 8009094:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009098:	eba2 0903 	sub.w	r9, r2, r3
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	4591      	cmp	r9, r2
 80090a2:	bfa8      	it	ge
 80090a4:	4691      	movge	r9, r2
 80090a6:	f1b9 0f00 	cmp.w	r9, #0
 80090aa:	dc35      	bgt.n	8009118 <_printf_float+0x378>
 80090ac:	f04f 0800 	mov.w	r8, #0
 80090b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090b4:	f104 0a1a 	add.w	sl, r4, #26
 80090b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	eba3 0309 	sub.w	r3, r3, r9
 80090c2:	4543      	cmp	r3, r8
 80090c4:	f77f af77 	ble.w	8008fb6 <_printf_float+0x216>
 80090c8:	2301      	movs	r3, #1
 80090ca:	4652      	mov	r2, sl
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	f43f aeb0 	beq.w	8008e38 <_printf_float+0x98>
 80090d8:	f108 0801 	add.w	r8, r8, #1
 80090dc:	e7ec      	b.n	80090b8 <_printf_float+0x318>
 80090de:	4613      	mov	r3, r2
 80090e0:	4631      	mov	r1, r6
 80090e2:	4642      	mov	r2, r8
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b8      	blx	r7
 80090e8:	3001      	adds	r0, #1
 80090ea:	d1bf      	bne.n	800906c <_printf_float+0x2cc>
 80090ec:	e6a4      	b.n	8008e38 <_printf_float+0x98>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	9204      	str	r2, [sp, #16]
 80090f6:	47b8      	blx	r7
 80090f8:	3001      	adds	r0, #1
 80090fa:	f43f ae9d 	beq.w	8008e38 <_printf_float+0x98>
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	9a04      	ldr	r2, [sp, #16]
 8009102:	3301      	adds	r3, #1
 8009104:	9305      	str	r3, [sp, #20]
 8009106:	e7b7      	b.n	8009078 <_printf_float+0x2d8>
 8009108:	4653      	mov	r3, sl
 800910a:	465a      	mov	r2, fp
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	d1be      	bne.n	8009094 <_printf_float+0x2f4>
 8009116:	e68f      	b.n	8008e38 <_printf_float+0x98>
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	464b      	mov	r3, r9
 800911c:	4442      	add	r2, r8
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	d1c1      	bne.n	80090ac <_printf_float+0x30c>
 8009128:	e686      	b.n	8008e38 <_printf_float+0x98>
 800912a:	9a08      	ldr	r2, [sp, #32]
 800912c:	2a01      	cmp	r2, #1
 800912e:	dc01      	bgt.n	8009134 <_printf_float+0x394>
 8009130:	07db      	lsls	r3, r3, #31
 8009132:	d537      	bpl.n	80091a4 <_printf_float+0x404>
 8009134:	2301      	movs	r3, #1
 8009136:	4642      	mov	r2, r8
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f ae7a 	beq.w	8008e38 <_printf_float+0x98>
 8009144:	4653      	mov	r3, sl
 8009146:	465a      	mov	r2, fp
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	f43f ae72 	beq.w	8008e38 <_printf_float+0x98>
 8009154:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009158:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800915c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	d01a      	beq.n	800919a <_printf_float+0x3fa>
 8009164:	3b01      	subs	r3, #1
 8009166:	f108 0201 	add.w	r2, r8, #1
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	d10e      	bne.n	8009192 <_printf_float+0x3f2>
 8009174:	e660      	b.n	8008e38 <_printf_float+0x98>
 8009176:	2301      	movs	r3, #1
 8009178:	464a      	mov	r2, r9
 800917a:	4631      	mov	r1, r6
 800917c:	4628      	mov	r0, r5
 800917e:	47b8      	blx	r7
 8009180:	3001      	adds	r0, #1
 8009182:	f43f ae59 	beq.w	8008e38 <_printf_float+0x98>
 8009186:	f108 0801 	add.w	r8, r8, #1
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	3b01      	subs	r3, #1
 800918e:	4543      	cmp	r3, r8
 8009190:	dcf1      	bgt.n	8009176 <_printf_float+0x3d6>
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009198:	e6dd      	b.n	8008f56 <_printf_float+0x1b6>
 800919a:	f04f 0800 	mov.w	r8, #0
 800919e:	f104 091a 	add.w	r9, r4, #26
 80091a2:	e7f2      	b.n	800918a <_printf_float+0x3ea>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4642      	mov	r2, r8
 80091a8:	e7df      	b.n	800916a <_printf_float+0x3ca>
 80091aa:	2301      	movs	r3, #1
 80091ac:	464a      	mov	r2, r9
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f ae3f 	beq.w	8008e38 <_printf_float+0x98>
 80091ba:	f108 0801 	add.w	r8, r8, #1
 80091be:	68e3      	ldr	r3, [r4, #12]
 80091c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c2:	1a5b      	subs	r3, r3, r1
 80091c4:	4543      	cmp	r3, r8
 80091c6:	dcf0      	bgt.n	80091aa <_printf_float+0x40a>
 80091c8:	e6f9      	b.n	8008fbe <_printf_float+0x21e>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	f104 0919 	add.w	r9, r4, #25
 80091d2:	e7f4      	b.n	80091be <_printf_float+0x41e>

080091d4 <_printf_common>:
 80091d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	4616      	mov	r6, r2
 80091da:	4699      	mov	r9, r3
 80091dc:	688a      	ldr	r2, [r1, #8]
 80091de:	690b      	ldr	r3, [r1, #16]
 80091e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	bfb8      	it	lt
 80091e8:	4613      	movlt	r3, r2
 80091ea:	6033      	str	r3, [r6, #0]
 80091ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091f0:	4607      	mov	r7, r0
 80091f2:	460c      	mov	r4, r1
 80091f4:	b10a      	cbz	r2, 80091fa <_printf_common+0x26>
 80091f6:	3301      	adds	r3, #1
 80091f8:	6033      	str	r3, [r6, #0]
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	0699      	lsls	r1, r3, #26
 80091fe:	bf42      	ittt	mi
 8009200:	6833      	ldrmi	r3, [r6, #0]
 8009202:	3302      	addmi	r3, #2
 8009204:	6033      	strmi	r3, [r6, #0]
 8009206:	6825      	ldr	r5, [r4, #0]
 8009208:	f015 0506 	ands.w	r5, r5, #6
 800920c:	d106      	bne.n	800921c <_printf_common+0x48>
 800920e:	f104 0a19 	add.w	sl, r4, #25
 8009212:	68e3      	ldr	r3, [r4, #12]
 8009214:	6832      	ldr	r2, [r6, #0]
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	42ab      	cmp	r3, r5
 800921a:	dc26      	bgt.n	800926a <_printf_common+0x96>
 800921c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009220:	1e13      	subs	r3, r2, #0
 8009222:	6822      	ldr	r2, [r4, #0]
 8009224:	bf18      	it	ne
 8009226:	2301      	movne	r3, #1
 8009228:	0692      	lsls	r2, r2, #26
 800922a:	d42b      	bmi.n	8009284 <_printf_common+0xb0>
 800922c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009230:	4649      	mov	r1, r9
 8009232:	4638      	mov	r0, r7
 8009234:	47c0      	blx	r8
 8009236:	3001      	adds	r0, #1
 8009238:	d01e      	beq.n	8009278 <_printf_common+0xa4>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	6922      	ldr	r2, [r4, #16]
 800923e:	f003 0306 	and.w	r3, r3, #6
 8009242:	2b04      	cmp	r3, #4
 8009244:	bf02      	ittt	eq
 8009246:	68e5      	ldreq	r5, [r4, #12]
 8009248:	6833      	ldreq	r3, [r6, #0]
 800924a:	1aed      	subeq	r5, r5, r3
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	bf0c      	ite	eq
 8009250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009254:	2500      	movne	r5, #0
 8009256:	4293      	cmp	r3, r2
 8009258:	bfc4      	itt	gt
 800925a:	1a9b      	subgt	r3, r3, r2
 800925c:	18ed      	addgt	r5, r5, r3
 800925e:	2600      	movs	r6, #0
 8009260:	341a      	adds	r4, #26
 8009262:	42b5      	cmp	r5, r6
 8009264:	d11a      	bne.n	800929c <_printf_common+0xc8>
 8009266:	2000      	movs	r0, #0
 8009268:	e008      	b.n	800927c <_printf_common+0xa8>
 800926a:	2301      	movs	r3, #1
 800926c:	4652      	mov	r2, sl
 800926e:	4649      	mov	r1, r9
 8009270:	4638      	mov	r0, r7
 8009272:	47c0      	blx	r8
 8009274:	3001      	adds	r0, #1
 8009276:	d103      	bne.n	8009280 <_printf_common+0xac>
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009280:	3501      	adds	r5, #1
 8009282:	e7c6      	b.n	8009212 <_printf_common+0x3e>
 8009284:	18e1      	adds	r1, r4, r3
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	2030      	movs	r0, #48	; 0x30
 800928a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800928e:	4422      	add	r2, r4
 8009290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009298:	3302      	adds	r3, #2
 800929a:	e7c7      	b.n	800922c <_printf_common+0x58>
 800929c:	2301      	movs	r3, #1
 800929e:	4622      	mov	r2, r4
 80092a0:	4649      	mov	r1, r9
 80092a2:	4638      	mov	r0, r7
 80092a4:	47c0      	blx	r8
 80092a6:	3001      	adds	r0, #1
 80092a8:	d0e6      	beq.n	8009278 <_printf_common+0xa4>
 80092aa:	3601      	adds	r6, #1
 80092ac:	e7d9      	b.n	8009262 <_printf_common+0x8e>
	...

080092b0 <_printf_i>:
 80092b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	7e0f      	ldrb	r7, [r1, #24]
 80092b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092b8:	2f78      	cmp	r7, #120	; 0x78
 80092ba:	4691      	mov	r9, r2
 80092bc:	4680      	mov	r8, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	469a      	mov	sl, r3
 80092c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092c6:	d807      	bhi.n	80092d8 <_printf_i+0x28>
 80092c8:	2f62      	cmp	r7, #98	; 0x62
 80092ca:	d80a      	bhi.n	80092e2 <_printf_i+0x32>
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	f000 80d4 	beq.w	800947a <_printf_i+0x1ca>
 80092d2:	2f58      	cmp	r7, #88	; 0x58
 80092d4:	f000 80c0 	beq.w	8009458 <_printf_i+0x1a8>
 80092d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092e0:	e03a      	b.n	8009358 <_printf_i+0xa8>
 80092e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092e6:	2b15      	cmp	r3, #21
 80092e8:	d8f6      	bhi.n	80092d8 <_printf_i+0x28>
 80092ea:	a101      	add	r1, pc, #4	; (adr r1, 80092f0 <_printf_i+0x40>)
 80092ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f0:	08009349 	.word	0x08009349
 80092f4:	0800935d 	.word	0x0800935d
 80092f8:	080092d9 	.word	0x080092d9
 80092fc:	080092d9 	.word	0x080092d9
 8009300:	080092d9 	.word	0x080092d9
 8009304:	080092d9 	.word	0x080092d9
 8009308:	0800935d 	.word	0x0800935d
 800930c:	080092d9 	.word	0x080092d9
 8009310:	080092d9 	.word	0x080092d9
 8009314:	080092d9 	.word	0x080092d9
 8009318:	080092d9 	.word	0x080092d9
 800931c:	08009461 	.word	0x08009461
 8009320:	08009389 	.word	0x08009389
 8009324:	0800941b 	.word	0x0800941b
 8009328:	080092d9 	.word	0x080092d9
 800932c:	080092d9 	.word	0x080092d9
 8009330:	08009483 	.word	0x08009483
 8009334:	080092d9 	.word	0x080092d9
 8009338:	08009389 	.word	0x08009389
 800933c:	080092d9 	.word	0x080092d9
 8009340:	080092d9 	.word	0x080092d9
 8009344:	08009423 	.word	0x08009423
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	1d1a      	adds	r2, r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	602a      	str	r2, [r5, #0]
 8009350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009358:	2301      	movs	r3, #1
 800935a:	e09f      	b.n	800949c <_printf_i+0x1ec>
 800935c:	6820      	ldr	r0, [r4, #0]
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	0607      	lsls	r7, r0, #24
 8009362:	f103 0104 	add.w	r1, r3, #4
 8009366:	6029      	str	r1, [r5, #0]
 8009368:	d501      	bpl.n	800936e <_printf_i+0xbe>
 800936a:	681e      	ldr	r6, [r3, #0]
 800936c:	e003      	b.n	8009376 <_printf_i+0xc6>
 800936e:	0646      	lsls	r6, r0, #25
 8009370:	d5fb      	bpl.n	800936a <_printf_i+0xba>
 8009372:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009376:	2e00      	cmp	r6, #0
 8009378:	da03      	bge.n	8009382 <_printf_i+0xd2>
 800937a:	232d      	movs	r3, #45	; 0x2d
 800937c:	4276      	negs	r6, r6
 800937e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009382:	485a      	ldr	r0, [pc, #360]	; (80094ec <_printf_i+0x23c>)
 8009384:	230a      	movs	r3, #10
 8009386:	e012      	b.n	80093ae <_printf_i+0xfe>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	6820      	ldr	r0, [r4, #0]
 800938c:	1d19      	adds	r1, r3, #4
 800938e:	6029      	str	r1, [r5, #0]
 8009390:	0605      	lsls	r5, r0, #24
 8009392:	d501      	bpl.n	8009398 <_printf_i+0xe8>
 8009394:	681e      	ldr	r6, [r3, #0]
 8009396:	e002      	b.n	800939e <_printf_i+0xee>
 8009398:	0641      	lsls	r1, r0, #25
 800939a:	d5fb      	bpl.n	8009394 <_printf_i+0xe4>
 800939c:	881e      	ldrh	r6, [r3, #0]
 800939e:	4853      	ldr	r0, [pc, #332]	; (80094ec <_printf_i+0x23c>)
 80093a0:	2f6f      	cmp	r7, #111	; 0x6f
 80093a2:	bf0c      	ite	eq
 80093a4:	2308      	moveq	r3, #8
 80093a6:	230a      	movne	r3, #10
 80093a8:	2100      	movs	r1, #0
 80093aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ae:	6865      	ldr	r5, [r4, #4]
 80093b0:	60a5      	str	r5, [r4, #8]
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	bfa2      	ittt	ge
 80093b6:	6821      	ldrge	r1, [r4, #0]
 80093b8:	f021 0104 	bicge.w	r1, r1, #4
 80093bc:	6021      	strge	r1, [r4, #0]
 80093be:	b90e      	cbnz	r6, 80093c4 <_printf_i+0x114>
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	d04b      	beq.n	800945c <_printf_i+0x1ac>
 80093c4:	4615      	mov	r5, r2
 80093c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80093ca:	fb03 6711 	mls	r7, r3, r1, r6
 80093ce:	5dc7      	ldrb	r7, [r0, r7]
 80093d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093d4:	4637      	mov	r7, r6
 80093d6:	42bb      	cmp	r3, r7
 80093d8:	460e      	mov	r6, r1
 80093da:	d9f4      	bls.n	80093c6 <_printf_i+0x116>
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d10b      	bne.n	80093f8 <_printf_i+0x148>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	07de      	lsls	r6, r3, #31
 80093e4:	d508      	bpl.n	80093f8 <_printf_i+0x148>
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	4299      	cmp	r1, r3
 80093ec:	bfde      	ittt	le
 80093ee:	2330      	movle	r3, #48	; 0x30
 80093f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093f8:	1b52      	subs	r2, r2, r5
 80093fa:	6122      	str	r2, [r4, #16]
 80093fc:	f8cd a000 	str.w	sl, [sp]
 8009400:	464b      	mov	r3, r9
 8009402:	aa03      	add	r2, sp, #12
 8009404:	4621      	mov	r1, r4
 8009406:	4640      	mov	r0, r8
 8009408:	f7ff fee4 	bl	80091d4 <_printf_common>
 800940c:	3001      	adds	r0, #1
 800940e:	d14a      	bne.n	80094a6 <_printf_i+0x1f6>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	b004      	add	sp, #16
 8009416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	f043 0320 	orr.w	r3, r3, #32
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	4833      	ldr	r0, [pc, #204]	; (80094f0 <_printf_i+0x240>)
 8009424:	2778      	movs	r7, #120	; 0x78
 8009426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	6829      	ldr	r1, [r5, #0]
 800942e:	061f      	lsls	r7, r3, #24
 8009430:	f851 6b04 	ldr.w	r6, [r1], #4
 8009434:	d402      	bmi.n	800943c <_printf_i+0x18c>
 8009436:	065f      	lsls	r7, r3, #25
 8009438:	bf48      	it	mi
 800943a:	b2b6      	uxthmi	r6, r6
 800943c:	07df      	lsls	r7, r3, #31
 800943e:	bf48      	it	mi
 8009440:	f043 0320 	orrmi.w	r3, r3, #32
 8009444:	6029      	str	r1, [r5, #0]
 8009446:	bf48      	it	mi
 8009448:	6023      	strmi	r3, [r4, #0]
 800944a:	b91e      	cbnz	r6, 8009454 <_printf_i+0x1a4>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	f023 0320 	bic.w	r3, r3, #32
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	2310      	movs	r3, #16
 8009456:	e7a7      	b.n	80093a8 <_printf_i+0xf8>
 8009458:	4824      	ldr	r0, [pc, #144]	; (80094ec <_printf_i+0x23c>)
 800945a:	e7e4      	b.n	8009426 <_printf_i+0x176>
 800945c:	4615      	mov	r5, r2
 800945e:	e7bd      	b.n	80093dc <_printf_i+0x12c>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	6826      	ldr	r6, [r4, #0]
 8009464:	6961      	ldr	r1, [r4, #20]
 8009466:	1d18      	adds	r0, r3, #4
 8009468:	6028      	str	r0, [r5, #0]
 800946a:	0635      	lsls	r5, r6, #24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	d501      	bpl.n	8009474 <_printf_i+0x1c4>
 8009470:	6019      	str	r1, [r3, #0]
 8009472:	e002      	b.n	800947a <_printf_i+0x1ca>
 8009474:	0670      	lsls	r0, r6, #25
 8009476:	d5fb      	bpl.n	8009470 <_printf_i+0x1c0>
 8009478:	8019      	strh	r1, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	4615      	mov	r5, r2
 8009480:	e7bc      	b.n	80093fc <_printf_i+0x14c>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	1d1a      	adds	r2, r3, #4
 8009486:	602a      	str	r2, [r5, #0]
 8009488:	681d      	ldr	r5, [r3, #0]
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	2100      	movs	r1, #0
 800948e:	4628      	mov	r0, r5
 8009490:	f7f6 fed6 	bl	8000240 <memchr>
 8009494:	b108      	cbz	r0, 800949a <_printf_i+0x1ea>
 8009496:	1b40      	subs	r0, r0, r5
 8009498:	6060      	str	r0, [r4, #4]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	2300      	movs	r3, #0
 80094a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094a4:	e7aa      	b.n	80093fc <_printf_i+0x14c>
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	462a      	mov	r2, r5
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d0ad      	beq.n	8009410 <_printf_i+0x160>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	079b      	lsls	r3, r3, #30
 80094b8:	d413      	bmi.n	80094e2 <_printf_i+0x232>
 80094ba:	68e0      	ldr	r0, [r4, #12]
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	4298      	cmp	r0, r3
 80094c0:	bfb8      	it	lt
 80094c2:	4618      	movlt	r0, r3
 80094c4:	e7a6      	b.n	8009414 <_printf_i+0x164>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4632      	mov	r2, r6
 80094ca:	4649      	mov	r1, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	47d0      	blx	sl
 80094d0:	3001      	adds	r0, #1
 80094d2:	d09d      	beq.n	8009410 <_printf_i+0x160>
 80094d4:	3501      	adds	r5, #1
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	9903      	ldr	r1, [sp, #12]
 80094da:	1a5b      	subs	r3, r3, r1
 80094dc:	42ab      	cmp	r3, r5
 80094de:	dcf2      	bgt.n	80094c6 <_printf_i+0x216>
 80094e0:	e7eb      	b.n	80094ba <_printf_i+0x20a>
 80094e2:	2500      	movs	r5, #0
 80094e4:	f104 0619 	add.w	r6, r4, #25
 80094e8:	e7f5      	b.n	80094d6 <_printf_i+0x226>
 80094ea:	bf00      	nop
 80094ec:	0800dd5a 	.word	0x0800dd5a
 80094f0:	0800dd6b 	.word	0x0800dd6b

080094f4 <_scanf_float>:
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	b087      	sub	sp, #28
 80094fa:	4617      	mov	r7, r2
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	688b      	ldr	r3, [r1, #8]
 8009500:	1e5a      	subs	r2, r3, #1
 8009502:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009506:	bf83      	ittte	hi
 8009508:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800950c:	195b      	addhi	r3, r3, r5
 800950e:	9302      	strhi	r3, [sp, #8]
 8009510:	2300      	movls	r3, #0
 8009512:	bf86      	itte	hi
 8009514:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009518:	608b      	strhi	r3, [r1, #8]
 800951a:	9302      	strls	r3, [sp, #8]
 800951c:	680b      	ldr	r3, [r1, #0]
 800951e:	468b      	mov	fp, r1
 8009520:	2500      	movs	r5, #0
 8009522:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009526:	f84b 3b1c 	str.w	r3, [fp], #28
 800952a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800952e:	4680      	mov	r8, r0
 8009530:	460c      	mov	r4, r1
 8009532:	465e      	mov	r6, fp
 8009534:	46aa      	mov	sl, r5
 8009536:	46a9      	mov	r9, r5
 8009538:	9501      	str	r5, [sp, #4]
 800953a:	68a2      	ldr	r2, [r4, #8]
 800953c:	b152      	cbz	r2, 8009554 <_scanf_float+0x60>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b4e      	cmp	r3, #78	; 0x4e
 8009544:	d864      	bhi.n	8009610 <_scanf_float+0x11c>
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d83c      	bhi.n	80095c4 <_scanf_float+0xd0>
 800954a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800954e:	b2c8      	uxtb	r0, r1
 8009550:	280e      	cmp	r0, #14
 8009552:	d93a      	bls.n	80095ca <_scanf_float+0xd6>
 8009554:	f1b9 0f00 	cmp.w	r9, #0
 8009558:	d003      	beq.n	8009562 <_scanf_float+0x6e>
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009566:	f1ba 0f01 	cmp.w	sl, #1
 800956a:	f200 8113 	bhi.w	8009794 <_scanf_float+0x2a0>
 800956e:	455e      	cmp	r6, fp
 8009570:	f200 8105 	bhi.w	800977e <_scanf_float+0x28a>
 8009574:	2501      	movs	r5, #1
 8009576:	4628      	mov	r0, r5
 8009578:	b007      	add	sp, #28
 800957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009582:	2a0d      	cmp	r2, #13
 8009584:	d8e6      	bhi.n	8009554 <_scanf_float+0x60>
 8009586:	a101      	add	r1, pc, #4	; (adr r1, 800958c <_scanf_float+0x98>)
 8009588:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800958c:	080096cb 	.word	0x080096cb
 8009590:	08009555 	.word	0x08009555
 8009594:	08009555 	.word	0x08009555
 8009598:	08009555 	.word	0x08009555
 800959c:	0800972b 	.word	0x0800972b
 80095a0:	08009703 	.word	0x08009703
 80095a4:	08009555 	.word	0x08009555
 80095a8:	08009555 	.word	0x08009555
 80095ac:	080096d9 	.word	0x080096d9
 80095b0:	08009555 	.word	0x08009555
 80095b4:	08009555 	.word	0x08009555
 80095b8:	08009555 	.word	0x08009555
 80095bc:	08009555 	.word	0x08009555
 80095c0:	08009691 	.word	0x08009691
 80095c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80095c8:	e7db      	b.n	8009582 <_scanf_float+0x8e>
 80095ca:	290e      	cmp	r1, #14
 80095cc:	d8c2      	bhi.n	8009554 <_scanf_float+0x60>
 80095ce:	a001      	add	r0, pc, #4	; (adr r0, 80095d4 <_scanf_float+0xe0>)
 80095d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095d4:	08009683 	.word	0x08009683
 80095d8:	08009555 	.word	0x08009555
 80095dc:	08009683 	.word	0x08009683
 80095e0:	08009717 	.word	0x08009717
 80095e4:	08009555 	.word	0x08009555
 80095e8:	08009631 	.word	0x08009631
 80095ec:	0800966d 	.word	0x0800966d
 80095f0:	0800966d 	.word	0x0800966d
 80095f4:	0800966d 	.word	0x0800966d
 80095f8:	0800966d 	.word	0x0800966d
 80095fc:	0800966d 	.word	0x0800966d
 8009600:	0800966d 	.word	0x0800966d
 8009604:	0800966d 	.word	0x0800966d
 8009608:	0800966d 	.word	0x0800966d
 800960c:	0800966d 	.word	0x0800966d
 8009610:	2b6e      	cmp	r3, #110	; 0x6e
 8009612:	d809      	bhi.n	8009628 <_scanf_float+0x134>
 8009614:	2b60      	cmp	r3, #96	; 0x60
 8009616:	d8b2      	bhi.n	800957e <_scanf_float+0x8a>
 8009618:	2b54      	cmp	r3, #84	; 0x54
 800961a:	d077      	beq.n	800970c <_scanf_float+0x218>
 800961c:	2b59      	cmp	r3, #89	; 0x59
 800961e:	d199      	bne.n	8009554 <_scanf_float+0x60>
 8009620:	2d07      	cmp	r5, #7
 8009622:	d197      	bne.n	8009554 <_scanf_float+0x60>
 8009624:	2508      	movs	r5, #8
 8009626:	e029      	b.n	800967c <_scanf_float+0x188>
 8009628:	2b74      	cmp	r3, #116	; 0x74
 800962a:	d06f      	beq.n	800970c <_scanf_float+0x218>
 800962c:	2b79      	cmp	r3, #121	; 0x79
 800962e:	e7f6      	b.n	800961e <_scanf_float+0x12a>
 8009630:	6821      	ldr	r1, [r4, #0]
 8009632:	05c8      	lsls	r0, r1, #23
 8009634:	d51a      	bpl.n	800966c <_scanf_float+0x178>
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800963c:	6021      	str	r1, [r4, #0]
 800963e:	f109 0901 	add.w	r9, r9, #1
 8009642:	b11b      	cbz	r3, 800964c <_scanf_float+0x158>
 8009644:	3b01      	subs	r3, #1
 8009646:	3201      	adds	r2, #1
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	60a2      	str	r2, [r4, #8]
 800964c:	68a3      	ldr	r3, [r4, #8]
 800964e:	3b01      	subs	r3, #1
 8009650:	60a3      	str	r3, [r4, #8]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	3301      	adds	r3, #1
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3b01      	subs	r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	607b      	str	r3, [r7, #4]
 8009660:	f340 8084 	ble.w	800976c <_scanf_float+0x278>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	e766      	b.n	800953a <_scanf_float+0x46>
 800966c:	eb1a 0f05 	cmn.w	sl, r5
 8009670:	f47f af70 	bne.w	8009554 <_scanf_float+0x60>
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800967a:	6022      	str	r2, [r4, #0]
 800967c:	f806 3b01 	strb.w	r3, [r6], #1
 8009680:	e7e4      	b.n	800964c <_scanf_float+0x158>
 8009682:	6822      	ldr	r2, [r4, #0]
 8009684:	0610      	lsls	r0, r2, #24
 8009686:	f57f af65 	bpl.w	8009554 <_scanf_float+0x60>
 800968a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800968e:	e7f4      	b.n	800967a <_scanf_float+0x186>
 8009690:	f1ba 0f00 	cmp.w	sl, #0
 8009694:	d10e      	bne.n	80096b4 <_scanf_float+0x1c0>
 8009696:	f1b9 0f00 	cmp.w	r9, #0
 800969a:	d10e      	bne.n	80096ba <_scanf_float+0x1c6>
 800969c:	6822      	ldr	r2, [r4, #0]
 800969e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096a6:	d108      	bne.n	80096ba <_scanf_float+0x1c6>
 80096a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096ac:	6022      	str	r2, [r4, #0]
 80096ae:	f04f 0a01 	mov.w	sl, #1
 80096b2:	e7e3      	b.n	800967c <_scanf_float+0x188>
 80096b4:	f1ba 0f02 	cmp.w	sl, #2
 80096b8:	d055      	beq.n	8009766 <_scanf_float+0x272>
 80096ba:	2d01      	cmp	r5, #1
 80096bc:	d002      	beq.n	80096c4 <_scanf_float+0x1d0>
 80096be:	2d04      	cmp	r5, #4
 80096c0:	f47f af48 	bne.w	8009554 <_scanf_float+0x60>
 80096c4:	3501      	adds	r5, #1
 80096c6:	b2ed      	uxtb	r5, r5
 80096c8:	e7d8      	b.n	800967c <_scanf_float+0x188>
 80096ca:	f1ba 0f01 	cmp.w	sl, #1
 80096ce:	f47f af41 	bne.w	8009554 <_scanf_float+0x60>
 80096d2:	f04f 0a02 	mov.w	sl, #2
 80096d6:	e7d1      	b.n	800967c <_scanf_float+0x188>
 80096d8:	b97d      	cbnz	r5, 80096fa <_scanf_float+0x206>
 80096da:	f1b9 0f00 	cmp.w	r9, #0
 80096de:	f47f af3c 	bne.w	800955a <_scanf_float+0x66>
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096ec:	f47f af39 	bne.w	8009562 <_scanf_float+0x6e>
 80096f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096f4:	6022      	str	r2, [r4, #0]
 80096f6:	2501      	movs	r5, #1
 80096f8:	e7c0      	b.n	800967c <_scanf_float+0x188>
 80096fa:	2d03      	cmp	r5, #3
 80096fc:	d0e2      	beq.n	80096c4 <_scanf_float+0x1d0>
 80096fe:	2d05      	cmp	r5, #5
 8009700:	e7de      	b.n	80096c0 <_scanf_float+0x1cc>
 8009702:	2d02      	cmp	r5, #2
 8009704:	f47f af26 	bne.w	8009554 <_scanf_float+0x60>
 8009708:	2503      	movs	r5, #3
 800970a:	e7b7      	b.n	800967c <_scanf_float+0x188>
 800970c:	2d06      	cmp	r5, #6
 800970e:	f47f af21 	bne.w	8009554 <_scanf_float+0x60>
 8009712:	2507      	movs	r5, #7
 8009714:	e7b2      	b.n	800967c <_scanf_float+0x188>
 8009716:	6822      	ldr	r2, [r4, #0]
 8009718:	0591      	lsls	r1, r2, #22
 800971a:	f57f af1b 	bpl.w	8009554 <_scanf_float+0x60>
 800971e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009722:	6022      	str	r2, [r4, #0]
 8009724:	f8cd 9004 	str.w	r9, [sp, #4]
 8009728:	e7a8      	b.n	800967c <_scanf_float+0x188>
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009730:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009734:	d006      	beq.n	8009744 <_scanf_float+0x250>
 8009736:	0550      	lsls	r0, r2, #21
 8009738:	f57f af0c 	bpl.w	8009554 <_scanf_float+0x60>
 800973c:	f1b9 0f00 	cmp.w	r9, #0
 8009740:	f43f af0f 	beq.w	8009562 <_scanf_float+0x6e>
 8009744:	0591      	lsls	r1, r2, #22
 8009746:	bf58      	it	pl
 8009748:	9901      	ldrpl	r1, [sp, #4]
 800974a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800974e:	bf58      	it	pl
 8009750:	eba9 0101 	subpl.w	r1, r9, r1
 8009754:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009758:	bf58      	it	pl
 800975a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800975e:	6022      	str	r2, [r4, #0]
 8009760:	f04f 0900 	mov.w	r9, #0
 8009764:	e78a      	b.n	800967c <_scanf_float+0x188>
 8009766:	f04f 0a03 	mov.w	sl, #3
 800976a:	e787      	b.n	800967c <_scanf_float+0x188>
 800976c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009770:	4639      	mov	r1, r7
 8009772:	4640      	mov	r0, r8
 8009774:	4798      	blx	r3
 8009776:	2800      	cmp	r0, #0
 8009778:	f43f aedf 	beq.w	800953a <_scanf_float+0x46>
 800977c:	e6ea      	b.n	8009554 <_scanf_float+0x60>
 800977e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009786:	463a      	mov	r2, r7
 8009788:	4640      	mov	r0, r8
 800978a:	4798      	blx	r3
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	3b01      	subs	r3, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	e6ec      	b.n	800956e <_scanf_float+0x7a>
 8009794:	1e6b      	subs	r3, r5, #1
 8009796:	2b06      	cmp	r3, #6
 8009798:	d825      	bhi.n	80097e6 <_scanf_float+0x2f2>
 800979a:	2d02      	cmp	r5, #2
 800979c:	d836      	bhi.n	800980c <_scanf_float+0x318>
 800979e:	455e      	cmp	r6, fp
 80097a0:	f67f aee8 	bls.w	8009574 <_scanf_float+0x80>
 80097a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097ac:	463a      	mov	r2, r7
 80097ae:	4640      	mov	r0, r8
 80097b0:	4798      	blx	r3
 80097b2:	6923      	ldr	r3, [r4, #16]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	e7f1      	b.n	800979e <_scanf_float+0x2aa>
 80097ba:	9802      	ldr	r0, [sp, #8]
 80097bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80097c4:	9002      	str	r0, [sp, #8]
 80097c6:	463a      	mov	r2, r7
 80097c8:	4640      	mov	r0, r8
 80097ca:	4798      	blx	r3
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	6123      	str	r3, [r4, #16]
 80097d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097d6:	fa5f fa8a 	uxtb.w	sl, sl
 80097da:	f1ba 0f02 	cmp.w	sl, #2
 80097de:	d1ec      	bne.n	80097ba <_scanf_float+0x2c6>
 80097e0:	3d03      	subs	r5, #3
 80097e2:	b2ed      	uxtb	r5, r5
 80097e4:	1b76      	subs	r6, r6, r5
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	05da      	lsls	r2, r3, #23
 80097ea:	d52f      	bpl.n	800984c <_scanf_float+0x358>
 80097ec:	055b      	lsls	r3, r3, #21
 80097ee:	d510      	bpl.n	8009812 <_scanf_float+0x31e>
 80097f0:	455e      	cmp	r6, fp
 80097f2:	f67f aebf 	bls.w	8009574 <_scanf_float+0x80>
 80097f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097fe:	463a      	mov	r2, r7
 8009800:	4640      	mov	r0, r8
 8009802:	4798      	blx	r3
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	3b01      	subs	r3, #1
 8009808:	6123      	str	r3, [r4, #16]
 800980a:	e7f1      	b.n	80097f0 <_scanf_float+0x2fc>
 800980c:	46aa      	mov	sl, r5
 800980e:	9602      	str	r6, [sp, #8]
 8009810:	e7df      	b.n	80097d2 <_scanf_float+0x2de>
 8009812:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	2965      	cmp	r1, #101	; 0x65
 800981a:	f103 33ff 	add.w	r3, r3, #4294967295
 800981e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	d00c      	beq.n	8009840 <_scanf_float+0x34c>
 8009826:	2945      	cmp	r1, #69	; 0x45
 8009828:	d00a      	beq.n	8009840 <_scanf_float+0x34c>
 800982a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800982e:	463a      	mov	r2, r7
 8009830:	4640      	mov	r0, r8
 8009832:	4798      	blx	r3
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800983a:	3b01      	subs	r3, #1
 800983c:	1eb5      	subs	r5, r6, #2
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009844:	463a      	mov	r2, r7
 8009846:	4640      	mov	r0, r8
 8009848:	4798      	blx	r3
 800984a:	462e      	mov	r6, r5
 800984c:	6825      	ldr	r5, [r4, #0]
 800984e:	f015 0510 	ands.w	r5, r5, #16
 8009852:	d14d      	bne.n	80098f0 <_scanf_float+0x3fc>
 8009854:	7035      	strb	r5, [r6, #0]
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009860:	d11a      	bne.n	8009898 <_scanf_float+0x3a4>
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	454b      	cmp	r3, r9
 8009866:	eba3 0209 	sub.w	r2, r3, r9
 800986a:	d122      	bne.n	80098b2 <_scanf_float+0x3be>
 800986c:	2200      	movs	r2, #0
 800986e:	4659      	mov	r1, fp
 8009870:	4640      	mov	r0, r8
 8009872:	f002 fb5b 	bl	800bf2c <_strtod_r>
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	6821      	ldr	r1, [r4, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f011 0f02 	tst.w	r1, #2
 8009880:	f103 0204 	add.w	r2, r3, #4
 8009884:	d020      	beq.n	80098c8 <_scanf_float+0x3d4>
 8009886:	9903      	ldr	r1, [sp, #12]
 8009888:	600a      	str	r2, [r1, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	ed83 0b00 	vstr	d0, [r3]
 8009890:	68e3      	ldr	r3, [r4, #12]
 8009892:	3301      	adds	r3, #1
 8009894:	60e3      	str	r3, [r4, #12]
 8009896:	e66e      	b.n	8009576 <_scanf_float+0x82>
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0e6      	beq.n	800986c <_scanf_float+0x378>
 800989e:	9905      	ldr	r1, [sp, #20]
 80098a0:	230a      	movs	r3, #10
 80098a2:	462a      	mov	r2, r5
 80098a4:	3101      	adds	r1, #1
 80098a6:	4640      	mov	r0, r8
 80098a8:	f002 fbc8 	bl	800c03c <_strtol_r>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	9e05      	ldr	r6, [sp, #20]
 80098b0:	1ac2      	subs	r2, r0, r3
 80098b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098b6:	429e      	cmp	r6, r3
 80098b8:	bf28      	it	cs
 80098ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80098be:	490d      	ldr	r1, [pc, #52]	; (80098f4 <_scanf_float+0x400>)
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f8dd 	bl	8009a80 <siprintf>
 80098c6:	e7d1      	b.n	800986c <_scanf_float+0x378>
 80098c8:	f011 0f04 	tst.w	r1, #4
 80098cc:	9903      	ldr	r1, [sp, #12]
 80098ce:	600a      	str	r2, [r1, #0]
 80098d0:	d1db      	bne.n	800988a <_scanf_float+0x396>
 80098d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80098d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098da:	681e      	ldr	r6, [r3, #0]
 80098dc:	d705      	bvc.n	80098ea <_scanf_float+0x3f6>
 80098de:	4806      	ldr	r0, [pc, #24]	; (80098f8 <_scanf_float+0x404>)
 80098e0:	f000 f9b2 	bl	8009c48 <nanf>
 80098e4:	ed86 0a00 	vstr	s0, [r6]
 80098e8:	e7d2      	b.n	8009890 <_scanf_float+0x39c>
 80098ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80098ee:	e7f9      	b.n	80098e4 <_scanf_float+0x3f0>
 80098f0:	2500      	movs	r5, #0
 80098f2:	e640      	b.n	8009576 <_scanf_float+0x82>
 80098f4:	0800dd7c 	.word	0x0800dd7c
 80098f8:	0800e10d 	.word	0x0800e10d

080098fc <std>:
 80098fc:	2300      	movs	r3, #0
 80098fe:	b510      	push	{r4, lr}
 8009900:	4604      	mov	r4, r0
 8009902:	e9c0 3300 	strd	r3, r3, [r0]
 8009906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800990a:	6083      	str	r3, [r0, #8]
 800990c:	8181      	strh	r1, [r0, #12]
 800990e:	6643      	str	r3, [r0, #100]	; 0x64
 8009910:	81c2      	strh	r2, [r0, #14]
 8009912:	6183      	str	r3, [r0, #24]
 8009914:	4619      	mov	r1, r3
 8009916:	2208      	movs	r2, #8
 8009918:	305c      	adds	r0, #92	; 0x5c
 800991a:	f000 f914 	bl	8009b46 <memset>
 800991e:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <std+0x58>)
 8009920:	6263      	str	r3, [r4, #36]	; 0x24
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <std+0x5c>)
 8009924:	62a3      	str	r3, [r4, #40]	; 0x28
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <std+0x60>)
 8009928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800992a:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <std+0x64>)
 800992c:	6323      	str	r3, [r4, #48]	; 0x30
 800992e:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <std+0x68>)
 8009930:	6224      	str	r4, [r4, #32]
 8009932:	429c      	cmp	r4, r3
 8009934:	d006      	beq.n	8009944 <std+0x48>
 8009936:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800993a:	4294      	cmp	r4, r2
 800993c:	d002      	beq.n	8009944 <std+0x48>
 800993e:	33d0      	adds	r3, #208	; 0xd0
 8009940:	429c      	cmp	r4, r3
 8009942:	d105      	bne.n	8009950 <std+0x54>
 8009944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994c:	f000 b978 	b.w	8009c40 <__retarget_lock_init_recursive>
 8009950:	bd10      	pop	{r4, pc}
 8009952:	bf00      	nop
 8009954:	08009ac1 	.word	0x08009ac1
 8009958:	08009ae3 	.word	0x08009ae3
 800995c:	08009b1b 	.word	0x08009b1b
 8009960:	08009b3f 	.word	0x08009b3f
 8009964:	2000052c 	.word	0x2000052c

08009968 <stdio_exit_handler>:
 8009968:	4a02      	ldr	r2, [pc, #8]	; (8009974 <stdio_exit_handler+0xc>)
 800996a:	4903      	ldr	r1, [pc, #12]	; (8009978 <stdio_exit_handler+0x10>)
 800996c:	4803      	ldr	r0, [pc, #12]	; (800997c <stdio_exit_handler+0x14>)
 800996e:	f000 b869 	b.w	8009a44 <_fwalk_sglue>
 8009972:	bf00      	nop
 8009974:	2000001c 	.word	0x2000001c
 8009978:	0800c3fd 	.word	0x0800c3fd
 800997c:	20000028 	.word	0x20000028

08009980 <cleanup_stdio>:
 8009980:	6841      	ldr	r1, [r0, #4]
 8009982:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <cleanup_stdio+0x34>)
 8009984:	4299      	cmp	r1, r3
 8009986:	b510      	push	{r4, lr}
 8009988:	4604      	mov	r4, r0
 800998a:	d001      	beq.n	8009990 <cleanup_stdio+0x10>
 800998c:	f002 fd36 	bl	800c3fc <_fflush_r>
 8009990:	68a1      	ldr	r1, [r4, #8]
 8009992:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <cleanup_stdio+0x38>)
 8009994:	4299      	cmp	r1, r3
 8009996:	d002      	beq.n	800999e <cleanup_stdio+0x1e>
 8009998:	4620      	mov	r0, r4
 800999a:	f002 fd2f 	bl	800c3fc <_fflush_r>
 800999e:	68e1      	ldr	r1, [r4, #12]
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <cleanup_stdio+0x3c>)
 80099a2:	4299      	cmp	r1, r3
 80099a4:	d004      	beq.n	80099b0 <cleanup_stdio+0x30>
 80099a6:	4620      	mov	r0, r4
 80099a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ac:	f002 bd26 	b.w	800c3fc <_fflush_r>
 80099b0:	bd10      	pop	{r4, pc}
 80099b2:	bf00      	nop
 80099b4:	2000052c 	.word	0x2000052c
 80099b8:	20000594 	.word	0x20000594
 80099bc:	200005fc 	.word	0x200005fc

080099c0 <global_stdio_init.part.0>:
 80099c0:	b510      	push	{r4, lr}
 80099c2:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <global_stdio_init.part.0+0x30>)
 80099c4:	4c0b      	ldr	r4, [pc, #44]	; (80099f4 <global_stdio_init.part.0+0x34>)
 80099c6:	4a0c      	ldr	r2, [pc, #48]	; (80099f8 <global_stdio_init.part.0+0x38>)
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	4620      	mov	r0, r4
 80099cc:	2200      	movs	r2, #0
 80099ce:	2104      	movs	r1, #4
 80099d0:	f7ff ff94 	bl	80098fc <std>
 80099d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099d8:	2201      	movs	r2, #1
 80099da:	2109      	movs	r1, #9
 80099dc:	f7ff ff8e 	bl	80098fc <std>
 80099e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099e4:	2202      	movs	r2, #2
 80099e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ea:	2112      	movs	r1, #18
 80099ec:	f7ff bf86 	b.w	80098fc <std>
 80099f0:	20000664 	.word	0x20000664
 80099f4:	2000052c 	.word	0x2000052c
 80099f8:	08009969 	.word	0x08009969

080099fc <__sfp_lock_acquire>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sfp_lock_acquire+0x8>)
 80099fe:	f000 b920 	b.w	8009c42 <__retarget_lock_acquire_recursive>
 8009a02:	bf00      	nop
 8009a04:	2000066d 	.word	0x2000066d

08009a08 <__sfp_lock_release>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__sfp_lock_release+0x8>)
 8009a0a:	f000 b91b 	b.w	8009c44 <__retarget_lock_release_recursive>
 8009a0e:	bf00      	nop
 8009a10:	2000066d 	.word	0x2000066d

08009a14 <__sinit>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	4604      	mov	r4, r0
 8009a18:	f7ff fff0 	bl	80099fc <__sfp_lock_acquire>
 8009a1c:	6a23      	ldr	r3, [r4, #32]
 8009a1e:	b11b      	cbz	r3, 8009a28 <__sinit+0x14>
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	f7ff bff0 	b.w	8009a08 <__sfp_lock_release>
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <__sinit+0x28>)
 8009a2a:	6223      	str	r3, [r4, #32]
 8009a2c:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <__sinit+0x2c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1f5      	bne.n	8009a20 <__sinit+0xc>
 8009a34:	f7ff ffc4 	bl	80099c0 <global_stdio_init.part.0>
 8009a38:	e7f2      	b.n	8009a20 <__sinit+0xc>
 8009a3a:	bf00      	nop
 8009a3c:	08009981 	.word	0x08009981
 8009a40:	20000664 	.word	0x20000664

08009a44 <_fwalk_sglue>:
 8009a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a48:	4607      	mov	r7, r0
 8009a4a:	4688      	mov	r8, r1
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	2600      	movs	r6, #0
 8009a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a54:	f1b9 0901 	subs.w	r9, r9, #1
 8009a58:	d505      	bpl.n	8009a66 <_fwalk_sglue+0x22>
 8009a5a:	6824      	ldr	r4, [r4, #0]
 8009a5c:	2c00      	cmp	r4, #0
 8009a5e:	d1f7      	bne.n	8009a50 <_fwalk_sglue+0xc>
 8009a60:	4630      	mov	r0, r6
 8009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a66:	89ab      	ldrh	r3, [r5, #12]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d907      	bls.n	8009a7c <_fwalk_sglue+0x38>
 8009a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a70:	3301      	adds	r3, #1
 8009a72:	d003      	beq.n	8009a7c <_fwalk_sglue+0x38>
 8009a74:	4629      	mov	r1, r5
 8009a76:	4638      	mov	r0, r7
 8009a78:	47c0      	blx	r8
 8009a7a:	4306      	orrs	r6, r0
 8009a7c:	3568      	adds	r5, #104	; 0x68
 8009a7e:	e7e9      	b.n	8009a54 <_fwalk_sglue+0x10>

08009a80 <siprintf>:
 8009a80:	b40e      	push	{r1, r2, r3}
 8009a82:	b500      	push	{lr}
 8009a84:	b09c      	sub	sp, #112	; 0x70
 8009a86:	ab1d      	add	r3, sp, #116	; 0x74
 8009a88:	9002      	str	r0, [sp, #8]
 8009a8a:	9006      	str	r0, [sp, #24]
 8009a8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a90:	4809      	ldr	r0, [pc, #36]	; (8009ab8 <siprintf+0x38>)
 8009a92:	9107      	str	r1, [sp, #28]
 8009a94:	9104      	str	r1, [sp, #16]
 8009a96:	4909      	ldr	r1, [pc, #36]	; (8009abc <siprintf+0x3c>)
 8009a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9c:	9105      	str	r1, [sp, #20]
 8009a9e:	6800      	ldr	r0, [r0, #0]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	a902      	add	r1, sp, #8
 8009aa4:	f002 fb26 	bl	800c0f4 <_svfiprintf_r>
 8009aa8:	9b02      	ldr	r3, [sp, #8]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	b01c      	add	sp, #112	; 0x70
 8009ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab4:	b003      	add	sp, #12
 8009ab6:	4770      	bx	lr
 8009ab8:	20000074 	.word	0x20000074
 8009abc:	ffff0208 	.word	0xffff0208

08009ac0 <__sread>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	f000 f86c 	bl	8009ba4 <_read_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	bfab      	itete	ge
 8009ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ad4:	181b      	addge	r3, r3, r0
 8009ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ada:	bfac      	ite	ge
 8009adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ade:	81a3      	strhlt	r3, [r4, #12]
 8009ae0:	bd10      	pop	{r4, pc}

08009ae2 <__swrite>:
 8009ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	898b      	ldrh	r3, [r1, #12]
 8009aea:	05db      	lsls	r3, r3, #23
 8009aec:	4605      	mov	r5, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	4616      	mov	r6, r2
 8009af2:	d505      	bpl.n	8009b00 <__swrite+0x1e>
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	2302      	movs	r3, #2
 8009afa:	2200      	movs	r2, #0
 8009afc:	f000 f840 	bl	8009b80 <_lseek_r>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	463b      	mov	r3, r7
 8009b10:	4628      	mov	r0, r5
 8009b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b16:	f000 b857 	b.w	8009bc8 <_write_r>

08009b1a <__sseek>:
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	f000 f82d 	bl	8009b80 <_lseek_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	bf15      	itete	ne
 8009b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b36:	81a3      	strheq	r3, [r4, #12]
 8009b38:	bf18      	it	ne
 8009b3a:	81a3      	strhne	r3, [r4, #12]
 8009b3c:	bd10      	pop	{r4, pc}

08009b3e <__sclose>:
 8009b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b42:	f000 b80d 	b.w	8009b60 <_close_r>

08009b46 <memset>:
 8009b46:	4402      	add	r2, r0
 8009b48:	4603      	mov	r3, r0
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d100      	bne.n	8009b50 <memset+0xa>
 8009b4e:	4770      	bx	lr
 8009b50:	f803 1b01 	strb.w	r1, [r3], #1
 8009b54:	e7f9      	b.n	8009b4a <memset+0x4>
	...

08009b58 <_localeconv_r>:
 8009b58:	4800      	ldr	r0, [pc, #0]	; (8009b5c <_localeconv_r+0x4>)
 8009b5a:	4770      	bx	lr
 8009b5c:	20000168 	.word	0x20000168

08009b60 <_close_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d06      	ldr	r5, [pc, #24]	; (8009b7c <_close_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7f8 fa33 	bl	8001fd6 <_close>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_close_r+0x1a>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_close_r+0x1a>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20000668 	.word	0x20000668

08009b80 <_lseek_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_lseek_r+0x20>)
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	4611      	mov	r1, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f8 fa48 	bl	8002024 <_lseek>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_lseek_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_lseek_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	20000668 	.word	0x20000668

08009ba4 <_read_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_read_r+0x20>)
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	2200      	movs	r2, #0
 8009bb0:	602a      	str	r2, [r5, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f7f8 f9d6 	bl	8001f64 <_read>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_read_r+0x1e>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_read_r+0x1e>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20000668 	.word	0x20000668

08009bc8 <_write_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4d07      	ldr	r5, [pc, #28]	; (8009be8 <_write_r+0x20>)
 8009bcc:	4604      	mov	r4, r0
 8009bce:	4608      	mov	r0, r1
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	602a      	str	r2, [r5, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f7f8 f9e1 	bl	8001f9e <_write>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_write_r+0x1e>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_write_r+0x1e>
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	20000668 	.word	0x20000668

08009bec <__errno>:
 8009bec:	4b01      	ldr	r3, [pc, #4]	; (8009bf4 <__errno+0x8>)
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20000074 	.word	0x20000074

08009bf8 <__libc_init_array>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	4d0d      	ldr	r5, [pc, #52]	; (8009c30 <__libc_init_array+0x38>)
 8009bfc:	4c0d      	ldr	r4, [pc, #52]	; (8009c34 <__libc_init_array+0x3c>)
 8009bfe:	1b64      	subs	r4, r4, r5
 8009c00:	10a4      	asrs	r4, r4, #2
 8009c02:	2600      	movs	r6, #0
 8009c04:	42a6      	cmp	r6, r4
 8009c06:	d109      	bne.n	8009c1c <__libc_init_array+0x24>
 8009c08:	4d0b      	ldr	r5, [pc, #44]	; (8009c38 <__libc_init_array+0x40>)
 8009c0a:	4c0c      	ldr	r4, [pc, #48]	; (8009c3c <__libc_init_array+0x44>)
 8009c0c:	f003 fb0c 	bl	800d228 <_init>
 8009c10:	1b64      	subs	r4, r4, r5
 8009c12:	10a4      	asrs	r4, r4, #2
 8009c14:	2600      	movs	r6, #0
 8009c16:	42a6      	cmp	r6, r4
 8009c18:	d105      	bne.n	8009c26 <__libc_init_array+0x2e>
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c20:	4798      	blx	r3
 8009c22:	3601      	adds	r6, #1
 8009c24:	e7ee      	b.n	8009c04 <__libc_init_array+0xc>
 8009c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c2a:	4798      	blx	r3
 8009c2c:	3601      	adds	r6, #1
 8009c2e:	e7f2      	b.n	8009c16 <__libc_init_array+0x1e>
 8009c30:	0800e178 	.word	0x0800e178
 8009c34:	0800e178 	.word	0x0800e178
 8009c38:	0800e178 	.word	0x0800e178
 8009c3c:	0800e17c 	.word	0x0800e17c

08009c40 <__retarget_lock_init_recursive>:
 8009c40:	4770      	bx	lr

08009c42 <__retarget_lock_acquire_recursive>:
 8009c42:	4770      	bx	lr

08009c44 <__retarget_lock_release_recursive>:
 8009c44:	4770      	bx	lr
	...

08009c48 <nanf>:
 8009c48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c50 <nanf+0x8>
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	7fc00000 	.word	0x7fc00000

08009c54 <quorem>:
 8009c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	6903      	ldr	r3, [r0, #16]
 8009c5a:	690c      	ldr	r4, [r1, #16]
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	4607      	mov	r7, r0
 8009c60:	db7e      	blt.n	8009d60 <quorem+0x10c>
 8009c62:	3c01      	subs	r4, #1
 8009c64:	f101 0814 	add.w	r8, r1, #20
 8009c68:	f100 0514 	add.w	r5, r0, #20
 8009c6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c86:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c8a:	d331      	bcc.n	8009cf0 <quorem+0x9c>
 8009c8c:	f04f 0e00 	mov.w	lr, #0
 8009c90:	4640      	mov	r0, r8
 8009c92:	46ac      	mov	ip, r5
 8009c94:	46f2      	mov	sl, lr
 8009c96:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c9a:	b293      	uxth	r3, r2
 8009c9c:	fb06 e303 	mla	r3, r6, r3, lr
 8009ca0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ca4:	0c1a      	lsrs	r2, r3, #16
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cac:	f8dc a000 	ldr.w	sl, [ip]
 8009cb0:	fa13 f38a 	uxtah	r3, r3, sl
 8009cb4:	fb06 220e 	mla	r2, r6, lr, r2
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	9b00      	ldr	r3, [sp, #0]
 8009cbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cc0:	b292      	uxth	r2, r2
 8009cc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009cc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cca:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cce:	4581      	cmp	r9, r0
 8009cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cd4:	f84c 3b04 	str.w	r3, [ip], #4
 8009cd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cdc:	d2db      	bcs.n	8009c96 <quorem+0x42>
 8009cde:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ce2:	b92b      	cbnz	r3, 8009cf0 <quorem+0x9c>
 8009ce4:	9b01      	ldr	r3, [sp, #4]
 8009ce6:	3b04      	subs	r3, #4
 8009ce8:	429d      	cmp	r5, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	d32c      	bcc.n	8009d48 <quorem+0xf4>
 8009cee:	613c      	str	r4, [r7, #16]
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f001 f96b 	bl	800afcc <__mcmp>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	db22      	blt.n	8009d40 <quorem+0xec>
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	2000      	movs	r0, #0
 8009d00:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d04:	f8d1 c000 	ldr.w	ip, [r1]
 8009d08:	b293      	uxth	r3, r2
 8009d0a:	1ac3      	subs	r3, r0, r3
 8009d0c:	0c12      	lsrs	r2, r2, #16
 8009d0e:	fa13 f38c 	uxtah	r3, r3, ip
 8009d12:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009d16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d20:	45c1      	cmp	r9, r8
 8009d22:	f841 3b04 	str.w	r3, [r1], #4
 8009d26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d2a:	d2e9      	bcs.n	8009d00 <quorem+0xac>
 8009d2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d34:	b922      	cbnz	r2, 8009d40 <quorem+0xec>
 8009d36:	3b04      	subs	r3, #4
 8009d38:	429d      	cmp	r5, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	d30a      	bcc.n	8009d54 <quorem+0x100>
 8009d3e:	613c      	str	r4, [r7, #16]
 8009d40:	4630      	mov	r0, r6
 8009d42:	b003      	add	sp, #12
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	3b04      	subs	r3, #4
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	d1ce      	bne.n	8009cee <quorem+0x9a>
 8009d50:	3c01      	subs	r4, #1
 8009d52:	e7c9      	b.n	8009ce8 <quorem+0x94>
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	3b04      	subs	r3, #4
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	d1f0      	bne.n	8009d3e <quorem+0xea>
 8009d5c:	3c01      	subs	r4, #1
 8009d5e:	e7eb      	b.n	8009d38 <quorem+0xe4>
 8009d60:	2000      	movs	r0, #0
 8009d62:	e7ee      	b.n	8009d42 <quorem+0xee>
 8009d64:	0000      	movs	r0, r0
	...

08009d68 <_dtoa_r>:
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	ed2d 8b02 	vpush	{d8}
 8009d70:	69c5      	ldr	r5, [r0, #28]
 8009d72:	b091      	sub	sp, #68	; 0x44
 8009d74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d78:	ec59 8b10 	vmov	r8, r9, d0
 8009d7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009d7e:	9106      	str	r1, [sp, #24]
 8009d80:	4606      	mov	r6, r0
 8009d82:	9208      	str	r2, [sp, #32]
 8009d84:	930c      	str	r3, [sp, #48]	; 0x30
 8009d86:	b975      	cbnz	r5, 8009da6 <_dtoa_r+0x3e>
 8009d88:	2010      	movs	r0, #16
 8009d8a:	f000 fda5 	bl	800a8d8 <malloc>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	61f0      	str	r0, [r6, #28]
 8009d92:	b920      	cbnz	r0, 8009d9e <_dtoa_r+0x36>
 8009d94:	4ba6      	ldr	r3, [pc, #664]	; (800a030 <_dtoa_r+0x2c8>)
 8009d96:	21ef      	movs	r1, #239	; 0xef
 8009d98:	48a6      	ldr	r0, [pc, #664]	; (800a034 <_dtoa_r+0x2cc>)
 8009d9a:	f002 fba9 	bl	800c4f0 <__assert_func>
 8009d9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009da2:	6005      	str	r5, [r0, #0]
 8009da4:	60c5      	str	r5, [r0, #12]
 8009da6:	69f3      	ldr	r3, [r6, #28]
 8009da8:	6819      	ldr	r1, [r3, #0]
 8009daa:	b151      	cbz	r1, 8009dc2 <_dtoa_r+0x5a>
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	604a      	str	r2, [r1, #4]
 8009db0:	2301      	movs	r3, #1
 8009db2:	4093      	lsls	r3, r2
 8009db4:	608b      	str	r3, [r1, #8]
 8009db6:	4630      	mov	r0, r6
 8009db8:	f000 fe82 	bl	800aac0 <_Bfree>
 8009dbc:	69f3      	ldr	r3, [r6, #28]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	f1b9 0300 	subs.w	r3, r9, #0
 8009dc6:	bfbb      	ittet	lt
 8009dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	9303      	strlt	r3, [sp, #12]
 8009dce:	2300      	movge	r3, #0
 8009dd0:	2201      	movlt	r2, #1
 8009dd2:	bfac      	ite	ge
 8009dd4:	6023      	strge	r3, [r4, #0]
 8009dd6:	6022      	strlt	r2, [r4, #0]
 8009dd8:	4b97      	ldr	r3, [pc, #604]	; (800a038 <_dtoa_r+0x2d0>)
 8009dda:	9c03      	ldr	r4, [sp, #12]
 8009ddc:	43a3      	bics	r3, r4
 8009dde:	d11c      	bne.n	8009e1a <_dtoa_r+0xb2>
 8009de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009de2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009dec:	ea53 0308 	orrs.w	r3, r3, r8
 8009df0:	f000 84fb 	beq.w	800a7ea <_dtoa_r+0xa82>
 8009df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009df6:	b963      	cbnz	r3, 8009e12 <_dtoa_r+0xaa>
 8009df8:	4b90      	ldr	r3, [pc, #576]	; (800a03c <_dtoa_r+0x2d4>)
 8009dfa:	e020      	b.n	8009e3e <_dtoa_r+0xd6>
 8009dfc:	4b90      	ldr	r3, [pc, #576]	; (800a040 <_dtoa_r+0x2d8>)
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	3308      	adds	r3, #8
 8009e02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	9801      	ldr	r0, [sp, #4]
 8009e08:	b011      	add	sp, #68	; 0x44
 8009e0a:	ecbd 8b02 	vpop	{d8}
 8009e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e12:	4b8a      	ldr	r3, [pc, #552]	; (800a03c <_dtoa_r+0x2d4>)
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	3303      	adds	r3, #3
 8009e18:	e7f3      	b.n	8009e02 <_dtoa_r+0x9a>
 8009e1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009e1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e26:	d10c      	bne.n	8009e42 <_dtoa_r+0xda>
 8009e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 84d7 	beq.w	800a7e4 <_dtoa_r+0xa7c>
 8009e36:	4b83      	ldr	r3, [pc, #524]	; (800a044 <_dtoa_r+0x2dc>)
 8009e38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	e7e1      	b.n	8009e06 <_dtoa_r+0x9e>
 8009e42:	aa0e      	add	r2, sp, #56	; 0x38
 8009e44:	a90f      	add	r1, sp, #60	; 0x3c
 8009e46:	4630      	mov	r0, r6
 8009e48:	eeb0 0b48 	vmov.f64	d0, d8
 8009e4c:	f001 f9d4 	bl	800b1f8 <__d2b>
 8009e50:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e56:	4605      	mov	r5, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d046      	beq.n	8009eea <_dtoa_r+0x182>
 8009e5c:	eeb0 7b48 	vmov.f64	d7, d8
 8009e60:	ee18 1a90 	vmov	r1, s17
 8009e64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009e68:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009e6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009e70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e74:	2000      	movs	r0, #0
 8009e76:	ee07 1a90 	vmov	s15, r1
 8009e7a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8009e7e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a018 <_dtoa_r+0x2b0>
 8009e82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e86:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a020 <_dtoa_r+0x2b8>
 8009e8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a028 <_dtoa_r+0x2c0>
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009e9a:	eeb0 7b46 	vmov.f64	d7, d6
 8009e9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009ea2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009ea6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	ee16 ba90 	vmov	fp, s13
 8009eb2:	9009      	str	r0, [sp, #36]	; 0x24
 8009eb4:	d508      	bpl.n	8009ec8 <_dtoa_r+0x160>
 8009eb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009eba:	eeb4 6b47 	vcmp.f64	d6, d7
 8009ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec2:	bf18      	it	ne
 8009ec4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009ec8:	f1bb 0f16 	cmp.w	fp, #22
 8009ecc:	d82b      	bhi.n	8009f26 <_dtoa_r+0x1be>
 8009ece:	495e      	ldr	r1, [pc, #376]	; (800a048 <_dtoa_r+0x2e0>)
 8009ed0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009ed4:	ed91 7b00 	vldr	d7, [r1]
 8009ed8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee0:	d501      	bpl.n	8009ee6 <_dtoa_r+0x17e>
 8009ee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	e01e      	b.n	8009f28 <_dtoa_r+0x1c0>
 8009eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eec:	4413      	add	r3, r2
 8009eee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009ef2:	2920      	cmp	r1, #32
 8009ef4:	bfc1      	itttt	gt
 8009ef6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8009efa:	408c      	lslgt	r4, r1
 8009efc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009f00:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009f04:	bfd6      	itet	le
 8009f06:	f1c1 0120 	rsble	r1, r1, #32
 8009f0a:	4321      	orrgt	r1, r4
 8009f0c:	fa08 f101 	lslle.w	r1, r8, r1
 8009f10:	ee07 1a90 	vmov	s15, r1
 8009f14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	ee17 1a90 	vmov	r1, s15
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009f24:	e7a7      	b.n	8009e76 <_dtoa_r+0x10e>
 8009f26:	2101      	movs	r1, #1
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	1e53      	subs	r3, r2, #1
 8009f2c:	9305      	str	r3, [sp, #20]
 8009f2e:	bf45      	ittet	mi
 8009f30:	f1c2 0301 	rsbmi	r3, r2, #1
 8009f34:	9304      	strmi	r3, [sp, #16]
 8009f36:	2300      	movpl	r3, #0
 8009f38:	2300      	movmi	r3, #0
 8009f3a:	bf4c      	ite	mi
 8009f3c:	9305      	strmi	r3, [sp, #20]
 8009f3e:	9304      	strpl	r3, [sp, #16]
 8009f40:	f1bb 0f00 	cmp.w	fp, #0
 8009f44:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f46:	db18      	blt.n	8009f7a <_dtoa_r+0x212>
 8009f48:	9b05      	ldr	r3, [sp, #20]
 8009f4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009f4e:	445b      	add	r3, fp
 8009f50:	9305      	str	r3, [sp, #20]
 8009f52:	2300      	movs	r3, #0
 8009f54:	9a06      	ldr	r2, [sp, #24]
 8009f56:	2a09      	cmp	r2, #9
 8009f58:	d848      	bhi.n	8009fec <_dtoa_r+0x284>
 8009f5a:	2a05      	cmp	r2, #5
 8009f5c:	bfc4      	itt	gt
 8009f5e:	3a04      	subgt	r2, #4
 8009f60:	9206      	strgt	r2, [sp, #24]
 8009f62:	9a06      	ldr	r2, [sp, #24]
 8009f64:	f1a2 0202 	sub.w	r2, r2, #2
 8009f68:	bfcc      	ite	gt
 8009f6a:	2400      	movgt	r4, #0
 8009f6c:	2401      	movle	r4, #1
 8009f6e:	2a03      	cmp	r2, #3
 8009f70:	d847      	bhi.n	800a002 <_dtoa_r+0x29a>
 8009f72:	e8df f002 	tbb	[pc, r2]
 8009f76:	2d0b      	.short	0x2d0b
 8009f78:	392b      	.short	0x392b
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	eba3 030b 	sub.w	r3, r3, fp
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	920a      	str	r2, [sp, #40]	; 0x28
 8009f86:	f1cb 0300 	rsb	r3, fp, #0
 8009f8a:	e7e3      	b.n	8009f54 <_dtoa_r+0x1ec>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	9207      	str	r2, [sp, #28]
 8009f90:	9a08      	ldr	r2, [sp, #32]
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	dc38      	bgt.n	800a008 <_dtoa_r+0x2a0>
 8009f96:	f04f 0a01 	mov.w	sl, #1
 8009f9a:	46d1      	mov	r9, sl
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	f8cd a020 	str.w	sl, [sp, #32]
 8009fa2:	69f7      	ldr	r7, [r6, #28]
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	2004      	movs	r0, #4
 8009fa8:	f100 0c14 	add.w	ip, r0, #20
 8009fac:	4594      	cmp	ip, r2
 8009fae:	d930      	bls.n	800a012 <_dtoa_r+0x2aa>
 8009fb0:	6079      	str	r1, [r7, #4]
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8009fb6:	f000 fd43 	bl	800aa40 <_Balloc>
 8009fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbc:	9001      	str	r0, [sp, #4]
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d145      	bne.n	800a050 <_dtoa_r+0x2e8>
 8009fc4:	4b21      	ldr	r3, [pc, #132]	; (800a04c <_dtoa_r+0x2e4>)
 8009fc6:	f240 11af 	movw	r1, #431	; 0x1af
 8009fca:	e6e5      	b.n	8009d98 <_dtoa_r+0x30>
 8009fcc:	2201      	movs	r2, #1
 8009fce:	e7de      	b.n	8009f8e <_dtoa_r+0x226>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	9207      	str	r2, [sp, #28]
 8009fd4:	9a08      	ldr	r2, [sp, #32]
 8009fd6:	eb0b 0a02 	add.w	sl, fp, r2
 8009fda:	f10a 0901 	add.w	r9, sl, #1
 8009fde:	464a      	mov	r2, r9
 8009fe0:	2a01      	cmp	r2, #1
 8009fe2:	bfb8      	it	lt
 8009fe4:	2201      	movlt	r2, #1
 8009fe6:	e7dc      	b.n	8009fa2 <_dtoa_r+0x23a>
 8009fe8:	2201      	movs	r2, #1
 8009fea:	e7f2      	b.n	8009fd2 <_dtoa_r+0x26a>
 8009fec:	2401      	movs	r4, #1
 8009fee:	2200      	movs	r2, #0
 8009ff0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009ff4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	46d1      	mov	r9, sl
 8009ffc:	2212      	movs	r2, #18
 8009ffe:	9108      	str	r1, [sp, #32]
 800a000:	e7cf      	b.n	8009fa2 <_dtoa_r+0x23a>
 800a002:	2201      	movs	r2, #1
 800a004:	9207      	str	r2, [sp, #28]
 800a006:	e7f5      	b.n	8009ff4 <_dtoa_r+0x28c>
 800a008:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a00c:	46d1      	mov	r9, sl
 800a00e:	4652      	mov	r2, sl
 800a010:	e7c7      	b.n	8009fa2 <_dtoa_r+0x23a>
 800a012:	3101      	adds	r1, #1
 800a014:	0040      	lsls	r0, r0, #1
 800a016:	e7c7      	b.n	8009fa8 <_dtoa_r+0x240>
 800a018:	636f4361 	.word	0x636f4361
 800a01c:	3fd287a7 	.word	0x3fd287a7
 800a020:	8b60c8b3 	.word	0x8b60c8b3
 800a024:	3fc68a28 	.word	0x3fc68a28
 800a028:	509f79fb 	.word	0x509f79fb
 800a02c:	3fd34413 	.word	0x3fd34413
 800a030:	0800dd8e 	.word	0x0800dd8e
 800a034:	0800dda5 	.word	0x0800dda5
 800a038:	7ff00000 	.word	0x7ff00000
 800a03c:	0800dd8a 	.word	0x0800dd8a
 800a040:	0800dd81 	.word	0x0800dd81
 800a044:	0800dd59 	.word	0x0800dd59
 800a048:	0800de90 	.word	0x0800de90
 800a04c:	0800ddfd 	.word	0x0800ddfd
 800a050:	69f2      	ldr	r2, [r6, #28]
 800a052:	9901      	ldr	r1, [sp, #4]
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	f1b9 0f0e 	cmp.w	r9, #14
 800a05a:	d86c      	bhi.n	800a136 <_dtoa_r+0x3ce>
 800a05c:	2c00      	cmp	r4, #0
 800a05e:	d06a      	beq.n	800a136 <_dtoa_r+0x3ce>
 800a060:	f1bb 0f00 	cmp.w	fp, #0
 800a064:	f340 80a0 	ble.w	800a1a8 <_dtoa_r+0x440>
 800a068:	4ac1      	ldr	r2, [pc, #772]	; (800a370 <_dtoa_r+0x608>)
 800a06a:	f00b 010f 	and.w	r1, fp, #15
 800a06e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a072:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a076:	ed92 7b00 	vldr	d7, [r2]
 800a07a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a07e:	f000 8087 	beq.w	800a190 <_dtoa_r+0x428>
 800a082:	49bc      	ldr	r1, [pc, #752]	; (800a374 <_dtoa_r+0x60c>)
 800a084:	ed91 6b08 	vldr	d6, [r1, #32]
 800a088:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a08c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a090:	f002 020f 	and.w	r2, r2, #15
 800a094:	2103      	movs	r1, #3
 800a096:	48b7      	ldr	r0, [pc, #732]	; (800a374 <_dtoa_r+0x60c>)
 800a098:	2a00      	cmp	r2, #0
 800a09a:	d17b      	bne.n	800a194 <_dtoa_r+0x42c>
 800a09c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a0a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	f000 80a0 	beq.w	800a1f4 <_dtoa_r+0x48c>
 800a0b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a0b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c0:	f140 8098 	bpl.w	800a1f4 <_dtoa_r+0x48c>
 800a0c4:	f1b9 0f00 	cmp.w	r9, #0
 800a0c8:	f000 8094 	beq.w	800a1f4 <_dtoa_r+0x48c>
 800a0cc:	f1ba 0f00 	cmp.w	sl, #0
 800a0d0:	dd2f      	ble.n	800a132 <_dtoa_r+0x3ca>
 800a0d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a0d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0da:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0de:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a0e2:	3101      	adds	r1, #1
 800a0e4:	4654      	mov	r4, sl
 800a0e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a0ee:	ee07 1a90 	vmov	s15, r1
 800a0f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a0f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a0fa:	ee15 7a90 	vmov	r7, s11
 800a0fe:	ec51 0b15 	vmov	r0, r1, d5
 800a102:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a106:	2c00      	cmp	r4, #0
 800a108:	d177      	bne.n	800a1fa <_dtoa_r+0x492>
 800a10a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a10e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a112:	ec41 0b17 	vmov	d7, r0, r1
 800a116:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11e:	f300 826a 	bgt.w	800a5f6 <_dtoa_r+0x88e>
 800a122:	eeb1 7b47 	vneg.f64	d7, d7
 800a126:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12e:	f100 8260 	bmi.w	800a5f2 <_dtoa_r+0x88a>
 800a132:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a138:	2a00      	cmp	r2, #0
 800a13a:	f2c0 811d 	blt.w	800a378 <_dtoa_r+0x610>
 800a13e:	f1bb 0f0e 	cmp.w	fp, #14
 800a142:	f300 8119 	bgt.w	800a378 <_dtoa_r+0x610>
 800a146:	4b8a      	ldr	r3, [pc, #552]	; (800a370 <_dtoa_r+0x608>)
 800a148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a14c:	ed93 6b00 	vldr	d6, [r3]
 800a150:	9b08      	ldr	r3, [sp, #32]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f280 80b7 	bge.w	800a2c6 <_dtoa_r+0x55e>
 800a158:	f1b9 0f00 	cmp.w	r9, #0
 800a15c:	f300 80b3 	bgt.w	800a2c6 <_dtoa_r+0x55e>
 800a160:	f040 8246 	bne.w	800a5f0 <_dtoa_r+0x888>
 800a164:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a168:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a16c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a170:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a178:	464c      	mov	r4, r9
 800a17a:	464f      	mov	r7, r9
 800a17c:	f280 821c 	bge.w	800a5b8 <_dtoa_r+0x850>
 800a180:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a184:	2331      	movs	r3, #49	; 0x31
 800a186:	f808 3b01 	strb.w	r3, [r8], #1
 800a18a:	f10b 0b01 	add.w	fp, fp, #1
 800a18e:	e218      	b.n	800a5c2 <_dtoa_r+0x85a>
 800a190:	2102      	movs	r1, #2
 800a192:	e780      	b.n	800a096 <_dtoa_r+0x32e>
 800a194:	07d4      	lsls	r4, r2, #31
 800a196:	d504      	bpl.n	800a1a2 <_dtoa_r+0x43a>
 800a198:	ed90 6b00 	vldr	d6, [r0]
 800a19c:	3101      	adds	r1, #1
 800a19e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1a2:	1052      	asrs	r2, r2, #1
 800a1a4:	3008      	adds	r0, #8
 800a1a6:	e777      	b.n	800a098 <_dtoa_r+0x330>
 800a1a8:	d022      	beq.n	800a1f0 <_dtoa_r+0x488>
 800a1aa:	f1cb 0200 	rsb	r2, fp, #0
 800a1ae:	4970      	ldr	r1, [pc, #448]	; (800a370 <_dtoa_r+0x608>)
 800a1b0:	f002 000f 	and.w	r0, r2, #15
 800a1b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a1b8:	ed91 7b00 	vldr	d7, [r1]
 800a1bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a1c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1c4:	486b      	ldr	r0, [pc, #428]	; (800a374 <_dtoa_r+0x60c>)
 800a1c6:	1112      	asrs	r2, r2, #4
 800a1c8:	2400      	movs	r4, #0
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	b92a      	cbnz	r2, 800a1da <_dtoa_r+0x472>
 800a1ce:	2c00      	cmp	r4, #0
 800a1d0:	f43f af6a 	beq.w	800a0a8 <_dtoa_r+0x340>
 800a1d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1d8:	e766      	b.n	800a0a8 <_dtoa_r+0x340>
 800a1da:	07d7      	lsls	r7, r2, #31
 800a1dc:	d505      	bpl.n	800a1ea <_dtoa_r+0x482>
 800a1de:	ed90 6b00 	vldr	d6, [r0]
 800a1e2:	3101      	adds	r1, #1
 800a1e4:	2401      	movs	r4, #1
 800a1e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1ea:	1052      	asrs	r2, r2, #1
 800a1ec:	3008      	adds	r0, #8
 800a1ee:	e7ed      	b.n	800a1cc <_dtoa_r+0x464>
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	e759      	b.n	800a0a8 <_dtoa_r+0x340>
 800a1f4:	465a      	mov	r2, fp
 800a1f6:	464c      	mov	r4, r9
 800a1f8:	e775      	b.n	800a0e6 <_dtoa_r+0x37e>
 800a1fa:	ec41 0b17 	vmov	d7, r0, r1
 800a1fe:	495c      	ldr	r1, [pc, #368]	; (800a370 <_dtoa_r+0x608>)
 800a200:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a204:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a208:	9901      	ldr	r1, [sp, #4]
 800a20a:	440c      	add	r4, r1
 800a20c:	9907      	ldr	r1, [sp, #28]
 800a20e:	b351      	cbz	r1, 800a266 <_dtoa_r+0x4fe>
 800a210:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a214:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a218:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a21c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a220:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a224:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a228:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a22c:	ee14 1a90 	vmov	r1, s9
 800a230:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a234:	3130      	adds	r1, #48	; 0x30
 800a236:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a23a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a242:	f808 1b01 	strb.w	r1, [r8], #1
 800a246:	d439      	bmi.n	800a2bc <_dtoa_r+0x554>
 800a248:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a24c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a254:	d472      	bmi.n	800a33c <_dtoa_r+0x5d4>
 800a256:	45a0      	cmp	r8, r4
 800a258:	f43f af6b 	beq.w	800a132 <_dtoa_r+0x3ca>
 800a25c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a260:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a264:	e7e0      	b.n	800a228 <_dtoa_r+0x4c0>
 800a266:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a26a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a26e:	4620      	mov	r0, r4
 800a270:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a274:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a278:	ee14 1a90 	vmov	r1, s9
 800a27c:	3130      	adds	r1, #48	; 0x30
 800a27e:	f808 1b01 	strb.w	r1, [r8], #1
 800a282:	45a0      	cmp	r8, r4
 800a284:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a288:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a28c:	d118      	bne.n	800a2c0 <_dtoa_r+0x558>
 800a28e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a292:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a296:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29e:	dc4d      	bgt.n	800a33c <_dtoa_r+0x5d4>
 800a2a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a2a4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ac:	f57f af41 	bpl.w	800a132 <_dtoa_r+0x3ca>
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	3801      	subs	r0, #1
 800a2b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a2b8:	2b30      	cmp	r3, #48	; 0x30
 800a2ba:	d0f9      	beq.n	800a2b0 <_dtoa_r+0x548>
 800a2bc:	4693      	mov	fp, r2
 800a2be:	e02a      	b.n	800a316 <_dtoa_r+0x5ae>
 800a2c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a2c4:	e7d6      	b.n	800a274 <_dtoa_r+0x50c>
 800a2c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a2ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a2d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a2da:	ee15 3a10 	vmov	r3, s10
 800a2de:	3330      	adds	r3, #48	; 0x30
 800a2e0:	f808 3b01 	strb.w	r3, [r8], #1
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	eba8 0303 	sub.w	r3, r8, r3
 800a2ea:	4599      	cmp	r9, r3
 800a2ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a2f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a2f4:	d133      	bne.n	800a35e <_dtoa_r+0x5f6>
 800a2f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a2fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a302:	dc1a      	bgt.n	800a33a <_dtoa_r+0x5d2>
 800a304:	eeb4 7b46 	vcmp.f64	d7, d6
 800a308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30c:	d103      	bne.n	800a316 <_dtoa_r+0x5ae>
 800a30e:	ee15 3a10 	vmov	r3, s10
 800a312:	07d9      	lsls	r1, r3, #31
 800a314:	d411      	bmi.n	800a33a <_dtoa_r+0x5d2>
 800a316:	4629      	mov	r1, r5
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 fbd1 	bl	800aac0 <_Bfree>
 800a31e:	2300      	movs	r3, #0
 800a320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a322:	f888 3000 	strb.w	r3, [r8]
 800a326:	f10b 0301 	add.w	r3, fp, #1
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f43f ad69 	beq.w	8009e06 <_dtoa_r+0x9e>
 800a334:	f8c3 8000 	str.w	r8, [r3]
 800a338:	e565      	b.n	8009e06 <_dtoa_r+0x9e>
 800a33a:	465a      	mov	r2, fp
 800a33c:	4643      	mov	r3, r8
 800a33e:	4698      	mov	r8, r3
 800a340:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a344:	2939      	cmp	r1, #57	; 0x39
 800a346:	d106      	bne.n	800a356 <_dtoa_r+0x5ee>
 800a348:	9901      	ldr	r1, [sp, #4]
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d1f7      	bne.n	800a33e <_dtoa_r+0x5d6>
 800a34e:	9801      	ldr	r0, [sp, #4]
 800a350:	2130      	movs	r1, #48	; 0x30
 800a352:	3201      	adds	r2, #1
 800a354:	7001      	strb	r1, [r0, #0]
 800a356:	7819      	ldrb	r1, [r3, #0]
 800a358:	3101      	adds	r1, #1
 800a35a:	7019      	strb	r1, [r3, #0]
 800a35c:	e7ae      	b.n	800a2bc <_dtoa_r+0x554>
 800a35e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a362:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36a:	d1b2      	bne.n	800a2d2 <_dtoa_r+0x56a>
 800a36c:	e7d3      	b.n	800a316 <_dtoa_r+0x5ae>
 800a36e:	bf00      	nop
 800a370:	0800de90 	.word	0x0800de90
 800a374:	0800de68 	.word	0x0800de68
 800a378:	9907      	ldr	r1, [sp, #28]
 800a37a:	2900      	cmp	r1, #0
 800a37c:	f000 80d0 	beq.w	800a520 <_dtoa_r+0x7b8>
 800a380:	9906      	ldr	r1, [sp, #24]
 800a382:	2901      	cmp	r1, #1
 800a384:	f300 80b4 	bgt.w	800a4f0 <_dtoa_r+0x788>
 800a388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a38a:	2900      	cmp	r1, #0
 800a38c:	f000 80ac 	beq.w	800a4e8 <_dtoa_r+0x780>
 800a390:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a394:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a398:	461c      	mov	r4, r3
 800a39a:	9309      	str	r3, [sp, #36]	; 0x24
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	4413      	add	r3, r2
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4413      	add	r3, r2
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	f000 fc88 	bl	800acc0 <__i2b>
 800a3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b2:	4607      	mov	r7, r0
 800a3b4:	f1b8 0f00 	cmp.w	r8, #0
 800a3b8:	d00d      	beq.n	800a3d6 <_dtoa_r+0x66e>
 800a3ba:	9a05      	ldr	r2, [sp, #20]
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	dd0a      	ble.n	800a3d6 <_dtoa_r+0x66e>
 800a3c0:	4542      	cmp	r2, r8
 800a3c2:	9904      	ldr	r1, [sp, #16]
 800a3c4:	bfa8      	it	ge
 800a3c6:	4642      	movge	r2, r8
 800a3c8:	1a89      	subs	r1, r1, r2
 800a3ca:	9104      	str	r1, [sp, #16]
 800a3cc:	9905      	ldr	r1, [sp, #20]
 800a3ce:	eba8 0802 	sub.w	r8, r8, r2
 800a3d2:	1a8a      	subs	r2, r1, r2
 800a3d4:	9205      	str	r2, [sp, #20]
 800a3d6:	b303      	cbz	r3, 800a41a <_dtoa_r+0x6b2>
 800a3d8:	9a07      	ldr	r2, [sp, #28]
 800a3da:	2a00      	cmp	r2, #0
 800a3dc:	f000 80a5 	beq.w	800a52a <_dtoa_r+0x7c2>
 800a3e0:	2c00      	cmp	r4, #0
 800a3e2:	dd13      	ble.n	800a40c <_dtoa_r+0x6a4>
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ec:	f000 fd28 	bl	800ae40 <__pow5mult>
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f000 fc78 	bl	800acec <__multiply>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	9009      	str	r0, [sp, #36]	; 0x24
 800a400:	4630      	mov	r0, r6
 800a402:	f000 fb5d 	bl	800aac0 <_Bfree>
 800a406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a40a:	4615      	mov	r5, r2
 800a40c:	1b1a      	subs	r2, r3, r4
 800a40e:	d004      	beq.n	800a41a <_dtoa_r+0x6b2>
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f000 fd14 	bl	800ae40 <__pow5mult>
 800a418:	4605      	mov	r5, r0
 800a41a:	2101      	movs	r1, #1
 800a41c:	4630      	mov	r0, r6
 800a41e:	f000 fc4f 	bl	800acc0 <__i2b>
 800a422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a424:	2b00      	cmp	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	f340 8081 	ble.w	800a52e <_dtoa_r+0x7c6>
 800a42c:	461a      	mov	r2, r3
 800a42e:	4601      	mov	r1, r0
 800a430:	4630      	mov	r0, r6
 800a432:	f000 fd05 	bl	800ae40 <__pow5mult>
 800a436:	9b06      	ldr	r3, [sp, #24]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	4604      	mov	r4, r0
 800a43c:	dd7a      	ble.n	800a534 <_dtoa_r+0x7cc>
 800a43e:	2300      	movs	r3, #0
 800a440:	9309      	str	r3, [sp, #36]	; 0x24
 800a442:	6922      	ldr	r2, [r4, #16]
 800a444:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a448:	6910      	ldr	r0, [r2, #16]
 800a44a:	f000 fbeb 	bl	800ac24 <__hi0bits>
 800a44e:	f1c0 0020 	rsb	r0, r0, #32
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	4418      	add	r0, r3
 800a456:	f010 001f 	ands.w	r0, r0, #31
 800a45a:	f000 8093 	beq.w	800a584 <_dtoa_r+0x81c>
 800a45e:	f1c0 0220 	rsb	r2, r0, #32
 800a462:	2a04      	cmp	r2, #4
 800a464:	f340 8085 	ble.w	800a572 <_dtoa_r+0x80a>
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	f1c0 001c 	rsb	r0, r0, #28
 800a46e:	4403      	add	r3, r0
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	9b05      	ldr	r3, [sp, #20]
 800a474:	4480      	add	r8, r0
 800a476:	4403      	add	r3, r0
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	9b04      	ldr	r3, [sp, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dd05      	ble.n	800a48c <_dtoa_r+0x724>
 800a480:	4629      	mov	r1, r5
 800a482:	461a      	mov	r2, r3
 800a484:	4630      	mov	r0, r6
 800a486:	f000 fd35 	bl	800aef4 <__lshift>
 800a48a:	4605      	mov	r5, r0
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd05      	ble.n	800a49e <_dtoa_r+0x736>
 800a492:	4621      	mov	r1, r4
 800a494:	461a      	mov	r2, r3
 800a496:	4630      	mov	r0, r6
 800a498:	f000 fd2c 	bl	800aef4 <__lshift>
 800a49c:	4604      	mov	r4, r0
 800a49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d071      	beq.n	800a588 <_dtoa_r+0x820>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f000 fd90 	bl	800afcc <__mcmp>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	da6b      	bge.n	800a588 <_dtoa_r+0x820>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f000 fb24 	bl	800ab04 <__multadd>
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 8197 	beq.w	800a7f8 <_dtoa_r+0xa90>
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 fb17 	bl	800ab04 <__multadd>
 800a4d6:	f1ba 0f00 	cmp.w	sl, #0
 800a4da:	4607      	mov	r7, r0
 800a4dc:	f300 8093 	bgt.w	800a606 <_dtoa_r+0x89e>
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	dc57      	bgt.n	800a596 <_dtoa_r+0x82e>
 800a4e6:	e08e      	b.n	800a606 <_dtoa_r+0x89e>
 800a4e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a4ee:	e751      	b.n	800a394 <_dtoa_r+0x62c>
 800a4f0:	f109 34ff 	add.w	r4, r9, #4294967295
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	bfbf      	itttt	lt
 800a4f8:	1ae2      	sublt	r2, r4, r3
 800a4fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4fc:	189b      	addlt	r3, r3, r2
 800a4fe:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a500:	bfae      	itee	ge
 800a502:	1b1c      	subge	r4, r3, r4
 800a504:	4623      	movlt	r3, r4
 800a506:	2400      	movlt	r4, #0
 800a508:	f1b9 0f00 	cmp.w	r9, #0
 800a50c:	bfb5      	itete	lt
 800a50e:	9a04      	ldrlt	r2, [sp, #16]
 800a510:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a514:	eba2 0809 	sublt.w	r8, r2, r9
 800a518:	464a      	movge	r2, r9
 800a51a:	bfb8      	it	lt
 800a51c:	2200      	movlt	r2, #0
 800a51e:	e73c      	b.n	800a39a <_dtoa_r+0x632>
 800a520:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a524:	9f07      	ldr	r7, [sp, #28]
 800a526:	461c      	mov	r4, r3
 800a528:	e744      	b.n	800a3b4 <_dtoa_r+0x64c>
 800a52a:	461a      	mov	r2, r3
 800a52c:	e770      	b.n	800a410 <_dtoa_r+0x6a8>
 800a52e:	9b06      	ldr	r3, [sp, #24]
 800a530:	2b01      	cmp	r3, #1
 800a532:	dc18      	bgt.n	800a566 <_dtoa_r+0x7fe>
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	b9b3      	cbnz	r3, 800a566 <_dtoa_r+0x7fe>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a53e:	b9a2      	cbnz	r2, 800a56a <_dtoa_r+0x802>
 800a540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a544:	0d12      	lsrs	r2, r2, #20
 800a546:	0512      	lsls	r2, r2, #20
 800a548:	b18a      	cbz	r2, 800a56e <_dtoa_r+0x806>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	3301      	adds	r3, #1
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	9b05      	ldr	r3, [sp, #20]
 800a552:	3301      	adds	r3, #1
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	2301      	movs	r3, #1
 800a558:	9309      	str	r3, [sp, #36]	; 0x24
 800a55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f47f af70 	bne.w	800a442 <_dtoa_r+0x6da>
 800a562:	2001      	movs	r0, #1
 800a564:	e775      	b.n	800a452 <_dtoa_r+0x6ea>
 800a566:	2300      	movs	r3, #0
 800a568:	e7f6      	b.n	800a558 <_dtoa_r+0x7f0>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	e7f4      	b.n	800a558 <_dtoa_r+0x7f0>
 800a56e:	9209      	str	r2, [sp, #36]	; 0x24
 800a570:	e7f3      	b.n	800a55a <_dtoa_r+0x7f2>
 800a572:	d082      	beq.n	800a47a <_dtoa_r+0x712>
 800a574:	9b04      	ldr	r3, [sp, #16]
 800a576:	321c      	adds	r2, #28
 800a578:	4413      	add	r3, r2
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	4490      	add	r8, r2
 800a580:	4413      	add	r3, r2
 800a582:	e779      	b.n	800a478 <_dtoa_r+0x710>
 800a584:	4602      	mov	r2, r0
 800a586:	e7f5      	b.n	800a574 <_dtoa_r+0x80c>
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	dc36      	bgt.n	800a5fc <_dtoa_r+0x894>
 800a58e:	9b06      	ldr	r3, [sp, #24]
 800a590:	2b02      	cmp	r3, #2
 800a592:	dd33      	ble.n	800a5fc <_dtoa_r+0x894>
 800a594:	46ca      	mov	sl, r9
 800a596:	f1ba 0f00 	cmp.w	sl, #0
 800a59a:	d10d      	bne.n	800a5b8 <_dtoa_r+0x850>
 800a59c:	4621      	mov	r1, r4
 800a59e:	4653      	mov	r3, sl
 800a5a0:	2205      	movs	r2, #5
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f000 faae 	bl	800ab04 <__multadd>
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 fd0d 	bl	800afcc <__mcmp>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f73f ade4 	bgt.w	800a180 <_dtoa_r+0x418>
 800a5b8:	9b08      	ldr	r3, [sp, #32]
 800a5ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5be:	ea6f 0b03 	mvn.w	fp, r3
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 fa79 	bl	800aac0 <_Bfree>
 800a5ce:	2f00      	cmp	r7, #0
 800a5d0:	f43f aea1 	beq.w	800a316 <_dtoa_r+0x5ae>
 800a5d4:	f1b9 0f00 	cmp.w	r9, #0
 800a5d8:	d005      	beq.n	800a5e6 <_dtoa_r+0x87e>
 800a5da:	45b9      	cmp	r9, r7
 800a5dc:	d003      	beq.n	800a5e6 <_dtoa_r+0x87e>
 800a5de:	4649      	mov	r1, r9
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f000 fa6d 	bl	800aac0 <_Bfree>
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f000 fa69 	bl	800aac0 <_Bfree>
 800a5ee:	e692      	b.n	800a316 <_dtoa_r+0x5ae>
 800a5f0:	2400      	movs	r4, #0
 800a5f2:	4627      	mov	r7, r4
 800a5f4:	e7e0      	b.n	800a5b8 <_dtoa_r+0x850>
 800a5f6:	4693      	mov	fp, r2
 800a5f8:	4627      	mov	r7, r4
 800a5fa:	e5c1      	b.n	800a180 <_dtoa_r+0x418>
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	46ca      	mov	sl, r9
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 8100 	beq.w	800a806 <_dtoa_r+0xa9e>
 800a606:	f1b8 0f00 	cmp.w	r8, #0
 800a60a:	dd05      	ble.n	800a618 <_dtoa_r+0x8b0>
 800a60c:	4639      	mov	r1, r7
 800a60e:	4642      	mov	r2, r8
 800a610:	4630      	mov	r0, r6
 800a612:	f000 fc6f 	bl	800aef4 <__lshift>
 800a616:	4607      	mov	r7, r0
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d05d      	beq.n	800a6da <_dtoa_r+0x972>
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	4630      	mov	r0, r6
 800a622:	f000 fa0d 	bl	800aa40 <_Balloc>
 800a626:	4680      	mov	r8, r0
 800a628:	b928      	cbnz	r0, 800a636 <_dtoa_r+0x8ce>
 800a62a:	4b82      	ldr	r3, [pc, #520]	; (800a834 <_dtoa_r+0xacc>)
 800a62c:	4602      	mov	r2, r0
 800a62e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a632:	f7ff bbb1 	b.w	8009d98 <_dtoa_r+0x30>
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	3202      	adds	r2, #2
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	f107 010c 	add.w	r1, r7, #12
 800a640:	300c      	adds	r0, #12
 800a642:	f001 ff3f 	bl	800c4c4 <memcpy>
 800a646:	2201      	movs	r2, #1
 800a648:	4641      	mov	r1, r8
 800a64a:	4630      	mov	r0, r6
 800a64c:	f000 fc52 	bl	800aef4 <__lshift>
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	3301      	adds	r3, #1
 800a654:	9304      	str	r3, [sp, #16]
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	4453      	add	r3, sl
 800a65a:	9308      	str	r3, [sp, #32]
 800a65c:	9b02      	ldr	r3, [sp, #8]
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	46b9      	mov	r9, r7
 800a664:	9307      	str	r3, [sp, #28]
 800a666:	4607      	mov	r7, r0
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	4621      	mov	r1, r4
 800a66c:	3b01      	subs	r3, #1
 800a66e:	4628      	mov	r0, r5
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	f7ff faef 	bl	8009c54 <quorem>
 800a676:	4603      	mov	r3, r0
 800a678:	3330      	adds	r3, #48	; 0x30
 800a67a:	9005      	str	r0, [sp, #20]
 800a67c:	4649      	mov	r1, r9
 800a67e:	4628      	mov	r0, r5
 800a680:	9309      	str	r3, [sp, #36]	; 0x24
 800a682:	f000 fca3 	bl	800afcc <__mcmp>
 800a686:	463a      	mov	r2, r7
 800a688:	4682      	mov	sl, r0
 800a68a:	4621      	mov	r1, r4
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 fcb9 	bl	800b004 <__mdiff>
 800a692:	68c2      	ldr	r2, [r0, #12]
 800a694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a696:	4680      	mov	r8, r0
 800a698:	bb0a      	cbnz	r2, 800a6de <_dtoa_r+0x976>
 800a69a:	4601      	mov	r1, r0
 800a69c:	4628      	mov	r0, r5
 800a69e:	f000 fc95 	bl	800afcc <__mcmp>
 800a6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4641      	mov	r1, r8
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a6ae:	f000 fa07 	bl	800aac0 <_Bfree>
 800a6b2:	9b06      	ldr	r3, [sp, #24]
 800a6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6ba:	ea43 0102 	orr.w	r1, r3, r2
 800a6be:	9b07      	ldr	r3, [sp, #28]
 800a6c0:	4319      	orrs	r1, r3
 800a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c4:	d10d      	bne.n	800a6e2 <_dtoa_r+0x97a>
 800a6c6:	2b39      	cmp	r3, #57	; 0x39
 800a6c8:	d029      	beq.n	800a71e <_dtoa_r+0x9b6>
 800a6ca:	f1ba 0f00 	cmp.w	sl, #0
 800a6ce:	dd01      	ble.n	800a6d4 <_dtoa_r+0x96c>
 800a6d0:	9b05      	ldr	r3, [sp, #20]
 800a6d2:	3331      	adds	r3, #49	; 0x31
 800a6d4:	9a02      	ldr	r2, [sp, #8]
 800a6d6:	7013      	strb	r3, [r2, #0]
 800a6d8:	e775      	b.n	800a5c6 <_dtoa_r+0x85e>
 800a6da:	4638      	mov	r0, r7
 800a6dc:	e7b8      	b.n	800a650 <_dtoa_r+0x8e8>
 800a6de:	2201      	movs	r2, #1
 800a6e0:	e7e1      	b.n	800a6a6 <_dtoa_r+0x93e>
 800a6e2:	f1ba 0f00 	cmp.w	sl, #0
 800a6e6:	db06      	blt.n	800a6f6 <_dtoa_r+0x98e>
 800a6e8:	9906      	ldr	r1, [sp, #24]
 800a6ea:	ea41 0a0a 	orr.w	sl, r1, sl
 800a6ee:	9907      	ldr	r1, [sp, #28]
 800a6f0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a6f4:	d120      	bne.n	800a738 <_dtoa_r+0x9d0>
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	ddec      	ble.n	800a6d4 <_dtoa_r+0x96c>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4630      	mov	r0, r6
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	f000 fbf7 	bl	800aef4 <__lshift>
 800a706:	4621      	mov	r1, r4
 800a708:	4605      	mov	r5, r0
 800a70a:	f000 fc5f 	bl	800afcc <__mcmp>
 800a70e:	2800      	cmp	r0, #0
 800a710:	9b04      	ldr	r3, [sp, #16]
 800a712:	dc02      	bgt.n	800a71a <_dtoa_r+0x9b2>
 800a714:	d1de      	bne.n	800a6d4 <_dtoa_r+0x96c>
 800a716:	07da      	lsls	r2, r3, #31
 800a718:	d5dc      	bpl.n	800a6d4 <_dtoa_r+0x96c>
 800a71a:	2b39      	cmp	r3, #57	; 0x39
 800a71c:	d1d8      	bne.n	800a6d0 <_dtoa_r+0x968>
 800a71e:	9a02      	ldr	r2, [sp, #8]
 800a720:	2339      	movs	r3, #57	; 0x39
 800a722:	7013      	strb	r3, [r2, #0]
 800a724:	4643      	mov	r3, r8
 800a726:	4698      	mov	r8, r3
 800a728:	3b01      	subs	r3, #1
 800a72a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a72e:	2a39      	cmp	r2, #57	; 0x39
 800a730:	d051      	beq.n	800a7d6 <_dtoa_r+0xa6e>
 800a732:	3201      	adds	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	e746      	b.n	800a5c6 <_dtoa_r+0x85e>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	dd03      	ble.n	800a744 <_dtoa_r+0x9dc>
 800a73c:	2b39      	cmp	r3, #57	; 0x39
 800a73e:	d0ee      	beq.n	800a71e <_dtoa_r+0x9b6>
 800a740:	3301      	adds	r3, #1
 800a742:	e7c7      	b.n	800a6d4 <_dtoa_r+0x96c>
 800a744:	9a04      	ldr	r2, [sp, #16]
 800a746:	9908      	ldr	r1, [sp, #32]
 800a748:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a74c:	428a      	cmp	r2, r1
 800a74e:	d02b      	beq.n	800a7a8 <_dtoa_r+0xa40>
 800a750:	4629      	mov	r1, r5
 800a752:	2300      	movs	r3, #0
 800a754:	220a      	movs	r2, #10
 800a756:	4630      	mov	r0, r6
 800a758:	f000 f9d4 	bl	800ab04 <__multadd>
 800a75c:	45b9      	cmp	r9, r7
 800a75e:	4605      	mov	r5, r0
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	f04f 020a 	mov.w	r2, #10
 800a768:	4649      	mov	r1, r9
 800a76a:	4630      	mov	r0, r6
 800a76c:	d107      	bne.n	800a77e <_dtoa_r+0xa16>
 800a76e:	f000 f9c9 	bl	800ab04 <__multadd>
 800a772:	4681      	mov	r9, r0
 800a774:	4607      	mov	r7, r0
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	3301      	adds	r3, #1
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	e774      	b.n	800a668 <_dtoa_r+0x900>
 800a77e:	f000 f9c1 	bl	800ab04 <__multadd>
 800a782:	4639      	mov	r1, r7
 800a784:	4681      	mov	r9, r0
 800a786:	2300      	movs	r3, #0
 800a788:	220a      	movs	r2, #10
 800a78a:	4630      	mov	r0, r6
 800a78c:	f000 f9ba 	bl	800ab04 <__multadd>
 800a790:	4607      	mov	r7, r0
 800a792:	e7f0      	b.n	800a776 <_dtoa_r+0xa0e>
 800a794:	f1ba 0f00 	cmp.w	sl, #0
 800a798:	9a01      	ldr	r2, [sp, #4]
 800a79a:	bfcc      	ite	gt
 800a79c:	46d0      	movgt	r8, sl
 800a79e:	f04f 0801 	movle.w	r8, #1
 800a7a2:	4490      	add	r8, r2
 800a7a4:	f04f 0900 	mov.w	r9, #0
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	9302      	str	r3, [sp, #8]
 800a7b0:	f000 fba0 	bl	800aef4 <__lshift>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	f000 fc08 	bl	800afcc <__mcmp>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	dcb1      	bgt.n	800a724 <_dtoa_r+0x9bc>
 800a7c0:	d102      	bne.n	800a7c8 <_dtoa_r+0xa60>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	07db      	lsls	r3, r3, #31
 800a7c6:	d4ad      	bmi.n	800a724 <_dtoa_r+0x9bc>
 800a7c8:	4643      	mov	r3, r8
 800a7ca:	4698      	mov	r8, r3
 800a7cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7d0:	2a30      	cmp	r2, #48	; 0x30
 800a7d2:	d0fa      	beq.n	800a7ca <_dtoa_r+0xa62>
 800a7d4:	e6f7      	b.n	800a5c6 <_dtoa_r+0x85e>
 800a7d6:	9a01      	ldr	r2, [sp, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d1a4      	bne.n	800a726 <_dtoa_r+0x9be>
 800a7dc:	f10b 0b01 	add.w	fp, fp, #1
 800a7e0:	2331      	movs	r3, #49	; 0x31
 800a7e2:	e778      	b.n	800a6d6 <_dtoa_r+0x96e>
 800a7e4:	4b14      	ldr	r3, [pc, #80]	; (800a838 <_dtoa_r+0xad0>)
 800a7e6:	f7ff bb2a 	b.w	8009e3e <_dtoa_r+0xd6>
 800a7ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f47f ab05 	bne.w	8009dfc <_dtoa_r+0x94>
 800a7f2:	4b12      	ldr	r3, [pc, #72]	; (800a83c <_dtoa_r+0xad4>)
 800a7f4:	f7ff bb23 	b.w	8009e3e <_dtoa_r+0xd6>
 800a7f8:	f1ba 0f00 	cmp.w	sl, #0
 800a7fc:	dc03      	bgt.n	800a806 <_dtoa_r+0xa9e>
 800a7fe:	9b06      	ldr	r3, [sp, #24]
 800a800:	2b02      	cmp	r3, #2
 800a802:	f73f aec8 	bgt.w	800a596 <_dtoa_r+0x82e>
 800a806:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a80a:	4621      	mov	r1, r4
 800a80c:	4628      	mov	r0, r5
 800a80e:	f7ff fa21 	bl	8009c54 <quorem>
 800a812:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a816:	f808 3b01 	strb.w	r3, [r8], #1
 800a81a:	9a01      	ldr	r2, [sp, #4]
 800a81c:	eba8 0202 	sub.w	r2, r8, r2
 800a820:	4592      	cmp	sl, r2
 800a822:	ddb7      	ble.n	800a794 <_dtoa_r+0xa2c>
 800a824:	4629      	mov	r1, r5
 800a826:	2300      	movs	r3, #0
 800a828:	220a      	movs	r2, #10
 800a82a:	4630      	mov	r0, r6
 800a82c:	f000 f96a 	bl	800ab04 <__multadd>
 800a830:	4605      	mov	r5, r0
 800a832:	e7ea      	b.n	800a80a <_dtoa_r+0xaa2>
 800a834:	0800ddfd 	.word	0x0800ddfd
 800a838:	0800dd58 	.word	0x0800dd58
 800a83c:	0800dd81 	.word	0x0800dd81

0800a840 <_free_r>:
 800a840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a842:	2900      	cmp	r1, #0
 800a844:	d044      	beq.n	800a8d0 <_free_r+0x90>
 800a846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a84a:	9001      	str	r0, [sp, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f1a1 0404 	sub.w	r4, r1, #4
 800a852:	bfb8      	it	lt
 800a854:	18e4      	addlt	r4, r4, r3
 800a856:	f000 f8e7 	bl	800aa28 <__malloc_lock>
 800a85a:	4a1e      	ldr	r2, [pc, #120]	; (800a8d4 <_free_r+0x94>)
 800a85c:	9801      	ldr	r0, [sp, #4]
 800a85e:	6813      	ldr	r3, [r2, #0]
 800a860:	b933      	cbnz	r3, 800a870 <_free_r+0x30>
 800a862:	6063      	str	r3, [r4, #4]
 800a864:	6014      	str	r4, [r2, #0]
 800a866:	b003      	add	sp, #12
 800a868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a86c:	f000 b8e2 	b.w	800aa34 <__malloc_unlock>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d908      	bls.n	800a886 <_free_r+0x46>
 800a874:	6825      	ldr	r5, [r4, #0]
 800a876:	1961      	adds	r1, r4, r5
 800a878:	428b      	cmp	r3, r1
 800a87a:	bf01      	itttt	eq
 800a87c:	6819      	ldreq	r1, [r3, #0]
 800a87e:	685b      	ldreq	r3, [r3, #4]
 800a880:	1949      	addeq	r1, r1, r5
 800a882:	6021      	streq	r1, [r4, #0]
 800a884:	e7ed      	b.n	800a862 <_free_r+0x22>
 800a886:	461a      	mov	r2, r3
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	b10b      	cbz	r3, 800a890 <_free_r+0x50>
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	d9fa      	bls.n	800a886 <_free_r+0x46>
 800a890:	6811      	ldr	r1, [r2, #0]
 800a892:	1855      	adds	r5, r2, r1
 800a894:	42a5      	cmp	r5, r4
 800a896:	d10b      	bne.n	800a8b0 <_free_r+0x70>
 800a898:	6824      	ldr	r4, [r4, #0]
 800a89a:	4421      	add	r1, r4
 800a89c:	1854      	adds	r4, r2, r1
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	6011      	str	r1, [r2, #0]
 800a8a2:	d1e0      	bne.n	800a866 <_free_r+0x26>
 800a8a4:	681c      	ldr	r4, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	6053      	str	r3, [r2, #4]
 800a8aa:	440c      	add	r4, r1
 800a8ac:	6014      	str	r4, [r2, #0]
 800a8ae:	e7da      	b.n	800a866 <_free_r+0x26>
 800a8b0:	d902      	bls.n	800a8b8 <_free_r+0x78>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	e7d6      	b.n	800a866 <_free_r+0x26>
 800a8b8:	6825      	ldr	r5, [r4, #0]
 800a8ba:	1961      	adds	r1, r4, r5
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf04      	itt	eq
 800a8c0:	6819      	ldreq	r1, [r3, #0]
 800a8c2:	685b      	ldreq	r3, [r3, #4]
 800a8c4:	6063      	str	r3, [r4, #4]
 800a8c6:	bf04      	itt	eq
 800a8c8:	1949      	addeq	r1, r1, r5
 800a8ca:	6021      	streq	r1, [r4, #0]
 800a8cc:	6054      	str	r4, [r2, #4]
 800a8ce:	e7ca      	b.n	800a866 <_free_r+0x26>
 800a8d0:	b003      	add	sp, #12
 800a8d2:	bd30      	pop	{r4, r5, pc}
 800a8d4:	20000670 	.word	0x20000670

0800a8d8 <malloc>:
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <malloc+0xc>)
 800a8da:	4601      	mov	r1, r0
 800a8dc:	6818      	ldr	r0, [r3, #0]
 800a8de:	f000 b823 	b.w	800a928 <_malloc_r>
 800a8e2:	bf00      	nop
 800a8e4:	20000074 	.word	0x20000074

0800a8e8 <sbrk_aligned>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4e0e      	ldr	r6, [pc, #56]	; (800a924 <sbrk_aligned+0x3c>)
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	6831      	ldr	r1, [r6, #0]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	b911      	cbnz	r1, 800a8fa <sbrk_aligned+0x12>
 800a8f4:	f001 fdd6 	bl	800c4a4 <_sbrk_r>
 800a8f8:	6030      	str	r0, [r6, #0]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f001 fdd1 	bl	800c4a4 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d00a      	beq.n	800a91c <sbrk_aligned+0x34>
 800a906:	1cc4      	adds	r4, r0, #3
 800a908:	f024 0403 	bic.w	r4, r4, #3
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d007      	beq.n	800a920 <sbrk_aligned+0x38>
 800a910:	1a21      	subs	r1, r4, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f001 fdc6 	bl	800c4a4 <_sbrk_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	d101      	bne.n	800a920 <sbrk_aligned+0x38>
 800a91c:	f04f 34ff 	mov.w	r4, #4294967295
 800a920:	4620      	mov	r0, r4
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	20000674 	.word	0x20000674

0800a928 <_malloc_r>:
 800a928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	f025 0503 	bic.w	r5, r5, #3
 800a932:	3508      	adds	r5, #8
 800a934:	2d0c      	cmp	r5, #12
 800a936:	bf38      	it	cc
 800a938:	250c      	movcc	r5, #12
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	4607      	mov	r7, r0
 800a93e:	db01      	blt.n	800a944 <_malloc_r+0x1c>
 800a940:	42a9      	cmp	r1, r5
 800a942:	d905      	bls.n	800a950 <_malloc_r+0x28>
 800a944:	230c      	movs	r3, #12
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	2600      	movs	r6, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a950:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa24 <_malloc_r+0xfc>
 800a954:	f000 f868 	bl	800aa28 <__malloc_lock>
 800a958:	f8d8 3000 	ldr.w	r3, [r8]
 800a95c:	461c      	mov	r4, r3
 800a95e:	bb5c      	cbnz	r4, 800a9b8 <_malloc_r+0x90>
 800a960:	4629      	mov	r1, r5
 800a962:	4638      	mov	r0, r7
 800a964:	f7ff ffc0 	bl	800a8e8 <sbrk_aligned>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	4604      	mov	r4, r0
 800a96c:	d155      	bne.n	800aa1a <_malloc_r+0xf2>
 800a96e:	f8d8 4000 	ldr.w	r4, [r8]
 800a972:	4626      	mov	r6, r4
 800a974:	2e00      	cmp	r6, #0
 800a976:	d145      	bne.n	800aa04 <_malloc_r+0xdc>
 800a978:	2c00      	cmp	r4, #0
 800a97a:	d048      	beq.n	800aa0e <_malloc_r+0xe6>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	4631      	mov	r1, r6
 800a980:	4638      	mov	r0, r7
 800a982:	eb04 0903 	add.w	r9, r4, r3
 800a986:	f001 fd8d 	bl	800c4a4 <_sbrk_r>
 800a98a:	4581      	cmp	r9, r0
 800a98c:	d13f      	bne.n	800aa0e <_malloc_r+0xe6>
 800a98e:	6821      	ldr	r1, [r4, #0]
 800a990:	1a6d      	subs	r5, r5, r1
 800a992:	4629      	mov	r1, r5
 800a994:	4638      	mov	r0, r7
 800a996:	f7ff ffa7 	bl	800a8e8 <sbrk_aligned>
 800a99a:	3001      	adds	r0, #1
 800a99c:	d037      	beq.n	800aa0e <_malloc_r+0xe6>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	442b      	add	r3, r5
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d038      	beq.n	800aa1e <_malloc_r+0xf6>
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	42a2      	cmp	r2, r4
 800a9b0:	d12b      	bne.n	800aa0a <_malloc_r+0xe2>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	e00f      	b.n	800a9d8 <_malloc_r+0xb0>
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	1b52      	subs	r2, r2, r5
 800a9bc:	d41f      	bmi.n	800a9fe <_malloc_r+0xd6>
 800a9be:	2a0b      	cmp	r2, #11
 800a9c0:	d917      	bls.n	800a9f2 <_malloc_r+0xca>
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	6025      	str	r5, [r4, #0]
 800a9c8:	bf18      	it	ne
 800a9ca:	6059      	strne	r1, [r3, #4]
 800a9cc:	6863      	ldr	r3, [r4, #4]
 800a9ce:	bf08      	it	eq
 800a9d0:	f8c8 1000 	streq.w	r1, [r8]
 800a9d4:	5162      	str	r2, [r4, r5]
 800a9d6:	604b      	str	r3, [r1, #4]
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f104 060b 	add.w	r6, r4, #11
 800a9de:	f000 f829 	bl	800aa34 <__malloc_unlock>
 800a9e2:	f026 0607 	bic.w	r6, r6, #7
 800a9e6:	1d23      	adds	r3, r4, #4
 800a9e8:	1af2      	subs	r2, r6, r3
 800a9ea:	d0ae      	beq.n	800a94a <_malloc_r+0x22>
 800a9ec:	1b9b      	subs	r3, r3, r6
 800a9ee:	50a3      	str	r3, [r4, r2]
 800a9f0:	e7ab      	b.n	800a94a <_malloc_r+0x22>
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	6862      	ldr	r2, [r4, #4]
 800a9f6:	d1dd      	bne.n	800a9b4 <_malloc_r+0x8c>
 800a9f8:	f8c8 2000 	str.w	r2, [r8]
 800a9fc:	e7ec      	b.n	800a9d8 <_malloc_r+0xb0>
 800a9fe:	4623      	mov	r3, r4
 800aa00:	6864      	ldr	r4, [r4, #4]
 800aa02:	e7ac      	b.n	800a95e <_malloc_r+0x36>
 800aa04:	4634      	mov	r4, r6
 800aa06:	6876      	ldr	r6, [r6, #4]
 800aa08:	e7b4      	b.n	800a974 <_malloc_r+0x4c>
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	e7cc      	b.n	800a9a8 <_malloc_r+0x80>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4638      	mov	r0, r7
 800aa14:	f000 f80e 	bl	800aa34 <__malloc_unlock>
 800aa18:	e797      	b.n	800a94a <_malloc_r+0x22>
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	e7dc      	b.n	800a9d8 <_malloc_r+0xb0>
 800aa1e:	605b      	str	r3, [r3, #4]
 800aa20:	deff      	udf	#255	; 0xff
 800aa22:	bf00      	nop
 800aa24:	20000670 	.word	0x20000670

0800aa28 <__malloc_lock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__malloc_lock+0x8>)
 800aa2a:	f7ff b90a 	b.w	8009c42 <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	2000066c 	.word	0x2000066c

0800aa34 <__malloc_unlock>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__malloc_unlock+0x8>)
 800aa36:	f7ff b905 	b.w	8009c44 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	2000066c 	.word	0x2000066c

0800aa40 <_Balloc>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	69c6      	ldr	r6, [r0, #28]
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	b976      	cbnz	r6, 800aa68 <_Balloc+0x28>
 800aa4a:	2010      	movs	r0, #16
 800aa4c:	f7ff ff44 	bl	800a8d8 <malloc>
 800aa50:	4602      	mov	r2, r0
 800aa52:	61e0      	str	r0, [r4, #28]
 800aa54:	b920      	cbnz	r0, 800aa60 <_Balloc+0x20>
 800aa56:	4b18      	ldr	r3, [pc, #96]	; (800aab8 <_Balloc+0x78>)
 800aa58:	4818      	ldr	r0, [pc, #96]	; (800aabc <_Balloc+0x7c>)
 800aa5a:	216b      	movs	r1, #107	; 0x6b
 800aa5c:	f001 fd48 	bl	800c4f0 <__assert_func>
 800aa60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa64:	6006      	str	r6, [r0, #0]
 800aa66:	60c6      	str	r6, [r0, #12]
 800aa68:	69e6      	ldr	r6, [r4, #28]
 800aa6a:	68f3      	ldr	r3, [r6, #12]
 800aa6c:	b183      	cbz	r3, 800aa90 <_Balloc+0x50>
 800aa6e:	69e3      	ldr	r3, [r4, #28]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa76:	b9b8      	cbnz	r0, 800aaa8 <_Balloc+0x68>
 800aa78:	2101      	movs	r1, #1
 800aa7a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa7e:	1d72      	adds	r2, r6, #5
 800aa80:	0092      	lsls	r2, r2, #2
 800aa82:	4620      	mov	r0, r4
 800aa84:	f001 fd52 	bl	800c52c <_calloc_r>
 800aa88:	b160      	cbz	r0, 800aaa4 <_Balloc+0x64>
 800aa8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa8e:	e00e      	b.n	800aaae <_Balloc+0x6e>
 800aa90:	2221      	movs	r2, #33	; 0x21
 800aa92:	2104      	movs	r1, #4
 800aa94:	4620      	mov	r0, r4
 800aa96:	f001 fd49 	bl	800c52c <_calloc_r>
 800aa9a:	69e3      	ldr	r3, [r4, #28]
 800aa9c:	60f0      	str	r0, [r6, #12]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e4      	bne.n	800aa6e <_Balloc+0x2e>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	6802      	ldr	r2, [r0, #0]
 800aaaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaae:	2300      	movs	r3, #0
 800aab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aab4:	e7f7      	b.n	800aaa6 <_Balloc+0x66>
 800aab6:	bf00      	nop
 800aab8:	0800dd8e 	.word	0x0800dd8e
 800aabc:	0800de0e 	.word	0x0800de0e

0800aac0 <_Bfree>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	69c6      	ldr	r6, [r0, #28]
 800aac4:	4605      	mov	r5, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	b976      	cbnz	r6, 800aae8 <_Bfree+0x28>
 800aaca:	2010      	movs	r0, #16
 800aacc:	f7ff ff04 	bl	800a8d8 <malloc>
 800aad0:	4602      	mov	r2, r0
 800aad2:	61e8      	str	r0, [r5, #28]
 800aad4:	b920      	cbnz	r0, 800aae0 <_Bfree+0x20>
 800aad6:	4b09      	ldr	r3, [pc, #36]	; (800aafc <_Bfree+0x3c>)
 800aad8:	4809      	ldr	r0, [pc, #36]	; (800ab00 <_Bfree+0x40>)
 800aada:	218f      	movs	r1, #143	; 0x8f
 800aadc:	f001 fd08 	bl	800c4f0 <__assert_func>
 800aae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae4:	6006      	str	r6, [r0, #0]
 800aae6:	60c6      	str	r6, [r0, #12]
 800aae8:	b13c      	cbz	r4, 800aafa <_Bfree+0x3a>
 800aaea:	69eb      	ldr	r3, [r5, #28]
 800aaec:	6862      	ldr	r2, [r4, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaf4:	6021      	str	r1, [r4, #0]
 800aaf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	0800dd8e 	.word	0x0800dd8e
 800ab00:	0800de0e 	.word	0x0800de0e

0800ab04 <__multadd>:
 800ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	690d      	ldr	r5, [r1, #16]
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	461e      	mov	r6, r3
 800ab10:	f101 0c14 	add.w	ip, r1, #20
 800ab14:	2000      	movs	r0, #0
 800ab16:	f8dc 3000 	ldr.w	r3, [ip]
 800ab1a:	b299      	uxth	r1, r3
 800ab1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ab20:	0c1e      	lsrs	r6, r3, #16
 800ab22:	0c0b      	lsrs	r3, r1, #16
 800ab24:	fb02 3306 	mla	r3, r2, r6, r3
 800ab28:	b289      	uxth	r1, r1
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab30:	4285      	cmp	r5, r0
 800ab32:	f84c 1b04 	str.w	r1, [ip], #4
 800ab36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab3a:	dcec      	bgt.n	800ab16 <__multadd+0x12>
 800ab3c:	b30e      	cbz	r6, 800ab82 <__multadd+0x7e>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	dc19      	bgt.n	800ab78 <__multadd+0x74>
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4638      	mov	r0, r7
 800ab48:	3101      	adds	r1, #1
 800ab4a:	f7ff ff79 	bl	800aa40 <_Balloc>
 800ab4e:	4680      	mov	r8, r0
 800ab50:	b928      	cbnz	r0, 800ab5e <__multadd+0x5a>
 800ab52:	4602      	mov	r2, r0
 800ab54:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <__multadd+0x84>)
 800ab56:	480d      	ldr	r0, [pc, #52]	; (800ab8c <__multadd+0x88>)
 800ab58:	21ba      	movs	r1, #186	; 0xba
 800ab5a:	f001 fcc9 	bl	800c4f0 <__assert_func>
 800ab5e:	6922      	ldr	r2, [r4, #16]
 800ab60:	3202      	adds	r2, #2
 800ab62:	f104 010c 	add.w	r1, r4, #12
 800ab66:	0092      	lsls	r2, r2, #2
 800ab68:	300c      	adds	r0, #12
 800ab6a:	f001 fcab 	bl	800c4c4 <memcpy>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff ffa5 	bl	800aac0 <_Bfree>
 800ab76:	4644      	mov	r4, r8
 800ab78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	615e      	str	r6, [r3, #20]
 800ab80:	6125      	str	r5, [r4, #16]
 800ab82:	4620      	mov	r0, r4
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	0800ddfd 	.word	0x0800ddfd
 800ab8c:	0800de0e 	.word	0x0800de0e

0800ab90 <__s2b>:
 800ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	4615      	mov	r5, r2
 800ab98:	461f      	mov	r7, r3
 800ab9a:	2209      	movs	r2, #9
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	4606      	mov	r6, r0
 800aba0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aba4:	2100      	movs	r1, #0
 800aba6:	2201      	movs	r2, #1
 800aba8:	429a      	cmp	r2, r3
 800abaa:	db09      	blt.n	800abc0 <__s2b+0x30>
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff ff47 	bl	800aa40 <_Balloc>
 800abb2:	b940      	cbnz	r0, 800abc6 <__s2b+0x36>
 800abb4:	4602      	mov	r2, r0
 800abb6:	4b19      	ldr	r3, [pc, #100]	; (800ac1c <__s2b+0x8c>)
 800abb8:	4819      	ldr	r0, [pc, #100]	; (800ac20 <__s2b+0x90>)
 800abba:	21d3      	movs	r1, #211	; 0xd3
 800abbc:	f001 fc98 	bl	800c4f0 <__assert_func>
 800abc0:	0052      	lsls	r2, r2, #1
 800abc2:	3101      	adds	r1, #1
 800abc4:	e7f0      	b.n	800aba8 <__s2b+0x18>
 800abc6:	9b08      	ldr	r3, [sp, #32]
 800abc8:	6143      	str	r3, [r0, #20]
 800abca:	2d09      	cmp	r5, #9
 800abcc:	f04f 0301 	mov.w	r3, #1
 800abd0:	6103      	str	r3, [r0, #16]
 800abd2:	dd16      	ble.n	800ac02 <__s2b+0x72>
 800abd4:	f104 0909 	add.w	r9, r4, #9
 800abd8:	46c8      	mov	r8, r9
 800abda:	442c      	add	r4, r5
 800abdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abe0:	4601      	mov	r1, r0
 800abe2:	3b30      	subs	r3, #48	; 0x30
 800abe4:	220a      	movs	r2, #10
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ff8c 	bl	800ab04 <__multadd>
 800abec:	45a0      	cmp	r8, r4
 800abee:	d1f5      	bne.n	800abdc <__s2b+0x4c>
 800abf0:	f1a5 0408 	sub.w	r4, r5, #8
 800abf4:	444c      	add	r4, r9
 800abf6:	1b2d      	subs	r5, r5, r4
 800abf8:	1963      	adds	r3, r4, r5
 800abfa:	42bb      	cmp	r3, r7
 800abfc:	db04      	blt.n	800ac08 <__s2b+0x78>
 800abfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac02:	340a      	adds	r4, #10
 800ac04:	2509      	movs	r5, #9
 800ac06:	e7f6      	b.n	800abf6 <__s2b+0x66>
 800ac08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	3b30      	subs	r3, #48	; 0x30
 800ac10:	220a      	movs	r2, #10
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7ff ff76 	bl	800ab04 <__multadd>
 800ac18:	e7ee      	b.n	800abf8 <__s2b+0x68>
 800ac1a:	bf00      	nop
 800ac1c:	0800ddfd 	.word	0x0800ddfd
 800ac20:	0800de0e 	.word	0x0800de0e

0800ac24 <__hi0bits>:
 800ac24:	0c03      	lsrs	r3, r0, #16
 800ac26:	041b      	lsls	r3, r3, #16
 800ac28:	b9d3      	cbnz	r3, 800ac60 <__hi0bits+0x3c>
 800ac2a:	0400      	lsls	r0, r0, #16
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac32:	bf04      	itt	eq
 800ac34:	0200      	lsleq	r0, r0, #8
 800ac36:	3308      	addeq	r3, #8
 800ac38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac3c:	bf04      	itt	eq
 800ac3e:	0100      	lsleq	r0, r0, #4
 800ac40:	3304      	addeq	r3, #4
 800ac42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac46:	bf04      	itt	eq
 800ac48:	0080      	lsleq	r0, r0, #2
 800ac4a:	3302      	addeq	r3, #2
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	db05      	blt.n	800ac5c <__hi0bits+0x38>
 800ac50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac54:	f103 0301 	add.w	r3, r3, #1
 800ac58:	bf08      	it	eq
 800ac5a:	2320      	moveq	r3, #32
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	4770      	bx	lr
 800ac60:	2300      	movs	r3, #0
 800ac62:	e7e4      	b.n	800ac2e <__hi0bits+0xa>

0800ac64 <__lo0bits>:
 800ac64:	6803      	ldr	r3, [r0, #0]
 800ac66:	f013 0207 	ands.w	r2, r3, #7
 800ac6a:	d00c      	beq.n	800ac86 <__lo0bits+0x22>
 800ac6c:	07d9      	lsls	r1, r3, #31
 800ac6e:	d422      	bmi.n	800acb6 <__lo0bits+0x52>
 800ac70:	079a      	lsls	r2, r3, #30
 800ac72:	bf49      	itett	mi
 800ac74:	085b      	lsrmi	r3, r3, #1
 800ac76:	089b      	lsrpl	r3, r3, #2
 800ac78:	6003      	strmi	r3, [r0, #0]
 800ac7a:	2201      	movmi	r2, #1
 800ac7c:	bf5c      	itt	pl
 800ac7e:	6003      	strpl	r3, [r0, #0]
 800ac80:	2202      	movpl	r2, #2
 800ac82:	4610      	mov	r0, r2
 800ac84:	4770      	bx	lr
 800ac86:	b299      	uxth	r1, r3
 800ac88:	b909      	cbnz	r1, 800ac8e <__lo0bits+0x2a>
 800ac8a:	0c1b      	lsrs	r3, r3, #16
 800ac8c:	2210      	movs	r2, #16
 800ac8e:	b2d9      	uxtb	r1, r3
 800ac90:	b909      	cbnz	r1, 800ac96 <__lo0bits+0x32>
 800ac92:	3208      	adds	r2, #8
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	0719      	lsls	r1, r3, #28
 800ac98:	bf04      	itt	eq
 800ac9a:	091b      	lsreq	r3, r3, #4
 800ac9c:	3204      	addeq	r2, #4
 800ac9e:	0799      	lsls	r1, r3, #30
 800aca0:	bf04      	itt	eq
 800aca2:	089b      	lsreq	r3, r3, #2
 800aca4:	3202      	addeq	r2, #2
 800aca6:	07d9      	lsls	r1, r3, #31
 800aca8:	d403      	bmi.n	800acb2 <__lo0bits+0x4e>
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	f102 0201 	add.w	r2, r2, #1
 800acb0:	d003      	beq.n	800acba <__lo0bits+0x56>
 800acb2:	6003      	str	r3, [r0, #0]
 800acb4:	e7e5      	b.n	800ac82 <__lo0bits+0x1e>
 800acb6:	2200      	movs	r2, #0
 800acb8:	e7e3      	b.n	800ac82 <__lo0bits+0x1e>
 800acba:	2220      	movs	r2, #32
 800acbc:	e7e1      	b.n	800ac82 <__lo0bits+0x1e>
	...

0800acc0 <__i2b>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	460c      	mov	r4, r1
 800acc4:	2101      	movs	r1, #1
 800acc6:	f7ff febb 	bl	800aa40 <_Balloc>
 800acca:	4602      	mov	r2, r0
 800accc:	b928      	cbnz	r0, 800acda <__i2b+0x1a>
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <__i2b+0x24>)
 800acd0:	4805      	ldr	r0, [pc, #20]	; (800ace8 <__i2b+0x28>)
 800acd2:	f240 1145 	movw	r1, #325	; 0x145
 800acd6:	f001 fc0b 	bl	800c4f0 <__assert_func>
 800acda:	2301      	movs	r3, #1
 800acdc:	6144      	str	r4, [r0, #20]
 800acde:	6103      	str	r3, [r0, #16]
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	bf00      	nop
 800ace4:	0800ddfd 	.word	0x0800ddfd
 800ace8:	0800de0e 	.word	0x0800de0e

0800acec <__multiply>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	4691      	mov	r9, r2
 800acf2:	690a      	ldr	r2, [r1, #16]
 800acf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	bfb8      	it	lt
 800acfc:	460b      	movlt	r3, r1
 800acfe:	460c      	mov	r4, r1
 800ad00:	bfbc      	itt	lt
 800ad02:	464c      	movlt	r4, r9
 800ad04:	4699      	movlt	r9, r3
 800ad06:	6927      	ldr	r7, [r4, #16]
 800ad08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad0c:	68a3      	ldr	r3, [r4, #8]
 800ad0e:	6861      	ldr	r1, [r4, #4]
 800ad10:	eb07 060a 	add.w	r6, r7, sl
 800ad14:	42b3      	cmp	r3, r6
 800ad16:	b085      	sub	sp, #20
 800ad18:	bfb8      	it	lt
 800ad1a:	3101      	addlt	r1, #1
 800ad1c:	f7ff fe90 	bl	800aa40 <_Balloc>
 800ad20:	b930      	cbnz	r0, 800ad30 <__multiply+0x44>
 800ad22:	4602      	mov	r2, r0
 800ad24:	4b44      	ldr	r3, [pc, #272]	; (800ae38 <__multiply+0x14c>)
 800ad26:	4845      	ldr	r0, [pc, #276]	; (800ae3c <__multiply+0x150>)
 800ad28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ad2c:	f001 fbe0 	bl	800c4f0 <__assert_func>
 800ad30:	f100 0514 	add.w	r5, r0, #20
 800ad34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad38:	462b      	mov	r3, r5
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	4543      	cmp	r3, r8
 800ad3e:	d321      	bcc.n	800ad84 <__multiply+0x98>
 800ad40:	f104 0314 	add.w	r3, r4, #20
 800ad44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad48:	f109 0314 	add.w	r3, r9, #20
 800ad4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad50:	9202      	str	r2, [sp, #8]
 800ad52:	1b3a      	subs	r2, r7, r4
 800ad54:	3a15      	subs	r2, #21
 800ad56:	f022 0203 	bic.w	r2, r2, #3
 800ad5a:	3204      	adds	r2, #4
 800ad5c:	f104 0115 	add.w	r1, r4, #21
 800ad60:	428f      	cmp	r7, r1
 800ad62:	bf38      	it	cc
 800ad64:	2204      	movcc	r2, #4
 800ad66:	9201      	str	r2, [sp, #4]
 800ad68:	9a02      	ldr	r2, [sp, #8]
 800ad6a:	9303      	str	r3, [sp, #12]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d80c      	bhi.n	800ad8a <__multiply+0x9e>
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	dd03      	ble.n	800ad7c <__multiply+0x90>
 800ad74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d05b      	beq.n	800ae34 <__multiply+0x148>
 800ad7c:	6106      	str	r6, [r0, #16]
 800ad7e:	b005      	add	sp, #20
 800ad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad84:	f843 2b04 	str.w	r2, [r3], #4
 800ad88:	e7d8      	b.n	800ad3c <__multiply+0x50>
 800ad8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad8e:	f1ba 0f00 	cmp.w	sl, #0
 800ad92:	d024      	beq.n	800adde <__multiply+0xf2>
 800ad94:	f104 0e14 	add.w	lr, r4, #20
 800ad98:	46a9      	mov	r9, r5
 800ad9a:	f04f 0c00 	mov.w	ip, #0
 800ad9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ada2:	f8d9 1000 	ldr.w	r1, [r9]
 800ada6:	fa1f fb82 	uxth.w	fp, r2
 800adaa:	b289      	uxth	r1, r1
 800adac:	fb0a 110b 	mla	r1, sl, fp, r1
 800adb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800adb4:	f8d9 2000 	ldr.w	r2, [r9]
 800adb8:	4461      	add	r1, ip
 800adba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800adc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adc6:	b289      	uxth	r1, r1
 800adc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adcc:	4577      	cmp	r7, lr
 800adce:	f849 1b04 	str.w	r1, [r9], #4
 800add2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800add6:	d8e2      	bhi.n	800ad9e <__multiply+0xb2>
 800add8:	9a01      	ldr	r2, [sp, #4]
 800adda:	f845 c002 	str.w	ip, [r5, r2]
 800adde:	9a03      	ldr	r2, [sp, #12]
 800ade0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ade4:	3304      	adds	r3, #4
 800ade6:	f1b9 0f00 	cmp.w	r9, #0
 800adea:	d021      	beq.n	800ae30 <__multiply+0x144>
 800adec:	6829      	ldr	r1, [r5, #0]
 800adee:	f104 0c14 	add.w	ip, r4, #20
 800adf2:	46ae      	mov	lr, r5
 800adf4:	f04f 0a00 	mov.w	sl, #0
 800adf8:	f8bc b000 	ldrh.w	fp, [ip]
 800adfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae00:	fb09 220b 	mla	r2, r9, fp, r2
 800ae04:	4452      	add	r2, sl
 800ae06:	b289      	uxth	r1, r1
 800ae08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ae10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae18:	f8be 1000 	ldrh.w	r1, [lr]
 800ae1c:	fb09 110a 	mla	r1, r9, sl, r1
 800ae20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ae24:	4567      	cmp	r7, ip
 800ae26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae2a:	d8e5      	bhi.n	800adf8 <__multiply+0x10c>
 800ae2c:	9a01      	ldr	r2, [sp, #4]
 800ae2e:	50a9      	str	r1, [r5, r2]
 800ae30:	3504      	adds	r5, #4
 800ae32:	e799      	b.n	800ad68 <__multiply+0x7c>
 800ae34:	3e01      	subs	r6, #1
 800ae36:	e79b      	b.n	800ad70 <__multiply+0x84>
 800ae38:	0800ddfd 	.word	0x0800ddfd
 800ae3c:	0800de0e 	.word	0x0800de0e

0800ae40 <__pow5mult>:
 800ae40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae44:	4615      	mov	r5, r2
 800ae46:	f012 0203 	ands.w	r2, r2, #3
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	d007      	beq.n	800ae60 <__pow5mult+0x20>
 800ae50:	4c25      	ldr	r4, [pc, #148]	; (800aee8 <__pow5mult+0xa8>)
 800ae52:	3a01      	subs	r2, #1
 800ae54:	2300      	movs	r3, #0
 800ae56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae5a:	f7ff fe53 	bl	800ab04 <__multadd>
 800ae5e:	4607      	mov	r7, r0
 800ae60:	10ad      	asrs	r5, r5, #2
 800ae62:	d03d      	beq.n	800aee0 <__pow5mult+0xa0>
 800ae64:	69f4      	ldr	r4, [r6, #28]
 800ae66:	b97c      	cbnz	r4, 800ae88 <__pow5mult+0x48>
 800ae68:	2010      	movs	r0, #16
 800ae6a:	f7ff fd35 	bl	800a8d8 <malloc>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	61f0      	str	r0, [r6, #28]
 800ae72:	b928      	cbnz	r0, 800ae80 <__pow5mult+0x40>
 800ae74:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <__pow5mult+0xac>)
 800ae76:	481e      	ldr	r0, [pc, #120]	; (800aef0 <__pow5mult+0xb0>)
 800ae78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae7c:	f001 fb38 	bl	800c4f0 <__assert_func>
 800ae80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae84:	6004      	str	r4, [r0, #0]
 800ae86:	60c4      	str	r4, [r0, #12]
 800ae88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ae8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae90:	b94c      	cbnz	r4, 800aea6 <__pow5mult+0x66>
 800ae92:	f240 2171 	movw	r1, #625	; 0x271
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff ff12 	bl	800acc0 <__i2b>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aea2:	4604      	mov	r4, r0
 800aea4:	6003      	str	r3, [r0, #0]
 800aea6:	f04f 0900 	mov.w	r9, #0
 800aeaa:	07eb      	lsls	r3, r5, #31
 800aeac:	d50a      	bpl.n	800aec4 <__pow5mult+0x84>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ff1a 	bl	800acec <__multiply>
 800aeb8:	4639      	mov	r1, r7
 800aeba:	4680      	mov	r8, r0
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7ff fdff 	bl	800aac0 <_Bfree>
 800aec2:	4647      	mov	r7, r8
 800aec4:	106d      	asrs	r5, r5, #1
 800aec6:	d00b      	beq.n	800aee0 <__pow5mult+0xa0>
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	b938      	cbnz	r0, 800aedc <__pow5mult+0x9c>
 800aecc:	4622      	mov	r2, r4
 800aece:	4621      	mov	r1, r4
 800aed0:	4630      	mov	r0, r6
 800aed2:	f7ff ff0b 	bl	800acec <__multiply>
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	f8c0 9000 	str.w	r9, [r0]
 800aedc:	4604      	mov	r4, r0
 800aede:	e7e4      	b.n	800aeaa <__pow5mult+0x6a>
 800aee0:	4638      	mov	r0, r7
 800aee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee6:	bf00      	nop
 800aee8:	0800df58 	.word	0x0800df58
 800aeec:	0800dd8e 	.word	0x0800dd8e
 800aef0:	0800de0e 	.word	0x0800de0e

0800aef4 <__lshift>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	6849      	ldr	r1, [r1, #4]
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	4607      	mov	r7, r0
 800af06:	4691      	mov	r9, r2
 800af08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af0c:	f108 0601 	add.w	r6, r8, #1
 800af10:	42b3      	cmp	r3, r6
 800af12:	db0b      	blt.n	800af2c <__lshift+0x38>
 800af14:	4638      	mov	r0, r7
 800af16:	f7ff fd93 	bl	800aa40 <_Balloc>
 800af1a:	4605      	mov	r5, r0
 800af1c:	b948      	cbnz	r0, 800af32 <__lshift+0x3e>
 800af1e:	4602      	mov	r2, r0
 800af20:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <__lshift+0xd0>)
 800af22:	4829      	ldr	r0, [pc, #164]	; (800afc8 <__lshift+0xd4>)
 800af24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800af28:	f001 fae2 	bl	800c4f0 <__assert_func>
 800af2c:	3101      	adds	r1, #1
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	e7ee      	b.n	800af10 <__lshift+0x1c>
 800af32:	2300      	movs	r3, #0
 800af34:	f100 0114 	add.w	r1, r0, #20
 800af38:	f100 0210 	add.w	r2, r0, #16
 800af3c:	4618      	mov	r0, r3
 800af3e:	4553      	cmp	r3, sl
 800af40:	db33      	blt.n	800afaa <__lshift+0xb6>
 800af42:	6920      	ldr	r0, [r4, #16]
 800af44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af48:	f104 0314 	add.w	r3, r4, #20
 800af4c:	f019 091f 	ands.w	r9, r9, #31
 800af50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af58:	d02b      	beq.n	800afb2 <__lshift+0xbe>
 800af5a:	f1c9 0e20 	rsb	lr, r9, #32
 800af5e:	468a      	mov	sl, r1
 800af60:	2200      	movs	r2, #0
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	fa00 f009 	lsl.w	r0, r0, r9
 800af68:	4310      	orrs	r0, r2
 800af6a:	f84a 0b04 	str.w	r0, [sl], #4
 800af6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af72:	459c      	cmp	ip, r3
 800af74:	fa22 f20e 	lsr.w	r2, r2, lr
 800af78:	d8f3      	bhi.n	800af62 <__lshift+0x6e>
 800af7a:	ebac 0304 	sub.w	r3, ip, r4
 800af7e:	3b15      	subs	r3, #21
 800af80:	f023 0303 	bic.w	r3, r3, #3
 800af84:	3304      	adds	r3, #4
 800af86:	f104 0015 	add.w	r0, r4, #21
 800af8a:	4584      	cmp	ip, r0
 800af8c:	bf38      	it	cc
 800af8e:	2304      	movcc	r3, #4
 800af90:	50ca      	str	r2, [r1, r3]
 800af92:	b10a      	cbz	r2, 800af98 <__lshift+0xa4>
 800af94:	f108 0602 	add.w	r6, r8, #2
 800af98:	3e01      	subs	r6, #1
 800af9a:	4638      	mov	r0, r7
 800af9c:	612e      	str	r6, [r5, #16]
 800af9e:	4621      	mov	r1, r4
 800afa0:	f7ff fd8e 	bl	800aac0 <_Bfree>
 800afa4:	4628      	mov	r0, r5
 800afa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800afae:	3301      	adds	r3, #1
 800afb0:	e7c5      	b.n	800af3e <__lshift+0x4a>
 800afb2:	3904      	subs	r1, #4
 800afb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800afbc:	459c      	cmp	ip, r3
 800afbe:	d8f9      	bhi.n	800afb4 <__lshift+0xc0>
 800afc0:	e7ea      	b.n	800af98 <__lshift+0xa4>
 800afc2:	bf00      	nop
 800afc4:	0800ddfd 	.word	0x0800ddfd
 800afc8:	0800de0e 	.word	0x0800de0e

0800afcc <__mcmp>:
 800afcc:	b530      	push	{r4, r5, lr}
 800afce:	6902      	ldr	r2, [r0, #16]
 800afd0:	690c      	ldr	r4, [r1, #16]
 800afd2:	1b12      	subs	r2, r2, r4
 800afd4:	d10e      	bne.n	800aff4 <__mcmp+0x28>
 800afd6:	f100 0314 	add.w	r3, r0, #20
 800afda:	3114      	adds	r1, #20
 800afdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afec:	42a5      	cmp	r5, r4
 800afee:	d003      	beq.n	800aff8 <__mcmp+0x2c>
 800aff0:	d305      	bcc.n	800affe <__mcmp+0x32>
 800aff2:	2201      	movs	r2, #1
 800aff4:	4610      	mov	r0, r2
 800aff6:	bd30      	pop	{r4, r5, pc}
 800aff8:	4283      	cmp	r3, r0
 800affa:	d3f3      	bcc.n	800afe4 <__mcmp+0x18>
 800affc:	e7fa      	b.n	800aff4 <__mcmp+0x28>
 800affe:	f04f 32ff 	mov.w	r2, #4294967295
 800b002:	e7f7      	b.n	800aff4 <__mcmp+0x28>

0800b004 <__mdiff>:
 800b004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	460c      	mov	r4, r1
 800b00a:	4606      	mov	r6, r0
 800b00c:	4611      	mov	r1, r2
 800b00e:	4620      	mov	r0, r4
 800b010:	4690      	mov	r8, r2
 800b012:	f7ff ffdb 	bl	800afcc <__mcmp>
 800b016:	1e05      	subs	r5, r0, #0
 800b018:	d110      	bne.n	800b03c <__mdiff+0x38>
 800b01a:	4629      	mov	r1, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	f7ff fd0f 	bl	800aa40 <_Balloc>
 800b022:	b930      	cbnz	r0, 800b032 <__mdiff+0x2e>
 800b024:	4b3a      	ldr	r3, [pc, #232]	; (800b110 <__mdiff+0x10c>)
 800b026:	4602      	mov	r2, r0
 800b028:	f240 2137 	movw	r1, #567	; 0x237
 800b02c:	4839      	ldr	r0, [pc, #228]	; (800b114 <__mdiff+0x110>)
 800b02e:	f001 fa5f 	bl	800c4f0 <__assert_func>
 800b032:	2301      	movs	r3, #1
 800b034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03c:	bfa4      	itt	ge
 800b03e:	4643      	movge	r3, r8
 800b040:	46a0      	movge	r8, r4
 800b042:	4630      	mov	r0, r6
 800b044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b048:	bfa6      	itte	ge
 800b04a:	461c      	movge	r4, r3
 800b04c:	2500      	movge	r5, #0
 800b04e:	2501      	movlt	r5, #1
 800b050:	f7ff fcf6 	bl	800aa40 <_Balloc>
 800b054:	b920      	cbnz	r0, 800b060 <__mdiff+0x5c>
 800b056:	4b2e      	ldr	r3, [pc, #184]	; (800b110 <__mdiff+0x10c>)
 800b058:	4602      	mov	r2, r0
 800b05a:	f240 2145 	movw	r1, #581	; 0x245
 800b05e:	e7e5      	b.n	800b02c <__mdiff+0x28>
 800b060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b064:	6926      	ldr	r6, [r4, #16]
 800b066:	60c5      	str	r5, [r0, #12]
 800b068:	f104 0914 	add.w	r9, r4, #20
 800b06c:	f108 0514 	add.w	r5, r8, #20
 800b070:	f100 0e14 	add.w	lr, r0, #20
 800b074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b07c:	f108 0210 	add.w	r2, r8, #16
 800b080:	46f2      	mov	sl, lr
 800b082:	2100      	movs	r1, #0
 800b084:	f859 3b04 	ldr.w	r3, [r9], #4
 800b088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b08c:	fa11 f88b 	uxtah	r8, r1, fp
 800b090:	b299      	uxth	r1, r3
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	eba8 0801 	sub.w	r8, r8, r1
 800b098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b09c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0a0:	fa1f f888 	uxth.w	r8, r8
 800b0a4:	1419      	asrs	r1, r3, #16
 800b0a6:	454e      	cmp	r6, r9
 800b0a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0ac:	f84a 3b04 	str.w	r3, [sl], #4
 800b0b0:	d8e8      	bhi.n	800b084 <__mdiff+0x80>
 800b0b2:	1b33      	subs	r3, r6, r4
 800b0b4:	3b15      	subs	r3, #21
 800b0b6:	f023 0303 	bic.w	r3, r3, #3
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	3415      	adds	r4, #21
 800b0be:	42a6      	cmp	r6, r4
 800b0c0:	bf38      	it	cc
 800b0c2:	2304      	movcc	r3, #4
 800b0c4:	441d      	add	r5, r3
 800b0c6:	4473      	add	r3, lr
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	462e      	mov	r6, r5
 800b0cc:	4566      	cmp	r6, ip
 800b0ce:	d30e      	bcc.n	800b0ee <__mdiff+0xea>
 800b0d0:	f10c 0203 	add.w	r2, ip, #3
 800b0d4:	1b52      	subs	r2, r2, r5
 800b0d6:	f022 0203 	bic.w	r2, r2, #3
 800b0da:	3d03      	subs	r5, #3
 800b0dc:	45ac      	cmp	ip, r5
 800b0de:	bf38      	it	cc
 800b0e0:	2200      	movcc	r2, #0
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0e8:	b17a      	cbz	r2, 800b10a <__mdiff+0x106>
 800b0ea:	6107      	str	r7, [r0, #16]
 800b0ec:	e7a4      	b.n	800b038 <__mdiff+0x34>
 800b0ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0f2:	fa11 f288 	uxtah	r2, r1, r8
 800b0f6:	1414      	asrs	r4, r2, #16
 800b0f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0fc:	b292      	uxth	r2, r2
 800b0fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b102:	f84e 2b04 	str.w	r2, [lr], #4
 800b106:	1421      	asrs	r1, r4, #16
 800b108:	e7e0      	b.n	800b0cc <__mdiff+0xc8>
 800b10a:	3f01      	subs	r7, #1
 800b10c:	e7ea      	b.n	800b0e4 <__mdiff+0xe0>
 800b10e:	bf00      	nop
 800b110:	0800ddfd 	.word	0x0800ddfd
 800b114:	0800de0e 	.word	0x0800de0e

0800b118 <__ulp>:
 800b118:	b082      	sub	sp, #8
 800b11a:	ed8d 0b00 	vstr	d0, [sp]
 800b11e:	9a01      	ldr	r2, [sp, #4]
 800b120:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <__ulp+0x48>)
 800b122:	4013      	ands	r3, r2
 800b124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	dc08      	bgt.n	800b13e <__ulp+0x26>
 800b12c:	425b      	negs	r3, r3
 800b12e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b132:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b136:	da04      	bge.n	800b142 <__ulp+0x2a>
 800b138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b13c:	4113      	asrs	r3, r2
 800b13e:	2200      	movs	r2, #0
 800b140:	e008      	b.n	800b154 <__ulp+0x3c>
 800b142:	f1a2 0314 	sub.w	r3, r2, #20
 800b146:	2b1e      	cmp	r3, #30
 800b148:	bfda      	itte	le
 800b14a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b14e:	40da      	lsrle	r2, r3
 800b150:	2201      	movgt	r2, #1
 800b152:	2300      	movs	r3, #0
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	ec41 0b10 	vmov	d0, r0, r1
 800b15c:	b002      	add	sp, #8
 800b15e:	4770      	bx	lr
 800b160:	7ff00000 	.word	0x7ff00000

0800b164 <__b2d>:
 800b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b168:	6906      	ldr	r6, [r0, #16]
 800b16a:	f100 0814 	add.w	r8, r0, #20
 800b16e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b172:	1f37      	subs	r7, r6, #4
 800b174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b178:	4610      	mov	r0, r2
 800b17a:	f7ff fd53 	bl	800ac24 <__hi0bits>
 800b17e:	f1c0 0320 	rsb	r3, r0, #32
 800b182:	280a      	cmp	r0, #10
 800b184:	600b      	str	r3, [r1, #0]
 800b186:	491b      	ldr	r1, [pc, #108]	; (800b1f4 <__b2d+0x90>)
 800b188:	dc15      	bgt.n	800b1b6 <__b2d+0x52>
 800b18a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b18e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b192:	45b8      	cmp	r8, r7
 800b194:	ea43 0501 	orr.w	r5, r3, r1
 800b198:	bf34      	ite	cc
 800b19a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b19e:	2300      	movcs	r3, #0
 800b1a0:	3015      	adds	r0, #21
 800b1a2:	fa02 f000 	lsl.w	r0, r2, r0
 800b1a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b1aa:	4303      	orrs	r3, r0
 800b1ac:	461c      	mov	r4, r3
 800b1ae:	ec45 4b10 	vmov	d0, r4, r5
 800b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b6:	45b8      	cmp	r8, r7
 800b1b8:	bf3a      	itte	cc
 800b1ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b1be:	f1a6 0708 	subcc.w	r7, r6, #8
 800b1c2:	2300      	movcs	r3, #0
 800b1c4:	380b      	subs	r0, #11
 800b1c6:	d012      	beq.n	800b1ee <__b2d+0x8a>
 800b1c8:	f1c0 0120 	rsb	r1, r0, #32
 800b1cc:	fa23 f401 	lsr.w	r4, r3, r1
 800b1d0:	4082      	lsls	r2, r0
 800b1d2:	4322      	orrs	r2, r4
 800b1d4:	4547      	cmp	r7, r8
 800b1d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b1da:	bf8c      	ite	hi
 800b1dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b1e0:	2200      	movls	r2, #0
 800b1e2:	4083      	lsls	r3, r0
 800b1e4:	40ca      	lsrs	r2, r1
 800b1e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	e7de      	b.n	800b1ac <__b2d+0x48>
 800b1ee:	ea42 0501 	orr.w	r5, r2, r1
 800b1f2:	e7db      	b.n	800b1ac <__b2d+0x48>
 800b1f4:	3ff00000 	.word	0x3ff00000

0800b1f8 <__d2b>:
 800b1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	2101      	movs	r1, #1
 800b200:	ec59 8b10 	vmov	r8, r9, d0
 800b204:	4616      	mov	r6, r2
 800b206:	f7ff fc1b 	bl	800aa40 <_Balloc>
 800b20a:	4604      	mov	r4, r0
 800b20c:	b930      	cbnz	r0, 800b21c <__d2b+0x24>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b24      	ldr	r3, [pc, #144]	; (800b2a4 <__d2b+0xac>)
 800b212:	4825      	ldr	r0, [pc, #148]	; (800b2a8 <__d2b+0xb0>)
 800b214:	f240 310f 	movw	r1, #783	; 0x30f
 800b218:	f001 f96a 	bl	800c4f0 <__assert_func>
 800b21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b224:	bb2d      	cbnz	r5, 800b272 <__d2b+0x7a>
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	f1b8 0300 	subs.w	r3, r8, #0
 800b22c:	d026      	beq.n	800b27c <__d2b+0x84>
 800b22e:	4668      	mov	r0, sp
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	f7ff fd17 	bl	800ac64 <__lo0bits>
 800b236:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b23a:	b1e8      	cbz	r0, 800b278 <__d2b+0x80>
 800b23c:	f1c0 0320 	rsb	r3, r0, #32
 800b240:	fa02 f303 	lsl.w	r3, r2, r3
 800b244:	430b      	orrs	r3, r1
 800b246:	40c2      	lsrs	r2, r0
 800b248:	6163      	str	r3, [r4, #20]
 800b24a:	9201      	str	r2, [sp, #4]
 800b24c:	9b01      	ldr	r3, [sp, #4]
 800b24e:	61a3      	str	r3, [r4, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	bf14      	ite	ne
 800b254:	2202      	movne	r2, #2
 800b256:	2201      	moveq	r2, #1
 800b258:	6122      	str	r2, [r4, #16]
 800b25a:	b1bd      	cbz	r5, 800b28c <__d2b+0x94>
 800b25c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b260:	4405      	add	r5, r0
 800b262:	603d      	str	r5, [r7, #0]
 800b264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b268:	6030      	str	r0, [r6, #0]
 800b26a:	4620      	mov	r0, r4
 800b26c:	b003      	add	sp, #12
 800b26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b276:	e7d6      	b.n	800b226 <__d2b+0x2e>
 800b278:	6161      	str	r1, [r4, #20]
 800b27a:	e7e7      	b.n	800b24c <__d2b+0x54>
 800b27c:	a801      	add	r0, sp, #4
 800b27e:	f7ff fcf1 	bl	800ac64 <__lo0bits>
 800b282:	9b01      	ldr	r3, [sp, #4]
 800b284:	6163      	str	r3, [r4, #20]
 800b286:	3020      	adds	r0, #32
 800b288:	2201      	movs	r2, #1
 800b28a:	e7e5      	b.n	800b258 <__d2b+0x60>
 800b28c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b294:	6038      	str	r0, [r7, #0]
 800b296:	6918      	ldr	r0, [r3, #16]
 800b298:	f7ff fcc4 	bl	800ac24 <__hi0bits>
 800b29c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2a0:	e7e2      	b.n	800b268 <__d2b+0x70>
 800b2a2:	bf00      	nop
 800b2a4:	0800ddfd 	.word	0x0800ddfd
 800b2a8:	0800de0e 	.word	0x0800de0e

0800b2ac <__ratio>:
 800b2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	4688      	mov	r8, r1
 800b2b2:	4669      	mov	r1, sp
 800b2b4:	4681      	mov	r9, r0
 800b2b6:	f7ff ff55 	bl	800b164 <__b2d>
 800b2ba:	a901      	add	r1, sp, #4
 800b2bc:	4640      	mov	r0, r8
 800b2be:	ec55 4b10 	vmov	r4, r5, d0
 800b2c2:	ee10 aa10 	vmov	sl, s0
 800b2c6:	f7ff ff4d 	bl	800b164 <__b2d>
 800b2ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b2ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b2d2:	1ad2      	subs	r2, r2, r3
 800b2d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b2d8:	1a5b      	subs	r3, r3, r1
 800b2da:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b2de:	ec57 6b10 	vmov	r6, r7, d0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bfd6      	itet	le
 800b2e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2ea:	462a      	movgt	r2, r5
 800b2ec:	463a      	movle	r2, r7
 800b2ee:	46ab      	mov	fp, r5
 800b2f0:	bfd6      	itet	le
 800b2f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b2f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b2fa:	ee00 3a90 	vmovle	s1, r3
 800b2fe:	ec4b ab17 	vmov	d7, sl, fp
 800b302:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b306:	b003      	add	sp, #12
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b30c <__copybits>:
 800b30c:	3901      	subs	r1, #1
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	1149      	asrs	r1, r1, #5
 800b312:	6914      	ldr	r4, [r2, #16]
 800b314:	3101      	adds	r1, #1
 800b316:	f102 0314 	add.w	r3, r2, #20
 800b31a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b31e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b322:	1f05      	subs	r5, r0, #4
 800b324:	42a3      	cmp	r3, r4
 800b326:	d30c      	bcc.n	800b342 <__copybits+0x36>
 800b328:	1aa3      	subs	r3, r4, r2
 800b32a:	3b11      	subs	r3, #17
 800b32c:	f023 0303 	bic.w	r3, r3, #3
 800b330:	3211      	adds	r2, #17
 800b332:	42a2      	cmp	r2, r4
 800b334:	bf88      	it	hi
 800b336:	2300      	movhi	r3, #0
 800b338:	4418      	add	r0, r3
 800b33a:	2300      	movs	r3, #0
 800b33c:	4288      	cmp	r0, r1
 800b33e:	d305      	bcc.n	800b34c <__copybits+0x40>
 800b340:	bd70      	pop	{r4, r5, r6, pc}
 800b342:	f853 6b04 	ldr.w	r6, [r3], #4
 800b346:	f845 6f04 	str.w	r6, [r5, #4]!
 800b34a:	e7eb      	b.n	800b324 <__copybits+0x18>
 800b34c:	f840 3b04 	str.w	r3, [r0], #4
 800b350:	e7f4      	b.n	800b33c <__copybits+0x30>

0800b352 <__any_on>:
 800b352:	f100 0214 	add.w	r2, r0, #20
 800b356:	6900      	ldr	r0, [r0, #16]
 800b358:	114b      	asrs	r3, r1, #5
 800b35a:	4298      	cmp	r0, r3
 800b35c:	b510      	push	{r4, lr}
 800b35e:	db11      	blt.n	800b384 <__any_on+0x32>
 800b360:	dd0a      	ble.n	800b378 <__any_on+0x26>
 800b362:	f011 011f 	ands.w	r1, r1, #31
 800b366:	d007      	beq.n	800b378 <__any_on+0x26>
 800b368:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b36c:	fa24 f001 	lsr.w	r0, r4, r1
 800b370:	fa00 f101 	lsl.w	r1, r0, r1
 800b374:	428c      	cmp	r4, r1
 800b376:	d10b      	bne.n	800b390 <__any_on+0x3e>
 800b378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d803      	bhi.n	800b388 <__any_on+0x36>
 800b380:	2000      	movs	r0, #0
 800b382:	bd10      	pop	{r4, pc}
 800b384:	4603      	mov	r3, r0
 800b386:	e7f7      	b.n	800b378 <__any_on+0x26>
 800b388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d0f5      	beq.n	800b37c <__any_on+0x2a>
 800b390:	2001      	movs	r0, #1
 800b392:	e7f6      	b.n	800b382 <__any_on+0x30>

0800b394 <sulp>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	4604      	mov	r4, r0
 800b398:	460d      	mov	r5, r1
 800b39a:	4616      	mov	r6, r2
 800b39c:	ec45 4b10 	vmov	d0, r4, r5
 800b3a0:	f7ff feba 	bl	800b118 <__ulp>
 800b3a4:	b17e      	cbz	r6, 800b3c6 <sulp+0x32>
 800b3a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b3aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	dd09      	ble.n	800b3c6 <sulp+0x32>
 800b3b2:	051b      	lsls	r3, r3, #20
 800b3b4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b3be:	ec41 0b17 	vmov	d7, r0, r1
 800b3c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <_strtod_l>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	ed2d 8b0e 	vpush	{d8-d14}
 800b3d0:	b097      	sub	sp, #92	; 0x5c
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	920d      	str	r2, [sp, #52]	; 0x34
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	9212      	str	r2, [sp, #72]	; 0x48
 800b3da:	468a      	mov	sl, r1
 800b3dc:	f04f 0800 	mov.w	r8, #0
 800b3e0:	f04f 0900 	mov.w	r9, #0
 800b3e4:	460a      	mov	r2, r1
 800b3e6:	9211      	str	r2, [sp, #68]	; 0x44
 800b3e8:	7811      	ldrb	r1, [r2, #0]
 800b3ea:	292b      	cmp	r1, #43	; 0x2b
 800b3ec:	d04c      	beq.n	800b488 <_strtod_l+0xc0>
 800b3ee:	d839      	bhi.n	800b464 <_strtod_l+0x9c>
 800b3f0:	290d      	cmp	r1, #13
 800b3f2:	d833      	bhi.n	800b45c <_strtod_l+0x94>
 800b3f4:	2908      	cmp	r1, #8
 800b3f6:	d833      	bhi.n	800b460 <_strtod_l+0x98>
 800b3f8:	2900      	cmp	r1, #0
 800b3fa:	d03c      	beq.n	800b476 <_strtod_l+0xae>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	9208      	str	r2, [sp, #32]
 800b400:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b402:	7832      	ldrb	r2, [r6, #0]
 800b404:	2a30      	cmp	r2, #48	; 0x30
 800b406:	f040 80b8 	bne.w	800b57a <_strtod_l+0x1b2>
 800b40a:	7872      	ldrb	r2, [r6, #1]
 800b40c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b410:	2a58      	cmp	r2, #88	; 0x58
 800b412:	d170      	bne.n	800b4f6 <_strtod_l+0x12e>
 800b414:	9302      	str	r3, [sp, #8]
 800b416:	9b08      	ldr	r3, [sp, #32]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	ab12      	add	r3, sp, #72	; 0x48
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	4a91      	ldr	r2, [pc, #580]	; (800b664 <_strtod_l+0x29c>)
 800b420:	ab13      	add	r3, sp, #76	; 0x4c
 800b422:	a911      	add	r1, sp, #68	; 0x44
 800b424:	4620      	mov	r0, r4
 800b426:	f001 f8ff 	bl	800c628 <__gethex>
 800b42a:	f010 070f 	ands.w	r7, r0, #15
 800b42e:	4605      	mov	r5, r0
 800b430:	d005      	beq.n	800b43e <_strtod_l+0x76>
 800b432:	2f06      	cmp	r7, #6
 800b434:	d12a      	bne.n	800b48c <_strtod_l+0xc4>
 800b436:	3601      	adds	r6, #1
 800b438:	2300      	movs	r3, #0
 800b43a:	9611      	str	r6, [sp, #68]	; 0x44
 800b43c:	9308      	str	r3, [sp, #32]
 800b43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b440:	2b00      	cmp	r3, #0
 800b442:	f040 8555 	bne.w	800bef0 <_strtod_l+0xb28>
 800b446:	9b08      	ldr	r3, [sp, #32]
 800b448:	ec49 8b10 	vmov	d0, r8, r9
 800b44c:	b1cb      	cbz	r3, 800b482 <_strtod_l+0xba>
 800b44e:	eeb1 0b40 	vneg.f64	d0, d0
 800b452:	b017      	add	sp, #92	; 0x5c
 800b454:	ecbd 8b0e 	vpop	{d8-d14}
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	2920      	cmp	r1, #32
 800b45e:	d1cd      	bne.n	800b3fc <_strtod_l+0x34>
 800b460:	3201      	adds	r2, #1
 800b462:	e7c0      	b.n	800b3e6 <_strtod_l+0x1e>
 800b464:	292d      	cmp	r1, #45	; 0x2d
 800b466:	d1c9      	bne.n	800b3fc <_strtod_l+0x34>
 800b468:	2101      	movs	r1, #1
 800b46a:	9108      	str	r1, [sp, #32]
 800b46c:	1c51      	adds	r1, r2, #1
 800b46e:	9111      	str	r1, [sp, #68]	; 0x44
 800b470:	7852      	ldrb	r2, [r2, #1]
 800b472:	2a00      	cmp	r2, #0
 800b474:	d1c4      	bne.n	800b400 <_strtod_l+0x38>
 800b476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b478:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 8535 	bne.w	800beec <_strtod_l+0xb24>
 800b482:	ec49 8b10 	vmov	d0, r8, r9
 800b486:	e7e4      	b.n	800b452 <_strtod_l+0x8a>
 800b488:	2100      	movs	r1, #0
 800b48a:	e7ee      	b.n	800b46a <_strtod_l+0xa2>
 800b48c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b48e:	b13a      	cbz	r2, 800b4a0 <_strtod_l+0xd8>
 800b490:	2135      	movs	r1, #53	; 0x35
 800b492:	a814      	add	r0, sp, #80	; 0x50
 800b494:	f7ff ff3a 	bl	800b30c <__copybits>
 800b498:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7ff fb10 	bl	800aac0 <_Bfree>
 800b4a0:	1e7b      	subs	r3, r7, #1
 800b4a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	d806      	bhi.n	800b4b6 <_strtod_l+0xee>
 800b4a8:	e8df f003 	tbb	[pc, r3]
 800b4ac:	201d0314 	.word	0x201d0314
 800b4b0:	14          	.byte	0x14
 800b4b1:	00          	.byte	0x00
 800b4b2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800b4b6:	05eb      	lsls	r3, r5, #23
 800b4b8:	bf48      	it	mi
 800b4ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b4be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4c2:	0d1b      	lsrs	r3, r3, #20
 800b4c4:	051b      	lsls	r3, r3, #20
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1b9      	bne.n	800b43e <_strtod_l+0x76>
 800b4ca:	f7fe fb8f 	bl	8009bec <__errno>
 800b4ce:	2322      	movs	r3, #34	; 0x22
 800b4d0:	6003      	str	r3, [r0, #0]
 800b4d2:	e7b4      	b.n	800b43e <_strtod_l+0x76>
 800b4d4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800b4d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b4dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b4e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b4e4:	e7e7      	b.n	800b4b6 <_strtod_l+0xee>
 800b4e6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800b66c <_strtod_l+0x2a4>
 800b4ea:	e7e4      	b.n	800b4b6 <_strtod_l+0xee>
 800b4ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b4f0:	f04f 38ff 	mov.w	r8, #4294967295
 800b4f4:	e7df      	b.n	800b4b6 <_strtod_l+0xee>
 800b4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	9211      	str	r2, [sp, #68]	; 0x44
 800b4fc:	785b      	ldrb	r3, [r3, #1]
 800b4fe:	2b30      	cmp	r3, #48	; 0x30
 800b500:	d0f9      	beq.n	800b4f6 <_strtod_l+0x12e>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d09b      	beq.n	800b43e <_strtod_l+0x76>
 800b506:	2301      	movs	r3, #1
 800b508:	9306      	str	r3, [sp, #24]
 800b50a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b50c:	9309      	str	r3, [sp, #36]	; 0x24
 800b50e:	2300      	movs	r3, #0
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	9307      	str	r3, [sp, #28]
 800b514:	461e      	mov	r6, r3
 800b516:	220a      	movs	r2, #10
 800b518:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b51a:	7805      	ldrb	r5, [r0, #0]
 800b51c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800b520:	b2d9      	uxtb	r1, r3
 800b522:	2909      	cmp	r1, #9
 800b524:	d92b      	bls.n	800b57e <_strtod_l+0x1b6>
 800b526:	4950      	ldr	r1, [pc, #320]	; (800b668 <_strtod_l+0x2a0>)
 800b528:	2201      	movs	r2, #1
 800b52a:	f000 ffa9 	bl	800c480 <strncmp>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d035      	beq.n	800b59e <_strtod_l+0x1d6>
 800b532:	2000      	movs	r0, #0
 800b534:	462a      	mov	r2, r5
 800b536:	4633      	mov	r3, r6
 800b538:	4683      	mov	fp, r0
 800b53a:	4601      	mov	r1, r0
 800b53c:	2a65      	cmp	r2, #101	; 0x65
 800b53e:	d001      	beq.n	800b544 <_strtod_l+0x17c>
 800b540:	2a45      	cmp	r2, #69	; 0x45
 800b542:	d118      	bne.n	800b576 <_strtod_l+0x1ae>
 800b544:	b91b      	cbnz	r3, 800b54e <_strtod_l+0x186>
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	4303      	orrs	r3, r0
 800b54a:	d094      	beq.n	800b476 <_strtod_l+0xae>
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800b552:	f10a 0201 	add.w	r2, sl, #1
 800b556:	9211      	str	r2, [sp, #68]	; 0x44
 800b558:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800b55c:	2a2b      	cmp	r2, #43	; 0x2b
 800b55e:	d075      	beq.n	800b64c <_strtod_l+0x284>
 800b560:	2a2d      	cmp	r2, #45	; 0x2d
 800b562:	d07b      	beq.n	800b65c <_strtod_l+0x294>
 800b564:	f04f 0e00 	mov.w	lr, #0
 800b568:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b56c:	2d09      	cmp	r5, #9
 800b56e:	f240 8083 	bls.w	800b678 <_strtod_l+0x2b0>
 800b572:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800b576:	2500      	movs	r5, #0
 800b578:	e09e      	b.n	800b6b8 <_strtod_l+0x2f0>
 800b57a:	2300      	movs	r3, #0
 800b57c:	e7c4      	b.n	800b508 <_strtod_l+0x140>
 800b57e:	2e08      	cmp	r6, #8
 800b580:	bfd5      	itete	le
 800b582:	9907      	ldrle	r1, [sp, #28]
 800b584:	9905      	ldrgt	r1, [sp, #20]
 800b586:	fb02 3301 	mlale	r3, r2, r1, r3
 800b58a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b58e:	f100 0001 	add.w	r0, r0, #1
 800b592:	bfd4      	ite	le
 800b594:	9307      	strle	r3, [sp, #28]
 800b596:	9305      	strgt	r3, [sp, #20]
 800b598:	3601      	adds	r6, #1
 800b59a:	9011      	str	r0, [sp, #68]	; 0x44
 800b59c:	e7bc      	b.n	800b518 <_strtod_l+0x150>
 800b59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	9211      	str	r2, [sp, #68]	; 0x44
 800b5a4:	785a      	ldrb	r2, [r3, #1]
 800b5a6:	b3ae      	cbz	r6, 800b614 <_strtod_l+0x24c>
 800b5a8:	4683      	mov	fp, r0
 800b5aa:	4633      	mov	r3, r6
 800b5ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b5b0:	2909      	cmp	r1, #9
 800b5b2:	d912      	bls.n	800b5da <_strtod_l+0x212>
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	e7c1      	b.n	800b53c <_strtod_l+0x174>
 800b5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	9211      	str	r2, [sp, #68]	; 0x44
 800b5be:	785a      	ldrb	r2, [r3, #1]
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	2a30      	cmp	r2, #48	; 0x30
 800b5c4:	d0f8      	beq.n	800b5b8 <_strtod_l+0x1f0>
 800b5c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b5ca:	2b08      	cmp	r3, #8
 800b5cc:	f200 8495 	bhi.w	800befa <_strtod_l+0xb32>
 800b5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d4:	4683      	mov	fp, r0
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4603      	mov	r3, r0
 800b5da:	3a30      	subs	r2, #48	; 0x30
 800b5dc:	f100 0101 	add.w	r1, r0, #1
 800b5e0:	d012      	beq.n	800b608 <_strtod_l+0x240>
 800b5e2:	448b      	add	fp, r1
 800b5e4:	eb00 0c03 	add.w	ip, r0, r3
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	250a      	movs	r5, #10
 800b5ec:	4561      	cmp	r1, ip
 800b5ee:	d113      	bne.n	800b618 <_strtod_l+0x250>
 800b5f0:	1819      	adds	r1, r3, r0
 800b5f2:	2908      	cmp	r1, #8
 800b5f4:	f103 0301 	add.w	r3, r3, #1
 800b5f8:	4403      	add	r3, r0
 800b5fa:	dc1b      	bgt.n	800b634 <_strtod_l+0x26c>
 800b5fc:	9807      	ldr	r0, [sp, #28]
 800b5fe:	210a      	movs	r1, #10
 800b600:	fb01 2200 	mla	r2, r1, r0, r2
 800b604:	9207      	str	r2, [sp, #28]
 800b606:	2100      	movs	r1, #0
 800b608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b60a:	1c50      	adds	r0, r2, #1
 800b60c:	9011      	str	r0, [sp, #68]	; 0x44
 800b60e:	7852      	ldrb	r2, [r2, #1]
 800b610:	4608      	mov	r0, r1
 800b612:	e7cb      	b.n	800b5ac <_strtod_l+0x1e4>
 800b614:	4630      	mov	r0, r6
 800b616:	e7d4      	b.n	800b5c2 <_strtod_l+0x1fa>
 800b618:	2908      	cmp	r1, #8
 800b61a:	f101 0101 	add.w	r1, r1, #1
 800b61e:	dc03      	bgt.n	800b628 <_strtod_l+0x260>
 800b620:	9f07      	ldr	r7, [sp, #28]
 800b622:	436f      	muls	r7, r5
 800b624:	9707      	str	r7, [sp, #28]
 800b626:	e7e1      	b.n	800b5ec <_strtod_l+0x224>
 800b628:	2910      	cmp	r1, #16
 800b62a:	bfde      	ittt	le
 800b62c:	9f05      	ldrle	r7, [sp, #20]
 800b62e:	436f      	mulle	r7, r5
 800b630:	9705      	strle	r7, [sp, #20]
 800b632:	e7db      	b.n	800b5ec <_strtod_l+0x224>
 800b634:	2b10      	cmp	r3, #16
 800b636:	bfdf      	itttt	le
 800b638:	9805      	ldrle	r0, [sp, #20]
 800b63a:	210a      	movle	r1, #10
 800b63c:	fb01 2200 	mlale	r2, r1, r0, r2
 800b640:	9205      	strle	r2, [sp, #20]
 800b642:	e7e0      	b.n	800b606 <_strtod_l+0x23e>
 800b644:	f04f 0b00 	mov.w	fp, #0
 800b648:	2101      	movs	r1, #1
 800b64a:	e77c      	b.n	800b546 <_strtod_l+0x17e>
 800b64c:	f04f 0e00 	mov.w	lr, #0
 800b650:	f10a 0202 	add.w	r2, sl, #2
 800b654:	9211      	str	r2, [sp, #68]	; 0x44
 800b656:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800b65a:	e785      	b.n	800b568 <_strtod_l+0x1a0>
 800b65c:	f04f 0e01 	mov.w	lr, #1
 800b660:	e7f6      	b.n	800b650 <_strtod_l+0x288>
 800b662:	bf00      	nop
 800b664:	0800df68 	.word	0x0800df68
 800b668:	0800df64 	.word	0x0800df64
 800b66c:	7ff00000 	.word	0x7ff00000
 800b670:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b672:	1c55      	adds	r5, r2, #1
 800b674:	9511      	str	r5, [sp, #68]	; 0x44
 800b676:	7852      	ldrb	r2, [r2, #1]
 800b678:	2a30      	cmp	r2, #48	; 0x30
 800b67a:	d0f9      	beq.n	800b670 <_strtod_l+0x2a8>
 800b67c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b680:	2d08      	cmp	r5, #8
 800b682:	f63f af78 	bhi.w	800b576 <_strtod_l+0x1ae>
 800b686:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b68a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b68c:	920a      	str	r2, [sp, #40]	; 0x28
 800b68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b690:	1c55      	adds	r5, r2, #1
 800b692:	9511      	str	r5, [sp, #68]	; 0x44
 800b694:	7852      	ldrb	r2, [r2, #1]
 800b696:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800b69a:	2f09      	cmp	r7, #9
 800b69c:	d937      	bls.n	800b70e <_strtod_l+0x346>
 800b69e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b6a0:	1bed      	subs	r5, r5, r7
 800b6a2:	2d08      	cmp	r5, #8
 800b6a4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b6a8:	dc02      	bgt.n	800b6b0 <_strtod_l+0x2e8>
 800b6aa:	4565      	cmp	r5, ip
 800b6ac:	bfa8      	it	ge
 800b6ae:	4665      	movge	r5, ip
 800b6b0:	f1be 0f00 	cmp.w	lr, #0
 800b6b4:	d000      	beq.n	800b6b8 <_strtod_l+0x2f0>
 800b6b6:	426d      	negs	r5, r5
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d14d      	bne.n	800b758 <_strtod_l+0x390>
 800b6bc:	9b06      	ldr	r3, [sp, #24]
 800b6be:	4303      	orrs	r3, r0
 800b6c0:	f47f aebd 	bne.w	800b43e <_strtod_l+0x76>
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	f47f aed6 	bne.w	800b476 <_strtod_l+0xae>
 800b6ca:	2a69      	cmp	r2, #105	; 0x69
 800b6cc:	d027      	beq.n	800b71e <_strtod_l+0x356>
 800b6ce:	dc24      	bgt.n	800b71a <_strtod_l+0x352>
 800b6d0:	2a49      	cmp	r2, #73	; 0x49
 800b6d2:	d024      	beq.n	800b71e <_strtod_l+0x356>
 800b6d4:	2a4e      	cmp	r2, #78	; 0x4e
 800b6d6:	f47f aece 	bne.w	800b476 <_strtod_l+0xae>
 800b6da:	4995      	ldr	r1, [pc, #596]	; (800b930 <_strtod_l+0x568>)
 800b6dc:	a811      	add	r0, sp, #68	; 0x44
 800b6de:	f001 f9e3 	bl	800caa8 <__match>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	f43f aec7 	beq.w	800b476 <_strtod_l+0xae>
 800b6e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b28      	cmp	r3, #40	; 0x28
 800b6ee:	d12d      	bne.n	800b74c <_strtod_l+0x384>
 800b6f0:	4990      	ldr	r1, [pc, #576]	; (800b934 <_strtod_l+0x56c>)
 800b6f2:	aa14      	add	r2, sp, #80	; 0x50
 800b6f4:	a811      	add	r0, sp, #68	; 0x44
 800b6f6:	f001 f9eb 	bl	800cad0 <__hexnan>
 800b6fa:	2805      	cmp	r0, #5
 800b6fc:	d126      	bne.n	800b74c <_strtod_l+0x384>
 800b6fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b700:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b704:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b708:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b70c:	e697      	b.n	800b43e <_strtod_l+0x76>
 800b70e:	250a      	movs	r5, #10
 800b710:	fb05 2c0c 	mla	ip, r5, ip, r2
 800b714:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800b718:	e7b9      	b.n	800b68e <_strtod_l+0x2c6>
 800b71a:	2a6e      	cmp	r2, #110	; 0x6e
 800b71c:	e7db      	b.n	800b6d6 <_strtod_l+0x30e>
 800b71e:	4986      	ldr	r1, [pc, #536]	; (800b938 <_strtod_l+0x570>)
 800b720:	a811      	add	r0, sp, #68	; 0x44
 800b722:	f001 f9c1 	bl	800caa8 <__match>
 800b726:	2800      	cmp	r0, #0
 800b728:	f43f aea5 	beq.w	800b476 <_strtod_l+0xae>
 800b72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b72e:	4983      	ldr	r1, [pc, #524]	; (800b93c <_strtod_l+0x574>)
 800b730:	3b01      	subs	r3, #1
 800b732:	a811      	add	r0, sp, #68	; 0x44
 800b734:	9311      	str	r3, [sp, #68]	; 0x44
 800b736:	f001 f9b7 	bl	800caa8 <__match>
 800b73a:	b910      	cbnz	r0, 800b742 <_strtod_l+0x37a>
 800b73c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b73e:	3301      	adds	r3, #1
 800b740:	9311      	str	r3, [sp, #68]	; 0x44
 800b742:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800b950 <_strtod_l+0x588>
 800b746:	f04f 0800 	mov.w	r8, #0
 800b74a:	e678      	b.n	800b43e <_strtod_l+0x76>
 800b74c:	487c      	ldr	r0, [pc, #496]	; (800b940 <_strtod_l+0x578>)
 800b74e:	f000 fec7 	bl	800c4e0 <nan>
 800b752:	ec59 8b10 	vmov	r8, r9, d0
 800b756:	e672      	b.n	800b43e <_strtod_l+0x76>
 800b758:	eddd 7a07 	vldr	s15, [sp, #28]
 800b75c:	eba5 020b 	sub.w	r2, r5, fp
 800b760:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b764:	2e00      	cmp	r6, #0
 800b766:	bf08      	it	eq
 800b768:	461e      	moveq	r6, r3
 800b76a:	2b10      	cmp	r3, #16
 800b76c:	9206      	str	r2, [sp, #24]
 800b76e:	461a      	mov	r2, r3
 800b770:	bfa8      	it	ge
 800b772:	2210      	movge	r2, #16
 800b774:	2b09      	cmp	r3, #9
 800b776:	ec59 8b17 	vmov	r8, r9, d7
 800b77a:	dd0c      	ble.n	800b796 <_strtod_l+0x3ce>
 800b77c:	4971      	ldr	r1, [pc, #452]	; (800b944 <_strtod_l+0x57c>)
 800b77e:	eddd 6a05 	vldr	s13, [sp, #20]
 800b782:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b786:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b78a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b78e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b792:	ec59 8b16 	vmov	r8, r9, d6
 800b796:	2b0f      	cmp	r3, #15
 800b798:	dc37      	bgt.n	800b80a <_strtod_l+0x442>
 800b79a:	9906      	ldr	r1, [sp, #24]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	f43f ae4e 	beq.w	800b43e <_strtod_l+0x76>
 800b7a2:	dd23      	ble.n	800b7ec <_strtod_l+0x424>
 800b7a4:	2916      	cmp	r1, #22
 800b7a6:	dc0b      	bgt.n	800b7c0 <_strtod_l+0x3f8>
 800b7a8:	4b66      	ldr	r3, [pc, #408]	; (800b944 <_strtod_l+0x57c>)
 800b7aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b7ae:	ed93 7b00 	vldr	d7, [r3]
 800b7b2:	ec49 8b16 	vmov	d6, r8, r9
 800b7b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7ba:	ec59 8b17 	vmov	r8, r9, d7
 800b7be:	e63e      	b.n	800b43e <_strtod_l+0x76>
 800b7c0:	9806      	ldr	r0, [sp, #24]
 800b7c2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b7c6:	4281      	cmp	r1, r0
 800b7c8:	db1f      	blt.n	800b80a <_strtod_l+0x442>
 800b7ca:	4a5e      	ldr	r2, [pc, #376]	; (800b944 <_strtod_l+0x57c>)
 800b7cc:	f1c3 030f 	rsb	r3, r3, #15
 800b7d0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b7d4:	ed91 7b00 	vldr	d7, [r1]
 800b7d8:	ec49 8b16 	vmov	d6, r8, r9
 800b7dc:	1ac3      	subs	r3, r0, r3
 800b7de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b7e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7e6:	ed92 6b00 	vldr	d6, [r2]
 800b7ea:	e7e4      	b.n	800b7b6 <_strtod_l+0x3ee>
 800b7ec:	9906      	ldr	r1, [sp, #24]
 800b7ee:	3116      	adds	r1, #22
 800b7f0:	db0b      	blt.n	800b80a <_strtod_l+0x442>
 800b7f2:	4b54      	ldr	r3, [pc, #336]	; (800b944 <_strtod_l+0x57c>)
 800b7f4:	ebab 0505 	sub.w	r5, fp, r5
 800b7f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b7fc:	ed95 7b00 	vldr	d7, [r5]
 800b800:	ec49 8b16 	vmov	d6, r8, r9
 800b804:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b808:	e7d7      	b.n	800b7ba <_strtod_l+0x3f2>
 800b80a:	9906      	ldr	r1, [sp, #24]
 800b80c:	1a9a      	subs	r2, r3, r2
 800b80e:	440a      	add	r2, r1
 800b810:	2a00      	cmp	r2, #0
 800b812:	dd6e      	ble.n	800b8f2 <_strtod_l+0x52a>
 800b814:	f012 000f 	ands.w	r0, r2, #15
 800b818:	d00a      	beq.n	800b830 <_strtod_l+0x468>
 800b81a:	494a      	ldr	r1, [pc, #296]	; (800b944 <_strtod_l+0x57c>)
 800b81c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b820:	ed91 7b00 	vldr	d7, [r1]
 800b824:	ec49 8b16 	vmov	d6, r8, r9
 800b828:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b82c:	ec59 8b17 	vmov	r8, r9, d7
 800b830:	f032 020f 	bics.w	r2, r2, #15
 800b834:	d04e      	beq.n	800b8d4 <_strtod_l+0x50c>
 800b836:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b83a:	dd22      	ble.n	800b882 <_strtod_l+0x4ba>
 800b83c:	2500      	movs	r5, #0
 800b83e:	462e      	mov	r6, r5
 800b840:	9507      	str	r5, [sp, #28]
 800b842:	462f      	mov	r7, r5
 800b844:	2322      	movs	r3, #34	; 0x22
 800b846:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b950 <_strtod_l+0x588>
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	f04f 0800 	mov.w	r8, #0
 800b850:	9b07      	ldr	r3, [sp, #28]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f43f adf3 	beq.w	800b43e <_strtod_l+0x76>
 800b858:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b85a:	4620      	mov	r0, r4
 800b85c:	f7ff f930 	bl	800aac0 <_Bfree>
 800b860:	4639      	mov	r1, r7
 800b862:	4620      	mov	r0, r4
 800b864:	f7ff f92c 	bl	800aac0 <_Bfree>
 800b868:	4631      	mov	r1, r6
 800b86a:	4620      	mov	r0, r4
 800b86c:	f7ff f928 	bl	800aac0 <_Bfree>
 800b870:	9907      	ldr	r1, [sp, #28]
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff f924 	bl	800aac0 <_Bfree>
 800b878:	4629      	mov	r1, r5
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff f920 	bl	800aac0 <_Bfree>
 800b880:	e5dd      	b.n	800b43e <_strtod_l+0x76>
 800b882:	2000      	movs	r0, #0
 800b884:	ec49 8b17 	vmov	d7, r8, r9
 800b888:	4f2f      	ldr	r7, [pc, #188]	; (800b948 <_strtod_l+0x580>)
 800b88a:	1112      	asrs	r2, r2, #4
 800b88c:	4601      	mov	r1, r0
 800b88e:	2a01      	cmp	r2, #1
 800b890:	dc23      	bgt.n	800b8da <_strtod_l+0x512>
 800b892:	b108      	cbz	r0, 800b898 <_strtod_l+0x4d0>
 800b894:	ec59 8b17 	vmov	r8, r9, d7
 800b898:	4a2b      	ldr	r2, [pc, #172]	; (800b948 <_strtod_l+0x580>)
 800b89a:	482c      	ldr	r0, [pc, #176]	; (800b94c <_strtod_l+0x584>)
 800b89c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b8a0:	ed92 7b00 	vldr	d7, [r2]
 800b8a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b8a8:	ec49 8b16 	vmov	d6, r8, r9
 800b8ac:	4a28      	ldr	r2, [pc, #160]	; (800b950 <_strtod_l+0x588>)
 800b8ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8b2:	ee17 1a90 	vmov	r1, s15
 800b8b6:	400a      	ands	r2, r1
 800b8b8:	4282      	cmp	r2, r0
 800b8ba:	ec59 8b17 	vmov	r8, r9, d7
 800b8be:	d8bd      	bhi.n	800b83c <_strtod_l+0x474>
 800b8c0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b8c4:	4282      	cmp	r2, r0
 800b8c6:	bf86      	itte	hi
 800b8c8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800b954 <_strtod_l+0x58c>
 800b8cc:	f04f 38ff 	movhi.w	r8, #4294967295
 800b8d0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	9205      	str	r2, [sp, #20]
 800b8d8:	e076      	b.n	800b9c8 <_strtod_l+0x600>
 800b8da:	f012 0f01 	tst.w	r2, #1
 800b8de:	d004      	beq.n	800b8ea <_strtod_l+0x522>
 800b8e0:	ed97 6b00 	vldr	d6, [r7]
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8ea:	3101      	adds	r1, #1
 800b8ec:	1052      	asrs	r2, r2, #1
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	e7cd      	b.n	800b88e <_strtod_l+0x4c6>
 800b8f2:	d0ef      	beq.n	800b8d4 <_strtod_l+0x50c>
 800b8f4:	4252      	negs	r2, r2
 800b8f6:	f012 000f 	ands.w	r0, r2, #15
 800b8fa:	d00a      	beq.n	800b912 <_strtod_l+0x54a>
 800b8fc:	4911      	ldr	r1, [pc, #68]	; (800b944 <_strtod_l+0x57c>)
 800b8fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b902:	ed91 7b00 	vldr	d7, [r1]
 800b906:	ec49 8b16 	vmov	d6, r8, r9
 800b90a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b90e:	ec59 8b17 	vmov	r8, r9, d7
 800b912:	1112      	asrs	r2, r2, #4
 800b914:	d0de      	beq.n	800b8d4 <_strtod_l+0x50c>
 800b916:	2a1f      	cmp	r2, #31
 800b918:	dd1e      	ble.n	800b958 <_strtod_l+0x590>
 800b91a:	2500      	movs	r5, #0
 800b91c:	462e      	mov	r6, r5
 800b91e:	9507      	str	r5, [sp, #28]
 800b920:	462f      	mov	r7, r5
 800b922:	2322      	movs	r3, #34	; 0x22
 800b924:	f04f 0800 	mov.w	r8, #0
 800b928:	f04f 0900 	mov.w	r9, #0
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	e78f      	b.n	800b850 <_strtod_l+0x488>
 800b930:	0800dd55 	.word	0x0800dd55
 800b934:	0800df7c 	.word	0x0800df7c
 800b938:	0800dd4d 	.word	0x0800dd4d
 800b93c:	0800dd84 	.word	0x0800dd84
 800b940:	0800e10d 	.word	0x0800e10d
 800b944:	0800de90 	.word	0x0800de90
 800b948:	0800de68 	.word	0x0800de68
 800b94c:	7ca00000 	.word	0x7ca00000
 800b950:	7ff00000 	.word	0x7ff00000
 800b954:	7fefffff 	.word	0x7fefffff
 800b958:	f012 0110 	ands.w	r1, r2, #16
 800b95c:	bf18      	it	ne
 800b95e:	216a      	movne	r1, #106	; 0x6a
 800b960:	9105      	str	r1, [sp, #20]
 800b962:	ec49 8b17 	vmov	d7, r8, r9
 800b966:	49be      	ldr	r1, [pc, #760]	; (800bc60 <_strtod_l+0x898>)
 800b968:	2000      	movs	r0, #0
 800b96a:	07d7      	lsls	r7, r2, #31
 800b96c:	d504      	bpl.n	800b978 <_strtod_l+0x5b0>
 800b96e:	ed91 6b00 	vldr	d6, [r1]
 800b972:	2001      	movs	r0, #1
 800b974:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b978:	1052      	asrs	r2, r2, #1
 800b97a:	f101 0108 	add.w	r1, r1, #8
 800b97e:	d1f4      	bne.n	800b96a <_strtod_l+0x5a2>
 800b980:	b108      	cbz	r0, 800b986 <_strtod_l+0x5be>
 800b982:	ec59 8b17 	vmov	r8, r9, d7
 800b986:	9a05      	ldr	r2, [sp, #20]
 800b988:	b1ba      	cbz	r2, 800b9ba <_strtod_l+0x5f2>
 800b98a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b98e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b992:	2a00      	cmp	r2, #0
 800b994:	4648      	mov	r0, r9
 800b996:	dd10      	ble.n	800b9ba <_strtod_l+0x5f2>
 800b998:	2a1f      	cmp	r2, #31
 800b99a:	f340 812c 	ble.w	800bbf6 <_strtod_l+0x82e>
 800b99e:	2a34      	cmp	r2, #52	; 0x34
 800b9a0:	bfde      	ittt	le
 800b9a2:	f04f 32ff 	movle.w	r2, #4294967295
 800b9a6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b9aa:	408a      	lslle	r2, r1
 800b9ac:	f04f 0800 	mov.w	r8, #0
 800b9b0:	bfcc      	ite	gt
 800b9b2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b9b6:	ea02 0900 	andle.w	r9, r2, r0
 800b9ba:	ec49 8b17 	vmov	d7, r8, r9
 800b9be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c6:	d0a8      	beq.n	800b91a <_strtod_l+0x552>
 800b9c8:	9a07      	ldr	r2, [sp, #28]
 800b9ca:	9200      	str	r2, [sp, #0]
 800b9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7ff f8dd 	bl	800ab90 <__s2b>
 800b9d6:	9007      	str	r0, [sp, #28]
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	f43f af2f 	beq.w	800b83c <_strtod_l+0x474>
 800b9de:	9a06      	ldr	r2, [sp, #24]
 800b9e0:	2a00      	cmp	r2, #0
 800b9e2:	ebab 0305 	sub.w	r3, fp, r5
 800b9e6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800bc40 <_strtod_l+0x878>
 800b9ea:	bfa8      	it	ge
 800b9ec:	2300      	movge	r3, #0
 800b9ee:	ed9f ab96 	vldr	d10, [pc, #600]	; 800bc48 <_strtod_l+0x880>
 800b9f2:	ed9f bb97 	vldr	d11, [pc, #604]	; 800bc50 <_strtod_l+0x888>
 800b9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f8:	2500      	movs	r5, #0
 800b9fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800ba00:	462e      	mov	r6, r5
 800ba02:	9b07      	ldr	r3, [sp, #28]
 800ba04:	4620      	mov	r0, r4
 800ba06:	6859      	ldr	r1, [r3, #4]
 800ba08:	f7ff f81a 	bl	800aa40 <_Balloc>
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f43f af18 	beq.w	800b844 <_strtod_l+0x47c>
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	3202      	adds	r2, #2
 800ba1a:	f103 010c 	add.w	r1, r3, #12
 800ba1e:	0092      	lsls	r2, r2, #2
 800ba20:	300c      	adds	r0, #12
 800ba22:	f000 fd4f 	bl	800c4c4 <memcpy>
 800ba26:	ec49 8b10 	vmov	d0, r8, r9
 800ba2a:	aa14      	add	r2, sp, #80	; 0x50
 800ba2c:	a913      	add	r1, sp, #76	; 0x4c
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f7ff fbe2 	bl	800b1f8 <__d2b>
 800ba34:	ec49 8b18 	vmov	d8, r8, r9
 800ba38:	9012      	str	r0, [sp, #72]	; 0x48
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	f43f af02 	beq.w	800b844 <_strtod_l+0x47c>
 800ba40:	2101      	movs	r1, #1
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff f93c 	bl	800acc0 <__i2b>
 800ba48:	4606      	mov	r6, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	f43f aefa 	beq.w	800b844 <_strtod_l+0x47c>
 800ba50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba52:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bfab      	itete	ge
 800ba58:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ba5a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ba5c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ba60:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ba64:	bfac      	ite	ge
 800ba66:	eb03 0b02 	addge.w	fp, r3, r2
 800ba6a:	eba2 0a03 	sublt.w	sl, r2, r3
 800ba6e:	9a05      	ldr	r2, [sp, #20]
 800ba70:	1a9b      	subs	r3, r3, r2
 800ba72:	440b      	add	r3, r1
 800ba74:	4a7b      	ldr	r2, [pc, #492]	; (800bc64 <_strtod_l+0x89c>)
 800ba76:	3b01      	subs	r3, #1
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ba7e:	f280 80cd 	bge.w	800bc1c <_strtod_l+0x854>
 800ba82:	1ad2      	subs	r2, r2, r3
 800ba84:	2a1f      	cmp	r2, #31
 800ba86:	eba1 0102 	sub.w	r1, r1, r2
 800ba8a:	f04f 0001 	mov.w	r0, #1
 800ba8e:	f300 80b9 	bgt.w	800bc04 <_strtod_l+0x83c>
 800ba92:	fa00 f302 	lsl.w	r3, r0, r2
 800ba96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba98:	2300      	movs	r3, #0
 800ba9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9c:	eb0b 0301 	add.w	r3, fp, r1
 800baa0:	9a05      	ldr	r2, [sp, #20]
 800baa2:	459b      	cmp	fp, r3
 800baa4:	448a      	add	sl, r1
 800baa6:	4492      	add	sl, r2
 800baa8:	465a      	mov	r2, fp
 800baaa:	bfa8      	it	ge
 800baac:	461a      	movge	r2, r3
 800baae:	4552      	cmp	r2, sl
 800bab0:	bfa8      	it	ge
 800bab2:	4652      	movge	r2, sl
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	bfc2      	ittt	gt
 800bab8:	1a9b      	subgt	r3, r3, r2
 800baba:	ebaa 0a02 	subgt.w	sl, sl, r2
 800babe:	ebab 0b02 	subgt.w	fp, fp, r2
 800bac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	dd18      	ble.n	800bafa <_strtod_l+0x732>
 800bac8:	4631      	mov	r1, r6
 800baca:	4620      	mov	r0, r4
 800bacc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bace:	f7ff f9b7 	bl	800ae40 <__pow5mult>
 800bad2:	4606      	mov	r6, r0
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f43f aeb5 	beq.w	800b844 <_strtod_l+0x47c>
 800bada:	4601      	mov	r1, r0
 800badc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff f904 	bl	800acec <__multiply>
 800bae4:	900e      	str	r0, [sp, #56]	; 0x38
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f43f aeac 	beq.w	800b844 <_strtod_l+0x47c>
 800baec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800baee:	4620      	mov	r0, r4
 800baf0:	f7fe ffe6 	bl	800aac0 <_Bfree>
 800baf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baf8:	9212      	str	r2, [sp, #72]	; 0x48
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f300 8093 	bgt.w	800bc26 <_strtod_l+0x85e>
 800bb00:	9b06      	ldr	r3, [sp, #24]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dd08      	ble.n	800bb18 <_strtod_l+0x750>
 800bb06:	4639      	mov	r1, r7
 800bb08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f7ff f998 	bl	800ae40 <__pow5mult>
 800bb10:	4607      	mov	r7, r0
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f43f ae96 	beq.w	800b844 <_strtod_l+0x47c>
 800bb18:	f1ba 0f00 	cmp.w	sl, #0
 800bb1c:	dd08      	ble.n	800bb30 <_strtod_l+0x768>
 800bb1e:	4639      	mov	r1, r7
 800bb20:	4652      	mov	r2, sl
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7ff f9e6 	bl	800aef4 <__lshift>
 800bb28:	4607      	mov	r7, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	f43f ae8a 	beq.w	800b844 <_strtod_l+0x47c>
 800bb30:	f1bb 0f00 	cmp.w	fp, #0
 800bb34:	dd08      	ble.n	800bb48 <_strtod_l+0x780>
 800bb36:	4631      	mov	r1, r6
 800bb38:	465a      	mov	r2, fp
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f7ff f9da 	bl	800aef4 <__lshift>
 800bb40:	4606      	mov	r6, r0
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f43f ae7e 	beq.w	800b844 <_strtod_l+0x47c>
 800bb48:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bb4a:	463a      	mov	r2, r7
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7ff fa59 	bl	800b004 <__mdiff>
 800bb52:	4605      	mov	r5, r0
 800bb54:	2800      	cmp	r0, #0
 800bb56:	f43f ae75 	beq.w	800b844 <_strtod_l+0x47c>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800bb60:	60c3      	str	r3, [r0, #12]
 800bb62:	4631      	mov	r1, r6
 800bb64:	f7ff fa32 	bl	800afcc <__mcmp>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	da7f      	bge.n	800bc6c <_strtod_l+0x8a4>
 800bb6c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800bb70:	f040 80a5 	bne.w	800bcbe <_strtod_l+0x8f6>
 800bb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f040 80a0 	bne.w	800bcbe <_strtod_l+0x8f6>
 800bb7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb82:	0d1b      	lsrs	r3, r3, #20
 800bb84:	051b      	lsls	r3, r3, #20
 800bb86:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bb8a:	f240 8098 	bls.w	800bcbe <_strtod_l+0x8f6>
 800bb8e:	696b      	ldr	r3, [r5, #20]
 800bb90:	b91b      	cbnz	r3, 800bb9a <_strtod_l+0x7d2>
 800bb92:	692b      	ldr	r3, [r5, #16]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	f340 8092 	ble.w	800bcbe <_strtod_l+0x8f6>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7ff f9a8 	bl	800aef4 <__lshift>
 800bba4:	4631      	mov	r1, r6
 800bba6:	4605      	mov	r5, r0
 800bba8:	f7ff fa10 	bl	800afcc <__mcmp>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f340 8086 	ble.w	800bcbe <_strtod_l+0x8f6>
 800bbb2:	9905      	ldr	r1, [sp, #20]
 800bbb4:	4a2c      	ldr	r2, [pc, #176]	; (800bc68 <_strtod_l+0x8a0>)
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	2900      	cmp	r1, #0
 800bbba:	f000 809f 	beq.w	800bcfc <_strtod_l+0x934>
 800bbbe:	ea02 0109 	and.w	r1, r2, r9
 800bbc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bbc6:	f300 8099 	bgt.w	800bcfc <_strtod_l+0x934>
 800bbca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bbce:	f77f aea8 	ble.w	800b922 <_strtod_l+0x55a>
 800bbd2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800bc58 <_strtod_l+0x890>
 800bbd6:	ec49 8b16 	vmov	d6, r8, r9
 800bbda:	4b23      	ldr	r3, [pc, #140]	; (800bc68 <_strtod_l+0x8a0>)
 800bbdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bbe0:	ee17 2a90 	vmov	r2, s15
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	ec59 8b17 	vmov	r8, r9, d7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f47f ae34 	bne.w	800b858 <_strtod_l+0x490>
 800bbf0:	2322      	movs	r3, #34	; 0x22
 800bbf2:	6023      	str	r3, [r4, #0]
 800bbf4:	e630      	b.n	800b858 <_strtod_l+0x490>
 800bbf6:	f04f 31ff 	mov.w	r1, #4294967295
 800bbfa:	fa01 f202 	lsl.w	r2, r1, r2
 800bbfe:	ea02 0808 	and.w	r8, r2, r8
 800bc02:	e6da      	b.n	800b9ba <_strtod_l+0x5f2>
 800bc04:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800bc08:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800bc0c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800bc10:	33e2      	adds	r3, #226	; 0xe2
 800bc12:	fa00 f303 	lsl.w	r3, r0, r3
 800bc16:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800bc1a:	e73f      	b.n	800ba9c <_strtod_l+0x6d4>
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bc24:	e73a      	b.n	800ba9c <_strtod_l+0x6d4>
 800bc26:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bc28:	461a      	mov	r2, r3
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7ff f962 	bl	800aef4 <__lshift>
 800bc30:	9012      	str	r0, [sp, #72]	; 0x48
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f47f af64 	bne.w	800bb00 <_strtod_l+0x738>
 800bc38:	e604      	b.n	800b844 <_strtod_l+0x47c>
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w
 800bc40:	94a03595 	.word	0x94a03595
 800bc44:	3fcfffff 	.word	0x3fcfffff
 800bc48:	94a03595 	.word	0x94a03595
 800bc4c:	3fdfffff 	.word	0x3fdfffff
 800bc50:	35afe535 	.word	0x35afe535
 800bc54:	3fe00000 	.word	0x3fe00000
 800bc58:	00000000 	.word	0x00000000
 800bc5c:	39500000 	.word	0x39500000
 800bc60:	0800df90 	.word	0x0800df90
 800bc64:	fffffc02 	.word	0xfffffc02
 800bc68:	7ff00000 	.word	0x7ff00000
 800bc6c:	46cb      	mov	fp, r9
 800bc6e:	d15f      	bne.n	800bd30 <_strtod_l+0x968>
 800bc70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc74:	f1ba 0f00 	cmp.w	sl, #0
 800bc78:	d02a      	beq.n	800bcd0 <_strtod_l+0x908>
 800bc7a:	4aa7      	ldr	r2, [pc, #668]	; (800bf18 <_strtod_l+0xb50>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d12b      	bne.n	800bcd8 <_strtod_l+0x910>
 800bc80:	9b05      	ldr	r3, [sp, #20]
 800bc82:	4642      	mov	r2, r8
 800bc84:	b1fb      	cbz	r3, 800bcc6 <_strtod_l+0x8fe>
 800bc86:	4ba5      	ldr	r3, [pc, #660]	; (800bf1c <_strtod_l+0xb54>)
 800bc88:	ea09 0303 	and.w	r3, r9, r3
 800bc8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc90:	f04f 31ff 	mov.w	r1, #4294967295
 800bc94:	d81a      	bhi.n	800bccc <_strtod_l+0x904>
 800bc96:	0d1b      	lsrs	r3, r3, #20
 800bc98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d119      	bne.n	800bcd8 <_strtod_l+0x910>
 800bca4:	4b9e      	ldr	r3, [pc, #632]	; (800bf20 <_strtod_l+0xb58>)
 800bca6:	459b      	cmp	fp, r3
 800bca8:	d102      	bne.n	800bcb0 <_strtod_l+0x8e8>
 800bcaa:	3201      	adds	r2, #1
 800bcac:	f43f adca 	beq.w	800b844 <_strtod_l+0x47c>
 800bcb0:	4b9a      	ldr	r3, [pc, #616]	; (800bf1c <_strtod_l+0xb54>)
 800bcb2:	ea0b 0303 	and.w	r3, fp, r3
 800bcb6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bcba:	f04f 0800 	mov.w	r8, #0
 800bcbe:	9b05      	ldr	r3, [sp, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d186      	bne.n	800bbd2 <_strtod_l+0x80a>
 800bcc4:	e5c8      	b.n	800b858 <_strtod_l+0x490>
 800bcc6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcca:	e7e9      	b.n	800bca0 <_strtod_l+0x8d8>
 800bccc:	460b      	mov	r3, r1
 800bcce:	e7e7      	b.n	800bca0 <_strtod_l+0x8d8>
 800bcd0:	ea53 0308 	orrs.w	r3, r3, r8
 800bcd4:	f43f af6d 	beq.w	800bbb2 <_strtod_l+0x7ea>
 800bcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcda:	b1cb      	cbz	r3, 800bd10 <_strtod_l+0x948>
 800bcdc:	ea13 0f0b 	tst.w	r3, fp
 800bce0:	d0ed      	beq.n	800bcbe <_strtod_l+0x8f6>
 800bce2:	9a05      	ldr	r2, [sp, #20]
 800bce4:	4640      	mov	r0, r8
 800bce6:	4649      	mov	r1, r9
 800bce8:	f1ba 0f00 	cmp.w	sl, #0
 800bcec:	d014      	beq.n	800bd18 <_strtod_l+0x950>
 800bcee:	f7ff fb51 	bl	800b394 <sulp>
 800bcf2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800bcf6:	ec59 8b17 	vmov	r8, r9, d7
 800bcfa:	e7e0      	b.n	800bcbe <_strtod_l+0x8f6>
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bd06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bd0a:	f04f 38ff 	mov.w	r8, #4294967295
 800bd0e:	e7d6      	b.n	800bcbe <_strtod_l+0x8f6>
 800bd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd12:	ea13 0f08 	tst.w	r3, r8
 800bd16:	e7e3      	b.n	800bce0 <_strtod_l+0x918>
 800bd18:	f7ff fb3c 	bl	800b394 <sulp>
 800bd1c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800bd20:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd28:	ec59 8b10 	vmov	r8, r9, d0
 800bd2c:	d1c7      	bne.n	800bcbe <_strtod_l+0x8f6>
 800bd2e:	e5f8      	b.n	800b922 <_strtod_l+0x55a>
 800bd30:	4631      	mov	r1, r6
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7ff faba 	bl	800b2ac <__ratio>
 800bd38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800bd3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd44:	d85f      	bhi.n	800be06 <_strtod_l+0xa3e>
 800bd46:	f1ba 0f00 	cmp.w	sl, #0
 800bd4a:	d166      	bne.n	800be1a <_strtod_l+0xa52>
 800bd4c:	f1b8 0f00 	cmp.w	r8, #0
 800bd50:	d14d      	bne.n	800bdee <_strtod_l+0xa26>
 800bd52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd56:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d162      	bne.n	800be24 <_strtod_l+0xa5c>
 800bd5e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800bd62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800bd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6a:	d401      	bmi.n	800bd70 <_strtod_l+0x9a8>
 800bd6c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800bd70:	eeb1 cb4d 	vneg.f64	d12, d13
 800bd74:	4869      	ldr	r0, [pc, #420]	; (800bf1c <_strtod_l+0xb54>)
 800bd76:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800bf28 <_strtod_l+0xb60>
 800bd7a:	ea0b 0100 	and.w	r1, fp, r0
 800bd7e:	4561      	cmp	r1, ip
 800bd80:	ec53 2b1c 	vmov	r2, r3, d12
 800bd84:	d17a      	bne.n	800be7c <_strtod_l+0xab4>
 800bd86:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800bd8a:	ec49 8b10 	vmov	d0, r8, r9
 800bd8e:	910a      	str	r1, [sp, #40]	; 0x28
 800bd90:	f7ff f9c2 	bl	800b118 <__ulp>
 800bd94:	ec49 8b1e 	vmov	d14, r8, r9
 800bd98:	4860      	ldr	r0, [pc, #384]	; (800bf1c <_strtod_l+0xb54>)
 800bd9a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800bd9e:	ee1e 3a90 	vmov	r3, s29
 800bda2:	4a60      	ldr	r2, [pc, #384]	; (800bf24 <_strtod_l+0xb5c>)
 800bda4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bda6:	4018      	ands	r0, r3
 800bda8:	4290      	cmp	r0, r2
 800bdaa:	ec59 8b1e 	vmov	r8, r9, d14
 800bdae:	d93c      	bls.n	800be2a <_strtod_l+0xa62>
 800bdb0:	ee18 2a90 	vmov	r2, s17
 800bdb4:	4b5a      	ldr	r3, [pc, #360]	; (800bf20 <_strtod_l+0xb58>)
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d104      	bne.n	800bdc4 <_strtod_l+0x9fc>
 800bdba:	ee18 3a10 	vmov	r3, s16
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	f43f ad40 	beq.w	800b844 <_strtod_l+0x47c>
 800bdc4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800bf20 <_strtod_l+0xb58>
 800bdc8:	f04f 38ff 	mov.w	r8, #4294967295
 800bdcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7fe fe76 	bl	800aac0 <_Bfree>
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7fe fe72 	bl	800aac0 <_Bfree>
 800bddc:	4631      	mov	r1, r6
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7fe fe6e 	bl	800aac0 <_Bfree>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7fe fe6a 	bl	800aac0 <_Bfree>
 800bdec:	e609      	b.n	800ba02 <_strtod_l+0x63a>
 800bdee:	f1b8 0f01 	cmp.w	r8, #1
 800bdf2:	d103      	bne.n	800bdfc <_strtod_l+0xa34>
 800bdf4:	f1b9 0f00 	cmp.w	r9, #0
 800bdf8:	f43f ad93 	beq.w	800b922 <_strtod_l+0x55a>
 800bdfc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800be00:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800be04:	e7b6      	b.n	800bd74 <_strtod_l+0x9ac>
 800be06:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800be0a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800be0e:	f1ba 0f00 	cmp.w	sl, #0
 800be12:	d0ad      	beq.n	800bd70 <_strtod_l+0x9a8>
 800be14:	eeb0 cb4d 	vmov.f64	d12, d13
 800be18:	e7ac      	b.n	800bd74 <_strtod_l+0x9ac>
 800be1a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800be1e:	eeb0 db4c 	vmov.f64	d13, d12
 800be22:	e7a7      	b.n	800bd74 <_strtod_l+0x9ac>
 800be24:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800be28:	e7a4      	b.n	800bd74 <_strtod_l+0x9ac>
 800be2a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800be2e:	9b05      	ldr	r3, [sp, #20]
 800be30:	46cb      	mov	fp, r9
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1ca      	bne.n	800bdcc <_strtod_l+0xa04>
 800be36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be3a:	0d1b      	lsrs	r3, r3, #20
 800be3c:	051b      	lsls	r3, r3, #20
 800be3e:	4299      	cmp	r1, r3
 800be40:	d1c4      	bne.n	800bdcc <_strtod_l+0xa04>
 800be42:	ec51 0b1d 	vmov	r0, r1, d13
 800be46:	f7f4 fc27 	bl	8000698 <__aeabi_d2lz>
 800be4a:	f7f4 fbdf 	bl	800060c <__aeabi_l2d>
 800be4e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800be52:	ec41 0b17 	vmov	d7, r0, r1
 800be56:	ea4b 0b08 	orr.w	fp, fp, r8
 800be5a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800be5e:	ee3d db47 	vsub.f64	d13, d13, d7
 800be62:	d03c      	beq.n	800bede <_strtod_l+0xb16>
 800be64:	eeb4 dbca 	vcmpe.f64	d13, d10
 800be68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6c:	f53f acf4 	bmi.w	800b858 <_strtod_l+0x490>
 800be70:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800be74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be78:	dda8      	ble.n	800bdcc <_strtod_l+0xa04>
 800be7a:	e4ed      	b.n	800b858 <_strtod_l+0x490>
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	b1f0      	cbz	r0, 800bebe <_strtod_l+0xaf6>
 800be80:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800be84:	d81b      	bhi.n	800bebe <_strtod_l+0xaf6>
 800be86:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800bf10 <_strtod_l+0xb48>
 800be8a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800be8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be92:	d811      	bhi.n	800beb8 <_strtod_l+0xaf0>
 800be94:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800be98:	ee1d 3a10 	vmov	r3, s26
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	bf38      	it	cc
 800bea0:	2301      	movcc	r3, #1
 800bea2:	ee0d 3a10 	vmov	s26, r3
 800bea6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800beaa:	f1ba 0f00 	cmp.w	sl, #0
 800beae:	d113      	bne.n	800bed8 <_strtod_l+0xb10>
 800beb0:	eeb1 7b4d 	vneg.f64	d7, d13
 800beb4:	ec53 2b17 	vmov	r2, r3, d7
 800beb8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800bebc:	1a43      	subs	r3, r0, r1
 800bebe:	eeb0 0b48 	vmov.f64	d0, d8
 800bec2:	ec43 2b1c 	vmov	d12, r2, r3
 800bec6:	910a      	str	r1, [sp, #40]	; 0x28
 800bec8:	f7ff f926 	bl	800b118 <__ulp>
 800becc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bece:	eeac 8b00 	vfma.f64	d8, d12, d0
 800bed2:	ec59 8b18 	vmov	r8, r9, d8
 800bed6:	e7aa      	b.n	800be2e <_strtod_l+0xa66>
 800bed8:	eeb0 7b4d 	vmov.f64	d7, d13
 800bedc:	e7ea      	b.n	800beb4 <_strtod_l+0xaec>
 800bede:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800bee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee6:	f57f af71 	bpl.w	800bdcc <_strtod_l+0xa04>
 800beea:	e4b5      	b.n	800b858 <_strtod_l+0x490>
 800beec:	2300      	movs	r3, #0
 800beee:	9308      	str	r3, [sp, #32]
 800bef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	f7ff baa6 	b.w	800b446 <_strtod_l+0x7e>
 800befa:	2a65      	cmp	r2, #101	; 0x65
 800befc:	f43f aba2 	beq.w	800b644 <_strtod_l+0x27c>
 800bf00:	2a45      	cmp	r2, #69	; 0x45
 800bf02:	f43f ab9f 	beq.w	800b644 <_strtod_l+0x27c>
 800bf06:	2101      	movs	r1, #1
 800bf08:	f7ff bbd8 	b.w	800b6bc <_strtod_l+0x2f4>
 800bf0c:	f3af 8000 	nop.w
 800bf10:	ffc00000 	.word	0xffc00000
 800bf14:	41dfffff 	.word	0x41dfffff
 800bf18:	000fffff 	.word	0x000fffff
 800bf1c:	7ff00000 	.word	0x7ff00000
 800bf20:	7fefffff 	.word	0x7fefffff
 800bf24:	7c9fffff 	.word	0x7c9fffff
 800bf28:	7fe00000 	.word	0x7fe00000

0800bf2c <_strtod_r>:
 800bf2c:	4b01      	ldr	r3, [pc, #4]	; (800bf34 <_strtod_r+0x8>)
 800bf2e:	f7ff ba4b 	b.w	800b3c8 <_strtod_l>
 800bf32:	bf00      	nop
 800bf34:	20000078 	.word	0x20000078

0800bf38 <_strtol_l.constprop.0>:
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3e:	d001      	beq.n	800bf44 <_strtol_l.constprop.0+0xc>
 800bf40:	2b24      	cmp	r3, #36	; 0x24
 800bf42:	d906      	bls.n	800bf52 <_strtol_l.constprop.0+0x1a>
 800bf44:	f7fd fe52 	bl	8009bec <__errno>
 800bf48:	2316      	movs	r3, #22
 800bf4a:	6003      	str	r3, [r0, #0]
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c038 <_strtol_l.constprop.0+0x100>
 800bf56:	460d      	mov	r5, r1
 800bf58:	462e      	mov	r6, r5
 800bf5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bf62:	f017 0708 	ands.w	r7, r7, #8
 800bf66:	d1f7      	bne.n	800bf58 <_strtol_l.constprop.0+0x20>
 800bf68:	2c2d      	cmp	r4, #45	; 0x2d
 800bf6a:	d132      	bne.n	800bfd2 <_strtol_l.constprop.0+0x9a>
 800bf6c:	782c      	ldrb	r4, [r5, #0]
 800bf6e:	2701      	movs	r7, #1
 800bf70:	1cb5      	adds	r5, r6, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d05b      	beq.n	800c02e <_strtol_l.constprop.0+0xf6>
 800bf76:	2b10      	cmp	r3, #16
 800bf78:	d109      	bne.n	800bf8e <_strtol_l.constprop.0+0x56>
 800bf7a:	2c30      	cmp	r4, #48	; 0x30
 800bf7c:	d107      	bne.n	800bf8e <_strtol_l.constprop.0+0x56>
 800bf7e:	782c      	ldrb	r4, [r5, #0]
 800bf80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf84:	2c58      	cmp	r4, #88	; 0x58
 800bf86:	d14d      	bne.n	800c024 <_strtol_l.constprop.0+0xec>
 800bf88:	786c      	ldrb	r4, [r5, #1]
 800bf8a:	2310      	movs	r3, #16
 800bf8c:	3502      	adds	r5, #2
 800bf8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf92:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf96:	f04f 0e00 	mov.w	lr, #0
 800bf9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf9e:	4676      	mov	r6, lr
 800bfa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bfa4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bfa8:	f1bc 0f09 	cmp.w	ip, #9
 800bfac:	d816      	bhi.n	800bfdc <_strtol_l.constprop.0+0xa4>
 800bfae:	4664      	mov	r4, ip
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	dd24      	ble.n	800bffe <_strtol_l.constprop.0+0xc6>
 800bfb4:	f1be 3fff 	cmp.w	lr, #4294967295
 800bfb8:	d008      	beq.n	800bfcc <_strtol_l.constprop.0+0x94>
 800bfba:	45b1      	cmp	r9, r6
 800bfbc:	d31c      	bcc.n	800bff8 <_strtol_l.constprop.0+0xc0>
 800bfbe:	d101      	bne.n	800bfc4 <_strtol_l.constprop.0+0x8c>
 800bfc0:	45a2      	cmp	sl, r4
 800bfc2:	db19      	blt.n	800bff8 <_strtol_l.constprop.0+0xc0>
 800bfc4:	fb06 4603 	mla	r6, r6, r3, r4
 800bfc8:	f04f 0e01 	mov.w	lr, #1
 800bfcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfd0:	e7e8      	b.n	800bfa4 <_strtol_l.constprop.0+0x6c>
 800bfd2:	2c2b      	cmp	r4, #43	; 0x2b
 800bfd4:	bf04      	itt	eq
 800bfd6:	782c      	ldrbeq	r4, [r5, #0]
 800bfd8:	1cb5      	addeq	r5, r6, #2
 800bfda:	e7ca      	b.n	800bf72 <_strtol_l.constprop.0+0x3a>
 800bfdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bfe0:	f1bc 0f19 	cmp.w	ip, #25
 800bfe4:	d801      	bhi.n	800bfea <_strtol_l.constprop.0+0xb2>
 800bfe6:	3c37      	subs	r4, #55	; 0x37
 800bfe8:	e7e2      	b.n	800bfb0 <_strtol_l.constprop.0+0x78>
 800bfea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfee:	f1bc 0f19 	cmp.w	ip, #25
 800bff2:	d804      	bhi.n	800bffe <_strtol_l.constprop.0+0xc6>
 800bff4:	3c57      	subs	r4, #87	; 0x57
 800bff6:	e7db      	b.n	800bfb0 <_strtol_l.constprop.0+0x78>
 800bff8:	f04f 3eff 	mov.w	lr, #4294967295
 800bffc:	e7e6      	b.n	800bfcc <_strtol_l.constprop.0+0x94>
 800bffe:	f1be 3fff 	cmp.w	lr, #4294967295
 800c002:	d105      	bne.n	800c010 <_strtol_l.constprop.0+0xd8>
 800c004:	2322      	movs	r3, #34	; 0x22
 800c006:	6003      	str	r3, [r0, #0]
 800c008:	4646      	mov	r6, r8
 800c00a:	b942      	cbnz	r2, 800c01e <_strtol_l.constprop.0+0xe6>
 800c00c:	4630      	mov	r0, r6
 800c00e:	e79e      	b.n	800bf4e <_strtol_l.constprop.0+0x16>
 800c010:	b107      	cbz	r7, 800c014 <_strtol_l.constprop.0+0xdc>
 800c012:	4276      	negs	r6, r6
 800c014:	2a00      	cmp	r2, #0
 800c016:	d0f9      	beq.n	800c00c <_strtol_l.constprop.0+0xd4>
 800c018:	f1be 0f00 	cmp.w	lr, #0
 800c01c:	d000      	beq.n	800c020 <_strtol_l.constprop.0+0xe8>
 800c01e:	1e69      	subs	r1, r5, #1
 800c020:	6011      	str	r1, [r2, #0]
 800c022:	e7f3      	b.n	800c00c <_strtol_l.constprop.0+0xd4>
 800c024:	2430      	movs	r4, #48	; 0x30
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1b1      	bne.n	800bf8e <_strtol_l.constprop.0+0x56>
 800c02a:	2308      	movs	r3, #8
 800c02c:	e7af      	b.n	800bf8e <_strtol_l.constprop.0+0x56>
 800c02e:	2c30      	cmp	r4, #48	; 0x30
 800c030:	d0a5      	beq.n	800bf7e <_strtol_l.constprop.0+0x46>
 800c032:	230a      	movs	r3, #10
 800c034:	e7ab      	b.n	800bf8e <_strtol_l.constprop.0+0x56>
 800c036:	bf00      	nop
 800c038:	0800dfb9 	.word	0x0800dfb9

0800c03c <_strtol_r>:
 800c03c:	f7ff bf7c 	b.w	800bf38 <_strtol_l.constprop.0>

0800c040 <__ssputs_r>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	688e      	ldr	r6, [r1, #8]
 800c046:	461f      	mov	r7, r3
 800c048:	42be      	cmp	r6, r7
 800c04a:	680b      	ldr	r3, [r1, #0]
 800c04c:	4682      	mov	sl, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	4690      	mov	r8, r2
 800c052:	d82c      	bhi.n	800c0ae <__ssputs_r+0x6e>
 800c054:	898a      	ldrh	r2, [r1, #12]
 800c056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c05a:	d026      	beq.n	800c0aa <__ssputs_r+0x6a>
 800c05c:	6965      	ldr	r5, [r4, #20]
 800c05e:	6909      	ldr	r1, [r1, #16]
 800c060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c064:	eba3 0901 	sub.w	r9, r3, r1
 800c068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c06c:	1c7b      	adds	r3, r7, #1
 800c06e:	444b      	add	r3, r9
 800c070:	106d      	asrs	r5, r5, #1
 800c072:	429d      	cmp	r5, r3
 800c074:	bf38      	it	cc
 800c076:	461d      	movcc	r5, r3
 800c078:	0553      	lsls	r3, r2, #21
 800c07a:	d527      	bpl.n	800c0cc <__ssputs_r+0x8c>
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7fe fc53 	bl	800a928 <_malloc_r>
 800c082:	4606      	mov	r6, r0
 800c084:	b360      	cbz	r0, 800c0e0 <__ssputs_r+0xa0>
 800c086:	6921      	ldr	r1, [r4, #16]
 800c088:	464a      	mov	r2, r9
 800c08a:	f000 fa1b 	bl	800c4c4 <memcpy>
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	6126      	str	r6, [r4, #16]
 800c09c:	6165      	str	r5, [r4, #20]
 800c09e:	444e      	add	r6, r9
 800c0a0:	eba5 0509 	sub.w	r5, r5, r9
 800c0a4:	6026      	str	r6, [r4, #0]
 800c0a6:	60a5      	str	r5, [r4, #8]
 800c0a8:	463e      	mov	r6, r7
 800c0aa:	42be      	cmp	r6, r7
 800c0ac:	d900      	bls.n	800c0b0 <__ssputs_r+0x70>
 800c0ae:	463e      	mov	r6, r7
 800c0b0:	6820      	ldr	r0, [r4, #0]
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	f000 f9c9 	bl	800c44c <memmove>
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	1b9b      	subs	r3, r3, r6
 800c0be:	60a3      	str	r3, [r4, #8]
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	4433      	add	r3, r6
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	f000 fdac 	bl	800cc2a <_realloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d1e0      	bne.n	800c09a <__ssputs_r+0x5a>
 800c0d8:	6921      	ldr	r1, [r4, #16]
 800c0da:	4650      	mov	r0, sl
 800c0dc:	f7fe fbb0 	bl	800a840 <_free_r>
 800c0e0:	230c      	movs	r3, #12
 800c0e2:	f8ca 3000 	str.w	r3, [sl]
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f2:	e7e9      	b.n	800c0c8 <__ssputs_r+0x88>

0800c0f4 <_svfiprintf_r>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	4698      	mov	r8, r3
 800c0fa:	898b      	ldrh	r3, [r1, #12]
 800c0fc:	061b      	lsls	r3, r3, #24
 800c0fe:	b09d      	sub	sp, #116	; 0x74
 800c100:	4607      	mov	r7, r0
 800c102:	460d      	mov	r5, r1
 800c104:	4614      	mov	r4, r2
 800c106:	d50e      	bpl.n	800c126 <_svfiprintf_r+0x32>
 800c108:	690b      	ldr	r3, [r1, #16]
 800c10a:	b963      	cbnz	r3, 800c126 <_svfiprintf_r+0x32>
 800c10c:	2140      	movs	r1, #64	; 0x40
 800c10e:	f7fe fc0b 	bl	800a928 <_malloc_r>
 800c112:	6028      	str	r0, [r5, #0]
 800c114:	6128      	str	r0, [r5, #16]
 800c116:	b920      	cbnz	r0, 800c122 <_svfiprintf_r+0x2e>
 800c118:	230c      	movs	r3, #12
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e0d0      	b.n	800c2c4 <_svfiprintf_r+0x1d0>
 800c122:	2340      	movs	r3, #64	; 0x40
 800c124:	616b      	str	r3, [r5, #20]
 800c126:	2300      	movs	r3, #0
 800c128:	9309      	str	r3, [sp, #36]	; 0x24
 800c12a:	2320      	movs	r3, #32
 800c12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c130:	f8cd 800c 	str.w	r8, [sp, #12]
 800c134:	2330      	movs	r3, #48	; 0x30
 800c136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2dc <_svfiprintf_r+0x1e8>
 800c13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c13e:	f04f 0901 	mov.w	r9, #1
 800c142:	4623      	mov	r3, r4
 800c144:	469a      	mov	sl, r3
 800c146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c14a:	b10a      	cbz	r2, 800c150 <_svfiprintf_r+0x5c>
 800c14c:	2a25      	cmp	r2, #37	; 0x25
 800c14e:	d1f9      	bne.n	800c144 <_svfiprintf_r+0x50>
 800c150:	ebba 0b04 	subs.w	fp, sl, r4
 800c154:	d00b      	beq.n	800c16e <_svfiprintf_r+0x7a>
 800c156:	465b      	mov	r3, fp
 800c158:	4622      	mov	r2, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7ff ff6f 	bl	800c040 <__ssputs_r>
 800c162:	3001      	adds	r0, #1
 800c164:	f000 80a9 	beq.w	800c2ba <_svfiprintf_r+0x1c6>
 800c168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c16a:	445a      	add	r2, fp
 800c16c:	9209      	str	r2, [sp, #36]	; 0x24
 800c16e:	f89a 3000 	ldrb.w	r3, [sl]
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 80a1 	beq.w	800c2ba <_svfiprintf_r+0x1c6>
 800c178:	2300      	movs	r3, #0
 800c17a:	f04f 32ff 	mov.w	r2, #4294967295
 800c17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c182:	f10a 0a01 	add.w	sl, sl, #1
 800c186:	9304      	str	r3, [sp, #16]
 800c188:	9307      	str	r3, [sp, #28]
 800c18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c18e:	931a      	str	r3, [sp, #104]	; 0x68
 800c190:	4654      	mov	r4, sl
 800c192:	2205      	movs	r2, #5
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	4850      	ldr	r0, [pc, #320]	; (800c2dc <_svfiprintf_r+0x1e8>)
 800c19a:	f7f4 f851 	bl	8000240 <memchr>
 800c19e:	9a04      	ldr	r2, [sp, #16]
 800c1a0:	b9d8      	cbnz	r0, 800c1da <_svfiprintf_r+0xe6>
 800c1a2:	06d0      	lsls	r0, r2, #27
 800c1a4:	bf44      	itt	mi
 800c1a6:	2320      	movmi	r3, #32
 800c1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ac:	0711      	lsls	r1, r2, #28
 800c1ae:	bf44      	itt	mi
 800c1b0:	232b      	movmi	r3, #43	; 0x2b
 800c1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c1bc:	d015      	beq.n	800c1ea <_svfiprintf_r+0xf6>
 800c1be:	9a07      	ldr	r2, [sp, #28]
 800c1c0:	4654      	mov	r4, sl
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	f04f 0c0a 	mov.w	ip, #10
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ce:	3b30      	subs	r3, #48	; 0x30
 800c1d0:	2b09      	cmp	r3, #9
 800c1d2:	d94d      	bls.n	800c270 <_svfiprintf_r+0x17c>
 800c1d4:	b1b0      	cbz	r0, 800c204 <_svfiprintf_r+0x110>
 800c1d6:	9207      	str	r2, [sp, #28]
 800c1d8:	e014      	b.n	800c204 <_svfiprintf_r+0x110>
 800c1da:	eba0 0308 	sub.w	r3, r0, r8
 800c1de:	fa09 f303 	lsl.w	r3, r9, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	46a2      	mov	sl, r4
 800c1e8:	e7d2      	b.n	800c190 <_svfiprintf_r+0x9c>
 800c1ea:	9b03      	ldr	r3, [sp, #12]
 800c1ec:	1d19      	adds	r1, r3, #4
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	9103      	str	r1, [sp, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bfbb      	ittet	lt
 800c1f6:	425b      	neglt	r3, r3
 800c1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1fc:	9307      	strge	r3, [sp, #28]
 800c1fe:	9307      	strlt	r3, [sp, #28]
 800c200:	bfb8      	it	lt
 800c202:	9204      	strlt	r2, [sp, #16]
 800c204:	7823      	ldrb	r3, [r4, #0]
 800c206:	2b2e      	cmp	r3, #46	; 0x2e
 800c208:	d10c      	bne.n	800c224 <_svfiprintf_r+0x130>
 800c20a:	7863      	ldrb	r3, [r4, #1]
 800c20c:	2b2a      	cmp	r3, #42	; 0x2a
 800c20e:	d134      	bne.n	800c27a <_svfiprintf_r+0x186>
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	1d1a      	adds	r2, r3, #4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	9203      	str	r2, [sp, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfb8      	it	lt
 800c21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c220:	3402      	adds	r4, #2
 800c222:	9305      	str	r3, [sp, #20]
 800c224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2ec <_svfiprintf_r+0x1f8>
 800c228:	7821      	ldrb	r1, [r4, #0]
 800c22a:	2203      	movs	r2, #3
 800c22c:	4650      	mov	r0, sl
 800c22e:	f7f4 f807 	bl	8000240 <memchr>
 800c232:	b138      	cbz	r0, 800c244 <_svfiprintf_r+0x150>
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	eba0 000a 	sub.w	r0, r0, sl
 800c23a:	2240      	movs	r2, #64	; 0x40
 800c23c:	4082      	lsls	r2, r0
 800c23e:	4313      	orrs	r3, r2
 800c240:	3401      	adds	r4, #1
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c248:	4825      	ldr	r0, [pc, #148]	; (800c2e0 <_svfiprintf_r+0x1ec>)
 800c24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c24e:	2206      	movs	r2, #6
 800c250:	f7f3 fff6 	bl	8000240 <memchr>
 800c254:	2800      	cmp	r0, #0
 800c256:	d038      	beq.n	800c2ca <_svfiprintf_r+0x1d6>
 800c258:	4b22      	ldr	r3, [pc, #136]	; (800c2e4 <_svfiprintf_r+0x1f0>)
 800c25a:	bb1b      	cbnz	r3, 800c2a4 <_svfiprintf_r+0x1b0>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	3307      	adds	r3, #7
 800c260:	f023 0307 	bic.w	r3, r3, #7
 800c264:	3308      	adds	r3, #8
 800c266:	9303      	str	r3, [sp, #12]
 800c268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26a:	4433      	add	r3, r6
 800c26c:	9309      	str	r3, [sp, #36]	; 0x24
 800c26e:	e768      	b.n	800c142 <_svfiprintf_r+0x4e>
 800c270:	fb0c 3202 	mla	r2, ip, r2, r3
 800c274:	460c      	mov	r4, r1
 800c276:	2001      	movs	r0, #1
 800c278:	e7a6      	b.n	800c1c8 <_svfiprintf_r+0xd4>
 800c27a:	2300      	movs	r3, #0
 800c27c:	3401      	adds	r4, #1
 800c27e:	9305      	str	r3, [sp, #20]
 800c280:	4619      	mov	r1, r3
 800c282:	f04f 0c0a 	mov.w	ip, #10
 800c286:	4620      	mov	r0, r4
 800c288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c28c:	3a30      	subs	r2, #48	; 0x30
 800c28e:	2a09      	cmp	r2, #9
 800c290:	d903      	bls.n	800c29a <_svfiprintf_r+0x1a6>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0c6      	beq.n	800c224 <_svfiprintf_r+0x130>
 800c296:	9105      	str	r1, [sp, #20]
 800c298:	e7c4      	b.n	800c224 <_svfiprintf_r+0x130>
 800c29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c29e:	4604      	mov	r4, r0
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e7f0      	b.n	800c286 <_svfiprintf_r+0x192>
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <_svfiprintf_r+0x1f4>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f7fc fd76 	bl	8008da0 <_printf_float>
 800c2b4:	1c42      	adds	r2, r0, #1
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	d1d6      	bne.n	800c268 <_svfiprintf_r+0x174>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	065b      	lsls	r3, r3, #25
 800c2be:	f53f af2d 	bmi.w	800c11c <_svfiprintf_r+0x28>
 800c2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2c4:	b01d      	add	sp, #116	; 0x74
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <_svfiprintf_r+0x1f4>)
 800c2d2:	a904      	add	r1, sp, #16
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f7fc ffeb 	bl	80092b0 <_printf_i>
 800c2da:	e7eb      	b.n	800c2b4 <_svfiprintf_r+0x1c0>
 800c2dc:	0800e0b9 	.word	0x0800e0b9
 800c2e0:	0800e0c3 	.word	0x0800e0c3
 800c2e4:	08008da1 	.word	0x08008da1
 800c2e8:	0800c041 	.word	0x0800c041
 800c2ec:	0800e0bf 	.word	0x0800e0bf

0800c2f0 <__sflush_r>:
 800c2f0:	898a      	ldrh	r2, [r1, #12]
 800c2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	0710      	lsls	r0, r2, #28
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	d458      	bmi.n	800c3b0 <__sflush_r+0xc0>
 800c2fe:	684b      	ldr	r3, [r1, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	dc05      	bgt.n	800c310 <__sflush_r+0x20>
 800c304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c306:	2b00      	cmp	r3, #0
 800c308:	dc02      	bgt.n	800c310 <__sflush_r+0x20>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c312:	2e00      	cmp	r6, #0
 800c314:	d0f9      	beq.n	800c30a <__sflush_r+0x1a>
 800c316:	2300      	movs	r3, #0
 800c318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c31c:	682f      	ldr	r7, [r5, #0]
 800c31e:	6a21      	ldr	r1, [r4, #32]
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	d032      	beq.n	800c38a <__sflush_r+0x9a>
 800c324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	075a      	lsls	r2, r3, #29
 800c32a:	d505      	bpl.n	800c338 <__sflush_r+0x48>
 800c32c:	6863      	ldr	r3, [r4, #4]
 800c32e:	1ac0      	subs	r0, r0, r3
 800c330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c332:	b10b      	cbz	r3, 800c338 <__sflush_r+0x48>
 800c334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c336:	1ac0      	subs	r0, r0, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	4602      	mov	r2, r0
 800c33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c33e:	6a21      	ldr	r1, [r4, #32]
 800c340:	4628      	mov	r0, r5
 800c342:	47b0      	blx	r6
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	d106      	bne.n	800c358 <__sflush_r+0x68>
 800c34a:	6829      	ldr	r1, [r5, #0]
 800c34c:	291d      	cmp	r1, #29
 800c34e:	d82b      	bhi.n	800c3a8 <__sflush_r+0xb8>
 800c350:	4a29      	ldr	r2, [pc, #164]	; (800c3f8 <__sflush_r+0x108>)
 800c352:	410a      	asrs	r2, r1
 800c354:	07d6      	lsls	r6, r2, #31
 800c356:	d427      	bmi.n	800c3a8 <__sflush_r+0xb8>
 800c358:	2200      	movs	r2, #0
 800c35a:	6062      	str	r2, [r4, #4]
 800c35c:	04d9      	lsls	r1, r3, #19
 800c35e:	6922      	ldr	r2, [r4, #16]
 800c360:	6022      	str	r2, [r4, #0]
 800c362:	d504      	bpl.n	800c36e <__sflush_r+0x7e>
 800c364:	1c42      	adds	r2, r0, #1
 800c366:	d101      	bne.n	800c36c <__sflush_r+0x7c>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b903      	cbnz	r3, 800c36e <__sflush_r+0x7e>
 800c36c:	6560      	str	r0, [r4, #84]	; 0x54
 800c36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c370:	602f      	str	r7, [r5, #0]
 800c372:	2900      	cmp	r1, #0
 800c374:	d0c9      	beq.n	800c30a <__sflush_r+0x1a>
 800c376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c37a:	4299      	cmp	r1, r3
 800c37c:	d002      	beq.n	800c384 <__sflush_r+0x94>
 800c37e:	4628      	mov	r0, r5
 800c380:	f7fe fa5e 	bl	800a840 <_free_r>
 800c384:	2000      	movs	r0, #0
 800c386:	6360      	str	r0, [r4, #52]	; 0x34
 800c388:	e7c0      	b.n	800c30c <__sflush_r+0x1c>
 800c38a:	2301      	movs	r3, #1
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b0      	blx	r6
 800c390:	1c41      	adds	r1, r0, #1
 800c392:	d1c8      	bne.n	800c326 <__sflush_r+0x36>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0c5      	beq.n	800c326 <__sflush_r+0x36>
 800c39a:	2b1d      	cmp	r3, #29
 800c39c:	d001      	beq.n	800c3a2 <__sflush_r+0xb2>
 800c39e:	2b16      	cmp	r3, #22
 800c3a0:	d101      	bne.n	800c3a6 <__sflush_r+0xb6>
 800c3a2:	602f      	str	r7, [r5, #0]
 800c3a4:	e7b1      	b.n	800c30a <__sflush_r+0x1a>
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	e7ad      	b.n	800c30c <__sflush_r+0x1c>
 800c3b0:	690f      	ldr	r7, [r1, #16]
 800c3b2:	2f00      	cmp	r7, #0
 800c3b4:	d0a9      	beq.n	800c30a <__sflush_r+0x1a>
 800c3b6:	0793      	lsls	r3, r2, #30
 800c3b8:	680e      	ldr	r6, [r1, #0]
 800c3ba:	bf08      	it	eq
 800c3bc:	694b      	ldreq	r3, [r1, #20]
 800c3be:	600f      	str	r7, [r1, #0]
 800c3c0:	bf18      	it	ne
 800c3c2:	2300      	movne	r3, #0
 800c3c4:	eba6 0807 	sub.w	r8, r6, r7
 800c3c8:	608b      	str	r3, [r1, #8]
 800c3ca:	f1b8 0f00 	cmp.w	r8, #0
 800c3ce:	dd9c      	ble.n	800c30a <__sflush_r+0x1a>
 800c3d0:	6a21      	ldr	r1, [r4, #32]
 800c3d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3d4:	4643      	mov	r3, r8
 800c3d6:	463a      	mov	r2, r7
 800c3d8:	4628      	mov	r0, r5
 800c3da:	47b0      	blx	r6
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	dc06      	bgt.n	800c3ee <__sflush_r+0xfe>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	e78e      	b.n	800c30c <__sflush_r+0x1c>
 800c3ee:	4407      	add	r7, r0
 800c3f0:	eba8 0800 	sub.w	r8, r8, r0
 800c3f4:	e7e9      	b.n	800c3ca <__sflush_r+0xda>
 800c3f6:	bf00      	nop
 800c3f8:	dfbffffe 	.word	0xdfbffffe

0800c3fc <_fflush_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	690b      	ldr	r3, [r1, #16]
 800c400:	4605      	mov	r5, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b913      	cbnz	r3, 800c40c <_fflush_r+0x10>
 800c406:	2500      	movs	r5, #0
 800c408:	4628      	mov	r0, r5
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	b118      	cbz	r0, 800c416 <_fflush_r+0x1a>
 800c40e:	6a03      	ldr	r3, [r0, #32]
 800c410:	b90b      	cbnz	r3, 800c416 <_fflush_r+0x1a>
 800c412:	f7fd faff 	bl	8009a14 <__sinit>
 800c416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0f3      	beq.n	800c406 <_fflush_r+0xa>
 800c41e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c420:	07d0      	lsls	r0, r2, #31
 800c422:	d404      	bmi.n	800c42e <_fflush_r+0x32>
 800c424:	0599      	lsls	r1, r3, #22
 800c426:	d402      	bmi.n	800c42e <_fflush_r+0x32>
 800c428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c42a:	f7fd fc0a 	bl	8009c42 <__retarget_lock_acquire_recursive>
 800c42e:	4628      	mov	r0, r5
 800c430:	4621      	mov	r1, r4
 800c432:	f7ff ff5d 	bl	800c2f0 <__sflush_r>
 800c436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c438:	07da      	lsls	r2, r3, #31
 800c43a:	4605      	mov	r5, r0
 800c43c:	d4e4      	bmi.n	800c408 <_fflush_r+0xc>
 800c43e:	89a3      	ldrh	r3, [r4, #12]
 800c440:	059b      	lsls	r3, r3, #22
 800c442:	d4e1      	bmi.n	800c408 <_fflush_r+0xc>
 800c444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c446:	f7fd fbfd 	bl	8009c44 <__retarget_lock_release_recursive>
 800c44a:	e7dd      	b.n	800c408 <_fflush_r+0xc>

0800c44c <memmove>:
 800c44c:	4288      	cmp	r0, r1
 800c44e:	b510      	push	{r4, lr}
 800c450:	eb01 0402 	add.w	r4, r1, r2
 800c454:	d902      	bls.n	800c45c <memmove+0x10>
 800c456:	4284      	cmp	r4, r0
 800c458:	4623      	mov	r3, r4
 800c45a:	d807      	bhi.n	800c46c <memmove+0x20>
 800c45c:	1e43      	subs	r3, r0, #1
 800c45e:	42a1      	cmp	r1, r4
 800c460:	d008      	beq.n	800c474 <memmove+0x28>
 800c462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c46a:	e7f8      	b.n	800c45e <memmove+0x12>
 800c46c:	4402      	add	r2, r0
 800c46e:	4601      	mov	r1, r0
 800c470:	428a      	cmp	r2, r1
 800c472:	d100      	bne.n	800c476 <memmove+0x2a>
 800c474:	bd10      	pop	{r4, pc}
 800c476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c47e:	e7f7      	b.n	800c470 <memmove+0x24>

0800c480 <strncmp>:
 800c480:	b510      	push	{r4, lr}
 800c482:	b16a      	cbz	r2, 800c4a0 <strncmp+0x20>
 800c484:	3901      	subs	r1, #1
 800c486:	1884      	adds	r4, r0, r2
 800c488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c48c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c490:	429a      	cmp	r2, r3
 800c492:	d103      	bne.n	800c49c <strncmp+0x1c>
 800c494:	42a0      	cmp	r0, r4
 800c496:	d001      	beq.n	800c49c <strncmp+0x1c>
 800c498:	2a00      	cmp	r2, #0
 800c49a:	d1f5      	bne.n	800c488 <strncmp+0x8>
 800c49c:	1ad0      	subs	r0, r2, r3
 800c49e:	bd10      	pop	{r4, pc}
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	e7fc      	b.n	800c49e <strncmp+0x1e>

0800c4a4 <_sbrk_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d06      	ldr	r5, [pc, #24]	; (800c4c0 <_sbrk_r+0x1c>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f5 fdc6 	bl	8002040 <_sbrk>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_sbrk_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_sbrk_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20000668 	.word	0x20000668

0800c4c4 <memcpy>:
 800c4c4:	440a      	add	r2, r1
 800c4c6:	4291      	cmp	r1, r2
 800c4c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4cc:	d100      	bne.n	800c4d0 <memcpy+0xc>
 800c4ce:	4770      	bx	lr
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4da:	4291      	cmp	r1, r2
 800c4dc:	d1f9      	bne.n	800c4d2 <memcpy+0xe>
 800c4de:	bd10      	pop	{r4, pc}

0800c4e0 <nan>:
 800c4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c4e8 <nan+0x8>
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	7ff80000 	.word	0x7ff80000

0800c4f0 <__assert_func>:
 800c4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4f2:	4614      	mov	r4, r2
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	4b09      	ldr	r3, [pc, #36]	; (800c51c <__assert_func+0x2c>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	68d8      	ldr	r0, [r3, #12]
 800c4fe:	b14c      	cbz	r4, 800c514 <__assert_func+0x24>
 800c500:	4b07      	ldr	r3, [pc, #28]	; (800c520 <__assert_func+0x30>)
 800c502:	9100      	str	r1, [sp, #0]
 800c504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c508:	4906      	ldr	r1, [pc, #24]	; (800c524 <__assert_func+0x34>)
 800c50a:	462b      	mov	r3, r5
 800c50c:	f000 fbca 	bl	800cca4 <fiprintf>
 800c510:	f000 fbda 	bl	800ccc8 <abort>
 800c514:	4b04      	ldr	r3, [pc, #16]	; (800c528 <__assert_func+0x38>)
 800c516:	461c      	mov	r4, r3
 800c518:	e7f3      	b.n	800c502 <__assert_func+0x12>
 800c51a:	bf00      	nop
 800c51c:	20000074 	.word	0x20000074
 800c520:	0800e0d2 	.word	0x0800e0d2
 800c524:	0800e0df 	.word	0x0800e0df
 800c528:	0800e10d 	.word	0x0800e10d

0800c52c <_calloc_r>:
 800c52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c52e:	fba1 2402 	umull	r2, r4, r1, r2
 800c532:	b94c      	cbnz	r4, 800c548 <_calloc_r+0x1c>
 800c534:	4611      	mov	r1, r2
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	f7fe f9f6 	bl	800a928 <_malloc_r>
 800c53c:	9a01      	ldr	r2, [sp, #4]
 800c53e:	4605      	mov	r5, r0
 800c540:	b930      	cbnz	r0, 800c550 <_calloc_r+0x24>
 800c542:	4628      	mov	r0, r5
 800c544:	b003      	add	sp, #12
 800c546:	bd30      	pop	{r4, r5, pc}
 800c548:	220c      	movs	r2, #12
 800c54a:	6002      	str	r2, [r0, #0]
 800c54c:	2500      	movs	r5, #0
 800c54e:	e7f8      	b.n	800c542 <_calloc_r+0x16>
 800c550:	4621      	mov	r1, r4
 800c552:	f7fd faf8 	bl	8009b46 <memset>
 800c556:	e7f4      	b.n	800c542 <_calloc_r+0x16>

0800c558 <rshift>:
 800c558:	6903      	ldr	r3, [r0, #16]
 800c55a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c55e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c562:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c566:	f100 0414 	add.w	r4, r0, #20
 800c56a:	dd45      	ble.n	800c5f8 <rshift+0xa0>
 800c56c:	f011 011f 	ands.w	r1, r1, #31
 800c570:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c574:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c578:	d10c      	bne.n	800c594 <rshift+0x3c>
 800c57a:	f100 0710 	add.w	r7, r0, #16
 800c57e:	4629      	mov	r1, r5
 800c580:	42b1      	cmp	r1, r6
 800c582:	d334      	bcc.n	800c5ee <rshift+0x96>
 800c584:	1a9b      	subs	r3, r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	1eea      	subs	r2, r5, #3
 800c58a:	4296      	cmp	r6, r2
 800c58c:	bf38      	it	cc
 800c58e:	2300      	movcc	r3, #0
 800c590:	4423      	add	r3, r4
 800c592:	e015      	b.n	800c5c0 <rshift+0x68>
 800c594:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c598:	f1c1 0820 	rsb	r8, r1, #32
 800c59c:	40cf      	lsrs	r7, r1
 800c59e:	f105 0e04 	add.w	lr, r5, #4
 800c5a2:	46a1      	mov	r9, r4
 800c5a4:	4576      	cmp	r6, lr
 800c5a6:	46f4      	mov	ip, lr
 800c5a8:	d815      	bhi.n	800c5d6 <rshift+0x7e>
 800c5aa:	1a9a      	subs	r2, r3, r2
 800c5ac:	0092      	lsls	r2, r2, #2
 800c5ae:	3a04      	subs	r2, #4
 800c5b0:	3501      	adds	r5, #1
 800c5b2:	42ae      	cmp	r6, r5
 800c5b4:	bf38      	it	cc
 800c5b6:	2200      	movcc	r2, #0
 800c5b8:	18a3      	adds	r3, r4, r2
 800c5ba:	50a7      	str	r7, [r4, r2]
 800c5bc:	b107      	cbz	r7, 800c5c0 <rshift+0x68>
 800c5be:	3304      	adds	r3, #4
 800c5c0:	1b1a      	subs	r2, r3, r4
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5c8:	bf08      	it	eq
 800c5ca:	2300      	moveq	r3, #0
 800c5cc:	6102      	str	r2, [r0, #16]
 800c5ce:	bf08      	it	eq
 800c5d0:	6143      	streq	r3, [r0, #20]
 800c5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d6:	f8dc c000 	ldr.w	ip, [ip]
 800c5da:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5de:	ea4c 0707 	orr.w	r7, ip, r7
 800c5e2:	f849 7b04 	str.w	r7, [r9], #4
 800c5e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5ea:	40cf      	lsrs	r7, r1
 800c5ec:	e7da      	b.n	800c5a4 <rshift+0x4c>
 800c5ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5f6:	e7c3      	b.n	800c580 <rshift+0x28>
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	e7e1      	b.n	800c5c0 <rshift+0x68>

0800c5fc <__hexdig_fun>:
 800c5fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c600:	2b09      	cmp	r3, #9
 800c602:	d802      	bhi.n	800c60a <__hexdig_fun+0xe>
 800c604:	3820      	subs	r0, #32
 800c606:	b2c0      	uxtb	r0, r0
 800c608:	4770      	bx	lr
 800c60a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c60e:	2b05      	cmp	r3, #5
 800c610:	d801      	bhi.n	800c616 <__hexdig_fun+0x1a>
 800c612:	3847      	subs	r0, #71	; 0x47
 800c614:	e7f7      	b.n	800c606 <__hexdig_fun+0xa>
 800c616:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c61a:	2b05      	cmp	r3, #5
 800c61c:	d801      	bhi.n	800c622 <__hexdig_fun+0x26>
 800c61e:	3827      	subs	r0, #39	; 0x27
 800c620:	e7f1      	b.n	800c606 <__hexdig_fun+0xa>
 800c622:	2000      	movs	r0, #0
 800c624:	4770      	bx	lr
	...

0800c628 <__gethex>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	4617      	mov	r7, r2
 800c62e:	680a      	ldr	r2, [r1, #0]
 800c630:	b085      	sub	sp, #20
 800c632:	f102 0b02 	add.w	fp, r2, #2
 800c636:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c63a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c63e:	4681      	mov	r9, r0
 800c640:	468a      	mov	sl, r1
 800c642:	9302      	str	r3, [sp, #8]
 800c644:	32fe      	adds	r2, #254	; 0xfe
 800c646:	eb02 030b 	add.w	r3, r2, fp
 800c64a:	46d8      	mov	r8, fp
 800c64c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	2830      	cmp	r0, #48	; 0x30
 800c654:	d0f7      	beq.n	800c646 <__gethex+0x1e>
 800c656:	f7ff ffd1 	bl	800c5fc <__hexdig_fun>
 800c65a:	4604      	mov	r4, r0
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d138      	bne.n	800c6d2 <__gethex+0xaa>
 800c660:	49a7      	ldr	r1, [pc, #668]	; (800c900 <__gethex+0x2d8>)
 800c662:	2201      	movs	r2, #1
 800c664:	4640      	mov	r0, r8
 800c666:	f7ff ff0b 	bl	800c480 <strncmp>
 800c66a:	4606      	mov	r6, r0
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d169      	bne.n	800c744 <__gethex+0x11c>
 800c670:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c674:	465d      	mov	r5, fp
 800c676:	f7ff ffc1 	bl	800c5fc <__hexdig_fun>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d064      	beq.n	800c748 <__gethex+0x120>
 800c67e:	465a      	mov	r2, fp
 800c680:	7810      	ldrb	r0, [r2, #0]
 800c682:	2830      	cmp	r0, #48	; 0x30
 800c684:	4690      	mov	r8, r2
 800c686:	f102 0201 	add.w	r2, r2, #1
 800c68a:	d0f9      	beq.n	800c680 <__gethex+0x58>
 800c68c:	f7ff ffb6 	bl	800c5fc <__hexdig_fun>
 800c690:	2301      	movs	r3, #1
 800c692:	fab0 f480 	clz	r4, r0
 800c696:	0964      	lsrs	r4, r4, #5
 800c698:	465e      	mov	r6, fp
 800c69a:	9301      	str	r3, [sp, #4]
 800c69c:	4642      	mov	r2, r8
 800c69e:	4615      	mov	r5, r2
 800c6a0:	3201      	adds	r2, #1
 800c6a2:	7828      	ldrb	r0, [r5, #0]
 800c6a4:	f7ff ffaa 	bl	800c5fc <__hexdig_fun>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1f8      	bne.n	800c69e <__gethex+0x76>
 800c6ac:	4994      	ldr	r1, [pc, #592]	; (800c900 <__gethex+0x2d8>)
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	f7ff fee5 	bl	800c480 <strncmp>
 800c6b6:	b978      	cbnz	r0, 800c6d8 <__gethex+0xb0>
 800c6b8:	b946      	cbnz	r6, 800c6cc <__gethex+0xa4>
 800c6ba:	1c6e      	adds	r6, r5, #1
 800c6bc:	4632      	mov	r2, r6
 800c6be:	4615      	mov	r5, r2
 800c6c0:	3201      	adds	r2, #1
 800c6c2:	7828      	ldrb	r0, [r5, #0]
 800c6c4:	f7ff ff9a 	bl	800c5fc <__hexdig_fun>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d1f8      	bne.n	800c6be <__gethex+0x96>
 800c6cc:	1b73      	subs	r3, r6, r5
 800c6ce:	009e      	lsls	r6, r3, #2
 800c6d0:	e004      	b.n	800c6dc <__gethex+0xb4>
 800c6d2:	2400      	movs	r4, #0
 800c6d4:	4626      	mov	r6, r4
 800c6d6:	e7e1      	b.n	800c69c <__gethex+0x74>
 800c6d8:	2e00      	cmp	r6, #0
 800c6da:	d1f7      	bne.n	800c6cc <__gethex+0xa4>
 800c6dc:	782b      	ldrb	r3, [r5, #0]
 800c6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6e2:	2b50      	cmp	r3, #80	; 0x50
 800c6e4:	d13d      	bne.n	800c762 <__gethex+0x13a>
 800c6e6:	786b      	ldrb	r3, [r5, #1]
 800c6e8:	2b2b      	cmp	r3, #43	; 0x2b
 800c6ea:	d02f      	beq.n	800c74c <__gethex+0x124>
 800c6ec:	2b2d      	cmp	r3, #45	; 0x2d
 800c6ee:	d031      	beq.n	800c754 <__gethex+0x12c>
 800c6f0:	1c69      	adds	r1, r5, #1
 800c6f2:	f04f 0b00 	mov.w	fp, #0
 800c6f6:	7808      	ldrb	r0, [r1, #0]
 800c6f8:	f7ff ff80 	bl	800c5fc <__hexdig_fun>
 800c6fc:	1e42      	subs	r2, r0, #1
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	2a18      	cmp	r2, #24
 800c702:	d82e      	bhi.n	800c762 <__gethex+0x13a>
 800c704:	f1a0 0210 	sub.w	r2, r0, #16
 800c708:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c70c:	f7ff ff76 	bl	800c5fc <__hexdig_fun>
 800c710:	f100 3cff 	add.w	ip, r0, #4294967295
 800c714:	fa5f fc8c 	uxtb.w	ip, ip
 800c718:	f1bc 0f18 	cmp.w	ip, #24
 800c71c:	d91d      	bls.n	800c75a <__gethex+0x132>
 800c71e:	f1bb 0f00 	cmp.w	fp, #0
 800c722:	d000      	beq.n	800c726 <__gethex+0xfe>
 800c724:	4252      	negs	r2, r2
 800c726:	4416      	add	r6, r2
 800c728:	f8ca 1000 	str.w	r1, [sl]
 800c72c:	b1dc      	cbz	r4, 800c766 <__gethex+0x13e>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	bf14      	ite	ne
 800c734:	f04f 0800 	movne.w	r8, #0
 800c738:	f04f 0806 	moveq.w	r8, #6
 800c73c:	4640      	mov	r0, r8
 800c73e:	b005      	add	sp, #20
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	4645      	mov	r5, r8
 800c746:	4626      	mov	r6, r4
 800c748:	2401      	movs	r4, #1
 800c74a:	e7c7      	b.n	800c6dc <__gethex+0xb4>
 800c74c:	f04f 0b00 	mov.w	fp, #0
 800c750:	1ca9      	adds	r1, r5, #2
 800c752:	e7d0      	b.n	800c6f6 <__gethex+0xce>
 800c754:	f04f 0b01 	mov.w	fp, #1
 800c758:	e7fa      	b.n	800c750 <__gethex+0x128>
 800c75a:	230a      	movs	r3, #10
 800c75c:	fb03 0002 	mla	r0, r3, r2, r0
 800c760:	e7d0      	b.n	800c704 <__gethex+0xdc>
 800c762:	4629      	mov	r1, r5
 800c764:	e7e0      	b.n	800c728 <__gethex+0x100>
 800c766:	eba5 0308 	sub.w	r3, r5, r8
 800c76a:	3b01      	subs	r3, #1
 800c76c:	4621      	mov	r1, r4
 800c76e:	2b07      	cmp	r3, #7
 800c770:	dc0a      	bgt.n	800c788 <__gethex+0x160>
 800c772:	4648      	mov	r0, r9
 800c774:	f7fe f964 	bl	800aa40 <_Balloc>
 800c778:	4604      	mov	r4, r0
 800c77a:	b940      	cbnz	r0, 800c78e <__gethex+0x166>
 800c77c:	4b61      	ldr	r3, [pc, #388]	; (800c904 <__gethex+0x2dc>)
 800c77e:	4602      	mov	r2, r0
 800c780:	21e4      	movs	r1, #228	; 0xe4
 800c782:	4861      	ldr	r0, [pc, #388]	; (800c908 <__gethex+0x2e0>)
 800c784:	f7ff feb4 	bl	800c4f0 <__assert_func>
 800c788:	3101      	adds	r1, #1
 800c78a:	105b      	asrs	r3, r3, #1
 800c78c:	e7ef      	b.n	800c76e <__gethex+0x146>
 800c78e:	f100 0a14 	add.w	sl, r0, #20
 800c792:	2300      	movs	r3, #0
 800c794:	495a      	ldr	r1, [pc, #360]	; (800c900 <__gethex+0x2d8>)
 800c796:	f8cd a004 	str.w	sl, [sp, #4]
 800c79a:	469b      	mov	fp, r3
 800c79c:	45a8      	cmp	r8, r5
 800c79e:	d342      	bcc.n	800c826 <__gethex+0x1fe>
 800c7a0:	9801      	ldr	r0, [sp, #4]
 800c7a2:	f840 bb04 	str.w	fp, [r0], #4
 800c7a6:	eba0 000a 	sub.w	r0, r0, sl
 800c7aa:	1080      	asrs	r0, r0, #2
 800c7ac:	6120      	str	r0, [r4, #16]
 800c7ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c7b2:	4658      	mov	r0, fp
 800c7b4:	f7fe fa36 	bl	800ac24 <__hi0bits>
 800c7b8:	683d      	ldr	r5, [r7, #0]
 800c7ba:	eba8 0000 	sub.w	r0, r8, r0
 800c7be:	42a8      	cmp	r0, r5
 800c7c0:	dd59      	ble.n	800c876 <__gethex+0x24e>
 800c7c2:	eba0 0805 	sub.w	r8, r0, r5
 800c7c6:	4641      	mov	r1, r8
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f7fe fdc2 	bl	800b352 <__any_on>
 800c7ce:	4683      	mov	fp, r0
 800c7d0:	b1b8      	cbz	r0, 800c802 <__gethex+0x1da>
 800c7d2:	f108 33ff 	add.w	r3, r8, #4294967295
 800c7d6:	1159      	asrs	r1, r3, #5
 800c7d8:	f003 021f 	and.w	r2, r3, #31
 800c7dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7e0:	f04f 0b01 	mov.w	fp, #1
 800c7e4:	fa0b f202 	lsl.w	r2, fp, r2
 800c7e8:	420a      	tst	r2, r1
 800c7ea:	d00a      	beq.n	800c802 <__gethex+0x1da>
 800c7ec:	455b      	cmp	r3, fp
 800c7ee:	dd06      	ble.n	800c7fe <__gethex+0x1d6>
 800c7f0:	f1a8 0102 	sub.w	r1, r8, #2
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7fe fdac 	bl	800b352 <__any_on>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d138      	bne.n	800c870 <__gethex+0x248>
 800c7fe:	f04f 0b02 	mov.w	fp, #2
 800c802:	4641      	mov	r1, r8
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff fea7 	bl	800c558 <rshift>
 800c80a:	4446      	add	r6, r8
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	42b3      	cmp	r3, r6
 800c810:	da41      	bge.n	800c896 <__gethex+0x26e>
 800c812:	4621      	mov	r1, r4
 800c814:	4648      	mov	r0, r9
 800c816:	f7fe f953 	bl	800aac0 <_Bfree>
 800c81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c81c:	2300      	movs	r3, #0
 800c81e:	6013      	str	r3, [r2, #0]
 800c820:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c824:	e78a      	b.n	800c73c <__gethex+0x114>
 800c826:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c82a:	2a2e      	cmp	r2, #46	; 0x2e
 800c82c:	d014      	beq.n	800c858 <__gethex+0x230>
 800c82e:	2b20      	cmp	r3, #32
 800c830:	d106      	bne.n	800c840 <__gethex+0x218>
 800c832:	9b01      	ldr	r3, [sp, #4]
 800c834:	f843 bb04 	str.w	fp, [r3], #4
 800c838:	f04f 0b00 	mov.w	fp, #0
 800c83c:	9301      	str	r3, [sp, #4]
 800c83e:	465b      	mov	r3, fp
 800c840:	7828      	ldrb	r0, [r5, #0]
 800c842:	9303      	str	r3, [sp, #12]
 800c844:	f7ff feda 	bl	800c5fc <__hexdig_fun>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	f000 000f 	and.w	r0, r0, #15
 800c84e:	4098      	lsls	r0, r3
 800c850:	ea4b 0b00 	orr.w	fp, fp, r0
 800c854:	3304      	adds	r3, #4
 800c856:	e7a1      	b.n	800c79c <__gethex+0x174>
 800c858:	45a8      	cmp	r8, r5
 800c85a:	d8e8      	bhi.n	800c82e <__gethex+0x206>
 800c85c:	2201      	movs	r2, #1
 800c85e:	4628      	mov	r0, r5
 800c860:	9303      	str	r3, [sp, #12]
 800c862:	f7ff fe0d 	bl	800c480 <strncmp>
 800c866:	4926      	ldr	r1, [pc, #152]	; (800c900 <__gethex+0x2d8>)
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d1df      	bne.n	800c82e <__gethex+0x206>
 800c86e:	e795      	b.n	800c79c <__gethex+0x174>
 800c870:	f04f 0b03 	mov.w	fp, #3
 800c874:	e7c5      	b.n	800c802 <__gethex+0x1da>
 800c876:	da0b      	bge.n	800c890 <__gethex+0x268>
 800c878:	eba5 0800 	sub.w	r8, r5, r0
 800c87c:	4621      	mov	r1, r4
 800c87e:	4642      	mov	r2, r8
 800c880:	4648      	mov	r0, r9
 800c882:	f7fe fb37 	bl	800aef4 <__lshift>
 800c886:	eba6 0608 	sub.w	r6, r6, r8
 800c88a:	4604      	mov	r4, r0
 800c88c:	f100 0a14 	add.w	sl, r0, #20
 800c890:	f04f 0b00 	mov.w	fp, #0
 800c894:	e7ba      	b.n	800c80c <__gethex+0x1e4>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	42b3      	cmp	r3, r6
 800c89a:	dd73      	ble.n	800c984 <__gethex+0x35c>
 800c89c:	1b9e      	subs	r6, r3, r6
 800c89e:	42b5      	cmp	r5, r6
 800c8a0:	dc34      	bgt.n	800c90c <__gethex+0x2e4>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d023      	beq.n	800c8f0 <__gethex+0x2c8>
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d025      	beq.n	800c8f8 <__gethex+0x2d0>
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d115      	bne.n	800c8dc <__gethex+0x2b4>
 800c8b0:	42b5      	cmp	r5, r6
 800c8b2:	d113      	bne.n	800c8dc <__gethex+0x2b4>
 800c8b4:	2d01      	cmp	r5, #1
 800c8b6:	d10b      	bne.n	800c8d0 <__gethex+0x2a8>
 800c8b8:	9a02      	ldr	r2, [sp, #8]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	2301      	movs	r3, #1
 800c8c0:	6123      	str	r3, [r4, #16]
 800c8c2:	f8ca 3000 	str.w	r3, [sl]
 800c8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c8cc:	601c      	str	r4, [r3, #0]
 800c8ce:	e735      	b.n	800c73c <__gethex+0x114>
 800c8d0:	1e69      	subs	r1, r5, #1
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7fe fd3d 	bl	800b352 <__any_on>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d1ed      	bne.n	800c8b8 <__gethex+0x290>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4648      	mov	r0, r9
 800c8e0:	f7fe f8ee 	bl	800aac0 <_Bfree>
 800c8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6013      	str	r3, [r2, #0]
 800c8ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c8ee:	e725      	b.n	800c73c <__gethex+0x114>
 800c8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1f2      	bne.n	800c8dc <__gethex+0x2b4>
 800c8f6:	e7df      	b.n	800c8b8 <__gethex+0x290>
 800c8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1dc      	bne.n	800c8b8 <__gethex+0x290>
 800c8fe:	e7ed      	b.n	800c8dc <__gethex+0x2b4>
 800c900:	0800df64 	.word	0x0800df64
 800c904:	0800ddfd 	.word	0x0800ddfd
 800c908:	0800e10e 	.word	0x0800e10e
 800c90c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c910:	f1bb 0f00 	cmp.w	fp, #0
 800c914:	d133      	bne.n	800c97e <__gethex+0x356>
 800c916:	f1b8 0f00 	cmp.w	r8, #0
 800c91a:	d004      	beq.n	800c926 <__gethex+0x2fe>
 800c91c:	4641      	mov	r1, r8
 800c91e:	4620      	mov	r0, r4
 800c920:	f7fe fd17 	bl	800b352 <__any_on>
 800c924:	4683      	mov	fp, r0
 800c926:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c92a:	2301      	movs	r3, #1
 800c92c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c930:	f008 081f 	and.w	r8, r8, #31
 800c934:	fa03 f308 	lsl.w	r3, r3, r8
 800c938:	4213      	tst	r3, r2
 800c93a:	4631      	mov	r1, r6
 800c93c:	4620      	mov	r0, r4
 800c93e:	bf18      	it	ne
 800c940:	f04b 0b02 	orrne.w	fp, fp, #2
 800c944:	1bad      	subs	r5, r5, r6
 800c946:	f7ff fe07 	bl	800c558 <rshift>
 800c94a:	687e      	ldr	r6, [r7, #4]
 800c94c:	f04f 0802 	mov.w	r8, #2
 800c950:	f1bb 0f00 	cmp.w	fp, #0
 800c954:	d04a      	beq.n	800c9ec <__gethex+0x3c4>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d016      	beq.n	800c98a <__gethex+0x362>
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d018      	beq.n	800c992 <__gethex+0x36a>
 800c960:	2b01      	cmp	r3, #1
 800c962:	d109      	bne.n	800c978 <__gethex+0x350>
 800c964:	f01b 0f02 	tst.w	fp, #2
 800c968:	d006      	beq.n	800c978 <__gethex+0x350>
 800c96a:	f8da 3000 	ldr.w	r3, [sl]
 800c96e:	ea4b 0b03 	orr.w	fp, fp, r3
 800c972:	f01b 0f01 	tst.w	fp, #1
 800c976:	d10f      	bne.n	800c998 <__gethex+0x370>
 800c978:	f048 0810 	orr.w	r8, r8, #16
 800c97c:	e036      	b.n	800c9ec <__gethex+0x3c4>
 800c97e:	f04f 0b01 	mov.w	fp, #1
 800c982:	e7d0      	b.n	800c926 <__gethex+0x2fe>
 800c984:	f04f 0801 	mov.w	r8, #1
 800c988:	e7e2      	b.n	800c950 <__gethex+0x328>
 800c98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c98c:	f1c3 0301 	rsb	r3, r3, #1
 800c990:	930f      	str	r3, [sp, #60]	; 0x3c
 800c992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0ef      	beq.n	800c978 <__gethex+0x350>
 800c998:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c99c:	f104 0214 	add.w	r2, r4, #20
 800c9a0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4694      	mov	ip, r2
 800c9ae:	f852 1b04 	ldr.w	r1, [r2], #4
 800c9b2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c9b6:	d01e      	beq.n	800c9f6 <__gethex+0x3ce>
 800c9b8:	3101      	adds	r1, #1
 800c9ba:	f8cc 1000 	str.w	r1, [ip]
 800c9be:	f1b8 0f02 	cmp.w	r8, #2
 800c9c2:	f104 0214 	add.w	r2, r4, #20
 800c9c6:	d13d      	bne.n	800ca44 <__gethex+0x41c>
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	42ab      	cmp	r3, r5
 800c9ce:	d10b      	bne.n	800c9e8 <__gethex+0x3c0>
 800c9d0:	1169      	asrs	r1, r5, #5
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	f005 051f 	and.w	r5, r5, #31
 800c9d8:	fa03 f505 	lsl.w	r5, r3, r5
 800c9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9e0:	421d      	tst	r5, r3
 800c9e2:	bf18      	it	ne
 800c9e4:	f04f 0801 	movne.w	r8, #1
 800c9e8:	f048 0820 	orr.w	r8, r8, #32
 800c9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9ee:	601c      	str	r4, [r3, #0]
 800c9f0:	9b02      	ldr	r3, [sp, #8]
 800c9f2:	601e      	str	r6, [r3, #0]
 800c9f4:	e6a2      	b.n	800c73c <__gethex+0x114>
 800c9f6:	4290      	cmp	r0, r2
 800c9f8:	f842 3c04 	str.w	r3, [r2, #-4]
 800c9fc:	d8d6      	bhi.n	800c9ac <__gethex+0x384>
 800c9fe:	68a2      	ldr	r2, [r4, #8]
 800ca00:	4593      	cmp	fp, r2
 800ca02:	db17      	blt.n	800ca34 <__gethex+0x40c>
 800ca04:	6861      	ldr	r1, [r4, #4]
 800ca06:	4648      	mov	r0, r9
 800ca08:	3101      	adds	r1, #1
 800ca0a:	f7fe f819 	bl	800aa40 <_Balloc>
 800ca0e:	4682      	mov	sl, r0
 800ca10:	b918      	cbnz	r0, 800ca1a <__gethex+0x3f2>
 800ca12:	4b1b      	ldr	r3, [pc, #108]	; (800ca80 <__gethex+0x458>)
 800ca14:	4602      	mov	r2, r0
 800ca16:	2184      	movs	r1, #132	; 0x84
 800ca18:	e6b3      	b.n	800c782 <__gethex+0x15a>
 800ca1a:	6922      	ldr	r2, [r4, #16]
 800ca1c:	3202      	adds	r2, #2
 800ca1e:	f104 010c 	add.w	r1, r4, #12
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	300c      	adds	r0, #12
 800ca26:	f7ff fd4d 	bl	800c4c4 <memcpy>
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4648      	mov	r0, r9
 800ca2e:	f7fe f847 	bl	800aac0 <_Bfree>
 800ca32:	4654      	mov	r4, sl
 800ca34:	6922      	ldr	r2, [r4, #16]
 800ca36:	1c51      	adds	r1, r2, #1
 800ca38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ca3c:	6121      	str	r1, [r4, #16]
 800ca3e:	2101      	movs	r1, #1
 800ca40:	6151      	str	r1, [r2, #20]
 800ca42:	e7bc      	b.n	800c9be <__gethex+0x396>
 800ca44:	6921      	ldr	r1, [r4, #16]
 800ca46:	4559      	cmp	r1, fp
 800ca48:	dd0b      	ble.n	800ca62 <__gethex+0x43a>
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7ff fd83 	bl	800c558 <rshift>
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	3601      	adds	r6, #1
 800ca56:	42b3      	cmp	r3, r6
 800ca58:	f6ff aedb 	blt.w	800c812 <__gethex+0x1ea>
 800ca5c:	f04f 0801 	mov.w	r8, #1
 800ca60:	e7c2      	b.n	800c9e8 <__gethex+0x3c0>
 800ca62:	f015 051f 	ands.w	r5, r5, #31
 800ca66:	d0f9      	beq.n	800ca5c <__gethex+0x434>
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	441a      	add	r2, r3
 800ca6c:	f1c5 0520 	rsb	r5, r5, #32
 800ca70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ca74:	f7fe f8d6 	bl	800ac24 <__hi0bits>
 800ca78:	42a8      	cmp	r0, r5
 800ca7a:	dbe6      	blt.n	800ca4a <__gethex+0x422>
 800ca7c:	e7ee      	b.n	800ca5c <__gethex+0x434>
 800ca7e:	bf00      	nop
 800ca80:	0800ddfd 	.word	0x0800ddfd

0800ca84 <L_shift>:
 800ca84:	f1c2 0208 	rsb	r2, r2, #8
 800ca88:	0092      	lsls	r2, r2, #2
 800ca8a:	b570      	push	{r4, r5, r6, lr}
 800ca8c:	f1c2 0620 	rsb	r6, r2, #32
 800ca90:	6843      	ldr	r3, [r0, #4]
 800ca92:	6804      	ldr	r4, [r0, #0]
 800ca94:	fa03 f506 	lsl.w	r5, r3, r6
 800ca98:	432c      	orrs	r4, r5
 800ca9a:	40d3      	lsrs	r3, r2
 800ca9c:	6004      	str	r4, [r0, #0]
 800ca9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800caa2:	4288      	cmp	r0, r1
 800caa4:	d3f4      	bcc.n	800ca90 <L_shift+0xc>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <__match>:
 800caa8:	b530      	push	{r4, r5, lr}
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	3301      	adds	r3, #1
 800caae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab2:	b914      	cbnz	r4, 800caba <__match+0x12>
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	2001      	movs	r0, #1
 800cab8:	bd30      	pop	{r4, r5, pc}
 800caba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cac2:	2d19      	cmp	r5, #25
 800cac4:	bf98      	it	ls
 800cac6:	3220      	addls	r2, #32
 800cac8:	42a2      	cmp	r2, r4
 800caca:	d0f0      	beq.n	800caae <__match+0x6>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7f3      	b.n	800cab8 <__match+0x10>

0800cad0 <__hexnan>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	680b      	ldr	r3, [r1, #0]
 800cad6:	6801      	ldr	r1, [r0, #0]
 800cad8:	115e      	asrs	r6, r3, #5
 800cada:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cade:	f013 031f 	ands.w	r3, r3, #31
 800cae2:	b087      	sub	sp, #28
 800cae4:	bf18      	it	ne
 800cae6:	3604      	addne	r6, #4
 800cae8:	2500      	movs	r5, #0
 800caea:	1f37      	subs	r7, r6, #4
 800caec:	4682      	mov	sl, r0
 800caee:	4690      	mov	r8, r2
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800caf6:	46b9      	mov	r9, r7
 800caf8:	463c      	mov	r4, r7
 800cafa:	9502      	str	r5, [sp, #8]
 800cafc:	46ab      	mov	fp, r5
 800cafe:	784a      	ldrb	r2, [r1, #1]
 800cb00:	1c4b      	adds	r3, r1, #1
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	b342      	cbz	r2, 800cb58 <__hexnan+0x88>
 800cb06:	4610      	mov	r0, r2
 800cb08:	9105      	str	r1, [sp, #20]
 800cb0a:	9204      	str	r2, [sp, #16]
 800cb0c:	f7ff fd76 	bl	800c5fc <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d14f      	bne.n	800cbb4 <__hexnan+0xe4>
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	9905      	ldr	r1, [sp, #20]
 800cb18:	2a20      	cmp	r2, #32
 800cb1a:	d818      	bhi.n	800cb4e <__hexnan+0x7e>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	459b      	cmp	fp, r3
 800cb20:	dd13      	ble.n	800cb4a <__hexnan+0x7a>
 800cb22:	454c      	cmp	r4, r9
 800cb24:	d206      	bcs.n	800cb34 <__hexnan+0x64>
 800cb26:	2d07      	cmp	r5, #7
 800cb28:	dc04      	bgt.n	800cb34 <__hexnan+0x64>
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff ffa8 	bl	800ca84 <L_shift>
 800cb34:	4544      	cmp	r4, r8
 800cb36:	d950      	bls.n	800cbda <__hexnan+0x10a>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb42:	f8cd b008 	str.w	fp, [sp, #8]
 800cb46:	464c      	mov	r4, r9
 800cb48:	461d      	mov	r5, r3
 800cb4a:	9903      	ldr	r1, [sp, #12]
 800cb4c:	e7d7      	b.n	800cafe <__hexnan+0x2e>
 800cb4e:	2a29      	cmp	r2, #41	; 0x29
 800cb50:	d155      	bne.n	800cbfe <__hexnan+0x12e>
 800cb52:	3102      	adds	r1, #2
 800cb54:	f8ca 1000 	str.w	r1, [sl]
 800cb58:	f1bb 0f00 	cmp.w	fp, #0
 800cb5c:	d04f      	beq.n	800cbfe <__hexnan+0x12e>
 800cb5e:	454c      	cmp	r4, r9
 800cb60:	d206      	bcs.n	800cb70 <__hexnan+0xa0>
 800cb62:	2d07      	cmp	r5, #7
 800cb64:	dc04      	bgt.n	800cb70 <__hexnan+0xa0>
 800cb66:	462a      	mov	r2, r5
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7ff ff8a 	bl	800ca84 <L_shift>
 800cb70:	4544      	cmp	r4, r8
 800cb72:	d934      	bls.n	800cbde <__hexnan+0x10e>
 800cb74:	f1a8 0204 	sub.w	r2, r8, #4
 800cb78:	4623      	mov	r3, r4
 800cb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb82:	429f      	cmp	r7, r3
 800cb84:	d2f9      	bcs.n	800cb7a <__hexnan+0xaa>
 800cb86:	1b3b      	subs	r3, r7, r4
 800cb88:	f023 0303 	bic.w	r3, r3, #3
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	3e03      	subs	r6, #3
 800cb90:	3401      	adds	r4, #1
 800cb92:	42a6      	cmp	r6, r4
 800cb94:	bf38      	it	cc
 800cb96:	2304      	movcc	r3, #4
 800cb98:	4443      	add	r3, r8
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f843 2b04 	str.w	r2, [r3], #4
 800cba0:	429f      	cmp	r7, r3
 800cba2:	d2fb      	bcs.n	800cb9c <__hexnan+0xcc>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	b91b      	cbnz	r3, 800cbb0 <__hexnan+0xe0>
 800cba8:	4547      	cmp	r7, r8
 800cbaa:	d126      	bne.n	800cbfa <__hexnan+0x12a>
 800cbac:	2301      	movs	r3, #1
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	2005      	movs	r0, #5
 800cbb2:	e025      	b.n	800cc00 <__hexnan+0x130>
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	2d08      	cmp	r5, #8
 800cbb8:	f10b 0b01 	add.w	fp, fp, #1
 800cbbc:	dd06      	ble.n	800cbcc <__hexnan+0xfc>
 800cbbe:	4544      	cmp	r4, r8
 800cbc0:	d9c3      	bls.n	800cb4a <__hexnan+0x7a>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbc8:	2501      	movs	r5, #1
 800cbca:	3c04      	subs	r4, #4
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	f000 000f 	and.w	r0, r0, #15
 800cbd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbd6:	6020      	str	r0, [r4, #0]
 800cbd8:	e7b7      	b.n	800cb4a <__hexnan+0x7a>
 800cbda:	2508      	movs	r5, #8
 800cbdc:	e7b5      	b.n	800cb4a <__hexnan+0x7a>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0df      	beq.n	800cba4 <__hexnan+0xd4>
 800cbe4:	f1c3 0320 	rsb	r3, r3, #32
 800cbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbec:	40da      	lsrs	r2, r3
 800cbee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	f846 3c04 	str.w	r3, [r6, #-4]
 800cbf8:	e7d4      	b.n	800cba4 <__hexnan+0xd4>
 800cbfa:	3f04      	subs	r7, #4
 800cbfc:	e7d2      	b.n	800cba4 <__hexnan+0xd4>
 800cbfe:	2004      	movs	r0, #4
 800cc00:	b007      	add	sp, #28
 800cc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc06 <__ascii_mbtowc>:
 800cc06:	b082      	sub	sp, #8
 800cc08:	b901      	cbnz	r1, 800cc0c <__ascii_mbtowc+0x6>
 800cc0a:	a901      	add	r1, sp, #4
 800cc0c:	b142      	cbz	r2, 800cc20 <__ascii_mbtowc+0x1a>
 800cc0e:	b14b      	cbz	r3, 800cc24 <__ascii_mbtowc+0x1e>
 800cc10:	7813      	ldrb	r3, [r2, #0]
 800cc12:	600b      	str	r3, [r1, #0]
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	1e10      	subs	r0, r2, #0
 800cc18:	bf18      	it	ne
 800cc1a:	2001      	movne	r0, #1
 800cc1c:	b002      	add	sp, #8
 800cc1e:	4770      	bx	lr
 800cc20:	4610      	mov	r0, r2
 800cc22:	e7fb      	b.n	800cc1c <__ascii_mbtowc+0x16>
 800cc24:	f06f 0001 	mvn.w	r0, #1
 800cc28:	e7f8      	b.n	800cc1c <__ascii_mbtowc+0x16>

0800cc2a <_realloc_r>:
 800cc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2e:	4680      	mov	r8, r0
 800cc30:	4614      	mov	r4, r2
 800cc32:	460e      	mov	r6, r1
 800cc34:	b921      	cbnz	r1, 800cc40 <_realloc_r+0x16>
 800cc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	f7fd be74 	b.w	800a928 <_malloc_r>
 800cc40:	b92a      	cbnz	r2, 800cc4e <_realloc_r+0x24>
 800cc42:	f7fd fdfd 	bl	800a840 <_free_r>
 800cc46:	4625      	mov	r5, r4
 800cc48:	4628      	mov	r0, r5
 800cc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4e:	f000 f842 	bl	800ccd6 <_malloc_usable_size_r>
 800cc52:	4284      	cmp	r4, r0
 800cc54:	4607      	mov	r7, r0
 800cc56:	d802      	bhi.n	800cc5e <_realloc_r+0x34>
 800cc58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc5c:	d812      	bhi.n	800cc84 <_realloc_r+0x5a>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4640      	mov	r0, r8
 800cc62:	f7fd fe61 	bl	800a928 <_malloc_r>
 800cc66:	4605      	mov	r5, r0
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0ed      	beq.n	800cc48 <_realloc_r+0x1e>
 800cc6c:	42bc      	cmp	r4, r7
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4631      	mov	r1, r6
 800cc72:	bf28      	it	cs
 800cc74:	463a      	movcs	r2, r7
 800cc76:	f7ff fc25 	bl	800c4c4 <memcpy>
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	f7fd fddf 	bl	800a840 <_free_r>
 800cc82:	e7e1      	b.n	800cc48 <_realloc_r+0x1e>
 800cc84:	4635      	mov	r5, r6
 800cc86:	e7df      	b.n	800cc48 <_realloc_r+0x1e>

0800cc88 <__ascii_wctomb>:
 800cc88:	b149      	cbz	r1, 800cc9e <__ascii_wctomb+0x16>
 800cc8a:	2aff      	cmp	r2, #255	; 0xff
 800cc8c:	bf85      	ittet	hi
 800cc8e:	238a      	movhi	r3, #138	; 0x8a
 800cc90:	6003      	strhi	r3, [r0, #0]
 800cc92:	700a      	strbls	r2, [r1, #0]
 800cc94:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc98:	bf98      	it	ls
 800cc9a:	2001      	movls	r0, #1
 800cc9c:	4770      	bx	lr
 800cc9e:	4608      	mov	r0, r1
 800cca0:	4770      	bx	lr
	...

0800cca4 <fiprintf>:
 800cca4:	b40e      	push	{r1, r2, r3}
 800cca6:	b503      	push	{r0, r1, lr}
 800cca8:	4601      	mov	r1, r0
 800ccaa:	ab03      	add	r3, sp, #12
 800ccac:	4805      	ldr	r0, [pc, #20]	; (800ccc4 <fiprintf+0x20>)
 800ccae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb2:	6800      	ldr	r0, [r0, #0]
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	f000 f83f 	bl	800cd38 <_vfiprintf_r>
 800ccba:	b002      	add	sp, #8
 800ccbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccc0:	b003      	add	sp, #12
 800ccc2:	4770      	bx	lr
 800ccc4:	20000074 	.word	0x20000074

0800ccc8 <abort>:
 800ccc8:	b508      	push	{r3, lr}
 800ccca:	2006      	movs	r0, #6
 800cccc:	f000 fa0c 	bl	800d0e8 <raise>
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	f7f5 f93d 	bl	8001f50 <_exit>

0800ccd6 <_malloc_usable_size_r>:
 800ccd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccda:	1f18      	subs	r0, r3, #4
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	bfbc      	itt	lt
 800cce0:	580b      	ldrlt	r3, [r1, r0]
 800cce2:	18c0      	addlt	r0, r0, r3
 800cce4:	4770      	bx	lr

0800cce6 <__sfputc_r>:
 800cce6:	6893      	ldr	r3, [r2, #8]
 800cce8:	3b01      	subs	r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	b410      	push	{r4}
 800ccee:	6093      	str	r3, [r2, #8]
 800ccf0:	da08      	bge.n	800cd04 <__sfputc_r+0x1e>
 800ccf2:	6994      	ldr	r4, [r2, #24]
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	db01      	blt.n	800ccfc <__sfputc_r+0x16>
 800ccf8:	290a      	cmp	r1, #10
 800ccfa:	d103      	bne.n	800cd04 <__sfputc_r+0x1e>
 800ccfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd00:	f000 b934 	b.w	800cf6c <__swbuf_r>
 800cd04:	6813      	ldr	r3, [r2, #0]
 800cd06:	1c58      	adds	r0, r3, #1
 800cd08:	6010      	str	r0, [r2, #0]
 800cd0a:	7019      	strb	r1, [r3, #0]
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <__sfputs_r>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	4606      	mov	r6, r0
 800cd18:	460f      	mov	r7, r1
 800cd1a:	4614      	mov	r4, r2
 800cd1c:	18d5      	adds	r5, r2, r3
 800cd1e:	42ac      	cmp	r4, r5
 800cd20:	d101      	bne.n	800cd26 <__sfputs_r+0x12>
 800cd22:	2000      	movs	r0, #0
 800cd24:	e007      	b.n	800cd36 <__sfputs_r+0x22>
 800cd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2a:	463a      	mov	r2, r7
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f7ff ffda 	bl	800cce6 <__sfputc_r>
 800cd32:	1c43      	adds	r3, r0, #1
 800cd34:	d1f3      	bne.n	800cd1e <__sfputs_r+0xa>
 800cd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd38 <_vfiprintf_r>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	460d      	mov	r5, r1
 800cd3e:	b09d      	sub	sp, #116	; 0x74
 800cd40:	4614      	mov	r4, r2
 800cd42:	4698      	mov	r8, r3
 800cd44:	4606      	mov	r6, r0
 800cd46:	b118      	cbz	r0, 800cd50 <_vfiprintf_r+0x18>
 800cd48:	6a03      	ldr	r3, [r0, #32]
 800cd4a:	b90b      	cbnz	r3, 800cd50 <_vfiprintf_r+0x18>
 800cd4c:	f7fc fe62 	bl	8009a14 <__sinit>
 800cd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd52:	07d9      	lsls	r1, r3, #31
 800cd54:	d405      	bmi.n	800cd62 <_vfiprintf_r+0x2a>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	059a      	lsls	r2, r3, #22
 800cd5a:	d402      	bmi.n	800cd62 <_vfiprintf_r+0x2a>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd5e:	f7fc ff70 	bl	8009c42 <__retarget_lock_acquire_recursive>
 800cd62:	89ab      	ldrh	r3, [r5, #12]
 800cd64:	071b      	lsls	r3, r3, #28
 800cd66:	d501      	bpl.n	800cd6c <_vfiprintf_r+0x34>
 800cd68:	692b      	ldr	r3, [r5, #16]
 800cd6a:	b99b      	cbnz	r3, 800cd94 <_vfiprintf_r+0x5c>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f000 f93a 	bl	800cfe8 <__swsetup_r>
 800cd74:	b170      	cbz	r0, 800cd94 <_vfiprintf_r+0x5c>
 800cd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd78:	07dc      	lsls	r4, r3, #31
 800cd7a:	d504      	bpl.n	800cd86 <_vfiprintf_r+0x4e>
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd80:	b01d      	add	sp, #116	; 0x74
 800cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	0598      	lsls	r0, r3, #22
 800cd8a:	d4f7      	bmi.n	800cd7c <_vfiprintf_r+0x44>
 800cd8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd8e:	f7fc ff59 	bl	8009c44 <__retarget_lock_release_recursive>
 800cd92:	e7f3      	b.n	800cd7c <_vfiprintf_r+0x44>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9309      	str	r3, [sp, #36]	; 0x24
 800cd98:	2320      	movs	r3, #32
 800cd9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda2:	2330      	movs	r3, #48	; 0x30
 800cda4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf58 <_vfiprintf_r+0x220>
 800cda8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdac:	f04f 0901 	mov.w	r9, #1
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	469a      	mov	sl, r3
 800cdb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb8:	b10a      	cbz	r2, 800cdbe <_vfiprintf_r+0x86>
 800cdba:	2a25      	cmp	r2, #37	; 0x25
 800cdbc:	d1f9      	bne.n	800cdb2 <_vfiprintf_r+0x7a>
 800cdbe:	ebba 0b04 	subs.w	fp, sl, r4
 800cdc2:	d00b      	beq.n	800cddc <_vfiprintf_r+0xa4>
 800cdc4:	465b      	mov	r3, fp
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7ff ffa2 	bl	800cd14 <__sfputs_r>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	f000 80a9 	beq.w	800cf28 <_vfiprintf_r+0x1f0>
 800cdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdd8:	445a      	add	r2, fp
 800cdda:	9209      	str	r2, [sp, #36]	; 0x24
 800cddc:	f89a 3000 	ldrb.w	r3, [sl]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 80a1 	beq.w	800cf28 <_vfiprintf_r+0x1f0>
 800cde6:	2300      	movs	r3, #0
 800cde8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf0:	f10a 0a01 	add.w	sl, sl, #1
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	9307      	str	r3, [sp, #28]
 800cdf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdfc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2205      	movs	r2, #5
 800ce02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce06:	4854      	ldr	r0, [pc, #336]	; (800cf58 <_vfiprintf_r+0x220>)
 800ce08:	f7f3 fa1a 	bl	8000240 <memchr>
 800ce0c:	9a04      	ldr	r2, [sp, #16]
 800ce0e:	b9d8      	cbnz	r0, 800ce48 <_vfiprintf_r+0x110>
 800ce10:	06d1      	lsls	r1, r2, #27
 800ce12:	bf44      	itt	mi
 800ce14:	2320      	movmi	r3, #32
 800ce16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce1a:	0713      	lsls	r3, r2, #28
 800ce1c:	bf44      	itt	mi
 800ce1e:	232b      	movmi	r3, #43	; 0x2b
 800ce20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce24:	f89a 3000 	ldrb.w	r3, [sl]
 800ce28:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2a:	d015      	beq.n	800ce58 <_vfiprintf_r+0x120>
 800ce2c:	9a07      	ldr	r2, [sp, #28]
 800ce2e:	4654      	mov	r4, sl
 800ce30:	2000      	movs	r0, #0
 800ce32:	f04f 0c0a 	mov.w	ip, #10
 800ce36:	4621      	mov	r1, r4
 800ce38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce3c:	3b30      	subs	r3, #48	; 0x30
 800ce3e:	2b09      	cmp	r3, #9
 800ce40:	d94d      	bls.n	800cede <_vfiprintf_r+0x1a6>
 800ce42:	b1b0      	cbz	r0, 800ce72 <_vfiprintf_r+0x13a>
 800ce44:	9207      	str	r2, [sp, #28]
 800ce46:	e014      	b.n	800ce72 <_vfiprintf_r+0x13a>
 800ce48:	eba0 0308 	sub.w	r3, r0, r8
 800ce4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce50:	4313      	orrs	r3, r2
 800ce52:	9304      	str	r3, [sp, #16]
 800ce54:	46a2      	mov	sl, r4
 800ce56:	e7d2      	b.n	800cdfe <_vfiprintf_r+0xc6>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	1d19      	adds	r1, r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	9103      	str	r1, [sp, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bfbb      	ittet	lt
 800ce64:	425b      	neglt	r3, r3
 800ce66:	f042 0202 	orrlt.w	r2, r2, #2
 800ce6a:	9307      	strge	r3, [sp, #28]
 800ce6c:	9307      	strlt	r3, [sp, #28]
 800ce6e:	bfb8      	it	lt
 800ce70:	9204      	strlt	r2, [sp, #16]
 800ce72:	7823      	ldrb	r3, [r4, #0]
 800ce74:	2b2e      	cmp	r3, #46	; 0x2e
 800ce76:	d10c      	bne.n	800ce92 <_vfiprintf_r+0x15a>
 800ce78:	7863      	ldrb	r3, [r4, #1]
 800ce7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce7c:	d134      	bne.n	800cee8 <_vfiprintf_r+0x1b0>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	1d1a      	adds	r2, r3, #4
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	9203      	str	r2, [sp, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	bfb8      	it	lt
 800ce8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce8e:	3402      	adds	r4, #2
 800ce90:	9305      	str	r3, [sp, #20]
 800ce92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf68 <_vfiprintf_r+0x230>
 800ce96:	7821      	ldrb	r1, [r4, #0]
 800ce98:	2203      	movs	r2, #3
 800ce9a:	4650      	mov	r0, sl
 800ce9c:	f7f3 f9d0 	bl	8000240 <memchr>
 800cea0:	b138      	cbz	r0, 800ceb2 <_vfiprintf_r+0x17a>
 800cea2:	9b04      	ldr	r3, [sp, #16]
 800cea4:	eba0 000a 	sub.w	r0, r0, sl
 800cea8:	2240      	movs	r2, #64	; 0x40
 800ceaa:	4082      	lsls	r2, r0
 800ceac:	4313      	orrs	r3, r2
 800ceae:	3401      	adds	r4, #1
 800ceb0:	9304      	str	r3, [sp, #16]
 800ceb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb6:	4829      	ldr	r0, [pc, #164]	; (800cf5c <_vfiprintf_r+0x224>)
 800ceb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cebc:	2206      	movs	r2, #6
 800cebe:	f7f3 f9bf 	bl	8000240 <memchr>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d03f      	beq.n	800cf46 <_vfiprintf_r+0x20e>
 800cec6:	4b26      	ldr	r3, [pc, #152]	; (800cf60 <_vfiprintf_r+0x228>)
 800cec8:	bb1b      	cbnz	r3, 800cf12 <_vfiprintf_r+0x1da>
 800ceca:	9b03      	ldr	r3, [sp, #12]
 800cecc:	3307      	adds	r3, #7
 800cece:	f023 0307 	bic.w	r3, r3, #7
 800ced2:	3308      	adds	r3, #8
 800ced4:	9303      	str	r3, [sp, #12]
 800ced6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced8:	443b      	add	r3, r7
 800ceda:	9309      	str	r3, [sp, #36]	; 0x24
 800cedc:	e768      	b.n	800cdb0 <_vfiprintf_r+0x78>
 800cede:	fb0c 3202 	mla	r2, ip, r2, r3
 800cee2:	460c      	mov	r4, r1
 800cee4:	2001      	movs	r0, #1
 800cee6:	e7a6      	b.n	800ce36 <_vfiprintf_r+0xfe>
 800cee8:	2300      	movs	r3, #0
 800ceea:	3401      	adds	r4, #1
 800ceec:	9305      	str	r3, [sp, #20]
 800ceee:	4619      	mov	r1, r3
 800cef0:	f04f 0c0a 	mov.w	ip, #10
 800cef4:	4620      	mov	r0, r4
 800cef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cefa:	3a30      	subs	r2, #48	; 0x30
 800cefc:	2a09      	cmp	r2, #9
 800cefe:	d903      	bls.n	800cf08 <_vfiprintf_r+0x1d0>
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d0c6      	beq.n	800ce92 <_vfiprintf_r+0x15a>
 800cf04:	9105      	str	r1, [sp, #20]
 800cf06:	e7c4      	b.n	800ce92 <_vfiprintf_r+0x15a>
 800cf08:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e7f0      	b.n	800cef4 <_vfiprintf_r+0x1bc>
 800cf12:	ab03      	add	r3, sp, #12
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	462a      	mov	r2, r5
 800cf18:	4b12      	ldr	r3, [pc, #72]	; (800cf64 <_vfiprintf_r+0x22c>)
 800cf1a:	a904      	add	r1, sp, #16
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7fb ff3f 	bl	8008da0 <_printf_float>
 800cf22:	4607      	mov	r7, r0
 800cf24:	1c78      	adds	r0, r7, #1
 800cf26:	d1d6      	bne.n	800ced6 <_vfiprintf_r+0x19e>
 800cf28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf2a:	07d9      	lsls	r1, r3, #31
 800cf2c:	d405      	bmi.n	800cf3a <_vfiprintf_r+0x202>
 800cf2e:	89ab      	ldrh	r3, [r5, #12]
 800cf30:	059a      	lsls	r2, r3, #22
 800cf32:	d402      	bmi.n	800cf3a <_vfiprintf_r+0x202>
 800cf34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf36:	f7fc fe85 	bl	8009c44 <__retarget_lock_release_recursive>
 800cf3a:	89ab      	ldrh	r3, [r5, #12]
 800cf3c:	065b      	lsls	r3, r3, #25
 800cf3e:	f53f af1d 	bmi.w	800cd7c <_vfiprintf_r+0x44>
 800cf42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf44:	e71c      	b.n	800cd80 <_vfiprintf_r+0x48>
 800cf46:	ab03      	add	r3, sp, #12
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <_vfiprintf_r+0x22c>)
 800cf4e:	a904      	add	r1, sp, #16
 800cf50:	4630      	mov	r0, r6
 800cf52:	f7fc f9ad 	bl	80092b0 <_printf_i>
 800cf56:	e7e4      	b.n	800cf22 <_vfiprintf_r+0x1ea>
 800cf58:	0800e0b9 	.word	0x0800e0b9
 800cf5c:	0800e0c3 	.word	0x0800e0c3
 800cf60:	08008da1 	.word	0x08008da1
 800cf64:	0800cd15 	.word	0x0800cd15
 800cf68:	0800e0bf 	.word	0x0800e0bf

0800cf6c <__swbuf_r>:
 800cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6e:	460e      	mov	r6, r1
 800cf70:	4614      	mov	r4, r2
 800cf72:	4605      	mov	r5, r0
 800cf74:	b118      	cbz	r0, 800cf7e <__swbuf_r+0x12>
 800cf76:	6a03      	ldr	r3, [r0, #32]
 800cf78:	b90b      	cbnz	r3, 800cf7e <__swbuf_r+0x12>
 800cf7a:	f7fc fd4b 	bl	8009a14 <__sinit>
 800cf7e:	69a3      	ldr	r3, [r4, #24]
 800cf80:	60a3      	str	r3, [r4, #8]
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	071a      	lsls	r2, r3, #28
 800cf86:	d525      	bpl.n	800cfd4 <__swbuf_r+0x68>
 800cf88:	6923      	ldr	r3, [r4, #16]
 800cf8a:	b31b      	cbz	r3, 800cfd4 <__swbuf_r+0x68>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	6922      	ldr	r2, [r4, #16]
 800cf90:	1a98      	subs	r0, r3, r2
 800cf92:	6963      	ldr	r3, [r4, #20]
 800cf94:	b2f6      	uxtb	r6, r6
 800cf96:	4283      	cmp	r3, r0
 800cf98:	4637      	mov	r7, r6
 800cf9a:	dc04      	bgt.n	800cfa6 <__swbuf_r+0x3a>
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f7ff fa2c 	bl	800c3fc <_fflush_r>
 800cfa4:	b9e0      	cbnz	r0, 800cfe0 <__swbuf_r+0x74>
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	60a3      	str	r3, [r4, #8]
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	1c5a      	adds	r2, r3, #1
 800cfb0:	6022      	str	r2, [r4, #0]
 800cfb2:	701e      	strb	r6, [r3, #0]
 800cfb4:	6962      	ldr	r2, [r4, #20]
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d004      	beq.n	800cfc6 <__swbuf_r+0x5a>
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	07db      	lsls	r3, r3, #31
 800cfc0:	d506      	bpl.n	800cfd0 <__swbuf_r+0x64>
 800cfc2:	2e0a      	cmp	r6, #10
 800cfc4:	d104      	bne.n	800cfd0 <__swbuf_r+0x64>
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f7ff fa17 	bl	800c3fc <_fflush_r>
 800cfce:	b938      	cbnz	r0, 800cfe0 <__swbuf_r+0x74>
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f000 f806 	bl	800cfe8 <__swsetup_r>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d0d5      	beq.n	800cf8c <__swbuf_r+0x20>
 800cfe0:	f04f 37ff 	mov.w	r7, #4294967295
 800cfe4:	e7f4      	b.n	800cfd0 <__swbuf_r+0x64>
	...

0800cfe8 <__swsetup_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4b2a      	ldr	r3, [pc, #168]	; (800d094 <__swsetup_r+0xac>)
 800cfec:	4605      	mov	r5, r0
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	460c      	mov	r4, r1
 800cff2:	b118      	cbz	r0, 800cffc <__swsetup_r+0x14>
 800cff4:	6a03      	ldr	r3, [r0, #32]
 800cff6:	b90b      	cbnz	r3, 800cffc <__swsetup_r+0x14>
 800cff8:	f7fc fd0c 	bl	8009a14 <__sinit>
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d002:	0718      	lsls	r0, r3, #28
 800d004:	d422      	bmi.n	800d04c <__swsetup_r+0x64>
 800d006:	06d9      	lsls	r1, r3, #27
 800d008:	d407      	bmi.n	800d01a <__swsetup_r+0x32>
 800d00a:	2309      	movs	r3, #9
 800d00c:	602b      	str	r3, [r5, #0]
 800d00e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d012:	81a3      	strh	r3, [r4, #12]
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	e034      	b.n	800d084 <__swsetup_r+0x9c>
 800d01a:	0758      	lsls	r0, r3, #29
 800d01c:	d512      	bpl.n	800d044 <__swsetup_r+0x5c>
 800d01e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d020:	b141      	cbz	r1, 800d034 <__swsetup_r+0x4c>
 800d022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d026:	4299      	cmp	r1, r3
 800d028:	d002      	beq.n	800d030 <__swsetup_r+0x48>
 800d02a:	4628      	mov	r0, r5
 800d02c:	f7fd fc08 	bl	800a840 <_free_r>
 800d030:	2300      	movs	r3, #0
 800d032:	6363      	str	r3, [r4, #52]	; 0x34
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d03a:	81a3      	strh	r3, [r4, #12]
 800d03c:	2300      	movs	r3, #0
 800d03e:	6063      	str	r3, [r4, #4]
 800d040:	6923      	ldr	r3, [r4, #16]
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f043 0308 	orr.w	r3, r3, #8
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	6923      	ldr	r3, [r4, #16]
 800d04e:	b94b      	cbnz	r3, 800d064 <__swsetup_r+0x7c>
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d05a:	d003      	beq.n	800d064 <__swsetup_r+0x7c>
 800d05c:	4621      	mov	r1, r4
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 f884 	bl	800d16c <__smakebuf_r>
 800d064:	89a0      	ldrh	r0, [r4, #12]
 800d066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d06a:	f010 0301 	ands.w	r3, r0, #1
 800d06e:	d00a      	beq.n	800d086 <__swsetup_r+0x9e>
 800d070:	2300      	movs	r3, #0
 800d072:	60a3      	str	r3, [r4, #8]
 800d074:	6963      	ldr	r3, [r4, #20]
 800d076:	425b      	negs	r3, r3
 800d078:	61a3      	str	r3, [r4, #24]
 800d07a:	6923      	ldr	r3, [r4, #16]
 800d07c:	b943      	cbnz	r3, 800d090 <__swsetup_r+0xa8>
 800d07e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d082:	d1c4      	bne.n	800d00e <__swsetup_r+0x26>
 800d084:	bd38      	pop	{r3, r4, r5, pc}
 800d086:	0781      	lsls	r1, r0, #30
 800d088:	bf58      	it	pl
 800d08a:	6963      	ldrpl	r3, [r4, #20]
 800d08c:	60a3      	str	r3, [r4, #8]
 800d08e:	e7f4      	b.n	800d07a <__swsetup_r+0x92>
 800d090:	2000      	movs	r0, #0
 800d092:	e7f7      	b.n	800d084 <__swsetup_r+0x9c>
 800d094:	20000074 	.word	0x20000074

0800d098 <_raise_r>:
 800d098:	291f      	cmp	r1, #31
 800d09a:	b538      	push	{r3, r4, r5, lr}
 800d09c:	4604      	mov	r4, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	d904      	bls.n	800d0ac <_raise_r+0x14>
 800d0a2:	2316      	movs	r3, #22
 800d0a4:	6003      	str	r3, [r0, #0]
 800d0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d0ae:	b112      	cbz	r2, 800d0b6 <_raise_r+0x1e>
 800d0b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0b4:	b94b      	cbnz	r3, 800d0ca <_raise_r+0x32>
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 f830 	bl	800d11c <_getpid_r>
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4601      	mov	r1, r0
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0c6:	f000 b817 	b.w	800d0f8 <_kill_r>
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d00a      	beq.n	800d0e4 <_raise_r+0x4c>
 800d0ce:	1c59      	adds	r1, r3, #1
 800d0d0:	d103      	bne.n	800d0da <_raise_r+0x42>
 800d0d2:	2316      	movs	r3, #22
 800d0d4:	6003      	str	r3, [r0, #0]
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	e7e7      	b.n	800d0aa <_raise_r+0x12>
 800d0da:	2400      	movs	r4, #0
 800d0dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	4798      	blx	r3
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e7e0      	b.n	800d0aa <_raise_r+0x12>

0800d0e8 <raise>:
 800d0e8:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <raise+0xc>)
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f7ff bfd3 	b.w	800d098 <_raise_r>
 800d0f2:	bf00      	nop
 800d0f4:	20000074 	.word	0x20000074

0800d0f8 <_kill_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4d07      	ldr	r5, [pc, #28]	; (800d118 <_kill_r+0x20>)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	4604      	mov	r4, r0
 800d100:	4608      	mov	r0, r1
 800d102:	4611      	mov	r1, r2
 800d104:	602b      	str	r3, [r5, #0]
 800d106:	f7f4 ff13 	bl	8001f30 <_kill>
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	d102      	bne.n	800d114 <_kill_r+0x1c>
 800d10e:	682b      	ldr	r3, [r5, #0]
 800d110:	b103      	cbz	r3, 800d114 <_kill_r+0x1c>
 800d112:	6023      	str	r3, [r4, #0]
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	bf00      	nop
 800d118:	20000668 	.word	0x20000668

0800d11c <_getpid_r>:
 800d11c:	f7f4 bf00 	b.w	8001f20 <_getpid>

0800d120 <__swhatbuf_r>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	460c      	mov	r4, r1
 800d124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d128:	2900      	cmp	r1, #0
 800d12a:	b096      	sub	sp, #88	; 0x58
 800d12c:	4615      	mov	r5, r2
 800d12e:	461e      	mov	r6, r3
 800d130:	da0d      	bge.n	800d14e <__swhatbuf_r+0x2e>
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d138:	f04f 0100 	mov.w	r1, #0
 800d13c:	bf0c      	ite	eq
 800d13e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d142:	2340      	movne	r3, #64	; 0x40
 800d144:	2000      	movs	r0, #0
 800d146:	6031      	str	r1, [r6, #0]
 800d148:	602b      	str	r3, [r5, #0]
 800d14a:	b016      	add	sp, #88	; 0x58
 800d14c:	bd70      	pop	{r4, r5, r6, pc}
 800d14e:	466a      	mov	r2, sp
 800d150:	f000 f848 	bl	800d1e4 <_fstat_r>
 800d154:	2800      	cmp	r0, #0
 800d156:	dbec      	blt.n	800d132 <__swhatbuf_r+0x12>
 800d158:	9901      	ldr	r1, [sp, #4]
 800d15a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d15e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d162:	4259      	negs	r1, r3
 800d164:	4159      	adcs	r1, r3
 800d166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d16a:	e7eb      	b.n	800d144 <__swhatbuf_r+0x24>

0800d16c <__smakebuf_r>:
 800d16c:	898b      	ldrh	r3, [r1, #12]
 800d16e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d170:	079d      	lsls	r5, r3, #30
 800d172:	4606      	mov	r6, r0
 800d174:	460c      	mov	r4, r1
 800d176:	d507      	bpl.n	800d188 <__smakebuf_r+0x1c>
 800d178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	2301      	movs	r3, #1
 800d182:	6163      	str	r3, [r4, #20]
 800d184:	b002      	add	sp, #8
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	ab01      	add	r3, sp, #4
 800d18a:	466a      	mov	r2, sp
 800d18c:	f7ff ffc8 	bl	800d120 <__swhatbuf_r>
 800d190:	9900      	ldr	r1, [sp, #0]
 800d192:	4605      	mov	r5, r0
 800d194:	4630      	mov	r0, r6
 800d196:	f7fd fbc7 	bl	800a928 <_malloc_r>
 800d19a:	b948      	cbnz	r0, 800d1b0 <__smakebuf_r+0x44>
 800d19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a0:	059a      	lsls	r2, r3, #22
 800d1a2:	d4ef      	bmi.n	800d184 <__smakebuf_r+0x18>
 800d1a4:	f023 0303 	bic.w	r3, r3, #3
 800d1a8:	f043 0302 	orr.w	r3, r3, #2
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	e7e3      	b.n	800d178 <__smakebuf_r+0xc>
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	6020      	str	r0, [r4, #0]
 800d1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b8:	81a3      	strh	r3, [r4, #12]
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	6163      	str	r3, [r4, #20]
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	6120      	str	r0, [r4, #16]
 800d1c2:	b15b      	cbz	r3, 800d1dc <__smakebuf_r+0x70>
 800d1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f000 f81d 	bl	800d208 <_isatty_r>
 800d1ce:	b128      	cbz	r0, 800d1dc <__smakebuf_r+0x70>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f023 0303 	bic.w	r3, r3, #3
 800d1d6:	f043 0301 	orr.w	r3, r3, #1
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	431d      	orrs	r5, r3
 800d1e0:	81a5      	strh	r5, [r4, #12]
 800d1e2:	e7cf      	b.n	800d184 <__smakebuf_r+0x18>

0800d1e4 <_fstat_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d07      	ldr	r5, [pc, #28]	; (800d204 <_fstat_r+0x20>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	f7f4 fefc 	bl	8001fee <_fstat>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	d102      	bne.n	800d200 <_fstat_r+0x1c>
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	b103      	cbz	r3, 800d200 <_fstat_r+0x1c>
 800d1fe:	6023      	str	r3, [r4, #0]
 800d200:	bd38      	pop	{r3, r4, r5, pc}
 800d202:	bf00      	nop
 800d204:	20000668 	.word	0x20000668

0800d208 <_isatty_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4d06      	ldr	r5, [pc, #24]	; (800d224 <_isatty_r+0x1c>)
 800d20c:	2300      	movs	r3, #0
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	602b      	str	r3, [r5, #0]
 800d214:	f7f4 fefb 	bl	800200e <_isatty>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d102      	bne.n	800d222 <_isatty_r+0x1a>
 800d21c:	682b      	ldr	r3, [r5, #0]
 800d21e:	b103      	cbz	r3, 800d222 <_isatty_r+0x1a>
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	20000668 	.word	0x20000668

0800d228 <_init>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	bf00      	nop
 800d22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d22e:	bc08      	pop	{r3}
 800d230:	469e      	mov	lr, r3
 800d232:	4770      	bx	lr

0800d234 <_fini>:
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	bf00      	nop
 800d238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23a:	bc08      	pop	{r3}
 800d23c:	469e      	mov	lr, r3
 800d23e:	4770      	bx	lr
