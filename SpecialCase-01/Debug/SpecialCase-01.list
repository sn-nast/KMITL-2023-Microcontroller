
SpecialCase-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d5c  08004d5c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d64  08004d64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000064  08004dd0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08004dd0  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa47  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc4  00000000  00000000  0002ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000614  00000000  00000000  0002cee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027004  00000000  00000000  0002d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cde1  00000000  00000000  000544f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f133c  00000000  00000000  000612d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000245c  00000000  00000000  00152618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00154a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c8c 	.word	0x08004c8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08004c8c 	.word	0x08004c8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_GPIO_Init+0x90>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <MX_GPIO_Init+0x90>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_GPIO_Init+0x90>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_GPIO_Init+0x90>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_GPIO_Init+0x90>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_GPIO_Init+0x90>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_GPIO_Init+0x90>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <MX_GPIO_Init+0x90>)
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_GPIO_Init+0x90>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0x94>)
 8000652:	f001 f973 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000656:	f244 0381 	movw	r3, #16513	; 0x4081
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x94>)
 8000670:	f000 feac 	bl	80013cc <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fca3 	bl	8000fd8 <HAL_Delay>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <printOut>:

void printOut(const char * text)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {}
 80006a4:	bf00      	nop
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <printOut+0x34>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b0:	2b40      	cmp	r3, #64	; 0x40
 80006b2:	d1f8      	bne.n	80006a6 <printOut+0xa>
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fdc3 	bl	8000240 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4803      	ldr	r0, [pc, #12]	; (80006d0 <printOut+0x34>)
 80006c4:	f002 fa9b 	bl	8002bfe <HAL_UART_Transmit>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000198 	.word	0x20000198

080006d4 <receiveUserInput>:
	printOut(text);
	printOut("\r\n");
}

void receiveUserInput()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	receiveTextLength = 0;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <receiveUserInput+0x80>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
	char ch = 'a';
 80006e0:	2361      	movs	r3, #97	; 0x61
 80006e2:	71fb      	strb	r3, [r7, #7]
	while(ch != '\r')
 80006e4:	e023      	b.n	800072e <receiveUserInput+0x5a>
	{
		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {}
 80006e6:	bf00      	nop
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <receiveUserInput+0x84>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	2b20      	cmp	r3, #32
 80006f4:	d1f8      	bne.n	80006e8 <receiveUserInput+0x14>
		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 100);
 80006f6:	1df9      	adds	r1, r7, #7
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	2201      	movs	r2, #1
 80006fc:	4816      	ldr	r0, [pc, #88]	; (8000758 <receiveUserInput+0x84>)
 80006fe:	f002 fb01 	bl	8002d04 <HAL_UART_Receive>
		//SAVE INPUT TO GLobal STRING
		receiveText[receiveTextLength++]= ch;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <receiveUserInput+0x80>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	4912      	ldr	r1, [pc, #72]	; (8000754 <receiveUserInput+0x80>)
 800070a:	600a      	str	r2, [r1, #0]
 800070c:	79f9      	ldrb	r1, [r7, #7]
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <receiveUserInput+0x88>)
 8000710:	54d1      	strb	r1, [r2, r3]
		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8000712:	bf00      	nop
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <receiveUserInput+0x84>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071e:	2b40      	cmp	r3, #64	; 0x40
 8000720:	d1f8      	bne.n	8000714 <receiveUserInput+0x40>
		HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 100);
 8000722:	1df9      	adds	r1, r7, #7
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	2201      	movs	r2, #1
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <receiveUserInput+0x84>)
 800072a:	f002 fa68 	bl	8002bfe <HAL_UART_Transmit>
	while(ch != '\r')
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b0d      	cmp	r3, #13
 8000732:	d1d8      	bne.n	80006e6 <receiveUserInput+0x12>
	}
	//ADD "/r/n"
	receiveText[receiveTextLength++]= '\n';
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <receiveUserInput+0x80>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	4906      	ldr	r1, [pc, #24]	; (8000754 <receiveUserInput+0x80>)
 800073c:	600a      	str	r2, [r1, #0]
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <receiveUserInput+0x88>)
 8000740:	210a      	movs	r1, #10
 8000742:	54d1      	strb	r1, [r2, r3]
	printOut("\n");
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <receiveUserInput+0x8c>)
 8000746:	f7ff ffa9 	bl	800069c <printOut>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000b4 	.word	0x200000b4
 8000758:	20000198 	.word	0x20000198
 800075c:	20000080 	.word	0x20000080
 8000760:	08004ca8 	.word	0x08004ca8

08000764 <sentMessage>:

void sentMessage(char * text)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_TC) == RESET) {}
 800076c:	bf00      	nop
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <sentMessage+0x3c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000778:	2b40      	cmp	r3, #64	; 0x40
 800077a:	d1f8      	bne.n	800076e <sentMessage+0xa>
	HAL_UART_Transmit(&huart6, (uint8_t*)text, strlen(text), 1000);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fd5f 	bl	8000240 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <sentMessage+0x3c>)
 800078e:	f002 fa36 	bl	8002bfe <HAL_UART_Transmit>
	isSendable = 0;
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <sentMessage+0x40>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000220 	.word	0x20000220
 80007a4:	20000004 	.word	0x20000004

080007a8 <inputName>:

void inputName()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	printOut("\tName: ");
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <inputName+0x34>)
 80007ae:	f7ff ff75 	bl	800069c <printOut>
	receiveUserInput();
 80007b2:	f7ff ff8f 	bl	80006d4 <receiveUserInput>

	// Text require "\r\n"
	sentMessage(receiveText);
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <inputName+0x38>)
 80007b8:	f7ff ffd4 	bl	8000764 <sentMessage>

	strncpy(myUserName, receiveText, receiveTextLength-2);
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <inputName+0x3c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3b02      	subs	r3, #2
 80007c2:	461a      	mov	r2, r3
 80007c4:	4906      	ldr	r1, [pc, #24]	; (80007e0 <inputName+0x38>)
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <inputName+0x40>)
 80007c8:	f003 fdc8 	bl	800435c <strncpy>
	myUserName[receiveTextLength-2] = '\0';
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <inputName+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b02      	subs	r3, #2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <inputName+0x40>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	54d1      	strb	r1, [r2, r3]
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08004cac 	.word	0x08004cac
 80007e0:	20000080 	.word	0x20000080
 80007e4:	200000b4 	.word	0x200000b4
 80007e8:	200000b8 	.word	0x200000b8

080007ec <checkCoUserIsReady>:

void checkCoUserIsReady()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09a      	sub	sp, #104	; 0x68
 80007f0:	af00      	add	r7, sp, #0
	while (isFirstRx) { }
 80007f2:	bf00      	nop
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <checkCoUserIsReady+0x2c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1fb      	bne.n	80007f4 <checkCoUserIsReady+0x8>
	char text[100];
	sprintf(text,"\t%s is ready\r\n", coUserName);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <checkCoUserIsReady+0x30>)
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <checkCoUserIsReady+0x34>)
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fd82 	bl	800430c <siprintf>
	printOut(text);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff46 	bl	800069c <printOut>
}
 8000810:	bf00      	nop
 8000812:	3768      	adds	r7, #104	; 0x68
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000000 	.word	0x20000000
 800081c:	200000ec 	.word	0x200000ec
 8000820:	08004cb4 	.word	0x08004cb4

08000824 <checkQuitStatus>:

void checkQuitStatus(char *text)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if (text[0] == 'q' && text[2] == '\n')
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b71      	cmp	r3, #113	; 0x71
 8000832:	d10d      	bne.n	8000850 <checkQuitStatus+0x2c>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3302      	adds	r3, #2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b0a      	cmp	r3, #10
 800083c:	d108      	bne.n	8000850 <checkQuitStatus+0x2c>
	{
		isQuit = 1;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <checkQuitStatus+0x34>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
		isSendable = 0;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <checkQuitStatus+0x38>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    	HAL_UART_DeInit(&huart6);
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <checkQuitStatus+0x3c>)
 800084c:	f002 f99a 	bl	8002b84 <HAL_UART_DeInit>
	}
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000190 	.word	0x20000190
 800085c:	20000004 	.word	0x20000004
 8000860:	20000220 	.word	0x20000220

08000864 <userInputText>:

void userInputText()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09a      	sub	sp, #104	; 0x68
 8000868:	af00      	add	r7, sp, #0
	char text[100];
	sprintf(text,"\t %s => ", myUserName);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <userInputText+0x28>)
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <userInputText+0x2c>)
 8000870:	4618      	mov	r0, r3
 8000872:	f003 fd4b 	bl	800430c <siprintf>
	printOut(text);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff0f 	bl	800069c <printOut>
	receiveUserInput();
 800087e:	f7ff ff29 	bl	80006d4 <receiveUserInput>
}
 8000882:	bf00      	nop
 8000884:	3768      	adds	r7, #104	; 0x68
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000b8 	.word	0x200000b8
 8000890:	08004cc4 	.word	0x08004cc4

08000894 <showReceivedMessage>:

void showReceivedMessage()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09a      	sub	sp, #104	; 0x68
 8000898:	af00      	add	r7, sp, #0
	if (strlen(receivedMessage) == 0) {return;}
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <showReceivedMessage+0x2c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00a      	beq.n	80008b8 <showReceivedMessage+0x24>
	char text[100];
	sprintf(text,"\t %s : %s\r\n", coUserName, receivedMessage);
 80008a2:	1d38      	adds	r0, r7, #4
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <showReceivedMessage+0x2c>)
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <showReceivedMessage+0x30>)
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <showReceivedMessage+0x34>)
 80008aa:	f003 fd2f 	bl	800430c <siprintf>
	printOut(text);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fef3 	bl	800069c <printOut>
 80008b6:	e000      	b.n	80008ba <showReceivedMessage+0x26>
	if (strlen(receivedMessage) == 0) {return;}
 80008b8:	bf00      	nop
}
 80008ba:	3768      	adds	r7, #104	; 0x68
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000128 	.word	0x20000128
 80008c4:	200000ec 	.word	0x200000ec
 80008c8:	08004cd0 	.word	0x08004cd0

080008cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    if (rxData[0] == '\n')
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <HAL_UART_RxCpltCallback+0xa8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b0a      	cmp	r3, #10
 80008da:	d139      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x84>
    {
    	HAL_UART_Init(&huart3);
 80008dc:	4826      	ldr	r0, [pc, #152]	; (8000978 <HAL_UART_RxCpltCallback+0xac>)
 80008de:	f002 f903 	bl	8002ae8 <HAL_UART_Init>
        // End of message received, process it
    	receivedMessage[--receivedIndex] = '\0';
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <HAL_UART_RxCpltCallback+0xb0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	4a24      	ldr	r2, [pc, #144]	; (800097c <HAL_UART_RxCpltCallback+0xb0>)
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <HAL_UART_RxCpltCallback+0xb0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a23      	ldr	r2, [pc, #140]	; (8000980 <HAL_UART_RxCpltCallback+0xb4>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	54d1      	strb	r1, [r2, r3]
        if (isFirstRx)
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <HAL_UART_RxCpltCallback+0xb8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00a      	beq.n	8000914 <HAL_UART_RxCpltCallback+0x48>
        {
        	strcpy(coUserName, receivedMessage);
 80008fe:	4920      	ldr	r1, [pc, #128]	; (8000980 <HAL_UART_RxCpltCallback+0xb4>)
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <HAL_UART_RxCpltCallback+0xbc>)
 8000902:	f003 fd6b 	bl	80043dc <strcpy>
        	isFirstRx = 0;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <HAL_UART_RxCpltCallback+0xb8>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
        	isSendable = 1;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_UART_RxCpltCallback+0xc0>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e019      	b.n	8000948 <HAL_UART_RxCpltCallback+0x7c>
        } else if (receivedMessage[0] == 'q' && receivedMessage[1] == '\0')
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <HAL_UART_RxCpltCallback+0xb4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b71      	cmp	r3, #113	; 0x71
 800091a:	d10d      	bne.n	8000938 <HAL_UART_RxCpltCallback+0x6c>
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_RxCpltCallback+0xb4>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <HAL_UART_RxCpltCallback+0x6c>
		{
        	isQuit = 1;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_UART_RxCpltCallback+0xc4>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
        	isSendable = 0;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_RxCpltCallback+0xc0>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
        	HAL_UART_DeInit(&huart6);
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <HAL_UART_RxCpltCallback+0xc8>)
 8000932:	f002 f927 	bl	8002b84 <HAL_UART_DeInit>
 8000936:	e007      	b.n	8000948 <HAL_UART_RxCpltCallback+0x7c>
		} else
        {
        	showReceivedMessage();
 8000938:	f7ff ffac 	bl	8000894 <showReceivedMessage>
        	receivedMessage[0]='\0';
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_UART_RxCpltCallback+0xb4>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
        	isSendable = 1;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_UART_RxCpltCallback+0xc0>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
        }
        // Reset the index for the next message
        receivedIndex = 0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_UART_RxCpltCallback+0xb0>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e008      	b.n	8000962 <HAL_UART_RxCpltCallback+0x96>
    } else
    {
    	receivedMessage[receivedIndex++] = rxData[0];
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_UART_RxCpltCallback+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <HAL_UART_RxCpltCallback+0xb0>)
 8000958:	600a      	str	r2, [r1, #0]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_UART_RxCpltCallback+0xa8>)
 800095c:	7811      	ldrb	r1, [r2, #0]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_UART_RxCpltCallback+0xb4>)
 8000960:	54d1      	strb	r1, [r2, r3]
    }

    // Enable UART receive interrupt again
    HAL_UART_Receive_IT(&huart6, (uint8_t*)rxData, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	4903      	ldr	r1, [pc, #12]	; (8000974 <HAL_UART_RxCpltCallback+0xa8>)
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_UART_RxCpltCallback+0xc8>)
 8000968:	f002 fa90 	bl	8002e8c <HAL_UART_Receive_IT>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000120 	.word	0x20000120
 8000978:	20000198 	.word	0x20000198
 800097c:	2000018c 	.word	0x2000018c
 8000980:	20000128 	.word	0x20000128
 8000984:	20000000 	.word	0x20000000
 8000988:	200000ec 	.word	0x200000ec
 800098c:	20000004 	.word	0x20000004
 8000990:	20000190 	.word	0x20000190
 8000994:	20000220 	.word	0x20000220

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 fabe 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f84d 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f7ff fe21 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009aa:	f000 f94b 	bl	8000c44 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80009ae:	f000 f979 	bl	8000ca4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  const char WELCOME_TEXT[] = "Man from U.A.R.T.1!\r\nQuit PRESS q\r\n";
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <main+0x88>)
 80009b4:	1d3c      	adds	r4, r7, #4
 80009b6:	461d      	mov	r5, r3
 80009b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	6023      	str	r3, [r4, #0]


  HAL_UART_Receive_IT(&huart6, (uint8_t*)rxData, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	4917      	ldr	r1, [pc, #92]	; (8000a24 <main+0x8c>)
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <main+0x90>)
 80009ca:	f002 fa5f 	bl	8002e8c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printOut(WELCOME_TEXT);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fe63 	bl	800069c <printOut>
	  inputName();
 80009d6:	f7ff fee7 	bl	80007a8 <inputName>
	  checkCoUserIsReady();
 80009da:	f7ff ff07 	bl	80007ec <checkCoUserIsReady>

	  while(!isQuit)
 80009de:	e014      	b.n	8000a0a <main+0x72>
//		  		  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET&& !isSendable && !isQuit) {}
//		  	  		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 100);
//		  }
		  while(isSendable)
		  {
			  userInputText();
 80009e0:	f7ff ff40 	bl	8000864 <userInputText>
			  sentMessage(receiveText);
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <main+0x94>)
 80009e6:	f7ff febd 	bl	8000764 <sentMessage>
			  checkQuitStatus(receiveText);
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <main+0x94>)
 80009ec:	f7ff ff1a 	bl	8000824 <checkQuitStatus>
			  HAL_UART_DeInit(&huart3);
 80009f0:	480f      	ldr	r0, [pc, #60]	; (8000a30 <main+0x98>)
 80009f2:	f002 f8c7 	bl	8002b84 <HAL_UART_DeInit>
			  delay(100);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f7ff fe44 	bl	8000684 <delay>
		  while(isSendable)
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <main+0x9c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1ed      	bne.n	80009e0 <main+0x48>
		  }
		  delay(10);
 8000a04:	200a      	movs	r0, #10
 8000a06:	f7ff fe3d 	bl	8000684 <delay>
	  while(!isQuit)
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <main+0xa0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f4      	beq.n	80009fc <main+0x64>
	  }
	  HAL_UART_Init(&huart3);
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <main+0x98>)
 8000a14:	f002 f868 	bl	8002ae8 <HAL_UART_Init>
	  printOut("QUIT\r\n");
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <main+0xa4>)
 8000a1a:	f7ff fe3f 	bl	800069c <printOut>
	  while(1){}
 8000a1e:	e7fe      	b.n	8000a1e <main+0x86>
 8000a20:	08004ce4 	.word	0x08004ce4
 8000a24:	20000120 	.word	0x20000120
 8000a28:	20000220 	.word	0x20000220
 8000a2c:	20000080 	.word	0x20000080
 8000a30:	20000198 	.word	0x20000198
 8000a34:	20000004 	.word	0x20000004
 8000a38:	20000190 	.word	0x20000190
 8000a3c:	08004cdc 	.word	0x08004cdc

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fc7c 	bl	800434c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemClock_Config+0xb0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemClock_Config+0xb0>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemClock_Config+0xb0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <SystemClock_Config+0xb4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <SystemClock_Config+0xb4>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <SystemClock_Config+0xb4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 ff5f 	bl	8001970 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 f81e 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 f9f8 	bl	8001ecc <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ae2:	f000 f809 	bl	8000af8 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3750      	adds	r7, #80	; 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f9fe 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <USART6_IRQHandler+0x10>)
 8000ba6:	f002 f9b5 	bl	8002f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000220 	.word	0x20000220

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f003 fbce 	bl	8004384 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20080000 	.word	0x20080000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000194 	.word	0x20000194
 8000c1c:	200003f8 	.word	0x200003f8

08000c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <MX_USART3_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c88:	f001 ff2e 	bl	8002ae8 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f7ff ff31 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000198 	.word	0x20000198
 8000ca0:	40004800 	.word	0x40004800

08000ca4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_USART6_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART6_UART_Init+0x58>)
 8000ce8:	f001 fefe 	bl	8002ae8 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f7ff ff01 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000220 	.word	0x20000220
 8000d00:	40011400 	.word	0x40011400

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0b0      	sub	sp, #192	; 0xc0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	2290      	movs	r2, #144	; 0x90
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fb11 	bl	800434c <memset>
  if(uartHandle->Instance==USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a47      	ldr	r2, [pc, #284]	; (8000e4c <HAL_UART_MspInit+0x148>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13d      	bne.n	8000db0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 faa8 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff fed3 	bl	8000af8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d52:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a3e      	ldr	r2, [pc, #248]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a38      	ldr	r2, [pc, #224]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da6:	4619      	mov	r1, r3
 8000da8:	482a      	ldr	r0, [pc, #168]	; (8000e54 <HAL_UART_MspInit+0x150>)
 8000daa:	f000 fb0f 	bl	80013cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000dae:	e049      	b.n	8000e44 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART6)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_UART_MspInit+0x154>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d144      	bne.n	8000e44 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fa65 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000dd4:	f7ff fe90 	bl	8000af8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	6453      	str	r3, [r2, #68]	; 0x44
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_UART_MspInit+0x14c>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000e08:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e22:	2308      	movs	r3, #8
 8000e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_UART_MspInit+0x158>)
 8000e30:	f000 facc 	bl	80013cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	2047      	movs	r0, #71	; 0x47
 8000e3a:	f000 f9f0 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e3e:	2047      	movs	r0, #71	; 0x47
 8000e40:	f000 fa09 	bl	8001256 <HAL_NVIC_EnableIRQ>
}
 8000e44:	bf00      	nop
 8000e46:	37c0      	adds	r7, #192	; 0xc0
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004800 	.word	0x40004800
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40011400 	.word	0x40011400
 8000e5c:	40021800 	.word	0x40021800

08000e60 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <HAL_UART_MspDeInit+0x58>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10b      	bne.n	8000e8a <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_UART_MspDeInit+0x5c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_UART_MspDeInit+0x5c>)
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8000e7e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <HAL_UART_MspDeInit+0x60>)
 8000e84:	f000 fc4e 	bl	8001724 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 8000e88:	e012      	b.n	8000eb0 <HAL_UART_MspDeInit+0x50>
  else if(uartHandle->Instance==USART6)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_UART_MspDeInit+0x64>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d10d      	bne.n	8000eb0 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART6_CLK_DISABLE();
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_UART_MspDeInit+0x5c>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_UART_MspDeInit+0x5c>)
 8000e9a:	f023 0320 	bic.w	r3, r3, #32
 8000e9e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_14);
 8000ea0:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <HAL_UART_MspDeInit+0x68>)
 8000ea6:	f000 fc3d 	bl	8001724 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000eaa:	2047      	movs	r0, #71	; 0x47
 8000eac:	f000 f9e1 	bl	8001272 <HAL_NVIC_DisableIRQ>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40011400 	.word	0x40011400
 8000ec8:	40021800 	.word	0x40021800

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee8:	4c0b      	ldr	r4, [pc, #44]	; (8000f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef6:	f7ff fe93 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 fa49 	bl	8004390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fd4b 	bl	8000998 <main>
  bx  lr    
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f10:	08004d6c 	.word	0x08004d6c
  ldr r2, =_sbss
 8000f14:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f18:	200003f4 	.word	0x200003f4

08000f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC_IRQHandler>

08000f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f970 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f805 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2e:	f7ff fde9 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f999 	bl	800128e <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f953 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000010 	.word	0x20000010
 8000f94:	2000000c 	.word	0x2000000c

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	200002a8 	.word	0x200002a8

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200002a8 	.word	0x200002a8

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000010 	.word	0x20000010

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0000 	.word	0x05fa0000

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db12      	blt.n	80010f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	490a      	ldr	r1, [pc, #40]	; (8001104 <__NVIC_DisableIRQ+0x44>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	3320      	adds	r3, #32
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ec:	f3bf 8f4f 	dsb	sy
}
 80010f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f2:	f3bf 8f6f 	isb	sy
}
 80010f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff05 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff1a 	bl	8001068 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff0d 	bl	8001084 <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff1d 	bl	80010c0 <__NVIC_DisableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff94 	bl	80011c4 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fe84 	bl	8000fc0 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d008      	beq.n	80012d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e052      	b.n	800137e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0216 	bic.w	r2, r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <HAL_DMA_Abort+0x62>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0208 	bic.w	r2, r2, #8
 8001316:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001328:	e013      	b.n	8001352 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800132a:	f7ff fe49 	bl	8000fc0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b05      	cmp	r3, #5
 8001336:	d90c      	bls.n	8001352 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2220      	movs	r2, #32
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e015      	b.n	800137e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e4      	bne.n	800132a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001364:	223f      	movs	r2, #63	; 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d004      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e00c      	b.n	80013be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2205      	movs	r2, #5
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e175      	b.n	80016d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8164 	bne.w	80016d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_GPIO_Init+0x56>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b03      	cmp	r3, #3
 800148e:	d017      	beq.n	80014c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d123      	bne.n	8001514 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80be 	beq.w	80016d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800156e:	4a61      	ldr	r2, [pc, #388]	; (80016f4 <HAL_GPIO_Init+0x328>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_GPIO_Init+0x32c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d037      	beq.n	800160a <HAL_GPIO_Init+0x23e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_GPIO_Init+0x330>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d031      	beq.n	8001606 <HAL_GPIO_Init+0x23a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a56      	ldr	r2, [pc, #344]	; (8001700 <HAL_GPIO_Init+0x334>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02b      	beq.n	8001602 <HAL_GPIO_Init+0x236>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a55      	ldr	r2, [pc, #340]	; (8001704 <HAL_GPIO_Init+0x338>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x232>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_GPIO_Init+0x33c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x22e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_GPIO_Init+0x340>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x22a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_GPIO_Init+0x344>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x226>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_GPIO_Init+0x348>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x222>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_GPIO_Init+0x34c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x21e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4f      	ldr	r2, [pc, #316]	; (800171c <HAL_GPIO_Init+0x350>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x21a>
 80015e2:	2309      	movs	r3, #9
 80015e4:	e012      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015e6:	230a      	movs	r3, #10
 80015e8:	e010      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015ea:	2308      	movs	r3, #8
 80015ec:	e00e      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00c      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015f2:	2306      	movs	r3, #6
 80015f4:	e00a      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015f6:	2305      	movs	r3, #5
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015fa:	2304      	movs	r3, #4
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x240>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x240>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x240>
 800160a:	2300      	movs	r3, #0
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x328>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_GPIO_Init+0x354>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a34      	ldr	r2, [pc, #208]	; (8001720 <HAL_GPIO_Init+0x354>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <HAL_GPIO_Init+0x354>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a29      	ldr	r2, [pc, #164]	; (8001720 <HAL_GPIO_Init+0x354>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_GPIO_Init+0x354>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a2:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_GPIO_Init+0x354>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_GPIO_Init+0x354>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_GPIO_Init+0x354>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f67f ae86 	bls.w	80013ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40021400 	.word	0x40021400
 8001710:	40021800 	.word	0x40021800
 8001714:	40021c00 	.word	0x40021c00
 8001718:	40022000 	.word	0x40022000
 800171c:	40022400 	.word	0x40022400
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e0d9      	b.n	80018f4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001740:	2201      	movs	r2, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	429a      	cmp	r2, r3
 8001758:	f040 80c9 	bne.w	80018ee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800175c:	4a6b      	ldr	r2, [pc, #428]	; (800190c <HAL_GPIO_DeInit+0x1e8>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	4013      	ands	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_GPIO_DeInit+0x1ec>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d037      	beq.n	80017f6 <HAL_GPIO_DeInit+0xd2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a62      	ldr	r2, [pc, #392]	; (8001914 <HAL_GPIO_DeInit+0x1f0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d031      	beq.n	80017f2 <HAL_GPIO_DeInit+0xce>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a61      	ldr	r2, [pc, #388]	; (8001918 <HAL_GPIO_DeInit+0x1f4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_GPIO_DeInit+0xca>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a60      	ldr	r2, [pc, #384]	; (800191c <HAL_GPIO_DeInit+0x1f8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d025      	beq.n	80017ea <HAL_GPIO_DeInit+0xc6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a5f      	ldr	r2, [pc, #380]	; (8001920 <HAL_GPIO_DeInit+0x1fc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01f      	beq.n	80017e6 <HAL_GPIO_DeInit+0xc2>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_GPIO_DeInit+0x200>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_GPIO_DeInit+0xbe>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a5d      	ldr	r2, [pc, #372]	; (8001928 <HAL_GPIO_DeInit+0x204>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_DeInit+0xba>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a5c      	ldr	r2, [pc, #368]	; (800192c <HAL_GPIO_DeInit+0x208>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_DeInit+0xb6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a5b      	ldr	r2, [pc, #364]	; (8001930 <HAL_GPIO_DeInit+0x20c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_DeInit+0xb2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_GPIO_DeInit+0x210>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_DeInit+0xae>
 80017ce:	2309      	movs	r3, #9
 80017d0:	e012      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017d2:	230a      	movs	r3, #10
 80017d4:	e010      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e00e      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017da:	2307      	movs	r3, #7
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_DeInit+0xd4>
 80017f6:	2300      	movs	r3, #0
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d132      	bne.n	800186e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	4949      	ldr	r1, [pc, #292]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 8001812:	4013      	ands	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43db      	mvns	r3, r3
 800181e:	4946      	ldr	r1, [pc, #280]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 8001820:	4013      	ands	r3, r2
 8001822:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001824:	4b44      	ldr	r3, [pc, #272]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	4942      	ldr	r1, [pc, #264]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 800182e:	4013      	ands	r3, r2
 8001830:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	493f      	ldr	r1, [pc, #252]	; (8001938 <HAL_GPIO_DeInit+0x214>)
 800183c:	4013      	ands	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_GPIO_DeInit+0x1e8>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	43da      	mvns	r2, r3
 8001860:	482a      	ldr	r0, [pc, #168]	; (800190c <HAL_GPIO_DeInit+0x1e8>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	400a      	ands	r2, r1
 8001868:	3302      	adds	r3, #2
 800186a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2103      	movs	r1, #3
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	08d2      	lsrs	r2, r2, #3
 80018a4:	4019      	ands	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2103      	movs	r1, #3
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2103      	movs	r1, #3
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f af22 	bls.w	8001740 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40021400 	.word	0x40021400
 8001928:	40021800 	.word	0x40021800
 800192c:	40021c00 	.word	0x40021c00
 8001930:	40022000 	.word	0x40022000
 8001934:	40022400 	.word	0x40022400
 8001938:	40013c00 	.word	0x40013c00

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001958:	e003      	b.n	8001962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	041a      	lsls	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e29b      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8087 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001994:	4b96      	ldr	r3, [pc, #600]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d00c      	beq.n	80019ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a0:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d112      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62>
 80019ac:	4b90      	ldr	r3, [pc, #576]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b8:	d10b      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ba:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d06c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x130>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d168      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e275      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x7a>
 80019dc:	4b84      	ldr	r3, [pc, #528]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a83      	ldr	r2, [pc, #524]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e02e      	b.n	8001a48 <HAL_RCC_OscConfig+0xd8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x9c>
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7b      	ldr	r2, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0xd8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0xc0>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xd8>
 8001a30:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6b      	ldr	r2, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fab6 	bl	8000fc0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fab2 	bl	8000fc0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e229      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe8>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff faa2 	bl	8000fc0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fa9e 	bl	8000fc0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e215      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x110>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d069      	beq.n	8001b82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x190>
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x17a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1e9      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	493d      	ldr	r1, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e040      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa54 	bl	8000fc0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa50 	bl	8000fc0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1c7      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4929      	ldr	r1, [pc, #164]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
 8001b4e:	e018      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa30 	bl	8000fc0 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fa2c 	bl	8000fc0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1a3      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d038      	beq.n	8001c00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fa0d 	bl	8000fc0 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff fa09 	bl	8000fc0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e180      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x23a>
 8001bc8:	e01a      	b.n	8001c00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f9f3 	bl	8000fc0 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff f9ef 	bl	8000fc0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d903      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e166      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
 8001bf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a4 	beq.w	8001d56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a88      	ldr	r2, [pc, #544]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b86      	ldr	r3, [pc, #536]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c42:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7f      	ldr	r2, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f9b7 	bl	8000fc0 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff f9b3 	bl	8000fc0 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e12a      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x31a>
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a6f      	ldr	r2, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	e02d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x33c>
 8001c92:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x35e>
 8001cb4:	4b62      	ldr	r3, [pc, #392]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	4a61      	ldr	r2, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a5e      	ldr	r2, [pc, #376]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
 8001cce:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f967 	bl	8000fc0 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7ff f963 	bl	8000fc0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0d8      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ee      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x386>
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f951 	bl	8000fc0 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff f94d 	bl	8000fc0 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0c2      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80ae 	beq.w	8001ebc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d06d      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d14b      	bne.n	8001e0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff f91e 	bl	8000fc0 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f91a 	bl	8000fc0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e091      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	071b      	lsls	r3, r3, #28
 8001dd2:	491b      	ldr	r1, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8ec 	bl	8000fc0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f8e8 	bl	8000fc0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e05f      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x47c>
 8001e0a:	e057      	b.n	8001ebc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f8d2 	bl	8000fc0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f8ce 	bl	8000fc0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e045      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4b0>
 8001e3e:	e03d      	b.n	8001ebc <HAL_RCC_OscConfig+0x54c>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCC_OscConfig+0x558>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d030      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d129      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d122      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d119      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d0      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	4965      	ldr	r1, [pc, #404]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e073      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06b      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4936      	ldr	r1, [pc, #216]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fffe 	bl	8000fc0 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe fffa 	bl	8000fc0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e053      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4922      	ldr	r1, [pc, #136]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490a      	ldr	r1, [pc, #40]	; (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1d0>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1d4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe ff5a 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00
 8002094:	40023800 	.word	0x40023800
 8002098:	08004d10 	.word	0x08004d10
 800209c:	20000008 	.word	0x20000008
 80020a0:	2000000c 	.word	0x2000000c

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b090      	sub	sp, #64	; 0x40
 80020aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
 80020b0:	2300      	movs	r3, #0
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d00d      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x40>
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	f200 80a1 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x16c>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x3a>
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_GetSysClockFreq+0x184>)
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020dc:	e09b      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020de:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020e2:	e098      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020ee:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d028      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	2200      	movs	r2, #0
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	627a      	str	r2, [r7, #36]	; 0x24
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800210c:	2100      	movs	r1, #0
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 8002110:	fb03 f201 	mul.w	r2, r3, r1
 8002114:	2300      	movs	r3, #0
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	4413      	add	r3, r2
 800211c:	4a43      	ldr	r2, [pc, #268]	; (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 800211e:	fba0 1202 	umull	r1, r2, r0, r2
 8002122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002124:	460a      	mov	r2, r1
 8002126:	62ba      	str	r2, [r7, #40]	; 0x28
 8002128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212a:	4413      	add	r3, r2
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002130:	2200      	movs	r2, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	61fa      	str	r2, [r7, #28]
 8002136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800213e:	f7fe f8d7 	bl	80002f0 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4613      	mov	r3, r2
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214a:	e053      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	2200      	movs	r2, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	617a      	str	r2, [r7, #20]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800215e:	f04f 0b00 	mov.w	fp, #0
 8002162:	4652      	mov	r2, sl
 8002164:	465b      	mov	r3, fp
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	0159      	lsls	r1, r3, #5
 8002170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002174:	0150      	lsls	r0, r2, #5
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ebb2 080a 	subs.w	r8, r2, sl
 800217e:	eb63 090b 	sbc.w	r9, r3, fp
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800218e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002196:	ebb2 0408 	subs.w	r4, r2, r8
 800219a:	eb63 0509 	sbc.w	r5, r3, r9
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	00eb      	lsls	r3, r5, #3
 80021a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ac:	00e2      	lsls	r2, r4, #3
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	eb14 030a 	adds.w	r3, r4, sl
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	eb45 030b 	adc.w	r3, r5, fp
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	2200      	movs	r2, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e8:	f7fe f882 	bl	80002f0 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4613      	mov	r3, r2
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0x184>)
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002218:	4618      	mov	r0, r3
 800221a:	3740      	adds	r7, #64	; 0x40
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	017d7840 	.word	0x017d7840

08002230 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000008 	.word	0x20000008

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	08004d20 	.word	0x08004d20

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffdc 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0b5b      	lsrs	r3, r3, #13
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	08004d20 	.word	0x08004d20

08002298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d012      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a68      	ldr	r2, [pc, #416]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ca:	6093      	str	r3, [r2, #8]
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	4964      	ldr	r1, [pc, #400]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d017      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f2:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	4959      	ldr	r1, [pc, #356]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002310:	d101      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d017      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	494a      	ldr	r1, [pc, #296]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 808b 	beq.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	4a39      	ldr	r2, [pc, #228]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	; 0x40
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a0:	f7fe fe0e 	bl	8000fc0 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7fe fe0a 	bl	8000fc0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e38f      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ba:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023c6:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d035      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d02e      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e4:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d114      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fdd2 	bl	8000fc0 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe fdce 	bl	8000fc0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e351      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ee      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800244e:	d111      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800245e:	400b      	ands	r3, r1
 8002460:	4901      	ldr	r1, [pc, #4]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
 8002466:	e00b      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000
 8002470:	0ffffcff 	.word	0x0ffffcff
 8002474:	4bac      	ldr	r3, [pc, #688]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4aab      	ldr	r2, [pc, #684]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	4ba9      	ldr	r3, [pc, #676]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	49a6      	ldr	r1, [pc, #664]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248e:	4313      	orrs	r3, r2
 8002490:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d010      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800249e:	4ba2      	ldr	r3, [pc, #648]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a4:	4aa0      	ldr	r2, [pc, #640]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ae:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	499b      	ldr	r1, [pc, #620]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024cc:	4b96      	ldr	r3, [pc, #600]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024da:	4993      	ldr	r1, [pc, #588]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ee:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024fc:	498a      	ldr	r1, [pc, #552]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002510:	4b85      	ldr	r3, [pc, #532]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251e:	4982      	ldr	r1, [pc, #520]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002532:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4979      	ldr	r1, [pc, #484]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002554:	4b74      	ldr	r3, [pc, #464]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4971      	ldr	r1, [pc, #452]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f023 020c 	bic.w	r2, r3, #12
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	4968      	ldr	r1, [pc, #416]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002598:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4960      	ldr	r1, [pc, #384]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ba:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	4957      	ldr	r1, [pc, #348]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025dc:	4b52      	ldr	r3, [pc, #328]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	494f      	ldr	r1, [pc, #316]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025fe:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4946      	ldr	r1, [pc, #280]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	493e      	ldr	r1, [pc, #248]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002672:	492d      	ldr	r1, [pc, #180]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002694:	4924      	ldr	r1, [pc, #144]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	4914      	ldr	r1, [pc, #80]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f8:	490b      	ldr	r1, [pc, #44]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00f      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271c:	4902      	ldr	r1, [pc, #8]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002724:	e002      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	4986      	ldr	r1, [pc, #536]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800275c:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800275e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800276c:	497d      	ldr	r1, [pc, #500]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d006      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80d6 	beq.w	8002934 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002788:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a75      	ldr	r2, [pc, #468]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002794:	f7fe fc14 	bl	8000fc0 <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800279c:	f7fe fc10 	bl	8000fc0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e195      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027ae:	4b6d      	ldr	r3, [pc, #436]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d021      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027dc:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e2:	0e1b      	lsrs	r3, r3, #24
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	019a      	lsls	r2, r3, #6
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	4958      	ldr	r1, [pc, #352]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02e      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002834:	d129      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002836:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002844:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284a:	0f1b      	lsrs	r3, r3, #28
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	019a      	lsls	r2, r3, #6
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	493e      	ldr	r1, [pc, #248]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002878:	f023 021f 	bic.w	r2, r3, #31
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	3b01      	subs	r3, #1
 8002882:	4938      	ldr	r1, [pc, #224]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01d      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002896:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289c:	0e1b      	lsrs	r3, r3, #24
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	0f1b      	lsrs	r3, r3, #28
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	019a      	lsls	r2, r3, #6
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	431a      	orrs	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	071b      	lsls	r3, r3, #28
 80028ca:	4926      	ldr	r1, [pc, #152]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d011      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	019a      	lsls	r2, r3, #6
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	071b      	lsls	r3, r3, #28
 80028fa:	491a      	ldr	r1, [pc, #104]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290e:	f7fe fb57 	bl	8000fc0 <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002916:	f7fe fb53 	bl	8000fc0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0d8      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b01      	cmp	r3, #1
 8002938:	f040 80ce 	bne.w	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002948:	f7fe fb3a 	bl	8000fc0 <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800294e:	e00b      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002950:	f7fe fb36 	bl	8000fc0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d904      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0bb      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002968:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002974:	d0ec      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02e      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12a      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800299e:	4b51      	ldr	r3, [pc, #324]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029ac:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	0f1b      	lsrs	r3, r3, #28
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	019a      	lsls	r2, r3, #6
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	071b      	lsls	r3, r3, #28
 80029d2:	4944      	ldr	r1, [pc, #272]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	493d      	ldr	r1, [pc, #244]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d022      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a08:	d11d      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	0e1b      	lsrs	r3, r3, #24
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a18:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	0f1b      	lsrs	r3, r3, #28
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	019a      	lsls	r2, r3, #6
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431a      	orrs	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	071b      	lsls	r3, r3, #28
 8002a3e:	4929      	ldr	r1, [pc, #164]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d028      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	0e1b      	lsrs	r3, r3, #24
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a60:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	019a      	lsls	r2, r3, #6
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	071b      	lsls	r3, r3, #28
 8002a86:	4917      	ldr	r1, [pc, #92]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4911      	ldr	r1, [pc, #68]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fa86 	bl	8000fc0 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ab8:	f7fe fa82 	bl	8000fc0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e007      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad6:	d1ef      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e040      	b.n	8002b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f8fa 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fd06 	bl	8003538 <UART_SetConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 ff5e 	bl	8003a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 ffe5 	bl	8003b44 <UART_CheckIdleState>
 8002b7a:	4603      	mov	r3, r0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e02f      	b.n	8002bf6 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2224      	movs	r2, #36	; 0x24
 8002b9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe f94b 	bl	8000e60 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d171      	bne.n	8002cfa <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_UART_Transmit+0x24>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06a      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c34:	f7fe f9c4 	bl	8000fc0 <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	d108      	bne.n	8002c66 <HAL_UART_Transmit+0x68>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e003      	b.n	8002c6e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c6e:	e02c      	b.n	8002cca <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 ffaf 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e038      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e007      	b.n	8002cb8 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1cc      	bne.n	8002c70 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 ff7c 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e005      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 80b1 	bne.w	8002e82 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Receive+0x28>
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0a9      	b.n	8002e84 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2222      	movs	r2, #34	; 0x22
 8002d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f93b 	bl	8000fc0 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d64:	d10e      	bne.n	8002d84 <HAL_UART_Receive+0x80>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_UART_Receive+0x76>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d78:	e02d      	b.n	8002dd6 <HAL_UART_Receive+0xd2>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	22ff      	movs	r2, #255	; 0xff
 8002d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d82:	e028      	b.n	8002dd6 <HAL_UART_Receive+0xd2>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_UART_Receive+0xa4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_UART_Receive+0x9a>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	22ff      	movs	r2, #255	; 0xff
 8002d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d9c:	e01b      	b.n	8002dd6 <HAL_UART_Receive+0xd2>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	227f      	movs	r2, #127	; 0x7f
 8002da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002da6:	e016      	b.n	8002dd6 <HAL_UART_Receive+0xd2>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db0:	d10d      	bne.n	8002dce <HAL_UART_Receive+0xca>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Receive+0xc0>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	227f      	movs	r2, #127	; 0x7f
 8002dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dc2:	e008      	b.n	8002dd6 <HAL_UART_Receive+0xd2>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	223f      	movs	r2, #63	; 0x3f
 8002dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dcc:	e003      	b.n	8002dd6 <HAL_UART_Receive+0xd2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ddc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de6:	d108      	bne.n	8002dfa <HAL_UART_Receive+0xf6>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e003      	b.n	8002e02 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e02:	e032      	b.n	8002e6a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fee5 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e032      	b.n	8002e84 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10c      	bne.n	8002e3e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	8a7b      	ldrh	r3, [r7, #18]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e00c      	b.n	8002e58 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	8a7b      	ldrh	r3, [r7, #18]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1c6      	bne.n	8002e04 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d132      	bne.n	8002f0a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_UART_Receive_IT+0x24>
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e02b      	b.n	8002f0c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d018      	beq.n	8002efa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	69f9      	ldr	r1, [r7, #28]
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e6      	bne.n	8002ec8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 ff33 	bl	8003d6c <UART_Start_Receive_IT>
 8002f06:	4603      	mov	r3, r0
 8002f08:	e000      	b.n	8002f0c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b0ba      	sub	sp, #232	; 0xe8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f42:	4013      	ands	r3, r2
 8002f44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d115      	bne.n	8002f7c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 82ac 	beq.w	80034ca <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
      }
      return;
 8002f7a:	e2a6      	b.n	80034ca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8117 	beq.w	80031b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f96:	4b85      	ldr	r3, [pc, #532]	; (80031ac <HAL_UART_IRQHandler+0x298>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 810a 	beq.w	80031b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d011      	beq.n	8002fd0 <HAL_UART_IRQHandler+0xbc>
 8002fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d011      	beq.n	8003000 <HAL_UART_IRQHandler+0xec>
 8002fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2202      	movs	r2, #2
 8002fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff6:	f043 0204 	orr.w	r2, r3, #4
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d011      	beq.n	8003030 <HAL_UART_IRQHandler+0x11c>
 800300c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2204      	movs	r2, #4
 800301e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	f043 0202 	orr.w	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800303c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2208      	movs	r2, #8
 800305a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	f043 0208 	orr.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_UART_IRQHandler+0x18a>
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800308c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8212 	beq.w	80034ce <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d005      	beq.n	80030f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d04f      	beq.n	8003196 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fefe 	bl	8003ef8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d141      	bne.n	800318e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3308      	adds	r3, #8
 8003110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3308      	adds	r3, #8
 8003132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800313a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1d9      	bne.n	800310a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <HAL_UART_IRQHandler+0x29c>)
 8003164:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f90b 	bl	8001386 <HAL_DMA_Abort_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003180:	4610      	mov	r0, r2
 8003182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e00f      	b.n	80031a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9b6 	bl	80034f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	e00b      	b.n	80031a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9b2 	bl	80034f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	e007      	b.n	80031a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f9ae 	bl	80034f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80031a4:	e193      	b.n	80034ce <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a6:	bf00      	nop
    return;
 80031a8:	e191      	b.n	80034ce <HAL_UART_IRQHandler+0x5ba>
 80031aa:	bf00      	nop
 80031ac:	04000120 	.word	0x04000120
 80031b0:	08003fc1 	.word	0x08003fc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 814c 	bne.w	8003456 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8145 	beq.w	8003456 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 813e 	beq.w	8003456 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2210      	movs	r2, #16
 80031e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	f040 80b6 	bne.w	800335e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8165 	beq.w	80034d2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003212:	429a      	cmp	r2, r3
 8003214:	f080 815d 	bcs.w	80034d2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322c:	f000 8086 	beq.w	800333c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800325a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800325e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1da      	bne.n	8003230 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3308      	adds	r3, #8
 8003280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800328a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3308      	adds	r3, #8
 800329a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800329e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e1      	bne.n	800327a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e3      	bne.n	80032b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330c:	f023 0310 	bic.w	r3, r3, #16
 8003310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800331e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003320:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800332c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e4      	bne.n	80032fc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd ffb5 	bl	80012a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800334e:	b29b      	uxth	r3, r3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	b29b      	uxth	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8d8 	bl	800350c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800335c:	e0b9      	b.n	80034d2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800336a:	b29b      	uxth	r3, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80ab 	beq.w	80034d6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a6 	beq.w	80034d6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800339e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
 80033ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e4      	bne.n	800338a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	623b      	str	r3, [r7, #32]
   return(result);
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3308      	adds	r3, #8
 80033e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033e4:	633a      	str	r2, [r7, #48]	; 0x30
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e3      	bne.n	80033c0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	60fb      	str	r3, [r7, #12]
   return(result);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f023 0310 	bic.w	r3, r3, #16
 8003420:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	617b      	str	r3, [r7, #20]
   return(result);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e4      	bne.n	800340c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f85c 	bl	800350c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003454:	e03f      	b.n	80034d6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <HAL_UART_IRQHandler+0x56c>
 8003462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003476:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f853 	bl	8003524 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800347e:	e02d      	b.n	80034dc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800348c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
    }
    return;
 80034a8:	e017      	b.n	80034da <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d012      	beq.n	80034dc <HAL_UART_IRQHandler+0x5c8>
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fd92 	bl	8003fec <UART_EndTransmit_IT>
    return;
 80034c8:	e008      	b.n	80034dc <HAL_UART_IRQHandler+0x5c8>
      return;
 80034ca:	bf00      	nop
 80034cc:	e006      	b.n	80034dc <HAL_UART_IRQHandler+0x5c8>
    return;
 80034ce:	bf00      	nop
 80034d0:	e004      	b.n	80034dc <HAL_UART_IRQHandler+0x5c8>
      return;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <HAL_UART_IRQHandler+0x5c8>
      return;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_UART_IRQHandler+0x5c8>
    return;
 80034da:	bf00      	nop
  }

}
 80034dc:	37e8      	adds	r7, #232	; 0xe8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop

080034e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4ba6      	ldr	r3, [pc, #664]	; (80037fc <UART_SetConfig+0x2c4>)
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	6979      	ldr	r1, [r7, #20]
 800356c:	430b      	orrs	r3, r1
 800356e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a94      	ldr	r2, [pc, #592]	; (8003800 <UART_SetConfig+0x2c8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d120      	bne.n	80035f6 <UART_SetConfig+0xbe>
 80035b4:	4b93      	ldr	r3, [pc, #588]	; (8003804 <UART_SetConfig+0x2cc>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d816      	bhi.n	80035f0 <UART_SetConfig+0xb8>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x90>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035e5 	.word	0x080035e5
 80035d0:	080035df 	.word	0x080035df
 80035d4:	080035eb 	.word	0x080035eb
 80035d8:	2301      	movs	r3, #1
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e150      	b.n	8003880 <UART_SetConfig+0x348>
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e14d      	b.n	8003880 <UART_SetConfig+0x348>
 80035e4:	2304      	movs	r3, #4
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e14a      	b.n	8003880 <UART_SetConfig+0x348>
 80035ea:	2308      	movs	r3, #8
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e147      	b.n	8003880 <UART_SetConfig+0x348>
 80035f0:	2310      	movs	r3, #16
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e144      	b.n	8003880 <UART_SetConfig+0x348>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a83      	ldr	r2, [pc, #524]	; (8003808 <UART_SetConfig+0x2d0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d132      	bne.n	8003666 <UART_SetConfig+0x12e>
 8003600:	4b80      	ldr	r3, [pc, #512]	; (8003804 <UART_SetConfig+0x2cc>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d828      	bhi.n	8003660 <UART_SetConfig+0x128>
 800360e:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <UART_SetConfig+0xdc>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003649 	.word	0x08003649
 8003618:	08003661 	.word	0x08003661
 800361c:	08003661 	.word	0x08003661
 8003620:	08003661 	.word	0x08003661
 8003624:	08003655 	.word	0x08003655
 8003628:	08003661 	.word	0x08003661
 800362c:	08003661 	.word	0x08003661
 8003630:	08003661 	.word	0x08003661
 8003634:	0800364f 	.word	0x0800364f
 8003638:	08003661 	.word	0x08003661
 800363c:	08003661 	.word	0x08003661
 8003640:	08003661 	.word	0x08003661
 8003644:	0800365b 	.word	0x0800365b
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e118      	b.n	8003880 <UART_SetConfig+0x348>
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e115      	b.n	8003880 <UART_SetConfig+0x348>
 8003654:	2304      	movs	r3, #4
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e112      	b.n	8003880 <UART_SetConfig+0x348>
 800365a:	2308      	movs	r3, #8
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e10f      	b.n	8003880 <UART_SetConfig+0x348>
 8003660:	2310      	movs	r3, #16
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e10c      	b.n	8003880 <UART_SetConfig+0x348>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a68      	ldr	r2, [pc, #416]	; (800380c <UART_SetConfig+0x2d4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d120      	bne.n	80036b2 <UART_SetConfig+0x17a>
 8003670:	4b64      	ldr	r3, [pc, #400]	; (8003804 <UART_SetConfig+0x2cc>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d013      	beq.n	80036a6 <UART_SetConfig+0x16e>
 800367e:	2b30      	cmp	r3, #48	; 0x30
 8003680:	d814      	bhi.n	80036ac <UART_SetConfig+0x174>
 8003682:	2b20      	cmp	r3, #32
 8003684:	d009      	beq.n	800369a <UART_SetConfig+0x162>
 8003686:	2b20      	cmp	r3, #32
 8003688:	d810      	bhi.n	80036ac <UART_SetConfig+0x174>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <UART_SetConfig+0x15c>
 800368e:	2b10      	cmp	r3, #16
 8003690:	d006      	beq.n	80036a0 <UART_SetConfig+0x168>
 8003692:	e00b      	b.n	80036ac <UART_SetConfig+0x174>
 8003694:	2300      	movs	r3, #0
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e0f2      	b.n	8003880 <UART_SetConfig+0x348>
 800369a:	2302      	movs	r3, #2
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0ef      	b.n	8003880 <UART_SetConfig+0x348>
 80036a0:	2304      	movs	r3, #4
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0ec      	b.n	8003880 <UART_SetConfig+0x348>
 80036a6:	2308      	movs	r3, #8
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e0e9      	b.n	8003880 <UART_SetConfig+0x348>
 80036ac:	2310      	movs	r3, #16
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e0e6      	b.n	8003880 <UART_SetConfig+0x348>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a56      	ldr	r2, [pc, #344]	; (8003810 <UART_SetConfig+0x2d8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d120      	bne.n	80036fe <UART_SetConfig+0x1c6>
 80036bc:	4b51      	ldr	r3, [pc, #324]	; (8003804 <UART_SetConfig+0x2cc>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036c6:	2bc0      	cmp	r3, #192	; 0xc0
 80036c8:	d013      	beq.n	80036f2 <UART_SetConfig+0x1ba>
 80036ca:	2bc0      	cmp	r3, #192	; 0xc0
 80036cc:	d814      	bhi.n	80036f8 <UART_SetConfig+0x1c0>
 80036ce:	2b80      	cmp	r3, #128	; 0x80
 80036d0:	d009      	beq.n	80036e6 <UART_SetConfig+0x1ae>
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d810      	bhi.n	80036f8 <UART_SetConfig+0x1c0>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <UART_SetConfig+0x1a8>
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d006      	beq.n	80036ec <UART_SetConfig+0x1b4>
 80036de:	e00b      	b.n	80036f8 <UART_SetConfig+0x1c0>
 80036e0:	2300      	movs	r3, #0
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e0cc      	b.n	8003880 <UART_SetConfig+0x348>
 80036e6:	2302      	movs	r3, #2
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e0c9      	b.n	8003880 <UART_SetConfig+0x348>
 80036ec:	2304      	movs	r3, #4
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0c6      	b.n	8003880 <UART_SetConfig+0x348>
 80036f2:	2308      	movs	r3, #8
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e0c3      	b.n	8003880 <UART_SetConfig+0x348>
 80036f8:	2310      	movs	r3, #16
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e0c0      	b.n	8003880 <UART_SetConfig+0x348>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a44      	ldr	r2, [pc, #272]	; (8003814 <UART_SetConfig+0x2dc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d125      	bne.n	8003754 <UART_SetConfig+0x21c>
 8003708:	4b3e      	ldr	r3, [pc, #248]	; (8003804 <UART_SetConfig+0x2cc>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003716:	d017      	beq.n	8003748 <UART_SetConfig+0x210>
 8003718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371c:	d817      	bhi.n	800374e <UART_SetConfig+0x216>
 800371e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003722:	d00b      	beq.n	800373c <UART_SetConfig+0x204>
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d811      	bhi.n	800374e <UART_SetConfig+0x216>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <UART_SetConfig+0x1fe>
 800372e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003732:	d006      	beq.n	8003742 <UART_SetConfig+0x20a>
 8003734:	e00b      	b.n	800374e <UART_SetConfig+0x216>
 8003736:	2300      	movs	r3, #0
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e0a1      	b.n	8003880 <UART_SetConfig+0x348>
 800373c:	2302      	movs	r3, #2
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e09e      	b.n	8003880 <UART_SetConfig+0x348>
 8003742:	2304      	movs	r3, #4
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e09b      	b.n	8003880 <UART_SetConfig+0x348>
 8003748:	2308      	movs	r3, #8
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e098      	b.n	8003880 <UART_SetConfig+0x348>
 800374e:	2310      	movs	r3, #16
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e095      	b.n	8003880 <UART_SetConfig+0x348>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <UART_SetConfig+0x2e0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d125      	bne.n	80037aa <UART_SetConfig+0x272>
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <UART_SetConfig+0x2cc>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376c:	d017      	beq.n	800379e <UART_SetConfig+0x266>
 800376e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003772:	d817      	bhi.n	80037a4 <UART_SetConfig+0x26c>
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	d00b      	beq.n	8003792 <UART_SetConfig+0x25a>
 800377a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377e:	d811      	bhi.n	80037a4 <UART_SetConfig+0x26c>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <UART_SetConfig+0x254>
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d006      	beq.n	8003798 <UART_SetConfig+0x260>
 800378a:	e00b      	b.n	80037a4 <UART_SetConfig+0x26c>
 800378c:	2301      	movs	r3, #1
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e076      	b.n	8003880 <UART_SetConfig+0x348>
 8003792:	2302      	movs	r3, #2
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e073      	b.n	8003880 <UART_SetConfig+0x348>
 8003798:	2304      	movs	r3, #4
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e070      	b.n	8003880 <UART_SetConfig+0x348>
 800379e:	2308      	movs	r3, #8
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e06d      	b.n	8003880 <UART_SetConfig+0x348>
 80037a4:	2310      	movs	r3, #16
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e06a      	b.n	8003880 <UART_SetConfig+0x348>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <UART_SetConfig+0x2e4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d138      	bne.n	8003826 <UART_SetConfig+0x2ee>
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <UART_SetConfig+0x2cc>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037c2:	d017      	beq.n	80037f4 <UART_SetConfig+0x2bc>
 80037c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037c8:	d82a      	bhi.n	8003820 <UART_SetConfig+0x2e8>
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	d00b      	beq.n	80037e8 <UART_SetConfig+0x2b0>
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d4:	d824      	bhi.n	8003820 <UART_SetConfig+0x2e8>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <UART_SetConfig+0x2aa>
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037de:	d006      	beq.n	80037ee <UART_SetConfig+0x2b6>
 80037e0:	e01e      	b.n	8003820 <UART_SetConfig+0x2e8>
 80037e2:	2300      	movs	r3, #0
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e04b      	b.n	8003880 <UART_SetConfig+0x348>
 80037e8:	2302      	movs	r3, #2
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e048      	b.n	8003880 <UART_SetConfig+0x348>
 80037ee:	2304      	movs	r3, #4
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e045      	b.n	8003880 <UART_SetConfig+0x348>
 80037f4:	2308      	movs	r3, #8
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e042      	b.n	8003880 <UART_SetConfig+0x348>
 80037fa:	bf00      	nop
 80037fc:	efff69f3 	.word	0xefff69f3
 8003800:	40011000 	.word	0x40011000
 8003804:	40023800 	.word	0x40023800
 8003808:	40004400 	.word	0x40004400
 800380c:	40004800 	.word	0x40004800
 8003810:	40004c00 	.word	0x40004c00
 8003814:	40005000 	.word	0x40005000
 8003818:	40011400 	.word	0x40011400
 800381c:	40007800 	.word	0x40007800
 8003820:	2310      	movs	r3, #16
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e02c      	b.n	8003880 <UART_SetConfig+0x348>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a72      	ldr	r2, [pc, #456]	; (80039f4 <UART_SetConfig+0x4bc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d125      	bne.n	800387c <UART_SetConfig+0x344>
 8003830:	4b71      	ldr	r3, [pc, #452]	; (80039f8 <UART_SetConfig+0x4c0>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800383a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800383e:	d017      	beq.n	8003870 <UART_SetConfig+0x338>
 8003840:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003844:	d817      	bhi.n	8003876 <UART_SetConfig+0x33e>
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384a:	d00b      	beq.n	8003864 <UART_SetConfig+0x32c>
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	d811      	bhi.n	8003876 <UART_SetConfig+0x33e>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <UART_SetConfig+0x326>
 8003856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385a:	d006      	beq.n	800386a <UART_SetConfig+0x332>
 800385c:	e00b      	b.n	8003876 <UART_SetConfig+0x33e>
 800385e:	2300      	movs	r3, #0
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e00d      	b.n	8003880 <UART_SetConfig+0x348>
 8003864:	2302      	movs	r3, #2
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e00a      	b.n	8003880 <UART_SetConfig+0x348>
 800386a:	2304      	movs	r3, #4
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e007      	b.n	8003880 <UART_SetConfig+0x348>
 8003870:	2308      	movs	r3, #8
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e004      	b.n	8003880 <UART_SetConfig+0x348>
 8003876:	2310      	movs	r3, #16
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e001      	b.n	8003880 <UART_SetConfig+0x348>
 800387c:	2310      	movs	r3, #16
 800387e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	d15b      	bne.n	8003942 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800388a:	7ffb      	ldrb	r3, [r7, #31]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d828      	bhi.n	80038e2 <UART_SetConfig+0x3aa>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <UART_SetConfig+0x360>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	080038cd 	.word	0x080038cd
 80038a4:	080038e3 	.word	0x080038e3
 80038a8:	080038d3 	.word	0x080038d3
 80038ac:	080038e3 	.word	0x080038e3
 80038b0:	080038e3 	.word	0x080038e3
 80038b4:	080038e3 	.word	0x080038e3
 80038b8:	080038db 	.word	0x080038db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038bc:	f7fe fcc4 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 80038c0:	61b8      	str	r0, [r7, #24]
        break;
 80038c2:	e013      	b.n	80038ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c4:	f7fe fcd4 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 80038c8:	61b8      	str	r0, [r7, #24]
        break;
 80038ca:	e00f      	b.n	80038ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038cc:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <UART_SetConfig+0x4c4>)
 80038ce:	61bb      	str	r3, [r7, #24]
        break;
 80038d0:	e00c      	b.n	80038ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d2:	f7fe fbe7 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80038d6:	61b8      	str	r0, [r7, #24]
        break;
 80038d8:	e008      	b.n	80038ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038de:	61bb      	str	r3, [r7, #24]
        break;
 80038e0:	e004      	b.n	80038ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	77bb      	strb	r3, [r7, #30]
        break;
 80038ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d074      	beq.n	80039dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	005a      	lsls	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	441a      	add	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b0f      	cmp	r3, #15
 800390c:	d916      	bls.n	800393c <UART_SetConfig+0x404>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d212      	bcs.n	800393c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f023 030f 	bic.w	r3, r3, #15
 800391e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	b29a      	uxth	r2, r3
 800392c:	89fb      	ldrh	r3, [r7, #14]
 800392e:	4313      	orrs	r3, r2
 8003930:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	89fa      	ldrh	r2, [r7, #14]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	e04f      	b.n	80039dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77bb      	strb	r3, [r7, #30]
 8003940:	e04c      	b.n	80039dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003942:	7ffb      	ldrb	r3, [r7, #31]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d828      	bhi.n	800399a <UART_SetConfig+0x462>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <UART_SetConfig+0x418>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003975 	.word	0x08003975
 8003954:	0800397d 	.word	0x0800397d
 8003958:	08003985 	.word	0x08003985
 800395c:	0800399b 	.word	0x0800399b
 8003960:	0800398b 	.word	0x0800398b
 8003964:	0800399b 	.word	0x0800399b
 8003968:	0800399b 	.word	0x0800399b
 800396c:	0800399b 	.word	0x0800399b
 8003970:	08003993 	.word	0x08003993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003974:	f7fe fc68 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003978:	61b8      	str	r0, [r7, #24]
        break;
 800397a:	e013      	b.n	80039a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800397c:	f7fe fc78 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8003980:	61b8      	str	r0, [r7, #24]
        break;
 8003982:	e00f      	b.n	80039a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <UART_SetConfig+0x4c4>)
 8003986:	61bb      	str	r3, [r7, #24]
        break;
 8003988:	e00c      	b.n	80039a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398a:	f7fe fb8b 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800398e:	61b8      	str	r0, [r7, #24]
        break;
 8003990:	e008      	b.n	80039a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003996:	61bb      	str	r3, [r7, #24]
        break;
 8003998:	e004      	b.n	80039a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	77bb      	strb	r3, [r7, #30]
        break;
 80039a2:	bf00      	nop
    }

    if (pclk != 0U)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	085a      	lsrs	r2, r3, #1
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b0f      	cmp	r3, #15
 80039c2:	d909      	bls.n	80039d8 <UART_SetConfig+0x4a0>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d205      	bcs.n	80039d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	e001      	b.n	80039dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40007c00 	.word	0x40007c00
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400

08003a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01a      	beq.n	8003b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afe:	d10a      	bne.n	8003b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b54:	f7fd fa34 	bl	8000fc0 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d10e      	bne.n	8003b86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f831 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e027      	b.n	8003bd6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d10e      	bne.n	8003bb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f81b 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e011      	b.n	8003bd6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b09c      	sub	sp, #112	; 0x70
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	e0a7      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	f000 80a3 	beq.w	8003d40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	f7fd f9e1 	bl	8000fc0 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d13f      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c24:	667b      	str	r3, [r7, #100]	; 0x64
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3308      	adds	r3, #8
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e068      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d050      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cac:	d148      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3308      	adds	r3, #8
 8003d08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d0a:	623a      	str	r2, [r7, #32]
 8003d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e010      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	f43f af48 	beq.w	8003bf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3770      	adds	r7, #112	; 0x70
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b097      	sub	sp, #92	; 0x5c
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d10e      	bne.n	8003dbe <UART_Start_Receive_IT+0x52>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <UART_Start_Receive_IT+0x48>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003db2:	e02d      	b.n	8003e10 <UART_Start_Receive_IT+0xa4>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dbc:	e028      	b.n	8003e10 <UART_Start_Receive_IT+0xa4>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <UART_Start_Receive_IT+0x76>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <UART_Start_Receive_IT+0x6c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dd6:	e01b      	b.n	8003e10 <UART_Start_Receive_IT+0xa4>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	227f      	movs	r2, #127	; 0x7f
 8003ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003de0:	e016      	b.n	8003e10 <UART_Start_Receive_IT+0xa4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dea:	d10d      	bne.n	8003e08 <UART_Start_Receive_IT+0x9c>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <UART_Start_Receive_IT+0x92>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	227f      	movs	r2, #127	; 0x7f
 8003df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dfc:	e008      	b.n	8003e10 <UART_Start_Receive_IT+0xa4>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	223f      	movs	r2, #63	; 0x3f
 8003e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e06:	e003      	b.n	8003e10 <UART_Start_Receive_IT+0xa4>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2222      	movs	r2, #34	; 0x22
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	657b      	str	r3, [r7, #84]	; 0x54
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e40:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d107      	bne.n	8003e6e <UART_Start_Receive_IT+0x102>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <UART_Start_Receive_IT+0x184>)
 8003e6a:	669a      	str	r2, [r3, #104]	; 0x68
 8003e6c:	e002      	b.n	8003e74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <UART_Start_Receive_IT+0x188>)
 8003e72:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d019      	beq.n	8003eb0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e6      	bne.n	8003e7c <UART_Start_Receive_IT+0x110>
 8003eae:	e018      	b.n	8003ee2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f043 0320 	orr.w	r3, r3, #32
 8003ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	69f9      	ldr	r1, [r7, #28]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	375c      	adds	r7, #92	; 0x5c
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	080041a7 	.word	0x080041a7
 8003ef4:	08004041 	.word	0x08004041

08003ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b095      	sub	sp, #84	; 0x54
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e6      	bne.n	8003f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d118      	bne.n	8003fa0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f023 0310 	bic.w	r3, r3, #16
 8003f82:	647b      	str	r3, [r7, #68]	; 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e6      	bne.n	8003f6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fb4:	bf00      	nop
 8003fb6:	3754      	adds	r7, #84	; 0x54
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fa8a 	bl	80034f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	60bb      	str	r3, [r7, #8]
   return(result);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6979      	ldr	r1, [r7, #20]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	613b      	str	r3, [r7, #16]
   return(result);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e6      	bne.n	8003ff4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fa56 	bl	80034e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004038:	bf00      	nop
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b096      	sub	sp, #88	; 0x58
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800404e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004058:	2b22      	cmp	r3, #34	; 0x22
 800405a:	f040 8098 	bne.w	800418e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004068:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800406c:	b2d9      	uxtb	r1, r3
 800406e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004072:	b2da      	uxtb	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	400a      	ands	r2, r1
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d17b      	bne.n	800419e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ba:	653b      	str	r3, [r7, #80]	; 0x50
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	647b      	str	r3, [r7, #68]	; 0x44
 80040c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	623b      	str	r3, [r7, #32]
   return(result);
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f8:	633a      	str	r2, [r7, #48]	; 0x30
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	2b01      	cmp	r3, #1
 8004126:	d12e      	bne.n	8004186 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60fb      	str	r3, [r7, #12]
   return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	617b      	str	r3, [r7, #20]
   return(result);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b10      	cmp	r3, #16
 800416c:	d103      	bne.n	8004176 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2210      	movs	r2, #16
 8004174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff f9c4 	bl	800350c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004184:	e00b      	b.n	800419e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fba0 	bl	80008cc <HAL_UART_RxCpltCallback>
}
 800418c:	e007      	b.n	800419e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0208 	orr.w	r2, r2, #8
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	bf00      	nop
 80041a0:	3758      	adds	r7, #88	; 0x58
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b096      	sub	sp, #88	; 0x58
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	2b22      	cmp	r3, #34	; 0x22
 80041c0:	f040 8098 	bne.w	80042f4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80041d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80041d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80041dc:	4013      	ands	r3, r2
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d17b      	bne.n	8004304 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422a:	643b      	str	r3, [r7, #64]	; 0x40
 800422c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3308      	adds	r3, #8
 8004244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	61fb      	str	r3, [r7, #28]
   return(result);
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3308      	adds	r3, #8
 800425c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800425e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	2b01      	cmp	r3, #1
 800428c:	d12e      	bne.n	80042ec <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 0310 	bic.w	r3, r3, #16
 80042a8:	647b      	str	r3, [r7, #68]	; 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	613b      	str	r3, [r7, #16]
   return(result);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e6      	bne.n	8004294 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d103      	bne.n	80042dc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2210      	movs	r2, #16
 80042da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff f911 	bl	800350c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042ea:	e00b      	b.n	8004304 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fc faed 	bl	80008cc <HAL_UART_RxCpltCallback>
}
 80042f2:	e007      	b.n	8004304 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0208 	orr.w	r2, r2, #8
 8004302:	619a      	str	r2, [r3, #24]
}
 8004304:	bf00      	nop
 8004306:	3758      	adds	r7, #88	; 0x58
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <siprintf>:
 800430c:	b40e      	push	{r1, r2, r3}
 800430e:	b500      	push	{lr}
 8004310:	b09c      	sub	sp, #112	; 0x70
 8004312:	ab1d      	add	r3, sp, #116	; 0x74
 8004314:	9002      	str	r0, [sp, #8]
 8004316:	9006      	str	r0, [sp, #24]
 8004318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800431c:	4809      	ldr	r0, [pc, #36]	; (8004344 <siprintf+0x38>)
 800431e:	9107      	str	r1, [sp, #28]
 8004320:	9104      	str	r1, [sp, #16]
 8004322:	4909      	ldr	r1, [pc, #36]	; (8004348 <siprintf+0x3c>)
 8004324:	f853 2b04 	ldr.w	r2, [r3], #4
 8004328:	9105      	str	r1, [sp, #20]
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	a902      	add	r1, sp, #8
 8004330:	f000 f9ae 	bl	8004690 <_svfiprintf_r>
 8004334:	9b02      	ldr	r3, [sp, #8]
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	b01c      	add	sp, #112	; 0x70
 800433c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004340:	b003      	add	sp, #12
 8004342:	4770      	bx	lr
 8004344:	20000060 	.word	0x20000060
 8004348:	ffff0208 	.word	0xffff0208

0800434c <memset>:
 800434c:	4402      	add	r2, r0
 800434e:	4603      	mov	r3, r0
 8004350:	4293      	cmp	r3, r2
 8004352:	d100      	bne.n	8004356 <memset+0xa>
 8004354:	4770      	bx	lr
 8004356:	f803 1b01 	strb.w	r1, [r3], #1
 800435a:	e7f9      	b.n	8004350 <memset+0x4>

0800435c <strncpy>:
 800435c:	b510      	push	{r4, lr}
 800435e:	3901      	subs	r1, #1
 8004360:	4603      	mov	r3, r0
 8004362:	b132      	cbz	r2, 8004372 <strncpy+0x16>
 8004364:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004368:	f803 4b01 	strb.w	r4, [r3], #1
 800436c:	3a01      	subs	r2, #1
 800436e:	2c00      	cmp	r4, #0
 8004370:	d1f7      	bne.n	8004362 <strncpy+0x6>
 8004372:	441a      	add	r2, r3
 8004374:	2100      	movs	r1, #0
 8004376:	4293      	cmp	r3, r2
 8004378:	d100      	bne.n	800437c <strncpy+0x20>
 800437a:	bd10      	pop	{r4, pc}
 800437c:	f803 1b01 	strb.w	r1, [r3], #1
 8004380:	e7f9      	b.n	8004376 <strncpy+0x1a>
	...

08004384 <__errno>:
 8004384:	4b01      	ldr	r3, [pc, #4]	; (800438c <__errno+0x8>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000060 	.word	0x20000060

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4d0d      	ldr	r5, [pc, #52]	; (80043c8 <__libc_init_array+0x38>)
 8004394:	4c0d      	ldr	r4, [pc, #52]	; (80043cc <__libc_init_array+0x3c>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	2600      	movs	r6, #0
 800439c:	42a6      	cmp	r6, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	4d0b      	ldr	r5, [pc, #44]	; (80043d0 <__libc_init_array+0x40>)
 80043a2:	4c0c      	ldr	r4, [pc, #48]	; (80043d4 <__libc_init_array+0x44>)
 80043a4:	f000 fc72 	bl	8004c8c <_init>
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	2600      	movs	r6, #0
 80043ae:	42a6      	cmp	r6, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b8:	4798      	blx	r3
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c2:	4798      	blx	r3
 80043c4:	3601      	adds	r6, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	08004d64 	.word	0x08004d64
 80043cc:	08004d64 	.word	0x08004d64
 80043d0:	08004d64 	.word	0x08004d64
 80043d4:	08004d68 	.word	0x08004d68

080043d8 <__retarget_lock_acquire_recursive>:
 80043d8:	4770      	bx	lr

080043da <__retarget_lock_release_recursive>:
 80043da:	4770      	bx	lr

080043dc <strcpy>:
 80043dc:	4603      	mov	r3, r0
 80043de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e2:	f803 2b01 	strb.w	r2, [r3], #1
 80043e6:	2a00      	cmp	r2, #0
 80043e8:	d1f9      	bne.n	80043de <strcpy+0x2>
 80043ea:	4770      	bx	lr

080043ec <_free_r>:
 80043ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d044      	beq.n	800447c <_free_r+0x90>
 80043f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f6:	9001      	str	r0, [sp, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f1a1 0404 	sub.w	r4, r1, #4
 80043fe:	bfb8      	it	lt
 8004400:	18e4      	addlt	r4, r4, r3
 8004402:	f000 f8df 	bl	80045c4 <__malloc_lock>
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <_free_r+0x94>)
 8004408:	9801      	ldr	r0, [sp, #4]
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	b933      	cbnz	r3, 800441c <_free_r+0x30>
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6014      	str	r4, [r2, #0]
 8004412:	b003      	add	sp, #12
 8004414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004418:	f000 b8da 	b.w	80045d0 <__malloc_unlock>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d908      	bls.n	8004432 <_free_r+0x46>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1961      	adds	r1, r4, r5
 8004424:	428b      	cmp	r3, r1
 8004426:	bf01      	itttt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	1949      	addeq	r1, r1, r5
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	e7ed      	b.n	800440e <_free_r+0x22>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x50>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x46>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1855      	adds	r5, r2, r1
 8004440:	42a5      	cmp	r5, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x70>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	4421      	add	r1, r4
 8004448:	1854      	adds	r4, r2, r1
 800444a:	42a3      	cmp	r3, r4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1e0      	bne.n	8004412 <_free_r+0x26>
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	440c      	add	r4, r1
 8004458:	6014      	str	r4, [r2, #0]
 800445a:	e7da      	b.n	8004412 <_free_r+0x26>
 800445c:	d902      	bls.n	8004464 <_free_r+0x78>
 800445e:	230c      	movs	r3, #12
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	e7d6      	b.n	8004412 <_free_r+0x26>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf04      	itt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	6054      	str	r4, [r2, #4]
 800447a:	e7ca      	b.n	8004412 <_free_r+0x26>
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	200003ec 	.word	0x200003ec

08004484 <sbrk_aligned>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4e0e      	ldr	r6, [pc, #56]	; (80044c0 <sbrk_aligned+0x3c>)
 8004488:	460c      	mov	r4, r1
 800448a:	6831      	ldr	r1, [r6, #0]
 800448c:	4605      	mov	r5, r0
 800448e:	b911      	cbnz	r1, 8004496 <sbrk_aligned+0x12>
 8004490:	f000 fba6 	bl	8004be0 <_sbrk_r>
 8004494:	6030      	str	r0, [r6, #0]
 8004496:	4621      	mov	r1, r4
 8004498:	4628      	mov	r0, r5
 800449a:	f000 fba1 	bl	8004be0 <_sbrk_r>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d00a      	beq.n	80044b8 <sbrk_aligned+0x34>
 80044a2:	1cc4      	adds	r4, r0, #3
 80044a4:	f024 0403 	bic.w	r4, r4, #3
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d007      	beq.n	80044bc <sbrk_aligned+0x38>
 80044ac:	1a21      	subs	r1, r4, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 fb96 	bl	8004be0 <_sbrk_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d101      	bne.n	80044bc <sbrk_aligned+0x38>
 80044b8:	f04f 34ff 	mov.w	r4, #4294967295
 80044bc:	4620      	mov	r0, r4
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	200003f0 	.word	0x200003f0

080044c4 <_malloc_r>:
 80044c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c8:	1ccd      	adds	r5, r1, #3
 80044ca:	f025 0503 	bic.w	r5, r5, #3
 80044ce:	3508      	adds	r5, #8
 80044d0:	2d0c      	cmp	r5, #12
 80044d2:	bf38      	it	cc
 80044d4:	250c      	movcc	r5, #12
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	4607      	mov	r7, r0
 80044da:	db01      	blt.n	80044e0 <_malloc_r+0x1c>
 80044dc:	42a9      	cmp	r1, r5
 80044de:	d905      	bls.n	80044ec <_malloc_r+0x28>
 80044e0:	230c      	movs	r3, #12
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	2600      	movs	r6, #0
 80044e6:	4630      	mov	r0, r6
 80044e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045c0 <_malloc_r+0xfc>
 80044f0:	f000 f868 	bl	80045c4 <__malloc_lock>
 80044f4:	f8d8 3000 	ldr.w	r3, [r8]
 80044f8:	461c      	mov	r4, r3
 80044fa:	bb5c      	cbnz	r4, 8004554 <_malloc_r+0x90>
 80044fc:	4629      	mov	r1, r5
 80044fe:	4638      	mov	r0, r7
 8004500:	f7ff ffc0 	bl	8004484 <sbrk_aligned>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	4604      	mov	r4, r0
 8004508:	d155      	bne.n	80045b6 <_malloc_r+0xf2>
 800450a:	f8d8 4000 	ldr.w	r4, [r8]
 800450e:	4626      	mov	r6, r4
 8004510:	2e00      	cmp	r6, #0
 8004512:	d145      	bne.n	80045a0 <_malloc_r+0xdc>
 8004514:	2c00      	cmp	r4, #0
 8004516:	d048      	beq.n	80045aa <_malloc_r+0xe6>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	4631      	mov	r1, r6
 800451c:	4638      	mov	r0, r7
 800451e:	eb04 0903 	add.w	r9, r4, r3
 8004522:	f000 fb5d 	bl	8004be0 <_sbrk_r>
 8004526:	4581      	cmp	r9, r0
 8004528:	d13f      	bne.n	80045aa <_malloc_r+0xe6>
 800452a:	6821      	ldr	r1, [r4, #0]
 800452c:	1a6d      	subs	r5, r5, r1
 800452e:	4629      	mov	r1, r5
 8004530:	4638      	mov	r0, r7
 8004532:	f7ff ffa7 	bl	8004484 <sbrk_aligned>
 8004536:	3001      	adds	r0, #1
 8004538:	d037      	beq.n	80045aa <_malloc_r+0xe6>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	442b      	add	r3, r5
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	f8d8 3000 	ldr.w	r3, [r8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d038      	beq.n	80045ba <_malloc_r+0xf6>
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	42a2      	cmp	r2, r4
 800454c:	d12b      	bne.n	80045a6 <_malloc_r+0xe2>
 800454e:	2200      	movs	r2, #0
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e00f      	b.n	8004574 <_malloc_r+0xb0>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	1b52      	subs	r2, r2, r5
 8004558:	d41f      	bmi.n	800459a <_malloc_r+0xd6>
 800455a:	2a0b      	cmp	r2, #11
 800455c:	d917      	bls.n	800458e <_malloc_r+0xca>
 800455e:	1961      	adds	r1, r4, r5
 8004560:	42a3      	cmp	r3, r4
 8004562:	6025      	str	r5, [r4, #0]
 8004564:	bf18      	it	ne
 8004566:	6059      	strne	r1, [r3, #4]
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	bf08      	it	eq
 800456c:	f8c8 1000 	streq.w	r1, [r8]
 8004570:	5162      	str	r2, [r4, r5]
 8004572:	604b      	str	r3, [r1, #4]
 8004574:	4638      	mov	r0, r7
 8004576:	f104 060b 	add.w	r6, r4, #11
 800457a:	f000 f829 	bl	80045d0 <__malloc_unlock>
 800457e:	f026 0607 	bic.w	r6, r6, #7
 8004582:	1d23      	adds	r3, r4, #4
 8004584:	1af2      	subs	r2, r6, r3
 8004586:	d0ae      	beq.n	80044e6 <_malloc_r+0x22>
 8004588:	1b9b      	subs	r3, r3, r6
 800458a:	50a3      	str	r3, [r4, r2]
 800458c:	e7ab      	b.n	80044e6 <_malloc_r+0x22>
 800458e:	42a3      	cmp	r3, r4
 8004590:	6862      	ldr	r2, [r4, #4]
 8004592:	d1dd      	bne.n	8004550 <_malloc_r+0x8c>
 8004594:	f8c8 2000 	str.w	r2, [r8]
 8004598:	e7ec      	b.n	8004574 <_malloc_r+0xb0>
 800459a:	4623      	mov	r3, r4
 800459c:	6864      	ldr	r4, [r4, #4]
 800459e:	e7ac      	b.n	80044fa <_malloc_r+0x36>
 80045a0:	4634      	mov	r4, r6
 80045a2:	6876      	ldr	r6, [r6, #4]
 80045a4:	e7b4      	b.n	8004510 <_malloc_r+0x4c>
 80045a6:	4613      	mov	r3, r2
 80045a8:	e7cc      	b.n	8004544 <_malloc_r+0x80>
 80045aa:	230c      	movs	r3, #12
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4638      	mov	r0, r7
 80045b0:	f000 f80e 	bl	80045d0 <__malloc_unlock>
 80045b4:	e797      	b.n	80044e6 <_malloc_r+0x22>
 80045b6:	6025      	str	r5, [r4, #0]
 80045b8:	e7dc      	b.n	8004574 <_malloc_r+0xb0>
 80045ba:	605b      	str	r3, [r3, #4]
 80045bc:	deff      	udf	#255	; 0xff
 80045be:	bf00      	nop
 80045c0:	200003ec 	.word	0x200003ec

080045c4 <__malloc_lock>:
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <__malloc_lock+0x8>)
 80045c6:	f7ff bf07 	b.w	80043d8 <__retarget_lock_acquire_recursive>
 80045ca:	bf00      	nop
 80045cc:	200003e8 	.word	0x200003e8

080045d0 <__malloc_unlock>:
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <__malloc_unlock+0x8>)
 80045d2:	f7ff bf02 	b.w	80043da <__retarget_lock_release_recursive>
 80045d6:	bf00      	nop
 80045d8:	200003e8 	.word	0x200003e8

080045dc <__ssputs_r>:
 80045dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	688e      	ldr	r6, [r1, #8]
 80045e2:	461f      	mov	r7, r3
 80045e4:	42be      	cmp	r6, r7
 80045e6:	680b      	ldr	r3, [r1, #0]
 80045e8:	4682      	mov	sl, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	4690      	mov	r8, r2
 80045ee:	d82c      	bhi.n	800464a <__ssputs_r+0x6e>
 80045f0:	898a      	ldrh	r2, [r1, #12]
 80045f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045f6:	d026      	beq.n	8004646 <__ssputs_r+0x6a>
 80045f8:	6965      	ldr	r5, [r4, #20]
 80045fa:	6909      	ldr	r1, [r1, #16]
 80045fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004600:	eba3 0901 	sub.w	r9, r3, r1
 8004604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004608:	1c7b      	adds	r3, r7, #1
 800460a:	444b      	add	r3, r9
 800460c:	106d      	asrs	r5, r5, #1
 800460e:	429d      	cmp	r5, r3
 8004610:	bf38      	it	cc
 8004612:	461d      	movcc	r5, r3
 8004614:	0553      	lsls	r3, r2, #21
 8004616:	d527      	bpl.n	8004668 <__ssputs_r+0x8c>
 8004618:	4629      	mov	r1, r5
 800461a:	f7ff ff53 	bl	80044c4 <_malloc_r>
 800461e:	4606      	mov	r6, r0
 8004620:	b360      	cbz	r0, 800467c <__ssputs_r+0xa0>
 8004622:	6921      	ldr	r1, [r4, #16]
 8004624:	464a      	mov	r2, r9
 8004626:	f000 faeb 	bl	8004c00 <memcpy>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	6126      	str	r6, [r4, #16]
 8004638:	6165      	str	r5, [r4, #20]
 800463a:	444e      	add	r6, r9
 800463c:	eba5 0509 	sub.w	r5, r5, r9
 8004640:	6026      	str	r6, [r4, #0]
 8004642:	60a5      	str	r5, [r4, #8]
 8004644:	463e      	mov	r6, r7
 8004646:	42be      	cmp	r6, r7
 8004648:	d900      	bls.n	800464c <__ssputs_r+0x70>
 800464a:	463e      	mov	r6, r7
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	4632      	mov	r2, r6
 8004650:	4641      	mov	r1, r8
 8004652:	f000 faab 	bl	8004bac <memmove>
 8004656:	68a3      	ldr	r3, [r4, #8]
 8004658:	1b9b      	subs	r3, r3, r6
 800465a:	60a3      	str	r3, [r4, #8]
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	4433      	add	r3, r6
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	2000      	movs	r0, #0
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	462a      	mov	r2, r5
 800466a:	f000 fad7 	bl	8004c1c <_realloc_r>
 800466e:	4606      	mov	r6, r0
 8004670:	2800      	cmp	r0, #0
 8004672:	d1e0      	bne.n	8004636 <__ssputs_r+0x5a>
 8004674:	6921      	ldr	r1, [r4, #16]
 8004676:	4650      	mov	r0, sl
 8004678:	f7ff feb8 	bl	80043ec <_free_r>
 800467c:	230c      	movs	r3, #12
 800467e:	f8ca 3000 	str.w	r3, [sl]
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	e7e9      	b.n	8004664 <__ssputs_r+0x88>

08004690 <_svfiprintf_r>:
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	4698      	mov	r8, r3
 8004696:	898b      	ldrh	r3, [r1, #12]
 8004698:	061b      	lsls	r3, r3, #24
 800469a:	b09d      	sub	sp, #116	; 0x74
 800469c:	4607      	mov	r7, r0
 800469e:	460d      	mov	r5, r1
 80046a0:	4614      	mov	r4, r2
 80046a2:	d50e      	bpl.n	80046c2 <_svfiprintf_r+0x32>
 80046a4:	690b      	ldr	r3, [r1, #16]
 80046a6:	b963      	cbnz	r3, 80046c2 <_svfiprintf_r+0x32>
 80046a8:	2140      	movs	r1, #64	; 0x40
 80046aa:	f7ff ff0b 	bl	80044c4 <_malloc_r>
 80046ae:	6028      	str	r0, [r5, #0]
 80046b0:	6128      	str	r0, [r5, #16]
 80046b2:	b920      	cbnz	r0, 80046be <_svfiprintf_r+0x2e>
 80046b4:	230c      	movs	r3, #12
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e0d0      	b.n	8004860 <_svfiprintf_r+0x1d0>
 80046be:	2340      	movs	r3, #64	; 0x40
 80046c0:	616b      	str	r3, [r5, #20]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9309      	str	r3, [sp, #36]	; 0x24
 80046c6:	2320      	movs	r3, #32
 80046c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d0:	2330      	movs	r3, #48	; 0x30
 80046d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004878 <_svfiprintf_r+0x1e8>
 80046d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046da:	f04f 0901 	mov.w	r9, #1
 80046de:	4623      	mov	r3, r4
 80046e0:	469a      	mov	sl, r3
 80046e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e6:	b10a      	cbz	r2, 80046ec <_svfiprintf_r+0x5c>
 80046e8:	2a25      	cmp	r2, #37	; 0x25
 80046ea:	d1f9      	bne.n	80046e0 <_svfiprintf_r+0x50>
 80046ec:	ebba 0b04 	subs.w	fp, sl, r4
 80046f0:	d00b      	beq.n	800470a <_svfiprintf_r+0x7a>
 80046f2:	465b      	mov	r3, fp
 80046f4:	4622      	mov	r2, r4
 80046f6:	4629      	mov	r1, r5
 80046f8:	4638      	mov	r0, r7
 80046fa:	f7ff ff6f 	bl	80045dc <__ssputs_r>
 80046fe:	3001      	adds	r0, #1
 8004700:	f000 80a9 	beq.w	8004856 <_svfiprintf_r+0x1c6>
 8004704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004706:	445a      	add	r2, fp
 8004708:	9209      	str	r2, [sp, #36]	; 0x24
 800470a:	f89a 3000 	ldrb.w	r3, [sl]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80a1 	beq.w	8004856 <_svfiprintf_r+0x1c6>
 8004714:	2300      	movs	r3, #0
 8004716:	f04f 32ff 	mov.w	r2, #4294967295
 800471a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800471e:	f10a 0a01 	add.w	sl, sl, #1
 8004722:	9304      	str	r3, [sp, #16]
 8004724:	9307      	str	r3, [sp, #28]
 8004726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800472a:	931a      	str	r3, [sp, #104]	; 0x68
 800472c:	4654      	mov	r4, sl
 800472e:	2205      	movs	r2, #5
 8004730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004734:	4850      	ldr	r0, [pc, #320]	; (8004878 <_svfiprintf_r+0x1e8>)
 8004736:	f7fb fd8b 	bl	8000250 <memchr>
 800473a:	9a04      	ldr	r2, [sp, #16]
 800473c:	b9d8      	cbnz	r0, 8004776 <_svfiprintf_r+0xe6>
 800473e:	06d0      	lsls	r0, r2, #27
 8004740:	bf44      	itt	mi
 8004742:	2320      	movmi	r3, #32
 8004744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004748:	0711      	lsls	r1, r2, #28
 800474a:	bf44      	itt	mi
 800474c:	232b      	movmi	r3, #43	; 0x2b
 800474e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004752:	f89a 3000 	ldrb.w	r3, [sl]
 8004756:	2b2a      	cmp	r3, #42	; 0x2a
 8004758:	d015      	beq.n	8004786 <_svfiprintf_r+0xf6>
 800475a:	9a07      	ldr	r2, [sp, #28]
 800475c:	4654      	mov	r4, sl
 800475e:	2000      	movs	r0, #0
 8004760:	f04f 0c0a 	mov.w	ip, #10
 8004764:	4621      	mov	r1, r4
 8004766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800476a:	3b30      	subs	r3, #48	; 0x30
 800476c:	2b09      	cmp	r3, #9
 800476e:	d94d      	bls.n	800480c <_svfiprintf_r+0x17c>
 8004770:	b1b0      	cbz	r0, 80047a0 <_svfiprintf_r+0x110>
 8004772:	9207      	str	r2, [sp, #28]
 8004774:	e014      	b.n	80047a0 <_svfiprintf_r+0x110>
 8004776:	eba0 0308 	sub.w	r3, r0, r8
 800477a:	fa09 f303 	lsl.w	r3, r9, r3
 800477e:	4313      	orrs	r3, r2
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	46a2      	mov	sl, r4
 8004784:	e7d2      	b.n	800472c <_svfiprintf_r+0x9c>
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	1d19      	adds	r1, r3, #4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	9103      	str	r1, [sp, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfbb      	ittet	lt
 8004792:	425b      	neglt	r3, r3
 8004794:	f042 0202 	orrlt.w	r2, r2, #2
 8004798:	9307      	strge	r3, [sp, #28]
 800479a:	9307      	strlt	r3, [sp, #28]
 800479c:	bfb8      	it	lt
 800479e:	9204      	strlt	r2, [sp, #16]
 80047a0:	7823      	ldrb	r3, [r4, #0]
 80047a2:	2b2e      	cmp	r3, #46	; 0x2e
 80047a4:	d10c      	bne.n	80047c0 <_svfiprintf_r+0x130>
 80047a6:	7863      	ldrb	r3, [r4, #1]
 80047a8:	2b2a      	cmp	r3, #42	; 0x2a
 80047aa:	d134      	bne.n	8004816 <_svfiprintf_r+0x186>
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	9203      	str	r2, [sp, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bfb8      	it	lt
 80047b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047bc:	3402      	adds	r4, #2
 80047be:	9305      	str	r3, [sp, #20]
 80047c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004888 <_svfiprintf_r+0x1f8>
 80047c4:	7821      	ldrb	r1, [r4, #0]
 80047c6:	2203      	movs	r2, #3
 80047c8:	4650      	mov	r0, sl
 80047ca:	f7fb fd41 	bl	8000250 <memchr>
 80047ce:	b138      	cbz	r0, 80047e0 <_svfiprintf_r+0x150>
 80047d0:	9b04      	ldr	r3, [sp, #16]
 80047d2:	eba0 000a 	sub.w	r0, r0, sl
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	4082      	lsls	r2, r0
 80047da:	4313      	orrs	r3, r2
 80047dc:	3401      	adds	r4, #1
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e4:	4825      	ldr	r0, [pc, #148]	; (800487c <_svfiprintf_r+0x1ec>)
 80047e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ea:	2206      	movs	r2, #6
 80047ec:	f7fb fd30 	bl	8000250 <memchr>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d038      	beq.n	8004866 <_svfiprintf_r+0x1d6>
 80047f4:	4b22      	ldr	r3, [pc, #136]	; (8004880 <_svfiprintf_r+0x1f0>)
 80047f6:	bb1b      	cbnz	r3, 8004840 <_svfiprintf_r+0x1b0>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	3307      	adds	r3, #7
 80047fc:	f023 0307 	bic.w	r3, r3, #7
 8004800:	3308      	adds	r3, #8
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004806:	4433      	add	r3, r6
 8004808:	9309      	str	r3, [sp, #36]	; 0x24
 800480a:	e768      	b.n	80046de <_svfiprintf_r+0x4e>
 800480c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004810:	460c      	mov	r4, r1
 8004812:	2001      	movs	r0, #1
 8004814:	e7a6      	b.n	8004764 <_svfiprintf_r+0xd4>
 8004816:	2300      	movs	r3, #0
 8004818:	3401      	adds	r4, #1
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	4619      	mov	r1, r3
 800481e:	f04f 0c0a 	mov.w	ip, #10
 8004822:	4620      	mov	r0, r4
 8004824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004828:	3a30      	subs	r2, #48	; 0x30
 800482a:	2a09      	cmp	r2, #9
 800482c:	d903      	bls.n	8004836 <_svfiprintf_r+0x1a6>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0c6      	beq.n	80047c0 <_svfiprintf_r+0x130>
 8004832:	9105      	str	r1, [sp, #20]
 8004834:	e7c4      	b.n	80047c0 <_svfiprintf_r+0x130>
 8004836:	fb0c 2101 	mla	r1, ip, r1, r2
 800483a:	4604      	mov	r4, r0
 800483c:	2301      	movs	r3, #1
 800483e:	e7f0      	b.n	8004822 <_svfiprintf_r+0x192>
 8004840:	ab03      	add	r3, sp, #12
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	462a      	mov	r2, r5
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <_svfiprintf_r+0x1f4>)
 8004848:	a904      	add	r1, sp, #16
 800484a:	4638      	mov	r0, r7
 800484c:	f3af 8000 	nop.w
 8004850:	1c42      	adds	r2, r0, #1
 8004852:	4606      	mov	r6, r0
 8004854:	d1d6      	bne.n	8004804 <_svfiprintf_r+0x174>
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	065b      	lsls	r3, r3, #25
 800485a:	f53f af2d 	bmi.w	80046b8 <_svfiprintf_r+0x28>
 800485e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004860:	b01d      	add	sp, #116	; 0x74
 8004862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004866:	ab03      	add	r3, sp, #12
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	462a      	mov	r2, r5
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <_svfiprintf_r+0x1f4>)
 800486e:	a904      	add	r1, sp, #16
 8004870:	4638      	mov	r0, r7
 8004872:	f000 f879 	bl	8004968 <_printf_i>
 8004876:	e7eb      	b.n	8004850 <_svfiprintf_r+0x1c0>
 8004878:	08004d28 	.word	0x08004d28
 800487c:	08004d32 	.word	0x08004d32
 8004880:	00000000 	.word	0x00000000
 8004884:	080045dd 	.word	0x080045dd
 8004888:	08004d2e 	.word	0x08004d2e

0800488c <_printf_common>:
 800488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004890:	4616      	mov	r6, r2
 8004892:	4699      	mov	r9, r3
 8004894:	688a      	ldr	r2, [r1, #8]
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800489c:	4293      	cmp	r3, r2
 800489e:	bfb8      	it	lt
 80048a0:	4613      	movlt	r3, r2
 80048a2:	6033      	str	r3, [r6, #0]
 80048a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a8:	4607      	mov	r7, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	b10a      	cbz	r2, 80048b2 <_printf_common+0x26>
 80048ae:	3301      	adds	r3, #1
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	0699      	lsls	r1, r3, #26
 80048b6:	bf42      	ittt	mi
 80048b8:	6833      	ldrmi	r3, [r6, #0]
 80048ba:	3302      	addmi	r3, #2
 80048bc:	6033      	strmi	r3, [r6, #0]
 80048be:	6825      	ldr	r5, [r4, #0]
 80048c0:	f015 0506 	ands.w	r5, r5, #6
 80048c4:	d106      	bne.n	80048d4 <_printf_common+0x48>
 80048c6:	f104 0a19 	add.w	sl, r4, #25
 80048ca:	68e3      	ldr	r3, [r4, #12]
 80048cc:	6832      	ldr	r2, [r6, #0]
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	42ab      	cmp	r3, r5
 80048d2:	dc26      	bgt.n	8004922 <_printf_common+0x96>
 80048d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d8:	1e13      	subs	r3, r2, #0
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	bf18      	it	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	0692      	lsls	r2, r2, #26
 80048e2:	d42b      	bmi.n	800493c <_printf_common+0xb0>
 80048e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e8:	4649      	mov	r1, r9
 80048ea:	4638      	mov	r0, r7
 80048ec:	47c0      	blx	r8
 80048ee:	3001      	adds	r0, #1
 80048f0:	d01e      	beq.n	8004930 <_printf_common+0xa4>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	6922      	ldr	r2, [r4, #16]
 80048f6:	f003 0306 	and.w	r3, r3, #6
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	bf02      	ittt	eq
 80048fe:	68e5      	ldreq	r5, [r4, #12]
 8004900:	6833      	ldreq	r3, [r6, #0]
 8004902:	1aed      	subeq	r5, r5, r3
 8004904:	68a3      	ldr	r3, [r4, #8]
 8004906:	bf0c      	ite	eq
 8004908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800490c:	2500      	movne	r5, #0
 800490e:	4293      	cmp	r3, r2
 8004910:	bfc4      	itt	gt
 8004912:	1a9b      	subgt	r3, r3, r2
 8004914:	18ed      	addgt	r5, r5, r3
 8004916:	2600      	movs	r6, #0
 8004918:	341a      	adds	r4, #26
 800491a:	42b5      	cmp	r5, r6
 800491c:	d11a      	bne.n	8004954 <_printf_common+0xc8>
 800491e:	2000      	movs	r0, #0
 8004920:	e008      	b.n	8004934 <_printf_common+0xa8>
 8004922:	2301      	movs	r3, #1
 8004924:	4652      	mov	r2, sl
 8004926:	4649      	mov	r1, r9
 8004928:	4638      	mov	r0, r7
 800492a:	47c0      	blx	r8
 800492c:	3001      	adds	r0, #1
 800492e:	d103      	bne.n	8004938 <_printf_common+0xac>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	3501      	adds	r5, #1
 800493a:	e7c6      	b.n	80048ca <_printf_common+0x3e>
 800493c:	18e1      	adds	r1, r4, r3
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	2030      	movs	r0, #48	; 0x30
 8004942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004946:	4422      	add	r2, r4
 8004948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800494c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004950:	3302      	adds	r3, #2
 8004952:	e7c7      	b.n	80048e4 <_printf_common+0x58>
 8004954:	2301      	movs	r3, #1
 8004956:	4622      	mov	r2, r4
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d0e6      	beq.n	8004930 <_printf_common+0xa4>
 8004962:	3601      	adds	r6, #1
 8004964:	e7d9      	b.n	800491a <_printf_common+0x8e>
	...

08004968 <_printf_i>:
 8004968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	7e0f      	ldrb	r7, [r1, #24]
 800496e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004970:	2f78      	cmp	r7, #120	; 0x78
 8004972:	4691      	mov	r9, r2
 8004974:	4680      	mov	r8, r0
 8004976:	460c      	mov	r4, r1
 8004978:	469a      	mov	sl, r3
 800497a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800497e:	d807      	bhi.n	8004990 <_printf_i+0x28>
 8004980:	2f62      	cmp	r7, #98	; 0x62
 8004982:	d80a      	bhi.n	800499a <_printf_i+0x32>
 8004984:	2f00      	cmp	r7, #0
 8004986:	f000 80d4 	beq.w	8004b32 <_printf_i+0x1ca>
 800498a:	2f58      	cmp	r7, #88	; 0x58
 800498c:	f000 80c0 	beq.w	8004b10 <_printf_i+0x1a8>
 8004990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004998:	e03a      	b.n	8004a10 <_printf_i+0xa8>
 800499a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800499e:	2b15      	cmp	r3, #21
 80049a0:	d8f6      	bhi.n	8004990 <_printf_i+0x28>
 80049a2:	a101      	add	r1, pc, #4	; (adr r1, 80049a8 <_printf_i+0x40>)
 80049a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004991 	.word	0x08004991
 80049b4:	08004991 	.word	0x08004991
 80049b8:	08004991 	.word	0x08004991
 80049bc:	08004991 	.word	0x08004991
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004991 	.word	0x08004991
 80049c8:	08004991 	.word	0x08004991
 80049cc:	08004991 	.word	0x08004991
 80049d0:	08004991 	.word	0x08004991
 80049d4:	08004b19 	.word	0x08004b19
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	08004ad3 	.word	0x08004ad3
 80049e0:	08004991 	.word	0x08004991
 80049e4:	08004991 	.word	0x08004991
 80049e8:	08004b3b 	.word	0x08004b3b
 80049ec:	08004991 	.word	0x08004991
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004991 	.word	0x08004991
 80049f8:	08004991 	.word	0x08004991
 80049fc:	08004adb 	.word	0x08004adb
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	602a      	str	r2, [r5, #0]
 8004a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a10:	2301      	movs	r3, #1
 8004a12:	e09f      	b.n	8004b54 <_printf_i+0x1ec>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	0607      	lsls	r7, r0, #24
 8004a1a:	f103 0104 	add.w	r1, r3, #4
 8004a1e:	6029      	str	r1, [r5, #0]
 8004a20:	d501      	bpl.n	8004a26 <_printf_i+0xbe>
 8004a22:	681e      	ldr	r6, [r3, #0]
 8004a24:	e003      	b.n	8004a2e <_printf_i+0xc6>
 8004a26:	0646      	lsls	r6, r0, #25
 8004a28:	d5fb      	bpl.n	8004a22 <_printf_i+0xba>
 8004a2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	da03      	bge.n	8004a3a <_printf_i+0xd2>
 8004a32:	232d      	movs	r3, #45	; 0x2d
 8004a34:	4276      	negs	r6, r6
 8004a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3a:	485a      	ldr	r0, [pc, #360]	; (8004ba4 <_printf_i+0x23c>)
 8004a3c:	230a      	movs	r3, #10
 8004a3e:	e012      	b.n	8004a66 <_printf_i+0xfe>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	6029      	str	r1, [r5, #0]
 8004a48:	0605      	lsls	r5, r0, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xe8>
 8004a4c:	681e      	ldr	r6, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0xee>
 8004a50:	0641      	lsls	r1, r0, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xe4>
 8004a54:	881e      	ldrh	r6, [r3, #0]
 8004a56:	4853      	ldr	r0, [pc, #332]	; (8004ba4 <_printf_i+0x23c>)
 8004a58:	2f6f      	cmp	r7, #111	; 0x6f
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2308      	moveq	r3, #8
 8004a5e:	230a      	movne	r3, #10
 8004a60:	2100      	movs	r1, #0
 8004a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a66:	6865      	ldr	r5, [r4, #4]
 8004a68:	60a5      	str	r5, [r4, #8]
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	bfa2      	ittt	ge
 8004a6e:	6821      	ldrge	r1, [r4, #0]
 8004a70:	f021 0104 	bicge.w	r1, r1, #4
 8004a74:	6021      	strge	r1, [r4, #0]
 8004a76:	b90e      	cbnz	r6, 8004a7c <_printf_i+0x114>
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	d04b      	beq.n	8004b14 <_printf_i+0x1ac>
 8004a7c:	4615      	mov	r5, r2
 8004a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a82:	fb03 6711 	mls	r7, r3, r1, r6
 8004a86:	5dc7      	ldrb	r7, [r0, r7]
 8004a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a8c:	4637      	mov	r7, r6
 8004a8e:	42bb      	cmp	r3, r7
 8004a90:	460e      	mov	r6, r1
 8004a92:	d9f4      	bls.n	8004a7e <_printf_i+0x116>
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d10b      	bne.n	8004ab0 <_printf_i+0x148>
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	07de      	lsls	r6, r3, #31
 8004a9c:	d508      	bpl.n	8004ab0 <_printf_i+0x148>
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	6861      	ldr	r1, [r4, #4]
 8004aa2:	4299      	cmp	r1, r3
 8004aa4:	bfde      	ittt	le
 8004aa6:	2330      	movle	r3, #48	; 0x30
 8004aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ab0:	1b52      	subs	r2, r2, r5
 8004ab2:	6122      	str	r2, [r4, #16]
 8004ab4:	f8cd a000 	str.w	sl, [sp]
 8004ab8:	464b      	mov	r3, r9
 8004aba:	aa03      	add	r2, sp, #12
 8004abc:	4621      	mov	r1, r4
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f7ff fee4 	bl	800488c <_printf_common>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d14a      	bne.n	8004b5e <_printf_i+0x1f6>
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	b004      	add	sp, #16
 8004ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	f043 0320 	orr.w	r3, r3, #32
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	4833      	ldr	r0, [pc, #204]	; (8004ba8 <_printf_i+0x240>)
 8004adc:	2778      	movs	r7, #120	; 0x78
 8004ade:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	6829      	ldr	r1, [r5, #0]
 8004ae6:	061f      	lsls	r7, r3, #24
 8004ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aec:	d402      	bmi.n	8004af4 <_printf_i+0x18c>
 8004aee:	065f      	lsls	r7, r3, #25
 8004af0:	bf48      	it	mi
 8004af2:	b2b6      	uxthmi	r6, r6
 8004af4:	07df      	lsls	r7, r3, #31
 8004af6:	bf48      	it	mi
 8004af8:	f043 0320 	orrmi.w	r3, r3, #32
 8004afc:	6029      	str	r1, [r5, #0]
 8004afe:	bf48      	it	mi
 8004b00:	6023      	strmi	r3, [r4, #0]
 8004b02:	b91e      	cbnz	r6, 8004b0c <_printf_i+0x1a4>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	f023 0320 	bic.w	r3, r3, #32
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	e7a7      	b.n	8004a60 <_printf_i+0xf8>
 8004b10:	4824      	ldr	r0, [pc, #144]	; (8004ba4 <_printf_i+0x23c>)
 8004b12:	e7e4      	b.n	8004ade <_printf_i+0x176>
 8004b14:	4615      	mov	r5, r2
 8004b16:	e7bd      	b.n	8004a94 <_printf_i+0x12c>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	6826      	ldr	r6, [r4, #0]
 8004b1c:	6961      	ldr	r1, [r4, #20]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6028      	str	r0, [r5, #0]
 8004b22:	0635      	lsls	r5, r6, #24
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	d501      	bpl.n	8004b2c <_printf_i+0x1c4>
 8004b28:	6019      	str	r1, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <_printf_i+0x1ca>
 8004b2c:	0670      	lsls	r0, r6, #25
 8004b2e:	d5fb      	bpl.n	8004b28 <_printf_i+0x1c0>
 8004b30:	8019      	strh	r1, [r3, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	4615      	mov	r5, r2
 8004b38:	e7bc      	b.n	8004ab4 <_printf_i+0x14c>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	1d1a      	adds	r2, r3, #4
 8004b3e:	602a      	str	r2, [r5, #0]
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	6862      	ldr	r2, [r4, #4]
 8004b44:	2100      	movs	r1, #0
 8004b46:	4628      	mov	r0, r5
 8004b48:	f7fb fb82 	bl	8000250 <memchr>
 8004b4c:	b108      	cbz	r0, 8004b52 <_printf_i+0x1ea>
 8004b4e:	1b40      	subs	r0, r0, r5
 8004b50:	6060      	str	r0, [r4, #4]
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	6123      	str	r3, [r4, #16]
 8004b56:	2300      	movs	r3, #0
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5c:	e7aa      	b.n	8004ab4 <_printf_i+0x14c>
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	462a      	mov	r2, r5
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	47d0      	blx	sl
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d0ad      	beq.n	8004ac8 <_printf_i+0x160>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	079b      	lsls	r3, r3, #30
 8004b70:	d413      	bmi.n	8004b9a <_printf_i+0x232>
 8004b72:	68e0      	ldr	r0, [r4, #12]
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	4298      	cmp	r0, r3
 8004b78:	bfb8      	it	lt
 8004b7a:	4618      	movlt	r0, r3
 8004b7c:	e7a6      	b.n	8004acc <_printf_i+0x164>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4632      	mov	r2, r6
 8004b82:	4649      	mov	r1, r9
 8004b84:	4640      	mov	r0, r8
 8004b86:	47d0      	blx	sl
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d09d      	beq.n	8004ac8 <_printf_i+0x160>
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	9903      	ldr	r1, [sp, #12]
 8004b92:	1a5b      	subs	r3, r3, r1
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	dcf2      	bgt.n	8004b7e <_printf_i+0x216>
 8004b98:	e7eb      	b.n	8004b72 <_printf_i+0x20a>
 8004b9a:	2500      	movs	r5, #0
 8004b9c:	f104 0619 	add.w	r6, r4, #25
 8004ba0:	e7f5      	b.n	8004b8e <_printf_i+0x226>
 8004ba2:	bf00      	nop
 8004ba4:	08004d39 	.word	0x08004d39
 8004ba8:	08004d4a 	.word	0x08004d4a

08004bac <memmove>:
 8004bac:	4288      	cmp	r0, r1
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	eb01 0402 	add.w	r4, r1, r2
 8004bb4:	d902      	bls.n	8004bbc <memmove+0x10>
 8004bb6:	4284      	cmp	r4, r0
 8004bb8:	4623      	mov	r3, r4
 8004bba:	d807      	bhi.n	8004bcc <memmove+0x20>
 8004bbc:	1e43      	subs	r3, r0, #1
 8004bbe:	42a1      	cmp	r1, r4
 8004bc0:	d008      	beq.n	8004bd4 <memmove+0x28>
 8004bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bca:	e7f8      	b.n	8004bbe <memmove+0x12>
 8004bcc:	4402      	add	r2, r0
 8004bce:	4601      	mov	r1, r0
 8004bd0:	428a      	cmp	r2, r1
 8004bd2:	d100      	bne.n	8004bd6 <memmove+0x2a>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bde:	e7f7      	b.n	8004bd0 <memmove+0x24>

08004be0 <_sbrk_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4d06      	ldr	r5, [pc, #24]	; (8004bfc <_sbrk_r+0x1c>)
 8004be4:	2300      	movs	r3, #0
 8004be6:	4604      	mov	r4, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	602b      	str	r3, [r5, #0]
 8004bec:	f7fb ffe2 	bl	8000bb4 <_sbrk>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_sbrk_r+0x1a>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_sbrk_r+0x1a>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	200003e4 	.word	0x200003e4

08004c00 <memcpy>:
 8004c00:	440a      	add	r2, r1
 8004c02:	4291      	cmp	r1, r2
 8004c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c08:	d100      	bne.n	8004c0c <memcpy+0xc>
 8004c0a:	4770      	bx	lr
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c16:	4291      	cmp	r1, r2
 8004c18:	d1f9      	bne.n	8004c0e <memcpy+0xe>
 8004c1a:	bd10      	pop	{r4, pc}

08004c1c <_realloc_r>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	4680      	mov	r8, r0
 8004c22:	4614      	mov	r4, r2
 8004c24:	460e      	mov	r6, r1
 8004c26:	b921      	cbnz	r1, 8004c32 <_realloc_r+0x16>
 8004c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	f7ff bc49 	b.w	80044c4 <_malloc_r>
 8004c32:	b92a      	cbnz	r2, 8004c40 <_realloc_r+0x24>
 8004c34:	f7ff fbda 	bl	80043ec <_free_r>
 8004c38:	4625      	mov	r5, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c40:	f000 f81b 	bl	8004c7a <_malloc_usable_size_r>
 8004c44:	4284      	cmp	r4, r0
 8004c46:	4607      	mov	r7, r0
 8004c48:	d802      	bhi.n	8004c50 <_realloc_r+0x34>
 8004c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c4e:	d812      	bhi.n	8004c76 <_realloc_r+0x5a>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fc36 	bl	80044c4 <_malloc_r>
 8004c58:	4605      	mov	r5, r0
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d0ed      	beq.n	8004c3a <_realloc_r+0x1e>
 8004c5e:	42bc      	cmp	r4, r7
 8004c60:	4622      	mov	r2, r4
 8004c62:	4631      	mov	r1, r6
 8004c64:	bf28      	it	cs
 8004c66:	463a      	movcs	r2, r7
 8004c68:	f7ff ffca 	bl	8004c00 <memcpy>
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4640      	mov	r0, r8
 8004c70:	f7ff fbbc 	bl	80043ec <_free_r>
 8004c74:	e7e1      	b.n	8004c3a <_realloc_r+0x1e>
 8004c76:	4635      	mov	r5, r6
 8004c78:	e7df      	b.n	8004c3a <_realloc_r+0x1e>

08004c7a <_malloc_usable_size_r>:
 8004c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c7e:	1f18      	subs	r0, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbc      	itt	lt
 8004c84:	580b      	ldrlt	r3, [r1, r0]
 8004c86:	18c0      	addlt	r0, r0, r3
 8004c88:	4770      	bx	lr
	...

08004c8c <_init>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr

08004c98 <_fini>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr
