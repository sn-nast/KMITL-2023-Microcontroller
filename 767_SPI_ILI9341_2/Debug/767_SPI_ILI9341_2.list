
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007754  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08007958  08007958  00017958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f54  08007f54  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f5c  08007f5c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001d8  0800813c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800813c  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001189c  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ff  00000000  00000000  00031ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00034be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dda  00000000  00000000  00035de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a92d  00000000  00000000  00036bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d8f  00000000  00000000  000614ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffd6c  00000000  00000000  0007927e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058f4  00000000  00000000  00178fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0017e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800793c 	.word	0x0800793c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800793c 	.word	0x0800793c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a8c      	ldr	r2, [pc, #560]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b87      	ldr	r3, [pc, #540]	; (8000838 <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a86      	ldr	r2, [pc, #536]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b84      	ldr	r3, [pc, #528]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b81      	ldr	r3, [pc, #516]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a80      	ldr	r2, [pc, #512]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b7b      	ldr	r3, [pc, #492]	; (8000838 <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a7a      	ldr	r2, [pc, #488]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a74      	ldr	r2, [pc, #464]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a68      	ldr	r2, [pc, #416]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2168      	movs	r1, #104	; 0x68
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <MX_GPIO_Init+0x250>)
 80006c8:	f001 ff4a 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006d2:	485b      	ldr	r0, [pc, #364]	; (8000840 <MX_GPIO_Init+0x254>)
 80006d4:	f001 ff44 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4859      	ldr	r0, [pc, #356]	; (8000844 <MX_GPIO_Init+0x258>)
 80006de:	f001 ff3f 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e8:	4857      	ldr	r0, [pc, #348]	; (8000848 <MX_GPIO_Init+0x25c>)
 80006ea:	f001 ff39 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ee:	2314      	movs	r3, #20
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	484e      	ldr	r0, [pc, #312]	; (800083c <MX_GPIO_Init+0x250>)
 8000702:	f001 fd69 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000706:	2368      	movs	r3, #104	; 0x68
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4847      	ldr	r0, [pc, #284]	; (800083c <MX_GPIO_Init+0x250>)
 800071e:	f001 fd5b 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000738:	f001 fd4e 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	483c      	ldr	r0, [pc, #240]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000758:	f001 fd3e 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075c:	2386      	movs	r3, #134	; 0x86
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4835      	ldr	r0, [pc, #212]	; (800084c <MX_GPIO_Init+0x260>)
 8000778:	f001 fd2e 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4829      	ldr	r0, [pc, #164]	; (8000840 <MX_GPIO_Init+0x254>)
 800079a:	f001 fd1d 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <MX_GPIO_Init+0x254>)
 80007b8:	f001 fd0e 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x258>)
 80007d4:	f001 fd00 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0x258>)
 80007ec:	f001 fcf4 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0x25c>)
 800080a:	f001 fce5 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x258>)
 800082c:	f001 fcd4 	bl	80021d8 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020400 	.word	0x40020400
 8000844:	40021800 	.word	0x40021800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000

08000850 <SCB_EnableICache>:

	/**
	 \brief   Enable I-Cache
	 \details Turns on I-Cache
	 */
	__STATIC_INLINE void SCB_EnableICache(void) {
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
 \brief   Data Synchronization Barrier
 \details Acts as a special kind of Data Memory Barrier.
 It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void) {
	__ASM volatile ("dsb 0xF":::"memory");
 8000854:	f3bf 8f4f 	dsb	sy
}
 8000858:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 800085a:	f3bf 8f6f 	isb	sy
}
 800085e:	bf00      	nop
#if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <SCB_EnableICache+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 800086e:	f3bf 8f6f 	isb	sy
}
 8000872:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SCB_EnableICache+0x48>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SCB_EnableICache+0x48>)
 800087a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087e:	6153      	str	r3, [r2, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
}
 8000884:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
	}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SCB_EnableDCache>:

	/**
	 \brief   Enable D-Cache
	 \details Turns on D-Cache
	 */
	__STATIC_INLINE void SCB_EnableDCache(void) {
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SCB_EnableDCache+0x84>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	__ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <SCB_EnableDCache+0x84>)
 80008b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0b5b      	lsrs	r3, r3, #13
 80008bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ca:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	015a      	lsls	r2, r3, #5
 80008d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008da:	4911      	ldr	r1, [pc, #68]	; (8000920 <SCB_EnableDCache+0x84>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1ef      	bne.n	80008cc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	60fa      	str	r2, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1e5      	bne.n	80008c2 <SCB_EnableDCache+0x26>
	__ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SCB_EnableDCache+0x84>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <SCB_EnableDCache+0x84>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000906:	6153      	str	r3, [r2, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8000908:	f3bf 8f4f 	dsb	sy
}
 800090c:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 800090e:	f3bf 8f6f 	isb	sy
}
 8000912:	bf00      	nop

    __DSB();
    __ISB();
  #endif
	}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800092a:	f7ff ff91 	bl	8000850 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800092e:	f7ff ffb5 	bl	800089c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f001 fadb 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f891 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f7ff fe57 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800093e:	f000 fb79 	bl	8001034 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000942:	f000 f95b 	bl	8000bfc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000946:	f000 fb01 	bl	8000f4c <MX_TIM1_Init>
  MX_RNG_Init();
 800094a:	f000 f923 	bl	8000b94 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800094e:	f000 fe8f 	bl	8001670 <ILI9341_Init>
//	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
//	  		HAL_Delay(5000);


	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000952:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000956:	f001 f837 	bl	80019c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fe2a 	bl	80015b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 8000960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	2302      	movs	r3, #2
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2300      	movs	r3, #0
 800096c:	220a      	movs	r2, #10
 800096e:	210a      	movs	r1, #10
 8000970:	4835      	ldr	r0, [pc, #212]	; (8000a48 <main+0x124>)
 8000972:	f000 fd1f 	bl	80013b4 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 8000976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2302      	movs	r3, #2
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	221e      	movs	r2, #30
 8000984:	210a      	movs	r1, #10
 8000986:	4831      	ldr	r0, [pc, #196]	; (8000a4c <main+0x128>)
 8000988:	f000 fd14 	bl	80013b4 <ILI9341_Draw_Text>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800098c:	2000      	movs	r0, #0
 800098e:	f000 fe11 	bl	80015b4 <ILI9341_Set_Rotation>


	  		while(1)
	  		{
	  			HAL_Delay(20);
 8000992:	2014      	movs	r0, #20
 8000994:	f001 fb16 	bl	8001fc4 <HAL_Delay>

	  			if(TP_Touchpad_Pressed())
 8000998:	f001 fa98 	bl	8001ecc <TP_Touchpad_Pressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d04a      	beq.n	8000a38 <main+0x114>
	          {

	  					uint16_t x_pos = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	  					uint16_t y_pos = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	84bb      	strh	r3, [r7, #36]	; 0x24


	  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009b0:	4827      	ldr	r0, [pc, #156]	; (8000a50 <main+0x12c>)
 80009b2:	f001 fdd5 	bl	8002560 <HAL_GPIO_WritePin>

	            uint16_t position_array[2];

	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f9c4 	bl	8001d48 <TP_Read_Coordinates>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d131      	bne.n	8000a2a <main+0x106>
	  					{
	  					x_pos = position_array[0];
 80009c6:	8c3b      	ldrh	r3, [r7, #32]
 80009c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	  					y_pos = position_array[1];
 80009ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80009cc:	84bb      	strh	r3, [r7, #36]	; 0x24
	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 80009ce:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80009d0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80009d2:	2300      	movs	r3, #0
 80009d4:	2202      	movs	r2, #2
 80009d6:	f000 fbca 	bl	800116e <ILI9341_Draw_Filled_Circle>

	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fdea 	bl	80015b4 <ILI9341_Set_Rotation>
	  					char counter_buff[30];
	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 80009e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80009e2:	463b      	mov	r3, r7
 80009e4:	491b      	ldr	r1, [pc, #108]	; (8000a54 <main+0x130>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 fed2 	bl	8005790 <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 80009ec:	4638      	mov	r0, r7
 80009ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	2302      	movs	r3, #2
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	2250      	movs	r2, #80	; 0x50
 80009fc:	210a      	movs	r1, #10
 80009fe:	f000 fcd9 	bl	80013b4 <ILI9341_Draw_Text>
	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 8000a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a04:	463b      	mov	r3, r7
 8000a06:	4914      	ldr	r1, [pc, #80]	; (8000a58 <main+0x134>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 fec1 	bl	8005790 <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 8000a0e:	4638      	mov	r0, r7
 8000a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2302      	movs	r3, #2
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2278      	movs	r2, #120	; 0x78
 8000a1e:	210a      	movs	r1, #10
 8000a20:	f000 fcc8 	bl	80013b4 <ILI9341_Draw_Text>
	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fdc5 	bl	80015b4 <ILI9341_Set_Rotation>
	  					}

	  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
 8000a2a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 ffef 	bl	8001a14 <ILI9341_Draw_Pixel>
 8000a36:	e7ac      	b.n	8000992 <main+0x6e>

	          }
	  			else
	  			{
	  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <main+0x12c>)
 8000a40:	f001 fd8e 	bl	8002560 <HAL_GPIO_WritePin>
	  			HAL_Delay(20);
 8000a44:	e7a5      	b.n	8000992 <main+0x6e>
 8000a46:	bf00      	nop
 8000a48:	08007958 	.word	0x08007958
 8000a4c:	08007964 	.word	0x08007964
 8000a50:	40020400 	.word	0x40020400
 8000a54:	08007974 	.word	0x08007974
 8000a58:	08007980 	.word	0x08007980

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0b8      	sub	sp, #224	; 0xe0
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a66:	2234      	movs	r2, #52	; 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fef3 	bl	8005856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2290      	movs	r2, #144	; 0x90
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 fee4 	bl	8005856 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a8e:	f001 fd81 	bl	8002594 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <SystemClock_Config+0x124>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a3a      	ldr	r2, [pc, #232]	; (8000b80 <SystemClock_Config+0x124>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <SystemClock_Config+0x124>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <SystemClock_Config+0x128>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <SystemClock_Config+0x128>)
 8000ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <SystemClock_Config+0x128>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000ae4:	23c8      	movs	r3, #200	; 0xc8
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000af0:	2309      	movs	r3, #9
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fda7 	bl	8002654 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b0c:	f000 f83e 	bl	8000b8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b10:	f001 fd50 	bl	80025b4 <HAL_PWREx_EnableOverDrive>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b1a:	f000 f837 	bl	8000b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b44:	2106      	movs	r1, #6
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f832 	bl	8002bb0 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000b52:	f000 f81b 	bl	8000b8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <SystemClock_Config+0x12c>)
 8000b58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fa47 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000b74:	f000 f80a 	bl	8000b8c <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	37e0      	adds	r7, #224	; 0xe0
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000
 8000b88:	00200100 	.word	0x00200100

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x4>
	...

08000b94 <MX_RNG_Init>:
/* USER CODE END 0 */

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_RNG_Init+0x20>)
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <MX_RNG_Init+0x24>)
 8000b9c:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_RNG_Init+0x20>)
 8000ba0:	f002 fe54 	bl	800384c <HAL_RNG_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RNG_Init+0x1a>
		Error_Handler();
 8000baa:	f7ff ffef 	bl	8000b8c <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001f4 	.word	0x200001f4
 8000bb8:	50060800 	.word	0x50060800

08000bbc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	if (rngHandle->Instance == RNG) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_RNG_MspInit+0x38>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10b      	bne.n	8000be6 <HAL_RNG_MspInit+0x2a>
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* RNG clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_RNG_MspInit+0x3c>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_RNG_MspInit+0x3c>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_RNG_MspInit+0x3c>)
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	50060800 	.word	0x50060800
 8000bf8:	40023800 	.word	0x40023800

08000bfc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_SPI5_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c1a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_SPI5_Init+0x74>)
 8000c5c:	f002 fe20 	bl	80038a0 <HAL_SPI_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f7ff ff91 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000204 	.word	0x20000204
 8000c74:	40015000 	.word	0x40015000

08000c78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_SPI_MspInit+0x7c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d128      	bne.n	8000cec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_SPI_MspInit+0x84>)
 8000ce8:	f001 fa76 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40015000 	.word	0x40015000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40021400 	.word	0x40021400

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <SysTick_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000d4c:	f001 f91a 	bl	8001f84 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	return 1;
 8000d58:	2301      	movs	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_kill>:

int _kill(int pid, int sig) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6e:	f004 fdc5 	bl	80058fc <__errno>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2216      	movs	r2, #22
 8000d76:	601a      	str	r2, [r3, #0]
	return -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_exit>:

void _exit(int status) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ffe7 	bl	8000d64 <_kill>
	while (1) {
 8000d96:	e7fe      	b.n	8000d96 <_exit+0x12>

08000d98 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
		*ptr++ = __io_getchar();
 8000daa:	f3af 8000 	nop.w
 8000dae:	4601      	mov	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
	}

	return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e009      	b.n	8000df8 <_write+0x26>
		__io_putchar(*ptr++);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf1      	blt.n	8000de4 <_write+0x12>
	}
	return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_close>:

int _close(int file) {
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e32:	605a      	str	r2, [r3, #4]
	return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_isatty>:

int _isatty(int file) {
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f004 fd2a 	bl	80058fc <__errno>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	220c      	movs	r2, #12
 8000eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20080000 	.word	0x20080000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	20000268 	.word	0x20000268
 8000edc:	20000490 	.word	0x20000490

08000ee0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <SystemInit+0x5c>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <SystemInit+0x5c>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <SystemInit+0x60>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <SystemInit+0x60>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <SystemInit+0x60>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SystemInit+0x60>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <SystemInit+0x60>)
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <SystemInit+0x64>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <SystemInit+0x60>)
 8000f14:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <SystemInit+0x68>)
 8000f16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <SystemInit+0x60>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <SystemInit+0x60>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x60>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SystemInit+0x5c>)
 8000f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f30:	609a      	str	r2, [r3, #8]
#endif
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	40023800 	.word	0x40023800
 8000f44:	fef6ffff 	.word	0xfef6ffff
 8000f48:	24003010 	.word	0x24003010

08000f4c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <MX_TIM1_Init+0xa4>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f72:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000f9a:	f002 fffb 	bl	8003f94 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f7ff fdf2 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000fb6:	f003 f845 	bl	8004044 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fc0:	f7ff fde4 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_TIM1_Init+0xa0>)
 8000fd6:	f003 fa35 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fe0:	f7ff fdd4 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000026c 	.word	0x2000026c
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x38>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10b      	bne.n	800101e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_TIM_Base_MspInit+0x3c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_TIM_Base_MspInit+0x3c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40010000 	.word	0x40010000
 8001030:	40023800 	.word	0x40023800

08001034 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART3_UART_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <MX_USART3_UART_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USART3_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART3_UART_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART3_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART3_UART_Init+0x58>)
 8001078:	f003 fa72 	bl	8004560 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001082:	f7ff fd83 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002b8 	.word	0x200002b8
 8001090:	40004800 	.word	0x40004800

08001094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_UART_MspInit+0x7c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x80>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_UART_MspInit+0x80>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x80>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_UART_MspInit+0x80>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_UART_MspInit+0x80>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_MspInit+0x80>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f8:	2307      	movs	r3, #7
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_UART_MspInit+0x84>)
 8001104:	f001 f868 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40004800 	.word	0x40004800
 8001114:	40023800 	.word	0x40023800
 8001118:	40020c00 	.word	0x40020c00

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001122:	e003      	b.n	800112c <LoopCopyDataInit>

08001124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800112a:	3104      	adds	r1, #4

0800112c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001134:	d3f6      	bcc.n	8001124 <CopyDataInit>
  ldr  r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001138:	e002      	b.n	8001140 <LoopFillZerobss>

0800113a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800113a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800113c:	f842 3b04 	str.w	r3, [r2], #4

08001140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001144:	d3f9      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001146:	f7ff fecb 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 fbdd 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fbe9 	bl	8000924 <main>
  bx  lr    
 8001152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001158:	08007f64 	.word	0x08007f64
  ldr  r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001160:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001164:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001168:	2000048c 	.word	0x2000048c

0800116c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC_IRQHandler>

0800116e <ILI9341_Draw_Filled_Circle>:
	}
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour) {
 800116e:	b590      	push	{r4, r7, lr}
 8001170:	b08b      	sub	sp, #44	; 0x2c
 8001172:	af00      	add	r7, sp, #0
 8001174:	4604      	mov	r4, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	461a      	mov	r2, r3
 800117c:	4623      	mov	r3, r4
 800117e:	80fb      	strh	r3, [r7, #6]
 8001180:	4603      	mov	r3, r0
 8001182:	80bb      	strh	r3, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	f1c3 0301 	rsb	r3, r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]

	while (x >= y) {
 80011a6:	e061      	b.n	800126c <ILI9341_Draw_Filled_Circle+0xfe>
		for (int i = X - x; i <= X + x; i++) {
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	e018      	b.n	80011e4 <ILI9341_Draw_Filled_Circle+0x76>
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	b298      	uxth	r0, r3
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	883a      	ldrh	r2, [r7, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	f000 fc26 	bl	8001a14 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	b298      	uxth	r0, r3
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	88ba      	ldrh	r2, [r7, #4]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	883a      	ldrh	r2, [r7, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f000 fc1b 	bl	8001a14 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++) {
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3301      	adds	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dde0      	ble.n	80011b2 <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++) {
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e018      	b.n	800122c <ILI9341_Draw_Filled_Circle+0xbe>
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	b29a      	uxth	r2, r3
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	883a      	ldrh	r2, [r7, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	f000 fc02 	bl	8001a14 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	b298      	uxth	r0, r3
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	b29b      	uxth	r3, r3
 8001218:	88ba      	ldrh	r2, [r7, #4]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	883a      	ldrh	r2, [r7, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f000 fbf7 	bl	8001a14 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	4413      	add	r3, r2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	dde0      	ble.n	80011fa <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	3301      	adds	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	3302      	adds	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0) {
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005a      	lsls	r2, r3, #1
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	4413      	add	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd09      	ble.n	800126c <ILI9341_Draw_Filled_Circle+0xfe>
			x--;
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	3b01      	subs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	4413      	add	r3, r2
 8001264:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3302      	adds	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
	while (x >= y) {
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	429a      	cmp	r2, r3
 8001272:	da99      	bge.n	80011a8 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	372c      	adds	r7, #44	; 0x2c
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
	...

08001280 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af02      	add	r7, sp, #8
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4603      	mov	r3, r0
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	717b      	strb	r3, [r7, #5]
 800129a:	4613      	mov	r3, r2
 800129c:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ') {
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	2b1f      	cmp	r3, #31
 80012a6:	d802      	bhi.n	80012ae <ILI9341_Draw_Char+0x2e>
		Character = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	e002      	b.n	80012b4 <ILI9341_Draw_Char+0x34>
	} else {
		function_char -= 32;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	3b20      	subs	r3, #32
 80012b2:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	753b      	strb	r3, [r7, #20]
 80012b8:	e012      	b.n	80012e0 <ILI9341_Draw_Char+0x60>
		temp[k] = font[function_char][k];
 80012ba:	7dfa      	ldrb	r2, [r7, #23]
 80012bc:	7d38      	ldrb	r0, [r7, #20]
 80012be:	7d39      	ldrb	r1, [r7, #20]
 80012c0:	4c3b      	ldr	r4, [pc, #236]	; (80013b0 <ILI9341_Draw_Char+0x130>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4423      	add	r3, r4
 80012cc:	4403      	add	r3, r0
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	f101 0318 	add.w	r3, r1, #24
 80012d4:	443b      	add	r3, r7
 80012d6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 80012da:	7d3b      	ldrb	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	753b      	strb	r3, [r7, #20]
 80012e0:	7d3b      	ldrb	r3, [r7, #20]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d9e9      	bls.n	80012ba <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	b298      	uxth	r0, r3
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	b299      	uxth	r1, r3
 80012ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f0:	461a      	mov	r2, r3
 80012f2:	0052      	lsls	r2, r2, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	b29c      	uxth	r4, r3
 8001300:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	4623      	mov	r3, r4
 8001306:	f000 fc5f 	bl	8001bc8 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++) {
 800130a:	2300      	movs	r3, #0
 800130c:	757b      	strb	r3, [r7, #21]
 800130e:	e047      	b.n	80013a0 <ILI9341_Draw_Char+0x120>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	75bb      	strb	r3, [r7, #22]
 8001314:	e03e      	b.n	8001394 <ILI9341_Draw_Char+0x114>
			if (temp[j] & (1 << i)) {
 8001316:	7d7b      	ldrb	r3, [r7, #21]
 8001318:	3318      	adds	r3, #24
 800131a:	443b      	add	r3, r7
 800131c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001320:	461a      	mov	r2, r3
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	fa42 f303 	asr.w	r3, r2, r3
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d02e      	beq.n	800138e <ILI9341_Draw_Char+0x10e>
				if (Size == 1) {
 8001330:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001332:	2b01      	cmp	r3, #1
 8001334:	d110      	bne.n	8001358 <ILI9341_Draw_Char+0xd8>
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	b29a      	uxth	r2, r3
 800133a:	7d7b      	ldrb	r3, [r7, #21]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b298      	uxth	r0, r3
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	b29a      	uxth	r2, r3
 8001346:	7dbb      	ldrb	r3, [r7, #22]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b29b      	uxth	r3, r3
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	4619      	mov	r1, r3
 8001352:	f000 fb5f 	bl	8001a14 <ILI9341_Draw_Pixel>
 8001356:	e01a      	b.n	800138e <ILI9341_Draw_Char+0x10e>
				} else {
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	b29a      	uxth	r2, r3
 800135c:	7d7b      	ldrb	r3, [r7, #21]
 800135e:	b29b      	uxth	r3, r3
 8001360:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001362:	fb11 f303 	smulbb	r3, r1, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b298      	uxth	r0, r3
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	b29a      	uxth	r2, r3
 8001370:	7dbb      	ldrb	r3, [r7, #22]
 8001372:	b29b      	uxth	r3, r3
 8001374:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001376:	fb11 f303 	smulbb	r3, r1, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	4413      	add	r3, r2
 800137e:	b299      	uxth	r1, r3
 8001380:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001382:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4623      	mov	r3, r4
 800138a:	f000 fc1d 	bl	8001bc8 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	3301      	adds	r3, #1
 8001392:	75bb      	strb	r3, [r7, #22]
 8001394:	7dbb      	ldrb	r3, [r7, #22]
 8001396:	2b07      	cmp	r3, #7
 8001398:	d9bd      	bls.n	8001316 <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++) {
 800139a:	7d7b      	ldrb	r3, [r7, #21]
 800139c:	3301      	adds	r3, #1
 800139e:	757b      	strb	r3, [r7, #21]
 80013a0:	7d7b      	ldrb	r3, [r7, #21]
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d9b4      	bls.n	8001310 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	080079a4 	.word	0x080079a4

080013b4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	70fb      	strb	r3, [r7, #3]
 80013c6:	460b      	mov	r3, r1
 80013c8:	70bb      	strb	r3, [r7, #2]
 80013ca:	4613      	mov	r3, r2
 80013cc:	803b      	strh	r3, [r7, #0]
	while (*Text) {
 80013ce:	e017      	b.n	8001400 <ILI9341_Draw_Text+0x4c>
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	7818      	ldrb	r0, [r3, #0]
 80013d8:	883c      	ldrh	r4, [r7, #0]
 80013da:	78ba      	ldrb	r2, [r7, #2]
 80013dc:	78f9      	ldrb	r1, [r7, #3]
 80013de:	8bbb      	ldrh	r3, [r7, #28]
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	8b3b      	ldrh	r3, [r7, #24]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4623      	mov	r3, r4
 80013e8:	f7ff ff4a 	bl	8001280 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 80013ec:	8b3b      	ldrh	r3, [r7, #24]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	4413      	add	r3, r2
 80013fe:	70fb      	strb	r3, [r7, #3]
	while (*Text) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e3      	bne.n	80013d0 <ILI9341_Draw_Text+0x1c>
	}
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
	...

08001414 <ILI9341_SPI_Init>:
/* Global Variables ------------------------------------------------------------------*/
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 8001418:	f7ff fbf0 	bl	8000bfc <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 800141c:	f7ff f8e6 	bl	80005ec <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <ILI9341_SPI_Init+0x1c>)
 8001428:	f001 f89a 	bl	8002560 <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020800 	.word	0x40020800

08001434 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800143e:	1df9      	adds	r1, r7, #7
 8001440:	2301      	movs	r3, #1
 8001442:	2201      	movs	r2, #1
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <ILI9341_SPI_Send+0x20>)
 8001446:	f002 fad6 	bl	80039f6 <HAL_SPI_Transmit>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000204 	.word	0x20000204

08001458 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <ILI9341_Write_Command+0x40>)
 800146a:	f001 f879 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <ILI9341_Write_Command+0x40>)
 8001476:	f001 f873 	bl	8002560 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ffd9 	bl	8001434 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <ILI9341_Write_Command+0x40>)
 800148a:	f001 f869 	bl	8002560 <HAL_GPIO_WritePin>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40020800 	.word	0x40020800

0800149c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <ILI9341_Write_Data+0x40>)
 80014ae:	f001 f857 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	4808      	ldr	r0, [pc, #32]	; (80014dc <ILI9341_Write_Data+0x40>)
 80014ba:	f001 f851 	bl	8002560 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffb7 	bl	8001434 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <ILI9341_Write_Data+0x40>)
 80014ce:	f001 f847 	bl	8002560 <HAL_GPIO_WritePin>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40020800 	.word	0x40020800

080014e0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4623      	mov	r3, r4
 80014f0:	80fb      	strh	r3, [r7, #6]
 80014f2:	4603      	mov	r3, r0
 80014f4:	80bb      	strh	r3, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]
 80014fa:	4613      	mov	r3, r2
 80014fc:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80014fe:	202a      	movs	r0, #42	; 0x2a
 8001500:	f7ff ffaa 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffc5 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ffc0 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	b29b      	uxth	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ffb9 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ffb4 	bl	800149c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8001534:	202b      	movs	r0, #43	; 0x2b
 8001536:	f7ff ff8f 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ffaa 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8001548:	88bb      	ldrh	r3, [r7, #4]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffa5 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 8001552:	883b      	ldrh	r3, [r7, #0]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	b29b      	uxth	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff9e 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8001560:	883b      	ldrh	r3, [r7, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff99 	bl	800149c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 800156a:	202c      	movs	r0, #44	; 0x2c
 800156c:	f7ff ff74 	bl	8001458 <ILI9341_Write_Command>
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}

08001578 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <ILI9341_Reset+0x38>)
 8001584:	f000 ffec 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001588:	20c8      	movs	r0, #200	; 0xc8
 800158a:	f000 fd1b 	bl	8001fc4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <ILI9341_Reset+0x38>)
 8001596:	f000 ffe3 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800159a:	20c8      	movs	r0, #200	; 0xc8
 800159c:	f000 fd12 	bl	8001fc4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a6:	4802      	ldr	r0, [pc, #8]	; (80015b0 <ILI9341_Reset+0x38>)
 80015a8:	f000 ffda 	bl	8002560 <HAL_GPIO_WritePin>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020800 	.word	0x40020800

080015b4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80015c2:	2036      	movs	r0, #54	; 0x36
 80015c4:	f7ff ff48 	bl	8001458 <ILI9341_Write_Command>
	HAL_Delay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f000 fcfb 	bl	8001fc4 <HAL_Delay>

	switch (screen_rotation) {
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d837      	bhi.n	8001644 <ILI9341_Set_Rotation+0x90>
 80015d4:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <ILI9341_Set_Rotation+0x28>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	08001603 	.word	0x08001603
 80015e4:	08001619 	.word	0x08001619
 80015e8:	0800162f 	.word	0x0800162f
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 80015ec:	2048      	movs	r0, #72	; 0x48
 80015ee:	f7ff ff55 	bl	800149c <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <ILI9341_Set_Rotation+0x9c>)
 80015f4:	22f0      	movs	r2, #240	; 0xf0
 80015f6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <ILI9341_Set_Rotation+0xa0>)
 80015fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015fe:	801a      	strh	r2, [r3, #0]
		break;
 8001600:	e021      	b.n	8001646 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8001602:	2028      	movs	r0, #40	; 0x28
 8001604:	f7ff ff4a 	bl	800149c <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <ILI9341_Set_Rotation+0x9c>)
 800160a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800160e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <ILI9341_Set_Rotation+0xa0>)
 8001612:	22f0      	movs	r2, #240	; 0xf0
 8001614:	801a      	strh	r2, [r3, #0]
		break;
 8001616:	e016      	b.n	8001646 <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8001618:	2088      	movs	r0, #136	; 0x88
 800161a:	f7ff ff3f 	bl	800149c <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <ILI9341_Set_Rotation+0x9c>)
 8001620:	22f0      	movs	r2, #240	; 0xf0
 8001622:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <ILI9341_Set_Rotation+0xa0>)
 8001626:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800162a:	801a      	strh	r2, [r3, #0]
		break;
 800162c:	e00b      	b.n	8001646 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 800162e:	20e8      	movs	r0, #232	; 0xe8
 8001630:	f7ff ff34 	bl	800149c <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <ILI9341_Set_Rotation+0x9c>)
 8001636:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800163a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <ILI9341_Set_Rotation+0xa0>)
 800163e:	22f0      	movs	r2, #240	; 0xf0
 8001640:	801a      	strh	r2, [r3, #0]
		break;
 8001642:	e000      	b.n	8001646 <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8001644:	bf00      	nop
	}
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000006 	.word	0x20000006
 8001654:	20000004 	.word	0x20000004

08001658 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <ILI9341_Enable+0x14>)
 8001664:	f000 ff7c 	bl	8002560 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020800 	.word	0x40020800

08001670 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8001674:	f7ff fff0 	bl	8001658 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8001678:	f7ff fecc 	bl	8001414 <ILI9341_SPI_Init>
	ILI9341_Reset();
 800167c:	f7ff ff7c 	bl	8001578 <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fee9 	bl	8001458 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8001686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168a:	f000 fc9b 	bl	8001fc4 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800168e:	20cb      	movs	r0, #203	; 0xcb
 8001690:	f7ff fee2 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8001694:	2039      	movs	r0, #57	; 0x39
 8001696:	f7ff ff01 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800169a:	202c      	movs	r0, #44	; 0x2c
 800169c:	f7ff fefe 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fefb 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 80016a6:	2034      	movs	r0, #52	; 0x34
 80016a8:	f7ff fef8 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f7ff fef5 	bl	800149c <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80016b2:	20cf      	movs	r0, #207	; 0xcf
 80016b4:	f7ff fed0 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff feef 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80016be:	20c1      	movs	r0, #193	; 0xc1
 80016c0:	f7ff feec 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 80016c4:	2030      	movs	r0, #48	; 0x30
 80016c6:	f7ff fee9 	bl	800149c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80016ca:	20e8      	movs	r0, #232	; 0xe8
 80016cc:	f7ff fec4 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 80016d0:	2085      	movs	r0, #133	; 0x85
 80016d2:	f7ff fee3 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fee0 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 80016dc:	2078      	movs	r0, #120	; 0x78
 80016de:	f7ff fedd 	bl	800149c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80016e2:	20ea      	movs	r0, #234	; 0xea
 80016e4:	f7ff feb8 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fed7 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fed4 	bl	800149c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80016f4:	20ed      	movs	r0, #237	; 0xed
 80016f6:	f7ff feaf 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 80016fa:	2064      	movs	r0, #100	; 0x64
 80016fc:	f7ff fece 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8001700:	2003      	movs	r0, #3
 8001702:	f7ff fecb 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8001706:	2012      	movs	r0, #18
 8001708:	f7ff fec8 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 800170c:	2081      	movs	r0, #129	; 0x81
 800170e:	f7ff fec5 	bl	800149c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8001712:	20f7      	movs	r0, #247	; 0xf7
 8001714:	f7ff fea0 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8001718:	2020      	movs	r0, #32
 800171a:	f7ff febf 	bl	800149c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 800171e:	20c0      	movs	r0, #192	; 0xc0
 8001720:	f7ff fe9a 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8001724:	2023      	movs	r0, #35	; 0x23
 8001726:	f7ff feb9 	bl	800149c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 800172a:	20c1      	movs	r0, #193	; 0xc1
 800172c:	f7ff fe94 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8001730:	2010      	movs	r0, #16
 8001732:	f7ff feb3 	bl	800149c <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8001736:	20c5      	movs	r0, #197	; 0xc5
 8001738:	f7ff fe8e 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 800173c:	203e      	movs	r0, #62	; 0x3e
 800173e:	f7ff fead 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8001742:	2028      	movs	r0, #40	; 0x28
 8001744:	f7ff feaa 	bl	800149c <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8001748:	20c7      	movs	r0, #199	; 0xc7
 800174a:	f7ff fe85 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 800174e:	2086      	movs	r0, #134	; 0x86
 8001750:	f7ff fea4 	bl	800149c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8001754:	2036      	movs	r0, #54	; 0x36
 8001756:	f7ff fe7f 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 800175a:	2048      	movs	r0, #72	; 0x48
 800175c:	f7ff fe9e 	bl	800149c <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8001760:	203a      	movs	r0, #58	; 0x3a
 8001762:	f7ff fe79 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8001766:	2055      	movs	r0, #85	; 0x55
 8001768:	f7ff fe98 	bl	800149c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 800176c:	20b1      	movs	r0, #177	; 0xb1
 800176e:	f7ff fe73 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fe92 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8001778:	2018      	movs	r0, #24
 800177a:	f7ff fe8f 	bl	800149c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800177e:	20b6      	movs	r0, #182	; 0xb6
 8001780:	f7ff fe6a 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8001784:	2008      	movs	r0, #8
 8001786:	f7ff fe89 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800178a:	2082      	movs	r0, #130	; 0x82
 800178c:	f7ff fe86 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8001790:	2027      	movs	r0, #39	; 0x27
 8001792:	f7ff fe83 	bl	800149c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8001796:	20f2      	movs	r0, #242	; 0xf2
 8001798:	f7ff fe5e 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fe7d 	bl	800149c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80017a2:	2026      	movs	r0, #38	; 0x26
 80017a4:	f7ff fe58 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fe77 	bl	800149c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80017ae:	20e0      	movs	r0, #224	; 0xe0
 80017b0:	f7ff fe52 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f7ff fe71 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80017ba:	2031      	movs	r0, #49	; 0x31
 80017bc:	f7ff fe6e 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80017c0:	202b      	movs	r0, #43	; 0x2b
 80017c2:	f7ff fe6b 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80017c6:	200c      	movs	r0, #12
 80017c8:	f7ff fe68 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80017cc:	200e      	movs	r0, #14
 80017ce:	f7ff fe65 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80017d2:	2008      	movs	r0, #8
 80017d4:	f7ff fe62 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 80017d8:	204e      	movs	r0, #78	; 0x4e
 80017da:	f7ff fe5f 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 80017de:	20f1      	movs	r0, #241	; 0xf1
 80017e0:	f7ff fe5c 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 80017e4:	2037      	movs	r0, #55	; 0x37
 80017e6:	f7ff fe59 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f7ff fe56 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 80017f0:	2010      	movs	r0, #16
 80017f2:	f7ff fe53 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f7ff fe50 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80017fc:	200e      	movs	r0, #14
 80017fe:	f7ff fe4d 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8001802:	2009      	movs	r0, #9
 8001804:	f7ff fe4a 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fe47 	bl	800149c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 800180e:	20e1      	movs	r0, #225	; 0xe1
 8001810:	f7ff fe22 	bl	8001458 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fe41 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800181a:	200e      	movs	r0, #14
 800181c:	f7ff fe3e 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8001820:	2014      	movs	r0, #20
 8001822:	f7ff fe3b 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8001826:	2003      	movs	r0, #3
 8001828:	f7ff fe38 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 800182c:	2011      	movs	r0, #17
 800182e:	f7ff fe35 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8001832:	2007      	movs	r0, #7
 8001834:	f7ff fe32 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001838:	2031      	movs	r0, #49	; 0x31
 800183a:	f7ff fe2f 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800183e:	20c1      	movs	r0, #193	; 0xc1
 8001840:	f7ff fe2c 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8001844:	2048      	movs	r0, #72	; 0x48
 8001846:	f7ff fe29 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800184a:	2008      	movs	r0, #8
 800184c:	f7ff fe26 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001850:	200f      	movs	r0, #15
 8001852:	f7ff fe23 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8001856:	200c      	movs	r0, #12
 8001858:	f7ff fe20 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800185c:	2031      	movs	r0, #49	; 0x31
 800185e:	f7ff fe1d 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8001862:	2036      	movs	r0, #54	; 0x36
 8001864:	f7ff fe1a 	bl	800149c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001868:	200f      	movs	r0, #15
 800186a:	f7ff fe17 	bl	800149c <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800186e:	2011      	movs	r0, #17
 8001870:	f7ff fdf2 	bl	8001458 <ILI9341_Write_Command>
	HAL_Delay(120);
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 fba5 	bl	8001fc4 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800187a:	2029      	movs	r0, #41	; 0x29
 800187c:	f7ff fdec 	bl	8001458 <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff fe97 	bl	80015b4 <ILI9341_Set_Rotation>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <ILI9341_Draw_Colour_Burst>:
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size) {
 800188c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001890:	b08d      	sub	sp, #52	; 0x34
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	6039      	str	r1, [r7, #0]
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	466b      	mov	r3, sp
 800189c:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE) {
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018aa:	d202      	bcs.n	80018b2 <ILI9341_Draw_Colour_Burst+0x26>
		Buffer_Size = Size;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b0:	e002      	b.n	80018b8 <ILI9341_Draw_Colour_Burst+0x2c>
	} else {
		Buffer_Size = BURST_MAX_SIZE;
 80018b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018be:	4840      	ldr	r0, [pc, #256]	; (80019c0 <ILI9341_Draw_Colour_Burst+0x134>)
 80018c0:	f000 fe4e 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ca:	483d      	ldr	r0, [pc, #244]	; (80019c0 <ILI9341_Draw_Colour_Burst+0x134>)
 80018cc:	f000 fe48 	bl	8002560 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 80018da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018dc:	460b      	mov	r3, r1
 80018de:	3b01      	subs	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	2300      	movs	r3, #0
 80018e4:	4688      	mov	r8, r1
 80018e6:	4699      	mov	r9, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fc:	2300      	movs	r3, #0
 80018fe:	460c      	mov	r4, r1
 8001900:	461d      	mov	r5, r3
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	00eb      	lsls	r3, r5, #3
 800190c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001910:	00e2      	lsls	r2, r4, #3
 8001912:	1dcb      	adds	r3, r1, #7
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	ebad 0d03 	sub.w	sp, sp, r3
 800191c:	466b      	mov	r3, sp
 800191e:	3300      	adds	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2) {
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
 8001926:	e00e      	b.n	8001946 <ILI9341_Draw_Colour_Burst+0xba>
		burst_buffer[j] = chifted;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	4413      	add	r3, r2
 800192e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001932:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	3301      	adds	r3, #1
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	b2d1      	uxtb	r1, r2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2) {
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	3302      	adds	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
 8001946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	429a      	cmp	r2, r3
 800194c:	d3ec      	bcc.n	8001928 <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	fbb3 f2f2 	udiv	r2, r3, r2
 8001966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001968:	fb01 f202 	mul.w	r2, r1, r2
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0) {
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <ILI9341_Draw_Colour_Burst+0x10c>
		for (uint32_t j = 0; j < (Sending_in_Block); j++) {
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e009      	b.n	8001990 <ILI9341_Draw_Colour_Burst+0x104>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	b29a      	uxth	r2, r3
 8001980:	230a      	movs	r3, #10
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <ILI9341_Draw_Colour_Burst+0x138>)
 8001986:	f002 f836 	bl	80039f6 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++) {
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3f1      	bcc.n	800197c <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	b29a      	uxth	r2, r3
 800199c:	230a      	movs	r3, #10
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	4808      	ldr	r0, [pc, #32]	; (80019c4 <ILI9341_Draw_Colour_Burst+0x138>)
 80019a2:	f002 f828 	bl	80039f6 <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <ILI9341_Draw_Colour_Burst+0x134>)
 80019ae:	f000 fdd7 	bl	8002560 <HAL_GPIO_WritePin>
 80019b2:	46b5      	mov	sp, r6
}
 80019b4:	bf00      	nop
 80019b6:	3734      	adds	r7, #52	; 0x34
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019be:	bf00      	nop
 80019c0:	40020800 	.word	0x40020800
 80019c4:	20000204 	.word	0x20000204

080019c8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <ILI9341_Fill_Screen+0x44>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <ILI9341_Fill_Screen+0x48>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fd7d 	bl	80014e0 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <ILI9341_Fill_Screen+0x44>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <ILI9341_Fill_Screen+0x48>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff44 	bl	800188c <ILI9341_Draw_Colour_Burst>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000006 	.word	0x20000006
 8001a10:	20000004 	.word	0x20000004

08001a14 <ILI9341_Draw_Pixel>:
//
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8001a26:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <ILI9341_Draw_Pixel+0x1a4>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	88fa      	ldrh	r2, [r7, #6]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	f080 80be 	bcs.w	8001bb0 <ILI9341_Draw_Pixel+0x19c>
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <ILI9341_Draw_Pixel+0x1a8>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	88ba      	ldrh	r2, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f080 80b7 	bcs.w	8001bb0 <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a48:	485d      	ldr	r0, [pc, #372]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a4a:	f000 fd89 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	485a      	ldr	r0, [pc, #360]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a56:	f000 fd83 	bl	8002560 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8001a5a:	202a      	movs	r0, #42	; 0x2a
 8001a5c:	f7ff fcea 	bl	8001434 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	4856      	ldr	r0, [pc, #344]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a68:	f000 fd7a 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a72:	4853      	ldr	r0, [pc, #332]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a74:	f000 fd74 	bl	8002560 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7e:	4850      	ldr	r0, [pc, #320]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a80:	f000 fd6e 	bl	8002560 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] = { X >> 8, X, (X + 1) >> 8, (X + 1) };
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	753b      	strb	r3, [r7, #20]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	757b      	strb	r3, [r7, #21]
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	3301      	adds	r3, #1
 8001a98:	121b      	asrs	r3, r3, #8
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	75bb      	strb	r3, [r7, #22]
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001aa8:	f107 0114 	add.w	r1, r7, #20
 8001aac:	2301      	movs	r3, #1
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4844      	ldr	r0, [pc, #272]	; (8001bc4 <ILI9341_Draw_Pixel+0x1b0>)
 8001ab2:	f001 ffa0 	bl	80039f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abc:	4840      	ldr	r0, [pc, #256]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001abe:	f000 fd4f 	bl	8002560 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac8:	483d      	ldr	r0, [pc, #244]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001aca:	f000 fd49 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad4:	483a      	ldr	r0, [pc, #232]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001ad6:	f000 fd43 	bl	8002560 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8001ada:	202b      	movs	r0, #43	; 0x2b
 8001adc:	f7ff fcaa 	bl	8001434 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae6:	4836      	ldr	r0, [pc, #216]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001ae8:	f000 fd3a 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af2:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001af4:	f000 fd34 	bl	8002560 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afe:	4830      	ldr	r0, [pc, #192]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b00:	f000 fd2e 	bl	8002560 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] = { Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	743b      	strb	r3, [r7, #16]
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	747b      	strb	r3, [r7, #17]
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	121b      	asrs	r3, r3, #8
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	74bb      	strb	r3, [r7, #18]
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001b28:	f107 0110 	add.w	r1, r7, #16
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4824      	ldr	r0, [pc, #144]	; (8001bc4 <ILI9341_Draw_Pixel+0x1b0>)
 8001b32:	f001 ff60 	bl	80039f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3c:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b3e:	f000 fd0f 	bl	8002560 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b48:	481d      	ldr	r0, [pc, #116]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b4a:	f000 fd09 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b54:	481a      	ldr	r0, [pc, #104]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b56:	f000 fd03 	bl	8002560 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8001b5a:	202c      	movs	r0, #44	; 0x2c
 8001b5c:	f7ff fc6a 	bl	8001434 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b66:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b68:	f000 fcfa 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b72:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b74:	f000 fcf4 	bl	8002560 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b80:	f000 fcee 	bl	8002560 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] = { Colour >> 8, Colour };
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	733b      	strb	r3, [r7, #12]
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001b94:	f107 010c 	add.w	r1, r7, #12
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <ILI9341_Draw_Pixel+0x1b0>)
 8001b9e:	f001 ff2a 	bl	80039f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <ILI9341_Draw_Pixel+0x1ac>)
 8001baa:	f000 fcd9 	bl	8002560 <HAL_GPIO_WritePin>
 8001bae:	e000      	b.n	8001bb2 <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 8001bb0:	bf00      	nop

}
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000006 	.word	0x20000006
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	20000204 	.word	0x20000204

08001bc8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80bb      	strh	r3, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
 8001be2:	4613      	mov	r3, r2
 8001be4:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <ILI9341_Draw_Rectangle+0xb0>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	88fa      	ldrh	r2, [r7, #6]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d23d      	bcs.n	8001c6e <ILI9341_Draw_Rectangle+0xa6>
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <ILI9341_Draw_Rectangle+0xb4>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	88ba      	ldrh	r2, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d237      	bcs.n	8001c6e <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH) {
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <ILI9341_Draw_Rectangle+0xb0>)
 8001c06:	8812      	ldrh	r2, [r2, #0]
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	dd05      	ble.n	8001c1a <ILI9341_Draw_Rectangle+0x52>
		Width = LCD_WIDTH - X;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <ILI9341_Draw_Rectangle+0xb0>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT) {
 8001c1a:	88ba      	ldrh	r2, [r7, #4]
 8001c1c:	883b      	ldrh	r3, [r7, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <ILI9341_Draw_Rectangle+0xb4>)
 8001c22:	8812      	ldrh	r2, [r2, #0]
 8001c24:	b292      	uxth	r2, r2
 8001c26:	4293      	cmp	r3, r2
 8001c28:	dd05      	ble.n	8001c36 <ILI9341_Draw_Rectangle+0x6e>
		Height = LCD_HEIGHT - Y;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <ILI9341_Draw_Rectangle+0xb4>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29c      	uxth	r4, r3
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	883b      	ldrh	r3, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	88b9      	ldrh	r1, [r7, #4]
 8001c50:	88f8      	ldrh	r0, [r7, #6]
 8001c52:	4622      	mov	r2, r4
 8001c54:	f7ff fc44 	bl	80014e0 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8001c58:	883b      	ldrh	r3, [r7, #0]
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	8b3b      	ldrh	r3, [r7, #24]
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe10 	bl	800188c <ILI9341_Draw_Colour_Burst>
 8001c6c:	e000      	b.n	8001c70 <ILI9341_Draw_Rectangle+0xa8>
		return;
 8001c6e:	bf00      	nop
}
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000006 	.word	0x20000006
 8001c7c:	20000004 	.word	0x20000004

08001c80 <TP_Read>:

#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 8001c86:	2310      	movs	r3, #16
 8001c88:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00) {
 8001c8e:	e019      	b.n	8001cc4 <TP_Read+0x44>
		value <<= 1;
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001c96:	2201      	movs	r2, #1
 8001c98:	2108      	movs	r1, #8
 8001c9a:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <TP_Read+0x54>)
 8001c9c:	f000 fc60 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <TP_Read+0x54>)
 8001ca6:	f000 fc5b 	bl	8002560 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0) {
 8001caa:	2110      	movs	r1, #16
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <TP_Read+0x54>)
 8001cae:	f000 fc3f 	bl	8002530 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <TP_Read+0x3e>
			value++;
 8001cb8:	88bb      	ldrh	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00) {
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1e2      	bne.n	8001c90 <TP_Read+0x10>
	};

	return value;
 8001cca:	88bb      	ldrh	r3, [r7, #4]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2108      	movs	r1, #8
 8001cea:	4815      	ldr	r0, [pc, #84]	; (8001d40 <TP_Write+0x68>)
 8001cec:	f000 fc38 	bl	8002560 <HAL_GPIO_WritePin>

	while (i > 0) {
 8001cf0:	e01e      	b.n	8001d30 <TP_Write+0x58>
		if ((value & 0x80) != 0x00) {
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	da05      	bge.n	8001d06 <TP_Write+0x2e>
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2120      	movs	r1, #32
 8001cfe:	4810      	ldr	r0, [pc, #64]	; (8001d40 <TP_Write+0x68>)
 8001d00:	f000 fc2e 	bl	8002560 <HAL_GPIO_WritePin>
 8001d04:	e004      	b.n	8001d10 <TP_Write+0x38>
		} else {
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2120      	movs	r1, #32
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <TP_Write+0x68>)
 8001d0c:	f000 fc28 	bl	8002560 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2108      	movs	r1, #8
 8001d1a:	4809      	ldr	r0, [pc, #36]	; (8001d40 <TP_Write+0x68>)
 8001d1c:	f000 fc20 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2108      	movs	r1, #8
 8001d24:	4806      	ldr	r0, [pc, #24]	; (8001d40 <TP_Write+0x68>)
 8001d26:	f000 fc1b 	bl	8002560 <HAL_GPIO_WritePin>
		i--;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
	while (i > 0) {
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1dd      	bne.n	8001cf2 <TP_Write+0x1a>
	};
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	00000000 	.word	0x00000000

08001d48 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2]) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2108      	movs	r1, #8
 8001d54:	485a      	ldr	r0, [pc, #360]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001d56:	f000 fc03 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	4858      	ldr	r0, [pc, #352]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001d60:	f000 fbfe 	bl	8002560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	4855      	ldr	r0, [pc, #340]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001d6a:	f000 fbf9 	bl	8002560 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	484d      	ldr	r0, [pc, #308]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001d8a:	f000 fbe9 	bl	8002560 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)) {
 8001d8e:	e023      	b.n	8001dd8 <TP_Read_Coordinates+0x90>
		TP_Write(CMD_RDY);
 8001d90:	2090      	movs	r0, #144	; 0x90
 8001d92:	f7ff ffa1 	bl	8001cd8 <TP_Write>

		rawy = TP_Read();
 8001d96:	f7ff ff73 	bl	8001c80 <TP_Read>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	6a3a      	ldr	r2, [r7, #32]
 8001da2:	4413      	add	r3, r2
 8001da4:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 8001da6:	89fb      	ldrh	r3, [r7, #14]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4413      	add	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 8001dae:	20d0      	movs	r0, #208	; 0xd0
 8001db0:	f7ff ff92 	bl	8001cd8 <TP_Write>
		rawx = TP_Read();
 8001db4:	f7ff ff64 	bl	8001c80 <TP_Read>
 8001db8:	4603      	mov	r3, r0
 8001dba:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 8001dbc:	89bb      	ldrh	r3, [r7, #12]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4413      	add	r3, r2
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 8001dc4:	89bb      	ldrh	r3, [r7, #12]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	61fb      	str	r3, [r7, #28]
		samples--;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
		counted_samples++;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)) {
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <TP_Read_Coordinates+0xa4>
 8001dde:	2104      	movs	r1, #4
 8001de0:	4837      	ldr	r0, [pc, #220]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001de2:	f000 fba5 	bl	8002530 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0d1      	beq.n	8001d90 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2140      	movs	r1, #64	; 0x40
 8001df0:	4833      	ldr	r0, [pc, #204]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001df2:	f000 fbb5 	bl	8002560 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dfc:	d14d      	bne.n	8001e9a <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)) {
 8001dfe:	2104      	movs	r1, #4
 8001e00:	482f      	ldr	r0, [pc, #188]	; (8001ec0 <TP_Read_Coordinates+0x178>)
 8001e02:	f000 fb95 	bl	8002530 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d146      	bne.n	8001e9a <TP_Read_Coordinates+0x152>

		calculating_x /= counted_samples;
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8001e28:	89bb      	ldrh	r3, [r7, #12]
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	425b      	negs	r3, r3
 8001e32:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8001e34:	89ba      	ldrh	r2, [r7, #12]
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <TP_Read_Coordinates+0x17c>)
 8001e38:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3c:	1ad2      	subs	r2, r2, r3
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e52:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001eb8 <TP_Read_Coordinates+0x170>
 8001e56:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8001e5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e5e:	ee17 3a90 	vmov	r3, s15
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <TP_Read_Coordinates+0x180>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	09db      	lsrs	r3, r3, #7
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b0f      	subs	r3, #15
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e7e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001eb8 <TP_Read_Coordinates+0x170>
 8001e82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e8e:	ee17 2a90 	vmov	r2, s15
 8001e92:	b292      	uxth	r2, r2
 8001e94:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e007      	b.n	8001eaa <TP_Read_Coordinates+0x162>
	} else {
		Coordinates[0] = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 8001ea8:	2300      	movs	r3, #0
	}
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	28f5c28f 	.word	0x28f5c28f
 8001ebc:	3ff28f5c 	.word	0x3ff28f5c
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	e01e01e1 	.word	0xe01e01e1
 8001ec8:	a0a0a0a1 	.word	0xa0a0a0a1

08001ecc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0) {
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <TP_Touchpad_Pressed+0x1c>)
 8001ed4:	f000 fb2c 	bl	8002530 <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <TP_Touchpad_Pressed+0x16>
		return TOUCHPAD_PRESSED;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <TP_Touchpad_Pressed+0x18>
	} else {
		return TOUCHPAD_NOT_PRESSED;
 8001ee2:	2300      	movs	r3, #0
	}
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_Init+0x34>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_Init+0x34>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_Init+0x34>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_Init+0x34>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f931 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7fe fef4 	bl	8000d00 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f93b 	bl	80021be <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 f911 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	2000033c 	.word	0x2000033c

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	2000033c 	.word	0x2000033c

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000000c 	.word	0x2000000c

0800200c <__NVIC_SetPriorityGrouping>:
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]
		reg_value = SCB->AIRCR; /* read old register configuration    */
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	431a      	orrs	r2, r3
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	4313      	orrs	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
	}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	05fa0000 	.word	0x05fa0000

08002054 <__NVIC_GetPriorityGrouping>:
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
	}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_SetPriority>:
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
			SCB->SHPR[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
	}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
			uint32_t PreemptPriority, uint32_t SubPriority) {
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
						(uint32_t) 0UL :
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
		SubPriorityBits =
 80020f6:	617b      	str	r3, [r7, #20]
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
 800211c:	4313      	orrs	r3, r2
	}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff47 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff5c 	bl	8002054 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffb0 	bl	800212c <SysTick_Config>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e175      	b.n	80024e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8164 	bne.w	80024de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d00b      	beq.n	8002236 <HAL_GPIO_Init+0x5e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800222a:	2b11      	cmp	r3, #17
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b12      	cmp	r3, #18
 8002234:	d130      	bne.n	8002298 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x100>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80be 	beq.w	80024de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_GPIO_Init+0x324>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_GPIO_Init+0x324>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_GPIO_Init+0x324>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800237a:	4a61      	ldr	r2, [pc, #388]	; (8002500 <HAL_GPIO_Init+0x328>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d037      	beq.n	8002416 <HAL_GPIO_Init+0x23e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_GPIO_Init+0x330>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_GPIO_Init+0x23a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_GPIO_Init+0x334>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02b      	beq.n	800240e <HAL_GPIO_Init+0x236>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a55      	ldr	r2, [pc, #340]	; (8002510 <HAL_GPIO_Init+0x338>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x232>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_GPIO_Init+0x33c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x22e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a53      	ldr	r2, [pc, #332]	; (8002518 <HAL_GPIO_Init+0x340>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x22a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_GPIO_Init+0x344>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x226>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_GPIO_Init+0x348>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x222>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	; (8002524 <HAL_GPIO_Init+0x34c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x21e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x350>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x21a>
 80023ee:	2309      	movs	r3, #9
 80023f0:	e012      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023f2:	230a      	movs	r3, #10
 80023f4:	e010      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00e      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e00c      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023fe:	2306      	movs	r3, #6
 8002400:	e00a      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002402:	2305      	movs	r3, #5
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002406:	2304      	movs	r3, #4
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x240>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x240>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002428:	4935      	ldr	r1, [pc, #212]	; (8002500 <HAL_GPIO_Init+0x328>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_GPIO_Init+0x354>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_GPIO_Init+0x354>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_GPIO_Init+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002484:	4a29      	ldr	r2, [pc, #164]	; (800252c <HAL_GPIO_Init+0x354>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_GPIO_Init+0x354>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_GPIO_Init+0x354>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_GPIO_Init+0x354>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_GPIO_Init+0x354>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f ae86 	bls.w	80021f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40021400 	.word	0x40021400
 800251c:	40021800 	.word	0x40021800
 8002520:	40021c00 	.word	0x40021c00
 8002524:	40022000 	.word	0x40022000
 8002528:	40022400 	.word	0x40022400
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000

080025b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e2:	f7ff fce3 	bl	8001fac <HAL_GetTick>
 80025e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e8:	e009      	b.n	80025fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ea:	f7ff fcdf 	bl	8001fac <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f8:	d901      	bls.n	80025fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e022      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d1ee      	bne.n	80025ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002618:	f7ff fcc8 	bl	8001fac <HAL_GetTick>
 800261c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261e:	e009      	b.n	8002634 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002620:	f7ff fcc4 	bl	8001fac <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800262e:	d901      	bls.n	8002634 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e007      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002640:	d1ee      	bne.n	8002620 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000

08002654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e29b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4b96      	ldr	r3, [pc, #600]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002684:	4b93      	ldr	r3, [pc, #588]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62>
 8002690:	4b90      	ldr	r3, [pc, #576]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269e:	4b8d      	ldr	r3, [pc, #564]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d06c      	beq.n	8002784 <HAL_RCC_OscConfig+0x130>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d168      	bne.n	8002784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e275      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x7a>
 80026c0:	4b84      	ldr	r3, [pc, #528]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a83      	ldr	r2, [pc, #524]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x9c>
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7e      	ldr	r2, [pc, #504]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b7c      	ldr	r3, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7b      	ldr	r2, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0xc0>
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a72      	ldr	r2, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6b      	ldr	r2, [pc, #428]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7ff fc3a 	bl	8001fac <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff fc36 	bl	8001fac <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e229      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff fc26 	bl	8001fac <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff fc22 	bl	8001fac <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e215      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x110>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d069      	beq.n	8002866 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x190>
 80027aa:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x17a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1e9      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	493d      	ldr	r1, [pc, #244]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e040      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a38      	ldr	r2, [pc, #224]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff fbd8 	bl	8001fac <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff fbd4 	bl	8001fac <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1c7      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4929      	ldr	r1, [pc, #164]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
 8002832:	e018      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff fbb4 	bl	8001fac <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff fbb0 	bl	8001fac <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1a3      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d038      	beq.n	80028e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7ff fb91 	bl	8001fac <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7ff fb8d 	bl	8001fac <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e180      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x23a>
 80028ac:	e01a      	b.n	80028e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7ff fb77 	bl	8001fac <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7ff fb73 	bl	8001fac <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d903      	bls.n	80028d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e166      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
 80028d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b92      	ldr	r3, [pc, #584]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a4 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b8c      	ldr	r3, [pc, #560]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b89      	ldr	r3, [pc, #548]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a88      	ldr	r2, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b86      	ldr	r3, [pc, #536]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002926:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7f      	ldr	r2, [pc, #508]	; (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff fb3b 	bl	8001fac <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff fb37 	bl	8001fac <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e12a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x31a>
 8002960:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a6f      	ldr	r2, [pc, #444]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x33c>
 8002976:	4b6b      	ldr	r3, [pc, #428]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a6a      	ldr	r2, [pc, #424]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a67      	ldr	r2, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x35e>
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a61      	ldr	r2, [pc, #388]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a5e      	ldr	r2, [pc, #376]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 80029b2:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a5b      	ldr	r2, [pc, #364]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7ff faeb 	bl	8001fac <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff fae7 	bl	8001fac <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0d8      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b4c      	ldr	r3, [pc, #304]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x386>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7ff fad5 	bl	8001fac <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff fad1 	bl	8001fac <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0c2      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80ae 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d06d      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d14b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff faa2 	bl	8001fac <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff fa9e 	bl	8001fac <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e091      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	071b      	lsls	r3, r3, #28
 8002ab6:	491b      	ldr	r1, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fa70 	bl	8001fac <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7ff fa6c 	bl	8001fac <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e05f      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
 8002aee:	e057      	b.n	8002ba0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff fa56 	bl	8001fac <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7ff fa52 	bl	8001fac <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e045      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4b0>
 8002b22:	e03d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x54c>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_RCC_OscConfig+0x558>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d030      	beq.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d129      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d122      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d119      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10f      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d0      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 020f 	bic.w	r2, r3, #15
 8002bde:	4965      	ldr	r1, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d040      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d115      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e073      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06b      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4936      	ldr	r1, [pc, #216]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca4:	f7ff f982 	bl	8001fac <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7ff f97e 	bl	8001fac <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e053      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d210      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	4922      	ldr	r1, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1cc>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1d0>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f8de 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	0800798c 	.word	0x0800798c
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000008 	.word	0x20000008

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b094      	sub	sp, #80	; 0x50
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
 8002d94:	2300      	movs	r3, #0
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d98:	2300      	movs	r3, #0
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f200 80e1 	bhi.w	8002f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dba:	e0db      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b73      	ldr	r3, [pc, #460]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc0:	e0db      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc2:	4b73      	ldr	r3, [pc, #460]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc6:	e0d8      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b6f      	ldr	r3, [pc, #444]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d063      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	2200      	movs	r2, #0
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
 8002df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4621      	mov	r1, r4
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	6139      	str	r1, [r7, #16]
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4651      	mov	r1, sl
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e40:	4659      	mov	r1, fp
 8002e42:	eb63 0901 	sbc.w	r9, r3, r1
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	4699      	mov	r9, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	eb18 0303 	adds.w	r3, r8, r3
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	462b      	mov	r3, r5
 8002e68:	eb49 0303 	adc.w	r3, r9, r3
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	024b      	lsls	r3, r1, #9
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e84:	4621      	mov	r1, r4
 8002e86:	024a      	lsls	r2, r1, #9
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8e:	2200      	movs	r2, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e98:	f7fd fa2a 	bl	80002f0 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	e058      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	0159      	lsls	r1, r3, #5
 8002ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed2:	0150      	lsls	r0, r2, #5
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ede:	4649      	mov	r1, r9
 8002ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8002efc:	eb63 050b 	sbc.w	r5, r3, fp
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	00eb      	lsls	r3, r5, #3
 8002f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f0e:	00e2      	lsls	r2, r4, #3
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	4643      	mov	r3, r8
 8002f16:	18e3      	adds	r3, r4, r3
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	eb45 0303 	adc.w	r3, r5, r3
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	028b      	lsls	r3, r1, #10
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f38:	4621      	mov	r1, r4
 8002f3a:	028a      	lsls	r2, r1, #10
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f42:	2200      	movs	r2, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	61fa      	str	r2, [r7, #28]
 8002f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4c:	f7fd f9d0 	bl	80002f0 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3750      	adds	r7, #80	; 0x50
 8002f80:	46bd      	mov	sp, r7
 8002f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0a9b      	lsrs	r3, r3, #10
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	0800799c 	.word	0x0800799c

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffdc 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0b5b      	lsrs	r3, r3, #13
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	0800799c 	.word	0x0800799c

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003024:	4b69      	ldr	r3, [pc, #420]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a68      	ldr	r2, [pc, #416]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	4b66      	ldr	r3, [pc, #408]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	4964      	ldr	r1, [pc, #400]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	4959      	ldr	r1, [pc, #356]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003074:	d101      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d017      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003098:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	494a      	ldr	r1, [pc, #296]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b0:	d101      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 808b 	beq.w	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	4a39      	ldr	r2, [pc, #228]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6413      	str	r3, [r2, #64]	; 0x40
 80030ec:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030f8:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe ff52 	bl	8001fac <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe ff4e 	bl	8001fac <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e38f      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800311e:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d035      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d02e      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003168:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d114      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe ff16 	bl	8001fac <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe ff12 	bl	8001fac <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e351      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ee      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b2:	d111      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031c2:	400b      	ands	r3, r1
 80031c4:	4901      	ldr	r1, [pc, #4]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	0ffffcff 	.word	0x0ffffcff
 80031d8:	4bac      	ldr	r3, [pc, #688]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4aab      	ldr	r2, [pc, #684]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	4ba9      	ldr	r3, [pc, #676]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	49a6      	ldr	r1, [pc, #664]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d010      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003202:	4ba2      	ldr	r3, [pc, #648]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003208:	4aa0      	ldr	r2, [pc, #640]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003212:	4b9e      	ldr	r3, [pc, #632]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	499b      	ldr	r1, [pc, #620]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003230:	4b96      	ldr	r3, [pc, #600]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800323e:	4993      	ldr	r1, [pc, #588]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003252:	4b8e      	ldr	r3, [pc, #568]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003260:	498a      	ldr	r1, [pc, #552]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003274:	4b85      	ldr	r3, [pc, #532]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	4982      	ldr	r1, [pc, #520]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003296:	4b7d      	ldr	r3, [pc, #500]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4979      	ldr	r1, [pc, #484]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b8:	4b74      	ldr	r3, [pc, #464]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4971      	ldr	r1, [pc, #452]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032da:	4b6c      	ldr	r3, [pc, #432]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f023 020c 	bic.w	r2, r3, #12
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	4968      	ldr	r1, [pc, #416]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fc:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	4960      	ldr	r1, [pc, #384]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800331e:	4b5b      	ldr	r3, [pc, #364]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	4957      	ldr	r1, [pc, #348]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003340:	4b52      	ldr	r3, [pc, #328]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	494f      	ldr	r1, [pc, #316]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4946      	ldr	r1, [pc, #280]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	493e      	ldr	r1, [pc, #248]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033a6:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	4935      	ldr	r1, [pc, #212]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d6:	492d      	ldr	r1, [pc, #180]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d011      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f8:	4924      	ldr	r1, [pc, #144]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003408:	d101      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	4914      	ldr	r1, [pc, #80]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345c:	490b      	ldr	r1, [pc, #44]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003480:	4902      	ldr	r1, [pc, #8]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003488:	e002      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800349c:	4b8a      	ldr	r3, [pc, #552]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	4986      	ldr	r1, [pc, #536]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034c0:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d0:	497d      	ldr	r1, [pc, #500]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d006      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80d6 	beq.w	8003698 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034ec:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a75      	ldr	r2, [pc, #468]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fe fd58 	bl	8001fac <HAL_GetTick>
 80034fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003500:	f7fe fd54 	bl	8001fac <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e195      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003512:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d021      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	019a      	lsls	r2, r3, #6
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	4958      	ldr	r1, [pc, #352]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003598:	d129      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800359a:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035a8:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ae:	0f1b      	lsrs	r3, r3, #28
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	019a      	lsls	r2, r3, #6
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	493e      	ldr	r1, [pc, #248]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035dc:	f023 021f 	bic.w	r2, r3, #31
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4938      	ldr	r1, [pc, #224]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01d      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035fa:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003600:	0e1b      	lsrs	r3, r3, #24
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360e:	0f1b      	lsrs	r3, r3, #28
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	019a      	lsls	r2, r3, #6
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	431a      	orrs	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	4926      	ldr	r1, [pc, #152]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	019a      	lsls	r2, r3, #6
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	491a      	ldr	r1, [pc, #104]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fe fc9b 	bl	8001fac <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800367a:	f7fe fc97 	bl	8001fac <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b64      	cmp	r3, #100	; 0x64
 8003686:	d901      	bls.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0d8      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	f040 80ce 	bne.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f7fe fc7e 	bl	8001fac <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036b2:	e00b      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036b4:	f7fe fc7a 	bl	8001fac <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d904      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0bb      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036cc:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d8:	d0ec      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d02e      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12a      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003702:	4b51      	ldr	r3, [pc, #324]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	0f1b      	lsrs	r3, r3, #28
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	019a      	lsls	r2, r3, #6
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	4944      	ldr	r1, [pc, #272]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800373e:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	493d      	ldr	r1, [pc, #244]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376c:	d11d      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	0e1b      	lsrs	r3, r3, #24
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800377c:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	0f1b      	lsrs	r3, r3, #28
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	019a      	lsls	r2, r3, #6
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	431a      	orrs	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	4929      	ldr	r1, [pc, #164]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	0e1b      	lsrs	r3, r3, #24
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	019a      	lsls	r2, r3, #6
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	071b      	lsls	r3, r3, #28
 80037ea:	4917      	ldr	r1, [pc, #92]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	4911      	ldr	r1, [pc, #68]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fe fbca 	bl	8001fac <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800381c:	f7fe fbc6 	bl	8001fac <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e007      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383a:	d1ef      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_RNG_Init>:
 * @brief  Initializes the RNG peripheral and creates the associated handle.
 * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
 *                the configuration information for RNG.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	/* Check the RNG handle allocation */
	if (hrng == NULL) {
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RNG_Init+0x12>
		return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e01c      	b.n	8003898 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
	if (hrng->State == HAL_RNG_STATE_RESET) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	795b      	ldrb	r3, [r3, #5]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_RNG_Init+0x28>
		/* Allocate lock resource and initialize it */
		hrng->Lock = HAL_UNLOCKED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	711a      	strb	r2, [r3, #4]

		/* Init the low level hardware */
		HAL_RNG_MspInit(hrng);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd f9a4 	bl	8000bbc <HAL_RNG_MspInit>
	}
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

	/* Change RNG peripheral state */
	hrng->State = HAL_RNG_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	715a      	strb	r2, [r3, #5]

	/* Enable the RNG Peripheral */
	__HAL_RNG_ENABLE(hrng);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0204 	orr.w	r2, r2, #4
 8003888:	601a      	str	r2, [r3, #0]

	/* Initialize the RNG state */
	hrng->State = HAL_RNG_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	715a      	strb	r2, [r3, #5]

	/* Initialise the error code */
	hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]

	/* Return function status */
	return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e09d      	b.n	80039ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c2:	d009      	beq.n	80038d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
 80038ca:	e005      	b.n	80038d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f9c0 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003918:	d902      	bls.n	8003920 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e002      	b.n	8003926 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003924:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800392e:	d007      	beq.n	8003940 <HAL_SPI_Init+0xa0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	ea42 0103 	orr.w	r1, r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 0204 	and.w	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80039bc:	ea42 0103 	orr.w	r1, r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b088      	sub	sp, #32
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_SPI_Transmit+0x22>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e158      	b.n	8003cca <HAL_SPI_Transmit+0x2d4>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a20:	f7fe fac4 	bl	8001fac <HAL_GetTick>
 8003a24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a3a:	e13d      	b.n	8003cb8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Transmit+0x52>
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a4c:	e134      	b.n	8003cb8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2203      	movs	r2, #3
 8003a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	d10f      	bne.n	8003aba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ab8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d007      	beq.n	8003ad8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae0:	d94b      	bls.n	8003b7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0xfa>
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13e      	bne.n	8003b6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b14:	e02b      	b.n	8003b6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d112      	bne.n	8003b4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b48:	e011      	b.n	8003b6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4a:	f7fe fa2f 	bl	8001fac <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d803      	bhi.n	8003b62 <HAL_SPI_Transmit+0x16c>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_Transmit+0x172>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b6c:	e0a4      	b.n	8003cb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ce      	bne.n	8003b16 <HAL_SPI_Transmit+0x120>
 8003b78:	e07c      	b.n	8003c74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Transmit+0x192>
 8003b82:	8afb      	ldrh	r3, [r7, #22]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d170      	bne.n	8003c6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d912      	bls.n	8003bb8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b02      	subs	r3, #2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bb6:	e058      	b.n	8003c6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bde:	e044      	b.n	8003c6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d12b      	bne.n	8003c46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d912      	bls.n	8003c1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b02      	subs	r3, #2
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c1c:	e025      	b.n	8003c6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	7812      	ldrb	r2, [r2, #0]
 8003c2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c44:	e011      	b.n	8003c6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c46:	f7fe f9b1 	bl	8001fac <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_Transmit+0x268>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_Transmit+0x26e>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c68:	e026      	b.n	8003cb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1b5      	bne.n	8003be0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f945 	bl	8003f08 <SPI_EndRxTxTransaction>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e000      	b.n	8003cb8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003cb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ce4:	f7fe f962 	bl	8001fac <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cf4:	f7fe f95a 	bl	8001fac <HAL_GetTick>
 8003cf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	015b      	lsls	r3, r3, #5
 8003d00:	0d1b      	lsrs	r3, r3, #20
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d0a:	e054      	b.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d050      	beq.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d14:	f7fe f94a 	bl	8001fac <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d902      	bls.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d13d      	bne.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d111      	bne.n	8003d68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	d004      	beq.n	8003d58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d56:	d107      	bne.n	8003d68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d70:	d10f      	bne.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e017      	b.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d19b      	bne.n	8003d0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000000 	.word	0x20000000

08003de4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003df2:	f7fe f8db 	bl	8001fac <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e02:	f7fe f8d3 	bl	8001fac <HAL_GetTick>
 8003e06:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e08:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00da      	lsls	r2, r3, #3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	0d1b      	lsrs	r3, r3, #20
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e20:	e062      	b.n	8003ee8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e28:	d109      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003e3c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d050      	beq.n	8003ee8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e46:	f7fe f8b1 	bl	8001fac <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d902      	bls.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0x78>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d13d      	bne.n	8003ed8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e74:	d111      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d004      	beq.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e88:	d107      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea2:	d10f      	bne.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e010      	b.n	8003efa <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d194      	bne.n	8003e22 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000

08003f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7ff ff5f 	bl	8003de4 <SPI_WaitFifoStateUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e027      	b.n	8003f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fec4 	bl	8003cd4 <SPI_WaitFlagStateUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e014      	b.n	8003f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff38 	bl	8003de4 <SPI_WaitFifoStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e000      	b.n	8003f8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e049      	b.n	800403a <HAL_TIM_Base_Init+0xa6>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd f81a 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 f8fc 	bl	80041d0 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIM_ConfigClockSource+0x18>
 8004058:	2302      	movs	r3, #2
 800405a:	e0b3      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x180>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4b55      	ldr	r3, [pc, #340]	; (80041cc <HAL_TIM_ConfigClockSource+0x188>)
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004082:	60fb      	str	r3, [r7, #12]
	htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004094:	d03e      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0xd0>
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	f200 8087 	bhi.w	80041ac <HAL_TIM_ConfigClockSource+0x168>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	f000 8085 	beq.w	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d87f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d01a      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xa2>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d87b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d050      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x116>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d877      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040bc:	2b50      	cmp	r3, #80	; 0x50
 80040be:	d03c      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xf6>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d873      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d058      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x136>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d86f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d064      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d86b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d060      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d867      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05c      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d05a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
		break;
	}

	default:
		break;
 80040e4:	e062      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f000 f985 	bl	8004404 <TIM_ETR_SetConfig>
		tmpsmcr = htim->Instance->SMCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004108:	60fb      	str	r3, [r7, #12]
		htim->Instance->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	609a      	str	r2, [r3, #8]
		break;
 8004112:	e04e      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f000 f96e 	bl	8004404 <TIM_ETR_SetConfig>
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004136:	609a      	str	r2, [r3, #8]
		break;
 8004138:	e03b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	461a      	mov	r2, r3
 8004148:	f000 f8e2 	bl	8004310 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2150      	movs	r1, #80	; 0x50
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f93b 	bl	80043ce <TIM_ITRx_SetConfig>
		break;
 8004158:	e02b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_TI2_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	f000 f901 	bl	800436e <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2160      	movs	r1, #96	; 0x60
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f92b 	bl	80043ce <TIM_ITRx_SetConfig>
		break;
 8004178:	e01b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	461a      	mov	r2, r3
 8004188:	f000 f8c2 	bl	8004310 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f91b 	bl	80043ce <TIM_ITRx_SetConfig>
		break;
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 f912 	bl	80043ce <TIM_ITRx_SetConfig>
		break;
 80041aa:	e002      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
		break;
 80041b0:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	fffeff88 	.word	0xfffeff88

080041d0 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a40      	ldr	r2, [pc, #256]	; (80042e4 <TIM_Base_SetConfig+0x114>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d00f      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3d      	ldr	r2, [pc, #244]	; (80042e8 <TIM_Base_SetConfig+0x118>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3c      	ldr	r2, [pc, #240]	; (80042ec <TIM_Base_SetConfig+0x11c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a3b      	ldr	r2, [pc, #236]	; (80042f0 <TIM_Base_SetConfig+0x120>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3a      	ldr	r2, [pc, #232]	; (80042f4 <TIM_Base_SetConfig+0x124>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d108      	bne.n	8004222 <TIM_Base_SetConfig+0x52>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <TIM_Base_SetConfig+0x114>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02b      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d027      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <TIM_Base_SetConfig+0x118>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d023      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <TIM_Base_SetConfig+0x11c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01f      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2a      	ldr	r2, [pc, #168]	; (80042f0 <TIM_Base_SetConfig+0x120>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01b      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a29      	ldr	r2, [pc, #164]	; (80042f4 <TIM_Base_SetConfig+0x124>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d017      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <TIM_Base_SetConfig+0x128>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a27      	ldr	r2, [pc, #156]	; (80042fc <TIM_Base_SetConfig+0x12c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <TIM_Base_SetConfig+0x130>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a25      	ldr	r2, [pc, #148]	; (8004304 <TIM_Base_SetConfig+0x134>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <TIM_Base_SetConfig+0x138>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a23      	ldr	r2, [pc, #140]	; (800430c <TIM_Base_SetConfig+0x13c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <TIM_Base_SetConfig+0xc4>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004288:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <TIM_Base_SetConfig+0x114>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_Base_SetConfig+0xf8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0c      	ldr	r2, [pc, #48]	; (80042f4 <TIM_Base_SetConfig+0x124>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <TIM_Base_SetConfig+0x100>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40010400 	.word	0x40010400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800
 8004304:	40001800 	.word	0x40001800
 8004308:	40001c00 	.word	0x40001c00
 800430c:	40002000 	.word	0x40002000

08004310 <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800433a:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 030a 	bic.w	r3, r3, #10
 800434c:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0210 	bic.w	r2, r3, #16
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004398:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	031b      	lsls	r3, r3, #12
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043aa:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e4:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f043 0307 	orr.w	r3, r3, #7
 80043f0:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800441e:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	021a      	lsls	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	431a      	orrs	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		TIM_MasterConfigTypeDef *sMasterConfig) {
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e06d      	b.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]

	/* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
	if (IS_TIM_TRGO2_INSTANCE(htim->Instance)) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a30      	ldr	r2, [pc, #192]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
		/* Check the parameters */
		assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

		/* Clear the MMS2 bits */
		tmpcr2 &= ~TIM_CR2_MMS2;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004496:	60fb      	str	r3, [r7, #12]
		/* Select the TRGO2 source*/
		tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
	}

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d022      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d01d      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d018      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10c      	bne.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004512:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40001800 	.word	0x40001800

08004560 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e040      	b.n	80045f4 <HAL_UART_Init+0x94>
	} else {
		/* Check the parameters */
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fd86 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	679a      	str	r2, [r3, #120]	; 0x78

	__HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f82c 	bl	80045fc <UART_SetConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x4e>
		return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_UART_Init+0x94>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Init+0x5c>
		UART_AdvFeatureConfig(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa84 	bl	8004ac4 <UART_AdvFeatureConfig>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045da:	609a      	str	r2, [r3, #8]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	__HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb0b 	bl	8004c08 <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	77bb      	strb	r3, [r7, #30]
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4ba6      	ldr	r3, [pc, #664]	; (80048c0 <UART_SetConfig+0x2c4>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	430b      	orrs	r3, r1
 8004632:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->Init.OneBitSampling;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a94      	ldr	r2, [pc, #592]	; (80048c4 <UART_SetConfig+0x2c8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d120      	bne.n	80046ba <UART_SetConfig+0xbe>
 8004678:	4b93      	ldr	r3, [pc, #588]	; (80048c8 <UART_SetConfig+0x2cc>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d816      	bhi.n	80046b4 <UART_SetConfig+0xb8>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x90>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046a9 	.word	0x080046a9
 8004694:	080046a3 	.word	0x080046a3
 8004698:	080046af 	.word	0x080046af
 800469c:	2301      	movs	r3, #1
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e150      	b.n	8004944 <UART_SetConfig+0x348>
 80046a2:	2302      	movs	r3, #2
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e14d      	b.n	8004944 <UART_SetConfig+0x348>
 80046a8:	2304      	movs	r3, #4
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e14a      	b.n	8004944 <UART_SetConfig+0x348>
 80046ae:	2308      	movs	r3, #8
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e147      	b.n	8004944 <UART_SetConfig+0x348>
 80046b4:	2310      	movs	r3, #16
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e144      	b.n	8004944 <UART_SetConfig+0x348>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a83      	ldr	r2, [pc, #524]	; (80048cc <UART_SetConfig+0x2d0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d132      	bne.n	800472a <UART_SetConfig+0x12e>
 80046c4:	4b80      	ldr	r3, [pc, #512]	; (80048c8 <UART_SetConfig+0x2cc>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d828      	bhi.n	8004724 <UART_SetConfig+0x128>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <UART_SetConfig+0xdc>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004725 	.word	0x08004725
 80046e0:	08004725 	.word	0x08004725
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004725 	.word	0x08004725
 80046f0:	08004725 	.word	0x08004725
 80046f4:	08004725 	.word	0x08004725
 80046f8:	08004713 	.word	0x08004713
 80046fc:	08004725 	.word	0x08004725
 8004700:	08004725 	.word	0x08004725
 8004704:	08004725 	.word	0x08004725
 8004708:	0800471f 	.word	0x0800471f
 800470c:	2300      	movs	r3, #0
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e118      	b.n	8004944 <UART_SetConfig+0x348>
 8004712:	2302      	movs	r3, #2
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e115      	b.n	8004944 <UART_SetConfig+0x348>
 8004718:	2304      	movs	r3, #4
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e112      	b.n	8004944 <UART_SetConfig+0x348>
 800471e:	2308      	movs	r3, #8
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e10f      	b.n	8004944 <UART_SetConfig+0x348>
 8004724:	2310      	movs	r3, #16
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e10c      	b.n	8004944 <UART_SetConfig+0x348>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a68      	ldr	r2, [pc, #416]	; (80048d0 <UART_SetConfig+0x2d4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d120      	bne.n	8004776 <UART_SetConfig+0x17a>
 8004734:	4b64      	ldr	r3, [pc, #400]	; (80048c8 <UART_SetConfig+0x2cc>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800473e:	2b30      	cmp	r3, #48	; 0x30
 8004740:	d013      	beq.n	800476a <UART_SetConfig+0x16e>
 8004742:	2b30      	cmp	r3, #48	; 0x30
 8004744:	d814      	bhi.n	8004770 <UART_SetConfig+0x174>
 8004746:	2b20      	cmp	r3, #32
 8004748:	d009      	beq.n	800475e <UART_SetConfig+0x162>
 800474a:	2b20      	cmp	r3, #32
 800474c:	d810      	bhi.n	8004770 <UART_SetConfig+0x174>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <UART_SetConfig+0x15c>
 8004752:	2b10      	cmp	r3, #16
 8004754:	d006      	beq.n	8004764 <UART_SetConfig+0x168>
 8004756:	e00b      	b.n	8004770 <UART_SetConfig+0x174>
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0f2      	b.n	8004944 <UART_SetConfig+0x348>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0ef      	b.n	8004944 <UART_SetConfig+0x348>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0ec      	b.n	8004944 <UART_SetConfig+0x348>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0e9      	b.n	8004944 <UART_SetConfig+0x348>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0e6      	b.n	8004944 <UART_SetConfig+0x348>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <UART_SetConfig+0x2d8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d120      	bne.n	80047c2 <UART_SetConfig+0x1c6>
 8004780:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <UART_SetConfig+0x2cc>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800478a:	2bc0      	cmp	r3, #192	; 0xc0
 800478c:	d013      	beq.n	80047b6 <UART_SetConfig+0x1ba>
 800478e:	2bc0      	cmp	r3, #192	; 0xc0
 8004790:	d814      	bhi.n	80047bc <UART_SetConfig+0x1c0>
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d009      	beq.n	80047aa <UART_SetConfig+0x1ae>
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d810      	bhi.n	80047bc <UART_SetConfig+0x1c0>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <UART_SetConfig+0x1a8>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d006      	beq.n	80047b0 <UART_SetConfig+0x1b4>
 80047a2:	e00b      	b.n	80047bc <UART_SetConfig+0x1c0>
 80047a4:	2300      	movs	r3, #0
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e0cc      	b.n	8004944 <UART_SetConfig+0x348>
 80047aa:	2302      	movs	r3, #2
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e0c9      	b.n	8004944 <UART_SetConfig+0x348>
 80047b0:	2304      	movs	r3, #4
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0c6      	b.n	8004944 <UART_SetConfig+0x348>
 80047b6:	2308      	movs	r3, #8
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e0c3      	b.n	8004944 <UART_SetConfig+0x348>
 80047bc:	2310      	movs	r3, #16
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e0c0      	b.n	8004944 <UART_SetConfig+0x348>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a44      	ldr	r2, [pc, #272]	; (80048d8 <UART_SetConfig+0x2dc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d125      	bne.n	8004818 <UART_SetConfig+0x21c>
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <UART_SetConfig+0x2cc>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047da:	d017      	beq.n	800480c <UART_SetConfig+0x210>
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e0:	d817      	bhi.n	8004812 <UART_SetConfig+0x216>
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e6:	d00b      	beq.n	8004800 <UART_SetConfig+0x204>
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d811      	bhi.n	8004812 <UART_SetConfig+0x216>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <UART_SetConfig+0x1fe>
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d006      	beq.n	8004806 <UART_SetConfig+0x20a>
 80047f8:	e00b      	b.n	8004812 <UART_SetConfig+0x216>
 80047fa:	2300      	movs	r3, #0
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e0a1      	b.n	8004944 <UART_SetConfig+0x348>
 8004800:	2302      	movs	r3, #2
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e09e      	b.n	8004944 <UART_SetConfig+0x348>
 8004806:	2304      	movs	r3, #4
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e09b      	b.n	8004944 <UART_SetConfig+0x348>
 800480c:	2308      	movs	r3, #8
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e098      	b.n	8004944 <UART_SetConfig+0x348>
 8004812:	2310      	movs	r3, #16
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e095      	b.n	8004944 <UART_SetConfig+0x348>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <UART_SetConfig+0x2e0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d125      	bne.n	800486e <UART_SetConfig+0x272>
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <UART_SetConfig+0x2cc>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800482c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004830:	d017      	beq.n	8004862 <UART_SetConfig+0x266>
 8004832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004836:	d817      	bhi.n	8004868 <UART_SetConfig+0x26c>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d00b      	beq.n	8004856 <UART_SetConfig+0x25a>
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d811      	bhi.n	8004868 <UART_SetConfig+0x26c>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <UART_SetConfig+0x254>
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d006      	beq.n	800485c <UART_SetConfig+0x260>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x26c>
 8004850:	2301      	movs	r3, #1
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e076      	b.n	8004944 <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e073      	b.n	8004944 <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e070      	b.n	8004944 <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e06d      	b.n	8004944 <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e06a      	b.n	8004944 <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <UART_SetConfig+0x2e4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d138      	bne.n	80048ea <UART_SetConfig+0x2ee>
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004882:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004886:	d017      	beq.n	80048b8 <UART_SetConfig+0x2bc>
 8004888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800488c:	d82a      	bhi.n	80048e4 <UART_SetConfig+0x2e8>
 800488e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004892:	d00b      	beq.n	80048ac <UART_SetConfig+0x2b0>
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d824      	bhi.n	80048e4 <UART_SetConfig+0x2e8>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <UART_SetConfig+0x2aa>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d006      	beq.n	80048b2 <UART_SetConfig+0x2b6>
 80048a4:	e01e      	b.n	80048e4 <UART_SetConfig+0x2e8>
 80048a6:	2300      	movs	r3, #0
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e04b      	b.n	8004944 <UART_SetConfig+0x348>
 80048ac:	2302      	movs	r3, #2
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e048      	b.n	8004944 <UART_SetConfig+0x348>
 80048b2:	2304      	movs	r3, #4
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e045      	b.n	8004944 <UART_SetConfig+0x348>
 80048b8:	2308      	movs	r3, #8
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e042      	b.n	8004944 <UART_SetConfig+0x348>
 80048be:	bf00      	nop
 80048c0:	efff69f3 	.word	0xefff69f3
 80048c4:	40011000 	.word	0x40011000
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40004400 	.word	0x40004400
 80048d0:	40004800 	.word	0x40004800
 80048d4:	40004c00 	.word	0x40004c00
 80048d8:	40005000 	.word	0x40005000
 80048dc:	40011400 	.word	0x40011400
 80048e0:	40007800 	.word	0x40007800
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e02c      	b.n	8004944 <UART_SetConfig+0x348>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a72      	ldr	r2, [pc, #456]	; (8004ab8 <UART_SetConfig+0x4bc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d125      	bne.n	8004940 <UART_SetConfig+0x344>
 80048f4:	4b71      	ldr	r3, [pc, #452]	; (8004abc <UART_SetConfig+0x4c0>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004902:	d017      	beq.n	8004934 <UART_SetConfig+0x338>
 8004904:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004908:	d817      	bhi.n	800493a <UART_SetConfig+0x33e>
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d00b      	beq.n	8004928 <UART_SetConfig+0x32c>
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004914:	d811      	bhi.n	800493a <UART_SetConfig+0x33e>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <UART_SetConfig+0x326>
 800491a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491e:	d006      	beq.n	800492e <UART_SetConfig+0x332>
 8004920:	e00b      	b.n	800493a <UART_SetConfig+0x33e>
 8004922:	2300      	movs	r3, #0
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e00d      	b.n	8004944 <UART_SetConfig+0x348>
 8004928:	2302      	movs	r3, #2
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e00a      	b.n	8004944 <UART_SetConfig+0x348>
 800492e:	2304      	movs	r3, #4
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e007      	b.n	8004944 <UART_SetConfig+0x348>
 8004934:	2308      	movs	r3, #8
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e004      	b.n	8004944 <UART_SetConfig+0x348>
 800493a:	2310      	movs	r3, #16
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e001      	b.n	8004944 <UART_SetConfig+0x348>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]

	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d15c      	bne.n	8004a08 <UART_SetConfig+0x40c>
		switch (clocksource) {
 800494e:	7ffb      	ldrb	r3, [r7, #31]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d828      	bhi.n	80049a6 <UART_SetConfig+0x3aa>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x360>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fb14 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004984:	61b8      	str	r0, [r7, #24]
			break;
 8004986:	e013      	b.n	80049b0 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fb24 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 800498c:	61b8      	str	r0, [r7, #24]
			break;
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8004990:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <UART_SetConfig+0x4c4>)
 8004992:	61bb      	str	r3, [r7, #24]
			break;
 8004994:	e00c      	b.n	80049b0 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe f9f7 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800499a:	61b8      	str	r0, [r7, #24]
			break;
 800499c:	e008      	b.n	80049b0 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a2:	61bb      	str	r3, [r7, #24]
			break;
 80049a4:	e004      	b.n	80049b0 <UART_SetConfig+0x3b4>
		default:
			pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77bb      	strb	r3, [r7, #30]
			break;
 80049ae:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d074      	beq.n	8004aa0 <UART_SetConfig+0x4a4>
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(pclk,
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	005a      	lsls	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b0f      	cmp	r3, #15
 80049d2:	d916      	bls.n	8004a02 <UART_SetConfig+0x406>
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049da:	d212      	bcs.n	8004a02 <UART_SetConfig+0x406>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f023 030f 	bic.w	r3, r3, #15
 80049e4:	81fb      	strh	r3, [r7, #14]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	81fb      	strh	r3, [r7, #14]
				huart->Instance->BRR = brrtemp;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	89fa      	ldrh	r2, [r7, #14]
 80049fe:	60da      	str	r2, [r3, #12]
 8004a00:	e04e      	b.n	8004aa0 <UART_SetConfig+0x4a4>
			} else {
				ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	77bb      	strb	r3, [r7, #30]
 8004a06:	e04b      	b.n	8004aa0 <UART_SetConfig+0x4a4>
			}
		}
	} else {
		switch (clocksource) {
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d827      	bhi.n	8004a5e <UART_SetConfig+0x462>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <UART_SetConfig+0x418>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a4f 	.word	0x08004a4f
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a57 	.word	0x08004a57
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fab8 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004a3c:	61b8      	str	r0, [r7, #24]
			break;
 8004a3e:	e013      	b.n	8004a68 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fe fac8 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8004a44:	61b8      	str	r0, [r7, #24]
			break;
 8004a46:	e00f      	b.n	8004a68 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <UART_SetConfig+0x4c4>)
 8004a4a:	61bb      	str	r3, [r7, #24]
			break;
 8004a4c:	e00c      	b.n	8004a68 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8004a4e:	f7fe f99b 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8004a52:	61b8      	str	r0, [r7, #24]
			break;
 8004a54:	e008      	b.n	8004a68 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a5a:	61bb      	str	r3, [r7, #24]
			break;
 8004a5c:	e004      	b.n	8004a68 <UART_SetConfig+0x46c>
		default:
			pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	77bb      	strb	r3, [r7, #30]
			break;
 8004a66:	bf00      	nop
		}

		if (pclk != 0U) {
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <UART_SetConfig+0x4a4>
			/* USARTDIV must be greater than or equal to 0d16 */
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(pclk,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	085a      	lsrs	r2, r3, #1
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	441a      	add	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d908      	bls.n	8004a9c <UART_SetConfig+0x4a0>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d204      	bcs.n	8004a9c <UART_SetConfig+0x4a0>
				huart->Instance->BRR = usartdiv;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	e001      	b.n	8004aa0 <UART_SetConfig+0x4a4>
			} else {
				ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	77bb      	strb	r3, [r7, #30]
			}
		}
	}

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	665a      	str	r2, [r3, #100]	; 0x64
	huart->TxISR = NULL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	669a      	str	r2, [r3, #104]	; 0x68

	return ret;
 8004aac:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40007c00 	.word	0x40007c00
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	00f42400 	.word	0x00f42400

08004ac4 <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0x2a>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x4c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0x90>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <UART_AdvFeatureConfig+0xb2>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <UART_AdvFeatureConfig+0xd4>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01a      	beq.n	8004bda <UART_AdvFeatureConfig+0x116>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc2:	d10a      	bne.n	8004bda <UART_AdvFeatureConfig+0x116>
				== UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
			assert_param(
					IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <UART_AdvFeatureConfig+0x138>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8004c18:	f7fd f9c8 	bl	8001fac <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d10e      	bne.n	8004c4a <UART_CheckIdleState+0x42>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8004c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f82d 	bl	8004c9a <UART_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <UART_CheckIdleState+0x42>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e023      	b.n	8004c92 <UART_CheckIdleState+0x8a>
		}
	}
#if defined(USART_ISR_REACK)

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d10e      	bne.n	8004c76 <UART_CheckIdleState+0x6e>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f817 	bl	8004c9a <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <UART_CheckIdleState+0x6e>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e00d      	b.n	8004c92 <UART_CheckIdleState+0x8a>
		}
	}
#endif

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	679a      	str	r2, [r3, #120]	; 0x78
	huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	; 0x60

	__HAL_UNLOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8004caa:	e05e      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd0>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d05a      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd0>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8004cb4:	f7fd f97a 	bl	8001fac <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11b      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x68>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
				 interrupts for the interrupt process */
				CLEAR_BIT(huart->Instance->CR1,
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cd8:	601a      	str	r2, [r3, #0]
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	609a      	str	r2, [r3, #8]

				huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	679a      	str	r2, [r3, #120]	; 0x78
				huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c

				__HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

				return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e043      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xf0>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d02c      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd0>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1e:	d124      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd0>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d28:	621a      	str	r2, [r3, #32]

					/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
					 interrupts for the interrupt process */
					CLEAR_BIT(huart->Instance->CR1,
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d38:	601a      	str	r2, [r3, #0]
							(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	609a      	str	r2, [r3, #8]

					huart->gState = HAL_UART_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	679a      	str	r2, [r3, #120]	; 0x78
					huart->RxState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

					return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e00f      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xf0>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d091      	beq.n	8004cac <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <__cvt>:
 8004d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d94:	ed2d 8b02 	vpush	{d8}
 8004d98:	eeb0 8b40 	vmov.f64	d8, d0
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	4617      	mov	r7, r2
 8004da0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004da2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004da4:	ee18 2a90 	vmov	r2, s17
 8004da8:	f025 0520 	bic.w	r5, r5, #32
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	bfb6      	itet	lt
 8004db0:	222d      	movlt	r2, #45	; 0x2d
 8004db2:	2200      	movge	r2, #0
 8004db4:	eeb1 8b40 	vneglt.f64	d8, d0
 8004db8:	2d46      	cmp	r5, #70	; 0x46
 8004dba:	460c      	mov	r4, r1
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	d004      	beq.n	8004dca <__cvt+0x38>
 8004dc0:	2d45      	cmp	r5, #69	; 0x45
 8004dc2:	d100      	bne.n	8004dc6 <__cvt+0x34>
 8004dc4:	3401      	adds	r4, #1
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	e000      	b.n	8004dcc <__cvt+0x3a>
 8004dca:	2103      	movs	r1, #3
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	ab02      	add	r3, sp, #8
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	4633      	mov	r3, r6
 8004dd8:	eeb0 0b48 	vmov.f64	d0, d8
 8004ddc:	f000 fe44 	bl	8005a68 <_dtoa_r>
 8004de0:	2d47      	cmp	r5, #71	; 0x47
 8004de2:	d101      	bne.n	8004de8 <__cvt+0x56>
 8004de4:	07fb      	lsls	r3, r7, #31
 8004de6:	d51a      	bpl.n	8004e1e <__cvt+0x8c>
 8004de8:	2d46      	cmp	r5, #70	; 0x46
 8004dea:	eb00 0204 	add.w	r2, r0, r4
 8004dee:	d10c      	bne.n	8004e0a <__cvt+0x78>
 8004df0:	7803      	ldrb	r3, [r0, #0]
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d107      	bne.n	8004e06 <__cvt+0x74>
 8004df6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	bf1c      	itt	ne
 8004e00:	f1c4 0401 	rsbne	r4, r4, #1
 8004e04:	6034      	strne	r4, [r6, #0]
 8004e06:	6833      	ldr	r3, [r6, #0]
 8004e08:	441a      	add	r2, r3
 8004e0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	bf08      	it	eq
 8004e14:	9203      	streq	r2, [sp, #12]
 8004e16:	2130      	movs	r1, #48	; 0x30
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d307      	bcc.n	8004e2e <__cvt+0x9c>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e22:	1a1b      	subs	r3, r3, r0
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	b005      	add	sp, #20
 8004e28:	ecbd 8b02 	vpop	{d8}
 8004e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2e:	1c5c      	adds	r4, r3, #1
 8004e30:	9403      	str	r4, [sp, #12]
 8004e32:	7019      	strb	r1, [r3, #0]
 8004e34:	e7f0      	b.n	8004e18 <__cvt+0x86>

08004e36 <__exponent>:
 8004e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2900      	cmp	r1, #0
 8004e3c:	bfb8      	it	lt
 8004e3e:	4249      	neglt	r1, r1
 8004e40:	f803 2b02 	strb.w	r2, [r3], #2
 8004e44:	bfb4      	ite	lt
 8004e46:	222d      	movlt	r2, #45	; 0x2d
 8004e48:	222b      	movge	r2, #43	; 0x2b
 8004e4a:	2909      	cmp	r1, #9
 8004e4c:	7042      	strb	r2, [r0, #1]
 8004e4e:	dd2a      	ble.n	8004ea6 <__exponent+0x70>
 8004e50:	f10d 0207 	add.w	r2, sp, #7
 8004e54:	4617      	mov	r7, r2
 8004e56:	260a      	movs	r6, #10
 8004e58:	4694      	mov	ip, r2
 8004e5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e5e:	fb06 1415 	mls	r4, r6, r5, r1
 8004e62:	3430      	adds	r4, #48	; 0x30
 8004e64:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e68:	460c      	mov	r4, r1
 8004e6a:	2c63      	cmp	r4, #99	; 0x63
 8004e6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e70:	4629      	mov	r1, r5
 8004e72:	dcf1      	bgt.n	8004e58 <__exponent+0x22>
 8004e74:	3130      	adds	r1, #48	; 0x30
 8004e76:	f1ac 0402 	sub.w	r4, ip, #2
 8004e7a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e7e:	1c41      	adds	r1, r0, #1
 8004e80:	4622      	mov	r2, r4
 8004e82:	42ba      	cmp	r2, r7
 8004e84:	d30a      	bcc.n	8004e9c <__exponent+0x66>
 8004e86:	f10d 0209 	add.w	r2, sp, #9
 8004e8a:	eba2 020c 	sub.w	r2, r2, ip
 8004e8e:	42bc      	cmp	r4, r7
 8004e90:	bf88      	it	hi
 8004e92:	2200      	movhi	r2, #0
 8004e94:	4413      	add	r3, r2
 8004e96:	1a18      	subs	r0, r3, r0
 8004e98:	b003      	add	sp, #12
 8004e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ea0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ea4:	e7ed      	b.n	8004e82 <__exponent+0x4c>
 8004ea6:	2330      	movs	r3, #48	; 0x30
 8004ea8:	3130      	adds	r1, #48	; 0x30
 8004eaa:	7083      	strb	r3, [r0, #2]
 8004eac:	70c1      	strb	r1, [r0, #3]
 8004eae:	1d03      	adds	r3, r0, #4
 8004eb0:	e7f1      	b.n	8004e96 <__exponent+0x60>
 8004eb2:	0000      	movs	r0, r0
 8004eb4:	0000      	movs	r0, r0
	...

08004eb8 <_printf_float>:
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08b      	sub	sp, #44	; 0x2c
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	4605      	mov	r5, r0
 8004eca:	f000 fccd 	bl	8005868 <_localeconv_r>
 8004ece:	f8d0 b000 	ldr.w	fp, [r0]
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f7fb fa04 	bl	80002e0 <strlen>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9308      	str	r3, [sp, #32]
 8004edc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	f023 0307 	bic.w	r3, r3, #7
 8004eec:	f103 0108 	add.w	r1, r3, #8
 8004ef0:	f8c8 1000 	str.w	r1, [r8]
 8004ef4:	ed93 0b00 	vldr	d0, [r3]
 8004ef8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005158 <_printf_float+0x2a0>
 8004efc:	eeb0 7bc0 	vabs.f64	d7, d0
 8004f00:	eeb4 7b46 	vcmp.f64	d7, d6
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	dd24      	ble.n	8004f5a <_printf_float+0xa2>
 8004f10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	d502      	bpl.n	8004f20 <_printf_float+0x68>
 8004f1a:	232d      	movs	r3, #45	; 0x2d
 8004f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f20:	498f      	ldr	r1, [pc, #572]	; (8005160 <_printf_float+0x2a8>)
 8004f22:	4b90      	ldr	r3, [pc, #576]	; (8005164 <_printf_float+0x2ac>)
 8004f24:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f28:	bf94      	ite	ls
 8004f2a:	4688      	movls	r8, r1
 8004f2c:	4698      	movhi	r8, r3
 8004f2e:	2303      	movs	r3, #3
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	f022 0204 	bic.w	r2, r2, #4
 8004f36:	2300      	movs	r3, #0
 8004f38:	6022      	str	r2, [r4, #0]
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	9700      	str	r7, [sp, #0]
 8004f3e:	4633      	mov	r3, r6
 8004f40:	aa09      	add	r2, sp, #36	; 0x24
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 f9d1 	bl	80052ec <_printf_common>
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f040 808a 	bne.w	8005064 <_printf_float+0x1ac>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	b00b      	add	sp, #44	; 0x2c
 8004f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8004f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f62:	d709      	bvc.n	8004f78 <_printf_float+0xc0>
 8004f64:	ee10 3a90 	vmov	r3, s1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bfbc      	itt	lt
 8004f6c:	232d      	movlt	r3, #45	; 0x2d
 8004f6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f72:	497d      	ldr	r1, [pc, #500]	; (8005168 <_printf_float+0x2b0>)
 8004f74:	4b7d      	ldr	r3, [pc, #500]	; (800516c <_printf_float+0x2b4>)
 8004f76:	e7d5      	b.n	8004f24 <_printf_float+0x6c>
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f7e:	9104      	str	r1, [sp, #16]
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	d13c      	bne.n	8004ffe <_printf_float+0x146>
 8004f84:	2306      	movs	r3, #6
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9303      	str	r3, [sp, #12]
 8004f8c:	ab08      	add	r3, sp, #32
 8004f8e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f96:	ab07      	add	r3, sp, #28
 8004f98:	6861      	ldr	r1, [r4, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	6022      	str	r2, [r4, #0]
 8004f9e:	f10d 031b 	add.w	r3, sp, #27
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f7ff fef5 	bl	8004d92 <__cvt>
 8004fa8:	9b04      	ldr	r3, [sp, #16]
 8004faa:	9907      	ldr	r1, [sp, #28]
 8004fac:	2b47      	cmp	r3, #71	; 0x47
 8004fae:	4680      	mov	r8, r0
 8004fb0:	d108      	bne.n	8004fc4 <_printf_float+0x10c>
 8004fb2:	1cc8      	adds	r0, r1, #3
 8004fb4:	db02      	blt.n	8004fbc <_printf_float+0x104>
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	4299      	cmp	r1, r3
 8004fba:	dd41      	ble.n	8005040 <_printf_float+0x188>
 8004fbc:	f1a9 0902 	sub.w	r9, r9, #2
 8004fc0:	fa5f f989 	uxtb.w	r9, r9
 8004fc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fc8:	d820      	bhi.n	800500c <_printf_float+0x154>
 8004fca:	3901      	subs	r1, #1
 8004fcc:	464a      	mov	r2, r9
 8004fce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fd2:	9107      	str	r1, [sp, #28]
 8004fd4:	f7ff ff2f 	bl	8004e36 <__exponent>
 8004fd8:	9a08      	ldr	r2, [sp, #32]
 8004fda:	9004      	str	r0, [sp, #16]
 8004fdc:	1813      	adds	r3, r2, r0
 8004fde:	2a01      	cmp	r2, #1
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	dc02      	bgt.n	8004fea <_printf_float+0x132>
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	07d2      	lsls	r2, r2, #31
 8004fe8:	d501      	bpl.n	8004fee <_printf_float+0x136>
 8004fea:	3301      	adds	r3, #1
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0a2      	beq.n	8004f3c <_printf_float+0x84>
 8004ff6:	232d      	movs	r3, #45	; 0x2d
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e79e      	b.n	8004f3c <_printf_float+0x84>
 8004ffe:	9904      	ldr	r1, [sp, #16]
 8005000:	2947      	cmp	r1, #71	; 0x47
 8005002:	d1c1      	bne.n	8004f88 <_printf_float+0xd0>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1bf      	bne.n	8004f88 <_printf_float+0xd0>
 8005008:	2301      	movs	r3, #1
 800500a:	e7bc      	b.n	8004f86 <_printf_float+0xce>
 800500c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005010:	d118      	bne.n	8005044 <_printf_float+0x18c>
 8005012:	2900      	cmp	r1, #0
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	dd0b      	ble.n	8005030 <_printf_float+0x178>
 8005018:	6121      	str	r1, [r4, #16]
 800501a:	b913      	cbnz	r3, 8005022 <_printf_float+0x16a>
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	07d0      	lsls	r0, r2, #31
 8005020:	d502      	bpl.n	8005028 <_printf_float+0x170>
 8005022:	3301      	adds	r3, #1
 8005024:	440b      	add	r3, r1
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	2300      	movs	r3, #0
 800502a:	65a1      	str	r1, [r4, #88]	; 0x58
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	e7de      	b.n	8004fee <_printf_float+0x136>
 8005030:	b913      	cbnz	r3, 8005038 <_printf_float+0x180>
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	07d2      	lsls	r2, r2, #31
 8005036:	d501      	bpl.n	800503c <_printf_float+0x184>
 8005038:	3302      	adds	r3, #2
 800503a:	e7f4      	b.n	8005026 <_printf_float+0x16e>
 800503c:	2301      	movs	r3, #1
 800503e:	e7f2      	b.n	8005026 <_printf_float+0x16e>
 8005040:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005044:	9b08      	ldr	r3, [sp, #32]
 8005046:	4299      	cmp	r1, r3
 8005048:	db05      	blt.n	8005056 <_printf_float+0x19e>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	6121      	str	r1, [r4, #16]
 800504e:	07d8      	lsls	r0, r3, #31
 8005050:	d5ea      	bpl.n	8005028 <_printf_float+0x170>
 8005052:	1c4b      	adds	r3, r1, #1
 8005054:	e7e7      	b.n	8005026 <_printf_float+0x16e>
 8005056:	2900      	cmp	r1, #0
 8005058:	bfd4      	ite	le
 800505a:	f1c1 0202 	rsble	r2, r1, #2
 800505e:	2201      	movgt	r2, #1
 8005060:	4413      	add	r3, r2
 8005062:	e7e0      	b.n	8005026 <_printf_float+0x16e>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	055a      	lsls	r2, r3, #21
 8005068:	d407      	bmi.n	800507a <_printf_float+0x1c2>
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	4642      	mov	r2, r8
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	d12a      	bne.n	80050ce <_printf_float+0x216>
 8005078:	e76a      	b.n	8004f50 <_printf_float+0x98>
 800507a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800507e:	f240 80e0 	bls.w	8005242 <_printf_float+0x38a>
 8005082:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005086:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	d133      	bne.n	80050f8 <_printf_float+0x240>
 8005090:	4a37      	ldr	r2, [pc, #220]	; (8005170 <_printf_float+0x2b8>)
 8005092:	2301      	movs	r3, #1
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f af58 	beq.w	8004f50 <_printf_float+0x98>
 80050a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	db02      	blt.n	80050ae <_printf_float+0x1f6>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	07d8      	lsls	r0, r3, #31
 80050ac:	d50f      	bpl.n	80050ce <_printf_float+0x216>
 80050ae:	4653      	mov	r3, sl
 80050b0:	465a      	mov	r2, fp
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f af49 	beq.w	8004f50 <_printf_float+0x98>
 80050be:	f04f 0800 	mov.w	r8, #0
 80050c2:	f104 091a 	add.w	r9, r4, #26
 80050c6:	9b08      	ldr	r3, [sp, #32]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4543      	cmp	r3, r8
 80050cc:	dc09      	bgt.n	80050e2 <_printf_float+0x22a>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	079b      	lsls	r3, r3, #30
 80050d2:	f100 8106 	bmi.w	80052e2 <_printf_float+0x42a>
 80050d6:	68e0      	ldr	r0, [r4, #12]
 80050d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050da:	4298      	cmp	r0, r3
 80050dc:	bfb8      	it	lt
 80050de:	4618      	movlt	r0, r3
 80050e0:	e738      	b.n	8004f54 <_printf_float+0x9c>
 80050e2:	2301      	movs	r3, #1
 80050e4:	464a      	mov	r2, r9
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	f43f af2f 	beq.w	8004f50 <_printf_float+0x98>
 80050f2:	f108 0801 	add.w	r8, r8, #1
 80050f6:	e7e6      	b.n	80050c6 <_printf_float+0x20e>
 80050f8:	9b07      	ldr	r3, [sp, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dc3a      	bgt.n	8005174 <_printf_float+0x2bc>
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <_printf_float+0x2b8>)
 8005100:	2301      	movs	r3, #1
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f af21 	beq.w	8004f50 <_printf_float+0x98>
 800510e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005112:	4313      	orrs	r3, r2
 8005114:	d102      	bne.n	800511c <_printf_float+0x264>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	07d9      	lsls	r1, r3, #31
 800511a:	d5d8      	bpl.n	80050ce <_printf_float+0x216>
 800511c:	4653      	mov	r3, sl
 800511e:	465a      	mov	r2, fp
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	f43f af12 	beq.w	8004f50 <_printf_float+0x98>
 800512c:	f04f 0900 	mov.w	r9, #0
 8005130:	f104 0a1a 	add.w	sl, r4, #26
 8005134:	9b07      	ldr	r3, [sp, #28]
 8005136:	425b      	negs	r3, r3
 8005138:	454b      	cmp	r3, r9
 800513a:	dc01      	bgt.n	8005140 <_printf_float+0x288>
 800513c:	9b08      	ldr	r3, [sp, #32]
 800513e:	e795      	b.n	800506c <_printf_float+0x1b4>
 8005140:	2301      	movs	r3, #1
 8005142:	4652      	mov	r2, sl
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	f43f af00 	beq.w	8004f50 <_printf_float+0x98>
 8005150:	f109 0901 	add.w	r9, r9, #1
 8005154:	e7ee      	b.n	8005134 <_printf_float+0x27c>
 8005156:	bf00      	nop
 8005158:	ffffffff 	.word	0xffffffff
 800515c:	7fefffff 	.word	0x7fefffff
 8005160:	08007be4 	.word	0x08007be4
 8005164:	08007be8 	.word	0x08007be8
 8005168:	08007bec 	.word	0x08007bec
 800516c:	08007bf0 	.word	0x08007bf0
 8005170:	08007bf4 	.word	0x08007bf4
 8005174:	9a08      	ldr	r2, [sp, #32]
 8005176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005178:	429a      	cmp	r2, r3
 800517a:	bfa8      	it	ge
 800517c:	461a      	movge	r2, r3
 800517e:	2a00      	cmp	r2, #0
 8005180:	4691      	mov	r9, r2
 8005182:	dc38      	bgt.n	80051f6 <_printf_float+0x33e>
 8005184:	2300      	movs	r3, #0
 8005186:	9305      	str	r3, [sp, #20]
 8005188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800518c:	f104 021a 	add.w	r2, r4, #26
 8005190:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005192:	9905      	ldr	r1, [sp, #20]
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	eba3 0309 	sub.w	r3, r3, r9
 800519a:	428b      	cmp	r3, r1
 800519c:	dc33      	bgt.n	8005206 <_printf_float+0x34e>
 800519e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	db3c      	blt.n	8005220 <_printf_float+0x368>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	07da      	lsls	r2, r3, #31
 80051aa:	d439      	bmi.n	8005220 <_printf_float+0x368>
 80051ac:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80051b0:	eba2 0903 	sub.w	r9, r2, r3
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	4591      	cmp	r9, r2
 80051ba:	bfa8      	it	ge
 80051bc:	4691      	movge	r9, r2
 80051be:	f1b9 0f00 	cmp.w	r9, #0
 80051c2:	dc35      	bgt.n	8005230 <_printf_float+0x378>
 80051c4:	f04f 0800 	mov.w	r8, #0
 80051c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051cc:	f104 0a1a 	add.w	sl, r4, #26
 80051d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	eba3 0309 	sub.w	r3, r3, r9
 80051da:	4543      	cmp	r3, r8
 80051dc:	f77f af77 	ble.w	80050ce <_printf_float+0x216>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4652      	mov	r2, sl
 80051e4:	4631      	mov	r1, r6
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	f43f aeb0 	beq.w	8004f50 <_printf_float+0x98>
 80051f0:	f108 0801 	add.w	r8, r8, #1
 80051f4:	e7ec      	b.n	80051d0 <_printf_float+0x318>
 80051f6:	4613      	mov	r3, r2
 80051f8:	4631      	mov	r1, r6
 80051fa:	4642      	mov	r2, r8
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	d1bf      	bne.n	8005184 <_printf_float+0x2cc>
 8005204:	e6a4      	b.n	8004f50 <_printf_float+0x98>
 8005206:	2301      	movs	r3, #1
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	9204      	str	r2, [sp, #16]
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f ae9d 	beq.w	8004f50 <_printf_float+0x98>
 8005216:	9b05      	ldr	r3, [sp, #20]
 8005218:	9a04      	ldr	r2, [sp, #16]
 800521a:	3301      	adds	r3, #1
 800521c:	9305      	str	r3, [sp, #20]
 800521e:	e7b7      	b.n	8005190 <_printf_float+0x2d8>
 8005220:	4653      	mov	r3, sl
 8005222:	465a      	mov	r2, fp
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	47b8      	blx	r7
 800522a:	3001      	adds	r0, #1
 800522c:	d1be      	bne.n	80051ac <_printf_float+0x2f4>
 800522e:	e68f      	b.n	8004f50 <_printf_float+0x98>
 8005230:	9a04      	ldr	r2, [sp, #16]
 8005232:	464b      	mov	r3, r9
 8005234:	4442      	add	r2, r8
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	d1c1      	bne.n	80051c4 <_printf_float+0x30c>
 8005240:	e686      	b.n	8004f50 <_printf_float+0x98>
 8005242:	9a08      	ldr	r2, [sp, #32]
 8005244:	2a01      	cmp	r2, #1
 8005246:	dc01      	bgt.n	800524c <_printf_float+0x394>
 8005248:	07db      	lsls	r3, r3, #31
 800524a:	d537      	bpl.n	80052bc <_printf_float+0x404>
 800524c:	2301      	movs	r3, #1
 800524e:	4642      	mov	r2, r8
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f ae7a 	beq.w	8004f50 <_printf_float+0x98>
 800525c:	4653      	mov	r3, sl
 800525e:	465a      	mov	r2, fp
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f ae72 	beq.w	8004f50 <_printf_float+0x98>
 800526c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005270:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	d01a      	beq.n	80052b2 <_printf_float+0x3fa>
 800527c:	3b01      	subs	r3, #1
 800527e:	f108 0201 	add.w	r2, r8, #1
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	d10e      	bne.n	80052aa <_printf_float+0x3f2>
 800528c:	e660      	b.n	8004f50 <_printf_float+0x98>
 800528e:	2301      	movs	r3, #1
 8005290:	464a      	mov	r2, r9
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae59 	beq.w	8004f50 <_printf_float+0x98>
 800529e:	f108 0801 	add.w	r8, r8, #1
 80052a2:	9b08      	ldr	r3, [sp, #32]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	4543      	cmp	r3, r8
 80052a8:	dcf1      	bgt.n	800528e <_printf_float+0x3d6>
 80052aa:	9b04      	ldr	r3, [sp, #16]
 80052ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052b0:	e6dd      	b.n	800506e <_printf_float+0x1b6>
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	f104 091a 	add.w	r9, r4, #26
 80052ba:	e7f2      	b.n	80052a2 <_printf_float+0x3ea>
 80052bc:	2301      	movs	r3, #1
 80052be:	4642      	mov	r2, r8
 80052c0:	e7df      	b.n	8005282 <_printf_float+0x3ca>
 80052c2:	2301      	movs	r3, #1
 80052c4:	464a      	mov	r2, r9
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae3f 	beq.w	8004f50 <_printf_float+0x98>
 80052d2:	f108 0801 	add.w	r8, r8, #1
 80052d6:	68e3      	ldr	r3, [r4, #12]
 80052d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052da:	1a5b      	subs	r3, r3, r1
 80052dc:	4543      	cmp	r3, r8
 80052de:	dcf0      	bgt.n	80052c2 <_printf_float+0x40a>
 80052e0:	e6f9      	b.n	80050d6 <_printf_float+0x21e>
 80052e2:	f04f 0800 	mov.w	r8, #0
 80052e6:	f104 0919 	add.w	r9, r4, #25
 80052ea:	e7f4      	b.n	80052d6 <_printf_float+0x41e>

080052ec <_printf_common>:
 80052ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	4616      	mov	r6, r2
 80052f2:	4699      	mov	r9, r3
 80052f4:	688a      	ldr	r2, [r1, #8]
 80052f6:	690b      	ldr	r3, [r1, #16]
 80052f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	bfb8      	it	lt
 8005300:	4613      	movlt	r3, r2
 8005302:	6033      	str	r3, [r6, #0]
 8005304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005308:	4607      	mov	r7, r0
 800530a:	460c      	mov	r4, r1
 800530c:	b10a      	cbz	r2, 8005312 <_printf_common+0x26>
 800530e:	3301      	adds	r3, #1
 8005310:	6033      	str	r3, [r6, #0]
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	0699      	lsls	r1, r3, #26
 8005316:	bf42      	ittt	mi
 8005318:	6833      	ldrmi	r3, [r6, #0]
 800531a:	3302      	addmi	r3, #2
 800531c:	6033      	strmi	r3, [r6, #0]
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	f015 0506 	ands.w	r5, r5, #6
 8005324:	d106      	bne.n	8005334 <_printf_common+0x48>
 8005326:	f104 0a19 	add.w	sl, r4, #25
 800532a:	68e3      	ldr	r3, [r4, #12]
 800532c:	6832      	ldr	r2, [r6, #0]
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	42ab      	cmp	r3, r5
 8005332:	dc26      	bgt.n	8005382 <_printf_common+0x96>
 8005334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005338:	1e13      	subs	r3, r2, #0
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	bf18      	it	ne
 800533e:	2301      	movne	r3, #1
 8005340:	0692      	lsls	r2, r2, #26
 8005342:	d42b      	bmi.n	800539c <_printf_common+0xb0>
 8005344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005348:	4649      	mov	r1, r9
 800534a:	4638      	mov	r0, r7
 800534c:	47c0      	blx	r8
 800534e:	3001      	adds	r0, #1
 8005350:	d01e      	beq.n	8005390 <_printf_common+0xa4>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	6922      	ldr	r2, [r4, #16]
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	2b04      	cmp	r3, #4
 800535c:	bf02      	ittt	eq
 800535e:	68e5      	ldreq	r5, [r4, #12]
 8005360:	6833      	ldreq	r3, [r6, #0]
 8005362:	1aed      	subeq	r5, r5, r3
 8005364:	68a3      	ldr	r3, [r4, #8]
 8005366:	bf0c      	ite	eq
 8005368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800536c:	2500      	movne	r5, #0
 800536e:	4293      	cmp	r3, r2
 8005370:	bfc4      	itt	gt
 8005372:	1a9b      	subgt	r3, r3, r2
 8005374:	18ed      	addgt	r5, r5, r3
 8005376:	2600      	movs	r6, #0
 8005378:	341a      	adds	r4, #26
 800537a:	42b5      	cmp	r5, r6
 800537c:	d11a      	bne.n	80053b4 <_printf_common+0xc8>
 800537e:	2000      	movs	r0, #0
 8005380:	e008      	b.n	8005394 <_printf_common+0xa8>
 8005382:	2301      	movs	r3, #1
 8005384:	4652      	mov	r2, sl
 8005386:	4649      	mov	r1, r9
 8005388:	4638      	mov	r0, r7
 800538a:	47c0      	blx	r8
 800538c:	3001      	adds	r0, #1
 800538e:	d103      	bne.n	8005398 <_printf_common+0xac>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005398:	3501      	adds	r5, #1
 800539a:	e7c6      	b.n	800532a <_printf_common+0x3e>
 800539c:	18e1      	adds	r1, r4, r3
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	2030      	movs	r0, #48	; 0x30
 80053a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053a6:	4422      	add	r2, r4
 80053a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b0:	3302      	adds	r3, #2
 80053b2:	e7c7      	b.n	8005344 <_printf_common+0x58>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4622      	mov	r2, r4
 80053b8:	4649      	mov	r1, r9
 80053ba:	4638      	mov	r0, r7
 80053bc:	47c0      	blx	r8
 80053be:	3001      	adds	r0, #1
 80053c0:	d0e6      	beq.n	8005390 <_printf_common+0xa4>
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7d9      	b.n	800537a <_printf_common+0x8e>
	...

080053c8 <_printf_i>:
 80053c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053cc:	7e0f      	ldrb	r7, [r1, #24]
 80053ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d0:	2f78      	cmp	r7, #120	; 0x78
 80053d2:	4691      	mov	r9, r2
 80053d4:	4680      	mov	r8, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	469a      	mov	sl, r3
 80053da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053de:	d807      	bhi.n	80053f0 <_printf_i+0x28>
 80053e0:	2f62      	cmp	r7, #98	; 0x62
 80053e2:	d80a      	bhi.n	80053fa <_printf_i+0x32>
 80053e4:	2f00      	cmp	r7, #0
 80053e6:	f000 80d4 	beq.w	8005592 <_printf_i+0x1ca>
 80053ea:	2f58      	cmp	r7, #88	; 0x58
 80053ec:	f000 80c0 	beq.w	8005570 <_printf_i+0x1a8>
 80053f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053f8:	e03a      	b.n	8005470 <_printf_i+0xa8>
 80053fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053fe:	2b15      	cmp	r3, #21
 8005400:	d8f6      	bhi.n	80053f0 <_printf_i+0x28>
 8005402:	a101      	add	r1, pc, #4	; (adr r1, 8005408 <_printf_i+0x40>)
 8005404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005408:	08005461 	.word	0x08005461
 800540c:	08005475 	.word	0x08005475
 8005410:	080053f1 	.word	0x080053f1
 8005414:	080053f1 	.word	0x080053f1
 8005418:	080053f1 	.word	0x080053f1
 800541c:	080053f1 	.word	0x080053f1
 8005420:	08005475 	.word	0x08005475
 8005424:	080053f1 	.word	0x080053f1
 8005428:	080053f1 	.word	0x080053f1
 800542c:	080053f1 	.word	0x080053f1
 8005430:	080053f1 	.word	0x080053f1
 8005434:	08005579 	.word	0x08005579
 8005438:	080054a1 	.word	0x080054a1
 800543c:	08005533 	.word	0x08005533
 8005440:	080053f1 	.word	0x080053f1
 8005444:	080053f1 	.word	0x080053f1
 8005448:	0800559b 	.word	0x0800559b
 800544c:	080053f1 	.word	0x080053f1
 8005450:	080054a1 	.word	0x080054a1
 8005454:	080053f1 	.word	0x080053f1
 8005458:	080053f1 	.word	0x080053f1
 800545c:	0800553b 	.word	0x0800553b
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	1d1a      	adds	r2, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	602a      	str	r2, [r5, #0]
 8005468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005470:	2301      	movs	r3, #1
 8005472:	e09f      	b.n	80055b4 <_printf_i+0x1ec>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	682b      	ldr	r3, [r5, #0]
 8005478:	0607      	lsls	r7, r0, #24
 800547a:	f103 0104 	add.w	r1, r3, #4
 800547e:	6029      	str	r1, [r5, #0]
 8005480:	d501      	bpl.n	8005486 <_printf_i+0xbe>
 8005482:	681e      	ldr	r6, [r3, #0]
 8005484:	e003      	b.n	800548e <_printf_i+0xc6>
 8005486:	0646      	lsls	r6, r0, #25
 8005488:	d5fb      	bpl.n	8005482 <_printf_i+0xba>
 800548a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800548e:	2e00      	cmp	r6, #0
 8005490:	da03      	bge.n	800549a <_printf_i+0xd2>
 8005492:	232d      	movs	r3, #45	; 0x2d
 8005494:	4276      	negs	r6, r6
 8005496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549a:	485a      	ldr	r0, [pc, #360]	; (8005604 <_printf_i+0x23c>)
 800549c:	230a      	movs	r3, #10
 800549e:	e012      	b.n	80054c6 <_printf_i+0xfe>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	6029      	str	r1, [r5, #0]
 80054a8:	0605      	lsls	r5, r0, #24
 80054aa:	d501      	bpl.n	80054b0 <_printf_i+0xe8>
 80054ac:	681e      	ldr	r6, [r3, #0]
 80054ae:	e002      	b.n	80054b6 <_printf_i+0xee>
 80054b0:	0641      	lsls	r1, r0, #25
 80054b2:	d5fb      	bpl.n	80054ac <_printf_i+0xe4>
 80054b4:	881e      	ldrh	r6, [r3, #0]
 80054b6:	4853      	ldr	r0, [pc, #332]	; (8005604 <_printf_i+0x23c>)
 80054b8:	2f6f      	cmp	r7, #111	; 0x6f
 80054ba:	bf0c      	ite	eq
 80054bc:	2308      	moveq	r3, #8
 80054be:	230a      	movne	r3, #10
 80054c0:	2100      	movs	r1, #0
 80054c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054c6:	6865      	ldr	r5, [r4, #4]
 80054c8:	60a5      	str	r5, [r4, #8]
 80054ca:	2d00      	cmp	r5, #0
 80054cc:	bfa2      	ittt	ge
 80054ce:	6821      	ldrge	r1, [r4, #0]
 80054d0:	f021 0104 	bicge.w	r1, r1, #4
 80054d4:	6021      	strge	r1, [r4, #0]
 80054d6:	b90e      	cbnz	r6, 80054dc <_printf_i+0x114>
 80054d8:	2d00      	cmp	r5, #0
 80054da:	d04b      	beq.n	8005574 <_printf_i+0x1ac>
 80054dc:	4615      	mov	r5, r2
 80054de:	fbb6 f1f3 	udiv	r1, r6, r3
 80054e2:	fb03 6711 	mls	r7, r3, r1, r6
 80054e6:	5dc7      	ldrb	r7, [r0, r7]
 80054e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054ec:	4637      	mov	r7, r6
 80054ee:	42bb      	cmp	r3, r7
 80054f0:	460e      	mov	r6, r1
 80054f2:	d9f4      	bls.n	80054de <_printf_i+0x116>
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d10b      	bne.n	8005510 <_printf_i+0x148>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	07de      	lsls	r6, r3, #31
 80054fc:	d508      	bpl.n	8005510 <_printf_i+0x148>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	6861      	ldr	r1, [r4, #4]
 8005502:	4299      	cmp	r1, r3
 8005504:	bfde      	ittt	le
 8005506:	2330      	movle	r3, #48	; 0x30
 8005508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800550c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005510:	1b52      	subs	r2, r2, r5
 8005512:	6122      	str	r2, [r4, #16]
 8005514:	f8cd a000 	str.w	sl, [sp]
 8005518:	464b      	mov	r3, r9
 800551a:	aa03      	add	r2, sp, #12
 800551c:	4621      	mov	r1, r4
 800551e:	4640      	mov	r0, r8
 8005520:	f7ff fee4 	bl	80052ec <_printf_common>
 8005524:	3001      	adds	r0, #1
 8005526:	d14a      	bne.n	80055be <_printf_i+0x1f6>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	b004      	add	sp, #16
 800552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f043 0320 	orr.w	r3, r3, #32
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	4833      	ldr	r0, [pc, #204]	; (8005608 <_printf_i+0x240>)
 800553c:	2778      	movs	r7, #120	; 0x78
 800553e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	6829      	ldr	r1, [r5, #0]
 8005546:	061f      	lsls	r7, r3, #24
 8005548:	f851 6b04 	ldr.w	r6, [r1], #4
 800554c:	d402      	bmi.n	8005554 <_printf_i+0x18c>
 800554e:	065f      	lsls	r7, r3, #25
 8005550:	bf48      	it	mi
 8005552:	b2b6      	uxthmi	r6, r6
 8005554:	07df      	lsls	r7, r3, #31
 8005556:	bf48      	it	mi
 8005558:	f043 0320 	orrmi.w	r3, r3, #32
 800555c:	6029      	str	r1, [r5, #0]
 800555e:	bf48      	it	mi
 8005560:	6023      	strmi	r3, [r4, #0]
 8005562:	b91e      	cbnz	r6, 800556c <_printf_i+0x1a4>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f023 0320 	bic.w	r3, r3, #32
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	2310      	movs	r3, #16
 800556e:	e7a7      	b.n	80054c0 <_printf_i+0xf8>
 8005570:	4824      	ldr	r0, [pc, #144]	; (8005604 <_printf_i+0x23c>)
 8005572:	e7e4      	b.n	800553e <_printf_i+0x176>
 8005574:	4615      	mov	r5, r2
 8005576:	e7bd      	b.n	80054f4 <_printf_i+0x12c>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	6826      	ldr	r6, [r4, #0]
 800557c:	6961      	ldr	r1, [r4, #20]
 800557e:	1d18      	adds	r0, r3, #4
 8005580:	6028      	str	r0, [r5, #0]
 8005582:	0635      	lsls	r5, r6, #24
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	d501      	bpl.n	800558c <_printf_i+0x1c4>
 8005588:	6019      	str	r1, [r3, #0]
 800558a:	e002      	b.n	8005592 <_printf_i+0x1ca>
 800558c:	0670      	lsls	r0, r6, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0x1c0>
 8005590:	8019      	strh	r1, [r3, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	4615      	mov	r5, r2
 8005598:	e7bc      	b.n	8005514 <_printf_i+0x14c>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	602a      	str	r2, [r5, #0]
 80055a0:	681d      	ldr	r5, [r3, #0]
 80055a2:	6862      	ldr	r2, [r4, #4]
 80055a4:	2100      	movs	r1, #0
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7fa fe4a 	bl	8000240 <memchr>
 80055ac:	b108      	cbz	r0, 80055b2 <_printf_i+0x1ea>
 80055ae:	1b40      	subs	r0, r0, r5
 80055b0:	6060      	str	r0, [r4, #4]
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	2300      	movs	r3, #0
 80055b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055bc:	e7aa      	b.n	8005514 <_printf_i+0x14c>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4649      	mov	r1, r9
 80055c4:	4640      	mov	r0, r8
 80055c6:	47d0      	blx	sl
 80055c8:	3001      	adds	r0, #1
 80055ca:	d0ad      	beq.n	8005528 <_printf_i+0x160>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	079b      	lsls	r3, r3, #30
 80055d0:	d413      	bmi.n	80055fa <_printf_i+0x232>
 80055d2:	68e0      	ldr	r0, [r4, #12]
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	4298      	cmp	r0, r3
 80055d8:	bfb8      	it	lt
 80055da:	4618      	movlt	r0, r3
 80055dc:	e7a6      	b.n	800552c <_printf_i+0x164>
 80055de:	2301      	movs	r3, #1
 80055e0:	4632      	mov	r2, r6
 80055e2:	4649      	mov	r1, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	47d0      	blx	sl
 80055e8:	3001      	adds	r0, #1
 80055ea:	d09d      	beq.n	8005528 <_printf_i+0x160>
 80055ec:	3501      	adds	r5, #1
 80055ee:	68e3      	ldr	r3, [r4, #12]
 80055f0:	9903      	ldr	r1, [sp, #12]
 80055f2:	1a5b      	subs	r3, r3, r1
 80055f4:	42ab      	cmp	r3, r5
 80055f6:	dcf2      	bgt.n	80055de <_printf_i+0x216>
 80055f8:	e7eb      	b.n	80055d2 <_printf_i+0x20a>
 80055fa:	2500      	movs	r5, #0
 80055fc:	f104 0619 	add.w	r6, r4, #25
 8005600:	e7f5      	b.n	80055ee <_printf_i+0x226>
 8005602:	bf00      	nop
 8005604:	08007bf6 	.word	0x08007bf6
 8005608:	08007c07 	.word	0x08007c07

0800560c <std>:
 800560c:	2300      	movs	r3, #0
 800560e:	b510      	push	{r4, lr}
 8005610:	4604      	mov	r4, r0
 8005612:	e9c0 3300 	strd	r3, r3, [r0]
 8005616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800561a:	6083      	str	r3, [r0, #8]
 800561c:	8181      	strh	r1, [r0, #12]
 800561e:	6643      	str	r3, [r0, #100]	; 0x64
 8005620:	81c2      	strh	r2, [r0, #14]
 8005622:	6183      	str	r3, [r0, #24]
 8005624:	4619      	mov	r1, r3
 8005626:	2208      	movs	r2, #8
 8005628:	305c      	adds	r0, #92	; 0x5c
 800562a:	f000 f914 	bl	8005856 <memset>
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <std+0x58>)
 8005630:	6263      	str	r3, [r4, #36]	; 0x24
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <std+0x5c>)
 8005634:	62a3      	str	r3, [r4, #40]	; 0x28
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <std+0x60>)
 8005638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <std+0x64>)
 800563c:	6323      	str	r3, [r4, #48]	; 0x30
 800563e:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <std+0x68>)
 8005640:	6224      	str	r4, [r4, #32]
 8005642:	429c      	cmp	r4, r3
 8005644:	d006      	beq.n	8005654 <std+0x48>
 8005646:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800564a:	4294      	cmp	r4, r2
 800564c:	d002      	beq.n	8005654 <std+0x48>
 800564e:	33d0      	adds	r3, #208	; 0xd0
 8005650:	429c      	cmp	r4, r3
 8005652:	d105      	bne.n	8005660 <std+0x54>
 8005654:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800565c:	f000 b978 	b.w	8005950 <__retarget_lock_init_recursive>
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	080057d1 	.word	0x080057d1
 8005668:	080057f3 	.word	0x080057f3
 800566c:	0800582b 	.word	0x0800582b
 8005670:	0800584f 	.word	0x0800584f
 8005674:	20000340 	.word	0x20000340

08005678 <stdio_exit_handler>:
 8005678:	4a02      	ldr	r2, [pc, #8]	; (8005684 <stdio_exit_handler+0xc>)
 800567a:	4903      	ldr	r1, [pc, #12]	; (8005688 <stdio_exit_handler+0x10>)
 800567c:	4803      	ldr	r0, [pc, #12]	; (800568c <stdio_exit_handler+0x14>)
 800567e:	f000 b869 	b.w	8005754 <_fwalk_sglue>
 8005682:	bf00      	nop
 8005684:	20000010 	.word	0x20000010
 8005688:	080071f5 	.word	0x080071f5
 800568c:	2000001c 	.word	0x2000001c

08005690 <cleanup_stdio>:
 8005690:	6841      	ldr	r1, [r0, #4]
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <cleanup_stdio+0x34>)
 8005694:	4299      	cmp	r1, r3
 8005696:	b510      	push	{r4, lr}
 8005698:	4604      	mov	r4, r0
 800569a:	d001      	beq.n	80056a0 <cleanup_stdio+0x10>
 800569c:	f001 fdaa 	bl	80071f4 <_fflush_r>
 80056a0:	68a1      	ldr	r1, [r4, #8]
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <cleanup_stdio+0x38>)
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <cleanup_stdio+0x1e>
 80056a8:	4620      	mov	r0, r4
 80056aa:	f001 fda3 	bl	80071f4 <_fflush_r>
 80056ae:	68e1      	ldr	r1, [r4, #12]
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <cleanup_stdio+0x3c>)
 80056b2:	4299      	cmp	r1, r3
 80056b4:	d004      	beq.n	80056c0 <cleanup_stdio+0x30>
 80056b6:	4620      	mov	r0, r4
 80056b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056bc:	f001 bd9a 	b.w	80071f4 <_fflush_r>
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	20000340 	.word	0x20000340
 80056c8:	200003a8 	.word	0x200003a8
 80056cc:	20000410 	.word	0x20000410

080056d0 <global_stdio_init.part.0>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <global_stdio_init.part.0+0x30>)
 80056d4:	4c0b      	ldr	r4, [pc, #44]	; (8005704 <global_stdio_init.part.0+0x34>)
 80056d6:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <global_stdio_init.part.0+0x38>)
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	4620      	mov	r0, r4
 80056dc:	2200      	movs	r2, #0
 80056de:	2104      	movs	r1, #4
 80056e0:	f7ff ff94 	bl	800560c <std>
 80056e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056e8:	2201      	movs	r2, #1
 80056ea:	2109      	movs	r1, #9
 80056ec:	f7ff ff8e 	bl	800560c <std>
 80056f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056f4:	2202      	movs	r2, #2
 80056f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fa:	2112      	movs	r1, #18
 80056fc:	f7ff bf86 	b.w	800560c <std>
 8005700:	20000478 	.word	0x20000478
 8005704:	20000340 	.word	0x20000340
 8005708:	08005679 	.word	0x08005679

0800570c <__sfp_lock_acquire>:
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <__sfp_lock_acquire+0x8>)
 800570e:	f000 b920 	b.w	8005952 <__retarget_lock_acquire_recursive>
 8005712:	bf00      	nop
 8005714:	20000481 	.word	0x20000481

08005718 <__sfp_lock_release>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__sfp_lock_release+0x8>)
 800571a:	f000 b91b 	b.w	8005954 <__retarget_lock_release_recursive>
 800571e:	bf00      	nop
 8005720:	20000481 	.word	0x20000481

08005724 <__sinit>:
 8005724:	b510      	push	{r4, lr}
 8005726:	4604      	mov	r4, r0
 8005728:	f7ff fff0 	bl	800570c <__sfp_lock_acquire>
 800572c:	6a23      	ldr	r3, [r4, #32]
 800572e:	b11b      	cbz	r3, 8005738 <__sinit+0x14>
 8005730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005734:	f7ff bff0 	b.w	8005718 <__sfp_lock_release>
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <__sinit+0x28>)
 800573a:	6223      	str	r3, [r4, #32]
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <__sinit+0x2c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f5      	bne.n	8005730 <__sinit+0xc>
 8005744:	f7ff ffc4 	bl	80056d0 <global_stdio_init.part.0>
 8005748:	e7f2      	b.n	8005730 <__sinit+0xc>
 800574a:	bf00      	nop
 800574c:	08005691 	.word	0x08005691
 8005750:	20000478 	.word	0x20000478

08005754 <_fwalk_sglue>:
 8005754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005758:	4607      	mov	r7, r0
 800575a:	4688      	mov	r8, r1
 800575c:	4614      	mov	r4, r2
 800575e:	2600      	movs	r6, #0
 8005760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005764:	f1b9 0901 	subs.w	r9, r9, #1
 8005768:	d505      	bpl.n	8005776 <_fwalk_sglue+0x22>
 800576a:	6824      	ldr	r4, [r4, #0]
 800576c:	2c00      	cmp	r4, #0
 800576e:	d1f7      	bne.n	8005760 <_fwalk_sglue+0xc>
 8005770:	4630      	mov	r0, r6
 8005772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005776:	89ab      	ldrh	r3, [r5, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d907      	bls.n	800578c <_fwalk_sglue+0x38>
 800577c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005780:	3301      	adds	r3, #1
 8005782:	d003      	beq.n	800578c <_fwalk_sglue+0x38>
 8005784:	4629      	mov	r1, r5
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	4306      	orrs	r6, r0
 800578c:	3568      	adds	r5, #104	; 0x68
 800578e:	e7e9      	b.n	8005764 <_fwalk_sglue+0x10>

08005790 <siprintf>:
 8005790:	b40e      	push	{r1, r2, r3}
 8005792:	b500      	push	{lr}
 8005794:	b09c      	sub	sp, #112	; 0x70
 8005796:	ab1d      	add	r3, sp, #116	; 0x74
 8005798:	9002      	str	r0, [sp, #8]
 800579a:	9006      	str	r0, [sp, #24]
 800579c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057a0:	4809      	ldr	r0, [pc, #36]	; (80057c8 <siprintf+0x38>)
 80057a2:	9107      	str	r1, [sp, #28]
 80057a4:	9104      	str	r1, [sp, #16]
 80057a6:	4909      	ldr	r1, [pc, #36]	; (80057cc <siprintf+0x3c>)
 80057a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ac:	9105      	str	r1, [sp, #20]
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	a902      	add	r1, sp, #8
 80057b4:	f001 fb9a 	bl	8006eec <_svfiprintf_r>
 80057b8:	9b02      	ldr	r3, [sp, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	b01c      	add	sp, #112	; 0x70
 80057c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c4:	b003      	add	sp, #12
 80057c6:	4770      	bx	lr
 80057c8:	20000068 	.word	0x20000068
 80057cc:	ffff0208 	.word	0xffff0208

080057d0 <__sread>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	460c      	mov	r4, r1
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	f000 f86c 	bl	80058b4 <_read_r>
 80057dc:	2800      	cmp	r0, #0
 80057de:	bfab      	itete	ge
 80057e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057e2:	89a3      	ldrhlt	r3, [r4, #12]
 80057e4:	181b      	addge	r3, r3, r0
 80057e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ea:	bfac      	ite	ge
 80057ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ee:	81a3      	strhlt	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__swrite>:
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	461f      	mov	r7, r3
 80057f8:	898b      	ldrh	r3, [r1, #12]
 80057fa:	05db      	lsls	r3, r3, #23
 80057fc:	4605      	mov	r5, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	4616      	mov	r6, r2
 8005802:	d505      	bpl.n	8005810 <__swrite+0x1e>
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	2302      	movs	r3, #2
 800580a:	2200      	movs	r2, #0
 800580c:	f000 f840 	bl	8005890 <_lseek_r>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	4632      	mov	r2, r6
 800581e:	463b      	mov	r3, r7
 8005820:	4628      	mov	r0, r5
 8005822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005826:	f000 b857 	b.w	80058d8 <_write_r>

0800582a <__sseek>:
 800582a:	b510      	push	{r4, lr}
 800582c:	460c      	mov	r4, r1
 800582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005832:	f000 f82d 	bl	8005890 <_lseek_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	bf15      	itete	ne
 800583c:	6560      	strne	r0, [r4, #84]	; 0x54
 800583e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005846:	81a3      	strheq	r3, [r4, #12]
 8005848:	bf18      	it	ne
 800584a:	81a3      	strhne	r3, [r4, #12]
 800584c:	bd10      	pop	{r4, pc}

0800584e <__sclose>:
 800584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005852:	f000 b80d 	b.w	8005870 <_close_r>

08005856 <memset>:
 8005856:	4402      	add	r2, r0
 8005858:	4603      	mov	r3, r0
 800585a:	4293      	cmp	r3, r2
 800585c:	d100      	bne.n	8005860 <memset+0xa>
 800585e:	4770      	bx	lr
 8005860:	f803 1b01 	strb.w	r1, [r3], #1
 8005864:	e7f9      	b.n	800585a <memset+0x4>
	...

08005868 <_localeconv_r>:
 8005868:	4800      	ldr	r0, [pc, #0]	; (800586c <_localeconv_r+0x4>)
 800586a:	4770      	bx	lr
 800586c:	2000015c 	.word	0x2000015c

08005870 <_close_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4d06      	ldr	r5, [pc, #24]	; (800588c <_close_r+0x1c>)
 8005874:	2300      	movs	r3, #0
 8005876:	4604      	mov	r4, r0
 8005878:	4608      	mov	r0, r1
 800587a:	602b      	str	r3, [r5, #0]
 800587c:	f7fb fac5 	bl	8000e0a <_close>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_close_r+0x1a>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_close_r+0x1a>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	2000047c 	.word	0x2000047c

08005890 <_lseek_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d07      	ldr	r5, [pc, #28]	; (80058b0 <_lseek_r+0x20>)
 8005894:	4604      	mov	r4, r0
 8005896:	4608      	mov	r0, r1
 8005898:	4611      	mov	r1, r2
 800589a:	2200      	movs	r2, #0
 800589c:	602a      	str	r2, [r5, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f7fb fada 	bl	8000e58 <_lseek>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_lseek_r+0x1e>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_lseek_r+0x1e>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	2000047c 	.word	0x2000047c

080058b4 <_read_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d07      	ldr	r5, [pc, #28]	; (80058d4 <_read_r+0x20>)
 80058b8:	4604      	mov	r4, r0
 80058ba:	4608      	mov	r0, r1
 80058bc:	4611      	mov	r1, r2
 80058be:	2200      	movs	r2, #0
 80058c0:	602a      	str	r2, [r5, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f7fb fa68 	bl	8000d98 <_read>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_read_r+0x1e>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_read_r+0x1e>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	2000047c 	.word	0x2000047c

080058d8 <_write_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d07      	ldr	r5, [pc, #28]	; (80058f8 <_write_r+0x20>)
 80058dc:	4604      	mov	r4, r0
 80058de:	4608      	mov	r0, r1
 80058e0:	4611      	mov	r1, r2
 80058e2:	2200      	movs	r2, #0
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f7fb fa73 	bl	8000dd2 <_write>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_write_r+0x1e>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_write_r+0x1e>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	2000047c 	.word	0x2000047c

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20000068 	.word	0x20000068

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4d0d      	ldr	r5, [pc, #52]	; (8005940 <__libc_init_array+0x38>)
 800590c:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 800590e:	1b64      	subs	r4, r4, r5
 8005910:	10a4      	asrs	r4, r4, #2
 8005912:	2600      	movs	r6, #0
 8005914:	42a6      	cmp	r6, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	4d0b      	ldr	r5, [pc, #44]	; (8005948 <__libc_init_array+0x40>)
 800591a:	4c0c      	ldr	r4, [pc, #48]	; (800594c <__libc_init_array+0x44>)
 800591c:	f002 f80e 	bl	800793c <_init>
 8005920:	1b64      	subs	r4, r4, r5
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	2600      	movs	r6, #0
 8005926:	42a6      	cmp	r6, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005930:	4798      	blx	r3
 8005932:	3601      	adds	r6, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f855 3b04 	ldr.w	r3, [r5], #4
 800593a:	4798      	blx	r3
 800593c:	3601      	adds	r6, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	08007f5c 	.word	0x08007f5c
 8005944:	08007f5c 	.word	0x08007f5c
 8005948:	08007f5c 	.word	0x08007f5c
 800594c:	08007f60 	.word	0x08007f60

08005950 <__retarget_lock_init_recursive>:
 8005950:	4770      	bx	lr

08005952 <__retarget_lock_acquire_recursive>:
 8005952:	4770      	bx	lr

08005954 <__retarget_lock_release_recursive>:
 8005954:	4770      	bx	lr

08005956 <quorem>:
 8005956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	6903      	ldr	r3, [r0, #16]
 800595c:	690c      	ldr	r4, [r1, #16]
 800595e:	42a3      	cmp	r3, r4
 8005960:	4607      	mov	r7, r0
 8005962:	db7e      	blt.n	8005a62 <quorem+0x10c>
 8005964:	3c01      	subs	r4, #1
 8005966:	f101 0814 	add.w	r8, r1, #20
 800596a:	f100 0514 	add.w	r5, r0, #20
 800596e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800597c:	3301      	adds	r3, #1
 800597e:	429a      	cmp	r2, r3
 8005980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005988:	fbb2 f6f3 	udiv	r6, r2, r3
 800598c:	d331      	bcc.n	80059f2 <quorem+0x9c>
 800598e:	f04f 0e00 	mov.w	lr, #0
 8005992:	4640      	mov	r0, r8
 8005994:	46ac      	mov	ip, r5
 8005996:	46f2      	mov	sl, lr
 8005998:	f850 2b04 	ldr.w	r2, [r0], #4
 800599c:	b293      	uxth	r3, r2
 800599e:	fb06 e303 	mla	r3, r6, r3, lr
 80059a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059a6:	0c1a      	lsrs	r2, r3, #16
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ebaa 0303 	sub.w	r3, sl, r3
 80059ae:	f8dc a000 	ldr.w	sl, [ip]
 80059b2:	fa13 f38a 	uxtah	r3, r3, sl
 80059b6:	fb06 220e 	mla	r2, r6, lr, r2
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059c2:	b292      	uxth	r2, r2
 80059c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80059d0:	4581      	cmp	r9, r0
 80059d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d6:	f84c 3b04 	str.w	r3, [ip], #4
 80059da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059de:	d2db      	bcs.n	8005998 <quorem+0x42>
 80059e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80059e4:	b92b      	cbnz	r3, 80059f2 <quorem+0x9c>
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	3b04      	subs	r3, #4
 80059ea:	429d      	cmp	r5, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	d32c      	bcc.n	8005a4a <quorem+0xf4>
 80059f0:	613c      	str	r4, [r7, #16]
 80059f2:	4638      	mov	r0, r7
 80059f4:	f001 f920 	bl	8006c38 <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	db22      	blt.n	8005a42 <quorem+0xec>
 80059fc:	3601      	adds	r6, #1
 80059fe:	4629      	mov	r1, r5
 8005a00:	2000      	movs	r0, #0
 8005a02:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a06:	f8d1 c000 	ldr.w	ip, [r1]
 8005a0a:	b293      	uxth	r3, r2
 8005a0c:	1ac3      	subs	r3, r0, r3
 8005a0e:	0c12      	lsrs	r2, r2, #16
 8005a10:	fa13 f38c 	uxtah	r3, r3, ip
 8005a14:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a22:	45c1      	cmp	r9, r8
 8005a24:	f841 3b04 	str.w	r3, [r1], #4
 8005a28:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a2c:	d2e9      	bcs.n	8005a02 <quorem+0xac>
 8005a2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a36:	b922      	cbnz	r2, 8005a42 <quorem+0xec>
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	429d      	cmp	r5, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	d30a      	bcc.n	8005a56 <quorem+0x100>
 8005a40:	613c      	str	r4, [r7, #16]
 8005a42:	4630      	mov	r0, r6
 8005a44:	b003      	add	sp, #12
 8005a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d1ce      	bne.n	80059f0 <quorem+0x9a>
 8005a52:	3c01      	subs	r4, #1
 8005a54:	e7c9      	b.n	80059ea <quorem+0x94>
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d1f0      	bne.n	8005a40 <quorem+0xea>
 8005a5e:	3c01      	subs	r4, #1
 8005a60:	e7eb      	b.n	8005a3a <quorem+0xe4>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e7ee      	b.n	8005a44 <quorem+0xee>
	...

08005a68 <_dtoa_r>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	ed2d 8b02 	vpush	{d8}
 8005a70:	69c5      	ldr	r5, [r0, #28]
 8005a72:	b091      	sub	sp, #68	; 0x44
 8005a74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a78:	ec59 8b10 	vmov	r8, r9, d0
 8005a7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005a7e:	9106      	str	r1, [sp, #24]
 8005a80:	4606      	mov	r6, r0
 8005a82:	9208      	str	r2, [sp, #32]
 8005a84:	930c      	str	r3, [sp, #48]	; 0x30
 8005a86:	b975      	cbnz	r5, 8005aa6 <_dtoa_r+0x3e>
 8005a88:	2010      	movs	r0, #16
 8005a8a:	f000 fda5 	bl	80065d8 <malloc>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	61f0      	str	r0, [r6, #28]
 8005a92:	b920      	cbnz	r0, 8005a9e <_dtoa_r+0x36>
 8005a94:	4ba6      	ldr	r3, [pc, #664]	; (8005d30 <_dtoa_r+0x2c8>)
 8005a96:	21ef      	movs	r1, #239	; 0xef
 8005a98:	48a6      	ldr	r0, [pc, #664]	; (8005d34 <_dtoa_r+0x2cc>)
 8005a9a:	f001 fc0b 	bl	80072b4 <__assert_func>
 8005a9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aa2:	6005      	str	r5, [r0, #0]
 8005aa4:	60c5      	str	r5, [r0, #12]
 8005aa6:	69f3      	ldr	r3, [r6, #28]
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	b151      	cbz	r1, 8005ac2 <_dtoa_r+0x5a>
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	604a      	str	r2, [r1, #4]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4093      	lsls	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f000 fe82 	bl	80067c0 <_Bfree>
 8005abc:	69f3      	ldr	r3, [r6, #28]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f1b9 0300 	subs.w	r3, r9, #0
 8005ac6:	bfbb      	ittet	lt
 8005ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	9303      	strlt	r3, [sp, #12]
 8005ace:	2300      	movge	r3, #0
 8005ad0:	2201      	movlt	r2, #1
 8005ad2:	bfac      	ite	ge
 8005ad4:	6023      	strge	r3, [r4, #0]
 8005ad6:	6022      	strlt	r2, [r4, #0]
 8005ad8:	4b97      	ldr	r3, [pc, #604]	; (8005d38 <_dtoa_r+0x2d0>)
 8005ada:	9c03      	ldr	r4, [sp, #12]
 8005adc:	43a3      	bics	r3, r4
 8005ade:	d11c      	bne.n	8005b1a <_dtoa_r+0xb2>
 8005ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005aec:	ea53 0308 	orrs.w	r3, r3, r8
 8005af0:	f000 84fb 	beq.w	80064ea <_dtoa_r+0xa82>
 8005af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005af6:	b963      	cbnz	r3, 8005b12 <_dtoa_r+0xaa>
 8005af8:	4b90      	ldr	r3, [pc, #576]	; (8005d3c <_dtoa_r+0x2d4>)
 8005afa:	e020      	b.n	8005b3e <_dtoa_r+0xd6>
 8005afc:	4b90      	ldr	r3, [pc, #576]	; (8005d40 <_dtoa_r+0x2d8>)
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	3308      	adds	r3, #8
 8005b02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	9801      	ldr	r0, [sp, #4]
 8005b08:	b011      	add	sp, #68	; 0x44
 8005b0a:	ecbd 8b02 	vpop	{d8}
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <_dtoa_r+0x2d4>)
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	3303      	adds	r3, #3
 8005b18:	e7f3      	b.n	8005b02 <_dtoa_r+0x9a>
 8005b1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005b1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	d10c      	bne.n	8005b42 <_dtoa_r+0xda>
 8005b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 84d7 	beq.w	80064e4 <_dtoa_r+0xa7c>
 8005b36:	4b83      	ldr	r3, [pc, #524]	; (8005d44 <_dtoa_r+0x2dc>)
 8005b38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	e7e1      	b.n	8005b06 <_dtoa_r+0x9e>
 8005b42:	aa0e      	add	r2, sp, #56	; 0x38
 8005b44:	a90f      	add	r1, sp, #60	; 0x3c
 8005b46:	4630      	mov	r0, r6
 8005b48:	eeb0 0b48 	vmov.f64	d0, d8
 8005b4c:	f001 f91a 	bl	8006d84 <__d2b>
 8005b50:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b56:	4605      	mov	r5, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d046      	beq.n	8005bea <_dtoa_r+0x182>
 8005b5c:	eeb0 7b48 	vmov.f64	d7, d8
 8005b60:	ee18 1a90 	vmov	r1, s17
 8005b64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005b68:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005b6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005b70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b74:	2000      	movs	r0, #0
 8005b76:	ee07 1a90 	vmov	s15, r1
 8005b7a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005b7e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005d18 <_dtoa_r+0x2b0>
 8005b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b86:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005d20 <_dtoa_r+0x2b8>
 8005b8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005b8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005d28 <_dtoa_r+0x2c0>
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005b9a:	eeb0 7b46 	vmov.f64	d7, d6
 8005b9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005ba2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005ba6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	ee16 ba90 	vmov	fp, s13
 8005bb2:	9009      	str	r0, [sp, #36]	; 0x24
 8005bb4:	d508      	bpl.n	8005bc8 <_dtoa_r+0x160>
 8005bb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005bba:	eeb4 6b47 	vcmp.f64	d6, d7
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	bf18      	it	ne
 8005bc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005bc8:	f1bb 0f16 	cmp.w	fp, #22
 8005bcc:	d82b      	bhi.n	8005c26 <_dtoa_r+0x1be>
 8005bce:	495e      	ldr	r1, [pc, #376]	; (8005d48 <_dtoa_r+0x2e0>)
 8005bd0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005bd4:	ed91 7b00 	vldr	d7, [r1]
 8005bd8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	d501      	bpl.n	8005be6 <_dtoa_r+0x17e>
 8005be2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005be6:	2100      	movs	r1, #0
 8005be8:	e01e      	b.n	8005c28 <_dtoa_r+0x1c0>
 8005bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005bf2:	2920      	cmp	r1, #32
 8005bf4:	bfc1      	itttt	gt
 8005bf6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005bfa:	408c      	lslgt	r4, r1
 8005bfc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005c00:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005c04:	bfd6      	itet	le
 8005c06:	f1c1 0120 	rsble	r1, r1, #32
 8005c0a:	4321      	orrgt	r1, r4
 8005c0c:	fa08 f101 	lslle.w	r1, r8, r1
 8005c10:	ee07 1a90 	vmov	s15, r1
 8005c14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	ee17 1a90 	vmov	r1, s15
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c24:	e7a7      	b.n	8005b76 <_dtoa_r+0x10e>
 8005c26:	2101      	movs	r1, #1
 8005c28:	1ad2      	subs	r2, r2, r3
 8005c2a:	1e53      	subs	r3, r2, #1
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	bf45      	ittet	mi
 8005c30:	f1c2 0301 	rsbmi	r3, r2, #1
 8005c34:	9304      	strmi	r3, [sp, #16]
 8005c36:	2300      	movpl	r3, #0
 8005c38:	2300      	movmi	r3, #0
 8005c3a:	bf4c      	ite	mi
 8005c3c:	9305      	strmi	r3, [sp, #20]
 8005c3e:	9304      	strpl	r3, [sp, #16]
 8005c40:	f1bb 0f00 	cmp.w	fp, #0
 8005c44:	910b      	str	r1, [sp, #44]	; 0x2c
 8005c46:	db18      	blt.n	8005c7a <_dtoa_r+0x212>
 8005c48:	9b05      	ldr	r3, [sp, #20]
 8005c4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005c4e:	445b      	add	r3, fp
 8005c50:	9305      	str	r3, [sp, #20]
 8005c52:	2300      	movs	r3, #0
 8005c54:	9a06      	ldr	r2, [sp, #24]
 8005c56:	2a09      	cmp	r2, #9
 8005c58:	d848      	bhi.n	8005cec <_dtoa_r+0x284>
 8005c5a:	2a05      	cmp	r2, #5
 8005c5c:	bfc4      	itt	gt
 8005c5e:	3a04      	subgt	r2, #4
 8005c60:	9206      	strgt	r2, [sp, #24]
 8005c62:	9a06      	ldr	r2, [sp, #24]
 8005c64:	f1a2 0202 	sub.w	r2, r2, #2
 8005c68:	bfcc      	ite	gt
 8005c6a:	2400      	movgt	r4, #0
 8005c6c:	2401      	movle	r4, #1
 8005c6e:	2a03      	cmp	r2, #3
 8005c70:	d847      	bhi.n	8005d02 <_dtoa_r+0x29a>
 8005c72:	e8df f002 	tbb	[pc, r2]
 8005c76:	2d0b      	.short	0x2d0b
 8005c78:	392b      	.short	0x392b
 8005c7a:	9b04      	ldr	r3, [sp, #16]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	eba3 030b 	sub.w	r3, r3, fp
 8005c82:	9304      	str	r3, [sp, #16]
 8005c84:	920a      	str	r2, [sp, #40]	; 0x28
 8005c86:	f1cb 0300 	rsb	r3, fp, #0
 8005c8a:	e7e3      	b.n	8005c54 <_dtoa_r+0x1ec>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	9207      	str	r2, [sp, #28]
 8005c90:	9a08      	ldr	r2, [sp, #32]
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	dc38      	bgt.n	8005d08 <_dtoa_r+0x2a0>
 8005c96:	f04f 0a01 	mov.w	sl, #1
 8005c9a:	46d1      	mov	r9, sl
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	f8cd a020 	str.w	sl, [sp, #32]
 8005ca2:	69f7      	ldr	r7, [r6, #28]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	2004      	movs	r0, #4
 8005ca8:	f100 0c14 	add.w	ip, r0, #20
 8005cac:	4594      	cmp	ip, r2
 8005cae:	d930      	bls.n	8005d12 <_dtoa_r+0x2aa>
 8005cb0:	6079      	str	r1, [r7, #4]
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8005cb6:	f000 fd43 	bl	8006740 <_Balloc>
 8005cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cbc:	9001      	str	r0, [sp, #4]
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d145      	bne.n	8005d50 <_dtoa_r+0x2e8>
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <_dtoa_r+0x2e4>)
 8005cc6:	f240 11af 	movw	r1, #431	; 0x1af
 8005cca:	e6e5      	b.n	8005a98 <_dtoa_r+0x30>
 8005ccc:	2201      	movs	r2, #1
 8005cce:	e7de      	b.n	8005c8e <_dtoa_r+0x226>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	9207      	str	r2, [sp, #28]
 8005cd4:	9a08      	ldr	r2, [sp, #32]
 8005cd6:	eb0b 0a02 	add.w	sl, fp, r2
 8005cda:	f10a 0901 	add.w	r9, sl, #1
 8005cde:	464a      	mov	r2, r9
 8005ce0:	2a01      	cmp	r2, #1
 8005ce2:	bfb8      	it	lt
 8005ce4:	2201      	movlt	r2, #1
 8005ce6:	e7dc      	b.n	8005ca2 <_dtoa_r+0x23a>
 8005ce8:	2201      	movs	r2, #1
 8005cea:	e7f2      	b.n	8005cd2 <_dtoa_r+0x26a>
 8005cec:	2401      	movs	r4, #1
 8005cee:	2200      	movs	r2, #0
 8005cf0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005cf4:	f04f 3aff 	mov.w	sl, #4294967295
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	46d1      	mov	r9, sl
 8005cfc:	2212      	movs	r2, #18
 8005cfe:	9108      	str	r1, [sp, #32]
 8005d00:	e7cf      	b.n	8005ca2 <_dtoa_r+0x23a>
 8005d02:	2201      	movs	r2, #1
 8005d04:	9207      	str	r2, [sp, #28]
 8005d06:	e7f5      	b.n	8005cf4 <_dtoa_r+0x28c>
 8005d08:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d0c:	46d1      	mov	r9, sl
 8005d0e:	4652      	mov	r2, sl
 8005d10:	e7c7      	b.n	8005ca2 <_dtoa_r+0x23a>
 8005d12:	3101      	adds	r1, #1
 8005d14:	0040      	lsls	r0, r0, #1
 8005d16:	e7c7      	b.n	8005ca8 <_dtoa_r+0x240>
 8005d18:	636f4361 	.word	0x636f4361
 8005d1c:	3fd287a7 	.word	0x3fd287a7
 8005d20:	8b60c8b3 	.word	0x8b60c8b3
 8005d24:	3fc68a28 	.word	0x3fc68a28
 8005d28:	509f79fb 	.word	0x509f79fb
 8005d2c:	3fd34413 	.word	0x3fd34413
 8005d30:	08007c25 	.word	0x08007c25
 8005d34:	08007c3c 	.word	0x08007c3c
 8005d38:	7ff00000 	.word	0x7ff00000
 8005d3c:	08007c21 	.word	0x08007c21
 8005d40:	08007c18 	.word	0x08007c18
 8005d44:	08007bf5 	.word	0x08007bf5
 8005d48:	08007d28 	.word	0x08007d28
 8005d4c:	08007c94 	.word	0x08007c94
 8005d50:	69f2      	ldr	r2, [r6, #28]
 8005d52:	9901      	ldr	r1, [sp, #4]
 8005d54:	6011      	str	r1, [r2, #0]
 8005d56:	f1b9 0f0e 	cmp.w	r9, #14
 8005d5a:	d86c      	bhi.n	8005e36 <_dtoa_r+0x3ce>
 8005d5c:	2c00      	cmp	r4, #0
 8005d5e:	d06a      	beq.n	8005e36 <_dtoa_r+0x3ce>
 8005d60:	f1bb 0f00 	cmp.w	fp, #0
 8005d64:	f340 80a0 	ble.w	8005ea8 <_dtoa_r+0x440>
 8005d68:	4ac1      	ldr	r2, [pc, #772]	; (8006070 <_dtoa_r+0x608>)
 8005d6a:	f00b 010f 	and.w	r1, fp, #15
 8005d6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005d72:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d76:	ed92 7b00 	vldr	d7, [r2]
 8005d7a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005d7e:	f000 8087 	beq.w	8005e90 <_dtoa_r+0x428>
 8005d82:	49bc      	ldr	r1, [pc, #752]	; (8006074 <_dtoa_r+0x60c>)
 8005d84:	ed91 6b08 	vldr	d6, [r1, #32]
 8005d88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005d8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005d90:	f002 020f 	and.w	r2, r2, #15
 8005d94:	2103      	movs	r1, #3
 8005d96:	48b7      	ldr	r0, [pc, #732]	; (8006074 <_dtoa_r+0x60c>)
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d17b      	bne.n	8005e94 <_dtoa_r+0x42c>
 8005d9c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005da0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005da4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005daa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	f000 80a0 	beq.w	8005ef4 <_dtoa_r+0x48c>
 8005db4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005db8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc0:	f140 8098 	bpl.w	8005ef4 <_dtoa_r+0x48c>
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	f000 8094 	beq.w	8005ef4 <_dtoa_r+0x48c>
 8005dcc:	f1ba 0f00 	cmp.w	sl, #0
 8005dd0:	dd2f      	ble.n	8005e32 <_dtoa_r+0x3ca>
 8005dd2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005dd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dda:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dde:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005de2:	3101      	adds	r1, #1
 8005de4:	4654      	mov	r4, sl
 8005de6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005dea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005dee:	ee07 1a90 	vmov	s15, r1
 8005df2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005df6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005dfa:	ee15 7a90 	vmov	r7, s11
 8005dfe:	ec51 0b15 	vmov	r0, r1, d5
 8005e02:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d177      	bne.n	8005efa <_dtoa_r+0x492>
 8005e0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005e0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e12:	ec41 0b17 	vmov	d7, r0, r1
 8005e16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	f300 826a 	bgt.w	80062f6 <_dtoa_r+0x88e>
 8005e22:	eeb1 7b47 	vneg.f64	d7, d7
 8005e26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2e:	f100 8260 	bmi.w	80062f2 <_dtoa_r+0x88a>
 8005e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e38:	2a00      	cmp	r2, #0
 8005e3a:	f2c0 811d 	blt.w	8006078 <_dtoa_r+0x610>
 8005e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e42:	f300 8119 	bgt.w	8006078 <_dtoa_r+0x610>
 8005e46:	4b8a      	ldr	r3, [pc, #552]	; (8006070 <_dtoa_r+0x608>)
 8005e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e4c:	ed93 6b00 	vldr	d6, [r3]
 8005e50:	9b08      	ldr	r3, [sp, #32]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f280 80b7 	bge.w	8005fc6 <_dtoa_r+0x55e>
 8005e58:	f1b9 0f00 	cmp.w	r9, #0
 8005e5c:	f300 80b3 	bgt.w	8005fc6 <_dtoa_r+0x55e>
 8005e60:	f040 8246 	bne.w	80062f0 <_dtoa_r+0x888>
 8005e64:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005e68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	464c      	mov	r4, r9
 8005e7a:	464f      	mov	r7, r9
 8005e7c:	f280 821c 	bge.w	80062b8 <_dtoa_r+0x850>
 8005e80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e84:	2331      	movs	r3, #49	; 0x31
 8005e86:	f808 3b01 	strb.w	r3, [r8], #1
 8005e8a:	f10b 0b01 	add.w	fp, fp, #1
 8005e8e:	e218      	b.n	80062c2 <_dtoa_r+0x85a>
 8005e90:	2102      	movs	r1, #2
 8005e92:	e780      	b.n	8005d96 <_dtoa_r+0x32e>
 8005e94:	07d4      	lsls	r4, r2, #31
 8005e96:	d504      	bpl.n	8005ea2 <_dtoa_r+0x43a>
 8005e98:	ed90 6b00 	vldr	d6, [r0]
 8005e9c:	3101      	adds	r1, #1
 8005e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ea2:	1052      	asrs	r2, r2, #1
 8005ea4:	3008      	adds	r0, #8
 8005ea6:	e777      	b.n	8005d98 <_dtoa_r+0x330>
 8005ea8:	d022      	beq.n	8005ef0 <_dtoa_r+0x488>
 8005eaa:	f1cb 0200 	rsb	r2, fp, #0
 8005eae:	4970      	ldr	r1, [pc, #448]	; (8006070 <_dtoa_r+0x608>)
 8005eb0:	f002 000f 	and.w	r0, r2, #15
 8005eb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005eb8:	ed91 7b00 	vldr	d7, [r1]
 8005ebc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005ec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ec4:	486b      	ldr	r0, [pc, #428]	; (8006074 <_dtoa_r+0x60c>)
 8005ec6:	1112      	asrs	r2, r2, #4
 8005ec8:	2400      	movs	r4, #0
 8005eca:	2102      	movs	r1, #2
 8005ecc:	b92a      	cbnz	r2, 8005eda <_dtoa_r+0x472>
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	f43f af6a 	beq.w	8005da8 <_dtoa_r+0x340>
 8005ed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ed8:	e766      	b.n	8005da8 <_dtoa_r+0x340>
 8005eda:	07d7      	lsls	r7, r2, #31
 8005edc:	d505      	bpl.n	8005eea <_dtoa_r+0x482>
 8005ede:	ed90 6b00 	vldr	d6, [r0]
 8005ee2:	3101      	adds	r1, #1
 8005ee4:	2401      	movs	r4, #1
 8005ee6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005eea:	1052      	asrs	r2, r2, #1
 8005eec:	3008      	adds	r0, #8
 8005eee:	e7ed      	b.n	8005ecc <_dtoa_r+0x464>
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	e759      	b.n	8005da8 <_dtoa_r+0x340>
 8005ef4:	465a      	mov	r2, fp
 8005ef6:	464c      	mov	r4, r9
 8005ef8:	e775      	b.n	8005de6 <_dtoa_r+0x37e>
 8005efa:	ec41 0b17 	vmov	d7, r0, r1
 8005efe:	495c      	ldr	r1, [pc, #368]	; (8006070 <_dtoa_r+0x608>)
 8005f00:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005f04:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005f08:	9901      	ldr	r1, [sp, #4]
 8005f0a:	440c      	add	r4, r1
 8005f0c:	9907      	ldr	r1, [sp, #28]
 8005f0e:	b351      	cbz	r1, 8005f66 <_dtoa_r+0x4fe>
 8005f10:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005f14:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005f18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f1c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005f20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005f24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005f28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f2c:	ee14 1a90 	vmov	r1, s9
 8005f30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f34:	3130      	adds	r1, #48	; 0x30
 8005f36:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005f3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f42:	f808 1b01 	strb.w	r1, [r8], #1
 8005f46:	d439      	bmi.n	8005fbc <_dtoa_r+0x554>
 8005f48:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005f4c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f54:	d472      	bmi.n	800603c <_dtoa_r+0x5d4>
 8005f56:	45a0      	cmp	r8, r4
 8005f58:	f43f af6b 	beq.w	8005e32 <_dtoa_r+0x3ca>
 8005f5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005f60:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005f64:	e7e0      	b.n	8005f28 <_dtoa_r+0x4c0>
 8005f66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f6e:	4620      	mov	r0, r4
 8005f70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005f74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f78:	ee14 1a90 	vmov	r1, s9
 8005f7c:	3130      	adds	r1, #48	; 0x30
 8005f7e:	f808 1b01 	strb.w	r1, [r8], #1
 8005f82:	45a0      	cmp	r8, r4
 8005f84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f88:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005f8c:	d118      	bne.n	8005fc0 <_dtoa_r+0x558>
 8005f8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005f92:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005f96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9e:	dc4d      	bgt.n	800603c <_dtoa_r+0x5d4>
 8005fa0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005fa4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	f57f af41 	bpl.w	8005e32 <_dtoa_r+0x3ca>
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	3801      	subs	r0, #1
 8005fb4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d0f9      	beq.n	8005fb0 <_dtoa_r+0x548>
 8005fbc:	4693      	mov	fp, r2
 8005fbe:	e02a      	b.n	8006016 <_dtoa_r+0x5ae>
 8005fc0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005fc4:	e7d6      	b.n	8005f74 <_dtoa_r+0x50c>
 8005fc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005fce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005fd2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005fd6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005fda:	ee15 3a10 	vmov	r3, s10
 8005fde:	3330      	adds	r3, #48	; 0x30
 8005fe0:	f808 3b01 	strb.w	r3, [r8], #1
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	eba8 0303 	sub.w	r3, r8, r3
 8005fea:	4599      	cmp	r9, r3
 8005fec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005ff0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005ff4:	d133      	bne.n	800605e <_dtoa_r+0x5f6>
 8005ff6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ffa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006002:	dc1a      	bgt.n	800603a <_dtoa_r+0x5d2>
 8006004:	eeb4 7b46 	vcmp.f64	d7, d6
 8006008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600c:	d103      	bne.n	8006016 <_dtoa_r+0x5ae>
 800600e:	ee15 3a10 	vmov	r3, s10
 8006012:	07d9      	lsls	r1, r3, #31
 8006014:	d411      	bmi.n	800603a <_dtoa_r+0x5d2>
 8006016:	4629      	mov	r1, r5
 8006018:	4630      	mov	r0, r6
 800601a:	f000 fbd1 	bl	80067c0 <_Bfree>
 800601e:	2300      	movs	r3, #0
 8006020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006022:	f888 3000 	strb.w	r3, [r8]
 8006026:	f10b 0301 	add.w	r3, fp, #1
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800602e:	2b00      	cmp	r3, #0
 8006030:	f43f ad69 	beq.w	8005b06 <_dtoa_r+0x9e>
 8006034:	f8c3 8000 	str.w	r8, [r3]
 8006038:	e565      	b.n	8005b06 <_dtoa_r+0x9e>
 800603a:	465a      	mov	r2, fp
 800603c:	4643      	mov	r3, r8
 800603e:	4698      	mov	r8, r3
 8006040:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006044:	2939      	cmp	r1, #57	; 0x39
 8006046:	d106      	bne.n	8006056 <_dtoa_r+0x5ee>
 8006048:	9901      	ldr	r1, [sp, #4]
 800604a:	4299      	cmp	r1, r3
 800604c:	d1f7      	bne.n	800603e <_dtoa_r+0x5d6>
 800604e:	9801      	ldr	r0, [sp, #4]
 8006050:	2130      	movs	r1, #48	; 0x30
 8006052:	3201      	adds	r2, #1
 8006054:	7001      	strb	r1, [r0, #0]
 8006056:	7819      	ldrb	r1, [r3, #0]
 8006058:	3101      	adds	r1, #1
 800605a:	7019      	strb	r1, [r3, #0]
 800605c:	e7ae      	b.n	8005fbc <_dtoa_r+0x554>
 800605e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606a:	d1b2      	bne.n	8005fd2 <_dtoa_r+0x56a>
 800606c:	e7d3      	b.n	8006016 <_dtoa_r+0x5ae>
 800606e:	bf00      	nop
 8006070:	08007d28 	.word	0x08007d28
 8006074:	08007d00 	.word	0x08007d00
 8006078:	9907      	ldr	r1, [sp, #28]
 800607a:	2900      	cmp	r1, #0
 800607c:	f000 80d0 	beq.w	8006220 <_dtoa_r+0x7b8>
 8006080:	9906      	ldr	r1, [sp, #24]
 8006082:	2901      	cmp	r1, #1
 8006084:	f300 80b4 	bgt.w	80061f0 <_dtoa_r+0x788>
 8006088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800608a:	2900      	cmp	r1, #0
 800608c:	f000 80ac 	beq.w	80061e8 <_dtoa_r+0x780>
 8006090:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006094:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006098:	461c      	mov	r4, r3
 800609a:	9309      	str	r3, [sp, #36]	; 0x24
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	2101      	movs	r1, #1
 80060a6:	4413      	add	r3, r2
 80060a8:	4630      	mov	r0, r6
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	f000 fc3e 	bl	800692c <__i2b>
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	4607      	mov	r7, r0
 80060b4:	f1b8 0f00 	cmp.w	r8, #0
 80060b8:	d00d      	beq.n	80060d6 <_dtoa_r+0x66e>
 80060ba:	9a05      	ldr	r2, [sp, #20]
 80060bc:	2a00      	cmp	r2, #0
 80060be:	dd0a      	ble.n	80060d6 <_dtoa_r+0x66e>
 80060c0:	4542      	cmp	r2, r8
 80060c2:	9904      	ldr	r1, [sp, #16]
 80060c4:	bfa8      	it	ge
 80060c6:	4642      	movge	r2, r8
 80060c8:	1a89      	subs	r1, r1, r2
 80060ca:	9104      	str	r1, [sp, #16]
 80060cc:	9905      	ldr	r1, [sp, #20]
 80060ce:	eba8 0802 	sub.w	r8, r8, r2
 80060d2:	1a8a      	subs	r2, r1, r2
 80060d4:	9205      	str	r2, [sp, #20]
 80060d6:	b303      	cbz	r3, 800611a <_dtoa_r+0x6b2>
 80060d8:	9a07      	ldr	r2, [sp, #28]
 80060da:	2a00      	cmp	r2, #0
 80060dc:	f000 80a5 	beq.w	800622a <_dtoa_r+0x7c2>
 80060e0:	2c00      	cmp	r4, #0
 80060e2:	dd13      	ble.n	800610c <_dtoa_r+0x6a4>
 80060e4:	4639      	mov	r1, r7
 80060e6:	4622      	mov	r2, r4
 80060e8:	4630      	mov	r0, r6
 80060ea:	930d      	str	r3, [sp, #52]	; 0x34
 80060ec:	f000 fcde 	bl	8006aac <__pow5mult>
 80060f0:	462a      	mov	r2, r5
 80060f2:	4601      	mov	r1, r0
 80060f4:	4607      	mov	r7, r0
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 fc2e 	bl	8006958 <__multiply>
 80060fc:	4629      	mov	r1, r5
 80060fe:	9009      	str	r0, [sp, #36]	; 0x24
 8006100:	4630      	mov	r0, r6
 8006102:	f000 fb5d 	bl	80067c0 <_Bfree>
 8006106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800610a:	4615      	mov	r5, r2
 800610c:	1b1a      	subs	r2, r3, r4
 800610e:	d004      	beq.n	800611a <_dtoa_r+0x6b2>
 8006110:	4629      	mov	r1, r5
 8006112:	4630      	mov	r0, r6
 8006114:	f000 fcca 	bl	8006aac <__pow5mult>
 8006118:	4605      	mov	r5, r0
 800611a:	2101      	movs	r1, #1
 800611c:	4630      	mov	r0, r6
 800611e:	f000 fc05 	bl	800692c <__i2b>
 8006122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	f340 8081 	ble.w	800622e <_dtoa_r+0x7c6>
 800612c:	461a      	mov	r2, r3
 800612e:	4601      	mov	r1, r0
 8006130:	4630      	mov	r0, r6
 8006132:	f000 fcbb 	bl	8006aac <__pow5mult>
 8006136:	9b06      	ldr	r3, [sp, #24]
 8006138:	2b01      	cmp	r3, #1
 800613a:	4604      	mov	r4, r0
 800613c:	dd7a      	ble.n	8006234 <_dtoa_r+0x7cc>
 800613e:	2300      	movs	r3, #0
 8006140:	9309      	str	r3, [sp, #36]	; 0x24
 8006142:	6922      	ldr	r2, [r4, #16]
 8006144:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006148:	6910      	ldr	r0, [r2, #16]
 800614a:	f000 fba1 	bl	8006890 <__hi0bits>
 800614e:	f1c0 0020 	rsb	r0, r0, #32
 8006152:	9b05      	ldr	r3, [sp, #20]
 8006154:	4418      	add	r0, r3
 8006156:	f010 001f 	ands.w	r0, r0, #31
 800615a:	f000 8093 	beq.w	8006284 <_dtoa_r+0x81c>
 800615e:	f1c0 0220 	rsb	r2, r0, #32
 8006162:	2a04      	cmp	r2, #4
 8006164:	f340 8085 	ble.w	8006272 <_dtoa_r+0x80a>
 8006168:	9b04      	ldr	r3, [sp, #16]
 800616a:	f1c0 001c 	rsb	r0, r0, #28
 800616e:	4403      	add	r3, r0
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	9b05      	ldr	r3, [sp, #20]
 8006174:	4480      	add	r8, r0
 8006176:	4403      	add	r3, r0
 8006178:	9305      	str	r3, [sp, #20]
 800617a:	9b04      	ldr	r3, [sp, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	dd05      	ble.n	800618c <_dtoa_r+0x724>
 8006180:	4629      	mov	r1, r5
 8006182:	461a      	mov	r2, r3
 8006184:	4630      	mov	r0, r6
 8006186:	f000 fceb 	bl	8006b60 <__lshift>
 800618a:	4605      	mov	r5, r0
 800618c:	9b05      	ldr	r3, [sp, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd05      	ble.n	800619e <_dtoa_r+0x736>
 8006192:	4621      	mov	r1, r4
 8006194:	461a      	mov	r2, r3
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fce2 	bl	8006b60 <__lshift>
 800619c:	4604      	mov	r4, r0
 800619e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d071      	beq.n	8006288 <_dtoa_r+0x820>
 80061a4:	4621      	mov	r1, r4
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fd46 	bl	8006c38 <__mcmp>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	da6b      	bge.n	8006288 <_dtoa_r+0x820>
 80061b0:	2300      	movs	r3, #0
 80061b2:	4629      	mov	r1, r5
 80061b4:	220a      	movs	r2, #10
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 fb24 	bl	8006804 <__multadd>
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061c2:	4605      	mov	r5, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8197 	beq.w	80064f8 <_dtoa_r+0xa90>
 80061ca:	4639      	mov	r1, r7
 80061cc:	2300      	movs	r3, #0
 80061ce:	220a      	movs	r2, #10
 80061d0:	4630      	mov	r0, r6
 80061d2:	f000 fb17 	bl	8006804 <__multadd>
 80061d6:	f1ba 0f00 	cmp.w	sl, #0
 80061da:	4607      	mov	r7, r0
 80061dc:	f300 8093 	bgt.w	8006306 <_dtoa_r+0x89e>
 80061e0:	9b06      	ldr	r3, [sp, #24]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	dc57      	bgt.n	8006296 <_dtoa_r+0x82e>
 80061e6:	e08e      	b.n	8006306 <_dtoa_r+0x89e>
 80061e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80061ee:	e751      	b.n	8006094 <_dtoa_r+0x62c>
 80061f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	bfbf      	itttt	lt
 80061f8:	1ae2      	sublt	r2, r4, r3
 80061fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061fc:	189b      	addlt	r3, r3, r2
 80061fe:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006200:	bfae      	itee	ge
 8006202:	1b1c      	subge	r4, r3, r4
 8006204:	4623      	movlt	r3, r4
 8006206:	2400      	movlt	r4, #0
 8006208:	f1b9 0f00 	cmp.w	r9, #0
 800620c:	bfb5      	itete	lt
 800620e:	9a04      	ldrlt	r2, [sp, #16]
 8006210:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006214:	eba2 0809 	sublt.w	r8, r2, r9
 8006218:	464a      	movge	r2, r9
 800621a:	bfb8      	it	lt
 800621c:	2200      	movlt	r2, #0
 800621e:	e73c      	b.n	800609a <_dtoa_r+0x632>
 8006220:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006224:	9f07      	ldr	r7, [sp, #28]
 8006226:	461c      	mov	r4, r3
 8006228:	e744      	b.n	80060b4 <_dtoa_r+0x64c>
 800622a:	461a      	mov	r2, r3
 800622c:	e770      	b.n	8006110 <_dtoa_r+0x6a8>
 800622e:	9b06      	ldr	r3, [sp, #24]
 8006230:	2b01      	cmp	r3, #1
 8006232:	dc18      	bgt.n	8006266 <_dtoa_r+0x7fe>
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	b9b3      	cbnz	r3, 8006266 <_dtoa_r+0x7fe>
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800623e:	b9a2      	cbnz	r2, 800626a <_dtoa_r+0x802>
 8006240:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006244:	0d12      	lsrs	r2, r2, #20
 8006246:	0512      	lsls	r2, r2, #20
 8006248:	b18a      	cbz	r2, 800626e <_dtoa_r+0x806>
 800624a:	9b04      	ldr	r3, [sp, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	9b05      	ldr	r3, [sp, #20]
 8006252:	3301      	adds	r3, #1
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	2301      	movs	r3, #1
 8006258:	9309      	str	r3, [sp, #36]	; 0x24
 800625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	f47f af70 	bne.w	8006142 <_dtoa_r+0x6da>
 8006262:	2001      	movs	r0, #1
 8006264:	e775      	b.n	8006152 <_dtoa_r+0x6ea>
 8006266:	2300      	movs	r3, #0
 8006268:	e7f6      	b.n	8006258 <_dtoa_r+0x7f0>
 800626a:	9b02      	ldr	r3, [sp, #8]
 800626c:	e7f4      	b.n	8006258 <_dtoa_r+0x7f0>
 800626e:	9209      	str	r2, [sp, #36]	; 0x24
 8006270:	e7f3      	b.n	800625a <_dtoa_r+0x7f2>
 8006272:	d082      	beq.n	800617a <_dtoa_r+0x712>
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	321c      	adds	r2, #28
 8006278:	4413      	add	r3, r2
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	9b05      	ldr	r3, [sp, #20]
 800627e:	4490      	add	r8, r2
 8006280:	4413      	add	r3, r2
 8006282:	e779      	b.n	8006178 <_dtoa_r+0x710>
 8006284:	4602      	mov	r2, r0
 8006286:	e7f5      	b.n	8006274 <_dtoa_r+0x80c>
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	dc36      	bgt.n	80062fc <_dtoa_r+0x894>
 800628e:	9b06      	ldr	r3, [sp, #24]
 8006290:	2b02      	cmp	r3, #2
 8006292:	dd33      	ble.n	80062fc <_dtoa_r+0x894>
 8006294:	46ca      	mov	sl, r9
 8006296:	f1ba 0f00 	cmp.w	sl, #0
 800629a:	d10d      	bne.n	80062b8 <_dtoa_r+0x850>
 800629c:	4621      	mov	r1, r4
 800629e:	4653      	mov	r3, sl
 80062a0:	2205      	movs	r2, #5
 80062a2:	4630      	mov	r0, r6
 80062a4:	f000 faae 	bl	8006804 <__multadd>
 80062a8:	4601      	mov	r1, r0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 fcc3 	bl	8006c38 <__mcmp>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f73f ade4 	bgt.w	8005e80 <_dtoa_r+0x418>
 80062b8:	9b08      	ldr	r3, [sp, #32]
 80062ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062be:	ea6f 0b03 	mvn.w	fp, r3
 80062c2:	f04f 0900 	mov.w	r9, #0
 80062c6:	4621      	mov	r1, r4
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 fa79 	bl	80067c0 <_Bfree>
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	f43f aea1 	beq.w	8006016 <_dtoa_r+0x5ae>
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	d005      	beq.n	80062e6 <_dtoa_r+0x87e>
 80062da:	45b9      	cmp	r9, r7
 80062dc:	d003      	beq.n	80062e6 <_dtoa_r+0x87e>
 80062de:	4649      	mov	r1, r9
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 fa6d 	bl	80067c0 <_Bfree>
 80062e6:	4639      	mov	r1, r7
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 fa69 	bl	80067c0 <_Bfree>
 80062ee:	e692      	b.n	8006016 <_dtoa_r+0x5ae>
 80062f0:	2400      	movs	r4, #0
 80062f2:	4627      	mov	r7, r4
 80062f4:	e7e0      	b.n	80062b8 <_dtoa_r+0x850>
 80062f6:	4693      	mov	fp, r2
 80062f8:	4627      	mov	r7, r4
 80062fa:	e5c1      	b.n	8005e80 <_dtoa_r+0x418>
 80062fc:	9b07      	ldr	r3, [sp, #28]
 80062fe:	46ca      	mov	sl, r9
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8100 	beq.w	8006506 <_dtoa_r+0xa9e>
 8006306:	f1b8 0f00 	cmp.w	r8, #0
 800630a:	dd05      	ble.n	8006318 <_dtoa_r+0x8b0>
 800630c:	4639      	mov	r1, r7
 800630e:	4642      	mov	r2, r8
 8006310:	4630      	mov	r0, r6
 8006312:	f000 fc25 	bl	8006b60 <__lshift>
 8006316:	4607      	mov	r7, r0
 8006318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05d      	beq.n	80063da <_dtoa_r+0x972>
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4630      	mov	r0, r6
 8006322:	f000 fa0d 	bl	8006740 <_Balloc>
 8006326:	4680      	mov	r8, r0
 8006328:	b928      	cbnz	r0, 8006336 <_dtoa_r+0x8ce>
 800632a:	4b82      	ldr	r3, [pc, #520]	; (8006534 <_dtoa_r+0xacc>)
 800632c:	4602      	mov	r2, r0
 800632e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006332:	f7ff bbb1 	b.w	8005a98 <_dtoa_r+0x30>
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	3202      	adds	r2, #2
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	f107 010c 	add.w	r1, r7, #12
 8006340:	300c      	adds	r0, #12
 8006342:	f000 ffa9 	bl	8007298 <memcpy>
 8006346:	2201      	movs	r2, #1
 8006348:	4641      	mov	r1, r8
 800634a:	4630      	mov	r0, r6
 800634c:	f000 fc08 	bl	8006b60 <__lshift>
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	4453      	add	r3, sl
 800635a:	9308      	str	r3, [sp, #32]
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	46b9      	mov	r9, r7
 8006364:	9307      	str	r3, [sp, #28]
 8006366:	4607      	mov	r7, r0
 8006368:	9b04      	ldr	r3, [sp, #16]
 800636a:	4621      	mov	r1, r4
 800636c:	3b01      	subs	r3, #1
 800636e:	4628      	mov	r0, r5
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	f7ff faf0 	bl	8005956 <quorem>
 8006376:	4603      	mov	r3, r0
 8006378:	3330      	adds	r3, #48	; 0x30
 800637a:	9005      	str	r0, [sp, #20]
 800637c:	4649      	mov	r1, r9
 800637e:	4628      	mov	r0, r5
 8006380:	9309      	str	r3, [sp, #36]	; 0x24
 8006382:	f000 fc59 	bl	8006c38 <__mcmp>
 8006386:	463a      	mov	r2, r7
 8006388:	4682      	mov	sl, r0
 800638a:	4621      	mov	r1, r4
 800638c:	4630      	mov	r0, r6
 800638e:	f000 fc6f 	bl	8006c70 <__mdiff>
 8006392:	68c2      	ldr	r2, [r0, #12]
 8006394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006396:	4680      	mov	r8, r0
 8006398:	bb0a      	cbnz	r2, 80063de <_dtoa_r+0x976>
 800639a:	4601      	mov	r1, r0
 800639c:	4628      	mov	r0, r5
 800639e:	f000 fc4b 	bl	8006c38 <__mcmp>
 80063a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a4:	4602      	mov	r2, r0
 80063a6:	4641      	mov	r1, r8
 80063a8:	4630      	mov	r0, r6
 80063aa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80063ae:	f000 fa07 	bl	80067c0 <_Bfree>
 80063b2:	9b06      	ldr	r3, [sp, #24]
 80063b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80063ba:	ea43 0102 	orr.w	r1, r3, r2
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	4319      	orrs	r1, r3
 80063c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c4:	d10d      	bne.n	80063e2 <_dtoa_r+0x97a>
 80063c6:	2b39      	cmp	r3, #57	; 0x39
 80063c8:	d029      	beq.n	800641e <_dtoa_r+0x9b6>
 80063ca:	f1ba 0f00 	cmp.w	sl, #0
 80063ce:	dd01      	ble.n	80063d4 <_dtoa_r+0x96c>
 80063d0:	9b05      	ldr	r3, [sp, #20]
 80063d2:	3331      	adds	r3, #49	; 0x31
 80063d4:	9a02      	ldr	r2, [sp, #8]
 80063d6:	7013      	strb	r3, [r2, #0]
 80063d8:	e775      	b.n	80062c6 <_dtoa_r+0x85e>
 80063da:	4638      	mov	r0, r7
 80063dc:	e7b8      	b.n	8006350 <_dtoa_r+0x8e8>
 80063de:	2201      	movs	r2, #1
 80063e0:	e7e1      	b.n	80063a6 <_dtoa_r+0x93e>
 80063e2:	f1ba 0f00 	cmp.w	sl, #0
 80063e6:	db06      	blt.n	80063f6 <_dtoa_r+0x98e>
 80063e8:	9906      	ldr	r1, [sp, #24]
 80063ea:	ea41 0a0a 	orr.w	sl, r1, sl
 80063ee:	9907      	ldr	r1, [sp, #28]
 80063f0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80063f4:	d120      	bne.n	8006438 <_dtoa_r+0x9d0>
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	ddec      	ble.n	80063d4 <_dtoa_r+0x96c>
 80063fa:	4629      	mov	r1, r5
 80063fc:	2201      	movs	r2, #1
 80063fe:	4630      	mov	r0, r6
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	f000 fbad 	bl	8006b60 <__lshift>
 8006406:	4621      	mov	r1, r4
 8006408:	4605      	mov	r5, r0
 800640a:	f000 fc15 	bl	8006c38 <__mcmp>
 800640e:	2800      	cmp	r0, #0
 8006410:	9b04      	ldr	r3, [sp, #16]
 8006412:	dc02      	bgt.n	800641a <_dtoa_r+0x9b2>
 8006414:	d1de      	bne.n	80063d4 <_dtoa_r+0x96c>
 8006416:	07da      	lsls	r2, r3, #31
 8006418:	d5dc      	bpl.n	80063d4 <_dtoa_r+0x96c>
 800641a:	2b39      	cmp	r3, #57	; 0x39
 800641c:	d1d8      	bne.n	80063d0 <_dtoa_r+0x968>
 800641e:	9a02      	ldr	r2, [sp, #8]
 8006420:	2339      	movs	r3, #57	; 0x39
 8006422:	7013      	strb	r3, [r2, #0]
 8006424:	4643      	mov	r3, r8
 8006426:	4698      	mov	r8, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800642e:	2a39      	cmp	r2, #57	; 0x39
 8006430:	d051      	beq.n	80064d6 <_dtoa_r+0xa6e>
 8006432:	3201      	adds	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	e746      	b.n	80062c6 <_dtoa_r+0x85e>
 8006438:	2a00      	cmp	r2, #0
 800643a:	dd03      	ble.n	8006444 <_dtoa_r+0x9dc>
 800643c:	2b39      	cmp	r3, #57	; 0x39
 800643e:	d0ee      	beq.n	800641e <_dtoa_r+0x9b6>
 8006440:	3301      	adds	r3, #1
 8006442:	e7c7      	b.n	80063d4 <_dtoa_r+0x96c>
 8006444:	9a04      	ldr	r2, [sp, #16]
 8006446:	9908      	ldr	r1, [sp, #32]
 8006448:	f802 3c01 	strb.w	r3, [r2, #-1]
 800644c:	428a      	cmp	r2, r1
 800644e:	d02b      	beq.n	80064a8 <_dtoa_r+0xa40>
 8006450:	4629      	mov	r1, r5
 8006452:	2300      	movs	r3, #0
 8006454:	220a      	movs	r2, #10
 8006456:	4630      	mov	r0, r6
 8006458:	f000 f9d4 	bl	8006804 <__multadd>
 800645c:	45b9      	cmp	r9, r7
 800645e:	4605      	mov	r5, r0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	f04f 020a 	mov.w	r2, #10
 8006468:	4649      	mov	r1, r9
 800646a:	4630      	mov	r0, r6
 800646c:	d107      	bne.n	800647e <_dtoa_r+0xa16>
 800646e:	f000 f9c9 	bl	8006804 <__multadd>
 8006472:	4681      	mov	r9, r0
 8006474:	4607      	mov	r7, r0
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	3301      	adds	r3, #1
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	e774      	b.n	8006368 <_dtoa_r+0x900>
 800647e:	f000 f9c1 	bl	8006804 <__multadd>
 8006482:	4639      	mov	r1, r7
 8006484:	4681      	mov	r9, r0
 8006486:	2300      	movs	r3, #0
 8006488:	220a      	movs	r2, #10
 800648a:	4630      	mov	r0, r6
 800648c:	f000 f9ba 	bl	8006804 <__multadd>
 8006490:	4607      	mov	r7, r0
 8006492:	e7f0      	b.n	8006476 <_dtoa_r+0xa0e>
 8006494:	f1ba 0f00 	cmp.w	sl, #0
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	bfcc      	ite	gt
 800649c:	46d0      	movgt	r8, sl
 800649e:	f04f 0801 	movle.w	r8, #1
 80064a2:	4490      	add	r8, r2
 80064a4:	f04f 0900 	mov.w	r9, #0
 80064a8:	4629      	mov	r1, r5
 80064aa:	2201      	movs	r2, #1
 80064ac:	4630      	mov	r0, r6
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	f000 fb56 	bl	8006b60 <__lshift>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4605      	mov	r5, r0
 80064b8:	f000 fbbe 	bl	8006c38 <__mcmp>
 80064bc:	2800      	cmp	r0, #0
 80064be:	dcb1      	bgt.n	8006424 <_dtoa_r+0x9bc>
 80064c0:	d102      	bne.n	80064c8 <_dtoa_r+0xa60>
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	07db      	lsls	r3, r3, #31
 80064c6:	d4ad      	bmi.n	8006424 <_dtoa_r+0x9bc>
 80064c8:	4643      	mov	r3, r8
 80064ca:	4698      	mov	r8, r3
 80064cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064d0:	2a30      	cmp	r2, #48	; 0x30
 80064d2:	d0fa      	beq.n	80064ca <_dtoa_r+0xa62>
 80064d4:	e6f7      	b.n	80062c6 <_dtoa_r+0x85e>
 80064d6:	9a01      	ldr	r2, [sp, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d1a4      	bne.n	8006426 <_dtoa_r+0x9be>
 80064dc:	f10b 0b01 	add.w	fp, fp, #1
 80064e0:	2331      	movs	r3, #49	; 0x31
 80064e2:	e778      	b.n	80063d6 <_dtoa_r+0x96e>
 80064e4:	4b14      	ldr	r3, [pc, #80]	; (8006538 <_dtoa_r+0xad0>)
 80064e6:	f7ff bb2a 	b.w	8005b3e <_dtoa_r+0xd6>
 80064ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f ab05 	bne.w	8005afc <_dtoa_r+0x94>
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <_dtoa_r+0xad4>)
 80064f4:	f7ff bb23 	b.w	8005b3e <_dtoa_r+0xd6>
 80064f8:	f1ba 0f00 	cmp.w	sl, #0
 80064fc:	dc03      	bgt.n	8006506 <_dtoa_r+0xa9e>
 80064fe:	9b06      	ldr	r3, [sp, #24]
 8006500:	2b02      	cmp	r3, #2
 8006502:	f73f aec8 	bgt.w	8006296 <_dtoa_r+0x82e>
 8006506:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f7ff fa22 	bl	8005956 <quorem>
 8006512:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006516:	f808 3b01 	strb.w	r3, [r8], #1
 800651a:	9a01      	ldr	r2, [sp, #4]
 800651c:	eba8 0202 	sub.w	r2, r8, r2
 8006520:	4592      	cmp	sl, r2
 8006522:	ddb7      	ble.n	8006494 <_dtoa_r+0xa2c>
 8006524:	4629      	mov	r1, r5
 8006526:	2300      	movs	r3, #0
 8006528:	220a      	movs	r2, #10
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f96a 	bl	8006804 <__multadd>
 8006530:	4605      	mov	r5, r0
 8006532:	e7ea      	b.n	800650a <_dtoa_r+0xaa2>
 8006534:	08007c94 	.word	0x08007c94
 8006538:	08007bf4 	.word	0x08007bf4
 800653c:	08007c18 	.word	0x08007c18

08006540 <_free_r>:
 8006540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006542:	2900      	cmp	r1, #0
 8006544:	d044      	beq.n	80065d0 <_free_r+0x90>
 8006546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654a:	9001      	str	r0, [sp, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f1a1 0404 	sub.w	r4, r1, #4
 8006552:	bfb8      	it	lt
 8006554:	18e4      	addlt	r4, r4, r3
 8006556:	f000 f8e7 	bl	8006728 <__malloc_lock>
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <_free_r+0x94>)
 800655c:	9801      	ldr	r0, [sp, #4]
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	b933      	cbnz	r3, 8006570 <_free_r+0x30>
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	6014      	str	r4, [r2, #0]
 8006566:	b003      	add	sp, #12
 8006568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800656c:	f000 b8e2 	b.w	8006734 <__malloc_unlock>
 8006570:	42a3      	cmp	r3, r4
 8006572:	d908      	bls.n	8006586 <_free_r+0x46>
 8006574:	6825      	ldr	r5, [r4, #0]
 8006576:	1961      	adds	r1, r4, r5
 8006578:	428b      	cmp	r3, r1
 800657a:	bf01      	itttt	eq
 800657c:	6819      	ldreq	r1, [r3, #0]
 800657e:	685b      	ldreq	r3, [r3, #4]
 8006580:	1949      	addeq	r1, r1, r5
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	e7ed      	b.n	8006562 <_free_r+0x22>
 8006586:	461a      	mov	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b10b      	cbz	r3, 8006590 <_free_r+0x50>
 800658c:	42a3      	cmp	r3, r4
 800658e:	d9fa      	bls.n	8006586 <_free_r+0x46>
 8006590:	6811      	ldr	r1, [r2, #0]
 8006592:	1855      	adds	r5, r2, r1
 8006594:	42a5      	cmp	r5, r4
 8006596:	d10b      	bne.n	80065b0 <_free_r+0x70>
 8006598:	6824      	ldr	r4, [r4, #0]
 800659a:	4421      	add	r1, r4
 800659c:	1854      	adds	r4, r2, r1
 800659e:	42a3      	cmp	r3, r4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	d1e0      	bne.n	8006566 <_free_r+0x26>
 80065a4:	681c      	ldr	r4, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	6053      	str	r3, [r2, #4]
 80065aa:	440c      	add	r4, r1
 80065ac:	6014      	str	r4, [r2, #0]
 80065ae:	e7da      	b.n	8006566 <_free_r+0x26>
 80065b0:	d902      	bls.n	80065b8 <_free_r+0x78>
 80065b2:	230c      	movs	r3, #12
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	e7d6      	b.n	8006566 <_free_r+0x26>
 80065b8:	6825      	ldr	r5, [r4, #0]
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf04      	itt	eq
 80065c0:	6819      	ldreq	r1, [r3, #0]
 80065c2:	685b      	ldreq	r3, [r3, #4]
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	bf04      	itt	eq
 80065c8:	1949      	addeq	r1, r1, r5
 80065ca:	6021      	streq	r1, [r4, #0]
 80065cc:	6054      	str	r4, [r2, #4]
 80065ce:	e7ca      	b.n	8006566 <_free_r+0x26>
 80065d0:	b003      	add	sp, #12
 80065d2:	bd30      	pop	{r4, r5, pc}
 80065d4:	20000484 	.word	0x20000484

080065d8 <malloc>:
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <malloc+0xc>)
 80065da:	4601      	mov	r1, r0
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f000 b823 	b.w	8006628 <_malloc_r>
 80065e2:	bf00      	nop
 80065e4:	20000068 	.word	0x20000068

080065e8 <sbrk_aligned>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	4e0e      	ldr	r6, [pc, #56]	; (8006624 <sbrk_aligned+0x3c>)
 80065ec:	460c      	mov	r4, r1
 80065ee:	6831      	ldr	r1, [r6, #0]
 80065f0:	4605      	mov	r5, r0
 80065f2:	b911      	cbnz	r1, 80065fa <sbrk_aligned+0x12>
 80065f4:	f000 fe40 	bl	8007278 <_sbrk_r>
 80065f8:	6030      	str	r0, [r6, #0]
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 fe3b 	bl	8007278 <_sbrk_r>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	d00a      	beq.n	800661c <sbrk_aligned+0x34>
 8006606:	1cc4      	adds	r4, r0, #3
 8006608:	f024 0403 	bic.w	r4, r4, #3
 800660c:	42a0      	cmp	r0, r4
 800660e:	d007      	beq.n	8006620 <sbrk_aligned+0x38>
 8006610:	1a21      	subs	r1, r4, r0
 8006612:	4628      	mov	r0, r5
 8006614:	f000 fe30 	bl	8007278 <_sbrk_r>
 8006618:	3001      	adds	r0, #1
 800661a:	d101      	bne.n	8006620 <sbrk_aligned+0x38>
 800661c:	f04f 34ff 	mov.w	r4, #4294967295
 8006620:	4620      	mov	r0, r4
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	20000488 	.word	0x20000488

08006628 <_malloc_r>:
 8006628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800662c:	1ccd      	adds	r5, r1, #3
 800662e:	f025 0503 	bic.w	r5, r5, #3
 8006632:	3508      	adds	r5, #8
 8006634:	2d0c      	cmp	r5, #12
 8006636:	bf38      	it	cc
 8006638:	250c      	movcc	r5, #12
 800663a:	2d00      	cmp	r5, #0
 800663c:	4607      	mov	r7, r0
 800663e:	db01      	blt.n	8006644 <_malloc_r+0x1c>
 8006640:	42a9      	cmp	r1, r5
 8006642:	d905      	bls.n	8006650 <_malloc_r+0x28>
 8006644:	230c      	movs	r3, #12
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	2600      	movs	r6, #0
 800664a:	4630      	mov	r0, r6
 800664c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006650:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006724 <_malloc_r+0xfc>
 8006654:	f000 f868 	bl	8006728 <__malloc_lock>
 8006658:	f8d8 3000 	ldr.w	r3, [r8]
 800665c:	461c      	mov	r4, r3
 800665e:	bb5c      	cbnz	r4, 80066b8 <_malloc_r+0x90>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	f7ff ffc0 	bl	80065e8 <sbrk_aligned>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	4604      	mov	r4, r0
 800666c:	d155      	bne.n	800671a <_malloc_r+0xf2>
 800666e:	f8d8 4000 	ldr.w	r4, [r8]
 8006672:	4626      	mov	r6, r4
 8006674:	2e00      	cmp	r6, #0
 8006676:	d145      	bne.n	8006704 <_malloc_r+0xdc>
 8006678:	2c00      	cmp	r4, #0
 800667a:	d048      	beq.n	800670e <_malloc_r+0xe6>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	4631      	mov	r1, r6
 8006680:	4638      	mov	r0, r7
 8006682:	eb04 0903 	add.w	r9, r4, r3
 8006686:	f000 fdf7 	bl	8007278 <_sbrk_r>
 800668a:	4581      	cmp	r9, r0
 800668c:	d13f      	bne.n	800670e <_malloc_r+0xe6>
 800668e:	6821      	ldr	r1, [r4, #0]
 8006690:	1a6d      	subs	r5, r5, r1
 8006692:	4629      	mov	r1, r5
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff ffa7 	bl	80065e8 <sbrk_aligned>
 800669a:	3001      	adds	r0, #1
 800669c:	d037      	beq.n	800670e <_malloc_r+0xe6>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	442b      	add	r3, r5
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	f8d8 3000 	ldr.w	r3, [r8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d038      	beq.n	800671e <_malloc_r+0xf6>
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	42a2      	cmp	r2, r4
 80066b0:	d12b      	bne.n	800670a <_malloc_r+0xe2>
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e00f      	b.n	80066d8 <_malloc_r+0xb0>
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	1b52      	subs	r2, r2, r5
 80066bc:	d41f      	bmi.n	80066fe <_malloc_r+0xd6>
 80066be:	2a0b      	cmp	r2, #11
 80066c0:	d917      	bls.n	80066f2 <_malloc_r+0xca>
 80066c2:	1961      	adds	r1, r4, r5
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	6025      	str	r5, [r4, #0]
 80066c8:	bf18      	it	ne
 80066ca:	6059      	strne	r1, [r3, #4]
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	bf08      	it	eq
 80066d0:	f8c8 1000 	streq.w	r1, [r8]
 80066d4:	5162      	str	r2, [r4, r5]
 80066d6:	604b      	str	r3, [r1, #4]
 80066d8:	4638      	mov	r0, r7
 80066da:	f104 060b 	add.w	r6, r4, #11
 80066de:	f000 f829 	bl	8006734 <__malloc_unlock>
 80066e2:	f026 0607 	bic.w	r6, r6, #7
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	1af2      	subs	r2, r6, r3
 80066ea:	d0ae      	beq.n	800664a <_malloc_r+0x22>
 80066ec:	1b9b      	subs	r3, r3, r6
 80066ee:	50a3      	str	r3, [r4, r2]
 80066f0:	e7ab      	b.n	800664a <_malloc_r+0x22>
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	6862      	ldr	r2, [r4, #4]
 80066f6:	d1dd      	bne.n	80066b4 <_malloc_r+0x8c>
 80066f8:	f8c8 2000 	str.w	r2, [r8]
 80066fc:	e7ec      	b.n	80066d8 <_malloc_r+0xb0>
 80066fe:	4623      	mov	r3, r4
 8006700:	6864      	ldr	r4, [r4, #4]
 8006702:	e7ac      	b.n	800665e <_malloc_r+0x36>
 8006704:	4634      	mov	r4, r6
 8006706:	6876      	ldr	r6, [r6, #4]
 8006708:	e7b4      	b.n	8006674 <_malloc_r+0x4c>
 800670a:	4613      	mov	r3, r2
 800670c:	e7cc      	b.n	80066a8 <_malloc_r+0x80>
 800670e:	230c      	movs	r3, #12
 8006710:	603b      	str	r3, [r7, #0]
 8006712:	4638      	mov	r0, r7
 8006714:	f000 f80e 	bl	8006734 <__malloc_unlock>
 8006718:	e797      	b.n	800664a <_malloc_r+0x22>
 800671a:	6025      	str	r5, [r4, #0]
 800671c:	e7dc      	b.n	80066d8 <_malloc_r+0xb0>
 800671e:	605b      	str	r3, [r3, #4]
 8006720:	deff      	udf	#255	; 0xff
 8006722:	bf00      	nop
 8006724:	20000484 	.word	0x20000484

08006728 <__malloc_lock>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__malloc_lock+0x8>)
 800672a:	f7ff b912 	b.w	8005952 <__retarget_lock_acquire_recursive>
 800672e:	bf00      	nop
 8006730:	20000480 	.word	0x20000480

08006734 <__malloc_unlock>:
 8006734:	4801      	ldr	r0, [pc, #4]	; (800673c <__malloc_unlock+0x8>)
 8006736:	f7ff b90d 	b.w	8005954 <__retarget_lock_release_recursive>
 800673a:	bf00      	nop
 800673c:	20000480 	.word	0x20000480

08006740 <_Balloc>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	69c6      	ldr	r6, [r0, #28]
 8006744:	4604      	mov	r4, r0
 8006746:	460d      	mov	r5, r1
 8006748:	b976      	cbnz	r6, 8006768 <_Balloc+0x28>
 800674a:	2010      	movs	r0, #16
 800674c:	f7ff ff44 	bl	80065d8 <malloc>
 8006750:	4602      	mov	r2, r0
 8006752:	61e0      	str	r0, [r4, #28]
 8006754:	b920      	cbnz	r0, 8006760 <_Balloc+0x20>
 8006756:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <_Balloc+0x78>)
 8006758:	4818      	ldr	r0, [pc, #96]	; (80067bc <_Balloc+0x7c>)
 800675a:	216b      	movs	r1, #107	; 0x6b
 800675c:	f000 fdaa 	bl	80072b4 <__assert_func>
 8006760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006764:	6006      	str	r6, [r0, #0]
 8006766:	60c6      	str	r6, [r0, #12]
 8006768:	69e6      	ldr	r6, [r4, #28]
 800676a:	68f3      	ldr	r3, [r6, #12]
 800676c:	b183      	cbz	r3, 8006790 <_Balloc+0x50>
 800676e:	69e3      	ldr	r3, [r4, #28]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006776:	b9b8      	cbnz	r0, 80067a8 <_Balloc+0x68>
 8006778:	2101      	movs	r1, #1
 800677a:	fa01 f605 	lsl.w	r6, r1, r5
 800677e:	1d72      	adds	r2, r6, #5
 8006780:	0092      	lsls	r2, r2, #2
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fdb4 	bl	80072f0 <_calloc_r>
 8006788:	b160      	cbz	r0, 80067a4 <_Balloc+0x64>
 800678a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800678e:	e00e      	b.n	80067ae <_Balloc+0x6e>
 8006790:	2221      	movs	r2, #33	; 0x21
 8006792:	2104      	movs	r1, #4
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fdab 	bl	80072f0 <_calloc_r>
 800679a:	69e3      	ldr	r3, [r4, #28]
 800679c:	60f0      	str	r0, [r6, #12]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e4      	bne.n	800676e <_Balloc+0x2e>
 80067a4:	2000      	movs	r0, #0
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	6802      	ldr	r2, [r0, #0]
 80067aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067ae:	2300      	movs	r3, #0
 80067b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067b4:	e7f7      	b.n	80067a6 <_Balloc+0x66>
 80067b6:	bf00      	nop
 80067b8:	08007c25 	.word	0x08007c25
 80067bc:	08007ca5 	.word	0x08007ca5

080067c0 <_Bfree>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	69c6      	ldr	r6, [r0, #28]
 80067c4:	4605      	mov	r5, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	b976      	cbnz	r6, 80067e8 <_Bfree+0x28>
 80067ca:	2010      	movs	r0, #16
 80067cc:	f7ff ff04 	bl	80065d8 <malloc>
 80067d0:	4602      	mov	r2, r0
 80067d2:	61e8      	str	r0, [r5, #28]
 80067d4:	b920      	cbnz	r0, 80067e0 <_Bfree+0x20>
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <_Bfree+0x3c>)
 80067d8:	4809      	ldr	r0, [pc, #36]	; (8006800 <_Bfree+0x40>)
 80067da:	218f      	movs	r1, #143	; 0x8f
 80067dc:	f000 fd6a 	bl	80072b4 <__assert_func>
 80067e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067e4:	6006      	str	r6, [r0, #0]
 80067e6:	60c6      	str	r6, [r0, #12]
 80067e8:	b13c      	cbz	r4, 80067fa <_Bfree+0x3a>
 80067ea:	69eb      	ldr	r3, [r5, #28]
 80067ec:	6862      	ldr	r2, [r4, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067f4:	6021      	str	r1, [r4, #0]
 80067f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	08007c25 	.word	0x08007c25
 8006800:	08007ca5 	.word	0x08007ca5

08006804 <__multadd>:
 8006804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006808:	690d      	ldr	r5, [r1, #16]
 800680a:	4607      	mov	r7, r0
 800680c:	460c      	mov	r4, r1
 800680e:	461e      	mov	r6, r3
 8006810:	f101 0c14 	add.w	ip, r1, #20
 8006814:	2000      	movs	r0, #0
 8006816:	f8dc 3000 	ldr.w	r3, [ip]
 800681a:	b299      	uxth	r1, r3
 800681c:	fb02 6101 	mla	r1, r2, r1, r6
 8006820:	0c1e      	lsrs	r6, r3, #16
 8006822:	0c0b      	lsrs	r3, r1, #16
 8006824:	fb02 3306 	mla	r3, r2, r6, r3
 8006828:	b289      	uxth	r1, r1
 800682a:	3001      	adds	r0, #1
 800682c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006830:	4285      	cmp	r5, r0
 8006832:	f84c 1b04 	str.w	r1, [ip], #4
 8006836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800683a:	dcec      	bgt.n	8006816 <__multadd+0x12>
 800683c:	b30e      	cbz	r6, 8006882 <__multadd+0x7e>
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	42ab      	cmp	r3, r5
 8006842:	dc19      	bgt.n	8006878 <__multadd+0x74>
 8006844:	6861      	ldr	r1, [r4, #4]
 8006846:	4638      	mov	r0, r7
 8006848:	3101      	adds	r1, #1
 800684a:	f7ff ff79 	bl	8006740 <_Balloc>
 800684e:	4680      	mov	r8, r0
 8006850:	b928      	cbnz	r0, 800685e <__multadd+0x5a>
 8006852:	4602      	mov	r2, r0
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <__multadd+0x84>)
 8006856:	480d      	ldr	r0, [pc, #52]	; (800688c <__multadd+0x88>)
 8006858:	21ba      	movs	r1, #186	; 0xba
 800685a:	f000 fd2b 	bl	80072b4 <__assert_func>
 800685e:	6922      	ldr	r2, [r4, #16]
 8006860:	3202      	adds	r2, #2
 8006862:	f104 010c 	add.w	r1, r4, #12
 8006866:	0092      	lsls	r2, r2, #2
 8006868:	300c      	adds	r0, #12
 800686a:	f000 fd15 	bl	8007298 <memcpy>
 800686e:	4621      	mov	r1, r4
 8006870:	4638      	mov	r0, r7
 8006872:	f7ff ffa5 	bl	80067c0 <_Bfree>
 8006876:	4644      	mov	r4, r8
 8006878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800687c:	3501      	adds	r5, #1
 800687e:	615e      	str	r6, [r3, #20]
 8006880:	6125      	str	r5, [r4, #16]
 8006882:	4620      	mov	r0, r4
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006888:	08007c94 	.word	0x08007c94
 800688c:	08007ca5 	.word	0x08007ca5

08006890 <__hi0bits>:
 8006890:	0c03      	lsrs	r3, r0, #16
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	b9d3      	cbnz	r3, 80068cc <__hi0bits+0x3c>
 8006896:	0400      	lsls	r0, r0, #16
 8006898:	2310      	movs	r3, #16
 800689a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800689e:	bf04      	itt	eq
 80068a0:	0200      	lsleq	r0, r0, #8
 80068a2:	3308      	addeq	r3, #8
 80068a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068a8:	bf04      	itt	eq
 80068aa:	0100      	lsleq	r0, r0, #4
 80068ac:	3304      	addeq	r3, #4
 80068ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068b2:	bf04      	itt	eq
 80068b4:	0080      	lsleq	r0, r0, #2
 80068b6:	3302      	addeq	r3, #2
 80068b8:	2800      	cmp	r0, #0
 80068ba:	db05      	blt.n	80068c8 <__hi0bits+0x38>
 80068bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068c0:	f103 0301 	add.w	r3, r3, #1
 80068c4:	bf08      	it	eq
 80068c6:	2320      	moveq	r3, #32
 80068c8:	4618      	mov	r0, r3
 80068ca:	4770      	bx	lr
 80068cc:	2300      	movs	r3, #0
 80068ce:	e7e4      	b.n	800689a <__hi0bits+0xa>

080068d0 <__lo0bits>:
 80068d0:	6803      	ldr	r3, [r0, #0]
 80068d2:	f013 0207 	ands.w	r2, r3, #7
 80068d6:	d00c      	beq.n	80068f2 <__lo0bits+0x22>
 80068d8:	07d9      	lsls	r1, r3, #31
 80068da:	d422      	bmi.n	8006922 <__lo0bits+0x52>
 80068dc:	079a      	lsls	r2, r3, #30
 80068de:	bf49      	itett	mi
 80068e0:	085b      	lsrmi	r3, r3, #1
 80068e2:	089b      	lsrpl	r3, r3, #2
 80068e4:	6003      	strmi	r3, [r0, #0]
 80068e6:	2201      	movmi	r2, #1
 80068e8:	bf5c      	itt	pl
 80068ea:	6003      	strpl	r3, [r0, #0]
 80068ec:	2202      	movpl	r2, #2
 80068ee:	4610      	mov	r0, r2
 80068f0:	4770      	bx	lr
 80068f2:	b299      	uxth	r1, r3
 80068f4:	b909      	cbnz	r1, 80068fa <__lo0bits+0x2a>
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	2210      	movs	r2, #16
 80068fa:	b2d9      	uxtb	r1, r3
 80068fc:	b909      	cbnz	r1, 8006902 <__lo0bits+0x32>
 80068fe:	3208      	adds	r2, #8
 8006900:	0a1b      	lsrs	r3, r3, #8
 8006902:	0719      	lsls	r1, r3, #28
 8006904:	bf04      	itt	eq
 8006906:	091b      	lsreq	r3, r3, #4
 8006908:	3204      	addeq	r2, #4
 800690a:	0799      	lsls	r1, r3, #30
 800690c:	bf04      	itt	eq
 800690e:	089b      	lsreq	r3, r3, #2
 8006910:	3202      	addeq	r2, #2
 8006912:	07d9      	lsls	r1, r3, #31
 8006914:	d403      	bmi.n	800691e <__lo0bits+0x4e>
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	f102 0201 	add.w	r2, r2, #1
 800691c:	d003      	beq.n	8006926 <__lo0bits+0x56>
 800691e:	6003      	str	r3, [r0, #0]
 8006920:	e7e5      	b.n	80068ee <__lo0bits+0x1e>
 8006922:	2200      	movs	r2, #0
 8006924:	e7e3      	b.n	80068ee <__lo0bits+0x1e>
 8006926:	2220      	movs	r2, #32
 8006928:	e7e1      	b.n	80068ee <__lo0bits+0x1e>
	...

0800692c <__i2b>:
 800692c:	b510      	push	{r4, lr}
 800692e:	460c      	mov	r4, r1
 8006930:	2101      	movs	r1, #1
 8006932:	f7ff ff05 	bl	8006740 <_Balloc>
 8006936:	4602      	mov	r2, r0
 8006938:	b928      	cbnz	r0, 8006946 <__i2b+0x1a>
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <__i2b+0x24>)
 800693c:	4805      	ldr	r0, [pc, #20]	; (8006954 <__i2b+0x28>)
 800693e:	f240 1145 	movw	r1, #325	; 0x145
 8006942:	f000 fcb7 	bl	80072b4 <__assert_func>
 8006946:	2301      	movs	r3, #1
 8006948:	6144      	str	r4, [r0, #20]
 800694a:	6103      	str	r3, [r0, #16]
 800694c:	bd10      	pop	{r4, pc}
 800694e:	bf00      	nop
 8006950:	08007c94 	.word	0x08007c94
 8006954:	08007ca5 	.word	0x08007ca5

08006958 <__multiply>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	4691      	mov	r9, r2
 800695e:	690a      	ldr	r2, [r1, #16]
 8006960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	bfb8      	it	lt
 8006968:	460b      	movlt	r3, r1
 800696a:	460c      	mov	r4, r1
 800696c:	bfbc      	itt	lt
 800696e:	464c      	movlt	r4, r9
 8006970:	4699      	movlt	r9, r3
 8006972:	6927      	ldr	r7, [r4, #16]
 8006974:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006978:	68a3      	ldr	r3, [r4, #8]
 800697a:	6861      	ldr	r1, [r4, #4]
 800697c:	eb07 060a 	add.w	r6, r7, sl
 8006980:	42b3      	cmp	r3, r6
 8006982:	b085      	sub	sp, #20
 8006984:	bfb8      	it	lt
 8006986:	3101      	addlt	r1, #1
 8006988:	f7ff feda 	bl	8006740 <_Balloc>
 800698c:	b930      	cbnz	r0, 800699c <__multiply+0x44>
 800698e:	4602      	mov	r2, r0
 8006990:	4b44      	ldr	r3, [pc, #272]	; (8006aa4 <__multiply+0x14c>)
 8006992:	4845      	ldr	r0, [pc, #276]	; (8006aa8 <__multiply+0x150>)
 8006994:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006998:	f000 fc8c 	bl	80072b4 <__assert_func>
 800699c:	f100 0514 	add.w	r5, r0, #20
 80069a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069a4:	462b      	mov	r3, r5
 80069a6:	2200      	movs	r2, #0
 80069a8:	4543      	cmp	r3, r8
 80069aa:	d321      	bcc.n	80069f0 <__multiply+0x98>
 80069ac:	f104 0314 	add.w	r3, r4, #20
 80069b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069b4:	f109 0314 	add.w	r3, r9, #20
 80069b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069bc:	9202      	str	r2, [sp, #8]
 80069be:	1b3a      	subs	r2, r7, r4
 80069c0:	3a15      	subs	r2, #21
 80069c2:	f022 0203 	bic.w	r2, r2, #3
 80069c6:	3204      	adds	r2, #4
 80069c8:	f104 0115 	add.w	r1, r4, #21
 80069cc:	428f      	cmp	r7, r1
 80069ce:	bf38      	it	cc
 80069d0:	2204      	movcc	r2, #4
 80069d2:	9201      	str	r2, [sp, #4]
 80069d4:	9a02      	ldr	r2, [sp, #8]
 80069d6:	9303      	str	r3, [sp, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d80c      	bhi.n	80069f6 <__multiply+0x9e>
 80069dc:	2e00      	cmp	r6, #0
 80069de:	dd03      	ble.n	80069e8 <__multiply+0x90>
 80069e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d05b      	beq.n	8006aa0 <__multiply+0x148>
 80069e8:	6106      	str	r6, [r0, #16]
 80069ea:	b005      	add	sp, #20
 80069ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f0:	f843 2b04 	str.w	r2, [r3], #4
 80069f4:	e7d8      	b.n	80069a8 <__multiply+0x50>
 80069f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80069fa:	f1ba 0f00 	cmp.w	sl, #0
 80069fe:	d024      	beq.n	8006a4a <__multiply+0xf2>
 8006a00:	f104 0e14 	add.w	lr, r4, #20
 8006a04:	46a9      	mov	r9, r5
 8006a06:	f04f 0c00 	mov.w	ip, #0
 8006a0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a0e:	f8d9 1000 	ldr.w	r1, [r9]
 8006a12:	fa1f fb82 	uxth.w	fp, r2
 8006a16:	b289      	uxth	r1, r1
 8006a18:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a20:	f8d9 2000 	ldr.w	r2, [r9]
 8006a24:	4461      	add	r1, ip
 8006a26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a32:	b289      	uxth	r1, r1
 8006a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a38:	4577      	cmp	r7, lr
 8006a3a:	f849 1b04 	str.w	r1, [r9], #4
 8006a3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a42:	d8e2      	bhi.n	8006a0a <__multiply+0xb2>
 8006a44:	9a01      	ldr	r2, [sp, #4]
 8006a46:	f845 c002 	str.w	ip, [r5, r2]
 8006a4a:	9a03      	ldr	r2, [sp, #12]
 8006a4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a50:	3304      	adds	r3, #4
 8006a52:	f1b9 0f00 	cmp.w	r9, #0
 8006a56:	d021      	beq.n	8006a9c <__multiply+0x144>
 8006a58:	6829      	ldr	r1, [r5, #0]
 8006a5a:	f104 0c14 	add.w	ip, r4, #20
 8006a5e:	46ae      	mov	lr, r5
 8006a60:	f04f 0a00 	mov.w	sl, #0
 8006a64:	f8bc b000 	ldrh.w	fp, [ip]
 8006a68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a6c:	fb09 220b 	mla	r2, r9, fp, r2
 8006a70:	4452      	add	r2, sl
 8006a72:	b289      	uxth	r1, r1
 8006a74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a78:	f84e 1b04 	str.w	r1, [lr], #4
 8006a7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006a80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a84:	f8be 1000 	ldrh.w	r1, [lr]
 8006a88:	fb09 110a 	mla	r1, r9, sl, r1
 8006a8c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006a90:	4567      	cmp	r7, ip
 8006a92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a96:	d8e5      	bhi.n	8006a64 <__multiply+0x10c>
 8006a98:	9a01      	ldr	r2, [sp, #4]
 8006a9a:	50a9      	str	r1, [r5, r2]
 8006a9c:	3504      	adds	r5, #4
 8006a9e:	e799      	b.n	80069d4 <__multiply+0x7c>
 8006aa0:	3e01      	subs	r6, #1
 8006aa2:	e79b      	b.n	80069dc <__multiply+0x84>
 8006aa4:	08007c94 	.word	0x08007c94
 8006aa8:	08007ca5 	.word	0x08007ca5

08006aac <__pow5mult>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	f012 0203 	ands.w	r2, r2, #3
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	d007      	beq.n	8006acc <__pow5mult+0x20>
 8006abc:	4c25      	ldr	r4, [pc, #148]	; (8006b54 <__pow5mult+0xa8>)
 8006abe:	3a01      	subs	r2, #1
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ac6:	f7ff fe9d 	bl	8006804 <__multadd>
 8006aca:	4607      	mov	r7, r0
 8006acc:	10ad      	asrs	r5, r5, #2
 8006ace:	d03d      	beq.n	8006b4c <__pow5mult+0xa0>
 8006ad0:	69f4      	ldr	r4, [r6, #28]
 8006ad2:	b97c      	cbnz	r4, 8006af4 <__pow5mult+0x48>
 8006ad4:	2010      	movs	r0, #16
 8006ad6:	f7ff fd7f 	bl	80065d8 <malloc>
 8006ada:	4602      	mov	r2, r0
 8006adc:	61f0      	str	r0, [r6, #28]
 8006ade:	b928      	cbnz	r0, 8006aec <__pow5mult+0x40>
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <__pow5mult+0xac>)
 8006ae2:	481e      	ldr	r0, [pc, #120]	; (8006b5c <__pow5mult+0xb0>)
 8006ae4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006ae8:	f000 fbe4 	bl	80072b4 <__assert_func>
 8006aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006af0:	6004      	str	r4, [r0, #0]
 8006af2:	60c4      	str	r4, [r0, #12]
 8006af4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006afc:	b94c      	cbnz	r4, 8006b12 <__pow5mult+0x66>
 8006afe:	f240 2171 	movw	r1, #625	; 0x271
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ff12 	bl	800692c <__i2b>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b0e:	4604      	mov	r4, r0
 8006b10:	6003      	str	r3, [r0, #0]
 8006b12:	f04f 0900 	mov.w	r9, #0
 8006b16:	07eb      	lsls	r3, r5, #31
 8006b18:	d50a      	bpl.n	8006b30 <__pow5mult+0x84>
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f7ff ff1a 	bl	8006958 <__multiply>
 8006b24:	4639      	mov	r1, r7
 8006b26:	4680      	mov	r8, r0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7ff fe49 	bl	80067c0 <_Bfree>
 8006b2e:	4647      	mov	r7, r8
 8006b30:	106d      	asrs	r5, r5, #1
 8006b32:	d00b      	beq.n	8006b4c <__pow5mult+0xa0>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	b938      	cbnz	r0, 8006b48 <__pow5mult+0x9c>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f7ff ff0b 	bl	8006958 <__multiply>
 8006b42:	6020      	str	r0, [r4, #0]
 8006b44:	f8c0 9000 	str.w	r9, [r0]
 8006b48:	4604      	mov	r4, r0
 8006b4a:	e7e4      	b.n	8006b16 <__pow5mult+0x6a>
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b52:	bf00      	nop
 8006b54:	08007df0 	.word	0x08007df0
 8006b58:	08007c25 	.word	0x08007c25
 8006b5c:	08007ca5 	.word	0x08007ca5

08006b60 <__lshift>:
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	460c      	mov	r4, r1
 8006b66:	6849      	ldr	r1, [r1, #4]
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b6e:	68a3      	ldr	r3, [r4, #8]
 8006b70:	4607      	mov	r7, r0
 8006b72:	4691      	mov	r9, r2
 8006b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b78:	f108 0601 	add.w	r6, r8, #1
 8006b7c:	42b3      	cmp	r3, r6
 8006b7e:	db0b      	blt.n	8006b98 <__lshift+0x38>
 8006b80:	4638      	mov	r0, r7
 8006b82:	f7ff fddd 	bl	8006740 <_Balloc>
 8006b86:	4605      	mov	r5, r0
 8006b88:	b948      	cbnz	r0, 8006b9e <__lshift+0x3e>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <__lshift+0xd0>)
 8006b8e:	4829      	ldr	r0, [pc, #164]	; (8006c34 <__lshift+0xd4>)
 8006b90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006b94:	f000 fb8e 	bl	80072b4 <__assert_func>
 8006b98:	3101      	adds	r1, #1
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	e7ee      	b.n	8006b7c <__lshift+0x1c>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f100 0114 	add.w	r1, r0, #20
 8006ba4:	f100 0210 	add.w	r2, r0, #16
 8006ba8:	4618      	mov	r0, r3
 8006baa:	4553      	cmp	r3, sl
 8006bac:	db33      	blt.n	8006c16 <__lshift+0xb6>
 8006bae:	6920      	ldr	r0, [r4, #16]
 8006bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bb4:	f104 0314 	add.w	r3, r4, #20
 8006bb8:	f019 091f 	ands.w	r9, r9, #31
 8006bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bc4:	d02b      	beq.n	8006c1e <__lshift+0xbe>
 8006bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8006bca:	468a      	mov	sl, r1
 8006bcc:	2200      	movs	r2, #0
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	fa00 f009 	lsl.w	r0, r0, r9
 8006bd4:	4310      	orrs	r0, r2
 8006bd6:	f84a 0b04 	str.w	r0, [sl], #4
 8006bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bde:	459c      	cmp	ip, r3
 8006be0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006be4:	d8f3      	bhi.n	8006bce <__lshift+0x6e>
 8006be6:	ebac 0304 	sub.w	r3, ip, r4
 8006bea:	3b15      	subs	r3, #21
 8006bec:	f023 0303 	bic.w	r3, r3, #3
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	f104 0015 	add.w	r0, r4, #21
 8006bf6:	4584      	cmp	ip, r0
 8006bf8:	bf38      	it	cc
 8006bfa:	2304      	movcc	r3, #4
 8006bfc:	50ca      	str	r2, [r1, r3]
 8006bfe:	b10a      	cbz	r2, 8006c04 <__lshift+0xa4>
 8006c00:	f108 0602 	add.w	r6, r8, #2
 8006c04:	3e01      	subs	r6, #1
 8006c06:	4638      	mov	r0, r7
 8006c08:	612e      	str	r6, [r5, #16]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	f7ff fdd8 	bl	80067c0 <_Bfree>
 8006c10:	4628      	mov	r0, r5
 8006c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	e7c5      	b.n	8006baa <__lshift+0x4a>
 8006c1e:	3904      	subs	r1, #4
 8006c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c28:	459c      	cmp	ip, r3
 8006c2a:	d8f9      	bhi.n	8006c20 <__lshift+0xc0>
 8006c2c:	e7ea      	b.n	8006c04 <__lshift+0xa4>
 8006c2e:	bf00      	nop
 8006c30:	08007c94 	.word	0x08007c94
 8006c34:	08007ca5 	.word	0x08007ca5

08006c38 <__mcmp>:
 8006c38:	b530      	push	{r4, r5, lr}
 8006c3a:	6902      	ldr	r2, [r0, #16]
 8006c3c:	690c      	ldr	r4, [r1, #16]
 8006c3e:	1b12      	subs	r2, r2, r4
 8006c40:	d10e      	bne.n	8006c60 <__mcmp+0x28>
 8006c42:	f100 0314 	add.w	r3, r0, #20
 8006c46:	3114      	adds	r1, #20
 8006c48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c58:	42a5      	cmp	r5, r4
 8006c5a:	d003      	beq.n	8006c64 <__mcmp+0x2c>
 8006c5c:	d305      	bcc.n	8006c6a <__mcmp+0x32>
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4610      	mov	r0, r2
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	4283      	cmp	r3, r0
 8006c66:	d3f3      	bcc.n	8006c50 <__mcmp+0x18>
 8006c68:	e7fa      	b.n	8006c60 <__mcmp+0x28>
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6e:	e7f7      	b.n	8006c60 <__mcmp+0x28>

08006c70 <__mdiff>:
 8006c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	4606      	mov	r6, r0
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4690      	mov	r8, r2
 8006c7e:	f7ff ffdb 	bl	8006c38 <__mcmp>
 8006c82:	1e05      	subs	r5, r0, #0
 8006c84:	d110      	bne.n	8006ca8 <__mdiff+0x38>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff fd59 	bl	8006740 <_Balloc>
 8006c8e:	b930      	cbnz	r0, 8006c9e <__mdiff+0x2e>
 8006c90:	4b3a      	ldr	r3, [pc, #232]	; (8006d7c <__mdiff+0x10c>)
 8006c92:	4602      	mov	r2, r0
 8006c94:	f240 2137 	movw	r1, #567	; 0x237
 8006c98:	4839      	ldr	r0, [pc, #228]	; (8006d80 <__mdiff+0x110>)
 8006c9a:	f000 fb0b 	bl	80072b4 <__assert_func>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	bfa4      	itt	ge
 8006caa:	4643      	movge	r3, r8
 8006cac:	46a0      	movge	r8, r4
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cb4:	bfa6      	itte	ge
 8006cb6:	461c      	movge	r4, r3
 8006cb8:	2500      	movge	r5, #0
 8006cba:	2501      	movlt	r5, #1
 8006cbc:	f7ff fd40 	bl	8006740 <_Balloc>
 8006cc0:	b920      	cbnz	r0, 8006ccc <__mdiff+0x5c>
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <__mdiff+0x10c>)
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f240 2145 	movw	r1, #581	; 0x245
 8006cca:	e7e5      	b.n	8006c98 <__mdiff+0x28>
 8006ccc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cd0:	6926      	ldr	r6, [r4, #16]
 8006cd2:	60c5      	str	r5, [r0, #12]
 8006cd4:	f104 0914 	add.w	r9, r4, #20
 8006cd8:	f108 0514 	add.w	r5, r8, #20
 8006cdc:	f100 0e14 	add.w	lr, r0, #20
 8006ce0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ce8:	f108 0210 	add.w	r2, r8, #16
 8006cec:	46f2      	mov	sl, lr
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006cf8:	fa11 f88b 	uxtah	r8, r1, fp
 8006cfc:	b299      	uxth	r1, r3
 8006cfe:	0c1b      	lsrs	r3, r3, #16
 8006d00:	eba8 0801 	sub.w	r8, r8, r1
 8006d04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d08:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d0c:	fa1f f888 	uxth.w	r8, r8
 8006d10:	1419      	asrs	r1, r3, #16
 8006d12:	454e      	cmp	r6, r9
 8006d14:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d18:	f84a 3b04 	str.w	r3, [sl], #4
 8006d1c:	d8e8      	bhi.n	8006cf0 <__mdiff+0x80>
 8006d1e:	1b33      	subs	r3, r6, r4
 8006d20:	3b15      	subs	r3, #21
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	3304      	adds	r3, #4
 8006d28:	3415      	adds	r4, #21
 8006d2a:	42a6      	cmp	r6, r4
 8006d2c:	bf38      	it	cc
 8006d2e:	2304      	movcc	r3, #4
 8006d30:	441d      	add	r5, r3
 8006d32:	4473      	add	r3, lr
 8006d34:	469e      	mov	lr, r3
 8006d36:	462e      	mov	r6, r5
 8006d38:	4566      	cmp	r6, ip
 8006d3a:	d30e      	bcc.n	8006d5a <__mdiff+0xea>
 8006d3c:	f10c 0203 	add.w	r2, ip, #3
 8006d40:	1b52      	subs	r2, r2, r5
 8006d42:	f022 0203 	bic.w	r2, r2, #3
 8006d46:	3d03      	subs	r5, #3
 8006d48:	45ac      	cmp	ip, r5
 8006d4a:	bf38      	it	cc
 8006d4c:	2200      	movcc	r2, #0
 8006d4e:	4413      	add	r3, r2
 8006d50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d54:	b17a      	cbz	r2, 8006d76 <__mdiff+0x106>
 8006d56:	6107      	str	r7, [r0, #16]
 8006d58:	e7a4      	b.n	8006ca4 <__mdiff+0x34>
 8006d5a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d5e:	fa11 f288 	uxtah	r2, r1, r8
 8006d62:	1414      	asrs	r4, r2, #16
 8006d64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d68:	b292      	uxth	r2, r2
 8006d6a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d6e:	f84e 2b04 	str.w	r2, [lr], #4
 8006d72:	1421      	asrs	r1, r4, #16
 8006d74:	e7e0      	b.n	8006d38 <__mdiff+0xc8>
 8006d76:	3f01      	subs	r7, #1
 8006d78:	e7ea      	b.n	8006d50 <__mdiff+0xe0>
 8006d7a:	bf00      	nop
 8006d7c:	08007c94 	.word	0x08007c94
 8006d80:	08007ca5 	.word	0x08007ca5

08006d84 <__d2b>:
 8006d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	460f      	mov	r7, r1
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	ec59 8b10 	vmov	r8, r9, d0
 8006d90:	4616      	mov	r6, r2
 8006d92:	f7ff fcd5 	bl	8006740 <_Balloc>
 8006d96:	4604      	mov	r4, r0
 8006d98:	b930      	cbnz	r0, 8006da8 <__d2b+0x24>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <__d2b+0xac>)
 8006d9e:	4825      	ldr	r0, [pc, #148]	; (8006e34 <__d2b+0xb0>)
 8006da0:	f240 310f 	movw	r1, #783	; 0x30f
 8006da4:	f000 fa86 	bl	80072b4 <__assert_func>
 8006da8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006db0:	bb2d      	cbnz	r5, 8006dfe <__d2b+0x7a>
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f1b8 0300 	subs.w	r3, r8, #0
 8006db8:	d026      	beq.n	8006e08 <__d2b+0x84>
 8006dba:	4668      	mov	r0, sp
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	f7ff fd87 	bl	80068d0 <__lo0bits>
 8006dc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006dc6:	b1e8      	cbz	r0, 8006e04 <__d2b+0x80>
 8006dc8:	f1c0 0320 	rsb	r3, r0, #32
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	40c2      	lsrs	r2, r0
 8006dd4:	6163      	str	r3, [r4, #20]
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	61a3      	str	r3, [r4, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf14      	ite	ne
 8006de0:	2202      	movne	r2, #2
 8006de2:	2201      	moveq	r2, #1
 8006de4:	6122      	str	r2, [r4, #16]
 8006de6:	b1bd      	cbz	r5, 8006e18 <__d2b+0x94>
 8006de8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dec:	4405      	add	r5, r0
 8006dee:	603d      	str	r5, [r7, #0]
 8006df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	4620      	mov	r0, r4
 8006df8:	b003      	add	sp, #12
 8006dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e02:	e7d6      	b.n	8006db2 <__d2b+0x2e>
 8006e04:	6161      	str	r1, [r4, #20]
 8006e06:	e7e7      	b.n	8006dd8 <__d2b+0x54>
 8006e08:	a801      	add	r0, sp, #4
 8006e0a:	f7ff fd61 	bl	80068d0 <__lo0bits>
 8006e0e:	9b01      	ldr	r3, [sp, #4]
 8006e10:	6163      	str	r3, [r4, #20]
 8006e12:	3020      	adds	r0, #32
 8006e14:	2201      	movs	r2, #1
 8006e16:	e7e5      	b.n	8006de4 <__d2b+0x60>
 8006e18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e20:	6038      	str	r0, [r7, #0]
 8006e22:	6918      	ldr	r0, [r3, #16]
 8006e24:	f7ff fd34 	bl	8006890 <__hi0bits>
 8006e28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e2c:	e7e2      	b.n	8006df4 <__d2b+0x70>
 8006e2e:	bf00      	nop
 8006e30:	08007c94 	.word	0x08007c94
 8006e34:	08007ca5 	.word	0x08007ca5

08006e38 <__ssputs_r>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	688e      	ldr	r6, [r1, #8]
 8006e3e:	461f      	mov	r7, r3
 8006e40:	42be      	cmp	r6, r7
 8006e42:	680b      	ldr	r3, [r1, #0]
 8006e44:	4682      	mov	sl, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	4690      	mov	r8, r2
 8006e4a:	d82c      	bhi.n	8006ea6 <__ssputs_r+0x6e>
 8006e4c:	898a      	ldrh	r2, [r1, #12]
 8006e4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e52:	d026      	beq.n	8006ea2 <__ssputs_r+0x6a>
 8006e54:	6965      	ldr	r5, [r4, #20]
 8006e56:	6909      	ldr	r1, [r1, #16]
 8006e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e5c:	eba3 0901 	sub.w	r9, r3, r1
 8006e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e64:	1c7b      	adds	r3, r7, #1
 8006e66:	444b      	add	r3, r9
 8006e68:	106d      	asrs	r5, r5, #1
 8006e6a:	429d      	cmp	r5, r3
 8006e6c:	bf38      	it	cc
 8006e6e:	461d      	movcc	r5, r3
 8006e70:	0553      	lsls	r3, r2, #21
 8006e72:	d527      	bpl.n	8006ec4 <__ssputs_r+0x8c>
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7ff fbd7 	bl	8006628 <_malloc_r>
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	b360      	cbz	r0, 8006ed8 <__ssputs_r+0xa0>
 8006e7e:	6921      	ldr	r1, [r4, #16]
 8006e80:	464a      	mov	r2, r9
 8006e82:	f000 fa09 	bl	8007298 <memcpy>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	6126      	str	r6, [r4, #16]
 8006e94:	6165      	str	r5, [r4, #20]
 8006e96:	444e      	add	r6, r9
 8006e98:	eba5 0509 	sub.w	r5, r5, r9
 8006e9c:	6026      	str	r6, [r4, #0]
 8006e9e:	60a5      	str	r5, [r4, #8]
 8006ea0:	463e      	mov	r6, r7
 8006ea2:	42be      	cmp	r6, r7
 8006ea4:	d900      	bls.n	8006ea8 <__ssputs_r+0x70>
 8006ea6:	463e      	mov	r6, r7
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	4632      	mov	r2, r6
 8006eac:	4641      	mov	r1, r8
 8006eae:	f000 f9c9 	bl	8007244 <memmove>
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	1b9b      	subs	r3, r3, r6
 8006eb6:	60a3      	str	r3, [r4, #8]
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	4433      	add	r3, r6
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	f000 fa3b 	bl	8007340 <_realloc_r>
 8006eca:	4606      	mov	r6, r0
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d1e0      	bne.n	8006e92 <__ssputs_r+0x5a>
 8006ed0:	6921      	ldr	r1, [r4, #16]
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	f7ff fb34 	bl	8006540 <_free_r>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	f8ca 3000 	str.w	r3, [sl]
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eea:	e7e9      	b.n	8006ec0 <__ssputs_r+0x88>

08006eec <_svfiprintf_r>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	4698      	mov	r8, r3
 8006ef2:	898b      	ldrh	r3, [r1, #12]
 8006ef4:	061b      	lsls	r3, r3, #24
 8006ef6:	b09d      	sub	sp, #116	; 0x74
 8006ef8:	4607      	mov	r7, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	4614      	mov	r4, r2
 8006efe:	d50e      	bpl.n	8006f1e <_svfiprintf_r+0x32>
 8006f00:	690b      	ldr	r3, [r1, #16]
 8006f02:	b963      	cbnz	r3, 8006f1e <_svfiprintf_r+0x32>
 8006f04:	2140      	movs	r1, #64	; 0x40
 8006f06:	f7ff fb8f 	bl	8006628 <_malloc_r>
 8006f0a:	6028      	str	r0, [r5, #0]
 8006f0c:	6128      	str	r0, [r5, #16]
 8006f0e:	b920      	cbnz	r0, 8006f1a <_svfiprintf_r+0x2e>
 8006f10:	230c      	movs	r3, #12
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	e0d0      	b.n	80070bc <_svfiprintf_r+0x1d0>
 8006f1a:	2340      	movs	r3, #64	; 0x40
 8006f1c:	616b      	str	r3, [r5, #20]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9309      	str	r3, [sp, #36]	; 0x24
 8006f22:	2320      	movs	r3, #32
 8006f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2c:	2330      	movs	r3, #48	; 0x30
 8006f2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070d4 <_svfiprintf_r+0x1e8>
 8006f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f36:	f04f 0901 	mov.w	r9, #1
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	469a      	mov	sl, r3
 8006f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f42:	b10a      	cbz	r2, 8006f48 <_svfiprintf_r+0x5c>
 8006f44:	2a25      	cmp	r2, #37	; 0x25
 8006f46:	d1f9      	bne.n	8006f3c <_svfiprintf_r+0x50>
 8006f48:	ebba 0b04 	subs.w	fp, sl, r4
 8006f4c:	d00b      	beq.n	8006f66 <_svfiprintf_r+0x7a>
 8006f4e:	465b      	mov	r3, fp
 8006f50:	4622      	mov	r2, r4
 8006f52:	4629      	mov	r1, r5
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff ff6f 	bl	8006e38 <__ssputs_r>
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f000 80a9 	beq.w	80070b2 <_svfiprintf_r+0x1c6>
 8006f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f62:	445a      	add	r2, fp
 8006f64:	9209      	str	r2, [sp, #36]	; 0x24
 8006f66:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80a1 	beq.w	80070b2 <_svfiprintf_r+0x1c6>
 8006f70:	2300      	movs	r3, #0
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f7a:	f10a 0a01 	add.w	sl, sl, #1
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	9307      	str	r3, [sp, #28]
 8006f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f86:	931a      	str	r3, [sp, #104]	; 0x68
 8006f88:	4654      	mov	r4, sl
 8006f8a:	2205      	movs	r2, #5
 8006f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f90:	4850      	ldr	r0, [pc, #320]	; (80070d4 <_svfiprintf_r+0x1e8>)
 8006f92:	f7f9 f955 	bl	8000240 <memchr>
 8006f96:	9a04      	ldr	r2, [sp, #16]
 8006f98:	b9d8      	cbnz	r0, 8006fd2 <_svfiprintf_r+0xe6>
 8006f9a:	06d0      	lsls	r0, r2, #27
 8006f9c:	bf44      	itt	mi
 8006f9e:	2320      	movmi	r3, #32
 8006fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa4:	0711      	lsls	r1, r2, #28
 8006fa6:	bf44      	itt	mi
 8006fa8:	232b      	movmi	r3, #43	; 0x2b
 8006faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fae:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb4:	d015      	beq.n	8006fe2 <_svfiprintf_r+0xf6>
 8006fb6:	9a07      	ldr	r2, [sp, #28]
 8006fb8:	4654      	mov	r4, sl
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f04f 0c0a 	mov.w	ip, #10
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc6:	3b30      	subs	r3, #48	; 0x30
 8006fc8:	2b09      	cmp	r3, #9
 8006fca:	d94d      	bls.n	8007068 <_svfiprintf_r+0x17c>
 8006fcc:	b1b0      	cbz	r0, 8006ffc <_svfiprintf_r+0x110>
 8006fce:	9207      	str	r2, [sp, #28]
 8006fd0:	e014      	b.n	8006ffc <_svfiprintf_r+0x110>
 8006fd2:	eba0 0308 	sub.w	r3, r0, r8
 8006fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	46a2      	mov	sl, r4
 8006fe0:	e7d2      	b.n	8006f88 <_svfiprintf_r+0x9c>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	1d19      	adds	r1, r3, #4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	9103      	str	r1, [sp, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bfbb      	ittet	lt
 8006fee:	425b      	neglt	r3, r3
 8006ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff4:	9307      	strge	r3, [sp, #28]
 8006ff6:	9307      	strlt	r3, [sp, #28]
 8006ff8:	bfb8      	it	lt
 8006ffa:	9204      	strlt	r2, [sp, #16]
 8006ffc:	7823      	ldrb	r3, [r4, #0]
 8006ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8007000:	d10c      	bne.n	800701c <_svfiprintf_r+0x130>
 8007002:	7863      	ldrb	r3, [r4, #1]
 8007004:	2b2a      	cmp	r3, #42	; 0x2a
 8007006:	d134      	bne.n	8007072 <_svfiprintf_r+0x186>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	1d1a      	adds	r2, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	9203      	str	r2, [sp, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfb8      	it	lt
 8007014:	f04f 33ff 	movlt.w	r3, #4294967295
 8007018:	3402      	adds	r4, #2
 800701a:	9305      	str	r3, [sp, #20]
 800701c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80070e4 <_svfiprintf_r+0x1f8>
 8007020:	7821      	ldrb	r1, [r4, #0]
 8007022:	2203      	movs	r2, #3
 8007024:	4650      	mov	r0, sl
 8007026:	f7f9 f90b 	bl	8000240 <memchr>
 800702a:	b138      	cbz	r0, 800703c <_svfiprintf_r+0x150>
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	eba0 000a 	sub.w	r0, r0, sl
 8007032:	2240      	movs	r2, #64	; 0x40
 8007034:	4082      	lsls	r2, r0
 8007036:	4313      	orrs	r3, r2
 8007038:	3401      	adds	r4, #1
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007040:	4825      	ldr	r0, [pc, #148]	; (80070d8 <_svfiprintf_r+0x1ec>)
 8007042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007046:	2206      	movs	r2, #6
 8007048:	f7f9 f8fa 	bl	8000240 <memchr>
 800704c:	2800      	cmp	r0, #0
 800704e:	d038      	beq.n	80070c2 <_svfiprintf_r+0x1d6>
 8007050:	4b22      	ldr	r3, [pc, #136]	; (80070dc <_svfiprintf_r+0x1f0>)
 8007052:	bb1b      	cbnz	r3, 800709c <_svfiprintf_r+0x1b0>
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	3307      	adds	r3, #7
 8007058:	f023 0307 	bic.w	r3, r3, #7
 800705c:	3308      	adds	r3, #8
 800705e:	9303      	str	r3, [sp, #12]
 8007060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007062:	4433      	add	r3, r6
 8007064:	9309      	str	r3, [sp, #36]	; 0x24
 8007066:	e768      	b.n	8006f3a <_svfiprintf_r+0x4e>
 8007068:	fb0c 3202 	mla	r2, ip, r2, r3
 800706c:	460c      	mov	r4, r1
 800706e:	2001      	movs	r0, #1
 8007070:	e7a6      	b.n	8006fc0 <_svfiprintf_r+0xd4>
 8007072:	2300      	movs	r3, #0
 8007074:	3401      	adds	r4, #1
 8007076:	9305      	str	r3, [sp, #20]
 8007078:	4619      	mov	r1, r3
 800707a:	f04f 0c0a 	mov.w	ip, #10
 800707e:	4620      	mov	r0, r4
 8007080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007084:	3a30      	subs	r2, #48	; 0x30
 8007086:	2a09      	cmp	r2, #9
 8007088:	d903      	bls.n	8007092 <_svfiprintf_r+0x1a6>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0c6      	beq.n	800701c <_svfiprintf_r+0x130>
 800708e:	9105      	str	r1, [sp, #20]
 8007090:	e7c4      	b.n	800701c <_svfiprintf_r+0x130>
 8007092:	fb0c 2101 	mla	r1, ip, r1, r2
 8007096:	4604      	mov	r4, r0
 8007098:	2301      	movs	r3, #1
 800709a:	e7f0      	b.n	800707e <_svfiprintf_r+0x192>
 800709c:	ab03      	add	r3, sp, #12
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	462a      	mov	r2, r5
 80070a2:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <_svfiprintf_r+0x1f4>)
 80070a4:	a904      	add	r1, sp, #16
 80070a6:	4638      	mov	r0, r7
 80070a8:	f7fd ff06 	bl	8004eb8 <_printf_float>
 80070ac:	1c42      	adds	r2, r0, #1
 80070ae:	4606      	mov	r6, r0
 80070b0:	d1d6      	bne.n	8007060 <_svfiprintf_r+0x174>
 80070b2:	89ab      	ldrh	r3, [r5, #12]
 80070b4:	065b      	lsls	r3, r3, #25
 80070b6:	f53f af2d 	bmi.w	8006f14 <_svfiprintf_r+0x28>
 80070ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070bc:	b01d      	add	sp, #116	; 0x74
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	ab03      	add	r3, sp, #12
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	462a      	mov	r2, r5
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <_svfiprintf_r+0x1f4>)
 80070ca:	a904      	add	r1, sp, #16
 80070cc:	4638      	mov	r0, r7
 80070ce:	f7fe f97b 	bl	80053c8 <_printf_i>
 80070d2:	e7eb      	b.n	80070ac <_svfiprintf_r+0x1c0>
 80070d4:	08007dfc 	.word	0x08007dfc
 80070d8:	08007e06 	.word	0x08007e06
 80070dc:	08004eb9 	.word	0x08004eb9
 80070e0:	08006e39 	.word	0x08006e39
 80070e4:	08007e02 	.word	0x08007e02

080070e8 <__sflush_r>:
 80070e8:	898a      	ldrh	r2, [r1, #12]
 80070ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ee:	4605      	mov	r5, r0
 80070f0:	0710      	lsls	r0, r2, #28
 80070f2:	460c      	mov	r4, r1
 80070f4:	d458      	bmi.n	80071a8 <__sflush_r+0xc0>
 80070f6:	684b      	ldr	r3, [r1, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	dc05      	bgt.n	8007108 <__sflush_r+0x20>
 80070fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dc02      	bgt.n	8007108 <__sflush_r+0x20>
 8007102:	2000      	movs	r0, #0
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800710a:	2e00      	cmp	r6, #0
 800710c:	d0f9      	beq.n	8007102 <__sflush_r+0x1a>
 800710e:	2300      	movs	r3, #0
 8007110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007114:	682f      	ldr	r7, [r5, #0]
 8007116:	6a21      	ldr	r1, [r4, #32]
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	d032      	beq.n	8007182 <__sflush_r+0x9a>
 800711c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	075a      	lsls	r2, r3, #29
 8007122:	d505      	bpl.n	8007130 <__sflush_r+0x48>
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	1ac0      	subs	r0, r0, r3
 8007128:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800712a:	b10b      	cbz	r3, 8007130 <__sflush_r+0x48>
 800712c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800712e:	1ac0      	subs	r0, r0, r3
 8007130:	2300      	movs	r3, #0
 8007132:	4602      	mov	r2, r0
 8007134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	4628      	mov	r0, r5
 800713a:	47b0      	blx	r6
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	d106      	bne.n	8007150 <__sflush_r+0x68>
 8007142:	6829      	ldr	r1, [r5, #0]
 8007144:	291d      	cmp	r1, #29
 8007146:	d82b      	bhi.n	80071a0 <__sflush_r+0xb8>
 8007148:	4a29      	ldr	r2, [pc, #164]	; (80071f0 <__sflush_r+0x108>)
 800714a:	410a      	asrs	r2, r1
 800714c:	07d6      	lsls	r6, r2, #31
 800714e:	d427      	bmi.n	80071a0 <__sflush_r+0xb8>
 8007150:	2200      	movs	r2, #0
 8007152:	6062      	str	r2, [r4, #4]
 8007154:	04d9      	lsls	r1, r3, #19
 8007156:	6922      	ldr	r2, [r4, #16]
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	d504      	bpl.n	8007166 <__sflush_r+0x7e>
 800715c:	1c42      	adds	r2, r0, #1
 800715e:	d101      	bne.n	8007164 <__sflush_r+0x7c>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b903      	cbnz	r3, 8007166 <__sflush_r+0x7e>
 8007164:	6560      	str	r0, [r4, #84]	; 0x54
 8007166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007168:	602f      	str	r7, [r5, #0]
 800716a:	2900      	cmp	r1, #0
 800716c:	d0c9      	beq.n	8007102 <__sflush_r+0x1a>
 800716e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007172:	4299      	cmp	r1, r3
 8007174:	d002      	beq.n	800717c <__sflush_r+0x94>
 8007176:	4628      	mov	r0, r5
 8007178:	f7ff f9e2 	bl	8006540 <_free_r>
 800717c:	2000      	movs	r0, #0
 800717e:	6360      	str	r0, [r4, #52]	; 0x34
 8007180:	e7c0      	b.n	8007104 <__sflush_r+0x1c>
 8007182:	2301      	movs	r3, #1
 8007184:	4628      	mov	r0, r5
 8007186:	47b0      	blx	r6
 8007188:	1c41      	adds	r1, r0, #1
 800718a:	d1c8      	bne.n	800711e <__sflush_r+0x36>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c5      	beq.n	800711e <__sflush_r+0x36>
 8007192:	2b1d      	cmp	r3, #29
 8007194:	d001      	beq.n	800719a <__sflush_r+0xb2>
 8007196:	2b16      	cmp	r3, #22
 8007198:	d101      	bne.n	800719e <__sflush_r+0xb6>
 800719a:	602f      	str	r7, [r5, #0]
 800719c:	e7b1      	b.n	8007102 <__sflush_r+0x1a>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	e7ad      	b.n	8007104 <__sflush_r+0x1c>
 80071a8:	690f      	ldr	r7, [r1, #16]
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d0a9      	beq.n	8007102 <__sflush_r+0x1a>
 80071ae:	0793      	lsls	r3, r2, #30
 80071b0:	680e      	ldr	r6, [r1, #0]
 80071b2:	bf08      	it	eq
 80071b4:	694b      	ldreq	r3, [r1, #20]
 80071b6:	600f      	str	r7, [r1, #0]
 80071b8:	bf18      	it	ne
 80071ba:	2300      	movne	r3, #0
 80071bc:	eba6 0807 	sub.w	r8, r6, r7
 80071c0:	608b      	str	r3, [r1, #8]
 80071c2:	f1b8 0f00 	cmp.w	r8, #0
 80071c6:	dd9c      	ble.n	8007102 <__sflush_r+0x1a>
 80071c8:	6a21      	ldr	r1, [r4, #32]
 80071ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071cc:	4643      	mov	r3, r8
 80071ce:	463a      	mov	r2, r7
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b0      	blx	r6
 80071d4:	2800      	cmp	r0, #0
 80071d6:	dc06      	bgt.n	80071e6 <__sflush_r+0xfe>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	e78e      	b.n	8007104 <__sflush_r+0x1c>
 80071e6:	4407      	add	r7, r0
 80071e8:	eba8 0800 	sub.w	r8, r8, r0
 80071ec:	e7e9      	b.n	80071c2 <__sflush_r+0xda>
 80071ee:	bf00      	nop
 80071f0:	dfbffffe 	.word	0xdfbffffe

080071f4 <_fflush_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	690b      	ldr	r3, [r1, #16]
 80071f8:	4605      	mov	r5, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	b913      	cbnz	r3, 8007204 <_fflush_r+0x10>
 80071fe:	2500      	movs	r5, #0
 8007200:	4628      	mov	r0, r5
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	b118      	cbz	r0, 800720e <_fflush_r+0x1a>
 8007206:	6a03      	ldr	r3, [r0, #32]
 8007208:	b90b      	cbnz	r3, 800720e <_fflush_r+0x1a>
 800720a:	f7fe fa8b 	bl	8005724 <__sinit>
 800720e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f3      	beq.n	80071fe <_fflush_r+0xa>
 8007216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007218:	07d0      	lsls	r0, r2, #31
 800721a:	d404      	bmi.n	8007226 <_fflush_r+0x32>
 800721c:	0599      	lsls	r1, r3, #22
 800721e:	d402      	bmi.n	8007226 <_fflush_r+0x32>
 8007220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007222:	f7fe fb96 	bl	8005952 <__retarget_lock_acquire_recursive>
 8007226:	4628      	mov	r0, r5
 8007228:	4621      	mov	r1, r4
 800722a:	f7ff ff5d 	bl	80070e8 <__sflush_r>
 800722e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007230:	07da      	lsls	r2, r3, #31
 8007232:	4605      	mov	r5, r0
 8007234:	d4e4      	bmi.n	8007200 <_fflush_r+0xc>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	059b      	lsls	r3, r3, #22
 800723a:	d4e1      	bmi.n	8007200 <_fflush_r+0xc>
 800723c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800723e:	f7fe fb89 	bl	8005954 <__retarget_lock_release_recursive>
 8007242:	e7dd      	b.n	8007200 <_fflush_r+0xc>

08007244 <memmove>:
 8007244:	4288      	cmp	r0, r1
 8007246:	b510      	push	{r4, lr}
 8007248:	eb01 0402 	add.w	r4, r1, r2
 800724c:	d902      	bls.n	8007254 <memmove+0x10>
 800724e:	4284      	cmp	r4, r0
 8007250:	4623      	mov	r3, r4
 8007252:	d807      	bhi.n	8007264 <memmove+0x20>
 8007254:	1e43      	subs	r3, r0, #1
 8007256:	42a1      	cmp	r1, r4
 8007258:	d008      	beq.n	800726c <memmove+0x28>
 800725a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800725e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007262:	e7f8      	b.n	8007256 <memmove+0x12>
 8007264:	4402      	add	r2, r0
 8007266:	4601      	mov	r1, r0
 8007268:	428a      	cmp	r2, r1
 800726a:	d100      	bne.n	800726e <memmove+0x2a>
 800726c:	bd10      	pop	{r4, pc}
 800726e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007276:	e7f7      	b.n	8007268 <memmove+0x24>

08007278 <_sbrk_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	; (8007294 <_sbrk_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7f9 fdf6 	bl	8000e74 <_sbrk>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_sbrk_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_sbrk_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	2000047c 	.word	0x2000047c

08007298 <memcpy>:
 8007298:	440a      	add	r2, r1
 800729a:	4291      	cmp	r1, r2
 800729c:	f100 33ff 	add.w	r3, r0, #4294967295
 80072a0:	d100      	bne.n	80072a4 <memcpy+0xc>
 80072a2:	4770      	bx	lr
 80072a4:	b510      	push	{r4, lr}
 80072a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ae:	4291      	cmp	r1, r2
 80072b0:	d1f9      	bne.n	80072a6 <memcpy+0xe>
 80072b2:	bd10      	pop	{r4, pc}

080072b4 <__assert_func>:
 80072b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072b6:	4614      	mov	r4, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <__assert_func+0x2c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4605      	mov	r5, r0
 80072c0:	68d8      	ldr	r0, [r3, #12]
 80072c2:	b14c      	cbz	r4, 80072d8 <__assert_func+0x24>
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <__assert_func+0x30>)
 80072c6:	9100      	str	r1, [sp, #0]
 80072c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072cc:	4906      	ldr	r1, [pc, #24]	; (80072e8 <__assert_func+0x34>)
 80072ce:	462b      	mov	r3, r5
 80072d0:	f000 f872 	bl	80073b8 <fiprintf>
 80072d4:	f000 f882 	bl	80073dc <abort>
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <__assert_func+0x38>)
 80072da:	461c      	mov	r4, r3
 80072dc:	e7f3      	b.n	80072c6 <__assert_func+0x12>
 80072de:	bf00      	nop
 80072e0:	20000068 	.word	0x20000068
 80072e4:	08007e17 	.word	0x08007e17
 80072e8:	08007e24 	.word	0x08007e24
 80072ec:	08007e52 	.word	0x08007e52

080072f0 <_calloc_r>:
 80072f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072f2:	fba1 2402 	umull	r2, r4, r1, r2
 80072f6:	b94c      	cbnz	r4, 800730c <_calloc_r+0x1c>
 80072f8:	4611      	mov	r1, r2
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	f7ff f994 	bl	8006628 <_malloc_r>
 8007300:	9a01      	ldr	r2, [sp, #4]
 8007302:	4605      	mov	r5, r0
 8007304:	b930      	cbnz	r0, 8007314 <_calloc_r+0x24>
 8007306:	4628      	mov	r0, r5
 8007308:	b003      	add	sp, #12
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	220c      	movs	r2, #12
 800730e:	6002      	str	r2, [r0, #0]
 8007310:	2500      	movs	r5, #0
 8007312:	e7f8      	b.n	8007306 <_calloc_r+0x16>
 8007314:	4621      	mov	r1, r4
 8007316:	f7fe fa9e 	bl	8005856 <memset>
 800731a:	e7f4      	b.n	8007306 <_calloc_r+0x16>

0800731c <__ascii_mbtowc>:
 800731c:	b082      	sub	sp, #8
 800731e:	b901      	cbnz	r1, 8007322 <__ascii_mbtowc+0x6>
 8007320:	a901      	add	r1, sp, #4
 8007322:	b142      	cbz	r2, 8007336 <__ascii_mbtowc+0x1a>
 8007324:	b14b      	cbz	r3, 800733a <__ascii_mbtowc+0x1e>
 8007326:	7813      	ldrb	r3, [r2, #0]
 8007328:	600b      	str	r3, [r1, #0]
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	1e10      	subs	r0, r2, #0
 800732e:	bf18      	it	ne
 8007330:	2001      	movne	r0, #1
 8007332:	b002      	add	sp, #8
 8007334:	4770      	bx	lr
 8007336:	4610      	mov	r0, r2
 8007338:	e7fb      	b.n	8007332 <__ascii_mbtowc+0x16>
 800733a:	f06f 0001 	mvn.w	r0, #1
 800733e:	e7f8      	b.n	8007332 <__ascii_mbtowc+0x16>

08007340 <_realloc_r>:
 8007340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007344:	4680      	mov	r8, r0
 8007346:	4614      	mov	r4, r2
 8007348:	460e      	mov	r6, r1
 800734a:	b921      	cbnz	r1, 8007356 <_realloc_r+0x16>
 800734c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007350:	4611      	mov	r1, r2
 8007352:	f7ff b969 	b.w	8006628 <_malloc_r>
 8007356:	b92a      	cbnz	r2, 8007364 <_realloc_r+0x24>
 8007358:	f7ff f8f2 	bl	8006540 <_free_r>
 800735c:	4625      	mov	r5, r4
 800735e:	4628      	mov	r0, r5
 8007360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007364:	f000 f841 	bl	80073ea <_malloc_usable_size_r>
 8007368:	4284      	cmp	r4, r0
 800736a:	4607      	mov	r7, r0
 800736c:	d802      	bhi.n	8007374 <_realloc_r+0x34>
 800736e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007372:	d812      	bhi.n	800739a <_realloc_r+0x5a>
 8007374:	4621      	mov	r1, r4
 8007376:	4640      	mov	r0, r8
 8007378:	f7ff f956 	bl	8006628 <_malloc_r>
 800737c:	4605      	mov	r5, r0
 800737e:	2800      	cmp	r0, #0
 8007380:	d0ed      	beq.n	800735e <_realloc_r+0x1e>
 8007382:	42bc      	cmp	r4, r7
 8007384:	4622      	mov	r2, r4
 8007386:	4631      	mov	r1, r6
 8007388:	bf28      	it	cs
 800738a:	463a      	movcs	r2, r7
 800738c:	f7ff ff84 	bl	8007298 <memcpy>
 8007390:	4631      	mov	r1, r6
 8007392:	4640      	mov	r0, r8
 8007394:	f7ff f8d4 	bl	8006540 <_free_r>
 8007398:	e7e1      	b.n	800735e <_realloc_r+0x1e>
 800739a:	4635      	mov	r5, r6
 800739c:	e7df      	b.n	800735e <_realloc_r+0x1e>

0800739e <__ascii_wctomb>:
 800739e:	b149      	cbz	r1, 80073b4 <__ascii_wctomb+0x16>
 80073a0:	2aff      	cmp	r2, #255	; 0xff
 80073a2:	bf85      	ittet	hi
 80073a4:	238a      	movhi	r3, #138	; 0x8a
 80073a6:	6003      	strhi	r3, [r0, #0]
 80073a8:	700a      	strbls	r2, [r1, #0]
 80073aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80073ae:	bf98      	it	ls
 80073b0:	2001      	movls	r0, #1
 80073b2:	4770      	bx	lr
 80073b4:	4608      	mov	r0, r1
 80073b6:	4770      	bx	lr

080073b8 <fiprintf>:
 80073b8:	b40e      	push	{r1, r2, r3}
 80073ba:	b503      	push	{r0, r1, lr}
 80073bc:	4601      	mov	r1, r0
 80073be:	ab03      	add	r3, sp, #12
 80073c0:	4805      	ldr	r0, [pc, #20]	; (80073d8 <fiprintf+0x20>)
 80073c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c6:	6800      	ldr	r0, [r0, #0]
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f000 f83f 	bl	800744c <_vfiprintf_r>
 80073ce:	b002      	add	sp, #8
 80073d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d4:	b003      	add	sp, #12
 80073d6:	4770      	bx	lr
 80073d8:	20000068 	.word	0x20000068

080073dc <abort>:
 80073dc:	b508      	push	{r3, lr}
 80073de:	2006      	movs	r0, #6
 80073e0:	f000 fa0c 	bl	80077fc <raise>
 80073e4:	2001      	movs	r0, #1
 80073e6:	f7f9 fccd 	bl	8000d84 <_exit>

080073ea <_malloc_usable_size_r>:
 80073ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ee:	1f18      	subs	r0, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbc      	itt	lt
 80073f4:	580b      	ldrlt	r3, [r1, r0]
 80073f6:	18c0      	addlt	r0, r0, r3
 80073f8:	4770      	bx	lr

080073fa <__sfputc_r>:
 80073fa:	6893      	ldr	r3, [r2, #8]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	b410      	push	{r4}
 8007402:	6093      	str	r3, [r2, #8]
 8007404:	da08      	bge.n	8007418 <__sfputc_r+0x1e>
 8007406:	6994      	ldr	r4, [r2, #24]
 8007408:	42a3      	cmp	r3, r4
 800740a:	db01      	blt.n	8007410 <__sfputc_r+0x16>
 800740c:	290a      	cmp	r1, #10
 800740e:	d103      	bne.n	8007418 <__sfputc_r+0x1e>
 8007410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007414:	f000 b934 	b.w	8007680 <__swbuf_r>
 8007418:	6813      	ldr	r3, [r2, #0]
 800741a:	1c58      	adds	r0, r3, #1
 800741c:	6010      	str	r0, [r2, #0]
 800741e:	7019      	strb	r1, [r3, #0]
 8007420:	4608      	mov	r0, r1
 8007422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007426:	4770      	bx	lr

08007428 <__sfputs_r>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	4606      	mov	r6, r0
 800742c:	460f      	mov	r7, r1
 800742e:	4614      	mov	r4, r2
 8007430:	18d5      	adds	r5, r2, r3
 8007432:	42ac      	cmp	r4, r5
 8007434:	d101      	bne.n	800743a <__sfputs_r+0x12>
 8007436:	2000      	movs	r0, #0
 8007438:	e007      	b.n	800744a <__sfputs_r+0x22>
 800743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743e:	463a      	mov	r2, r7
 8007440:	4630      	mov	r0, r6
 8007442:	f7ff ffda 	bl	80073fa <__sfputc_r>
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	d1f3      	bne.n	8007432 <__sfputs_r+0xa>
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800744c <_vfiprintf_r>:
 800744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	460d      	mov	r5, r1
 8007452:	b09d      	sub	sp, #116	; 0x74
 8007454:	4614      	mov	r4, r2
 8007456:	4698      	mov	r8, r3
 8007458:	4606      	mov	r6, r0
 800745a:	b118      	cbz	r0, 8007464 <_vfiprintf_r+0x18>
 800745c:	6a03      	ldr	r3, [r0, #32]
 800745e:	b90b      	cbnz	r3, 8007464 <_vfiprintf_r+0x18>
 8007460:	f7fe f960 	bl	8005724 <__sinit>
 8007464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007466:	07d9      	lsls	r1, r3, #31
 8007468:	d405      	bmi.n	8007476 <_vfiprintf_r+0x2a>
 800746a:	89ab      	ldrh	r3, [r5, #12]
 800746c:	059a      	lsls	r2, r3, #22
 800746e:	d402      	bmi.n	8007476 <_vfiprintf_r+0x2a>
 8007470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007472:	f7fe fa6e 	bl	8005952 <__retarget_lock_acquire_recursive>
 8007476:	89ab      	ldrh	r3, [r5, #12]
 8007478:	071b      	lsls	r3, r3, #28
 800747a:	d501      	bpl.n	8007480 <_vfiprintf_r+0x34>
 800747c:	692b      	ldr	r3, [r5, #16]
 800747e:	b99b      	cbnz	r3, 80074a8 <_vfiprintf_r+0x5c>
 8007480:	4629      	mov	r1, r5
 8007482:	4630      	mov	r0, r6
 8007484:	f000 f93a 	bl	80076fc <__swsetup_r>
 8007488:	b170      	cbz	r0, 80074a8 <_vfiprintf_r+0x5c>
 800748a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800748c:	07dc      	lsls	r4, r3, #31
 800748e:	d504      	bpl.n	800749a <_vfiprintf_r+0x4e>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	b01d      	add	sp, #116	; 0x74
 8007496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749a:	89ab      	ldrh	r3, [r5, #12]
 800749c:	0598      	lsls	r0, r3, #22
 800749e:	d4f7      	bmi.n	8007490 <_vfiprintf_r+0x44>
 80074a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a2:	f7fe fa57 	bl	8005954 <__retarget_lock_release_recursive>
 80074a6:	e7f3      	b.n	8007490 <_vfiprintf_r+0x44>
 80074a8:	2300      	movs	r3, #0
 80074aa:	9309      	str	r3, [sp, #36]	; 0x24
 80074ac:	2320      	movs	r3, #32
 80074ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b6:	2330      	movs	r3, #48	; 0x30
 80074b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800766c <_vfiprintf_r+0x220>
 80074bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c0:	f04f 0901 	mov.w	r9, #1
 80074c4:	4623      	mov	r3, r4
 80074c6:	469a      	mov	sl, r3
 80074c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074cc:	b10a      	cbz	r2, 80074d2 <_vfiprintf_r+0x86>
 80074ce:	2a25      	cmp	r2, #37	; 0x25
 80074d0:	d1f9      	bne.n	80074c6 <_vfiprintf_r+0x7a>
 80074d2:	ebba 0b04 	subs.w	fp, sl, r4
 80074d6:	d00b      	beq.n	80074f0 <_vfiprintf_r+0xa4>
 80074d8:	465b      	mov	r3, fp
 80074da:	4622      	mov	r2, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ffa2 	bl	8007428 <__sfputs_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	f000 80a9 	beq.w	800763c <_vfiprintf_r+0x1f0>
 80074ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ec:	445a      	add	r2, fp
 80074ee:	9209      	str	r2, [sp, #36]	; 0x24
 80074f0:	f89a 3000 	ldrb.w	r3, [sl]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80a1 	beq.w	800763c <_vfiprintf_r+0x1f0>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007504:	f10a 0a01 	add.w	sl, sl, #1
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	9307      	str	r3, [sp, #28]
 800750c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007510:	931a      	str	r3, [sp, #104]	; 0x68
 8007512:	4654      	mov	r4, sl
 8007514:	2205      	movs	r2, #5
 8007516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751a:	4854      	ldr	r0, [pc, #336]	; (800766c <_vfiprintf_r+0x220>)
 800751c:	f7f8 fe90 	bl	8000240 <memchr>
 8007520:	9a04      	ldr	r2, [sp, #16]
 8007522:	b9d8      	cbnz	r0, 800755c <_vfiprintf_r+0x110>
 8007524:	06d1      	lsls	r1, r2, #27
 8007526:	bf44      	itt	mi
 8007528:	2320      	movmi	r3, #32
 800752a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752e:	0713      	lsls	r3, r2, #28
 8007530:	bf44      	itt	mi
 8007532:	232b      	movmi	r3, #43	; 0x2b
 8007534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007538:	f89a 3000 	ldrb.w	r3, [sl]
 800753c:	2b2a      	cmp	r3, #42	; 0x2a
 800753e:	d015      	beq.n	800756c <_vfiprintf_r+0x120>
 8007540:	9a07      	ldr	r2, [sp, #28]
 8007542:	4654      	mov	r4, sl
 8007544:	2000      	movs	r0, #0
 8007546:	f04f 0c0a 	mov.w	ip, #10
 800754a:	4621      	mov	r1, r4
 800754c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007550:	3b30      	subs	r3, #48	; 0x30
 8007552:	2b09      	cmp	r3, #9
 8007554:	d94d      	bls.n	80075f2 <_vfiprintf_r+0x1a6>
 8007556:	b1b0      	cbz	r0, 8007586 <_vfiprintf_r+0x13a>
 8007558:	9207      	str	r2, [sp, #28]
 800755a:	e014      	b.n	8007586 <_vfiprintf_r+0x13a>
 800755c:	eba0 0308 	sub.w	r3, r0, r8
 8007560:	fa09 f303 	lsl.w	r3, r9, r3
 8007564:	4313      	orrs	r3, r2
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	46a2      	mov	sl, r4
 800756a:	e7d2      	b.n	8007512 <_vfiprintf_r+0xc6>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	1d19      	adds	r1, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	9103      	str	r1, [sp, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	bfbb      	ittet	lt
 8007578:	425b      	neglt	r3, r3
 800757a:	f042 0202 	orrlt.w	r2, r2, #2
 800757e:	9307      	strge	r3, [sp, #28]
 8007580:	9307      	strlt	r3, [sp, #28]
 8007582:	bfb8      	it	lt
 8007584:	9204      	strlt	r2, [sp, #16]
 8007586:	7823      	ldrb	r3, [r4, #0]
 8007588:	2b2e      	cmp	r3, #46	; 0x2e
 800758a:	d10c      	bne.n	80075a6 <_vfiprintf_r+0x15a>
 800758c:	7863      	ldrb	r3, [r4, #1]
 800758e:	2b2a      	cmp	r3, #42	; 0x2a
 8007590:	d134      	bne.n	80075fc <_vfiprintf_r+0x1b0>
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	1d1a      	adds	r2, r3, #4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	9203      	str	r2, [sp, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	bfb8      	it	lt
 800759e:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a2:	3402      	adds	r4, #2
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800767c <_vfiprintf_r+0x230>
 80075aa:	7821      	ldrb	r1, [r4, #0]
 80075ac:	2203      	movs	r2, #3
 80075ae:	4650      	mov	r0, sl
 80075b0:	f7f8 fe46 	bl	8000240 <memchr>
 80075b4:	b138      	cbz	r0, 80075c6 <_vfiprintf_r+0x17a>
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	eba0 000a 	sub.w	r0, r0, sl
 80075bc:	2240      	movs	r2, #64	; 0x40
 80075be:	4082      	lsls	r2, r0
 80075c0:	4313      	orrs	r3, r2
 80075c2:	3401      	adds	r4, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ca:	4829      	ldr	r0, [pc, #164]	; (8007670 <_vfiprintf_r+0x224>)
 80075cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075d0:	2206      	movs	r2, #6
 80075d2:	f7f8 fe35 	bl	8000240 <memchr>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d03f      	beq.n	800765a <_vfiprintf_r+0x20e>
 80075da:	4b26      	ldr	r3, [pc, #152]	; (8007674 <_vfiprintf_r+0x228>)
 80075dc:	bb1b      	cbnz	r3, 8007626 <_vfiprintf_r+0x1da>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	3307      	adds	r3, #7
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	3308      	adds	r3, #8
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ec:	443b      	add	r3, r7
 80075ee:	9309      	str	r3, [sp, #36]	; 0x24
 80075f0:	e768      	b.n	80074c4 <_vfiprintf_r+0x78>
 80075f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f6:	460c      	mov	r4, r1
 80075f8:	2001      	movs	r0, #1
 80075fa:	e7a6      	b.n	800754a <_vfiprintf_r+0xfe>
 80075fc:	2300      	movs	r3, #0
 80075fe:	3401      	adds	r4, #1
 8007600:	9305      	str	r3, [sp, #20]
 8007602:	4619      	mov	r1, r3
 8007604:	f04f 0c0a 	mov.w	ip, #10
 8007608:	4620      	mov	r0, r4
 800760a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800760e:	3a30      	subs	r2, #48	; 0x30
 8007610:	2a09      	cmp	r2, #9
 8007612:	d903      	bls.n	800761c <_vfiprintf_r+0x1d0>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0c6      	beq.n	80075a6 <_vfiprintf_r+0x15a>
 8007618:	9105      	str	r1, [sp, #20]
 800761a:	e7c4      	b.n	80075a6 <_vfiprintf_r+0x15a>
 800761c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007620:	4604      	mov	r4, r0
 8007622:	2301      	movs	r3, #1
 8007624:	e7f0      	b.n	8007608 <_vfiprintf_r+0x1bc>
 8007626:	ab03      	add	r3, sp, #12
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	462a      	mov	r2, r5
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <_vfiprintf_r+0x22c>)
 800762e:	a904      	add	r1, sp, #16
 8007630:	4630      	mov	r0, r6
 8007632:	f7fd fc41 	bl	8004eb8 <_printf_float>
 8007636:	4607      	mov	r7, r0
 8007638:	1c78      	adds	r0, r7, #1
 800763a:	d1d6      	bne.n	80075ea <_vfiprintf_r+0x19e>
 800763c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763e:	07d9      	lsls	r1, r3, #31
 8007640:	d405      	bmi.n	800764e <_vfiprintf_r+0x202>
 8007642:	89ab      	ldrh	r3, [r5, #12]
 8007644:	059a      	lsls	r2, r3, #22
 8007646:	d402      	bmi.n	800764e <_vfiprintf_r+0x202>
 8007648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800764a:	f7fe f983 	bl	8005954 <__retarget_lock_release_recursive>
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	065b      	lsls	r3, r3, #25
 8007652:	f53f af1d 	bmi.w	8007490 <_vfiprintf_r+0x44>
 8007656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007658:	e71c      	b.n	8007494 <_vfiprintf_r+0x48>
 800765a:	ab03      	add	r3, sp, #12
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	462a      	mov	r2, r5
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <_vfiprintf_r+0x22c>)
 8007662:	a904      	add	r1, sp, #16
 8007664:	4630      	mov	r0, r6
 8007666:	f7fd feaf 	bl	80053c8 <_printf_i>
 800766a:	e7e4      	b.n	8007636 <_vfiprintf_r+0x1ea>
 800766c:	08007dfc 	.word	0x08007dfc
 8007670:	08007e06 	.word	0x08007e06
 8007674:	08004eb9 	.word	0x08004eb9
 8007678:	08007429 	.word	0x08007429
 800767c:	08007e02 	.word	0x08007e02

08007680 <__swbuf_r>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	460e      	mov	r6, r1
 8007684:	4614      	mov	r4, r2
 8007686:	4605      	mov	r5, r0
 8007688:	b118      	cbz	r0, 8007692 <__swbuf_r+0x12>
 800768a:	6a03      	ldr	r3, [r0, #32]
 800768c:	b90b      	cbnz	r3, 8007692 <__swbuf_r+0x12>
 800768e:	f7fe f849 	bl	8005724 <__sinit>
 8007692:	69a3      	ldr	r3, [r4, #24]
 8007694:	60a3      	str	r3, [r4, #8]
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	071a      	lsls	r2, r3, #28
 800769a:	d525      	bpl.n	80076e8 <__swbuf_r+0x68>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	b31b      	cbz	r3, 80076e8 <__swbuf_r+0x68>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	6922      	ldr	r2, [r4, #16]
 80076a4:	1a98      	subs	r0, r3, r2
 80076a6:	6963      	ldr	r3, [r4, #20]
 80076a8:	b2f6      	uxtb	r6, r6
 80076aa:	4283      	cmp	r3, r0
 80076ac:	4637      	mov	r7, r6
 80076ae:	dc04      	bgt.n	80076ba <__swbuf_r+0x3a>
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7ff fd9e 	bl	80071f4 <_fflush_r>
 80076b8:	b9e0      	cbnz	r0, 80076f4 <__swbuf_r+0x74>
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	3b01      	subs	r3, #1
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	6022      	str	r2, [r4, #0]
 80076c6:	701e      	strb	r6, [r3, #0]
 80076c8:	6962      	ldr	r2, [r4, #20]
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d004      	beq.n	80076da <__swbuf_r+0x5a>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	07db      	lsls	r3, r3, #31
 80076d4:	d506      	bpl.n	80076e4 <__swbuf_r+0x64>
 80076d6:	2e0a      	cmp	r6, #10
 80076d8:	d104      	bne.n	80076e4 <__swbuf_r+0x64>
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f7ff fd89 	bl	80071f4 <_fflush_r>
 80076e2:	b938      	cbnz	r0, 80076f4 <__swbuf_r+0x74>
 80076e4:	4638      	mov	r0, r7
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	4621      	mov	r1, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 f806 	bl	80076fc <__swsetup_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0d5      	beq.n	80076a0 <__swbuf_r+0x20>
 80076f4:	f04f 37ff 	mov.w	r7, #4294967295
 80076f8:	e7f4      	b.n	80076e4 <__swbuf_r+0x64>
	...

080076fc <__swsetup_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <__swsetup_r+0xac>)
 8007700:	4605      	mov	r5, r0
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	460c      	mov	r4, r1
 8007706:	b118      	cbz	r0, 8007710 <__swsetup_r+0x14>
 8007708:	6a03      	ldr	r3, [r0, #32]
 800770a:	b90b      	cbnz	r3, 8007710 <__swsetup_r+0x14>
 800770c:	f7fe f80a 	bl	8005724 <__sinit>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007716:	0718      	lsls	r0, r3, #28
 8007718:	d422      	bmi.n	8007760 <__swsetup_r+0x64>
 800771a:	06d9      	lsls	r1, r3, #27
 800771c:	d407      	bmi.n	800772e <__swsetup_r+0x32>
 800771e:	2309      	movs	r3, #9
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007726:	81a3      	strh	r3, [r4, #12]
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e034      	b.n	8007798 <__swsetup_r+0x9c>
 800772e:	0758      	lsls	r0, r3, #29
 8007730:	d512      	bpl.n	8007758 <__swsetup_r+0x5c>
 8007732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007734:	b141      	cbz	r1, 8007748 <__swsetup_r+0x4c>
 8007736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800773a:	4299      	cmp	r1, r3
 800773c:	d002      	beq.n	8007744 <__swsetup_r+0x48>
 800773e:	4628      	mov	r0, r5
 8007740:	f7fe fefe 	bl	8006540 <_free_r>
 8007744:	2300      	movs	r3, #0
 8007746:	6363      	str	r3, [r4, #52]	; 0x34
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	2300      	movs	r3, #0
 8007752:	6063      	str	r3, [r4, #4]
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	f043 0308 	orr.w	r3, r3, #8
 800775e:	81a3      	strh	r3, [r4, #12]
 8007760:	6923      	ldr	r3, [r4, #16]
 8007762:	b94b      	cbnz	r3, 8007778 <__swsetup_r+0x7c>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800776a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800776e:	d003      	beq.n	8007778 <__swsetup_r+0x7c>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f884 	bl	8007880 <__smakebuf_r>
 8007778:	89a0      	ldrh	r0, [r4, #12]
 800777a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800777e:	f010 0301 	ands.w	r3, r0, #1
 8007782:	d00a      	beq.n	800779a <__swsetup_r+0x9e>
 8007784:	2300      	movs	r3, #0
 8007786:	60a3      	str	r3, [r4, #8]
 8007788:	6963      	ldr	r3, [r4, #20]
 800778a:	425b      	negs	r3, r3
 800778c:	61a3      	str	r3, [r4, #24]
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	b943      	cbnz	r3, 80077a4 <__swsetup_r+0xa8>
 8007792:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007796:	d1c4      	bne.n	8007722 <__swsetup_r+0x26>
 8007798:	bd38      	pop	{r3, r4, r5, pc}
 800779a:	0781      	lsls	r1, r0, #30
 800779c:	bf58      	it	pl
 800779e:	6963      	ldrpl	r3, [r4, #20]
 80077a0:	60a3      	str	r3, [r4, #8]
 80077a2:	e7f4      	b.n	800778e <__swsetup_r+0x92>
 80077a4:	2000      	movs	r0, #0
 80077a6:	e7f7      	b.n	8007798 <__swsetup_r+0x9c>
 80077a8:	20000068 	.word	0x20000068

080077ac <_raise_r>:
 80077ac:	291f      	cmp	r1, #31
 80077ae:	b538      	push	{r3, r4, r5, lr}
 80077b0:	4604      	mov	r4, r0
 80077b2:	460d      	mov	r5, r1
 80077b4:	d904      	bls.n	80077c0 <_raise_r+0x14>
 80077b6:	2316      	movs	r3, #22
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	f04f 30ff 	mov.w	r0, #4294967295
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80077c2:	b112      	cbz	r2, 80077ca <_raise_r+0x1e>
 80077c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077c8:	b94b      	cbnz	r3, 80077de <_raise_r+0x32>
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 f830 	bl	8007830 <_getpid_r>
 80077d0:	462a      	mov	r2, r5
 80077d2:	4601      	mov	r1, r0
 80077d4:	4620      	mov	r0, r4
 80077d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077da:	f000 b817 	b.w	800780c <_kill_r>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d00a      	beq.n	80077f8 <_raise_r+0x4c>
 80077e2:	1c59      	adds	r1, r3, #1
 80077e4:	d103      	bne.n	80077ee <_raise_r+0x42>
 80077e6:	2316      	movs	r3, #22
 80077e8:	6003      	str	r3, [r0, #0]
 80077ea:	2001      	movs	r0, #1
 80077ec:	e7e7      	b.n	80077be <_raise_r+0x12>
 80077ee:	2400      	movs	r4, #0
 80077f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077f4:	4628      	mov	r0, r5
 80077f6:	4798      	blx	r3
 80077f8:	2000      	movs	r0, #0
 80077fa:	e7e0      	b.n	80077be <_raise_r+0x12>

080077fc <raise>:
 80077fc:	4b02      	ldr	r3, [pc, #8]	; (8007808 <raise+0xc>)
 80077fe:	4601      	mov	r1, r0
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	f7ff bfd3 	b.w	80077ac <_raise_r>
 8007806:	bf00      	nop
 8007808:	20000068 	.word	0x20000068

0800780c <_kill_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d07      	ldr	r5, [pc, #28]	; (800782c <_kill_r+0x20>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	f7f9 faa3 	bl	8000d64 <_kill>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d102      	bne.n	8007828 <_kill_r+0x1c>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	b103      	cbz	r3, 8007828 <_kill_r+0x1c>
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	2000047c 	.word	0x2000047c

08007830 <_getpid_r>:
 8007830:	f7f9 ba90 	b.w	8000d54 <_getpid>

08007834 <__swhatbuf_r>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	2900      	cmp	r1, #0
 800783e:	b096      	sub	sp, #88	; 0x58
 8007840:	4615      	mov	r5, r2
 8007842:	461e      	mov	r6, r3
 8007844:	da0d      	bge.n	8007862 <__swhatbuf_r+0x2e>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f013 0f80 	tst.w	r3, #128	; 0x80
 800784c:	f04f 0100 	mov.w	r1, #0
 8007850:	bf0c      	ite	eq
 8007852:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007856:	2340      	movne	r3, #64	; 0x40
 8007858:	2000      	movs	r0, #0
 800785a:	6031      	str	r1, [r6, #0]
 800785c:	602b      	str	r3, [r5, #0]
 800785e:	b016      	add	sp, #88	; 0x58
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	466a      	mov	r2, sp
 8007864:	f000 f848 	bl	80078f8 <_fstat_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	dbec      	blt.n	8007846 <__swhatbuf_r+0x12>
 800786c:	9901      	ldr	r1, [sp, #4]
 800786e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007872:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007876:	4259      	negs	r1, r3
 8007878:	4159      	adcs	r1, r3
 800787a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800787e:	e7eb      	b.n	8007858 <__swhatbuf_r+0x24>

08007880 <__smakebuf_r>:
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007884:	079d      	lsls	r5, r3, #30
 8007886:	4606      	mov	r6, r0
 8007888:	460c      	mov	r4, r1
 800788a:	d507      	bpl.n	800789c <__smakebuf_r+0x1c>
 800788c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	2301      	movs	r3, #1
 8007896:	6163      	str	r3, [r4, #20]
 8007898:	b002      	add	sp, #8
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	ab01      	add	r3, sp, #4
 800789e:	466a      	mov	r2, sp
 80078a0:	f7ff ffc8 	bl	8007834 <__swhatbuf_r>
 80078a4:	9900      	ldr	r1, [sp, #0]
 80078a6:	4605      	mov	r5, r0
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7fe febd 	bl	8006628 <_malloc_r>
 80078ae:	b948      	cbnz	r0, 80078c4 <__smakebuf_r+0x44>
 80078b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b4:	059a      	lsls	r2, r3, #22
 80078b6:	d4ef      	bmi.n	8007898 <__smakebuf_r+0x18>
 80078b8:	f023 0303 	bic.w	r3, r3, #3
 80078bc:	f043 0302 	orr.w	r3, r3, #2
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	e7e3      	b.n	800788c <__smakebuf_r+0xc>
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	6163      	str	r3, [r4, #20]
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	6120      	str	r0, [r4, #16]
 80078d6:	b15b      	cbz	r3, 80078f0 <__smakebuf_r+0x70>
 80078d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 f81d 	bl	800791c <_isatty_r>
 80078e2:	b128      	cbz	r0, 80078f0 <__smakebuf_r+0x70>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f023 0303 	bic.w	r3, r3, #3
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	431d      	orrs	r5, r3
 80078f4:	81a5      	strh	r5, [r4, #12]
 80078f6:	e7cf      	b.n	8007898 <__smakebuf_r+0x18>

080078f8 <_fstat_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d07      	ldr	r5, [pc, #28]	; (8007918 <_fstat_r+0x20>)
 80078fc:	2300      	movs	r3, #0
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	4611      	mov	r1, r2
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	f7f9 fa8c 	bl	8000e22 <_fstat>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	d102      	bne.n	8007914 <_fstat_r+0x1c>
 800790e:	682b      	ldr	r3, [r5, #0]
 8007910:	b103      	cbz	r3, 8007914 <_fstat_r+0x1c>
 8007912:	6023      	str	r3, [r4, #0]
 8007914:	bd38      	pop	{r3, r4, r5, pc}
 8007916:	bf00      	nop
 8007918:	2000047c 	.word	0x2000047c

0800791c <_isatty_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d06      	ldr	r5, [pc, #24]	; (8007938 <_isatty_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7f9 fa8b 	bl	8000e42 <_isatty>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_isatty_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_isatty_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	2000047c 	.word	0x2000047c

0800793c <_init>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr

08007948 <_fini>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr
