/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"
#include "string.h"
#include "stdio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t adc_val[2];
int adc_avg_8;
int adc_avg_16;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Initialize(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int average_8(int x)
{
	static int samples[8];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
	samples[i] = x;
	i = (i==7 ? 0: i+1);

//	Divide by 8 (shift right 3)
	return total>>3;
}

int average_16(int x)
{
	static int samples[16];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
	samples[i] = x;
	i = (i==15 ? 0: i+1);

//	Divide by 16 (shift right 4)
	return total>>4;
}

void defaultDelay()
{
	HAL_Delay(100);
}

void delay(uint32_t delay)
{
	HAL_Delay(delay);
}

void printOut(char text[])
{
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
	delay(50);
}

void printOutLine(char text[])
{
	printOut(text);
	printOut("\n\r");
}

void displayHEX(uint32_t number)
{
	char hexString[9];
	sprintf(hexString, "%8x", (unsigned int) number);

	printOut(hexString);
}

void lightLed(int voltage)
{
	uint16_t pins[4] = {
			  GPIO_PIN_2,
			  GPIO_PIN_3,
			  GPIO_PIN_6,
			  GPIO_PIN_7,
	};

	int led;
	int voltRatio = 0xFFF/5;
	if (voltage < voltRatio)
	{
		led = 0;
	}
	else if (voltage < voltRatio*2)
	{
		led = 1;
	}
	else if (voltage < voltRatio*3)
	{
		led = 2;
	}
	else if (voltage < voltRatio*4)
	{
		led = 3;
	}
	else
	{
		led = 4;
	}

    for (int i=0; i<4; i++)
    {
        if(i<led)
        {
            HAL_GPIO_WritePin(GPIOC, pins[i], GPIO_PIN_SET);
        }
        else
        {
            HAL_GPIO_WritePin(GPIOC, pins[i], GPIO_PIN_RESET);
        }
    }
}

void getValueAdc(volatile uint32_t *adcVolt)
{
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {}
	uint32_t readValue = HAL_ADC_GetValue(&hadc1);

	adc_avg_8 = average_8(readValue);
	adc_avg_16 = average_16(readValue);

	lightLed(adc_avg_16);

	char outputText[50];
	float voltage = (float) readValue *3.3/4096;
	sprintf(outputText, "ADC1_CH1_CH10 \t 0x%08X \t Vin = %.2f V", (unsigned int) readValue,  voltage);
	printOutLine(outputText);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  volatile uint32_t adcVolt = 0;
  HAL_ADC_Start(&hadc1);

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  question5Aun();
	  getValueAdc(&adcVolt);
	  delay(400);


//	  displayHEX(hex1);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */


void question5Aun(uint32_t *adcVolt, uint16_t pins[])
{
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {}
	*adcVolt = HAL_ADC_GetValue(&hadc1);

	char str[80];
    uint32_t val = average_16(*adcVolt);
    int led = 0;
       if(val < 0xfff/5)
       {

       }
       else if (val < 0xfff/5*2)
       {
           led=1;
       }
       else if(val < 0xfff/5*3){
           led=2;
       }
       else if(val < 0xfff/5*4){
           led=3;
       }
       else{
           led=4;
       }
       for(int i=0;i<4;i++){
           if(i<led){
               HAL_GPIO_WritePin(GPIOC,pins[i],GPIO_PIN_SET);
           }
           else{
               HAL_GPIO_WritePin(GPIOC,pins[i],GPIO_PIN_RESET);
           }
       }
       float voltage = (float)val/(float)4096*3.3;
       sprintf(str,"ADC1_CH1_CH10 %x Vin = %f V\r\n", (unsigned int) adc_val, voltage);
       printOut(str);
}
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
