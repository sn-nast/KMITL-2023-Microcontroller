
MyExamTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800a2a0  0800a2a0  0001a2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e0  0800a6e0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6e8  0800a6e8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  200001d4  0800a8c4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  0800a8c4  00020a08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a408  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7b  00000000  00000000  0003a64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ee  00000000  00000000  0003fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8ac  00000000  00000000  00040cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205aa  00000000  00000000  0006c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010689b  00000000  00000000  0008cb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007410  00000000  00000000  001933c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0019a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a288 	.word	0x0800a288

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0800a288 	.word	0x0800a288

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <MX_ADC1_Init+0xa0>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a18:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a3a:	f000 feeb 	bl	8001814 <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a44:	f000 fadc 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a5a:	f001 f84d 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a64:	f000 facc 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200001f0 	.word	0x200001f0
 8000a74:	40012000 	.word	0x40012000

08000a78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_ADC_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_ADC_MspInit+0x88>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <HAL_ADC_MspInit+0x88>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_ADC_MspInit+0x88>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_ADC_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <HAL_ADC_MspInit+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_ADC_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aca:	2308      	movs	r3, #8
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <HAL_ADC_MspInit+0x8c>)
 8000ade:	f001 fba7 	bl	8002230 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	2012      	movs	r0, #18
 8000ae8:	f001 fb3b 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000aec:	2012      	movs	r0, #18
 8000aee:	f001 fb54 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012000 	.word	0x40012000
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	4b96      	ldr	r3, [pc, #600]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a95      	ldr	r2, [pc, #596]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b93      	ldr	r3, [pc, #588]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b90      	ldr	r3, [pc, #576]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a8f      	ldr	r2, [pc, #572]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b8d      	ldr	r3, [pc, #564]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4e:	4b8a      	ldr	r3, [pc, #552]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a89      	ldr	r2, [pc, #548]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b87      	ldr	r3, [pc, #540]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b84      	ldr	r3, [pc, #528]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a83      	ldr	r2, [pc, #524]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b81      	ldr	r3, [pc, #516]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a7d      	ldr	r2, [pc, #500]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a77      	ldr	r2, [pc, #476]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b72      	ldr	r3, [pc, #456]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a71      	ldr	r2, [pc, #452]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b6c      	ldr	r3, [pc, #432]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a6b      	ldr	r2, [pc, #428]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <MX_GPIO_Init+0x270>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Touch_CLK_Pin|Touch_MOSI_Pin|Touch_CS_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2168      	movs	r1, #104	; 0x68
 8000be2:	4866      	ldr	r0, [pc, #408]	; (8000d7c <MX_GPIO_Init+0x274>)
 8000be4:	f001 fcd0 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bee:	4864      	ldr	r0, [pc, #400]	; (8000d80 <MX_GPIO_Init+0x278>)
 8000bf0:	f001 fcca 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	4862      	ldr	r0, [pc, #392]	; (8000d84 <MX_GPIO_Init+0x27c>)
 8000bfa:	f001 fcc5 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000c04:	4860      	ldr	r0, [pc, #384]	; (8000d88 <MX_GPIO_Init+0x280>)
 8000c06:	f001 fcbf 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Touch_MISO_Pin;
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4857      	ldr	r0, [pc, #348]	; (8000d7c <MX_GPIO_Init+0x274>)
 8000c1e:	f001 fb07 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Touch_CLK_Pin|Touch_MOSI_Pin|Touch_CS_Pin;
 8000c22:	2368      	movs	r3, #104	; 0x68
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4850      	ldr	r0, [pc, #320]	; (8000d7c <MX_GPIO_Init+0x274>)
 8000c3a:	f001 faf9 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	484c      	ldr	r0, [pc, #304]	; (8000d88 <MX_GPIO_Init+0x280>)
 8000c56:	f001 faeb 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000c5a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4845      	ldr	r0, [pc, #276]	; (8000d8c <MX_GPIO_Init+0x284>)
 8000c78:	f001 fada 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c7c:	2332      	movs	r3, #50	; 0x32
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8c:	230b      	movs	r3, #11
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	483c      	ldr	r0, [pc, #240]	; (8000d88 <MX_GPIO_Init+0x280>)
 8000c98:	f001 faca 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c9c:	2386      	movs	r3, #134	; 0x86
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cac:	230b      	movs	r3, #11
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4836      	ldr	r0, [pc, #216]	; (8000d90 <MX_GPIO_Init+0x288>)
 8000cb8:	f001 faba 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cbc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482a      	ldr	r0, [pc, #168]	; (8000d80 <MX_GPIO_Init+0x278>)
 8000cd6:	f001 faab 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4822      	ldr	r0, [pc, #136]	; (8000d80 <MX_GPIO_Init+0x278>)
 8000cf8:	f001 fa9a 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <MX_GPIO_Init+0x27c>)
 8000d14:	f001 fa8c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4816      	ldr	r0, [pc, #88]	; (8000d84 <MX_GPIO_Init+0x27c>)
 8000d2c:	f001 fa80 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RESET_Pin;
 8000d30:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <MX_GPIO_Init+0x280>)
 8000d4a:	f001 fa71 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d60:	230b      	movs	r3, #11
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_GPIO_Init+0x27c>)
 8000d6c:	f001 fa60 	bl	8002230 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3738      	adds	r7, #56	; 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40021800 	.word	0x40021800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40021400 	.word	0x40021400
 8000d90:	40020000 	.word	0x40020000

08000d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <MX_I2C1_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <MX_I2C1_Init+0x7c>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dd0:	f001 fbf4 	bl	80025bc <HAL_I2C_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dda:	f000 f911 	bl	8001000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000de2:	f002 f9fa 	bl	80031da <HAL_I2CEx_ConfigAnalogFilter>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dec:	f000 f908 	bl	8001000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000df4:	f002 fa3c 	bl	8003270 <HAL_I2CEx_ConfigDigitalFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 f8ff 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000238 	.word	0x20000238
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	20404768 	.word	0x20404768

08000e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ae      	sub	sp, #184	; 0xb8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2290      	movs	r2, #144	; 0x90
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 feb6 	bl	8006ba6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <HAL_I2C_MspInit+0xd4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d14c      	bne.n	8000ede <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f8d4 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e5e:	f000 f8cf 	bl	8001000 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a21      	ldr	r2, [pc, #132]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Sensor_SCL_Pin|Sensor_SDA_Pin;
 8000e7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e82:	2312      	movs	r3, #18
 8000e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e94:	2304      	movs	r3, #4
 8000e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <HAL_I2C_MspInit+0xdc>)
 8000ea2:	f001 f9c5 	bl	8002230 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	201f      	movs	r0, #31
 8000ec4:	f001 f94d 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ec8:	201f      	movs	r0, #31
 8000eca:	f001 f966 	bl	800219a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2020      	movs	r0, #32
 8000ed4:	f001 f945 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ed8:	2020      	movs	r0, #32
 8000eda:	f001 f95e 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	; 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 fc0b 	bl	8001712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f810 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f7ff fe02 	bl	8000b08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f04:	f000 faa4 	bl	8001450 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f08:	f000 fb32 	bl	8001570 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f0c:	f7ff ff42 	bl	8000d94 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f10:	f000 f9c0 	bl	8001294 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f14:	f000 fa12 	bl	800133c <MX_TIM8_Init>
  MX_ADC1_Init();
 8000f18:	f7ff fd5c 	bl	80009d4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0x28>
	...

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2234      	movs	r2, #52	; 0x34
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fe39 	bl	8006ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f44:	f002 fb28 	bl	8003598 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <SystemClock_Config+0xd8>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <SystemClock_Config+0xd8>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <SystemClock_Config+0xd8>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <SystemClock_Config+0xdc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <SystemClock_Config+0xdc>)
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <SystemClock_Config+0xdc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f90:	23d8      	movs	r3, #216	; 0xd8
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f98:	2309      	movs	r3, #9
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fb57 	bl	8003658 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb0:	f000 f826 	bl	8001000 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb4:	f002 fb00 	bl	80035b8 <HAL_PWREx_EnableOverDrive>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fbe:	f000 f81f 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2107      	movs	r1, #7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fde7 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fec:	f000 f808 	bl	8001000 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x44>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x44>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x44>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_MspInit+0x44>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_MspInit+0x44>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001042:	2005      	movs	r0, #5
 8001044:	f001 f882 	bl	800214c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 fb74 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <ADC_IRQHandler+0x10>)
 80010ae:	f000 fbf5 	bl	800189c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001f0 	.word	0x200001f0

080010bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <I2C1_EV_IRQHandler+0x10>)
 80010c2:	f001 fb0b 	bl	80026dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000238 	.word	0x20000238

080010d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <I2C1_ER_IRQHandler+0x10>)
 80010d6:	f001 fb1b 	bl	8002710 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000238 	.word	0x20000238

080010e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_kill>:

int _kill(int pid, int sig)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fe:	f005 fda5 	bl	8006c4c <__errno>
 8001102:	4603      	mov	r3, r0
 8001104:	2216      	movs	r2, #22
 8001106:	601a      	str	r2, [r3, #0]
  return -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_exit>:

void _exit (int status)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe7 	bl	80010f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001126:	e7fe      	b.n	8001126 <_exit+0x12>

08001128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00a      	b.n	8001150 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800113a:	f3af 8000 	nop.w
 800113e:	4601      	mov	r1, r0
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf0      	blt.n	800113a <_read+0x12>
  }

  return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e009      	b.n	8001188 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf1      	blt.n	8001174 <_write+0x12>
  }
  return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_close>:

int _close(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c2:	605a      	str	r2, [r3, #4]
  return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_isatty>:

int _isatty(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f005 fd0a 	bl	8006c4c <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20080000 	.word	0x20080000
 8001264:	00000400 	.word	0x00000400
 8001268:	2000028c 	.word	0x2000028c
 800126c:	20000a08 	.word	0x20000a08

08001270 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012b4:	4a20      	ldr	r2, [pc, #128]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012e2:	f003 fab5 	bl	8004850 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80012ec:	f7ff fe88 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM1_Init+0xa0>)
 80012fe:	f003 faff 	bl	8004900 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001308:	f7ff fe7a 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM1_Init+0xa0>)
 800131e:	f003 fcf3 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001328:	f7ff fe6a 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000290 	.word	0x20000290
 8001338:	40010000 	.word	0x40010000

0800133c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_TIM8_Init+0xa4>)
 800135c:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <MX_TIM8_Init+0xa8>)
 800135e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_TIM8_Init+0xa4>)
 8001362:	f245 425f 	movw	r2, #21599	; 0x545f
 8001366:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_TIM8_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM8_Init+0xa4>)
 8001370:	f242 720f 	movw	r2, #9999	; 0x270f
 8001374:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM8_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_TIM8_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_TIM8_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001388:	4815      	ldr	r0, [pc, #84]	; (80013e0 <MX_TIM8_Init+0xa4>)
 800138a:	f003 fa61 	bl	8004850 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001394:	f7ff fe34 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <MX_TIM8_Init+0xa4>)
 80013a6:	f003 faab 	bl	8004900 <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80013b0:	f7ff fe26 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013b4:	2320      	movs	r3, #32
 80013b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80013b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013bc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM8_Init+0xa4>)
 80013c8:	f003 fc9e 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80013d2:	f7ff fe15 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002dc 	.word	0x200002dc
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10c      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_TIM_Base_MspInit+0x60>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_TIM_Base_MspInit+0x60>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_TIM_Base_MspInit+0x60>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001412:	e010      	b.n	8001436 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0x64>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10b      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_TIM_Base_MspInit+0x60>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_TIM_Base_MspInit+0x60>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_TIM_Base_MspInit+0x60>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800
 800144c:	40010400 	.word	0x40010400

08001450 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <MX_USART3_UART_Init+0x5c>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART3_UART_Init+0x58>)
 8001494:	f003 fcc6 	bl	8004e24 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800149e:	f7ff fdaf 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000328 	.word	0x20000328
 80014ac:	40004800 	.word	0x40004800

080014b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ae      	sub	sp, #184	; 0xb8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2290      	movs	r2, #144	; 0x90
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fb68 	bl	8006ba6 <memset>
  if(uartHandle->Instance==USART3)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_UART_MspInit+0xb4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13c      	bne.n	800155a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fd86 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014fa:	f7ff fd81 	bl	8001000 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_UART_MspInit+0xb8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a19      	ldr	r2, [pc, #100]	; (8001568 <HAL_UART_MspInit+0xb8>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_UART_MspInit+0xb8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_UART_MspInit+0xb8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_UART_MspInit+0xb8>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_UART_MspInit+0xb8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TeraTerm_TX_Pin|TeraTerm_RX_Pin;
 800152e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001548:	2307      	movs	r3, #7
 800154a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_UART_MspInit+0xbc>)
 8001556:	f000 fe6b 	bl	8002230 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800155a:	bf00      	nop
 800155c:	37b8      	adds	r7, #184	; 0xb8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40004800 	.word	0x40004800
 8001568:	40023800 	.word	0x40023800
 800156c:	40020c00 	.word	0x40020c00

08001570 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800157a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	2206      	movs	r2, #6
 8001580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001584:	2202      	movs	r2, #2
 8001586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	2202      	movs	r2, #2
 8001592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	2201      	movs	r2, #1
 8001598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b4:	f001 fea8 	bl	8003308 <HAL_PCD_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015be:	f7ff fd1f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200003b0 	.word	0x200003b0

080015cc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0ae      	sub	sp, #184	; 0xb8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2290      	movs	r2, #144	; 0x90
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 fada 	bl	8006ba6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fa:	d159      	bne.n	80016b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001600:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fcf7 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001618:	f7ff fcf2 	bl	8001000 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001634:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800164e:	230a      	movs	r3, #10
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001658:	4619      	mov	r1, r3
 800165a:	4818      	ldr	r0, [pc, #96]	; (80016bc <HAL_PCD_MspInit+0xf0>)
 800165c:	f000 fde8 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001678:	4619      	mov	r1, r3
 800167a:	4810      	ldr	r0, [pc, #64]	; (80016bc <HAL_PCD_MspInit+0xf0>)
 800167c:	f000 fdd8 	bl	8002230 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 8001686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168a:	6353      	str	r3, [r2, #52]	; 0x34
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	6453      	str	r3, [r2, #68]	; 0x44
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_PCD_MspInit+0xec>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	37b8      	adds	r7, #184	; 0xb8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020000 	.word	0x40020000

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ea:	f7ff fdc1 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f005 fab3 	bl	8006c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff fbff 	bl	8000ef4 <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001704:	0800a6f0 	.word	0x0800a6f0
  ldr r2, =_sbss
 8001708:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800170c:	20000a08 	.word	0x20000a08

08001710 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <CAN1_RX0_IRQHandler>

08001712 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001716:	2003      	movs	r0, #3
 8001718:	f000 fd18 	bl	800214c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171c:	2000      	movs	r0, #0
 800171e:	f000 f805 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001722:	f7ff fc73 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fd33 	bl	80021b6 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 fcfb 	bl	8002162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000008 	.word	0x20000008
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	200008b8 	.word	0x200008b8

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	200008b8 	.word	0x200008b8

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e031      	b.n	800188e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff f920 	bl	8000a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_ADC_Init+0x84>)
 8001858:	4013      	ands	r3, r2
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fa9e 	bl	8001da4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
 800187e:	e001      	b.n	8001884 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	ffffeefd 	.word	0xffffeefd

0800189c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d049      	beq.n	8001966 <HAL_ADC_IRQHandler+0xca>
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d046      	beq.n	8001966 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d12b      	bne.n	8001956 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d127      	bne.n	8001956 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800191e:	2b00      	cmp	r3, #0
 8001920:	d119      	bne.n	8001956 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0220 	bic.w	r2, r2, #32
 8001930:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8b0 	bl	8001abc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0212 	mvn.w	r2, #18
 8001964:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001974:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d057      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x190>
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d054      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d139      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12b      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d124      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11d      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d119      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fabb 	bl	8001f98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 020c 	mvn.w	r2, #12
 8001a2a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d017      	beq.n	8001a72 <HAL_ADC_IRQHandler+0x1d6>
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d014      	beq.n	8001a72 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10d      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f834 	bl	8001ad0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0201 	mvn.w	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a80:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0x218>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0220 	mvn.w	r2, #32
 8001aa2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f81d 	bl	8001ae4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0220 	mvn.w	r2, #32
 8001ab2:	601a      	str	r2, [r3, #0]
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x1c>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e136      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x28a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d93a      	bls.n	8001b9a <HAL_ADC_ConfigChannel+0xa2>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b2c:	d035      	beq.n	8001b9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68d9      	ldr	r1, [r3, #12]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	3b1e      	subs	r3, #30
 8001b44:	2207      	movs	r2, #7
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	400a      	ands	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a8d      	ldr	r2, [pc, #564]	; (8001d90 <HAL_ADC_ConfigChannel+0x298>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10a      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b72:	e035      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68d9      	ldr	r1, [r3, #12]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4403      	add	r3, r0
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b98:	e022      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6919      	ldr	r1, [r3, #16]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	2207      	movs	r2, #7
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	400a      	ands	r2, r1
 8001bbc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6919      	ldr	r1, [r3, #16]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4403      	add	r3, r0
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b06      	cmp	r3, #6
 8001be6:	d824      	bhi.n	8001c32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b05      	subs	r3, #5
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43da      	mvns	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b05      	subs	r3, #5
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c30:	e04c      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d824      	bhi.n	8001c84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b23      	subs	r3, #35	; 0x23
 8001c4c:	221f      	movs	r2, #31
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	400a      	ands	r2, r1
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b23      	subs	r3, #35	; 0x23
 8001c76:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
 8001c82:	e023      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b41      	subs	r3, #65	; 0x41
 8001c96:	221f      	movs	r2, #31
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b41      	subs	r3, #65	; 0x41
 8001cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a30      	ldr	r2, [pc, #192]	; (8001d94 <HAL_ADC_ConfigChannel+0x29c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10a      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1f4>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cde:	d105      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ce6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001cea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_ADC_ConfigChannel+0x29c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10f      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x21e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d08:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_ADC_ConfigChannel+0x29c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d12b      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x280>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_ADC_ConfigChannel+0x298>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x23a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b11      	cmp	r3, #17
 8001d30:	d122      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_ADC_ConfigChannel+0x298>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_ADC_ConfigChannel+0x2a4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d6a:	e002      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f9      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	10000012 	.word	0x10000012
 8001d94:	40012000 	.word	0x40012000
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001dac:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <ADC_Init+0x1ec>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a77      	ldr	r2, [pc, #476]	; (8001f90 <ADC_Init+0x1ec>)
 8001db2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001db6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <ADC_Init+0x1ec>)
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4973      	ldr	r1, [pc, #460]	; (8001f90 <ADC_Init+0x1ec>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	021a      	lsls	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <ADC_Init+0x1f0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	e00f      	b.n	8001e9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0202 	bic.w	r2, r2, #2
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	005a      	lsls	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	035a      	lsls	r2, r3, #13
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	e007      	b.n	8001f14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	051a      	lsls	r2, r3, #20
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f56:	025a      	lsls	r2, r3, #9
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	029a      	lsls	r2, r3, #10
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40012300 	.word	0x40012300
 8001f94:	0f000001 	.word	0x0f000001

08001f98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <__NVIC_SetPriorityGrouping+0x40>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x40>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00
 8001ff0:	05fa0000 	.word	0x05fa0000

08001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db0b      	blt.n	800203a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <__NVIC_EnableIRQ+0x38>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002118:	d301      	bcc.n	800211e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211a:	2301      	movs	r3, #1
 800211c:	e00f      	b.n	800213e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Config+0x40>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002126:	210f      	movs	r1, #15
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f7ff ff8e 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x40>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x40>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff29 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002174:	f7ff ff3e 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 8002178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff8e 	bl	80020a0 <NVIC_EncodePriority>
 8002184:	4602      	mov	r2, r0
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff31 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffa2 	bl	8002108 <SysTick_Config>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d004      	beq.n	80021ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00c      	b.n	8002206 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2205      	movs	r2, #5
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002220:	b2db      	uxtb	r3, r3
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e175      	b.n	800253c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8164 	bne.w	8002536 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d005      	beq.n	8002286 <HAL_GPIO_Init+0x56>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d017      	beq.n	8002324 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80be 	beq.w	8002536 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_GPIO_Init+0x324>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a65      	ldr	r2, [pc, #404]	; (8002554 <HAL_GPIO_Init+0x324>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_GPIO_Init+0x324>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023d2:	4a61      	ldr	r2, [pc, #388]	; (8002558 <HAL_GPIO_Init+0x328>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_GPIO_Init+0x32c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d037      	beq.n	800246e <HAL_GPIO_Init+0x23e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_GPIO_Init+0x330>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_GPIO_Init+0x23a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a56      	ldr	r2, [pc, #344]	; (8002564 <HAL_GPIO_Init+0x334>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x236>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a55      	ldr	r2, [pc, #340]	; (8002568 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d025      	beq.n	8002462 <HAL_GPIO_Init+0x232>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a54      	ldr	r2, [pc, #336]	; (800256c <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x22e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a53      	ldr	r2, [pc, #332]	; (8002570 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x22a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x226>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_GPIO_Init+0x34c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_GPIO_Init+0x350>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x21a>
 8002446:	2309      	movs	r3, #9
 8002448:	e012      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800244a:	230a      	movs	r3, #10
 800244c:	e010      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800244e:	2308      	movs	r3, #8
 8002450:	e00e      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002452:	2307      	movs	r3, #7
 8002454:	e00c      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002456:	2306      	movs	r3, #6
 8002458:	e00a      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800245a:	2305      	movs	r3, #5
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	; (8002558 <HAL_GPIO_Init+0x328>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_GPIO_Init+0x354>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a34      	ldr	r2, [pc, #208]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_GPIO_Init+0x354>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_GPIO_Init+0x354>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_GPIO_Init+0x354>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f ae86 	bls.w	8002250 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40021400 	.word	0x40021400
 8002574:	40021800 	.word	0x40021800
 8002578:	40021c00 	.word	0x40021c00
 800257c:	40022000 	.word	0x40022000
 8002580:	40022400 	.word	0x40022400
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fc16 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	; 0x24
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e006      	b.n	8002644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d104      	bne.n	8002656 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_I2C_Init+0x11c>)
 8002662:	430b      	orrs	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69d9      	ldr	r1, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	02008000 	.word	0x02008000

080026dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
  }
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00f      	beq.n	8002752 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002750:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00f      	beq.n	800277c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0208 	orr.w	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00f      	beq.n	80027a6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 030b 	and.w	r3, r3, #11
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fb77 	bl	8002eac <I2C_ITError>
  }
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	70fb      	strb	r3, [r7, #3]
 80027fa:	4613      	mov	r3, r2
 80027fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <I2C_Slave_ISR_IT+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e0e1      	b.n	8002a2e <I2C_Slave_ISR_IT+0x1e8>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002886:	6939      	ldr	r1, [r7, #16]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f9b5 	bl	8002bf8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d04b      	beq.n	8002930 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d046      	beq.n	8002930 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d128      	bne.n	80028fe <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b28      	cmp	r3, #40	; 0x28
 80028b6:	d108      	bne.n	80028ca <I2C_Slave_ISR_IT+0x84>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028be:	d104      	bne.n	80028ca <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028c0:	6939      	ldr	r1, [r7, #16]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa9e 	bl	8002e04 <I2C_ITListenCplt>
 80028c8:	e031      	b.n	800292e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b29      	cmp	r3, #41	; 0x29
 80028d4:	d10e      	bne.n	80028f4 <I2C_Slave_ISR_IT+0xae>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d00a      	beq.n	80028f4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fbd7 	bl	800309a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f926 	bl	8002b3e <I2C_ITSlaveSeqCplt>
 80028f2:	e01c      	b.n	800292e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80028fc:	e08f      	b.n	8002a1e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2210      	movs	r2, #16
 8002904:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <I2C_Slave_ISR_IT+0xda>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291e:	d17e      	bne.n	8002a1e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	4619      	mov	r1, r3
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fac0 	bl	8002eac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800292c:	e077      	b.n	8002a1e <I2C_Slave_ISR_IT+0x1d8>
 800292e:	e076      	b.n	8002a1e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02f      	beq.n	800299a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02a      	beq.n	800299a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14b      	bne.n	8002a22 <I2C_Slave_ISR_IT+0x1dc>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002990:	d047      	beq.n	8002a22 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f8d3 	bl	8002b3e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002998:	e043      	b.n	8002a22 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f840 	bl	8002a36 <I2C_ITAddrCplt>
 80029b6:	e035      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d030      	beq.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02b      	beq.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d018      	beq.n	8002a08 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a06:	e00d      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0e:	d002      	beq.n	8002a16 <I2C_Slave_ISR_IT+0x1d0>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f891 	bl	8002b3e <I2C_ITSlaveSeqCplt>
 8002a1c:	e002      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002a22:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a4c:	2b28      	cmp	r3, #40	; 0x28
 8002a4e:	d16a      	bne.n	8002b26 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a6e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a8a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d138      	bne.n	8002b06 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a94:	897b      	ldrh	r3, [r7, #10]
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	4053      	eors	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f003 0306 	and.w	r3, r3, #6
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11c      	bne.n	8002ae2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002aa8:	897b      	ldrh	r3, [r7, #10]
 8002aaa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d13b      	bne.n	8002b36 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ad4:	89ba      	ldrh	r2, [r7, #12]
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fe87 	bl	80027ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ae0:	e029      	b.n	8002b36 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ae2:	893b      	ldrh	r3, [r7, #8]
 8002ae4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb17 	bl	800311e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002af8:	89ba      	ldrh	r2, [r7, #12]
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	4619      	mov	r1, r3
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fe75 	bl	80027ee <HAL_I2C_AddrCallback>
}
 8002b04:	e017      	b.n	8002b36 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fb07 	bl	800311e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b18:	89ba      	ldrh	r2, [r7, #12]
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fe65 	bl	80027ee <HAL_I2C_AddrCallback>
}
 8002b24:	e007      	b.n	8002b36 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e00c      	b.n	8002b8c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b29      	cmp	r3, #41	; 0x29
 8002b96:	d112      	bne.n	8002bbe <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2228      	movs	r2, #40	; 0x28
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2221      	movs	r2, #33	; 0x21
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fab8 	bl	800311e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fe05 	bl	80027c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bbc:	e017      	b.n	8002bee <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc8:	d111      	bne.n	8002bee <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2228      	movs	r2, #40	; 0x28
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2222      	movs	r2, #34	; 0x22
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002bd8:	2102      	movs	r1, #2
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa9f 	bl	800311e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fdf6 	bl	80027da <HAL_I2C_SlaveRxCpltCallback>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c14:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b21      	cmp	r3, #33	; 0x21
 8002c22:	d002      	beq.n	8002c2a <I2C_ITSlaveCplt+0x32>
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b29      	cmp	r3, #41	; 0x29
 8002c28:	d108      	bne.n	8002c3c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c2a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa75 	bl	800311e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2221      	movs	r2, #33	; 0x21
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3a:	e00d      	b.n	8002c58 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	d002      	beq.n	8002c48 <I2C_ITSlaveCplt+0x50>
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b2a      	cmp	r3, #42	; 0x2a
 8002c46:	d107      	bne.n	8002c58 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c48:	f248 0102 	movw	r1, #32770	; 0x8002
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa66 	bl	800311e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2222      	movs	r2, #34	; 0x22
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <I2C_ITSlaveCplt+0x204>)
 8002c74:	400b      	ands	r3, r1
 8002c76:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fa0e 	bl	800309a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01f      	beq.n	8002ce0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cae:	e017      	b.n	8002ce0 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d020      	beq.n	8002d2c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8a4 	bl	8002eac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b28      	cmp	r3, #40	; 0x28
 8002d6e:	d141      	bne.n	8002df4 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f846 	bl	8002e04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d78:	e03c      	b.n	8002df4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d82:	d014      	beq.n	8002dae <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff feda 	bl	8002b3e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <I2C_ITSlaveCplt+0x208>)
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fd2f 	bl	800280a <HAL_I2C_ListenCpltCallback>
}
 8002dac:	e022      	b.n	8002df4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b22      	cmp	r3, #34	; 0x22
 8002db8:	d10e      	bne.n	8002dd8 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fd02 	bl	80027da <HAL_I2C_SlaveRxCpltCallback>
}
 8002dd6:	e00d      	b.n	8002df4 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fce9 	bl	80027c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	fe00e800 	.word	0xfe00e800
 8002e00:	ffff0000 	.word	0xffff0000

08002e04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <I2C_ITListenCplt+0xa4>)
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d022      	beq.n	8002e80 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d012      	beq.n	8002e80 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e80:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f94a 	bl	800311e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2210      	movs	r2, #16
 8002e90:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fcb5 	bl	800280a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	ffff0000 	.word	0xffff0000

08002eac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a5d      	ldr	r2, [pc, #372]	; (8003040 <I2C_ITError+0x194>)
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b28      	cmp	r3, #40	; 0x28
 8002ee2:	d005      	beq.n	8002ef0 <I2C_ITError+0x44>
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b29      	cmp	r3, #41	; 0x29
 8002ee8:	d002      	beq.n	8002ef0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b2a      	cmp	r3, #42	; 0x2a
 8002eee:	d10b      	bne.n	8002f08 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ef0:	2103      	movs	r1, #3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f913 	bl	800311e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2228      	movs	r2, #40	; 0x28
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a50      	ldr	r2, [pc, #320]	; (8003044 <I2C_ITError+0x198>)
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
 8002f06:	e011      	b.n	8002f2c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f08:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f906 	bl	800311e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b60      	cmp	r3, #96	; 0x60
 8002f1c:	d003      	beq.n	8002f26 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d039      	beq.n	8002fae <I2C_ITError+0x102>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b11      	cmp	r3, #17
 8002f3e:	d002      	beq.n	8002f46 <I2C_ITError+0x9a>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b21      	cmp	r3, #33	; 0x21
 8002f44:	d133      	bne.n	8002fae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f54:	d107      	bne.n	8002f66 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f951 	bl	8002212 <HAL_DMA_GetState>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d017      	beq.n	8002fa6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	4a33      	ldr	r2, [pc, #204]	; (8003048 <I2C_ITError+0x19c>)
 8002f7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f91f 	bl	80021ce <HAL_DMA_Abort_IT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d04d      	beq.n	8003032 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fa4:	e045      	b.n	8003032 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f850 	bl	800304c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fac:	e041      	b.n	8003032 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d039      	beq.n	800302a <I2C_ITError+0x17e>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b12      	cmp	r3, #18
 8002fba:	d002      	beq.n	8002fc2 <I2C_ITError+0x116>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b22      	cmp	r3, #34	; 0x22
 8002fc0:	d133      	bne.n	800302a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd0:	d107      	bne.n	8002fe2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f913 	bl	8002212 <HAL_DMA_GetState>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d017      	beq.n	8003022 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <I2C_ITError+0x19c>)
 8002ff8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f8e1 	bl	80021ce <HAL_DMA_Abort_IT>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d011      	beq.n	8003036 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800301c:	4610      	mov	r0, r2
 800301e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003020:	e009      	b.n	8003036 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f812 	bl	800304c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003028:	e005      	b.n	8003036 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f80e 	bl	800304c <I2C_TreatErrorCallback>
  }
}
 8003030:	e002      	b.n	8003038 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003036:	bf00      	nop
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	ffff0000 	.word	0xffff0000
 8003044:	08002847 	.word	0x08002847
 8003048:	080030e3 	.word	0x080030e3

0800304c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b60      	cmp	r3, #96	; 0x60
 800305e:	d10e      	bne.n	800307e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fbdb 	bl	8002832 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800307c:	e009      	b.n	8003092 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fbc6 	bl	800281e <HAL_I2C_ErrorCallback>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d103      	bne.n	80030b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d007      	beq.n	80030d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	619a      	str	r2, [r3, #24]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	2200      	movs	r2, #0
 80030fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	2200      	movs	r2, #0
 800310e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ff9b 	bl	800304c <I2C_TreatErrorCallback>
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00f      	beq.n	8003158 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800313e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800314c:	2b28      	cmp	r3, #40	; 0x28
 800314e:	d003      	beq.n	8003158 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003156:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00f      	beq.n	8003182 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003168:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003176:	2b28      	cmp	r3, #40	; 0x28
 8003178:	d003      	beq.n	8003182 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003180:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da03      	bge.n	8003192 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	2b10      	cmp	r3, #16
 8003196:	d103      	bne.n	80031a0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800319e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d103      	bne.n	80031ae <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f043 0320 	orr.w	r3, r3, #32
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d103      	bne.n	80031bc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	400a      	ands	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d138      	bne.n	8003262 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e032      	b.n	8003264 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2224      	movs	r2, #36	; 0x24
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800322c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	d139      	bne.n	80032fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003290:	2302      	movs	r3, #2
 8003292:	e033      	b.n	80032fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e000      	b.n	80032fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330a:	b08f      	sub	sp, #60	; 0x3c
 800330c:	af0a      	add	r7, sp, #40	; 0x28
 800330e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e116      	b.n	8003548 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fe f949 	bl	80015cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fa23 	bl	80057a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	687e      	ldr	r6, [r7, #4]
 8003366:	466d      	mov	r5, sp
 8003368:	f106 0410 	add.w	r4, r6, #16
 800336c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003374:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003378:	e885 0003 	stmia.w	r5, {r0, r1}
 800337c:	1d33      	adds	r3, r6, #4
 800337e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003380:	6838      	ldr	r0, [r7, #0]
 8003382:	f002 f9b7 	bl	80056f4 <USB_CoreInit>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d7      	b.n	8003548 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fa11 	bl	80057c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e04a      	b.n	8003440 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	333d      	adds	r3, #61	; 0x3d
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	333c      	adds	r3, #60	; 0x3c
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	b298      	uxth	r0, r3
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3344      	adds	r3, #68	; 0x44
 80033e6:	4602      	mov	r2, r0
 80033e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3340      	adds	r3, #64	; 0x40
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3348      	adds	r3, #72	; 0x48
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334c      	adds	r3, #76	; 0x4c
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3354      	adds	r3, #84	; 0x54
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3af      	bcc.n	80033aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e044      	b.n	80034da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3b5      	bcc.n	8003450 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	687e      	ldr	r6, [r7, #4]
 80034ec:	466d      	mov	r5, sp
 80034ee:	f106 0410 	add.w	r4, r6, #16
 80034f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003502:	1d33      	adds	r3, r6, #4
 8003504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	f002 f9aa 	bl	8005860 <USB_DevInit>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e014      	b.n	8003548 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f80a 	bl	8003550 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 fb68 	bl	8005c16 <USB_DevDisconnect>

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003550 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_PCDEx_ActivateLPM+0x44>)
 8003580:	4313      	orrs	r3, r2
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	10000003 	.word	0x10000003

08003598 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40007000 	.word	0x40007000

080035b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HAL_PWREx_EnableOverDrive+0x98>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_PWREx_EnableOverDrive+0x98>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_PWREx_EnableOverDrive+0x98>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e6:	f7fe f8e5 	bl	80017b4 <HAL_GetTick>
 80035ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ec:	e009      	b.n	8003602 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ee:	f7fe f8e1 	bl	80017b4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fc:	d901      	bls.n	8003602 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e022      	b.n	8003648 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360e:	d1ee      	bne.n	80035ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800361c:	f7fe f8ca 	bl	80017b4 <HAL_GetTick>
 8003620:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003622:	e009      	b.n	8003638 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003624:	f7fe f8c6 	bl	80017b4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003632:	d901      	bls.n	8003638 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e007      	b.n	8003648 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003644:	d1ee      	bne.n	8003624 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000

08003658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e29b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8087 	beq.w	800378a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800367c:	4b96      	ldr	r3, [pc, #600]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003688:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d112      	bne.n	80036ba <HAL_RCC_OscConfig+0x62>
 8003694:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d10b      	bne.n	80036ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a2:	4b8d      	ldr	r3, [pc, #564]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d06c      	beq.n	8003788 <HAL_RCC_OscConfig+0x130>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d168      	bne.n	8003788 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e275      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x7a>
 80036c4:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a83      	ldr	r2, [pc, #524]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e02e      	b.n	8003730 <HAL_RCC_OscConfig+0xd8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x9c>
 80036da:	4b7f      	ldr	r3, [pc, #508]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7e      	ldr	r2, [pc, #504]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b7c      	ldr	r3, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7b      	ldr	r2, [pc, #492]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80036ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e01d      	b.n	8003730 <HAL_RCC_OscConfig+0xd8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0xc0>
 80036fe:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a75      	ldr	r2, [pc, #468]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a72      	ldr	r2, [pc, #456]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0xd8>
 8003718:	4b6f      	ldr	r3, [pc, #444]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6e      	ldr	r2, [pc, #440]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6b      	ldr	r2, [pc, #428]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe f83c 	bl	80017b4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe f838 	bl	80017b4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e229      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0xe8>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe f828 	bl	80017b4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7fe f824 	bl	80017b4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e215      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	4b57      	ldr	r3, [pc, #348]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x110>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d069      	beq.n	800386a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003796:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a2:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x190>
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e1e9      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	493d      	ldr	r1, [pc, #244]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e040      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d023      	beq.n	8003838 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a38      	ldr	r2, [pc, #224]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd ffda 	bl	80017b4 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7fd ffd6 	bl	80017b4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1c7      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4929      	ldr	r1, [pc, #164]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
 8003836:	e018      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd ffb6 	bl	80017b4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7fd ffb2 	bl	80017b4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1a3      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d038      	beq.n	80038e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d019      	beq.n	80038b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388a:	f7fd ff93 	bl	80017b4 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003892:	f7fd ff8f 	bl	80017b4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e180      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80038a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x23a>
 80038b0:	e01a      	b.n	80038e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80038b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_RCC_OscConfig+0x280>)
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fd ff79 	bl	80017b4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fd ff75 	bl	80017b4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d903      	bls.n	80038dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e166      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
 80038d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	4b92      	ldr	r3, [pc, #584]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ee      	bne.n	80038c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80a4 	beq.w	8003a3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f6:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	4b89      	ldr	r3, [pc, #548]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a88      	ldr	r2, [pc, #544]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b86      	ldr	r3, [pc, #536]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391e:	4b83      	ldr	r3, [pc, #524]	; (8003b2c <HAL_RCC_OscConfig+0x4d4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d118      	bne.n	800395c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800392a:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <HAL_RCC_OscConfig+0x4d4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a7f      	ldr	r2, [pc, #508]	; (8003b2c <HAL_RCC_OscConfig+0x4d4>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003936:	f7fd ff3d 	bl	80017b4 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393e:	f7fd ff39 	bl	80017b4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b64      	cmp	r3, #100	; 0x64
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e12a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003950:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x4d4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x31a>
 8003964:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a6f      	ldr	r2, [pc, #444]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	e02d      	b.n	80039ce <HAL_RCC_OscConfig+0x376>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x33c>
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a6a      	ldr	r2, [pc, #424]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	e01c      	b.n	80039ce <HAL_RCC_OscConfig+0x376>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b05      	cmp	r3, #5
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x35e>
 800399c:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a61      	ldr	r2, [pc, #388]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a5e      	ldr	r2, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
 80039b4:	e00b      	b.n	80039ce <HAL_RCC_OscConfig+0x376>
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d015      	beq.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd feed 	bl	80017b4 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd fee9 	bl	80017b4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ee      	beq.n	80039de <HAL_RCC_OscConfig+0x386>
 8003a00:	e014      	b.n	8003a2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fd fed7 	bl	80017b4 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fd fed3 	bl	80017b4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0c2      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ee      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d105      	bne.n	8003a3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a32:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a3c      	ldr	r2, [pc, #240]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80ae 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d06d      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d14b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fea4 	bl	80017b4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fea0 	bl	80017b4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e091      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	491b      	ldr	r1, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd fe72 	bl	80017b4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fe6e 	bl	80017b4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e05f      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x47c>
 8003af2:	e057      	b.n	8003ba4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd fe58 	bl	80017b4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd fe54 	bl	80017b4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e045      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4b0>
 8003b26:	e03d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x54c>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <HAL_RCC_OscConfig+0x558>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d030      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d129      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d122      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d119      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0d0      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 020f 	bic.w	r2, r3, #15
 8003be2:	4965      	ldr	r1, [pc, #404]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0b8      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c2c:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	494d      	ldr	r1, [pc, #308]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d040      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d115      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e073      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06b      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fd84 	bl	80017b4 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fd fd80 	bl	80017b4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e053      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 020c 	and.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1eb      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d210      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 020f 	bic.w	r2, r3, #15
 8003cee:	4922      	ldr	r1, [pc, #136]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4916      	ldr	r1, [pc, #88]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	490e      	ldr	r1, [pc, #56]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d46:	f000 f821 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <HAL_RCC_ClockConfig+0x1cc>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1d0>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1d4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd fce0 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023c00 	.word	0x40023c00
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	0800a2a0 	.word	0x0800a2a0
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d90:	b094      	sub	sp, #80	; 0x50
 8003d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	2300      	movs	r3, #0
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da4:	4b79      	ldr	r3, [pc, #484]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d00d      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x40>
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	f200 80e1 	bhi.w	8003f78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dbe:	e0db      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4b73      	ldr	r3, [pc, #460]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc4:	e0db      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc6:	4b73      	ldr	r3, [pc, #460]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dca:	e0d8      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dcc:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d063      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de2:	4b6a      	ldr	r3, [pc, #424]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	2200      	movs	r2, #0
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	0159      	lsls	r1, r3, #5
 8003e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e10:	0150      	lsls	r0, r2, #5
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4621      	mov	r1, r4
 8003e18:	1a51      	subs	r1, r2, r1
 8003e1a:	6139      	str	r1, [r7, #16]
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e30:	4659      	mov	r1, fp
 8003e32:	018b      	lsls	r3, r1, #6
 8003e34:	4651      	mov	r1, sl
 8003e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	018a      	lsls	r2, r1, #6
 8003e3e:	4651      	mov	r1, sl
 8003e40:	ebb2 0801 	subs.w	r8, r2, r1
 8003e44:	4659      	mov	r1, fp
 8003e46:	eb63 0901 	sbc.w	r9, r3, r1
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	4623      	mov	r3, r4
 8003e64:	eb18 0303 	adds.w	r3, r8, r3
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	eb49 0303 	adc.w	r3, r9, r3
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e7e:	4629      	mov	r1, r5
 8003e80:	024b      	lsls	r3, r1, #9
 8003e82:	4621      	mov	r1, r4
 8003e84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e88:	4621      	mov	r1, r4
 8003e8a:	024a      	lsls	r2, r1, #9
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e92:	2200      	movs	r2, #0
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e9c:	f7fc fbe4 	bl	8000668 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea8:	e058      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eba:	623b      	str	r3, [r7, #32]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	f04f 0000 	mov.w	r0, #0
 8003ecc:	f04f 0100 	mov.w	r1, #0
 8003ed0:	0159      	lsls	r1, r3, #5
 8003ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed6:	0150      	lsls	r0, r2, #5
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4641      	mov	r1, r8
 8003ede:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ef8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003efc:	ebb2 040a 	subs.w	r4, r2, sl
 8003f00:	eb63 050b 	sbc.w	r5, r3, fp
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	00eb      	lsls	r3, r5, #3
 8003f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f12:	00e2      	lsls	r2, r4, #3
 8003f14:	4614      	mov	r4, r2
 8003f16:	461d      	mov	r5, r3
 8003f18:	4643      	mov	r3, r8
 8003f1a:	18e3      	adds	r3, r4, r3
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	464b      	mov	r3, r9
 8003f20:	eb45 0303 	adc.w	r3, r5, r3
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f32:	4629      	mov	r1, r5
 8003f34:	028b      	lsls	r3, r1, #10
 8003f36:	4621      	mov	r1, r4
 8003f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	028a      	lsls	r2, r1, #10
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f46:	2200      	movs	r2, #0
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	61fa      	str	r2, [r7, #28]
 8003f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f50:	f7fc fb8a 	bl	8000668 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3750      	adds	r7, #80	; 0x50
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	007a1200 	.word	0x007a1200

08003f98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000000 	.word	0x20000000

08003fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb4:	f7ff fff0 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0a9b      	lsrs	r3, r3, #10
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	0800a2b0 	.word	0x0800a2b0

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fdc:	f7ff ffdc 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0b5b      	lsrs	r3, r3, #13
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	0800a2b0 	.word	0x0800a2b0

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004028:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a68      	ldr	r2, [pc, #416]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004032:	6093      	str	r3, [r2, #8]
 8004034:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	4964      	ldr	r1, [pc, #400]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405a:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	4959      	ldr	r1, [pc, #356]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004078:	d101      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d017      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	494a      	ldr	r1, [pc, #296]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 808b 	beq.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	4a39      	ldr	r2, [pc, #228]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6413      	str	r3, [r2, #64]	; 0x40
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040fc:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fd fb54 	bl	80017b4 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fd fb50 	bl	80017b4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e38f      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800412e:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d035      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d02e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d114      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fb18 	bl	80017b4 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fb14 	bl	80017b4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e351      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ee      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b6:	d111      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	4901      	ldr	r1, [pc, #4]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
 80041ce:	e00b      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40007000 	.word	0x40007000
 80041d8:	0ffffcff 	.word	0x0ffffcff
 80041dc:	4bac      	ldr	r3, [pc, #688]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4aab      	ldr	r2, [pc, #684]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041e6:	6093      	str	r3, [r2, #8]
 80041e8:	4ba9      	ldr	r3, [pc, #676]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	49a6      	ldr	r1, [pc, #664]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004206:	4ba2      	ldr	r3, [pc, #648]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	4aa0      	ldr	r2, [pc, #640]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004212:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004216:	4b9e      	ldr	r3, [pc, #632]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	499b      	ldr	r1, [pc, #620]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004234:	4b96      	ldr	r3, [pc, #600]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004242:	4993      	ldr	r1, [pc, #588]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004256:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004264:	498a      	ldr	r1, [pc, #552]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004278:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004286:	4982      	ldr	r1, [pc, #520]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800429a:	4b7d      	ldr	r3, [pc, #500]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4979      	ldr	r1, [pc, #484]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042bc:	4b74      	ldr	r3, [pc, #464]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	4971      	ldr	r1, [pc, #452]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042de:	4b6c      	ldr	r3, [pc, #432]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f023 020c 	bic.w	r2, r3, #12
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	4968      	ldr	r1, [pc, #416]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004300:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	4960      	ldr	r1, [pc, #384]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004330:	4957      	ldr	r1, [pc, #348]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	494f      	ldr	r1, [pc, #316]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	4946      	ldr	r1, [pc, #280]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004388:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	493e      	ldr	r1, [pc, #248]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	4935      	ldr	r1, [pc, #212]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043da:	492d      	ldr	r1, [pc, #180]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fc:	4924      	ldr	r1, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440c:	d101      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442e:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	4914      	ldr	r1, [pc, #80]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004460:	490b      	ldr	r1, [pc, #44]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004484:	4902      	ldr	r1, [pc, #8]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a0:	4b8a      	ldr	r3, [pc, #552]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	4986      	ldr	r1, [pc, #536]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044c4:	4b81      	ldr	r3, [pc, #516]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d4:	497d      	ldr	r1, [pc, #500]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d006      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80d6 	beq.w	800469c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f0:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a75      	ldr	r2, [pc, #468]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fd f95a 	bl	80017b4 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004504:	f7fd f956 	bl	80017b4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e195      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004516:	4b6d      	ldr	r3, [pc, #436]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d021      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11d      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004536:	4b65      	ldr	r3, [pc, #404]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	0e1b      	lsrs	r3, r3, #24
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	019a      	lsls	r2, r3, #6
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	071b      	lsls	r3, r3, #28
 800456a:	4958      	ldr	r1, [pc, #352]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02e      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459c:	d129      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800459e:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	0f1b      	lsrs	r3, r3, #28
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	019a      	lsls	r2, r3, #6
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	493e      	ldr	r1, [pc, #248]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045da:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	f023 021f 	bic.w	r2, r3, #31
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	3b01      	subs	r3, #1
 80045ea:	4938      	ldr	r1, [pc, #224]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01d      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	0e1b      	lsrs	r3, r3, #24
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800460c:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	0f1b      	lsrs	r3, r3, #28
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	019a      	lsls	r2, r3, #6
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	4926      	ldr	r1, [pc, #152]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d011      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	019a      	lsls	r2, r3, #6
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	491a      	ldr	r1, [pc, #104]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fd f89d 	bl	80017b4 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800467e:	f7fd f899 	bl	80017b4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0d8      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	f040 80ce 	bne.w	8004840 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fd f880 	bl	80017b4 <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046b6:	e00b      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046b8:	f7fd f87c 	bl	80017b4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d904      	bls.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0bb      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046d0:	4b5e      	ldr	r3, [pc, #376]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046dc:	d0ec      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d12a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	0f1b      	lsrs	r3, r3, #28
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	019a      	lsls	r2, r3, #6
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	4944      	ldr	r1, [pc, #272]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004748:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	3b01      	subs	r3, #1
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	493d      	ldr	r1, [pc, #244]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d022      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004770:	d11d      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	0f1b      	lsrs	r3, r3, #28
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	071b      	lsls	r3, r3, #28
 80047a6:	4929      	ldr	r1, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d028      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4917      	ldr	r1, [pc, #92]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4911      	ldr	r1, [pc, #68]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fc ffcc 	bl	80017b4 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004820:	f7fc ffc8 	bl	80017b4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e007      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800483a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483e:	d1ef      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e049      	b.n	80048f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fdb6 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 f900 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIM_ConfigClockSource+0x1c>
 8004918:	2302      	movs	r3, #2
 800491a:	e0b4      	b.n	8004a86 <HAL_TIM_ConfigClockSource+0x186>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4b56      	ldr	r3, [pc, #344]	; (8004a90 <HAL_TIM_ConfigClockSource+0x190>)
 8004938:	4013      	ands	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	d03e      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495a:	f200 8087 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	f000 8086 	beq.w	8004a72 <HAL_TIM_ConfigClockSource+0x172>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	d87f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d01a      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d87b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d050      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x11a>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d877      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d03c      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0xfa>
 8004980:	2b50      	cmp	r3, #80	; 0x50
 8004982:	d873      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d058      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x13a>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d86f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d064      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d86b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d060      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d867      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d05c      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d05a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	e062      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b6:	f000 f987 	bl	8004cc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	609a      	str	r2, [r3, #8]
      break;
 80049d2:	e04f      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e4:	f000 f970 	bl	8004cc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f6:	609a      	str	r2, [r3, #8]
      break;
 80049f8:	e03c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 f8e4 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2150      	movs	r1, #80	; 0x50
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f93d 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a18:	e02c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 f903 	bl	8004c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2160      	movs	r1, #96	; 0x60
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f92d 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a38:	e01c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 f8c4 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f91d 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a58:	e00c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f000 f914 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e003      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	fffeff88 	.word	0xfffeff88

08004a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a40      	ldr	r2, [pc, #256]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3d      	ldr	r2, [pc, #244]	; (8004bac <TIM_Base_SetConfig+0x118>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <TIM_Base_SetConfig+0x11c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <TIM_Base_SetConfig+0x120>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d027      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <TIM_Base_SetConfig+0x118>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d023      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <TIM_Base_SetConfig+0x11c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01f      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <TIM_Base_SetConfig+0x120>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d017      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <TIM_Base_SetConfig+0x128>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <TIM_Base_SetConfig+0x12c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00f      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <TIM_Base_SetConfig+0x130>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <TIM_Base_SetConfig+0x134>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <TIM_Base_SetConfig+0x138>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <TIM_Base_SetConfig+0x13c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d108      	bne.n	8004b58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	615a      	str	r2, [r3, #20]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800
 8004bc8:	40001800 	.word	0x40001800
 8004bcc:	40001c00 	.word	0x40001c00
 8004bd0:	40002000 	.word	0x40002000

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b087      	sub	sp, #28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	031b      	lsls	r3, r3, #12
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e06d      	b.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a30      	ldr	r2, [pc, #192]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d022      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d01d      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10c      	bne.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40001800 	.word	0x40001800

08004e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e040      	b.n	8004eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fb32 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f82c 	bl	8004ec0 <UART_SetConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e022      	b.n	8004eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa84 	bl	8005388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fb0b 	bl	80054cc <UART_CheckIdleState>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4ba6      	ldr	r3, [pc, #664]	; (8005184 <UART_SetConfig+0x2c4>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	6979      	ldr	r1, [r7, #20]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a94      	ldr	r2, [pc, #592]	; (8005188 <UART_SetConfig+0x2c8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d120      	bne.n	8004f7e <UART_SetConfig+0xbe>
 8004f3c:	4b93      	ldr	r3, [pc, #588]	; (800518c <UART_SetConfig+0x2cc>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d816      	bhi.n	8004f78 <UART_SetConfig+0xb8>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0x90>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f6d 	.word	0x08004f6d
 8004f58:	08004f67 	.word	0x08004f67
 8004f5c:	08004f73 	.word	0x08004f73
 8004f60:	2301      	movs	r3, #1
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e150      	b.n	8005208 <UART_SetConfig+0x348>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e14d      	b.n	8005208 <UART_SetConfig+0x348>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e14a      	b.n	8005208 <UART_SetConfig+0x348>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e147      	b.n	8005208 <UART_SetConfig+0x348>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e144      	b.n	8005208 <UART_SetConfig+0x348>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a83      	ldr	r2, [pc, #524]	; (8005190 <UART_SetConfig+0x2d0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d132      	bne.n	8004fee <UART_SetConfig+0x12e>
 8004f88:	4b80      	ldr	r3, [pc, #512]	; (800518c <UART_SetConfig+0x2cc>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b0c      	cmp	r3, #12
 8004f94:	d828      	bhi.n	8004fe8 <UART_SetConfig+0x128>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0xdc>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fe9 	.word	0x08004fe9
 8004fa8:	08004fe9 	.word	0x08004fe9
 8004fac:	08004fdd 	.word	0x08004fdd
 8004fb0:	08004fe9 	.word	0x08004fe9
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004fd7 	.word	0x08004fd7
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004fe3 	.word	0x08004fe3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e118      	b.n	8005208 <UART_SetConfig+0x348>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e115      	b.n	8005208 <UART_SetConfig+0x348>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e112      	b.n	8005208 <UART_SetConfig+0x348>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e10f      	b.n	8005208 <UART_SetConfig+0x348>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e10c      	b.n	8005208 <UART_SetConfig+0x348>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a68      	ldr	r2, [pc, #416]	; (8005194 <UART_SetConfig+0x2d4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d120      	bne.n	800503a <UART_SetConfig+0x17a>
 8004ff8:	4b64      	ldr	r3, [pc, #400]	; (800518c <UART_SetConfig+0x2cc>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005002:	2b30      	cmp	r3, #48	; 0x30
 8005004:	d013      	beq.n	800502e <UART_SetConfig+0x16e>
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d814      	bhi.n	8005034 <UART_SetConfig+0x174>
 800500a:	2b20      	cmp	r3, #32
 800500c:	d009      	beq.n	8005022 <UART_SetConfig+0x162>
 800500e:	2b20      	cmp	r3, #32
 8005010:	d810      	bhi.n	8005034 <UART_SetConfig+0x174>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <UART_SetConfig+0x15c>
 8005016:	2b10      	cmp	r3, #16
 8005018:	d006      	beq.n	8005028 <UART_SetConfig+0x168>
 800501a:	e00b      	b.n	8005034 <UART_SetConfig+0x174>
 800501c:	2300      	movs	r3, #0
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e0f2      	b.n	8005208 <UART_SetConfig+0x348>
 8005022:	2302      	movs	r3, #2
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e0ef      	b.n	8005208 <UART_SetConfig+0x348>
 8005028:	2304      	movs	r3, #4
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e0ec      	b.n	8005208 <UART_SetConfig+0x348>
 800502e:	2308      	movs	r3, #8
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e0e9      	b.n	8005208 <UART_SetConfig+0x348>
 8005034:	2310      	movs	r3, #16
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e0e6      	b.n	8005208 <UART_SetConfig+0x348>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a56      	ldr	r2, [pc, #344]	; (8005198 <UART_SetConfig+0x2d8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d120      	bne.n	8005086 <UART_SetConfig+0x1c6>
 8005044:	4b51      	ldr	r3, [pc, #324]	; (800518c <UART_SetConfig+0x2cc>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800504e:	2bc0      	cmp	r3, #192	; 0xc0
 8005050:	d013      	beq.n	800507a <UART_SetConfig+0x1ba>
 8005052:	2bc0      	cmp	r3, #192	; 0xc0
 8005054:	d814      	bhi.n	8005080 <UART_SetConfig+0x1c0>
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d009      	beq.n	800506e <UART_SetConfig+0x1ae>
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d810      	bhi.n	8005080 <UART_SetConfig+0x1c0>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <UART_SetConfig+0x1a8>
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d006      	beq.n	8005074 <UART_SetConfig+0x1b4>
 8005066:	e00b      	b.n	8005080 <UART_SetConfig+0x1c0>
 8005068:	2300      	movs	r3, #0
 800506a:	77fb      	strb	r3, [r7, #31]
 800506c:	e0cc      	b.n	8005208 <UART_SetConfig+0x348>
 800506e:	2302      	movs	r3, #2
 8005070:	77fb      	strb	r3, [r7, #31]
 8005072:	e0c9      	b.n	8005208 <UART_SetConfig+0x348>
 8005074:	2304      	movs	r3, #4
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e0c6      	b.n	8005208 <UART_SetConfig+0x348>
 800507a:	2308      	movs	r3, #8
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e0c3      	b.n	8005208 <UART_SetConfig+0x348>
 8005080:	2310      	movs	r3, #16
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e0c0      	b.n	8005208 <UART_SetConfig+0x348>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a44      	ldr	r2, [pc, #272]	; (800519c <UART_SetConfig+0x2dc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d125      	bne.n	80050dc <UART_SetConfig+0x21c>
 8005090:	4b3e      	ldr	r3, [pc, #248]	; (800518c <UART_SetConfig+0x2cc>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509e:	d017      	beq.n	80050d0 <UART_SetConfig+0x210>
 80050a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a4:	d817      	bhi.n	80050d6 <UART_SetConfig+0x216>
 80050a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050aa:	d00b      	beq.n	80050c4 <UART_SetConfig+0x204>
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b0:	d811      	bhi.n	80050d6 <UART_SetConfig+0x216>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <UART_SetConfig+0x1fe>
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d006      	beq.n	80050ca <UART_SetConfig+0x20a>
 80050bc:	e00b      	b.n	80050d6 <UART_SetConfig+0x216>
 80050be:	2300      	movs	r3, #0
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e0a1      	b.n	8005208 <UART_SetConfig+0x348>
 80050c4:	2302      	movs	r3, #2
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e09e      	b.n	8005208 <UART_SetConfig+0x348>
 80050ca:	2304      	movs	r3, #4
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e09b      	b.n	8005208 <UART_SetConfig+0x348>
 80050d0:	2308      	movs	r3, #8
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e098      	b.n	8005208 <UART_SetConfig+0x348>
 80050d6:	2310      	movs	r3, #16
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e095      	b.n	8005208 <UART_SetConfig+0x348>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <UART_SetConfig+0x2e0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d125      	bne.n	8005132 <UART_SetConfig+0x272>
 80050e6:	4b29      	ldr	r3, [pc, #164]	; (800518c <UART_SetConfig+0x2cc>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050f4:	d017      	beq.n	8005126 <UART_SetConfig+0x266>
 80050f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050fa:	d817      	bhi.n	800512c <UART_SetConfig+0x26c>
 80050fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005100:	d00b      	beq.n	800511a <UART_SetConfig+0x25a>
 8005102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005106:	d811      	bhi.n	800512c <UART_SetConfig+0x26c>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <UART_SetConfig+0x254>
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005110:	d006      	beq.n	8005120 <UART_SetConfig+0x260>
 8005112:	e00b      	b.n	800512c <UART_SetConfig+0x26c>
 8005114:	2301      	movs	r3, #1
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e076      	b.n	8005208 <UART_SetConfig+0x348>
 800511a:	2302      	movs	r3, #2
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e073      	b.n	8005208 <UART_SetConfig+0x348>
 8005120:	2304      	movs	r3, #4
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e070      	b.n	8005208 <UART_SetConfig+0x348>
 8005126:	2308      	movs	r3, #8
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e06d      	b.n	8005208 <UART_SetConfig+0x348>
 800512c:	2310      	movs	r3, #16
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e06a      	b.n	8005208 <UART_SetConfig+0x348>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <UART_SetConfig+0x2e4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d138      	bne.n	80051ae <UART_SetConfig+0x2ee>
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <UART_SetConfig+0x2cc>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005146:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800514a:	d017      	beq.n	800517c <UART_SetConfig+0x2bc>
 800514c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005150:	d82a      	bhi.n	80051a8 <UART_SetConfig+0x2e8>
 8005152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005156:	d00b      	beq.n	8005170 <UART_SetConfig+0x2b0>
 8005158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515c:	d824      	bhi.n	80051a8 <UART_SetConfig+0x2e8>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <UART_SetConfig+0x2aa>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d006      	beq.n	8005176 <UART_SetConfig+0x2b6>
 8005168:	e01e      	b.n	80051a8 <UART_SetConfig+0x2e8>
 800516a:	2300      	movs	r3, #0
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e04b      	b.n	8005208 <UART_SetConfig+0x348>
 8005170:	2302      	movs	r3, #2
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e048      	b.n	8005208 <UART_SetConfig+0x348>
 8005176:	2304      	movs	r3, #4
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e045      	b.n	8005208 <UART_SetConfig+0x348>
 800517c:	2308      	movs	r3, #8
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e042      	b.n	8005208 <UART_SetConfig+0x348>
 8005182:	bf00      	nop
 8005184:	efff69f3 	.word	0xefff69f3
 8005188:	40011000 	.word	0x40011000
 800518c:	40023800 	.word	0x40023800
 8005190:	40004400 	.word	0x40004400
 8005194:	40004800 	.word	0x40004800
 8005198:	40004c00 	.word	0x40004c00
 800519c:	40005000 	.word	0x40005000
 80051a0:	40011400 	.word	0x40011400
 80051a4:	40007800 	.word	0x40007800
 80051a8:	2310      	movs	r3, #16
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e02c      	b.n	8005208 <UART_SetConfig+0x348>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a72      	ldr	r2, [pc, #456]	; (800537c <UART_SetConfig+0x4bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d125      	bne.n	8005204 <UART_SetConfig+0x344>
 80051b8:	4b71      	ldr	r3, [pc, #452]	; (8005380 <UART_SetConfig+0x4c0>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051c6:	d017      	beq.n	80051f8 <UART_SetConfig+0x338>
 80051c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051cc:	d817      	bhi.n	80051fe <UART_SetConfig+0x33e>
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d2:	d00b      	beq.n	80051ec <UART_SetConfig+0x32c>
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d8:	d811      	bhi.n	80051fe <UART_SetConfig+0x33e>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <UART_SetConfig+0x326>
 80051de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e2:	d006      	beq.n	80051f2 <UART_SetConfig+0x332>
 80051e4:	e00b      	b.n	80051fe <UART_SetConfig+0x33e>
 80051e6:	2300      	movs	r3, #0
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e00d      	b.n	8005208 <UART_SetConfig+0x348>
 80051ec:	2302      	movs	r3, #2
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e00a      	b.n	8005208 <UART_SetConfig+0x348>
 80051f2:	2304      	movs	r3, #4
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e007      	b.n	8005208 <UART_SetConfig+0x348>
 80051f8:	2308      	movs	r3, #8
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e004      	b.n	8005208 <UART_SetConfig+0x348>
 80051fe:	2310      	movs	r3, #16
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e001      	b.n	8005208 <UART_SetConfig+0x348>
 8005204:	2310      	movs	r3, #16
 8005206:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005210:	d15b      	bne.n	80052ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005212:	7ffb      	ldrb	r3, [r7, #31]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d828      	bhi.n	800526a <UART_SetConfig+0x3aa>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0x360>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	08005245 	.word	0x08005245
 8005224:	0800524d 	.word	0x0800524d
 8005228:	08005255 	.word	0x08005255
 800522c:	0800526b 	.word	0x0800526b
 8005230:	0800525b 	.word	0x0800525b
 8005234:	0800526b 	.word	0x0800526b
 8005238:	0800526b 	.word	0x0800526b
 800523c:	0800526b 	.word	0x0800526b
 8005240:	08005263 	.word	0x08005263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005244:	f7fe feb4 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8005248:	61b8      	str	r0, [r7, #24]
        break;
 800524a:	e013      	b.n	8005274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524c:	f7fe fec4 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 8005250:	61b8      	str	r0, [r7, #24]
        break;
 8005252:	e00f      	b.n	8005274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005254:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <UART_SetConfig+0x4c4>)
 8005256:	61bb      	str	r3, [r7, #24]
        break;
 8005258:	e00c      	b.n	8005274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525a:	f7fe fd97 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800525e:	61b8      	str	r0, [r7, #24]
        break;
 8005260:	e008      	b.n	8005274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005266:	61bb      	str	r3, [r7, #24]
        break;
 8005268:	e004      	b.n	8005274 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	77bb      	strb	r3, [r7, #30]
        break;
 8005272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d074      	beq.n	8005364 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	005a      	lsls	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	fbb2 f3f3 	udiv	r3, r2, r3
 800528e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b0f      	cmp	r3, #15
 8005294:	d916      	bls.n	80052c4 <UART_SetConfig+0x404>
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d212      	bcs.n	80052c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f023 030f 	bic.w	r3, r3, #15
 80052a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	89fa      	ldrh	r2, [r7, #14]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	e04f      	b.n	8005364 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	77bb      	strb	r3, [r7, #30]
 80052c8:	e04c      	b.n	8005364 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d828      	bhi.n	8005322 <UART_SetConfig+0x462>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <UART_SetConfig+0x418>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	08005305 	.word	0x08005305
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	08005323 	.word	0x08005323
 80052e8:	08005313 	.word	0x08005313
 80052ec:	08005323 	.word	0x08005323
 80052f0:	08005323 	.word	0x08005323
 80052f4:	08005323 	.word	0x08005323
 80052f8:	0800531b 	.word	0x0800531b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052fc:	f7fe fe58 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8005300:	61b8      	str	r0, [r7, #24]
        break;
 8005302:	e013      	b.n	800532c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005304:	f7fe fe68 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 8005308:	61b8      	str	r0, [r7, #24]
        break;
 800530a:	e00f      	b.n	800532c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800530c:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <UART_SetConfig+0x4c4>)
 800530e:	61bb      	str	r3, [r7, #24]
        break;
 8005310:	e00c      	b.n	800532c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005312:	f7fe fd3b 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005316:	61b8      	str	r0, [r7, #24]
        break;
 8005318:	e008      	b.n	800532c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531e:	61bb      	str	r3, [r7, #24]
        break;
 8005320:	e004      	b.n	800532c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	77bb      	strb	r3, [r7, #30]
        break;
 800532a:	bf00      	nop
    }

    if (pclk != 0U)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d018      	beq.n	8005364 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085a      	lsrs	r2, r3, #1
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	441a      	add	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d909      	bls.n	8005360 <UART_SetConfig+0x4a0>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005352:	d205      	bcs.n	8005360 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	e001      	b.n	8005364 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005370:	7fbb      	ldrb	r3, [r7, #30]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40007c00 	.word	0x40007c00
 8005380:	40023800 	.word	0x40023800
 8005384:	00f42400 	.word	0x00f42400

08005388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01a      	beq.n	800549e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005486:	d10a      	bne.n	800549e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054dc:	f7fc f96a 	bl	80017b4 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d10e      	bne.n	800550e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f831 	bl	8005566 <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e027      	b.n	800555e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d10e      	bne.n	800553a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f81b 	bl	8005566 <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e011      	b.n	800555e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b09c      	sub	sp, #112	; 0x70
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	e0a7      	b.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	f000 80a3 	beq.w	80056c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005582:	f7fc f917 	bl	80017b4 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800558e:	429a      	cmp	r2, r3
 8005590:	d302      	bcc.n	8005598 <UART_WaitOnFlagUntilTimeout+0x32>
 8005592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005594:	2b00      	cmp	r3, #0
 8005596:	d13f      	bne.n	8005618 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ac:	667b      	str	r3, [r7, #100]	; 0x64
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e6      	bne.n	8005598 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	663b      	str	r3, [r7, #96]	; 0x60
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80055ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e068      	b.n	80056ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d050      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005634:	d148      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800563e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
 8005660:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e6      	bne.n	8005640 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	613b      	str	r3, [r7, #16]
   return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	66bb      	str	r3, [r7, #104]	; 0x68
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005692:	623a      	str	r2, [r7, #32]
 8005694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	69f9      	ldr	r1, [r7, #28]
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e010      	b.n	80056ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	f43f af48 	beq.w	8005578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3770      	adds	r7, #112	; 0x70
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f4:	b084      	sub	sp, #16
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	f107 001c 	add.w	r0, r7, #28
 8005702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	2b01      	cmp	r3, #1
 800570a:	d120      	bne.n	800574e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <USB_CoreInit+0xac>)
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa96 	bl	8005c74 <USB_CoreReset>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e010      	b.n	8005770 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa8a 	bl	8005c74 <USB_CoreReset>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10b      	bne.n	800578e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f043 0206 	orr.w	r2, r3, #6
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800579a:	b004      	add	sp, #16
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	ffbdffbf 	.word	0xffbdffbf

080057a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 0201 	bic.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d115      	bne.n	8005814 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f7fb ffe9 	bl	80017cc <HAL_Delay>
      ms++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa29 	bl	8005c58 <USB_GetMode>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d01e      	beq.n	800584a <USB_SetCurrentMode+0x84>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b31      	cmp	r3, #49	; 0x31
 8005810:	d9f0      	bls.n	80057f4 <USB_SetCurrentMode+0x2e>
 8005812:	e01a      	b.n	800584a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d115      	bne.n	8005846 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005826:	2001      	movs	r0, #1
 8005828:	f7fb ffd0 	bl	80017cc <HAL_Delay>
      ms++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa10 	bl	8005c58 <USB_GetMode>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <USB_SetCurrentMode+0x84>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b31      	cmp	r3, #49	; 0x31
 8005842:	d9f0      	bls.n	8005826 <USB_SetCurrentMode+0x60>
 8005844:	e001      	b.n	800584a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e005      	b.n	8005856 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b32      	cmp	r3, #50	; 0x32
 800584e:	d101      	bne.n	8005854 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005860:	b084      	sub	sp, #16
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800586e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e009      	b.n	8005894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3340      	adds	r3, #64	; 0x40
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0e      	cmp	r3, #14
 8005898:	d9f2      	bls.n	8005880 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800589a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11c      	bne.n	80058da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e005      	b.n	80058e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	4619      	mov	r1, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	461a      	mov	r2, r3
 8005902:	680b      	ldr	r3, [r1, #0]
 8005904:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10c      	bne.n	8005926 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005912:	2100      	movs	r1, #0
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f965 	bl	8005be4 <USB_SetDevSpeed>
 800591a:	e008      	b.n	800592e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800591c:	2101      	movs	r1, #1
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f960 	bl	8005be4 <USB_SetDevSpeed>
 8005924:	e003      	b.n	800592e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005926:	2103      	movs	r1, #3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f95b 	bl	8005be4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800592e:	2110      	movs	r1, #16
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f8f3 	bl	8005b1c <USB_FlushTxFifo>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f91f 	bl	8005b84 <USB_FlushRxFifo>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	461a      	mov	r2, r3
 8005958:	2300      	movs	r3, #0
 800595a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	461a      	mov	r2, r3
 8005964:	2300      	movs	r3, #0
 8005966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e043      	b.n	8005a02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005990:	d118      	bne.n	80059c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	461a      	mov	r2, r3
 80059a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e013      	b.n	80059d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	461a      	mov	r2, r3
 80059bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e008      	b.n	80059d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	461a      	mov	r2, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	461a      	mov	r2, r3
 80059e4:	2300      	movs	r3, #0
 80059e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	461a      	mov	r2, r3
 80059f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3301      	adds	r3, #1
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3b7      	bcc.n	800597a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e043      	b.n	8005a98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a26:	d118      	bne.n	8005a5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e013      	b.n	8005a6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	e008      	b.n	8005a6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	461a      	mov	r2, r3
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3301      	adds	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d3b7      	bcc.n	8005a10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f043 0210 	orr.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <USB_DevInit+0x2b4>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <USB_DevInit+0x2b8>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b10:	b004      	add	sp, #16
 8005b12:	4770      	bx	lr
 8005b14:	803c3800 	.word	0x803c3800
 8005b18:	40000004 	.word	0x40000004

08005b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <USB_FlushTxFifo+0x64>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e01b      	b.n	8005b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	daf2      	bge.n	8005b2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	019b      	lsls	r3, r3, #6
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <USB_FlushTxFifo+0x64>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e006      	b.n	8005b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d0f0      	beq.n	8005b54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	00030d40 	.word	0x00030d40

08005b84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <USB_FlushRxFifo+0x5c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e018      	b.n	8005bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	daf2      	bge.n	8005b90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <USB_FlushRxFifo+0x5c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e006      	b.n	8005bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d0f0      	beq.n	8005bb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	00030d40 	.word	0x00030d40

08005be4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0301 	and.w	r3, r3, #1
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <USB_CoreReset+0x64>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e01b      	b.n	8005cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	daf2      	bge.n	8005c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <USB_CoreReset+0x64>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d0f0      	beq.n	8005caa <USB_CoreReset+0x36>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	00030d40 	.word	0x00030d40

08005cdc <__cvt>:
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	ed2d 8b02 	vpush	{d8}
 8005ce2:	eeb0 8b40 	vmov.f64	d8, d0
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	4617      	mov	r7, r2
 8005cea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005cec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005cee:	ee18 2a90 	vmov	r2, s17
 8005cf2:	f025 0520 	bic.w	r5, r5, #32
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	bfb6      	itet	lt
 8005cfa:	222d      	movlt	r2, #45	; 0x2d
 8005cfc:	2200      	movge	r2, #0
 8005cfe:	eeb1 8b40 	vneglt.f64	d8, d0
 8005d02:	2d46      	cmp	r5, #70	; 0x46
 8005d04:	460c      	mov	r4, r1
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	d004      	beq.n	8005d14 <__cvt+0x38>
 8005d0a:	2d45      	cmp	r5, #69	; 0x45
 8005d0c:	d100      	bne.n	8005d10 <__cvt+0x34>
 8005d0e:	3401      	adds	r4, #1
 8005d10:	2102      	movs	r1, #2
 8005d12:	e000      	b.n	8005d16 <__cvt+0x3a>
 8005d14:	2103      	movs	r1, #3
 8005d16:	ab03      	add	r3, sp, #12
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	ab02      	add	r3, sp, #8
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4622      	mov	r2, r4
 8005d20:	4633      	mov	r3, r6
 8005d22:	eeb0 0b48 	vmov.f64	d0, d8
 8005d26:	f001 f84f 	bl	8006dc8 <_dtoa_r>
 8005d2a:	2d47      	cmp	r5, #71	; 0x47
 8005d2c:	d101      	bne.n	8005d32 <__cvt+0x56>
 8005d2e:	07fb      	lsls	r3, r7, #31
 8005d30:	d51a      	bpl.n	8005d68 <__cvt+0x8c>
 8005d32:	2d46      	cmp	r5, #70	; 0x46
 8005d34:	eb00 0204 	add.w	r2, r0, r4
 8005d38:	d10c      	bne.n	8005d54 <__cvt+0x78>
 8005d3a:	7803      	ldrb	r3, [r0, #0]
 8005d3c:	2b30      	cmp	r3, #48	; 0x30
 8005d3e:	d107      	bne.n	8005d50 <__cvt+0x74>
 8005d40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d48:	bf1c      	itt	ne
 8005d4a:	f1c4 0401 	rsbne	r4, r4, #1
 8005d4e:	6034      	strne	r4, [r6, #0]
 8005d50:	6833      	ldr	r3, [r6, #0]
 8005d52:	441a      	add	r2, r3
 8005d54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5c:	bf08      	it	eq
 8005d5e:	9203      	streq	r2, [sp, #12]
 8005d60:	2130      	movs	r1, #48	; 0x30
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d307      	bcc.n	8005d78 <__cvt+0x9c>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d6c:	1a1b      	subs	r3, r3, r0
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	b005      	add	sp, #20
 8005d72:	ecbd 8b02 	vpop	{d8}
 8005d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d78:	1c5c      	adds	r4, r3, #1
 8005d7a:	9403      	str	r4, [sp, #12]
 8005d7c:	7019      	strb	r1, [r3, #0]
 8005d7e:	e7f0      	b.n	8005d62 <__cvt+0x86>

08005d80 <__exponent>:
 8005d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d82:	4603      	mov	r3, r0
 8005d84:	2900      	cmp	r1, #0
 8005d86:	bfb8      	it	lt
 8005d88:	4249      	neglt	r1, r1
 8005d8a:	f803 2b02 	strb.w	r2, [r3], #2
 8005d8e:	bfb4      	ite	lt
 8005d90:	222d      	movlt	r2, #45	; 0x2d
 8005d92:	222b      	movge	r2, #43	; 0x2b
 8005d94:	2909      	cmp	r1, #9
 8005d96:	7042      	strb	r2, [r0, #1]
 8005d98:	dd2a      	ble.n	8005df0 <__exponent+0x70>
 8005d9a:	f10d 0207 	add.w	r2, sp, #7
 8005d9e:	4617      	mov	r7, r2
 8005da0:	260a      	movs	r6, #10
 8005da2:	4694      	mov	ip, r2
 8005da4:	fb91 f5f6 	sdiv	r5, r1, r6
 8005da8:	fb06 1415 	mls	r4, r6, r5, r1
 8005dac:	3430      	adds	r4, #48	; 0x30
 8005dae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005db2:	460c      	mov	r4, r1
 8005db4:	2c63      	cmp	r4, #99	; 0x63
 8005db6:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dba:	4629      	mov	r1, r5
 8005dbc:	dcf1      	bgt.n	8005da2 <__exponent+0x22>
 8005dbe:	3130      	adds	r1, #48	; 0x30
 8005dc0:	f1ac 0402 	sub.w	r4, ip, #2
 8005dc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005dc8:	1c41      	adds	r1, r0, #1
 8005dca:	4622      	mov	r2, r4
 8005dcc:	42ba      	cmp	r2, r7
 8005dce:	d30a      	bcc.n	8005de6 <__exponent+0x66>
 8005dd0:	f10d 0209 	add.w	r2, sp, #9
 8005dd4:	eba2 020c 	sub.w	r2, r2, ip
 8005dd8:	42bc      	cmp	r4, r7
 8005dda:	bf88      	it	hi
 8005ddc:	2200      	movhi	r2, #0
 8005dde:	4413      	add	r3, r2
 8005de0:	1a18      	subs	r0, r3, r0
 8005de2:	b003      	add	sp, #12
 8005de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005de6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dee:	e7ed      	b.n	8005dcc <__exponent+0x4c>
 8005df0:	2330      	movs	r3, #48	; 0x30
 8005df2:	3130      	adds	r1, #48	; 0x30
 8005df4:	7083      	strb	r3, [r0, #2]
 8005df6:	70c1      	strb	r1, [r0, #3]
 8005df8:	1d03      	adds	r3, r0, #4
 8005dfa:	e7f1      	b.n	8005de0 <__exponent+0x60>
 8005dfc:	0000      	movs	r0, r0
	...

08005e00 <_printf_float>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	b08b      	sub	sp, #44	; 0x2c
 8005e06:	460c      	mov	r4, r1
 8005e08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	461f      	mov	r7, r3
 8005e10:	4605      	mov	r5, r0
 8005e12:	f000 fed1 	bl	8006bb8 <_localeconv_r>
 8005e16:	f8d0 b000 	ldr.w	fp, [r0]
 8005e1a:	4658      	mov	r0, fp
 8005e1c:	f7fa fa60 	bl	80002e0 <strlen>
 8005e20:	2300      	movs	r3, #0
 8005e22:	9308      	str	r3, [sp, #32]
 8005e24:	f8d8 3000 	ldr.w	r3, [r8]
 8005e28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	3307      	adds	r3, #7
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	f103 0108 	add.w	r1, r3, #8
 8005e38:	f8c8 1000 	str.w	r1, [r8]
 8005e3c:	ed93 0b00 	vldr	d0, [r3]
 8005e40:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80060a0 <_printf_float+0x2a0>
 8005e44:	eeb0 7bc0 	vabs.f64	d7, d0
 8005e48:	eeb4 7b46 	vcmp.f64	d7, d6
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005e54:	4682      	mov	sl, r0
 8005e56:	dd24      	ble.n	8005ea2 <_printf_float+0xa2>
 8005e58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	d502      	bpl.n	8005e68 <_printf_float+0x68>
 8005e62:	232d      	movs	r3, #45	; 0x2d
 8005e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e68:	498f      	ldr	r1, [pc, #572]	; (80060a8 <_printf_float+0x2a8>)
 8005e6a:	4b90      	ldr	r3, [pc, #576]	; (80060ac <_printf_float+0x2ac>)
 8005e6c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e70:	bf94      	ite	ls
 8005e72:	4688      	movls	r8, r1
 8005e74:	4698      	movhi	r8, r3
 8005e76:	2303      	movs	r3, #3
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	f022 0204 	bic.w	r2, r2, #4
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	9700      	str	r7, [sp, #0]
 8005e86:	4633      	mov	r3, r6
 8005e88:	aa09      	add	r2, sp, #36	; 0x24
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 f9d1 	bl	8006234 <_printf_common>
 8005e92:	3001      	adds	r0, #1
 8005e94:	f040 808a 	bne.w	8005fac <_printf_float+0x1ac>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	b00b      	add	sp, #44	; 0x2c
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	eeb4 0b40 	vcmp.f64	d0, d0
 8005ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eaa:	d709      	bvc.n	8005ec0 <_printf_float+0xc0>
 8005eac:	ee10 3a90 	vmov	r3, s1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bfbc      	itt	lt
 8005eb4:	232d      	movlt	r3, #45	; 0x2d
 8005eb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005eba:	497d      	ldr	r1, [pc, #500]	; (80060b0 <_printf_float+0x2b0>)
 8005ebc:	4b7d      	ldr	r3, [pc, #500]	; (80060b4 <_printf_float+0x2b4>)
 8005ebe:	e7d5      	b.n	8005e6c <_printf_float+0x6c>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ec6:	9104      	str	r1, [sp, #16]
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	d13c      	bne.n	8005f46 <_printf_float+0x146>
 8005ecc:	2306      	movs	r3, #6
 8005ece:	6063      	str	r3, [r4, #4]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	ab08      	add	r3, sp, #32
 8005ed6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005eda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ede:	ab07      	add	r3, sp, #28
 8005ee0:	6861      	ldr	r1, [r4, #4]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	6022      	str	r2, [r4, #0]
 8005ee6:	f10d 031b 	add.w	r3, sp, #27
 8005eea:	4628      	mov	r0, r5
 8005eec:	f7ff fef6 	bl	8005cdc <__cvt>
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	9907      	ldr	r1, [sp, #28]
 8005ef4:	2b47      	cmp	r3, #71	; 0x47
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	d108      	bne.n	8005f0c <_printf_float+0x10c>
 8005efa:	1cc8      	adds	r0, r1, #3
 8005efc:	db02      	blt.n	8005f04 <_printf_float+0x104>
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	4299      	cmp	r1, r3
 8005f02:	dd41      	ble.n	8005f88 <_printf_float+0x188>
 8005f04:	f1a9 0902 	sub.w	r9, r9, #2
 8005f08:	fa5f f989 	uxtb.w	r9, r9
 8005f0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f10:	d820      	bhi.n	8005f54 <_printf_float+0x154>
 8005f12:	3901      	subs	r1, #1
 8005f14:	464a      	mov	r2, r9
 8005f16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f1a:	9107      	str	r1, [sp, #28]
 8005f1c:	f7ff ff30 	bl	8005d80 <__exponent>
 8005f20:	9a08      	ldr	r2, [sp, #32]
 8005f22:	9004      	str	r0, [sp, #16]
 8005f24:	1813      	adds	r3, r2, r0
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	dc02      	bgt.n	8005f32 <_printf_float+0x132>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	07d2      	lsls	r2, r2, #31
 8005f30:	d501      	bpl.n	8005f36 <_printf_float+0x136>
 8005f32:	3301      	adds	r3, #1
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0a2      	beq.n	8005e84 <_printf_float+0x84>
 8005f3e:	232d      	movs	r3, #45	; 0x2d
 8005f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f44:	e79e      	b.n	8005e84 <_printf_float+0x84>
 8005f46:	9904      	ldr	r1, [sp, #16]
 8005f48:	2947      	cmp	r1, #71	; 0x47
 8005f4a:	d1c1      	bne.n	8005ed0 <_printf_float+0xd0>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1bf      	bne.n	8005ed0 <_printf_float+0xd0>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7bc      	b.n	8005ece <_printf_float+0xce>
 8005f54:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f58:	d118      	bne.n	8005f8c <_printf_float+0x18c>
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	dd0b      	ble.n	8005f78 <_printf_float+0x178>
 8005f60:	6121      	str	r1, [r4, #16]
 8005f62:	b913      	cbnz	r3, 8005f6a <_printf_float+0x16a>
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	07d0      	lsls	r0, r2, #31
 8005f68:	d502      	bpl.n	8005f70 <_printf_float+0x170>
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	440b      	add	r3, r1
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2300      	movs	r3, #0
 8005f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	e7de      	b.n	8005f36 <_printf_float+0x136>
 8005f78:	b913      	cbnz	r3, 8005f80 <_printf_float+0x180>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	07d2      	lsls	r2, r2, #31
 8005f7e:	d501      	bpl.n	8005f84 <_printf_float+0x184>
 8005f80:	3302      	adds	r3, #2
 8005f82:	e7f4      	b.n	8005f6e <_printf_float+0x16e>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e7f2      	b.n	8005f6e <_printf_float+0x16e>
 8005f88:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	db05      	blt.n	8005f9e <_printf_float+0x19e>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	6121      	str	r1, [r4, #16]
 8005f96:	07d8      	lsls	r0, r3, #31
 8005f98:	d5ea      	bpl.n	8005f70 <_printf_float+0x170>
 8005f9a:	1c4b      	adds	r3, r1, #1
 8005f9c:	e7e7      	b.n	8005f6e <_printf_float+0x16e>
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	bfd4      	ite	le
 8005fa2:	f1c1 0202 	rsble	r2, r1, #2
 8005fa6:	2201      	movgt	r2, #1
 8005fa8:	4413      	add	r3, r2
 8005faa:	e7e0      	b.n	8005f6e <_printf_float+0x16e>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	055a      	lsls	r2, r3, #21
 8005fb0:	d407      	bmi.n	8005fc2 <_printf_float+0x1c2>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d12a      	bne.n	8006016 <_printf_float+0x216>
 8005fc0:	e76a      	b.n	8005e98 <_printf_float+0x98>
 8005fc2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fc6:	f240 80e0 	bls.w	800618a <_printf_float+0x38a>
 8005fca:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005fce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	d133      	bne.n	8006040 <_printf_float+0x240>
 8005fd8:	4a37      	ldr	r2, [pc, #220]	; (80060b8 <_printf_float+0x2b8>)
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af58 	beq.w	8005e98 <_printf_float+0x98>
 8005fe8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	db02      	blt.n	8005ff6 <_printf_float+0x1f6>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07d8      	lsls	r0, r3, #31
 8005ff4:	d50f      	bpl.n	8006016 <_printf_float+0x216>
 8005ff6:	4653      	mov	r3, sl
 8005ff8:	465a      	mov	r2, fp
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f af49 	beq.w	8005e98 <_printf_float+0x98>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	f104 091a 	add.w	r9, r4, #26
 800600e:	9b08      	ldr	r3, [sp, #32]
 8006010:	3b01      	subs	r3, #1
 8006012:	4543      	cmp	r3, r8
 8006014:	dc09      	bgt.n	800602a <_printf_float+0x22a>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	079b      	lsls	r3, r3, #30
 800601a:	f100 8106 	bmi.w	800622a <_printf_float+0x42a>
 800601e:	68e0      	ldr	r0, [r4, #12]
 8006020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006022:	4298      	cmp	r0, r3
 8006024:	bfb8      	it	lt
 8006026:	4618      	movlt	r0, r3
 8006028:	e738      	b.n	8005e9c <_printf_float+0x9c>
 800602a:	2301      	movs	r3, #1
 800602c:	464a      	mov	r2, r9
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af2f 	beq.w	8005e98 <_printf_float+0x98>
 800603a:	f108 0801 	add.w	r8, r8, #1
 800603e:	e7e6      	b.n	800600e <_printf_float+0x20e>
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dc3a      	bgt.n	80060bc <_printf_float+0x2bc>
 8006046:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <_printf_float+0x2b8>)
 8006048:	2301      	movs	r3, #1
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f af21 	beq.w	8005e98 <_printf_float+0x98>
 8006056:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800605a:	4313      	orrs	r3, r2
 800605c:	d102      	bne.n	8006064 <_printf_float+0x264>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	07d9      	lsls	r1, r3, #31
 8006062:	d5d8      	bpl.n	8006016 <_printf_float+0x216>
 8006064:	4653      	mov	r3, sl
 8006066:	465a      	mov	r2, fp
 8006068:	4631      	mov	r1, r6
 800606a:	4628      	mov	r0, r5
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f af12 	beq.w	8005e98 <_printf_float+0x98>
 8006074:	f04f 0900 	mov.w	r9, #0
 8006078:	f104 0a1a 	add.w	sl, r4, #26
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	425b      	negs	r3, r3
 8006080:	454b      	cmp	r3, r9
 8006082:	dc01      	bgt.n	8006088 <_printf_float+0x288>
 8006084:	9b08      	ldr	r3, [sp, #32]
 8006086:	e795      	b.n	8005fb4 <_printf_float+0x1b4>
 8006088:	2301      	movs	r3, #1
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af00 	beq.w	8005e98 <_printf_float+0x98>
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	e7ee      	b.n	800607c <_printf_float+0x27c>
 800609e:	bf00      	nop
 80060a0:	ffffffff 	.word	0xffffffff
 80060a4:	7fefffff 	.word	0x7fefffff
 80060a8:	0800a2b8 	.word	0x0800a2b8
 80060ac:	0800a2bc 	.word	0x0800a2bc
 80060b0:	0800a2c0 	.word	0x0800a2c0
 80060b4:	0800a2c4 	.word	0x0800a2c4
 80060b8:	0800a2c8 	.word	0x0800a2c8
 80060bc:	9a08      	ldr	r2, [sp, #32]
 80060be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bfa8      	it	ge
 80060c4:	461a      	movge	r2, r3
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	4691      	mov	r9, r2
 80060ca:	dc38      	bgt.n	800613e <_printf_float+0x33e>
 80060cc:	2300      	movs	r3, #0
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060d4:	f104 021a 	add.w	r2, r4, #26
 80060d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060da:	9905      	ldr	r1, [sp, #20]
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	eba3 0309 	sub.w	r3, r3, r9
 80060e2:	428b      	cmp	r3, r1
 80060e4:	dc33      	bgt.n	800614e <_printf_float+0x34e>
 80060e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	db3c      	blt.n	8006168 <_printf_float+0x368>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07da      	lsls	r2, r3, #31
 80060f2:	d439      	bmi.n	8006168 <_printf_float+0x368>
 80060f4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80060f8:	eba2 0903 	sub.w	r9, r2, r3
 80060fc:	9b04      	ldr	r3, [sp, #16]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	4591      	cmp	r9, r2
 8006102:	bfa8      	it	ge
 8006104:	4691      	movge	r9, r2
 8006106:	f1b9 0f00 	cmp.w	r9, #0
 800610a:	dc35      	bgt.n	8006178 <_printf_float+0x378>
 800610c:	f04f 0800 	mov.w	r8, #0
 8006110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006114:	f104 0a1a 	add.w	sl, r4, #26
 8006118:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	eba3 0309 	sub.w	r3, r3, r9
 8006122:	4543      	cmp	r3, r8
 8006124:	f77f af77 	ble.w	8006016 <_printf_float+0x216>
 8006128:	2301      	movs	r3, #1
 800612a:	4652      	mov	r2, sl
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f aeb0 	beq.w	8005e98 <_printf_float+0x98>
 8006138:	f108 0801 	add.w	r8, r8, #1
 800613c:	e7ec      	b.n	8006118 <_printf_float+0x318>
 800613e:	4613      	mov	r3, r2
 8006140:	4631      	mov	r1, r6
 8006142:	4642      	mov	r2, r8
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	d1bf      	bne.n	80060cc <_printf_float+0x2cc>
 800614c:	e6a4      	b.n	8005e98 <_printf_float+0x98>
 800614e:	2301      	movs	r3, #1
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	9204      	str	r2, [sp, #16]
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae9d 	beq.w	8005e98 <_printf_float+0x98>
 800615e:	9b05      	ldr	r3, [sp, #20]
 8006160:	9a04      	ldr	r2, [sp, #16]
 8006162:	3301      	adds	r3, #1
 8006164:	9305      	str	r3, [sp, #20]
 8006166:	e7b7      	b.n	80060d8 <_printf_float+0x2d8>
 8006168:	4653      	mov	r3, sl
 800616a:	465a      	mov	r2, fp
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	d1be      	bne.n	80060f4 <_printf_float+0x2f4>
 8006176:	e68f      	b.n	8005e98 <_printf_float+0x98>
 8006178:	9a04      	ldr	r2, [sp, #16]
 800617a:	464b      	mov	r3, r9
 800617c:	4442      	add	r2, r8
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	d1c1      	bne.n	800610c <_printf_float+0x30c>
 8006188:	e686      	b.n	8005e98 <_printf_float+0x98>
 800618a:	9a08      	ldr	r2, [sp, #32]
 800618c:	2a01      	cmp	r2, #1
 800618e:	dc01      	bgt.n	8006194 <_printf_float+0x394>
 8006190:	07db      	lsls	r3, r3, #31
 8006192:	d537      	bpl.n	8006204 <_printf_float+0x404>
 8006194:	2301      	movs	r3, #1
 8006196:	4642      	mov	r2, r8
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f ae7a 	beq.w	8005e98 <_printf_float+0x98>
 80061a4:	4653      	mov	r3, sl
 80061a6:	465a      	mov	r2, fp
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f ae72 	beq.w	8005e98 <_printf_float+0x98>
 80061b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80061b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	9b08      	ldr	r3, [sp, #32]
 80061c2:	d01a      	beq.n	80061fa <_printf_float+0x3fa>
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f108 0201 	add.w	r2, r8, #1
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	d10e      	bne.n	80061f2 <_printf_float+0x3f2>
 80061d4:	e660      	b.n	8005e98 <_printf_float+0x98>
 80061d6:	2301      	movs	r3, #1
 80061d8:	464a      	mov	r2, r9
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f ae59 	beq.w	8005e98 <_printf_float+0x98>
 80061e6:	f108 0801 	add.w	r8, r8, #1
 80061ea:	9b08      	ldr	r3, [sp, #32]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	4543      	cmp	r3, r8
 80061f0:	dcf1      	bgt.n	80061d6 <_printf_float+0x3d6>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061f8:	e6dd      	b.n	8005fb6 <_printf_float+0x1b6>
 80061fa:	f04f 0800 	mov.w	r8, #0
 80061fe:	f104 091a 	add.w	r9, r4, #26
 8006202:	e7f2      	b.n	80061ea <_printf_float+0x3ea>
 8006204:	2301      	movs	r3, #1
 8006206:	4642      	mov	r2, r8
 8006208:	e7df      	b.n	80061ca <_printf_float+0x3ca>
 800620a:	2301      	movs	r3, #1
 800620c:	464a      	mov	r2, r9
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae3f 	beq.w	8005e98 <_printf_float+0x98>
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	68e3      	ldr	r3, [r4, #12]
 8006220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006222:	1a5b      	subs	r3, r3, r1
 8006224:	4543      	cmp	r3, r8
 8006226:	dcf0      	bgt.n	800620a <_printf_float+0x40a>
 8006228:	e6f9      	b.n	800601e <_printf_float+0x21e>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	f104 0919 	add.w	r9, r4, #25
 8006232:	e7f4      	b.n	800621e <_printf_float+0x41e>

08006234 <_printf_common>:
 8006234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006238:	4616      	mov	r6, r2
 800623a:	4699      	mov	r9, r3
 800623c:	688a      	ldr	r2, [r1, #8]
 800623e:	690b      	ldr	r3, [r1, #16]
 8006240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006244:	4293      	cmp	r3, r2
 8006246:	bfb8      	it	lt
 8006248:	4613      	movlt	r3, r2
 800624a:	6033      	str	r3, [r6, #0]
 800624c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006250:	4607      	mov	r7, r0
 8006252:	460c      	mov	r4, r1
 8006254:	b10a      	cbz	r2, 800625a <_printf_common+0x26>
 8006256:	3301      	adds	r3, #1
 8006258:	6033      	str	r3, [r6, #0]
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	0699      	lsls	r1, r3, #26
 800625e:	bf42      	ittt	mi
 8006260:	6833      	ldrmi	r3, [r6, #0]
 8006262:	3302      	addmi	r3, #2
 8006264:	6033      	strmi	r3, [r6, #0]
 8006266:	6825      	ldr	r5, [r4, #0]
 8006268:	f015 0506 	ands.w	r5, r5, #6
 800626c:	d106      	bne.n	800627c <_printf_common+0x48>
 800626e:	f104 0a19 	add.w	sl, r4, #25
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	6832      	ldr	r2, [r6, #0]
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	42ab      	cmp	r3, r5
 800627a:	dc26      	bgt.n	80062ca <_printf_common+0x96>
 800627c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006280:	1e13      	subs	r3, r2, #0
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	bf18      	it	ne
 8006286:	2301      	movne	r3, #1
 8006288:	0692      	lsls	r2, r2, #26
 800628a:	d42b      	bmi.n	80062e4 <_printf_common+0xb0>
 800628c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006290:	4649      	mov	r1, r9
 8006292:	4638      	mov	r0, r7
 8006294:	47c0      	blx	r8
 8006296:	3001      	adds	r0, #1
 8006298:	d01e      	beq.n	80062d8 <_printf_common+0xa4>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	6922      	ldr	r2, [r4, #16]
 800629e:	f003 0306 	and.w	r3, r3, #6
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	bf02      	ittt	eq
 80062a6:	68e5      	ldreq	r5, [r4, #12]
 80062a8:	6833      	ldreq	r3, [r6, #0]
 80062aa:	1aed      	subeq	r5, r5, r3
 80062ac:	68a3      	ldr	r3, [r4, #8]
 80062ae:	bf0c      	ite	eq
 80062b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b4:	2500      	movne	r5, #0
 80062b6:	4293      	cmp	r3, r2
 80062b8:	bfc4      	itt	gt
 80062ba:	1a9b      	subgt	r3, r3, r2
 80062bc:	18ed      	addgt	r5, r5, r3
 80062be:	2600      	movs	r6, #0
 80062c0:	341a      	adds	r4, #26
 80062c2:	42b5      	cmp	r5, r6
 80062c4:	d11a      	bne.n	80062fc <_printf_common+0xc8>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e008      	b.n	80062dc <_printf_common+0xa8>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4652      	mov	r2, sl
 80062ce:	4649      	mov	r1, r9
 80062d0:	4638      	mov	r0, r7
 80062d2:	47c0      	blx	r8
 80062d4:	3001      	adds	r0, #1
 80062d6:	d103      	bne.n	80062e0 <_printf_common+0xac>
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e0:	3501      	adds	r5, #1
 80062e2:	e7c6      	b.n	8006272 <_printf_common+0x3e>
 80062e4:	18e1      	adds	r1, r4, r3
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	2030      	movs	r0, #48	; 0x30
 80062ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ee:	4422      	add	r2, r4
 80062f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f8:	3302      	adds	r3, #2
 80062fa:	e7c7      	b.n	800628c <_printf_common+0x58>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4622      	mov	r2, r4
 8006300:	4649      	mov	r1, r9
 8006302:	4638      	mov	r0, r7
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d0e6      	beq.n	80062d8 <_printf_common+0xa4>
 800630a:	3601      	adds	r6, #1
 800630c:	e7d9      	b.n	80062c2 <_printf_common+0x8e>
	...

08006310 <_printf_i>:
 8006310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006314:	7e0f      	ldrb	r7, [r1, #24]
 8006316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006318:	2f78      	cmp	r7, #120	; 0x78
 800631a:	4691      	mov	r9, r2
 800631c:	4680      	mov	r8, r0
 800631e:	460c      	mov	r4, r1
 8006320:	469a      	mov	sl, r3
 8006322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006326:	d807      	bhi.n	8006338 <_printf_i+0x28>
 8006328:	2f62      	cmp	r7, #98	; 0x62
 800632a:	d80a      	bhi.n	8006342 <_printf_i+0x32>
 800632c:	2f00      	cmp	r7, #0
 800632e:	f000 80d4 	beq.w	80064da <_printf_i+0x1ca>
 8006332:	2f58      	cmp	r7, #88	; 0x58
 8006334:	f000 80c0 	beq.w	80064b8 <_printf_i+0x1a8>
 8006338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800633c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006340:	e03a      	b.n	80063b8 <_printf_i+0xa8>
 8006342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006346:	2b15      	cmp	r3, #21
 8006348:	d8f6      	bhi.n	8006338 <_printf_i+0x28>
 800634a:	a101      	add	r1, pc, #4	; (adr r1, 8006350 <_printf_i+0x40>)
 800634c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006350:	080063a9 	.word	0x080063a9
 8006354:	080063bd 	.word	0x080063bd
 8006358:	08006339 	.word	0x08006339
 800635c:	08006339 	.word	0x08006339
 8006360:	08006339 	.word	0x08006339
 8006364:	08006339 	.word	0x08006339
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006339 	.word	0x08006339
 8006370:	08006339 	.word	0x08006339
 8006374:	08006339 	.word	0x08006339
 8006378:	08006339 	.word	0x08006339
 800637c:	080064c1 	.word	0x080064c1
 8006380:	080063e9 	.word	0x080063e9
 8006384:	0800647b 	.word	0x0800647b
 8006388:	08006339 	.word	0x08006339
 800638c:	08006339 	.word	0x08006339
 8006390:	080064e3 	.word	0x080064e3
 8006394:	08006339 	.word	0x08006339
 8006398:	080063e9 	.word	0x080063e9
 800639c:	08006339 	.word	0x08006339
 80063a0:	08006339 	.word	0x08006339
 80063a4:	08006483 	.word	0x08006483
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	602a      	str	r2, [r5, #0]
 80063b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b8:	2301      	movs	r3, #1
 80063ba:	e09f      	b.n	80064fc <_printf_i+0x1ec>
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	682b      	ldr	r3, [r5, #0]
 80063c0:	0607      	lsls	r7, r0, #24
 80063c2:	f103 0104 	add.w	r1, r3, #4
 80063c6:	6029      	str	r1, [r5, #0]
 80063c8:	d501      	bpl.n	80063ce <_printf_i+0xbe>
 80063ca:	681e      	ldr	r6, [r3, #0]
 80063cc:	e003      	b.n	80063d6 <_printf_i+0xc6>
 80063ce:	0646      	lsls	r6, r0, #25
 80063d0:	d5fb      	bpl.n	80063ca <_printf_i+0xba>
 80063d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	da03      	bge.n	80063e2 <_printf_i+0xd2>
 80063da:	232d      	movs	r3, #45	; 0x2d
 80063dc:	4276      	negs	r6, r6
 80063de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e2:	485a      	ldr	r0, [pc, #360]	; (800654c <_printf_i+0x23c>)
 80063e4:	230a      	movs	r3, #10
 80063e6:	e012      	b.n	800640e <_printf_i+0xfe>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	6820      	ldr	r0, [r4, #0]
 80063ec:	1d19      	adds	r1, r3, #4
 80063ee:	6029      	str	r1, [r5, #0]
 80063f0:	0605      	lsls	r5, r0, #24
 80063f2:	d501      	bpl.n	80063f8 <_printf_i+0xe8>
 80063f4:	681e      	ldr	r6, [r3, #0]
 80063f6:	e002      	b.n	80063fe <_printf_i+0xee>
 80063f8:	0641      	lsls	r1, r0, #25
 80063fa:	d5fb      	bpl.n	80063f4 <_printf_i+0xe4>
 80063fc:	881e      	ldrh	r6, [r3, #0]
 80063fe:	4853      	ldr	r0, [pc, #332]	; (800654c <_printf_i+0x23c>)
 8006400:	2f6f      	cmp	r7, #111	; 0x6f
 8006402:	bf0c      	ite	eq
 8006404:	2308      	moveq	r3, #8
 8006406:	230a      	movne	r3, #10
 8006408:	2100      	movs	r1, #0
 800640a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800640e:	6865      	ldr	r5, [r4, #4]
 8006410:	60a5      	str	r5, [r4, #8]
 8006412:	2d00      	cmp	r5, #0
 8006414:	bfa2      	ittt	ge
 8006416:	6821      	ldrge	r1, [r4, #0]
 8006418:	f021 0104 	bicge.w	r1, r1, #4
 800641c:	6021      	strge	r1, [r4, #0]
 800641e:	b90e      	cbnz	r6, 8006424 <_printf_i+0x114>
 8006420:	2d00      	cmp	r5, #0
 8006422:	d04b      	beq.n	80064bc <_printf_i+0x1ac>
 8006424:	4615      	mov	r5, r2
 8006426:	fbb6 f1f3 	udiv	r1, r6, r3
 800642a:	fb03 6711 	mls	r7, r3, r1, r6
 800642e:	5dc7      	ldrb	r7, [r0, r7]
 8006430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006434:	4637      	mov	r7, r6
 8006436:	42bb      	cmp	r3, r7
 8006438:	460e      	mov	r6, r1
 800643a:	d9f4      	bls.n	8006426 <_printf_i+0x116>
 800643c:	2b08      	cmp	r3, #8
 800643e:	d10b      	bne.n	8006458 <_printf_i+0x148>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	07de      	lsls	r6, r3, #31
 8006444:	d508      	bpl.n	8006458 <_printf_i+0x148>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	6861      	ldr	r1, [r4, #4]
 800644a:	4299      	cmp	r1, r3
 800644c:	bfde      	ittt	le
 800644e:	2330      	movle	r3, #48	; 0x30
 8006450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006458:	1b52      	subs	r2, r2, r5
 800645a:	6122      	str	r2, [r4, #16]
 800645c:	f8cd a000 	str.w	sl, [sp]
 8006460:	464b      	mov	r3, r9
 8006462:	aa03      	add	r2, sp, #12
 8006464:	4621      	mov	r1, r4
 8006466:	4640      	mov	r0, r8
 8006468:	f7ff fee4 	bl	8006234 <_printf_common>
 800646c:	3001      	adds	r0, #1
 800646e:	d14a      	bne.n	8006506 <_printf_i+0x1f6>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	b004      	add	sp, #16
 8006476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f043 0320 	orr.w	r3, r3, #32
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	4833      	ldr	r0, [pc, #204]	; (8006550 <_printf_i+0x240>)
 8006484:	2778      	movs	r7, #120	; 0x78
 8006486:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	6829      	ldr	r1, [r5, #0]
 800648e:	061f      	lsls	r7, r3, #24
 8006490:	f851 6b04 	ldr.w	r6, [r1], #4
 8006494:	d402      	bmi.n	800649c <_printf_i+0x18c>
 8006496:	065f      	lsls	r7, r3, #25
 8006498:	bf48      	it	mi
 800649a:	b2b6      	uxthmi	r6, r6
 800649c:	07df      	lsls	r7, r3, #31
 800649e:	bf48      	it	mi
 80064a0:	f043 0320 	orrmi.w	r3, r3, #32
 80064a4:	6029      	str	r1, [r5, #0]
 80064a6:	bf48      	it	mi
 80064a8:	6023      	strmi	r3, [r4, #0]
 80064aa:	b91e      	cbnz	r6, 80064b4 <_printf_i+0x1a4>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	f023 0320 	bic.w	r3, r3, #32
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	2310      	movs	r3, #16
 80064b6:	e7a7      	b.n	8006408 <_printf_i+0xf8>
 80064b8:	4824      	ldr	r0, [pc, #144]	; (800654c <_printf_i+0x23c>)
 80064ba:	e7e4      	b.n	8006486 <_printf_i+0x176>
 80064bc:	4615      	mov	r5, r2
 80064be:	e7bd      	b.n	800643c <_printf_i+0x12c>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	6826      	ldr	r6, [r4, #0]
 80064c4:	6961      	ldr	r1, [r4, #20]
 80064c6:	1d18      	adds	r0, r3, #4
 80064c8:	6028      	str	r0, [r5, #0]
 80064ca:	0635      	lsls	r5, r6, #24
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0x1c4>
 80064d0:	6019      	str	r1, [r3, #0]
 80064d2:	e002      	b.n	80064da <_printf_i+0x1ca>
 80064d4:	0670      	lsls	r0, r6, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0x1c0>
 80064d8:	8019      	strh	r1, [r3, #0]
 80064da:	2300      	movs	r3, #0
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	4615      	mov	r5, r2
 80064e0:	e7bc      	b.n	800645c <_printf_i+0x14c>
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	1d1a      	adds	r2, r3, #4
 80064e6:	602a      	str	r2, [r5, #0]
 80064e8:	681d      	ldr	r5, [r3, #0]
 80064ea:	6862      	ldr	r2, [r4, #4]
 80064ec:	2100      	movs	r1, #0
 80064ee:	4628      	mov	r0, r5
 80064f0:	f7f9 fea6 	bl	8000240 <memchr>
 80064f4:	b108      	cbz	r0, 80064fa <_printf_i+0x1ea>
 80064f6:	1b40      	subs	r0, r0, r5
 80064f8:	6060      	str	r0, [r4, #4]
 80064fa:	6863      	ldr	r3, [r4, #4]
 80064fc:	6123      	str	r3, [r4, #16]
 80064fe:	2300      	movs	r3, #0
 8006500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006504:	e7aa      	b.n	800645c <_printf_i+0x14c>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	462a      	mov	r2, r5
 800650a:	4649      	mov	r1, r9
 800650c:	4640      	mov	r0, r8
 800650e:	47d0      	blx	sl
 8006510:	3001      	adds	r0, #1
 8006512:	d0ad      	beq.n	8006470 <_printf_i+0x160>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	079b      	lsls	r3, r3, #30
 8006518:	d413      	bmi.n	8006542 <_printf_i+0x232>
 800651a:	68e0      	ldr	r0, [r4, #12]
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	4298      	cmp	r0, r3
 8006520:	bfb8      	it	lt
 8006522:	4618      	movlt	r0, r3
 8006524:	e7a6      	b.n	8006474 <_printf_i+0x164>
 8006526:	2301      	movs	r3, #1
 8006528:	4632      	mov	r2, r6
 800652a:	4649      	mov	r1, r9
 800652c:	4640      	mov	r0, r8
 800652e:	47d0      	blx	sl
 8006530:	3001      	adds	r0, #1
 8006532:	d09d      	beq.n	8006470 <_printf_i+0x160>
 8006534:	3501      	adds	r5, #1
 8006536:	68e3      	ldr	r3, [r4, #12]
 8006538:	9903      	ldr	r1, [sp, #12]
 800653a:	1a5b      	subs	r3, r3, r1
 800653c:	42ab      	cmp	r3, r5
 800653e:	dcf2      	bgt.n	8006526 <_printf_i+0x216>
 8006540:	e7eb      	b.n	800651a <_printf_i+0x20a>
 8006542:	2500      	movs	r5, #0
 8006544:	f104 0619 	add.w	r6, r4, #25
 8006548:	e7f5      	b.n	8006536 <_printf_i+0x226>
 800654a:	bf00      	nop
 800654c:	0800a2ca 	.word	0x0800a2ca
 8006550:	0800a2db 	.word	0x0800a2db

08006554 <_scanf_float>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	b087      	sub	sp, #28
 800655a:	4617      	mov	r7, r2
 800655c:	9303      	str	r3, [sp, #12]
 800655e:	688b      	ldr	r3, [r1, #8]
 8006560:	1e5a      	subs	r2, r3, #1
 8006562:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006566:	bf83      	ittte	hi
 8006568:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800656c:	195b      	addhi	r3, r3, r5
 800656e:	9302      	strhi	r3, [sp, #8]
 8006570:	2300      	movls	r3, #0
 8006572:	bf86      	itte	hi
 8006574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006578:	608b      	strhi	r3, [r1, #8]
 800657a:	9302      	strls	r3, [sp, #8]
 800657c:	680b      	ldr	r3, [r1, #0]
 800657e:	468b      	mov	fp, r1
 8006580:	2500      	movs	r5, #0
 8006582:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006586:	f84b 3b1c 	str.w	r3, [fp], #28
 800658a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800658e:	4680      	mov	r8, r0
 8006590:	460c      	mov	r4, r1
 8006592:	465e      	mov	r6, fp
 8006594:	46aa      	mov	sl, r5
 8006596:	46a9      	mov	r9, r5
 8006598:	9501      	str	r5, [sp, #4]
 800659a:	68a2      	ldr	r2, [r4, #8]
 800659c:	b152      	cbz	r2, 80065b4 <_scanf_float+0x60>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b4e      	cmp	r3, #78	; 0x4e
 80065a4:	d864      	bhi.n	8006670 <_scanf_float+0x11c>
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d83c      	bhi.n	8006624 <_scanf_float+0xd0>
 80065aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065ae:	b2c8      	uxtb	r0, r1
 80065b0:	280e      	cmp	r0, #14
 80065b2:	d93a      	bls.n	800662a <_scanf_float+0xd6>
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	d003      	beq.n	80065c2 <_scanf_float+0x6e>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065c6:	f1ba 0f01 	cmp.w	sl, #1
 80065ca:	f200 8113 	bhi.w	80067f4 <_scanf_float+0x2a0>
 80065ce:	455e      	cmp	r6, fp
 80065d0:	f200 8105 	bhi.w	80067de <_scanf_float+0x28a>
 80065d4:	2501      	movs	r5, #1
 80065d6:	4628      	mov	r0, r5
 80065d8:	b007      	add	sp, #28
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065e2:	2a0d      	cmp	r2, #13
 80065e4:	d8e6      	bhi.n	80065b4 <_scanf_float+0x60>
 80065e6:	a101      	add	r1, pc, #4	; (adr r1, 80065ec <_scanf_float+0x98>)
 80065e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065ec:	0800672b 	.word	0x0800672b
 80065f0:	080065b5 	.word	0x080065b5
 80065f4:	080065b5 	.word	0x080065b5
 80065f8:	080065b5 	.word	0x080065b5
 80065fc:	0800678b 	.word	0x0800678b
 8006600:	08006763 	.word	0x08006763
 8006604:	080065b5 	.word	0x080065b5
 8006608:	080065b5 	.word	0x080065b5
 800660c:	08006739 	.word	0x08006739
 8006610:	080065b5 	.word	0x080065b5
 8006614:	080065b5 	.word	0x080065b5
 8006618:	080065b5 	.word	0x080065b5
 800661c:	080065b5 	.word	0x080065b5
 8006620:	080066f1 	.word	0x080066f1
 8006624:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006628:	e7db      	b.n	80065e2 <_scanf_float+0x8e>
 800662a:	290e      	cmp	r1, #14
 800662c:	d8c2      	bhi.n	80065b4 <_scanf_float+0x60>
 800662e:	a001      	add	r0, pc, #4	; (adr r0, 8006634 <_scanf_float+0xe0>)
 8006630:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006634:	080066e3 	.word	0x080066e3
 8006638:	080065b5 	.word	0x080065b5
 800663c:	080066e3 	.word	0x080066e3
 8006640:	08006777 	.word	0x08006777
 8006644:	080065b5 	.word	0x080065b5
 8006648:	08006691 	.word	0x08006691
 800664c:	080066cd 	.word	0x080066cd
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066cd 	.word	0x080066cd
 8006658:	080066cd 	.word	0x080066cd
 800665c:	080066cd 	.word	0x080066cd
 8006660:	080066cd 	.word	0x080066cd
 8006664:	080066cd 	.word	0x080066cd
 8006668:	080066cd 	.word	0x080066cd
 800666c:	080066cd 	.word	0x080066cd
 8006670:	2b6e      	cmp	r3, #110	; 0x6e
 8006672:	d809      	bhi.n	8006688 <_scanf_float+0x134>
 8006674:	2b60      	cmp	r3, #96	; 0x60
 8006676:	d8b2      	bhi.n	80065de <_scanf_float+0x8a>
 8006678:	2b54      	cmp	r3, #84	; 0x54
 800667a:	d077      	beq.n	800676c <_scanf_float+0x218>
 800667c:	2b59      	cmp	r3, #89	; 0x59
 800667e:	d199      	bne.n	80065b4 <_scanf_float+0x60>
 8006680:	2d07      	cmp	r5, #7
 8006682:	d197      	bne.n	80065b4 <_scanf_float+0x60>
 8006684:	2508      	movs	r5, #8
 8006686:	e029      	b.n	80066dc <_scanf_float+0x188>
 8006688:	2b74      	cmp	r3, #116	; 0x74
 800668a:	d06f      	beq.n	800676c <_scanf_float+0x218>
 800668c:	2b79      	cmp	r3, #121	; 0x79
 800668e:	e7f6      	b.n	800667e <_scanf_float+0x12a>
 8006690:	6821      	ldr	r1, [r4, #0]
 8006692:	05c8      	lsls	r0, r1, #23
 8006694:	d51a      	bpl.n	80066cc <_scanf_float+0x178>
 8006696:	9b02      	ldr	r3, [sp, #8]
 8006698:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800669c:	6021      	str	r1, [r4, #0]
 800669e:	f109 0901 	add.w	r9, r9, #1
 80066a2:	b11b      	cbz	r3, 80066ac <_scanf_float+0x158>
 80066a4:	3b01      	subs	r3, #1
 80066a6:	3201      	adds	r2, #1
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	60a2      	str	r2, [r4, #8]
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	60a3      	str	r3, [r4, #8]
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	3301      	adds	r3, #1
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	f340 8084 	ble.w	80067cc <_scanf_float+0x278>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	e766      	b.n	800659a <_scanf_float+0x46>
 80066cc:	eb1a 0f05 	cmn.w	sl, r5
 80066d0:	f47f af70 	bne.w	80065b4 <_scanf_float+0x60>
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	f806 3b01 	strb.w	r3, [r6], #1
 80066e0:	e7e4      	b.n	80066ac <_scanf_float+0x158>
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	0610      	lsls	r0, r2, #24
 80066e6:	f57f af65 	bpl.w	80065b4 <_scanf_float+0x60>
 80066ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ee:	e7f4      	b.n	80066da <_scanf_float+0x186>
 80066f0:	f1ba 0f00 	cmp.w	sl, #0
 80066f4:	d10e      	bne.n	8006714 <_scanf_float+0x1c0>
 80066f6:	f1b9 0f00 	cmp.w	r9, #0
 80066fa:	d10e      	bne.n	800671a <_scanf_float+0x1c6>
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006702:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006706:	d108      	bne.n	800671a <_scanf_float+0x1c6>
 8006708:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	f04f 0a01 	mov.w	sl, #1
 8006712:	e7e3      	b.n	80066dc <_scanf_float+0x188>
 8006714:	f1ba 0f02 	cmp.w	sl, #2
 8006718:	d055      	beq.n	80067c6 <_scanf_float+0x272>
 800671a:	2d01      	cmp	r5, #1
 800671c:	d002      	beq.n	8006724 <_scanf_float+0x1d0>
 800671e:	2d04      	cmp	r5, #4
 8006720:	f47f af48 	bne.w	80065b4 <_scanf_float+0x60>
 8006724:	3501      	adds	r5, #1
 8006726:	b2ed      	uxtb	r5, r5
 8006728:	e7d8      	b.n	80066dc <_scanf_float+0x188>
 800672a:	f1ba 0f01 	cmp.w	sl, #1
 800672e:	f47f af41 	bne.w	80065b4 <_scanf_float+0x60>
 8006732:	f04f 0a02 	mov.w	sl, #2
 8006736:	e7d1      	b.n	80066dc <_scanf_float+0x188>
 8006738:	b97d      	cbnz	r5, 800675a <_scanf_float+0x206>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	f47f af3c 	bne.w	80065ba <_scanf_float+0x66>
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006748:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800674c:	f47f af39 	bne.w	80065c2 <_scanf_float+0x6e>
 8006750:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006754:	6022      	str	r2, [r4, #0]
 8006756:	2501      	movs	r5, #1
 8006758:	e7c0      	b.n	80066dc <_scanf_float+0x188>
 800675a:	2d03      	cmp	r5, #3
 800675c:	d0e2      	beq.n	8006724 <_scanf_float+0x1d0>
 800675e:	2d05      	cmp	r5, #5
 8006760:	e7de      	b.n	8006720 <_scanf_float+0x1cc>
 8006762:	2d02      	cmp	r5, #2
 8006764:	f47f af26 	bne.w	80065b4 <_scanf_float+0x60>
 8006768:	2503      	movs	r5, #3
 800676a:	e7b7      	b.n	80066dc <_scanf_float+0x188>
 800676c:	2d06      	cmp	r5, #6
 800676e:	f47f af21 	bne.w	80065b4 <_scanf_float+0x60>
 8006772:	2507      	movs	r5, #7
 8006774:	e7b2      	b.n	80066dc <_scanf_float+0x188>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	0591      	lsls	r1, r2, #22
 800677a:	f57f af1b 	bpl.w	80065b4 <_scanf_float+0x60>
 800677e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	f8cd 9004 	str.w	r9, [sp, #4]
 8006788:	e7a8      	b.n	80066dc <_scanf_float+0x188>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006790:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006794:	d006      	beq.n	80067a4 <_scanf_float+0x250>
 8006796:	0550      	lsls	r0, r2, #21
 8006798:	f57f af0c 	bpl.w	80065b4 <_scanf_float+0x60>
 800679c:	f1b9 0f00 	cmp.w	r9, #0
 80067a0:	f43f af0f 	beq.w	80065c2 <_scanf_float+0x6e>
 80067a4:	0591      	lsls	r1, r2, #22
 80067a6:	bf58      	it	pl
 80067a8:	9901      	ldrpl	r1, [sp, #4]
 80067aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067ae:	bf58      	it	pl
 80067b0:	eba9 0101 	subpl.w	r1, r9, r1
 80067b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067b8:	bf58      	it	pl
 80067ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	f04f 0900 	mov.w	r9, #0
 80067c4:	e78a      	b.n	80066dc <_scanf_float+0x188>
 80067c6:	f04f 0a03 	mov.w	sl, #3
 80067ca:	e787      	b.n	80066dc <_scanf_float+0x188>
 80067cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067d0:	4639      	mov	r1, r7
 80067d2:	4640      	mov	r0, r8
 80067d4:	4798      	blx	r3
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f aedf 	beq.w	800659a <_scanf_float+0x46>
 80067dc:	e6ea      	b.n	80065b4 <_scanf_float+0x60>
 80067de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067e6:	463a      	mov	r2, r7
 80067e8:	4640      	mov	r0, r8
 80067ea:	4798      	blx	r3
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	e6ec      	b.n	80065ce <_scanf_float+0x7a>
 80067f4:	1e6b      	subs	r3, r5, #1
 80067f6:	2b06      	cmp	r3, #6
 80067f8:	d825      	bhi.n	8006846 <_scanf_float+0x2f2>
 80067fa:	2d02      	cmp	r5, #2
 80067fc:	d836      	bhi.n	800686c <_scanf_float+0x318>
 80067fe:	455e      	cmp	r6, fp
 8006800:	f67f aee8 	bls.w	80065d4 <_scanf_float+0x80>
 8006804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006808:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800680c:	463a      	mov	r2, r7
 800680e:	4640      	mov	r0, r8
 8006810:	4798      	blx	r3
 8006812:	6923      	ldr	r3, [r4, #16]
 8006814:	3b01      	subs	r3, #1
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	e7f1      	b.n	80067fe <_scanf_float+0x2aa>
 800681a:	9802      	ldr	r0, [sp, #8]
 800681c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006820:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006824:	9002      	str	r0, [sp, #8]
 8006826:	463a      	mov	r2, r7
 8006828:	4640      	mov	r0, r8
 800682a:	4798      	blx	r3
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	3b01      	subs	r3, #1
 8006830:	6123      	str	r3, [r4, #16]
 8006832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006836:	fa5f fa8a 	uxtb.w	sl, sl
 800683a:	f1ba 0f02 	cmp.w	sl, #2
 800683e:	d1ec      	bne.n	800681a <_scanf_float+0x2c6>
 8006840:	3d03      	subs	r5, #3
 8006842:	b2ed      	uxtb	r5, r5
 8006844:	1b76      	subs	r6, r6, r5
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	05da      	lsls	r2, r3, #23
 800684a:	d52f      	bpl.n	80068ac <_scanf_float+0x358>
 800684c:	055b      	lsls	r3, r3, #21
 800684e:	d510      	bpl.n	8006872 <_scanf_float+0x31e>
 8006850:	455e      	cmp	r6, fp
 8006852:	f67f aebf 	bls.w	80065d4 <_scanf_float+0x80>
 8006856:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800685a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800685e:	463a      	mov	r2, r7
 8006860:	4640      	mov	r0, r8
 8006862:	4798      	blx	r3
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	3b01      	subs	r3, #1
 8006868:	6123      	str	r3, [r4, #16]
 800686a:	e7f1      	b.n	8006850 <_scanf_float+0x2fc>
 800686c:	46aa      	mov	sl, r5
 800686e:	9602      	str	r6, [sp, #8]
 8006870:	e7df      	b.n	8006832 <_scanf_float+0x2de>
 8006872:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	2965      	cmp	r1, #101	; 0x65
 800687a:	f103 33ff 	add.w	r3, r3, #4294967295
 800687e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	d00c      	beq.n	80068a0 <_scanf_float+0x34c>
 8006886:	2945      	cmp	r1, #69	; 0x45
 8006888:	d00a      	beq.n	80068a0 <_scanf_float+0x34c>
 800688a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800688e:	463a      	mov	r2, r7
 8006890:	4640      	mov	r0, r8
 8006892:	4798      	blx	r3
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800689a:	3b01      	subs	r3, #1
 800689c:	1eb5      	subs	r5, r6, #2
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068a4:	463a      	mov	r2, r7
 80068a6:	4640      	mov	r0, r8
 80068a8:	4798      	blx	r3
 80068aa:	462e      	mov	r6, r5
 80068ac:	6825      	ldr	r5, [r4, #0]
 80068ae:	f015 0510 	ands.w	r5, r5, #16
 80068b2:	d14d      	bne.n	8006950 <_scanf_float+0x3fc>
 80068b4:	7035      	strb	r5, [r6, #0]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c0:	d11a      	bne.n	80068f8 <_scanf_float+0x3a4>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	454b      	cmp	r3, r9
 80068c6:	eba3 0209 	sub.w	r2, r3, r9
 80068ca:	d122      	bne.n	8006912 <_scanf_float+0x3be>
 80068cc:	2200      	movs	r2, #0
 80068ce:	4659      	mov	r1, fp
 80068d0:	4640      	mov	r0, r8
 80068d2:	f002 fb5b 	bl	8008f8c <_strtod_r>
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	6821      	ldr	r1, [r4, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f011 0f02 	tst.w	r1, #2
 80068e0:	f103 0204 	add.w	r2, r3, #4
 80068e4:	d020      	beq.n	8006928 <_scanf_float+0x3d4>
 80068e6:	9903      	ldr	r1, [sp, #12]
 80068e8:	600a      	str	r2, [r1, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	ed83 0b00 	vstr	d0, [r3]
 80068f0:	68e3      	ldr	r3, [r4, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60e3      	str	r3, [r4, #12]
 80068f6:	e66e      	b.n	80065d6 <_scanf_float+0x82>
 80068f8:	9b04      	ldr	r3, [sp, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0e6      	beq.n	80068cc <_scanf_float+0x378>
 80068fe:	9905      	ldr	r1, [sp, #20]
 8006900:	230a      	movs	r3, #10
 8006902:	462a      	mov	r2, r5
 8006904:	3101      	adds	r1, #1
 8006906:	4640      	mov	r0, r8
 8006908:	f002 fbc8 	bl	800909c <_strtol_r>
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	9e05      	ldr	r6, [sp, #20]
 8006910:	1ac2      	subs	r2, r0, r3
 8006912:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006916:	429e      	cmp	r6, r3
 8006918:	bf28      	it	cs
 800691a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800691e:	490d      	ldr	r1, [pc, #52]	; (8006954 <_scanf_float+0x400>)
 8006920:	4630      	mov	r0, r6
 8006922:	f000 f8dd 	bl	8006ae0 <siprintf>
 8006926:	e7d1      	b.n	80068cc <_scanf_float+0x378>
 8006928:	f011 0f04 	tst.w	r1, #4
 800692c:	9903      	ldr	r1, [sp, #12]
 800692e:	600a      	str	r2, [r1, #0]
 8006930:	d1db      	bne.n	80068ea <_scanf_float+0x396>
 8006932:	eeb4 0b40 	vcmp.f64	d0, d0
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	681e      	ldr	r6, [r3, #0]
 800693c:	d705      	bvc.n	800694a <_scanf_float+0x3f6>
 800693e:	4806      	ldr	r0, [pc, #24]	; (8006958 <_scanf_float+0x404>)
 8006940:	f000 f9b2 	bl	8006ca8 <nanf>
 8006944:	ed86 0a00 	vstr	s0, [r6]
 8006948:	e7d2      	b.n	80068f0 <_scanf_float+0x39c>
 800694a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800694e:	e7f9      	b.n	8006944 <_scanf_float+0x3f0>
 8006950:	2500      	movs	r5, #0
 8006952:	e640      	b.n	80065d6 <_scanf_float+0x82>
 8006954:	0800a2ec 	.word	0x0800a2ec
 8006958:	0800a67d 	.word	0x0800a67d

0800695c <std>:
 800695c:	2300      	movs	r3, #0
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	e9c0 3300 	strd	r3, r3, [r0]
 8006966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800696a:	6083      	str	r3, [r0, #8]
 800696c:	8181      	strh	r1, [r0, #12]
 800696e:	6643      	str	r3, [r0, #100]	; 0x64
 8006970:	81c2      	strh	r2, [r0, #14]
 8006972:	6183      	str	r3, [r0, #24]
 8006974:	4619      	mov	r1, r3
 8006976:	2208      	movs	r2, #8
 8006978:	305c      	adds	r0, #92	; 0x5c
 800697a:	f000 f914 	bl	8006ba6 <memset>
 800697e:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <std+0x58>)
 8006980:	6263      	str	r3, [r4, #36]	; 0x24
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <std+0x5c>)
 8006984:	62a3      	str	r3, [r4, #40]	; 0x28
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <std+0x60>)
 8006988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <std+0x64>)
 800698c:	6323      	str	r3, [r4, #48]	; 0x30
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <std+0x68>)
 8006990:	6224      	str	r4, [r4, #32]
 8006992:	429c      	cmp	r4, r3
 8006994:	d006      	beq.n	80069a4 <std+0x48>
 8006996:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800699a:	4294      	cmp	r4, r2
 800699c:	d002      	beq.n	80069a4 <std+0x48>
 800699e:	33d0      	adds	r3, #208	; 0xd0
 80069a0:	429c      	cmp	r4, r3
 80069a2:	d105      	bne.n	80069b0 <std+0x54>
 80069a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ac:	f000 b978 	b.w	8006ca0 <__retarget_lock_init_recursive>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	bf00      	nop
 80069b4:	08006b21 	.word	0x08006b21
 80069b8:	08006b43 	.word	0x08006b43
 80069bc:	08006b7b 	.word	0x08006b7b
 80069c0:	08006b9f 	.word	0x08006b9f
 80069c4:	200008bc 	.word	0x200008bc

080069c8 <stdio_exit_handler>:
 80069c8:	4a02      	ldr	r2, [pc, #8]	; (80069d4 <stdio_exit_handler+0xc>)
 80069ca:	4903      	ldr	r1, [pc, #12]	; (80069d8 <stdio_exit_handler+0x10>)
 80069cc:	4803      	ldr	r0, [pc, #12]	; (80069dc <stdio_exit_handler+0x14>)
 80069ce:	f000 b869 	b.w	8006aa4 <_fwalk_sglue>
 80069d2:	bf00      	nop
 80069d4:	2000000c 	.word	0x2000000c
 80069d8:	0800945d 	.word	0x0800945d
 80069dc:	20000018 	.word	0x20000018

080069e0 <cleanup_stdio>:
 80069e0:	6841      	ldr	r1, [r0, #4]
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <cleanup_stdio+0x34>)
 80069e4:	4299      	cmp	r1, r3
 80069e6:	b510      	push	{r4, lr}
 80069e8:	4604      	mov	r4, r0
 80069ea:	d001      	beq.n	80069f0 <cleanup_stdio+0x10>
 80069ec:	f002 fd36 	bl	800945c <_fflush_r>
 80069f0:	68a1      	ldr	r1, [r4, #8]
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <cleanup_stdio+0x38>)
 80069f4:	4299      	cmp	r1, r3
 80069f6:	d002      	beq.n	80069fe <cleanup_stdio+0x1e>
 80069f8:	4620      	mov	r0, r4
 80069fa:	f002 fd2f 	bl	800945c <_fflush_r>
 80069fe:	68e1      	ldr	r1, [r4, #12]
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <cleanup_stdio+0x3c>)
 8006a02:	4299      	cmp	r1, r3
 8006a04:	d004      	beq.n	8006a10 <cleanup_stdio+0x30>
 8006a06:	4620      	mov	r0, r4
 8006a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a0c:	f002 bd26 	b.w	800945c <_fflush_r>
 8006a10:	bd10      	pop	{r4, pc}
 8006a12:	bf00      	nop
 8006a14:	200008bc 	.word	0x200008bc
 8006a18:	20000924 	.word	0x20000924
 8006a1c:	2000098c 	.word	0x2000098c

08006a20 <global_stdio_init.part.0>:
 8006a20:	b510      	push	{r4, lr}
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <global_stdio_init.part.0+0x30>)
 8006a24:	4c0b      	ldr	r4, [pc, #44]	; (8006a54 <global_stdio_init.part.0+0x34>)
 8006a26:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <global_stdio_init.part.0+0x38>)
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2104      	movs	r1, #4
 8006a30:	f7ff ff94 	bl	800695c <std>
 8006a34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a38:	2201      	movs	r2, #1
 8006a3a:	2109      	movs	r1, #9
 8006a3c:	f7ff ff8e 	bl	800695c <std>
 8006a40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a44:	2202      	movs	r2, #2
 8006a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a4a:	2112      	movs	r1, #18
 8006a4c:	f7ff bf86 	b.w	800695c <std>
 8006a50:	200009f4 	.word	0x200009f4
 8006a54:	200008bc 	.word	0x200008bc
 8006a58:	080069c9 	.word	0x080069c9

08006a5c <__sfp_lock_acquire>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__sfp_lock_acquire+0x8>)
 8006a5e:	f000 b920 	b.w	8006ca2 <__retarget_lock_acquire_recursive>
 8006a62:	bf00      	nop
 8006a64:	200009fd 	.word	0x200009fd

08006a68 <__sfp_lock_release>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__sfp_lock_release+0x8>)
 8006a6a:	f000 b91b 	b.w	8006ca4 <__retarget_lock_release_recursive>
 8006a6e:	bf00      	nop
 8006a70:	200009fd 	.word	0x200009fd

08006a74 <__sinit>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4604      	mov	r4, r0
 8006a78:	f7ff fff0 	bl	8006a5c <__sfp_lock_acquire>
 8006a7c:	6a23      	ldr	r3, [r4, #32]
 8006a7e:	b11b      	cbz	r3, 8006a88 <__sinit+0x14>
 8006a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a84:	f7ff bff0 	b.w	8006a68 <__sfp_lock_release>
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <__sinit+0x28>)
 8006a8a:	6223      	str	r3, [r4, #32]
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <__sinit+0x2c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f5      	bne.n	8006a80 <__sinit+0xc>
 8006a94:	f7ff ffc4 	bl	8006a20 <global_stdio_init.part.0>
 8006a98:	e7f2      	b.n	8006a80 <__sinit+0xc>
 8006a9a:	bf00      	nop
 8006a9c:	080069e1 	.word	0x080069e1
 8006aa0:	200009f4 	.word	0x200009f4

08006aa4 <_fwalk_sglue>:
 8006aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	4688      	mov	r8, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	2600      	movs	r6, #0
 8006ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ab8:	d505      	bpl.n	8006ac6 <_fwalk_sglue+0x22>
 8006aba:	6824      	ldr	r4, [r4, #0]
 8006abc:	2c00      	cmp	r4, #0
 8006abe:	d1f7      	bne.n	8006ab0 <_fwalk_sglue+0xc>
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d907      	bls.n	8006adc <_fwalk_sglue+0x38>
 8006acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	d003      	beq.n	8006adc <_fwalk_sglue+0x38>
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	47c0      	blx	r8
 8006ada:	4306      	orrs	r6, r0
 8006adc:	3568      	adds	r5, #104	; 0x68
 8006ade:	e7e9      	b.n	8006ab4 <_fwalk_sglue+0x10>

08006ae0 <siprintf>:
 8006ae0:	b40e      	push	{r1, r2, r3}
 8006ae2:	b500      	push	{lr}
 8006ae4:	b09c      	sub	sp, #112	; 0x70
 8006ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ae8:	9002      	str	r0, [sp, #8]
 8006aea:	9006      	str	r0, [sp, #24]
 8006aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006af0:	4809      	ldr	r0, [pc, #36]	; (8006b18 <siprintf+0x38>)
 8006af2:	9107      	str	r1, [sp, #28]
 8006af4:	9104      	str	r1, [sp, #16]
 8006af6:	4909      	ldr	r1, [pc, #36]	; (8006b1c <siprintf+0x3c>)
 8006af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afc:	9105      	str	r1, [sp, #20]
 8006afe:	6800      	ldr	r0, [r0, #0]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	a902      	add	r1, sp, #8
 8006b04:	f002 fb26 	bl	8009154 <_svfiprintf_r>
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	b01c      	add	sp, #112	; 0x70
 8006b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b14:	b003      	add	sp, #12
 8006b16:	4770      	bx	lr
 8006b18:	20000064 	.word	0x20000064
 8006b1c:	ffff0208 	.word	0xffff0208

08006b20 <__sread>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	f000 f86c 	bl	8006c04 <_read_r>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	bfab      	itete	ge
 8006b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b32:	89a3      	ldrhlt	r3, [r4, #12]
 8006b34:	181b      	addge	r3, r3, r0
 8006b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b3a:	bfac      	ite	ge
 8006b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b3e:	81a3      	strhlt	r3, [r4, #12]
 8006b40:	bd10      	pop	{r4, pc}

08006b42 <__swrite>:
 8006b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	461f      	mov	r7, r3
 8006b48:	898b      	ldrh	r3, [r1, #12]
 8006b4a:	05db      	lsls	r3, r3, #23
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	4616      	mov	r6, r2
 8006b52:	d505      	bpl.n	8006b60 <__swrite+0x1e>
 8006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b58:	2302      	movs	r3, #2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f000 f840 	bl	8006be0 <_lseek_r>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	4628      	mov	r0, r5
 8006b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b76:	f000 b857 	b.w	8006c28 <_write_r>

08006b7a <__sseek>:
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b82:	f000 f82d 	bl	8006be0 <_lseek_r>
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	bf15      	itete	ne
 8006b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b96:	81a3      	strheq	r3, [r4, #12]
 8006b98:	bf18      	it	ne
 8006b9a:	81a3      	strhne	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__sclose>:
 8006b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba2:	f000 b80d 	b.w	8006bc0 <_close_r>

08006ba6 <memset>:
 8006ba6:	4402      	add	r2, r0
 8006ba8:	4603      	mov	r3, r0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d100      	bne.n	8006bb0 <memset+0xa>
 8006bae:	4770      	bx	lr
 8006bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb4:	e7f9      	b.n	8006baa <memset+0x4>
	...

08006bb8 <_localeconv_r>:
 8006bb8:	4800      	ldr	r0, [pc, #0]	; (8006bbc <_localeconv_r+0x4>)
 8006bba:	4770      	bx	lr
 8006bbc:	20000158 	.word	0x20000158

08006bc0 <_close_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d06      	ldr	r5, [pc, #24]	; (8006bdc <_close_r+0x1c>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	f7fa fae5 	bl	800119a <_close>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_close_r+0x1a>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_close_r+0x1a>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	200009f8 	.word	0x200009f8

08006be0 <_lseek_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	; (8006c00 <_lseek_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa fafa 	bl	80011e8 <_lseek>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_lseek_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_lseek_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200009f8 	.word	0x200009f8

08006c04 <_read_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	; (8006c24 <_read_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa fa88 	bl	8001128 <_read>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_read_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_read_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	200009f8 	.word	0x200009f8

08006c28 <_write_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	; (8006c48 <_write_r+0x20>)
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	4608      	mov	r0, r1
 8006c30:	4611      	mov	r1, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	602a      	str	r2, [r5, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7fa fa93 	bl	8001162 <_write>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_write_r+0x1e>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_write_r+0x1e>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	200009f8 	.word	0x200009f8

08006c4c <__errno>:
 8006c4c:	4b01      	ldr	r3, [pc, #4]	; (8006c54 <__errno+0x8>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000064 	.word	0x20000064

08006c58 <__libc_init_array>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4d0d      	ldr	r5, [pc, #52]	; (8006c90 <__libc_init_array+0x38>)
 8006c5c:	4c0d      	ldr	r4, [pc, #52]	; (8006c94 <__libc_init_array+0x3c>)
 8006c5e:	1b64      	subs	r4, r4, r5
 8006c60:	10a4      	asrs	r4, r4, #2
 8006c62:	2600      	movs	r6, #0
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	d109      	bne.n	8006c7c <__libc_init_array+0x24>
 8006c68:	4d0b      	ldr	r5, [pc, #44]	; (8006c98 <__libc_init_array+0x40>)
 8006c6a:	4c0c      	ldr	r4, [pc, #48]	; (8006c9c <__libc_init_array+0x44>)
 8006c6c:	f003 fb0c 	bl	800a288 <_init>
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	2600      	movs	r6, #0
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d105      	bne.n	8006c86 <__libc_init_array+0x2e>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c80:	4798      	blx	r3
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7ee      	b.n	8006c64 <__libc_init_array+0xc>
 8006c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8a:	4798      	blx	r3
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	e7f2      	b.n	8006c76 <__libc_init_array+0x1e>
 8006c90:	0800a6e8 	.word	0x0800a6e8
 8006c94:	0800a6e8 	.word	0x0800a6e8
 8006c98:	0800a6e8 	.word	0x0800a6e8
 8006c9c:	0800a6ec 	.word	0x0800a6ec

08006ca0 <__retarget_lock_init_recursive>:
 8006ca0:	4770      	bx	lr

08006ca2 <__retarget_lock_acquire_recursive>:
 8006ca2:	4770      	bx	lr

08006ca4 <__retarget_lock_release_recursive>:
 8006ca4:	4770      	bx	lr
	...

08006ca8 <nanf>:
 8006ca8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006cb0 <nanf+0x8>
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	7fc00000 	.word	0x7fc00000

08006cb4 <quorem>:
 8006cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	6903      	ldr	r3, [r0, #16]
 8006cba:	690c      	ldr	r4, [r1, #16]
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	db7e      	blt.n	8006dc0 <quorem+0x10c>
 8006cc2:	3c01      	subs	r4, #1
 8006cc4:	f101 0814 	add.w	r8, r1, #20
 8006cc8:	f100 0514 	add.w	r5, r0, #20
 8006ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ce2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ce6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cea:	d331      	bcc.n	8006d50 <quorem+0x9c>
 8006cec:	f04f 0e00 	mov.w	lr, #0
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	46ac      	mov	ip, r5
 8006cf4:	46f2      	mov	sl, lr
 8006cf6:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cfa:	b293      	uxth	r3, r2
 8006cfc:	fb06 e303 	mla	r3, r6, r3, lr
 8006d00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d04:	0c1a      	lsrs	r2, r3, #16
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ebaa 0303 	sub.w	r3, sl, r3
 8006d0c:	f8dc a000 	ldr.w	sl, [ip]
 8006d10:	fa13 f38a 	uxtah	r3, r3, sl
 8006d14:	fb06 220e 	mla	r2, r6, lr, r2
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	9b00      	ldr	r3, [sp, #0]
 8006d1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d20:	b292      	uxth	r2, r2
 8006d22:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d2a:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d2e:	4581      	cmp	r9, r0
 8006d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d34:	f84c 3b04 	str.w	r3, [ip], #4
 8006d38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d3c:	d2db      	bcs.n	8006cf6 <quorem+0x42>
 8006d3e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d42:	b92b      	cbnz	r3, 8006d50 <quorem+0x9c>
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	3b04      	subs	r3, #4
 8006d48:	429d      	cmp	r5, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	d32c      	bcc.n	8006da8 <quorem+0xf4>
 8006d4e:	613c      	str	r4, [r7, #16]
 8006d50:	4638      	mov	r0, r7
 8006d52:	f001 f96b 	bl	800802c <__mcmp>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	db22      	blt.n	8006da0 <quorem+0xec>
 8006d5a:	3601      	adds	r6, #1
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d64:	f8d1 c000 	ldr.w	ip, [r1]
 8006d68:	b293      	uxth	r3, r2
 8006d6a:	1ac3      	subs	r3, r0, r3
 8006d6c:	0c12      	lsrs	r2, r2, #16
 8006d6e:	fa13 f38c 	uxtah	r3, r3, ip
 8006d72:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006d76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d80:	45c1      	cmp	r9, r8
 8006d82:	f841 3b04 	str.w	r3, [r1], #4
 8006d86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d8a:	d2e9      	bcs.n	8006d60 <quorem+0xac>
 8006d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d94:	b922      	cbnz	r2, 8006da0 <quorem+0xec>
 8006d96:	3b04      	subs	r3, #4
 8006d98:	429d      	cmp	r5, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	d30a      	bcc.n	8006db4 <quorem+0x100>
 8006d9e:	613c      	str	r4, [r7, #16]
 8006da0:	4630      	mov	r0, r6
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	3b04      	subs	r3, #4
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d1ce      	bne.n	8006d4e <quorem+0x9a>
 8006db0:	3c01      	subs	r4, #1
 8006db2:	e7c9      	b.n	8006d48 <quorem+0x94>
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	3b04      	subs	r3, #4
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d1f0      	bne.n	8006d9e <quorem+0xea>
 8006dbc:	3c01      	subs	r4, #1
 8006dbe:	e7eb      	b.n	8006d98 <quorem+0xe4>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7ee      	b.n	8006da2 <quorem+0xee>
 8006dc4:	0000      	movs	r0, r0
	...

08006dc8 <_dtoa_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	ed2d 8b02 	vpush	{d8}
 8006dd0:	69c5      	ldr	r5, [r0, #28]
 8006dd2:	b091      	sub	sp, #68	; 0x44
 8006dd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006dd8:	ec59 8b10 	vmov	r8, r9, d0
 8006ddc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006dde:	9106      	str	r1, [sp, #24]
 8006de0:	4606      	mov	r6, r0
 8006de2:	9208      	str	r2, [sp, #32]
 8006de4:	930c      	str	r3, [sp, #48]	; 0x30
 8006de6:	b975      	cbnz	r5, 8006e06 <_dtoa_r+0x3e>
 8006de8:	2010      	movs	r0, #16
 8006dea:	f000 fda5 	bl	8007938 <malloc>
 8006dee:	4602      	mov	r2, r0
 8006df0:	61f0      	str	r0, [r6, #28]
 8006df2:	b920      	cbnz	r0, 8006dfe <_dtoa_r+0x36>
 8006df4:	4ba6      	ldr	r3, [pc, #664]	; (8007090 <_dtoa_r+0x2c8>)
 8006df6:	21ef      	movs	r1, #239	; 0xef
 8006df8:	48a6      	ldr	r0, [pc, #664]	; (8007094 <_dtoa_r+0x2cc>)
 8006dfa:	f002 fba9 	bl	8009550 <__assert_func>
 8006dfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e02:	6005      	str	r5, [r0, #0]
 8006e04:	60c5      	str	r5, [r0, #12]
 8006e06:	69f3      	ldr	r3, [r6, #28]
 8006e08:	6819      	ldr	r1, [r3, #0]
 8006e0a:	b151      	cbz	r1, 8006e22 <_dtoa_r+0x5a>
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	604a      	str	r2, [r1, #4]
 8006e10:	2301      	movs	r3, #1
 8006e12:	4093      	lsls	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 fe82 	bl	8007b20 <_Bfree>
 8006e1c:	69f3      	ldr	r3, [r6, #28]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	f1b9 0300 	subs.w	r3, r9, #0
 8006e26:	bfbb      	ittet	lt
 8006e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e2c:	9303      	strlt	r3, [sp, #12]
 8006e2e:	2300      	movge	r3, #0
 8006e30:	2201      	movlt	r2, #1
 8006e32:	bfac      	ite	ge
 8006e34:	6023      	strge	r3, [r4, #0]
 8006e36:	6022      	strlt	r2, [r4, #0]
 8006e38:	4b97      	ldr	r3, [pc, #604]	; (8007098 <_dtoa_r+0x2d0>)
 8006e3a:	9c03      	ldr	r4, [sp, #12]
 8006e3c:	43a3      	bics	r3, r4
 8006e3e:	d11c      	bne.n	8006e7a <_dtoa_r+0xb2>
 8006e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006e4c:	ea53 0308 	orrs.w	r3, r3, r8
 8006e50:	f000 84fb 	beq.w	800784a <_dtoa_r+0xa82>
 8006e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e56:	b963      	cbnz	r3, 8006e72 <_dtoa_r+0xaa>
 8006e58:	4b90      	ldr	r3, [pc, #576]	; (800709c <_dtoa_r+0x2d4>)
 8006e5a:	e020      	b.n	8006e9e <_dtoa_r+0xd6>
 8006e5c:	4b90      	ldr	r3, [pc, #576]	; (80070a0 <_dtoa_r+0x2d8>)
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	3308      	adds	r3, #8
 8006e62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	9801      	ldr	r0, [sp, #4]
 8006e68:	b011      	add	sp, #68	; 0x44
 8006e6a:	ecbd 8b02 	vpop	{d8}
 8006e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e72:	4b8a      	ldr	r3, [pc, #552]	; (800709c <_dtoa_r+0x2d4>)
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	3303      	adds	r3, #3
 8006e78:	e7f3      	b.n	8006e62 <_dtoa_r+0x9a>
 8006e7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006e7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e86:	d10c      	bne.n	8006ea2 <_dtoa_r+0xda>
 8006e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 84d7 	beq.w	8007844 <_dtoa_r+0xa7c>
 8006e96:	4b83      	ldr	r3, [pc, #524]	; (80070a4 <_dtoa_r+0x2dc>)
 8006e98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	e7e1      	b.n	8006e66 <_dtoa_r+0x9e>
 8006ea2:	aa0e      	add	r2, sp, #56	; 0x38
 8006ea4:	a90f      	add	r1, sp, #60	; 0x3c
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	eeb0 0b48 	vmov.f64	d0, d8
 8006eac:	f001 f9d4 	bl	8008258 <__d2b>
 8006eb0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d046      	beq.n	8006f4a <_dtoa_r+0x182>
 8006ebc:	eeb0 7b48 	vmov.f64	d7, d8
 8006ec0:	ee18 1a90 	vmov	r1, s17
 8006ec4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006ec8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006ecc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	ee07 1a90 	vmov	s15, r1
 8006eda:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006ede:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007078 <_dtoa_r+0x2b0>
 8006ee2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ee6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007080 <_dtoa_r+0x2b8>
 8006eea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006eee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007088 <_dtoa_r+0x2c0>
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006efa:	eeb0 7b46 	vmov.f64	d7, d6
 8006efe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006f02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006f06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0e:	ee16 ba90 	vmov	fp, s13
 8006f12:	9009      	str	r0, [sp, #36]	; 0x24
 8006f14:	d508      	bpl.n	8006f28 <_dtoa_r+0x160>
 8006f16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006f1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8006f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f22:	bf18      	it	ne
 8006f24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006f28:	f1bb 0f16 	cmp.w	fp, #22
 8006f2c:	d82b      	bhi.n	8006f86 <_dtoa_r+0x1be>
 8006f2e:	495e      	ldr	r1, [pc, #376]	; (80070a8 <_dtoa_r+0x2e0>)
 8006f30:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006f34:	ed91 7b00 	vldr	d7, [r1]
 8006f38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f40:	d501      	bpl.n	8006f46 <_dtoa_r+0x17e>
 8006f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f46:	2100      	movs	r1, #0
 8006f48:	e01e      	b.n	8006f88 <_dtoa_r+0x1c0>
 8006f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8006f52:	2920      	cmp	r1, #32
 8006f54:	bfc1      	itttt	gt
 8006f56:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8006f5a:	408c      	lslgt	r4, r1
 8006f5c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006f60:	fa28 f101 	lsrgt.w	r1, r8, r1
 8006f64:	bfd6      	itet	le
 8006f66:	f1c1 0120 	rsble	r1, r1, #32
 8006f6a:	4321      	orrgt	r1, r4
 8006f6c:	fa08 f101 	lslle.w	r1, r8, r1
 8006f70:	ee07 1a90 	vmov	s15, r1
 8006f74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	ee17 1a90 	vmov	r1, s15
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006f84:	e7a7      	b.n	8006ed6 <_dtoa_r+0x10e>
 8006f86:	2101      	movs	r1, #1
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	1e53      	subs	r3, r2, #1
 8006f8c:	9305      	str	r3, [sp, #20]
 8006f8e:	bf45      	ittet	mi
 8006f90:	f1c2 0301 	rsbmi	r3, r2, #1
 8006f94:	9304      	strmi	r3, [sp, #16]
 8006f96:	2300      	movpl	r3, #0
 8006f98:	2300      	movmi	r3, #0
 8006f9a:	bf4c      	ite	mi
 8006f9c:	9305      	strmi	r3, [sp, #20]
 8006f9e:	9304      	strpl	r3, [sp, #16]
 8006fa0:	f1bb 0f00 	cmp.w	fp, #0
 8006fa4:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fa6:	db18      	blt.n	8006fda <_dtoa_r+0x212>
 8006fa8:	9b05      	ldr	r3, [sp, #20]
 8006faa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006fae:	445b      	add	r3, fp
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9a06      	ldr	r2, [sp, #24]
 8006fb6:	2a09      	cmp	r2, #9
 8006fb8:	d848      	bhi.n	800704c <_dtoa_r+0x284>
 8006fba:	2a05      	cmp	r2, #5
 8006fbc:	bfc4      	itt	gt
 8006fbe:	3a04      	subgt	r2, #4
 8006fc0:	9206      	strgt	r2, [sp, #24]
 8006fc2:	9a06      	ldr	r2, [sp, #24]
 8006fc4:	f1a2 0202 	sub.w	r2, r2, #2
 8006fc8:	bfcc      	ite	gt
 8006fca:	2400      	movgt	r4, #0
 8006fcc:	2401      	movle	r4, #1
 8006fce:	2a03      	cmp	r2, #3
 8006fd0:	d847      	bhi.n	8007062 <_dtoa_r+0x29a>
 8006fd2:	e8df f002 	tbb	[pc, r2]
 8006fd6:	2d0b      	.short	0x2d0b
 8006fd8:	392b      	.short	0x392b
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	eba3 030b 	sub.w	r3, r3, fp
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8006fe6:	f1cb 0300 	rsb	r3, fp, #0
 8006fea:	e7e3      	b.n	8006fb4 <_dtoa_r+0x1ec>
 8006fec:	2200      	movs	r2, #0
 8006fee:	9207      	str	r2, [sp, #28]
 8006ff0:	9a08      	ldr	r2, [sp, #32]
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	dc38      	bgt.n	8007068 <_dtoa_r+0x2a0>
 8006ff6:	f04f 0a01 	mov.w	sl, #1
 8006ffa:	46d1      	mov	r9, sl
 8006ffc:	4652      	mov	r2, sl
 8006ffe:	f8cd a020 	str.w	sl, [sp, #32]
 8007002:	69f7      	ldr	r7, [r6, #28]
 8007004:	2100      	movs	r1, #0
 8007006:	2004      	movs	r0, #4
 8007008:	f100 0c14 	add.w	ip, r0, #20
 800700c:	4594      	cmp	ip, r2
 800700e:	d930      	bls.n	8007072 <_dtoa_r+0x2aa>
 8007010:	6079      	str	r1, [r7, #4]
 8007012:	4630      	mov	r0, r6
 8007014:	930d      	str	r3, [sp, #52]	; 0x34
 8007016:	f000 fd43 	bl	8007aa0 <_Balloc>
 800701a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800701c:	9001      	str	r0, [sp, #4]
 800701e:	4602      	mov	r2, r0
 8007020:	2800      	cmp	r0, #0
 8007022:	d145      	bne.n	80070b0 <_dtoa_r+0x2e8>
 8007024:	4b21      	ldr	r3, [pc, #132]	; (80070ac <_dtoa_r+0x2e4>)
 8007026:	f240 11af 	movw	r1, #431	; 0x1af
 800702a:	e6e5      	b.n	8006df8 <_dtoa_r+0x30>
 800702c:	2201      	movs	r2, #1
 800702e:	e7de      	b.n	8006fee <_dtoa_r+0x226>
 8007030:	2200      	movs	r2, #0
 8007032:	9207      	str	r2, [sp, #28]
 8007034:	9a08      	ldr	r2, [sp, #32]
 8007036:	eb0b 0a02 	add.w	sl, fp, r2
 800703a:	f10a 0901 	add.w	r9, sl, #1
 800703e:	464a      	mov	r2, r9
 8007040:	2a01      	cmp	r2, #1
 8007042:	bfb8      	it	lt
 8007044:	2201      	movlt	r2, #1
 8007046:	e7dc      	b.n	8007002 <_dtoa_r+0x23a>
 8007048:	2201      	movs	r2, #1
 800704a:	e7f2      	b.n	8007032 <_dtoa_r+0x26a>
 800704c:	2401      	movs	r4, #1
 800704e:	2200      	movs	r2, #0
 8007050:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007054:	f04f 3aff 	mov.w	sl, #4294967295
 8007058:	2100      	movs	r1, #0
 800705a:	46d1      	mov	r9, sl
 800705c:	2212      	movs	r2, #18
 800705e:	9108      	str	r1, [sp, #32]
 8007060:	e7cf      	b.n	8007002 <_dtoa_r+0x23a>
 8007062:	2201      	movs	r2, #1
 8007064:	9207      	str	r2, [sp, #28]
 8007066:	e7f5      	b.n	8007054 <_dtoa_r+0x28c>
 8007068:	f8dd a020 	ldr.w	sl, [sp, #32]
 800706c:	46d1      	mov	r9, sl
 800706e:	4652      	mov	r2, sl
 8007070:	e7c7      	b.n	8007002 <_dtoa_r+0x23a>
 8007072:	3101      	adds	r1, #1
 8007074:	0040      	lsls	r0, r0, #1
 8007076:	e7c7      	b.n	8007008 <_dtoa_r+0x240>
 8007078:	636f4361 	.word	0x636f4361
 800707c:	3fd287a7 	.word	0x3fd287a7
 8007080:	8b60c8b3 	.word	0x8b60c8b3
 8007084:	3fc68a28 	.word	0x3fc68a28
 8007088:	509f79fb 	.word	0x509f79fb
 800708c:	3fd34413 	.word	0x3fd34413
 8007090:	0800a2fe 	.word	0x0800a2fe
 8007094:	0800a315 	.word	0x0800a315
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	0800a2fa 	.word	0x0800a2fa
 80070a0:	0800a2f1 	.word	0x0800a2f1
 80070a4:	0800a2c9 	.word	0x0800a2c9
 80070a8:	0800a400 	.word	0x0800a400
 80070ac:	0800a36d 	.word	0x0800a36d
 80070b0:	69f2      	ldr	r2, [r6, #28]
 80070b2:	9901      	ldr	r1, [sp, #4]
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	f1b9 0f0e 	cmp.w	r9, #14
 80070ba:	d86c      	bhi.n	8007196 <_dtoa_r+0x3ce>
 80070bc:	2c00      	cmp	r4, #0
 80070be:	d06a      	beq.n	8007196 <_dtoa_r+0x3ce>
 80070c0:	f1bb 0f00 	cmp.w	fp, #0
 80070c4:	f340 80a0 	ble.w	8007208 <_dtoa_r+0x440>
 80070c8:	4ac1      	ldr	r2, [pc, #772]	; (80073d0 <_dtoa_r+0x608>)
 80070ca:	f00b 010f 	and.w	r1, fp, #15
 80070ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80070d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80070d6:	ed92 7b00 	vldr	d7, [r2]
 80070da:	ea4f 122b 	mov.w	r2, fp, asr #4
 80070de:	f000 8087 	beq.w	80071f0 <_dtoa_r+0x428>
 80070e2:	49bc      	ldr	r1, [pc, #752]	; (80073d4 <_dtoa_r+0x60c>)
 80070e4:	ed91 6b08 	vldr	d6, [r1, #32]
 80070e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80070ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80070f0:	f002 020f 	and.w	r2, r2, #15
 80070f4:	2103      	movs	r1, #3
 80070f6:	48b7      	ldr	r0, [pc, #732]	; (80073d4 <_dtoa_r+0x60c>)
 80070f8:	2a00      	cmp	r2, #0
 80070fa:	d17b      	bne.n	80071f4 <_dtoa_r+0x42c>
 80070fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007100:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007104:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800710a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800710e:	2a00      	cmp	r2, #0
 8007110:	f000 80a0 	beq.w	8007254 <_dtoa_r+0x48c>
 8007114:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007118:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	f140 8098 	bpl.w	8007254 <_dtoa_r+0x48c>
 8007124:	f1b9 0f00 	cmp.w	r9, #0
 8007128:	f000 8094 	beq.w	8007254 <_dtoa_r+0x48c>
 800712c:	f1ba 0f00 	cmp.w	sl, #0
 8007130:	dd2f      	ble.n	8007192 <_dtoa_r+0x3ca>
 8007132:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007136:	ee27 7b06 	vmul.f64	d7, d7, d6
 800713a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800713e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007142:	3101      	adds	r1, #1
 8007144:	4654      	mov	r4, sl
 8007146:	ed9d 6b02 	vldr	d6, [sp, #8]
 800714a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800714e:	ee07 1a90 	vmov	s15, r1
 8007152:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007156:	eea7 5b06 	vfma.f64	d5, d7, d6
 800715a:	ee15 7a90 	vmov	r7, s11
 800715e:	ec51 0b15 	vmov	r0, r1, d5
 8007162:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007166:	2c00      	cmp	r4, #0
 8007168:	d177      	bne.n	800725a <_dtoa_r+0x492>
 800716a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800716e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007172:	ec41 0b17 	vmov	d7, r0, r1
 8007176:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800717a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717e:	f300 826a 	bgt.w	8007656 <_dtoa_r+0x88e>
 8007182:	eeb1 7b47 	vneg.f64	d7, d7
 8007186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718e:	f100 8260 	bmi.w	8007652 <_dtoa_r+0x88a>
 8007192:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007198:	2a00      	cmp	r2, #0
 800719a:	f2c0 811d 	blt.w	80073d8 <_dtoa_r+0x610>
 800719e:	f1bb 0f0e 	cmp.w	fp, #14
 80071a2:	f300 8119 	bgt.w	80073d8 <_dtoa_r+0x610>
 80071a6:	4b8a      	ldr	r3, [pc, #552]	; (80073d0 <_dtoa_r+0x608>)
 80071a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071ac:	ed93 6b00 	vldr	d6, [r3]
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f280 80b7 	bge.w	8007326 <_dtoa_r+0x55e>
 80071b8:	f1b9 0f00 	cmp.w	r9, #0
 80071bc:	f300 80b3 	bgt.w	8007326 <_dtoa_r+0x55e>
 80071c0:	f040 8246 	bne.w	8007650 <_dtoa_r+0x888>
 80071c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80071c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80071cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80071d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d8:	464c      	mov	r4, r9
 80071da:	464f      	mov	r7, r9
 80071dc:	f280 821c 	bge.w	8007618 <_dtoa_r+0x850>
 80071e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80071e4:	2331      	movs	r3, #49	; 0x31
 80071e6:	f808 3b01 	strb.w	r3, [r8], #1
 80071ea:	f10b 0b01 	add.w	fp, fp, #1
 80071ee:	e218      	b.n	8007622 <_dtoa_r+0x85a>
 80071f0:	2102      	movs	r1, #2
 80071f2:	e780      	b.n	80070f6 <_dtoa_r+0x32e>
 80071f4:	07d4      	lsls	r4, r2, #31
 80071f6:	d504      	bpl.n	8007202 <_dtoa_r+0x43a>
 80071f8:	ed90 6b00 	vldr	d6, [r0]
 80071fc:	3101      	adds	r1, #1
 80071fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007202:	1052      	asrs	r2, r2, #1
 8007204:	3008      	adds	r0, #8
 8007206:	e777      	b.n	80070f8 <_dtoa_r+0x330>
 8007208:	d022      	beq.n	8007250 <_dtoa_r+0x488>
 800720a:	f1cb 0200 	rsb	r2, fp, #0
 800720e:	4970      	ldr	r1, [pc, #448]	; (80073d0 <_dtoa_r+0x608>)
 8007210:	f002 000f 	and.w	r0, r2, #15
 8007214:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007218:	ed91 7b00 	vldr	d7, [r1]
 800721c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007224:	486b      	ldr	r0, [pc, #428]	; (80073d4 <_dtoa_r+0x60c>)
 8007226:	1112      	asrs	r2, r2, #4
 8007228:	2400      	movs	r4, #0
 800722a:	2102      	movs	r1, #2
 800722c:	b92a      	cbnz	r2, 800723a <_dtoa_r+0x472>
 800722e:	2c00      	cmp	r4, #0
 8007230:	f43f af6a 	beq.w	8007108 <_dtoa_r+0x340>
 8007234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007238:	e766      	b.n	8007108 <_dtoa_r+0x340>
 800723a:	07d7      	lsls	r7, r2, #31
 800723c:	d505      	bpl.n	800724a <_dtoa_r+0x482>
 800723e:	ed90 6b00 	vldr	d6, [r0]
 8007242:	3101      	adds	r1, #1
 8007244:	2401      	movs	r4, #1
 8007246:	ee27 7b06 	vmul.f64	d7, d7, d6
 800724a:	1052      	asrs	r2, r2, #1
 800724c:	3008      	adds	r0, #8
 800724e:	e7ed      	b.n	800722c <_dtoa_r+0x464>
 8007250:	2102      	movs	r1, #2
 8007252:	e759      	b.n	8007108 <_dtoa_r+0x340>
 8007254:	465a      	mov	r2, fp
 8007256:	464c      	mov	r4, r9
 8007258:	e775      	b.n	8007146 <_dtoa_r+0x37e>
 800725a:	ec41 0b17 	vmov	d7, r0, r1
 800725e:	495c      	ldr	r1, [pc, #368]	; (80073d0 <_dtoa_r+0x608>)
 8007260:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007264:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007268:	9901      	ldr	r1, [sp, #4]
 800726a:	440c      	add	r4, r1
 800726c:	9907      	ldr	r1, [sp, #28]
 800726e:	b351      	cbz	r1, 80072c6 <_dtoa_r+0x4fe>
 8007270:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007274:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007278:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800727c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007280:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007284:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007288:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800728c:	ee14 1a90 	vmov	r1, s9
 8007290:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007294:	3130      	adds	r1, #48	; 0x30
 8007296:	ee36 6b45 	vsub.f64	d6, d6, d5
 800729a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800729e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a2:	f808 1b01 	strb.w	r1, [r8], #1
 80072a6:	d439      	bmi.n	800731c <_dtoa_r+0x554>
 80072a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80072ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	d472      	bmi.n	800739c <_dtoa_r+0x5d4>
 80072b6:	45a0      	cmp	r8, r4
 80072b8:	f43f af6b 	beq.w	8007192 <_dtoa_r+0x3ca>
 80072bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80072c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80072c4:	e7e0      	b.n	8007288 <_dtoa_r+0x4c0>
 80072c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072ce:	4620      	mov	r0, r4
 80072d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80072d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80072d8:	ee14 1a90 	vmov	r1, s9
 80072dc:	3130      	adds	r1, #48	; 0x30
 80072de:	f808 1b01 	strb.w	r1, [r8], #1
 80072e2:	45a0      	cmp	r8, r4
 80072e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80072e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80072ec:	d118      	bne.n	8007320 <_dtoa_r+0x558>
 80072ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80072f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80072f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80072fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fe:	dc4d      	bgt.n	800739c <_dtoa_r+0x5d4>
 8007300:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007304:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	f57f af41 	bpl.w	8007192 <_dtoa_r+0x3ca>
 8007310:	4680      	mov	r8, r0
 8007312:	3801      	subs	r0, #1
 8007314:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d0f9      	beq.n	8007310 <_dtoa_r+0x548>
 800731c:	4693      	mov	fp, r2
 800731e:	e02a      	b.n	8007376 <_dtoa_r+0x5ae>
 8007320:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007324:	e7d6      	b.n	80072d4 <_dtoa_r+0x50c>
 8007326:	ed9d 7b02 	vldr	d7, [sp, #8]
 800732a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800732e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007332:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007336:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800733a:	ee15 3a10 	vmov	r3, s10
 800733e:	3330      	adds	r3, #48	; 0x30
 8007340:	f808 3b01 	strb.w	r3, [r8], #1
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	eba8 0303 	sub.w	r3, r8, r3
 800734a:	4599      	cmp	r9, r3
 800734c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007350:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007354:	d133      	bne.n	80073be <_dtoa_r+0x5f6>
 8007356:	ee37 7b07 	vadd.f64	d7, d7, d7
 800735a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800735e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007362:	dc1a      	bgt.n	800739a <_dtoa_r+0x5d2>
 8007364:	eeb4 7b46 	vcmp.f64	d7, d6
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d103      	bne.n	8007376 <_dtoa_r+0x5ae>
 800736e:	ee15 3a10 	vmov	r3, s10
 8007372:	07d9      	lsls	r1, r3, #31
 8007374:	d411      	bmi.n	800739a <_dtoa_r+0x5d2>
 8007376:	4629      	mov	r1, r5
 8007378:	4630      	mov	r0, r6
 800737a:	f000 fbd1 	bl	8007b20 <_Bfree>
 800737e:	2300      	movs	r3, #0
 8007380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007382:	f888 3000 	strb.w	r3, [r8]
 8007386:	f10b 0301 	add.w	r3, fp, #1
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800738e:	2b00      	cmp	r3, #0
 8007390:	f43f ad69 	beq.w	8006e66 <_dtoa_r+0x9e>
 8007394:	f8c3 8000 	str.w	r8, [r3]
 8007398:	e565      	b.n	8006e66 <_dtoa_r+0x9e>
 800739a:	465a      	mov	r2, fp
 800739c:	4643      	mov	r3, r8
 800739e:	4698      	mov	r8, r3
 80073a0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80073a4:	2939      	cmp	r1, #57	; 0x39
 80073a6:	d106      	bne.n	80073b6 <_dtoa_r+0x5ee>
 80073a8:	9901      	ldr	r1, [sp, #4]
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d1f7      	bne.n	800739e <_dtoa_r+0x5d6>
 80073ae:	9801      	ldr	r0, [sp, #4]
 80073b0:	2130      	movs	r1, #48	; 0x30
 80073b2:	3201      	adds	r2, #1
 80073b4:	7001      	strb	r1, [r0, #0]
 80073b6:	7819      	ldrb	r1, [r3, #0]
 80073b8:	3101      	adds	r1, #1
 80073ba:	7019      	strb	r1, [r3, #0]
 80073bc:	e7ae      	b.n	800731c <_dtoa_r+0x554>
 80073be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ca:	d1b2      	bne.n	8007332 <_dtoa_r+0x56a>
 80073cc:	e7d3      	b.n	8007376 <_dtoa_r+0x5ae>
 80073ce:	bf00      	nop
 80073d0:	0800a400 	.word	0x0800a400
 80073d4:	0800a3d8 	.word	0x0800a3d8
 80073d8:	9907      	ldr	r1, [sp, #28]
 80073da:	2900      	cmp	r1, #0
 80073dc:	f000 80d0 	beq.w	8007580 <_dtoa_r+0x7b8>
 80073e0:	9906      	ldr	r1, [sp, #24]
 80073e2:	2901      	cmp	r1, #1
 80073e4:	f300 80b4 	bgt.w	8007550 <_dtoa_r+0x788>
 80073e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ea:	2900      	cmp	r1, #0
 80073ec:	f000 80ac 	beq.w	8007548 <_dtoa_r+0x780>
 80073f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80073f8:	461c      	mov	r4, r3
 80073fa:	9309      	str	r3, [sp, #36]	; 0x24
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	9b05      	ldr	r3, [sp, #20]
 8007404:	2101      	movs	r1, #1
 8007406:	4413      	add	r3, r2
 8007408:	4630      	mov	r0, r6
 800740a:	9305      	str	r3, [sp, #20]
 800740c:	f000 fc88 	bl	8007d20 <__i2b>
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	4607      	mov	r7, r0
 8007414:	f1b8 0f00 	cmp.w	r8, #0
 8007418:	d00d      	beq.n	8007436 <_dtoa_r+0x66e>
 800741a:	9a05      	ldr	r2, [sp, #20]
 800741c:	2a00      	cmp	r2, #0
 800741e:	dd0a      	ble.n	8007436 <_dtoa_r+0x66e>
 8007420:	4542      	cmp	r2, r8
 8007422:	9904      	ldr	r1, [sp, #16]
 8007424:	bfa8      	it	ge
 8007426:	4642      	movge	r2, r8
 8007428:	1a89      	subs	r1, r1, r2
 800742a:	9104      	str	r1, [sp, #16]
 800742c:	9905      	ldr	r1, [sp, #20]
 800742e:	eba8 0802 	sub.w	r8, r8, r2
 8007432:	1a8a      	subs	r2, r1, r2
 8007434:	9205      	str	r2, [sp, #20]
 8007436:	b303      	cbz	r3, 800747a <_dtoa_r+0x6b2>
 8007438:	9a07      	ldr	r2, [sp, #28]
 800743a:	2a00      	cmp	r2, #0
 800743c:	f000 80a5 	beq.w	800758a <_dtoa_r+0x7c2>
 8007440:	2c00      	cmp	r4, #0
 8007442:	dd13      	ble.n	800746c <_dtoa_r+0x6a4>
 8007444:	4639      	mov	r1, r7
 8007446:	4622      	mov	r2, r4
 8007448:	4630      	mov	r0, r6
 800744a:	930d      	str	r3, [sp, #52]	; 0x34
 800744c:	f000 fd28 	bl	8007ea0 <__pow5mult>
 8007450:	462a      	mov	r2, r5
 8007452:	4601      	mov	r1, r0
 8007454:	4607      	mov	r7, r0
 8007456:	4630      	mov	r0, r6
 8007458:	f000 fc78 	bl	8007d4c <__multiply>
 800745c:	4629      	mov	r1, r5
 800745e:	9009      	str	r0, [sp, #36]	; 0x24
 8007460:	4630      	mov	r0, r6
 8007462:	f000 fb5d 	bl	8007b20 <_Bfree>
 8007466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800746a:	4615      	mov	r5, r2
 800746c:	1b1a      	subs	r2, r3, r4
 800746e:	d004      	beq.n	800747a <_dtoa_r+0x6b2>
 8007470:	4629      	mov	r1, r5
 8007472:	4630      	mov	r0, r6
 8007474:	f000 fd14 	bl	8007ea0 <__pow5mult>
 8007478:	4605      	mov	r5, r0
 800747a:	2101      	movs	r1, #1
 800747c:	4630      	mov	r0, r6
 800747e:	f000 fc4f 	bl	8007d20 <__i2b>
 8007482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007484:	2b00      	cmp	r3, #0
 8007486:	4604      	mov	r4, r0
 8007488:	f340 8081 	ble.w	800758e <_dtoa_r+0x7c6>
 800748c:	461a      	mov	r2, r3
 800748e:	4601      	mov	r1, r0
 8007490:	4630      	mov	r0, r6
 8007492:	f000 fd05 	bl	8007ea0 <__pow5mult>
 8007496:	9b06      	ldr	r3, [sp, #24]
 8007498:	2b01      	cmp	r3, #1
 800749a:	4604      	mov	r4, r0
 800749c:	dd7a      	ble.n	8007594 <_dtoa_r+0x7cc>
 800749e:	2300      	movs	r3, #0
 80074a0:	9309      	str	r3, [sp, #36]	; 0x24
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80074a8:	6910      	ldr	r0, [r2, #16]
 80074aa:	f000 fbeb 	bl	8007c84 <__hi0bits>
 80074ae:	f1c0 0020 	rsb	r0, r0, #32
 80074b2:	9b05      	ldr	r3, [sp, #20]
 80074b4:	4418      	add	r0, r3
 80074b6:	f010 001f 	ands.w	r0, r0, #31
 80074ba:	f000 8093 	beq.w	80075e4 <_dtoa_r+0x81c>
 80074be:	f1c0 0220 	rsb	r2, r0, #32
 80074c2:	2a04      	cmp	r2, #4
 80074c4:	f340 8085 	ble.w	80075d2 <_dtoa_r+0x80a>
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	f1c0 001c 	rsb	r0, r0, #28
 80074ce:	4403      	add	r3, r0
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	9b05      	ldr	r3, [sp, #20]
 80074d4:	4480      	add	r8, r0
 80074d6:	4403      	add	r3, r0
 80074d8:	9305      	str	r3, [sp, #20]
 80074da:	9b04      	ldr	r3, [sp, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd05      	ble.n	80074ec <_dtoa_r+0x724>
 80074e0:	4629      	mov	r1, r5
 80074e2:	461a      	mov	r2, r3
 80074e4:	4630      	mov	r0, r6
 80074e6:	f000 fd35 	bl	8007f54 <__lshift>
 80074ea:	4605      	mov	r5, r0
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dd05      	ble.n	80074fe <_dtoa_r+0x736>
 80074f2:	4621      	mov	r1, r4
 80074f4:	461a      	mov	r2, r3
 80074f6:	4630      	mov	r0, r6
 80074f8:	f000 fd2c 	bl	8007f54 <__lshift>
 80074fc:	4604      	mov	r4, r0
 80074fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d071      	beq.n	80075e8 <_dtoa_r+0x820>
 8007504:	4621      	mov	r1, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 fd90 	bl	800802c <__mcmp>
 800750c:	2800      	cmp	r0, #0
 800750e:	da6b      	bge.n	80075e8 <_dtoa_r+0x820>
 8007510:	2300      	movs	r3, #0
 8007512:	4629      	mov	r1, r5
 8007514:	220a      	movs	r2, #10
 8007516:	4630      	mov	r0, r6
 8007518:	f000 fb24 	bl	8007b64 <__multadd>
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007522:	4605      	mov	r5, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8197 	beq.w	8007858 <_dtoa_r+0xa90>
 800752a:	4639      	mov	r1, r7
 800752c:	2300      	movs	r3, #0
 800752e:	220a      	movs	r2, #10
 8007530:	4630      	mov	r0, r6
 8007532:	f000 fb17 	bl	8007b64 <__multadd>
 8007536:	f1ba 0f00 	cmp.w	sl, #0
 800753a:	4607      	mov	r7, r0
 800753c:	f300 8093 	bgt.w	8007666 <_dtoa_r+0x89e>
 8007540:	9b06      	ldr	r3, [sp, #24]
 8007542:	2b02      	cmp	r3, #2
 8007544:	dc57      	bgt.n	80075f6 <_dtoa_r+0x82e>
 8007546:	e08e      	b.n	8007666 <_dtoa_r+0x89e>
 8007548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800754a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800754e:	e751      	b.n	80073f4 <_dtoa_r+0x62c>
 8007550:	f109 34ff 	add.w	r4, r9, #4294967295
 8007554:	42a3      	cmp	r3, r4
 8007556:	bfbf      	itttt	lt
 8007558:	1ae2      	sublt	r2, r4, r3
 800755a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800755c:	189b      	addlt	r3, r3, r2
 800755e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007560:	bfae      	itee	ge
 8007562:	1b1c      	subge	r4, r3, r4
 8007564:	4623      	movlt	r3, r4
 8007566:	2400      	movlt	r4, #0
 8007568:	f1b9 0f00 	cmp.w	r9, #0
 800756c:	bfb5      	itete	lt
 800756e:	9a04      	ldrlt	r2, [sp, #16]
 8007570:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007574:	eba2 0809 	sublt.w	r8, r2, r9
 8007578:	464a      	movge	r2, r9
 800757a:	bfb8      	it	lt
 800757c:	2200      	movlt	r2, #0
 800757e:	e73c      	b.n	80073fa <_dtoa_r+0x632>
 8007580:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007584:	9f07      	ldr	r7, [sp, #28]
 8007586:	461c      	mov	r4, r3
 8007588:	e744      	b.n	8007414 <_dtoa_r+0x64c>
 800758a:	461a      	mov	r2, r3
 800758c:	e770      	b.n	8007470 <_dtoa_r+0x6a8>
 800758e:	9b06      	ldr	r3, [sp, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	dc18      	bgt.n	80075c6 <_dtoa_r+0x7fe>
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	b9b3      	cbnz	r3, 80075c6 <_dtoa_r+0x7fe>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800759e:	b9a2      	cbnz	r2, 80075ca <_dtoa_r+0x802>
 80075a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075a4:	0d12      	lsrs	r2, r2, #20
 80075a6:	0512      	lsls	r2, r2, #20
 80075a8:	b18a      	cbz	r2, 80075ce <_dtoa_r+0x806>
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	3301      	adds	r3, #1
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	3301      	adds	r3, #1
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	2301      	movs	r3, #1
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f47f af70 	bne.w	80074a2 <_dtoa_r+0x6da>
 80075c2:	2001      	movs	r0, #1
 80075c4:	e775      	b.n	80074b2 <_dtoa_r+0x6ea>
 80075c6:	2300      	movs	r3, #0
 80075c8:	e7f6      	b.n	80075b8 <_dtoa_r+0x7f0>
 80075ca:	9b02      	ldr	r3, [sp, #8]
 80075cc:	e7f4      	b.n	80075b8 <_dtoa_r+0x7f0>
 80075ce:	9209      	str	r2, [sp, #36]	; 0x24
 80075d0:	e7f3      	b.n	80075ba <_dtoa_r+0x7f2>
 80075d2:	d082      	beq.n	80074da <_dtoa_r+0x712>
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	321c      	adds	r2, #28
 80075d8:	4413      	add	r3, r2
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	9b05      	ldr	r3, [sp, #20]
 80075de:	4490      	add	r8, r2
 80075e0:	4413      	add	r3, r2
 80075e2:	e779      	b.n	80074d8 <_dtoa_r+0x710>
 80075e4:	4602      	mov	r2, r0
 80075e6:	e7f5      	b.n	80075d4 <_dtoa_r+0x80c>
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	dc36      	bgt.n	800765c <_dtoa_r+0x894>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	dd33      	ble.n	800765c <_dtoa_r+0x894>
 80075f4:	46ca      	mov	sl, r9
 80075f6:	f1ba 0f00 	cmp.w	sl, #0
 80075fa:	d10d      	bne.n	8007618 <_dtoa_r+0x850>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4653      	mov	r3, sl
 8007600:	2205      	movs	r2, #5
 8007602:	4630      	mov	r0, r6
 8007604:	f000 faae 	bl	8007b64 <__multadd>
 8007608:	4601      	mov	r1, r0
 800760a:	4604      	mov	r4, r0
 800760c:	4628      	mov	r0, r5
 800760e:	f000 fd0d 	bl	800802c <__mcmp>
 8007612:	2800      	cmp	r0, #0
 8007614:	f73f ade4 	bgt.w	80071e0 <_dtoa_r+0x418>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800761e:	ea6f 0b03 	mvn.w	fp, r3
 8007622:	f04f 0900 	mov.w	r9, #0
 8007626:	4621      	mov	r1, r4
 8007628:	4630      	mov	r0, r6
 800762a:	f000 fa79 	bl	8007b20 <_Bfree>
 800762e:	2f00      	cmp	r7, #0
 8007630:	f43f aea1 	beq.w	8007376 <_dtoa_r+0x5ae>
 8007634:	f1b9 0f00 	cmp.w	r9, #0
 8007638:	d005      	beq.n	8007646 <_dtoa_r+0x87e>
 800763a:	45b9      	cmp	r9, r7
 800763c:	d003      	beq.n	8007646 <_dtoa_r+0x87e>
 800763e:	4649      	mov	r1, r9
 8007640:	4630      	mov	r0, r6
 8007642:	f000 fa6d 	bl	8007b20 <_Bfree>
 8007646:	4639      	mov	r1, r7
 8007648:	4630      	mov	r0, r6
 800764a:	f000 fa69 	bl	8007b20 <_Bfree>
 800764e:	e692      	b.n	8007376 <_dtoa_r+0x5ae>
 8007650:	2400      	movs	r4, #0
 8007652:	4627      	mov	r7, r4
 8007654:	e7e0      	b.n	8007618 <_dtoa_r+0x850>
 8007656:	4693      	mov	fp, r2
 8007658:	4627      	mov	r7, r4
 800765a:	e5c1      	b.n	80071e0 <_dtoa_r+0x418>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	46ca      	mov	sl, r9
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8100 	beq.w	8007866 <_dtoa_r+0xa9e>
 8007666:	f1b8 0f00 	cmp.w	r8, #0
 800766a:	dd05      	ble.n	8007678 <_dtoa_r+0x8b0>
 800766c:	4639      	mov	r1, r7
 800766e:	4642      	mov	r2, r8
 8007670:	4630      	mov	r0, r6
 8007672:	f000 fc6f 	bl	8007f54 <__lshift>
 8007676:	4607      	mov	r7, r0
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d05d      	beq.n	800773a <_dtoa_r+0x972>
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4630      	mov	r0, r6
 8007682:	f000 fa0d 	bl	8007aa0 <_Balloc>
 8007686:	4680      	mov	r8, r0
 8007688:	b928      	cbnz	r0, 8007696 <_dtoa_r+0x8ce>
 800768a:	4b82      	ldr	r3, [pc, #520]	; (8007894 <_dtoa_r+0xacc>)
 800768c:	4602      	mov	r2, r0
 800768e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007692:	f7ff bbb1 	b.w	8006df8 <_dtoa_r+0x30>
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	3202      	adds	r2, #2
 800769a:	0092      	lsls	r2, r2, #2
 800769c:	f107 010c 	add.w	r1, r7, #12
 80076a0:	300c      	adds	r0, #12
 80076a2:	f001 ff3f 	bl	8009524 <memcpy>
 80076a6:	2201      	movs	r2, #1
 80076a8:	4641      	mov	r1, r8
 80076aa:	4630      	mov	r0, r6
 80076ac:	f000 fc52 	bl	8007f54 <__lshift>
 80076b0:	9b01      	ldr	r3, [sp, #4]
 80076b2:	3301      	adds	r3, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	4453      	add	r3, sl
 80076ba:	9308      	str	r3, [sp, #32]
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	46b9      	mov	r9, r7
 80076c4:	9307      	str	r3, [sp, #28]
 80076c6:	4607      	mov	r7, r0
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	4621      	mov	r1, r4
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4628      	mov	r0, r5
 80076d0:	9302      	str	r3, [sp, #8]
 80076d2:	f7ff faef 	bl	8006cb4 <quorem>
 80076d6:	4603      	mov	r3, r0
 80076d8:	3330      	adds	r3, #48	; 0x30
 80076da:	9005      	str	r0, [sp, #20]
 80076dc:	4649      	mov	r1, r9
 80076de:	4628      	mov	r0, r5
 80076e0:	9309      	str	r3, [sp, #36]	; 0x24
 80076e2:	f000 fca3 	bl	800802c <__mcmp>
 80076e6:	463a      	mov	r2, r7
 80076e8:	4682      	mov	sl, r0
 80076ea:	4621      	mov	r1, r4
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 fcb9 	bl	8008064 <__mdiff>
 80076f2:	68c2      	ldr	r2, [r0, #12]
 80076f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f6:	4680      	mov	r8, r0
 80076f8:	bb0a      	cbnz	r2, 800773e <_dtoa_r+0x976>
 80076fa:	4601      	mov	r1, r0
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 fc95 	bl	800802c <__mcmp>
 8007702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007704:	4602      	mov	r2, r0
 8007706:	4641      	mov	r1, r8
 8007708:	4630      	mov	r0, r6
 800770a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800770e:	f000 fa07 	bl	8007b20 <_Bfree>
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007716:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800771a:	ea43 0102 	orr.w	r1, r3, r2
 800771e:	9b07      	ldr	r3, [sp, #28]
 8007720:	4319      	orrs	r1, r3
 8007722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007724:	d10d      	bne.n	8007742 <_dtoa_r+0x97a>
 8007726:	2b39      	cmp	r3, #57	; 0x39
 8007728:	d029      	beq.n	800777e <_dtoa_r+0x9b6>
 800772a:	f1ba 0f00 	cmp.w	sl, #0
 800772e:	dd01      	ble.n	8007734 <_dtoa_r+0x96c>
 8007730:	9b05      	ldr	r3, [sp, #20]
 8007732:	3331      	adds	r3, #49	; 0x31
 8007734:	9a02      	ldr	r2, [sp, #8]
 8007736:	7013      	strb	r3, [r2, #0]
 8007738:	e775      	b.n	8007626 <_dtoa_r+0x85e>
 800773a:	4638      	mov	r0, r7
 800773c:	e7b8      	b.n	80076b0 <_dtoa_r+0x8e8>
 800773e:	2201      	movs	r2, #1
 8007740:	e7e1      	b.n	8007706 <_dtoa_r+0x93e>
 8007742:	f1ba 0f00 	cmp.w	sl, #0
 8007746:	db06      	blt.n	8007756 <_dtoa_r+0x98e>
 8007748:	9906      	ldr	r1, [sp, #24]
 800774a:	ea41 0a0a 	orr.w	sl, r1, sl
 800774e:	9907      	ldr	r1, [sp, #28]
 8007750:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007754:	d120      	bne.n	8007798 <_dtoa_r+0x9d0>
 8007756:	2a00      	cmp	r2, #0
 8007758:	ddec      	ble.n	8007734 <_dtoa_r+0x96c>
 800775a:	4629      	mov	r1, r5
 800775c:	2201      	movs	r2, #1
 800775e:	4630      	mov	r0, r6
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	f000 fbf7 	bl	8007f54 <__lshift>
 8007766:	4621      	mov	r1, r4
 8007768:	4605      	mov	r5, r0
 800776a:	f000 fc5f 	bl	800802c <__mcmp>
 800776e:	2800      	cmp	r0, #0
 8007770:	9b04      	ldr	r3, [sp, #16]
 8007772:	dc02      	bgt.n	800777a <_dtoa_r+0x9b2>
 8007774:	d1de      	bne.n	8007734 <_dtoa_r+0x96c>
 8007776:	07da      	lsls	r2, r3, #31
 8007778:	d5dc      	bpl.n	8007734 <_dtoa_r+0x96c>
 800777a:	2b39      	cmp	r3, #57	; 0x39
 800777c:	d1d8      	bne.n	8007730 <_dtoa_r+0x968>
 800777e:	9a02      	ldr	r2, [sp, #8]
 8007780:	2339      	movs	r3, #57	; 0x39
 8007782:	7013      	strb	r3, [r2, #0]
 8007784:	4643      	mov	r3, r8
 8007786:	4698      	mov	r8, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800778e:	2a39      	cmp	r2, #57	; 0x39
 8007790:	d051      	beq.n	8007836 <_dtoa_r+0xa6e>
 8007792:	3201      	adds	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e746      	b.n	8007626 <_dtoa_r+0x85e>
 8007798:	2a00      	cmp	r2, #0
 800779a:	dd03      	ble.n	80077a4 <_dtoa_r+0x9dc>
 800779c:	2b39      	cmp	r3, #57	; 0x39
 800779e:	d0ee      	beq.n	800777e <_dtoa_r+0x9b6>
 80077a0:	3301      	adds	r3, #1
 80077a2:	e7c7      	b.n	8007734 <_dtoa_r+0x96c>
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	9908      	ldr	r1, [sp, #32]
 80077a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077ac:	428a      	cmp	r2, r1
 80077ae:	d02b      	beq.n	8007808 <_dtoa_r+0xa40>
 80077b0:	4629      	mov	r1, r5
 80077b2:	2300      	movs	r3, #0
 80077b4:	220a      	movs	r2, #10
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f9d4 	bl	8007b64 <__multadd>
 80077bc:	45b9      	cmp	r9, r7
 80077be:	4605      	mov	r5, r0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	f04f 020a 	mov.w	r2, #10
 80077c8:	4649      	mov	r1, r9
 80077ca:	4630      	mov	r0, r6
 80077cc:	d107      	bne.n	80077de <_dtoa_r+0xa16>
 80077ce:	f000 f9c9 	bl	8007b64 <__multadd>
 80077d2:	4681      	mov	r9, r0
 80077d4:	4607      	mov	r7, r0
 80077d6:	9b04      	ldr	r3, [sp, #16]
 80077d8:	3301      	adds	r3, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	e774      	b.n	80076c8 <_dtoa_r+0x900>
 80077de:	f000 f9c1 	bl	8007b64 <__multadd>
 80077e2:	4639      	mov	r1, r7
 80077e4:	4681      	mov	r9, r0
 80077e6:	2300      	movs	r3, #0
 80077e8:	220a      	movs	r2, #10
 80077ea:	4630      	mov	r0, r6
 80077ec:	f000 f9ba 	bl	8007b64 <__multadd>
 80077f0:	4607      	mov	r7, r0
 80077f2:	e7f0      	b.n	80077d6 <_dtoa_r+0xa0e>
 80077f4:	f1ba 0f00 	cmp.w	sl, #0
 80077f8:	9a01      	ldr	r2, [sp, #4]
 80077fa:	bfcc      	ite	gt
 80077fc:	46d0      	movgt	r8, sl
 80077fe:	f04f 0801 	movle.w	r8, #1
 8007802:	4490      	add	r8, r2
 8007804:	f04f 0900 	mov.w	r9, #0
 8007808:	4629      	mov	r1, r5
 800780a:	2201      	movs	r2, #1
 800780c:	4630      	mov	r0, r6
 800780e:	9302      	str	r3, [sp, #8]
 8007810:	f000 fba0 	bl	8007f54 <__lshift>
 8007814:	4621      	mov	r1, r4
 8007816:	4605      	mov	r5, r0
 8007818:	f000 fc08 	bl	800802c <__mcmp>
 800781c:	2800      	cmp	r0, #0
 800781e:	dcb1      	bgt.n	8007784 <_dtoa_r+0x9bc>
 8007820:	d102      	bne.n	8007828 <_dtoa_r+0xa60>
 8007822:	9b02      	ldr	r3, [sp, #8]
 8007824:	07db      	lsls	r3, r3, #31
 8007826:	d4ad      	bmi.n	8007784 <_dtoa_r+0x9bc>
 8007828:	4643      	mov	r3, r8
 800782a:	4698      	mov	r8, r3
 800782c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007830:	2a30      	cmp	r2, #48	; 0x30
 8007832:	d0fa      	beq.n	800782a <_dtoa_r+0xa62>
 8007834:	e6f7      	b.n	8007626 <_dtoa_r+0x85e>
 8007836:	9a01      	ldr	r2, [sp, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d1a4      	bne.n	8007786 <_dtoa_r+0x9be>
 800783c:	f10b 0b01 	add.w	fp, fp, #1
 8007840:	2331      	movs	r3, #49	; 0x31
 8007842:	e778      	b.n	8007736 <_dtoa_r+0x96e>
 8007844:	4b14      	ldr	r3, [pc, #80]	; (8007898 <_dtoa_r+0xad0>)
 8007846:	f7ff bb2a 	b.w	8006e9e <_dtoa_r+0xd6>
 800784a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800784c:	2b00      	cmp	r3, #0
 800784e:	f47f ab05 	bne.w	8006e5c <_dtoa_r+0x94>
 8007852:	4b12      	ldr	r3, [pc, #72]	; (800789c <_dtoa_r+0xad4>)
 8007854:	f7ff bb23 	b.w	8006e9e <_dtoa_r+0xd6>
 8007858:	f1ba 0f00 	cmp.w	sl, #0
 800785c:	dc03      	bgt.n	8007866 <_dtoa_r+0xa9e>
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	2b02      	cmp	r3, #2
 8007862:	f73f aec8 	bgt.w	80075f6 <_dtoa_r+0x82e>
 8007866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f7ff fa21 	bl	8006cb4 <quorem>
 8007872:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007876:	f808 3b01 	strb.w	r3, [r8], #1
 800787a:	9a01      	ldr	r2, [sp, #4]
 800787c:	eba8 0202 	sub.w	r2, r8, r2
 8007880:	4592      	cmp	sl, r2
 8007882:	ddb7      	ble.n	80077f4 <_dtoa_r+0xa2c>
 8007884:	4629      	mov	r1, r5
 8007886:	2300      	movs	r3, #0
 8007888:	220a      	movs	r2, #10
 800788a:	4630      	mov	r0, r6
 800788c:	f000 f96a 	bl	8007b64 <__multadd>
 8007890:	4605      	mov	r5, r0
 8007892:	e7ea      	b.n	800786a <_dtoa_r+0xaa2>
 8007894:	0800a36d 	.word	0x0800a36d
 8007898:	0800a2c8 	.word	0x0800a2c8
 800789c:	0800a2f1 	.word	0x0800a2f1

080078a0 <_free_r>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d044      	beq.n	8007930 <_free_r+0x90>
 80078a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078aa:	9001      	str	r0, [sp, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f1a1 0404 	sub.w	r4, r1, #4
 80078b2:	bfb8      	it	lt
 80078b4:	18e4      	addlt	r4, r4, r3
 80078b6:	f000 f8e7 	bl	8007a88 <__malloc_lock>
 80078ba:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <_free_r+0x94>)
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	6813      	ldr	r3, [r2, #0]
 80078c0:	b933      	cbnz	r3, 80078d0 <_free_r+0x30>
 80078c2:	6063      	str	r3, [r4, #4]
 80078c4:	6014      	str	r4, [r2, #0]
 80078c6:	b003      	add	sp, #12
 80078c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078cc:	f000 b8e2 	b.w	8007a94 <__malloc_unlock>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d908      	bls.n	80078e6 <_free_r+0x46>
 80078d4:	6825      	ldr	r5, [r4, #0]
 80078d6:	1961      	adds	r1, r4, r5
 80078d8:	428b      	cmp	r3, r1
 80078da:	bf01      	itttt	eq
 80078dc:	6819      	ldreq	r1, [r3, #0]
 80078de:	685b      	ldreq	r3, [r3, #4]
 80078e0:	1949      	addeq	r1, r1, r5
 80078e2:	6021      	streq	r1, [r4, #0]
 80078e4:	e7ed      	b.n	80078c2 <_free_r+0x22>
 80078e6:	461a      	mov	r2, r3
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b10b      	cbz	r3, 80078f0 <_free_r+0x50>
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	d9fa      	bls.n	80078e6 <_free_r+0x46>
 80078f0:	6811      	ldr	r1, [r2, #0]
 80078f2:	1855      	adds	r5, r2, r1
 80078f4:	42a5      	cmp	r5, r4
 80078f6:	d10b      	bne.n	8007910 <_free_r+0x70>
 80078f8:	6824      	ldr	r4, [r4, #0]
 80078fa:	4421      	add	r1, r4
 80078fc:	1854      	adds	r4, r2, r1
 80078fe:	42a3      	cmp	r3, r4
 8007900:	6011      	str	r1, [r2, #0]
 8007902:	d1e0      	bne.n	80078c6 <_free_r+0x26>
 8007904:	681c      	ldr	r4, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	6053      	str	r3, [r2, #4]
 800790a:	440c      	add	r4, r1
 800790c:	6014      	str	r4, [r2, #0]
 800790e:	e7da      	b.n	80078c6 <_free_r+0x26>
 8007910:	d902      	bls.n	8007918 <_free_r+0x78>
 8007912:	230c      	movs	r3, #12
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	e7d6      	b.n	80078c6 <_free_r+0x26>
 8007918:	6825      	ldr	r5, [r4, #0]
 800791a:	1961      	adds	r1, r4, r5
 800791c:	428b      	cmp	r3, r1
 800791e:	bf04      	itt	eq
 8007920:	6819      	ldreq	r1, [r3, #0]
 8007922:	685b      	ldreq	r3, [r3, #4]
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	bf04      	itt	eq
 8007928:	1949      	addeq	r1, r1, r5
 800792a:	6021      	streq	r1, [r4, #0]
 800792c:	6054      	str	r4, [r2, #4]
 800792e:	e7ca      	b.n	80078c6 <_free_r+0x26>
 8007930:	b003      	add	sp, #12
 8007932:	bd30      	pop	{r4, r5, pc}
 8007934:	20000a00 	.word	0x20000a00

08007938 <malloc>:
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <malloc+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f000 b823 	b.w	8007988 <_malloc_r>
 8007942:	bf00      	nop
 8007944:	20000064 	.word	0x20000064

08007948 <sbrk_aligned>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4e0e      	ldr	r6, [pc, #56]	; (8007984 <sbrk_aligned+0x3c>)
 800794c:	460c      	mov	r4, r1
 800794e:	6831      	ldr	r1, [r6, #0]
 8007950:	4605      	mov	r5, r0
 8007952:	b911      	cbnz	r1, 800795a <sbrk_aligned+0x12>
 8007954:	f001 fdd6 	bl	8009504 <_sbrk_r>
 8007958:	6030      	str	r0, [r6, #0]
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f001 fdd1 	bl	8009504 <_sbrk_r>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d00a      	beq.n	800797c <sbrk_aligned+0x34>
 8007966:	1cc4      	adds	r4, r0, #3
 8007968:	f024 0403 	bic.w	r4, r4, #3
 800796c:	42a0      	cmp	r0, r4
 800796e:	d007      	beq.n	8007980 <sbrk_aligned+0x38>
 8007970:	1a21      	subs	r1, r4, r0
 8007972:	4628      	mov	r0, r5
 8007974:	f001 fdc6 	bl	8009504 <_sbrk_r>
 8007978:	3001      	adds	r0, #1
 800797a:	d101      	bne.n	8007980 <sbrk_aligned+0x38>
 800797c:	f04f 34ff 	mov.w	r4, #4294967295
 8007980:	4620      	mov	r0, r4
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	20000a04 	.word	0x20000a04

08007988 <_malloc_r>:
 8007988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800798c:	1ccd      	adds	r5, r1, #3
 800798e:	f025 0503 	bic.w	r5, r5, #3
 8007992:	3508      	adds	r5, #8
 8007994:	2d0c      	cmp	r5, #12
 8007996:	bf38      	it	cc
 8007998:	250c      	movcc	r5, #12
 800799a:	2d00      	cmp	r5, #0
 800799c:	4607      	mov	r7, r0
 800799e:	db01      	blt.n	80079a4 <_malloc_r+0x1c>
 80079a0:	42a9      	cmp	r1, r5
 80079a2:	d905      	bls.n	80079b0 <_malloc_r+0x28>
 80079a4:	230c      	movs	r3, #12
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	2600      	movs	r6, #0
 80079aa:	4630      	mov	r0, r6
 80079ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a84 <_malloc_r+0xfc>
 80079b4:	f000 f868 	bl	8007a88 <__malloc_lock>
 80079b8:	f8d8 3000 	ldr.w	r3, [r8]
 80079bc:	461c      	mov	r4, r3
 80079be:	bb5c      	cbnz	r4, 8007a18 <_malloc_r+0x90>
 80079c0:	4629      	mov	r1, r5
 80079c2:	4638      	mov	r0, r7
 80079c4:	f7ff ffc0 	bl	8007948 <sbrk_aligned>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	4604      	mov	r4, r0
 80079cc:	d155      	bne.n	8007a7a <_malloc_r+0xf2>
 80079ce:	f8d8 4000 	ldr.w	r4, [r8]
 80079d2:	4626      	mov	r6, r4
 80079d4:	2e00      	cmp	r6, #0
 80079d6:	d145      	bne.n	8007a64 <_malloc_r+0xdc>
 80079d8:	2c00      	cmp	r4, #0
 80079da:	d048      	beq.n	8007a6e <_malloc_r+0xe6>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	4631      	mov	r1, r6
 80079e0:	4638      	mov	r0, r7
 80079e2:	eb04 0903 	add.w	r9, r4, r3
 80079e6:	f001 fd8d 	bl	8009504 <_sbrk_r>
 80079ea:	4581      	cmp	r9, r0
 80079ec:	d13f      	bne.n	8007a6e <_malloc_r+0xe6>
 80079ee:	6821      	ldr	r1, [r4, #0]
 80079f0:	1a6d      	subs	r5, r5, r1
 80079f2:	4629      	mov	r1, r5
 80079f4:	4638      	mov	r0, r7
 80079f6:	f7ff ffa7 	bl	8007948 <sbrk_aligned>
 80079fa:	3001      	adds	r0, #1
 80079fc:	d037      	beq.n	8007a6e <_malloc_r+0xe6>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	442b      	add	r3, r5
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	f8d8 3000 	ldr.w	r3, [r8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d038      	beq.n	8007a7e <_malloc_r+0xf6>
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	42a2      	cmp	r2, r4
 8007a10:	d12b      	bne.n	8007a6a <_malloc_r+0xe2>
 8007a12:	2200      	movs	r2, #0
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	e00f      	b.n	8007a38 <_malloc_r+0xb0>
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	1b52      	subs	r2, r2, r5
 8007a1c:	d41f      	bmi.n	8007a5e <_malloc_r+0xd6>
 8007a1e:	2a0b      	cmp	r2, #11
 8007a20:	d917      	bls.n	8007a52 <_malloc_r+0xca>
 8007a22:	1961      	adds	r1, r4, r5
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	6025      	str	r5, [r4, #0]
 8007a28:	bf18      	it	ne
 8007a2a:	6059      	strne	r1, [r3, #4]
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	bf08      	it	eq
 8007a30:	f8c8 1000 	streq.w	r1, [r8]
 8007a34:	5162      	str	r2, [r4, r5]
 8007a36:	604b      	str	r3, [r1, #4]
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f104 060b 	add.w	r6, r4, #11
 8007a3e:	f000 f829 	bl	8007a94 <__malloc_unlock>
 8007a42:	f026 0607 	bic.w	r6, r6, #7
 8007a46:	1d23      	adds	r3, r4, #4
 8007a48:	1af2      	subs	r2, r6, r3
 8007a4a:	d0ae      	beq.n	80079aa <_malloc_r+0x22>
 8007a4c:	1b9b      	subs	r3, r3, r6
 8007a4e:	50a3      	str	r3, [r4, r2]
 8007a50:	e7ab      	b.n	80079aa <_malloc_r+0x22>
 8007a52:	42a3      	cmp	r3, r4
 8007a54:	6862      	ldr	r2, [r4, #4]
 8007a56:	d1dd      	bne.n	8007a14 <_malloc_r+0x8c>
 8007a58:	f8c8 2000 	str.w	r2, [r8]
 8007a5c:	e7ec      	b.n	8007a38 <_malloc_r+0xb0>
 8007a5e:	4623      	mov	r3, r4
 8007a60:	6864      	ldr	r4, [r4, #4]
 8007a62:	e7ac      	b.n	80079be <_malloc_r+0x36>
 8007a64:	4634      	mov	r4, r6
 8007a66:	6876      	ldr	r6, [r6, #4]
 8007a68:	e7b4      	b.n	80079d4 <_malloc_r+0x4c>
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	e7cc      	b.n	8007a08 <_malloc_r+0x80>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	4638      	mov	r0, r7
 8007a74:	f000 f80e 	bl	8007a94 <__malloc_unlock>
 8007a78:	e797      	b.n	80079aa <_malloc_r+0x22>
 8007a7a:	6025      	str	r5, [r4, #0]
 8007a7c:	e7dc      	b.n	8007a38 <_malloc_r+0xb0>
 8007a7e:	605b      	str	r3, [r3, #4]
 8007a80:	deff      	udf	#255	; 0xff
 8007a82:	bf00      	nop
 8007a84:	20000a00 	.word	0x20000a00

08007a88 <__malloc_lock>:
 8007a88:	4801      	ldr	r0, [pc, #4]	; (8007a90 <__malloc_lock+0x8>)
 8007a8a:	f7ff b90a 	b.w	8006ca2 <__retarget_lock_acquire_recursive>
 8007a8e:	bf00      	nop
 8007a90:	200009fc 	.word	0x200009fc

08007a94 <__malloc_unlock>:
 8007a94:	4801      	ldr	r0, [pc, #4]	; (8007a9c <__malloc_unlock+0x8>)
 8007a96:	f7ff b905 	b.w	8006ca4 <__retarget_lock_release_recursive>
 8007a9a:	bf00      	nop
 8007a9c:	200009fc 	.word	0x200009fc

08007aa0 <_Balloc>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	69c6      	ldr	r6, [r0, #28]
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	b976      	cbnz	r6, 8007ac8 <_Balloc+0x28>
 8007aaa:	2010      	movs	r0, #16
 8007aac:	f7ff ff44 	bl	8007938 <malloc>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	61e0      	str	r0, [r4, #28]
 8007ab4:	b920      	cbnz	r0, 8007ac0 <_Balloc+0x20>
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <_Balloc+0x78>)
 8007ab8:	4818      	ldr	r0, [pc, #96]	; (8007b1c <_Balloc+0x7c>)
 8007aba:	216b      	movs	r1, #107	; 0x6b
 8007abc:	f001 fd48 	bl	8009550 <__assert_func>
 8007ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac4:	6006      	str	r6, [r0, #0]
 8007ac6:	60c6      	str	r6, [r0, #12]
 8007ac8:	69e6      	ldr	r6, [r4, #28]
 8007aca:	68f3      	ldr	r3, [r6, #12]
 8007acc:	b183      	cbz	r3, 8007af0 <_Balloc+0x50>
 8007ace:	69e3      	ldr	r3, [r4, #28]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ad6:	b9b8      	cbnz	r0, 8007b08 <_Balloc+0x68>
 8007ad8:	2101      	movs	r1, #1
 8007ada:	fa01 f605 	lsl.w	r6, r1, r5
 8007ade:	1d72      	adds	r2, r6, #5
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f001 fd52 	bl	800958c <_calloc_r>
 8007ae8:	b160      	cbz	r0, 8007b04 <_Balloc+0x64>
 8007aea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aee:	e00e      	b.n	8007b0e <_Balloc+0x6e>
 8007af0:	2221      	movs	r2, #33	; 0x21
 8007af2:	2104      	movs	r1, #4
 8007af4:	4620      	mov	r0, r4
 8007af6:	f001 fd49 	bl	800958c <_calloc_r>
 8007afa:	69e3      	ldr	r3, [r4, #28]
 8007afc:	60f0      	str	r0, [r6, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e4      	bne.n	8007ace <_Balloc+0x2e>
 8007b04:	2000      	movs	r0, #0
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	6802      	ldr	r2, [r0, #0]
 8007b0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b14:	e7f7      	b.n	8007b06 <_Balloc+0x66>
 8007b16:	bf00      	nop
 8007b18:	0800a2fe 	.word	0x0800a2fe
 8007b1c:	0800a37e 	.word	0x0800a37e

08007b20 <_Bfree>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	69c6      	ldr	r6, [r0, #28]
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	b976      	cbnz	r6, 8007b48 <_Bfree+0x28>
 8007b2a:	2010      	movs	r0, #16
 8007b2c:	f7ff ff04 	bl	8007938 <malloc>
 8007b30:	4602      	mov	r2, r0
 8007b32:	61e8      	str	r0, [r5, #28]
 8007b34:	b920      	cbnz	r0, 8007b40 <_Bfree+0x20>
 8007b36:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <_Bfree+0x3c>)
 8007b38:	4809      	ldr	r0, [pc, #36]	; (8007b60 <_Bfree+0x40>)
 8007b3a:	218f      	movs	r1, #143	; 0x8f
 8007b3c:	f001 fd08 	bl	8009550 <__assert_func>
 8007b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b44:	6006      	str	r6, [r0, #0]
 8007b46:	60c6      	str	r6, [r0, #12]
 8007b48:	b13c      	cbz	r4, 8007b5a <_Bfree+0x3a>
 8007b4a:	69eb      	ldr	r3, [r5, #28]
 8007b4c:	6862      	ldr	r2, [r4, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b54:	6021      	str	r1, [r4, #0]
 8007b56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	0800a2fe 	.word	0x0800a2fe
 8007b60:	0800a37e 	.word	0x0800a37e

08007b64 <__multadd>:
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	690d      	ldr	r5, [r1, #16]
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	461e      	mov	r6, r3
 8007b70:	f101 0c14 	add.w	ip, r1, #20
 8007b74:	2000      	movs	r0, #0
 8007b76:	f8dc 3000 	ldr.w	r3, [ip]
 8007b7a:	b299      	uxth	r1, r3
 8007b7c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b80:	0c1e      	lsrs	r6, r3, #16
 8007b82:	0c0b      	lsrs	r3, r1, #16
 8007b84:	fb02 3306 	mla	r3, r2, r6, r3
 8007b88:	b289      	uxth	r1, r1
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b90:	4285      	cmp	r5, r0
 8007b92:	f84c 1b04 	str.w	r1, [ip], #4
 8007b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b9a:	dcec      	bgt.n	8007b76 <__multadd+0x12>
 8007b9c:	b30e      	cbz	r6, 8007be2 <__multadd+0x7e>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dc19      	bgt.n	8007bd8 <__multadd+0x74>
 8007ba4:	6861      	ldr	r1, [r4, #4]
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	3101      	adds	r1, #1
 8007baa:	f7ff ff79 	bl	8007aa0 <_Balloc>
 8007bae:	4680      	mov	r8, r0
 8007bb0:	b928      	cbnz	r0, 8007bbe <__multadd+0x5a>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <__multadd+0x84>)
 8007bb6:	480d      	ldr	r0, [pc, #52]	; (8007bec <__multadd+0x88>)
 8007bb8:	21ba      	movs	r1, #186	; 0xba
 8007bba:	f001 fcc9 	bl	8009550 <__assert_func>
 8007bbe:	6922      	ldr	r2, [r4, #16]
 8007bc0:	3202      	adds	r2, #2
 8007bc2:	f104 010c 	add.w	r1, r4, #12
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	300c      	adds	r0, #12
 8007bca:	f001 fcab 	bl	8009524 <memcpy>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff ffa5 	bl	8007b20 <_Bfree>
 8007bd6:	4644      	mov	r4, r8
 8007bd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bdc:	3501      	adds	r5, #1
 8007bde:	615e      	str	r6, [r3, #20]
 8007be0:	6125      	str	r5, [r4, #16]
 8007be2:	4620      	mov	r0, r4
 8007be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be8:	0800a36d 	.word	0x0800a36d
 8007bec:	0800a37e 	.word	0x0800a37e

08007bf0 <__s2b>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	4615      	mov	r5, r2
 8007bf8:	461f      	mov	r7, r3
 8007bfa:	2209      	movs	r2, #9
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	4606      	mov	r6, r0
 8007c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c04:	2100      	movs	r1, #0
 8007c06:	2201      	movs	r2, #1
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	db09      	blt.n	8007c20 <__s2b+0x30>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff ff47 	bl	8007aa0 <_Balloc>
 8007c12:	b940      	cbnz	r0, 8007c26 <__s2b+0x36>
 8007c14:	4602      	mov	r2, r0
 8007c16:	4b19      	ldr	r3, [pc, #100]	; (8007c7c <__s2b+0x8c>)
 8007c18:	4819      	ldr	r0, [pc, #100]	; (8007c80 <__s2b+0x90>)
 8007c1a:	21d3      	movs	r1, #211	; 0xd3
 8007c1c:	f001 fc98 	bl	8009550 <__assert_func>
 8007c20:	0052      	lsls	r2, r2, #1
 8007c22:	3101      	adds	r1, #1
 8007c24:	e7f0      	b.n	8007c08 <__s2b+0x18>
 8007c26:	9b08      	ldr	r3, [sp, #32]
 8007c28:	6143      	str	r3, [r0, #20]
 8007c2a:	2d09      	cmp	r5, #9
 8007c2c:	f04f 0301 	mov.w	r3, #1
 8007c30:	6103      	str	r3, [r0, #16]
 8007c32:	dd16      	ble.n	8007c62 <__s2b+0x72>
 8007c34:	f104 0909 	add.w	r9, r4, #9
 8007c38:	46c8      	mov	r8, r9
 8007c3a:	442c      	add	r4, r5
 8007c3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c40:	4601      	mov	r1, r0
 8007c42:	3b30      	subs	r3, #48	; 0x30
 8007c44:	220a      	movs	r2, #10
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ff8c 	bl	8007b64 <__multadd>
 8007c4c:	45a0      	cmp	r8, r4
 8007c4e:	d1f5      	bne.n	8007c3c <__s2b+0x4c>
 8007c50:	f1a5 0408 	sub.w	r4, r5, #8
 8007c54:	444c      	add	r4, r9
 8007c56:	1b2d      	subs	r5, r5, r4
 8007c58:	1963      	adds	r3, r4, r5
 8007c5a:	42bb      	cmp	r3, r7
 8007c5c:	db04      	blt.n	8007c68 <__s2b+0x78>
 8007c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c62:	340a      	adds	r4, #10
 8007c64:	2509      	movs	r5, #9
 8007c66:	e7f6      	b.n	8007c56 <__s2b+0x66>
 8007c68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	3b30      	subs	r3, #48	; 0x30
 8007c70:	220a      	movs	r2, #10
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ff76 	bl	8007b64 <__multadd>
 8007c78:	e7ee      	b.n	8007c58 <__s2b+0x68>
 8007c7a:	bf00      	nop
 8007c7c:	0800a36d 	.word	0x0800a36d
 8007c80:	0800a37e 	.word	0x0800a37e

08007c84 <__hi0bits>:
 8007c84:	0c03      	lsrs	r3, r0, #16
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	b9d3      	cbnz	r3, 8007cc0 <__hi0bits+0x3c>
 8007c8a:	0400      	lsls	r0, r0, #16
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c92:	bf04      	itt	eq
 8007c94:	0200      	lsleq	r0, r0, #8
 8007c96:	3308      	addeq	r3, #8
 8007c98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c9c:	bf04      	itt	eq
 8007c9e:	0100      	lsleq	r0, r0, #4
 8007ca0:	3304      	addeq	r3, #4
 8007ca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ca6:	bf04      	itt	eq
 8007ca8:	0080      	lsleq	r0, r0, #2
 8007caa:	3302      	addeq	r3, #2
 8007cac:	2800      	cmp	r0, #0
 8007cae:	db05      	blt.n	8007cbc <__hi0bits+0x38>
 8007cb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cb4:	f103 0301 	add.w	r3, r3, #1
 8007cb8:	bf08      	it	eq
 8007cba:	2320      	moveq	r3, #32
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	4770      	bx	lr
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e7e4      	b.n	8007c8e <__hi0bits+0xa>

08007cc4 <__lo0bits>:
 8007cc4:	6803      	ldr	r3, [r0, #0]
 8007cc6:	f013 0207 	ands.w	r2, r3, #7
 8007cca:	d00c      	beq.n	8007ce6 <__lo0bits+0x22>
 8007ccc:	07d9      	lsls	r1, r3, #31
 8007cce:	d422      	bmi.n	8007d16 <__lo0bits+0x52>
 8007cd0:	079a      	lsls	r2, r3, #30
 8007cd2:	bf49      	itett	mi
 8007cd4:	085b      	lsrmi	r3, r3, #1
 8007cd6:	089b      	lsrpl	r3, r3, #2
 8007cd8:	6003      	strmi	r3, [r0, #0]
 8007cda:	2201      	movmi	r2, #1
 8007cdc:	bf5c      	itt	pl
 8007cde:	6003      	strpl	r3, [r0, #0]
 8007ce0:	2202      	movpl	r2, #2
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4770      	bx	lr
 8007ce6:	b299      	uxth	r1, r3
 8007ce8:	b909      	cbnz	r1, 8007cee <__lo0bits+0x2a>
 8007cea:	0c1b      	lsrs	r3, r3, #16
 8007cec:	2210      	movs	r2, #16
 8007cee:	b2d9      	uxtb	r1, r3
 8007cf0:	b909      	cbnz	r1, 8007cf6 <__lo0bits+0x32>
 8007cf2:	3208      	adds	r2, #8
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	0719      	lsls	r1, r3, #28
 8007cf8:	bf04      	itt	eq
 8007cfa:	091b      	lsreq	r3, r3, #4
 8007cfc:	3204      	addeq	r2, #4
 8007cfe:	0799      	lsls	r1, r3, #30
 8007d00:	bf04      	itt	eq
 8007d02:	089b      	lsreq	r3, r3, #2
 8007d04:	3202      	addeq	r2, #2
 8007d06:	07d9      	lsls	r1, r3, #31
 8007d08:	d403      	bmi.n	8007d12 <__lo0bits+0x4e>
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	f102 0201 	add.w	r2, r2, #1
 8007d10:	d003      	beq.n	8007d1a <__lo0bits+0x56>
 8007d12:	6003      	str	r3, [r0, #0]
 8007d14:	e7e5      	b.n	8007ce2 <__lo0bits+0x1e>
 8007d16:	2200      	movs	r2, #0
 8007d18:	e7e3      	b.n	8007ce2 <__lo0bits+0x1e>
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	e7e1      	b.n	8007ce2 <__lo0bits+0x1e>
	...

08007d20 <__i2b>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	2101      	movs	r1, #1
 8007d26:	f7ff febb 	bl	8007aa0 <_Balloc>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <__i2b+0x1a>
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <__i2b+0x24>)
 8007d30:	4805      	ldr	r0, [pc, #20]	; (8007d48 <__i2b+0x28>)
 8007d32:	f240 1145 	movw	r1, #325	; 0x145
 8007d36:	f001 fc0b 	bl	8009550 <__assert_func>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	6144      	str	r4, [r0, #20]
 8007d3e:	6103      	str	r3, [r0, #16]
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	0800a36d 	.word	0x0800a36d
 8007d48:	0800a37e 	.word	0x0800a37e

08007d4c <__multiply>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4691      	mov	r9, r2
 8007d52:	690a      	ldr	r2, [r1, #16]
 8007d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	bfb8      	it	lt
 8007d5c:	460b      	movlt	r3, r1
 8007d5e:	460c      	mov	r4, r1
 8007d60:	bfbc      	itt	lt
 8007d62:	464c      	movlt	r4, r9
 8007d64:	4699      	movlt	r9, r3
 8007d66:	6927      	ldr	r7, [r4, #16]
 8007d68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d6c:	68a3      	ldr	r3, [r4, #8]
 8007d6e:	6861      	ldr	r1, [r4, #4]
 8007d70:	eb07 060a 	add.w	r6, r7, sl
 8007d74:	42b3      	cmp	r3, r6
 8007d76:	b085      	sub	sp, #20
 8007d78:	bfb8      	it	lt
 8007d7a:	3101      	addlt	r1, #1
 8007d7c:	f7ff fe90 	bl	8007aa0 <_Balloc>
 8007d80:	b930      	cbnz	r0, 8007d90 <__multiply+0x44>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <__multiply+0x14c>)
 8007d86:	4845      	ldr	r0, [pc, #276]	; (8007e9c <__multiply+0x150>)
 8007d88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d8c:	f001 fbe0 	bl	8009550 <__assert_func>
 8007d90:	f100 0514 	add.w	r5, r0, #20
 8007d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d98:	462b      	mov	r3, r5
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4543      	cmp	r3, r8
 8007d9e:	d321      	bcc.n	8007de4 <__multiply+0x98>
 8007da0:	f104 0314 	add.w	r3, r4, #20
 8007da4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007da8:	f109 0314 	add.w	r3, r9, #20
 8007dac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007db0:	9202      	str	r2, [sp, #8]
 8007db2:	1b3a      	subs	r2, r7, r4
 8007db4:	3a15      	subs	r2, #21
 8007db6:	f022 0203 	bic.w	r2, r2, #3
 8007dba:	3204      	adds	r2, #4
 8007dbc:	f104 0115 	add.w	r1, r4, #21
 8007dc0:	428f      	cmp	r7, r1
 8007dc2:	bf38      	it	cc
 8007dc4:	2204      	movcc	r2, #4
 8007dc6:	9201      	str	r2, [sp, #4]
 8007dc8:	9a02      	ldr	r2, [sp, #8]
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d80c      	bhi.n	8007dea <__multiply+0x9e>
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	dd03      	ble.n	8007ddc <__multiply+0x90>
 8007dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d05b      	beq.n	8007e94 <__multiply+0x148>
 8007ddc:	6106      	str	r6, [r0, #16]
 8007dde:	b005      	add	sp, #20
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	f843 2b04 	str.w	r2, [r3], #4
 8007de8:	e7d8      	b.n	8007d9c <__multiply+0x50>
 8007dea:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dee:	f1ba 0f00 	cmp.w	sl, #0
 8007df2:	d024      	beq.n	8007e3e <__multiply+0xf2>
 8007df4:	f104 0e14 	add.w	lr, r4, #20
 8007df8:	46a9      	mov	r9, r5
 8007dfa:	f04f 0c00 	mov.w	ip, #0
 8007dfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e02:	f8d9 1000 	ldr.w	r1, [r9]
 8007e06:	fa1f fb82 	uxth.w	fp, r2
 8007e0a:	b289      	uxth	r1, r1
 8007e0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e14:	f8d9 2000 	ldr.w	r2, [r9]
 8007e18:	4461      	add	r1, ip
 8007e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e26:	b289      	uxth	r1, r1
 8007e28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e2c:	4577      	cmp	r7, lr
 8007e2e:	f849 1b04 	str.w	r1, [r9], #4
 8007e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e36:	d8e2      	bhi.n	8007dfe <__multiply+0xb2>
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	f845 c002 	str.w	ip, [r5, r2]
 8007e3e:	9a03      	ldr	r2, [sp, #12]
 8007e40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e44:	3304      	adds	r3, #4
 8007e46:	f1b9 0f00 	cmp.w	r9, #0
 8007e4a:	d021      	beq.n	8007e90 <__multiply+0x144>
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	f104 0c14 	add.w	ip, r4, #20
 8007e52:	46ae      	mov	lr, r5
 8007e54:	f04f 0a00 	mov.w	sl, #0
 8007e58:	f8bc b000 	ldrh.w	fp, [ip]
 8007e5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e60:	fb09 220b 	mla	r2, r9, fp, r2
 8007e64:	4452      	add	r2, sl
 8007e66:	b289      	uxth	r1, r1
 8007e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e78:	f8be 1000 	ldrh.w	r1, [lr]
 8007e7c:	fb09 110a 	mla	r1, r9, sl, r1
 8007e80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e84:	4567      	cmp	r7, ip
 8007e86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e8a:	d8e5      	bhi.n	8007e58 <__multiply+0x10c>
 8007e8c:	9a01      	ldr	r2, [sp, #4]
 8007e8e:	50a9      	str	r1, [r5, r2]
 8007e90:	3504      	adds	r5, #4
 8007e92:	e799      	b.n	8007dc8 <__multiply+0x7c>
 8007e94:	3e01      	subs	r6, #1
 8007e96:	e79b      	b.n	8007dd0 <__multiply+0x84>
 8007e98:	0800a36d 	.word	0x0800a36d
 8007e9c:	0800a37e 	.word	0x0800a37e

08007ea0 <__pow5mult>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	4615      	mov	r5, r2
 8007ea6:	f012 0203 	ands.w	r2, r2, #3
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	d007      	beq.n	8007ec0 <__pow5mult+0x20>
 8007eb0:	4c25      	ldr	r4, [pc, #148]	; (8007f48 <__pow5mult+0xa8>)
 8007eb2:	3a01      	subs	r2, #1
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eba:	f7ff fe53 	bl	8007b64 <__multadd>
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	10ad      	asrs	r5, r5, #2
 8007ec2:	d03d      	beq.n	8007f40 <__pow5mult+0xa0>
 8007ec4:	69f4      	ldr	r4, [r6, #28]
 8007ec6:	b97c      	cbnz	r4, 8007ee8 <__pow5mult+0x48>
 8007ec8:	2010      	movs	r0, #16
 8007eca:	f7ff fd35 	bl	8007938 <malloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	61f0      	str	r0, [r6, #28]
 8007ed2:	b928      	cbnz	r0, 8007ee0 <__pow5mult+0x40>
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <__pow5mult+0xac>)
 8007ed6:	481e      	ldr	r0, [pc, #120]	; (8007f50 <__pow5mult+0xb0>)
 8007ed8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007edc:	f001 fb38 	bl	8009550 <__assert_func>
 8007ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ee4:	6004      	str	r4, [r0, #0]
 8007ee6:	60c4      	str	r4, [r0, #12]
 8007ee8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ef0:	b94c      	cbnz	r4, 8007f06 <__pow5mult+0x66>
 8007ef2:	f240 2171 	movw	r1, #625	; 0x271
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7ff ff12 	bl	8007d20 <__i2b>
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f02:	4604      	mov	r4, r0
 8007f04:	6003      	str	r3, [r0, #0]
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	07eb      	lsls	r3, r5, #31
 8007f0c:	d50a      	bpl.n	8007f24 <__pow5mult+0x84>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4622      	mov	r2, r4
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff ff1a 	bl	8007d4c <__multiply>
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fdff 	bl	8007b20 <_Bfree>
 8007f22:	4647      	mov	r7, r8
 8007f24:	106d      	asrs	r5, r5, #1
 8007f26:	d00b      	beq.n	8007f40 <__pow5mult+0xa0>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	b938      	cbnz	r0, 8007f3c <__pow5mult+0x9c>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ff0b 	bl	8007d4c <__multiply>
 8007f36:	6020      	str	r0, [r4, #0]
 8007f38:	f8c0 9000 	str.w	r9, [r0]
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	e7e4      	b.n	8007f0a <__pow5mult+0x6a>
 8007f40:	4638      	mov	r0, r7
 8007f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f46:	bf00      	nop
 8007f48:	0800a4c8 	.word	0x0800a4c8
 8007f4c:	0800a2fe 	.word	0x0800a2fe
 8007f50:	0800a37e 	.word	0x0800a37e

08007f54 <__lshift>:
 8007f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6849      	ldr	r1, [r1, #4]
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	4607      	mov	r7, r0
 8007f66:	4691      	mov	r9, r2
 8007f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f6c:	f108 0601 	add.w	r6, r8, #1
 8007f70:	42b3      	cmp	r3, r6
 8007f72:	db0b      	blt.n	8007f8c <__lshift+0x38>
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff fd93 	bl	8007aa0 <_Balloc>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b948      	cbnz	r0, 8007f92 <__lshift+0x3e>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	4b28      	ldr	r3, [pc, #160]	; (8008024 <__lshift+0xd0>)
 8007f82:	4829      	ldr	r0, [pc, #164]	; (8008028 <__lshift+0xd4>)
 8007f84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f88:	f001 fae2 	bl	8009550 <__assert_func>
 8007f8c:	3101      	adds	r1, #1
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	e7ee      	b.n	8007f70 <__lshift+0x1c>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f100 0114 	add.w	r1, r0, #20
 8007f98:	f100 0210 	add.w	r2, r0, #16
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4553      	cmp	r3, sl
 8007fa0:	db33      	blt.n	800800a <__lshift+0xb6>
 8007fa2:	6920      	ldr	r0, [r4, #16]
 8007fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fa8:	f104 0314 	add.w	r3, r4, #20
 8007fac:	f019 091f 	ands.w	r9, r9, #31
 8007fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fb8:	d02b      	beq.n	8008012 <__lshift+0xbe>
 8007fba:	f1c9 0e20 	rsb	lr, r9, #32
 8007fbe:	468a      	mov	sl, r1
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	fa00 f009 	lsl.w	r0, r0, r9
 8007fc8:	4310      	orrs	r0, r2
 8007fca:	f84a 0b04 	str.w	r0, [sl], #4
 8007fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd2:	459c      	cmp	ip, r3
 8007fd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fd8:	d8f3      	bhi.n	8007fc2 <__lshift+0x6e>
 8007fda:	ebac 0304 	sub.w	r3, ip, r4
 8007fde:	3b15      	subs	r3, #21
 8007fe0:	f023 0303 	bic.w	r3, r3, #3
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	f104 0015 	add.w	r0, r4, #21
 8007fea:	4584      	cmp	ip, r0
 8007fec:	bf38      	it	cc
 8007fee:	2304      	movcc	r3, #4
 8007ff0:	50ca      	str	r2, [r1, r3]
 8007ff2:	b10a      	cbz	r2, 8007ff8 <__lshift+0xa4>
 8007ff4:	f108 0602 	add.w	r6, r8, #2
 8007ff8:	3e01      	subs	r6, #1
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	612e      	str	r6, [r5, #16]
 8007ffe:	4621      	mov	r1, r4
 8008000:	f7ff fd8e 	bl	8007b20 <_Bfree>
 8008004:	4628      	mov	r0, r5
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800a:	f842 0f04 	str.w	r0, [r2, #4]!
 800800e:	3301      	adds	r3, #1
 8008010:	e7c5      	b.n	8007f9e <__lshift+0x4a>
 8008012:	3904      	subs	r1, #4
 8008014:	f853 2b04 	ldr.w	r2, [r3], #4
 8008018:	f841 2f04 	str.w	r2, [r1, #4]!
 800801c:	459c      	cmp	ip, r3
 800801e:	d8f9      	bhi.n	8008014 <__lshift+0xc0>
 8008020:	e7ea      	b.n	8007ff8 <__lshift+0xa4>
 8008022:	bf00      	nop
 8008024:	0800a36d 	.word	0x0800a36d
 8008028:	0800a37e 	.word	0x0800a37e

0800802c <__mcmp>:
 800802c:	b530      	push	{r4, r5, lr}
 800802e:	6902      	ldr	r2, [r0, #16]
 8008030:	690c      	ldr	r4, [r1, #16]
 8008032:	1b12      	subs	r2, r2, r4
 8008034:	d10e      	bne.n	8008054 <__mcmp+0x28>
 8008036:	f100 0314 	add.w	r3, r0, #20
 800803a:	3114      	adds	r1, #20
 800803c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800804c:	42a5      	cmp	r5, r4
 800804e:	d003      	beq.n	8008058 <__mcmp+0x2c>
 8008050:	d305      	bcc.n	800805e <__mcmp+0x32>
 8008052:	2201      	movs	r2, #1
 8008054:	4610      	mov	r0, r2
 8008056:	bd30      	pop	{r4, r5, pc}
 8008058:	4283      	cmp	r3, r0
 800805a:	d3f3      	bcc.n	8008044 <__mcmp+0x18>
 800805c:	e7fa      	b.n	8008054 <__mcmp+0x28>
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	e7f7      	b.n	8008054 <__mcmp+0x28>

08008064 <__mdiff>:
 8008064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	460c      	mov	r4, r1
 800806a:	4606      	mov	r6, r0
 800806c:	4611      	mov	r1, r2
 800806e:	4620      	mov	r0, r4
 8008070:	4690      	mov	r8, r2
 8008072:	f7ff ffdb 	bl	800802c <__mcmp>
 8008076:	1e05      	subs	r5, r0, #0
 8008078:	d110      	bne.n	800809c <__mdiff+0x38>
 800807a:	4629      	mov	r1, r5
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff fd0f 	bl	8007aa0 <_Balloc>
 8008082:	b930      	cbnz	r0, 8008092 <__mdiff+0x2e>
 8008084:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <__mdiff+0x10c>)
 8008086:	4602      	mov	r2, r0
 8008088:	f240 2137 	movw	r1, #567	; 0x237
 800808c:	4839      	ldr	r0, [pc, #228]	; (8008174 <__mdiff+0x110>)
 800808e:	f001 fa5f 	bl	8009550 <__assert_func>
 8008092:	2301      	movs	r3, #1
 8008094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	bfa4      	itt	ge
 800809e:	4643      	movge	r3, r8
 80080a0:	46a0      	movge	r8, r4
 80080a2:	4630      	mov	r0, r6
 80080a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080a8:	bfa6      	itte	ge
 80080aa:	461c      	movge	r4, r3
 80080ac:	2500      	movge	r5, #0
 80080ae:	2501      	movlt	r5, #1
 80080b0:	f7ff fcf6 	bl	8007aa0 <_Balloc>
 80080b4:	b920      	cbnz	r0, 80080c0 <__mdiff+0x5c>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <__mdiff+0x10c>)
 80080b8:	4602      	mov	r2, r0
 80080ba:	f240 2145 	movw	r1, #581	; 0x245
 80080be:	e7e5      	b.n	800808c <__mdiff+0x28>
 80080c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080c4:	6926      	ldr	r6, [r4, #16]
 80080c6:	60c5      	str	r5, [r0, #12]
 80080c8:	f104 0914 	add.w	r9, r4, #20
 80080cc:	f108 0514 	add.w	r5, r8, #20
 80080d0:	f100 0e14 	add.w	lr, r0, #20
 80080d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080dc:	f108 0210 	add.w	r2, r8, #16
 80080e0:	46f2      	mov	sl, lr
 80080e2:	2100      	movs	r1, #0
 80080e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80080e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080ec:	fa11 f88b 	uxtah	r8, r1, fp
 80080f0:	b299      	uxth	r1, r3
 80080f2:	0c1b      	lsrs	r3, r3, #16
 80080f4:	eba8 0801 	sub.w	r8, r8, r1
 80080f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008100:	fa1f f888 	uxth.w	r8, r8
 8008104:	1419      	asrs	r1, r3, #16
 8008106:	454e      	cmp	r6, r9
 8008108:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800810c:	f84a 3b04 	str.w	r3, [sl], #4
 8008110:	d8e8      	bhi.n	80080e4 <__mdiff+0x80>
 8008112:	1b33      	subs	r3, r6, r4
 8008114:	3b15      	subs	r3, #21
 8008116:	f023 0303 	bic.w	r3, r3, #3
 800811a:	3304      	adds	r3, #4
 800811c:	3415      	adds	r4, #21
 800811e:	42a6      	cmp	r6, r4
 8008120:	bf38      	it	cc
 8008122:	2304      	movcc	r3, #4
 8008124:	441d      	add	r5, r3
 8008126:	4473      	add	r3, lr
 8008128:	469e      	mov	lr, r3
 800812a:	462e      	mov	r6, r5
 800812c:	4566      	cmp	r6, ip
 800812e:	d30e      	bcc.n	800814e <__mdiff+0xea>
 8008130:	f10c 0203 	add.w	r2, ip, #3
 8008134:	1b52      	subs	r2, r2, r5
 8008136:	f022 0203 	bic.w	r2, r2, #3
 800813a:	3d03      	subs	r5, #3
 800813c:	45ac      	cmp	ip, r5
 800813e:	bf38      	it	cc
 8008140:	2200      	movcc	r2, #0
 8008142:	4413      	add	r3, r2
 8008144:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008148:	b17a      	cbz	r2, 800816a <__mdiff+0x106>
 800814a:	6107      	str	r7, [r0, #16]
 800814c:	e7a4      	b.n	8008098 <__mdiff+0x34>
 800814e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008152:	fa11 f288 	uxtah	r2, r1, r8
 8008156:	1414      	asrs	r4, r2, #16
 8008158:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800815c:	b292      	uxth	r2, r2
 800815e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008162:	f84e 2b04 	str.w	r2, [lr], #4
 8008166:	1421      	asrs	r1, r4, #16
 8008168:	e7e0      	b.n	800812c <__mdiff+0xc8>
 800816a:	3f01      	subs	r7, #1
 800816c:	e7ea      	b.n	8008144 <__mdiff+0xe0>
 800816e:	bf00      	nop
 8008170:	0800a36d 	.word	0x0800a36d
 8008174:	0800a37e 	.word	0x0800a37e

08008178 <__ulp>:
 8008178:	b082      	sub	sp, #8
 800817a:	ed8d 0b00 	vstr	d0, [sp]
 800817e:	9a01      	ldr	r2, [sp, #4]
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <__ulp+0x48>)
 8008182:	4013      	ands	r3, r2
 8008184:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008188:	2b00      	cmp	r3, #0
 800818a:	dc08      	bgt.n	800819e <__ulp+0x26>
 800818c:	425b      	negs	r3, r3
 800818e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008192:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008196:	da04      	bge.n	80081a2 <__ulp+0x2a>
 8008198:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800819c:	4113      	asrs	r3, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	e008      	b.n	80081b4 <__ulp+0x3c>
 80081a2:	f1a2 0314 	sub.w	r3, r2, #20
 80081a6:	2b1e      	cmp	r3, #30
 80081a8:	bfda      	itte	le
 80081aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80081ae:	40da      	lsrle	r2, r3
 80081b0:	2201      	movgt	r2, #1
 80081b2:	2300      	movs	r3, #0
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	ec41 0b10 	vmov	d0, r0, r1
 80081bc:	b002      	add	sp, #8
 80081be:	4770      	bx	lr
 80081c0:	7ff00000 	.word	0x7ff00000

080081c4 <__b2d>:
 80081c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	6906      	ldr	r6, [r0, #16]
 80081ca:	f100 0814 	add.w	r8, r0, #20
 80081ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80081d2:	1f37      	subs	r7, r6, #4
 80081d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081d8:	4610      	mov	r0, r2
 80081da:	f7ff fd53 	bl	8007c84 <__hi0bits>
 80081de:	f1c0 0320 	rsb	r3, r0, #32
 80081e2:	280a      	cmp	r0, #10
 80081e4:	600b      	str	r3, [r1, #0]
 80081e6:	491b      	ldr	r1, [pc, #108]	; (8008254 <__b2d+0x90>)
 80081e8:	dc15      	bgt.n	8008216 <__b2d+0x52>
 80081ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80081ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80081f2:	45b8      	cmp	r8, r7
 80081f4:	ea43 0501 	orr.w	r5, r3, r1
 80081f8:	bf34      	ite	cc
 80081fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081fe:	2300      	movcs	r3, #0
 8008200:	3015      	adds	r0, #21
 8008202:	fa02 f000 	lsl.w	r0, r2, r0
 8008206:	fa23 f30c 	lsr.w	r3, r3, ip
 800820a:	4303      	orrs	r3, r0
 800820c:	461c      	mov	r4, r3
 800820e:	ec45 4b10 	vmov	d0, r4, r5
 8008212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008216:	45b8      	cmp	r8, r7
 8008218:	bf3a      	itte	cc
 800821a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800821e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008222:	2300      	movcs	r3, #0
 8008224:	380b      	subs	r0, #11
 8008226:	d012      	beq.n	800824e <__b2d+0x8a>
 8008228:	f1c0 0120 	rsb	r1, r0, #32
 800822c:	fa23 f401 	lsr.w	r4, r3, r1
 8008230:	4082      	lsls	r2, r0
 8008232:	4322      	orrs	r2, r4
 8008234:	4547      	cmp	r7, r8
 8008236:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800823a:	bf8c      	ite	hi
 800823c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008240:	2200      	movls	r2, #0
 8008242:	4083      	lsls	r3, r0
 8008244:	40ca      	lsrs	r2, r1
 8008246:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800824a:	4313      	orrs	r3, r2
 800824c:	e7de      	b.n	800820c <__b2d+0x48>
 800824e:	ea42 0501 	orr.w	r5, r2, r1
 8008252:	e7db      	b.n	800820c <__b2d+0x48>
 8008254:	3ff00000 	.word	0x3ff00000

08008258 <__d2b>:
 8008258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800825c:	460f      	mov	r7, r1
 800825e:	2101      	movs	r1, #1
 8008260:	ec59 8b10 	vmov	r8, r9, d0
 8008264:	4616      	mov	r6, r2
 8008266:	f7ff fc1b 	bl	8007aa0 <_Balloc>
 800826a:	4604      	mov	r4, r0
 800826c:	b930      	cbnz	r0, 800827c <__d2b+0x24>
 800826e:	4602      	mov	r2, r0
 8008270:	4b24      	ldr	r3, [pc, #144]	; (8008304 <__d2b+0xac>)
 8008272:	4825      	ldr	r0, [pc, #148]	; (8008308 <__d2b+0xb0>)
 8008274:	f240 310f 	movw	r1, #783	; 0x30f
 8008278:	f001 f96a 	bl	8009550 <__assert_func>
 800827c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008284:	bb2d      	cbnz	r5, 80082d2 <__d2b+0x7a>
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f1b8 0300 	subs.w	r3, r8, #0
 800828c:	d026      	beq.n	80082dc <__d2b+0x84>
 800828e:	4668      	mov	r0, sp
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	f7ff fd17 	bl	8007cc4 <__lo0bits>
 8008296:	e9dd 1200 	ldrd	r1, r2, [sp]
 800829a:	b1e8      	cbz	r0, 80082d8 <__d2b+0x80>
 800829c:	f1c0 0320 	rsb	r3, r0, #32
 80082a0:	fa02 f303 	lsl.w	r3, r2, r3
 80082a4:	430b      	orrs	r3, r1
 80082a6:	40c2      	lsrs	r2, r0
 80082a8:	6163      	str	r3, [r4, #20]
 80082aa:	9201      	str	r2, [sp, #4]
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	61a3      	str	r3, [r4, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf14      	ite	ne
 80082b4:	2202      	movne	r2, #2
 80082b6:	2201      	moveq	r2, #1
 80082b8:	6122      	str	r2, [r4, #16]
 80082ba:	b1bd      	cbz	r5, 80082ec <__d2b+0x94>
 80082bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082c0:	4405      	add	r5, r0
 80082c2:	603d      	str	r5, [r7, #0]
 80082c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	4620      	mov	r0, r4
 80082cc:	b003      	add	sp, #12
 80082ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082d6:	e7d6      	b.n	8008286 <__d2b+0x2e>
 80082d8:	6161      	str	r1, [r4, #20]
 80082da:	e7e7      	b.n	80082ac <__d2b+0x54>
 80082dc:	a801      	add	r0, sp, #4
 80082de:	f7ff fcf1 	bl	8007cc4 <__lo0bits>
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	6163      	str	r3, [r4, #20]
 80082e6:	3020      	adds	r0, #32
 80082e8:	2201      	movs	r2, #1
 80082ea:	e7e5      	b.n	80082b8 <__d2b+0x60>
 80082ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082f4:	6038      	str	r0, [r7, #0]
 80082f6:	6918      	ldr	r0, [r3, #16]
 80082f8:	f7ff fcc4 	bl	8007c84 <__hi0bits>
 80082fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008300:	e7e2      	b.n	80082c8 <__d2b+0x70>
 8008302:	bf00      	nop
 8008304:	0800a36d 	.word	0x0800a36d
 8008308:	0800a37e 	.word	0x0800a37e

0800830c <__ratio>:
 800830c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	4688      	mov	r8, r1
 8008312:	4669      	mov	r1, sp
 8008314:	4681      	mov	r9, r0
 8008316:	f7ff ff55 	bl	80081c4 <__b2d>
 800831a:	a901      	add	r1, sp, #4
 800831c:	4640      	mov	r0, r8
 800831e:	ec55 4b10 	vmov	r4, r5, d0
 8008322:	ee10 aa10 	vmov	sl, s0
 8008326:	f7ff ff4d 	bl	80081c4 <__b2d>
 800832a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800832e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008332:	1ad2      	subs	r2, r2, r3
 8008334:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008338:	1a5b      	subs	r3, r3, r1
 800833a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800833e:	ec57 6b10 	vmov	r6, r7, d0
 8008342:	2b00      	cmp	r3, #0
 8008344:	bfd6      	itet	le
 8008346:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800834a:	462a      	movgt	r2, r5
 800834c:	463a      	movle	r2, r7
 800834e:	46ab      	mov	fp, r5
 8008350:	bfd6      	itet	le
 8008352:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008356:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800835a:	ee00 3a90 	vmovle	s1, r3
 800835e:	ec4b ab17 	vmov	d7, sl, fp
 8008362:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008366:	b003      	add	sp, #12
 8008368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800836c <__copybits>:
 800836c:	3901      	subs	r1, #1
 800836e:	b570      	push	{r4, r5, r6, lr}
 8008370:	1149      	asrs	r1, r1, #5
 8008372:	6914      	ldr	r4, [r2, #16]
 8008374:	3101      	adds	r1, #1
 8008376:	f102 0314 	add.w	r3, r2, #20
 800837a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800837e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008382:	1f05      	subs	r5, r0, #4
 8008384:	42a3      	cmp	r3, r4
 8008386:	d30c      	bcc.n	80083a2 <__copybits+0x36>
 8008388:	1aa3      	subs	r3, r4, r2
 800838a:	3b11      	subs	r3, #17
 800838c:	f023 0303 	bic.w	r3, r3, #3
 8008390:	3211      	adds	r2, #17
 8008392:	42a2      	cmp	r2, r4
 8008394:	bf88      	it	hi
 8008396:	2300      	movhi	r3, #0
 8008398:	4418      	add	r0, r3
 800839a:	2300      	movs	r3, #0
 800839c:	4288      	cmp	r0, r1
 800839e:	d305      	bcc.n	80083ac <__copybits+0x40>
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80083a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80083aa:	e7eb      	b.n	8008384 <__copybits+0x18>
 80083ac:	f840 3b04 	str.w	r3, [r0], #4
 80083b0:	e7f4      	b.n	800839c <__copybits+0x30>

080083b2 <__any_on>:
 80083b2:	f100 0214 	add.w	r2, r0, #20
 80083b6:	6900      	ldr	r0, [r0, #16]
 80083b8:	114b      	asrs	r3, r1, #5
 80083ba:	4298      	cmp	r0, r3
 80083bc:	b510      	push	{r4, lr}
 80083be:	db11      	blt.n	80083e4 <__any_on+0x32>
 80083c0:	dd0a      	ble.n	80083d8 <__any_on+0x26>
 80083c2:	f011 011f 	ands.w	r1, r1, #31
 80083c6:	d007      	beq.n	80083d8 <__any_on+0x26>
 80083c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083cc:	fa24 f001 	lsr.w	r0, r4, r1
 80083d0:	fa00 f101 	lsl.w	r1, r0, r1
 80083d4:	428c      	cmp	r4, r1
 80083d6:	d10b      	bne.n	80083f0 <__any_on+0x3e>
 80083d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083dc:	4293      	cmp	r3, r2
 80083de:	d803      	bhi.n	80083e8 <__any_on+0x36>
 80083e0:	2000      	movs	r0, #0
 80083e2:	bd10      	pop	{r4, pc}
 80083e4:	4603      	mov	r3, r0
 80083e6:	e7f7      	b.n	80083d8 <__any_on+0x26>
 80083e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083ec:	2900      	cmp	r1, #0
 80083ee:	d0f5      	beq.n	80083dc <__any_on+0x2a>
 80083f0:	2001      	movs	r0, #1
 80083f2:	e7f6      	b.n	80083e2 <__any_on+0x30>

080083f4 <sulp>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	4616      	mov	r6, r2
 80083fc:	ec45 4b10 	vmov	d0, r4, r5
 8008400:	f7ff feba 	bl	8008178 <__ulp>
 8008404:	b17e      	cbz	r6, 8008426 <sulp+0x32>
 8008406:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800840a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800840e:	2b00      	cmp	r3, #0
 8008410:	dd09      	ble.n	8008426 <sulp+0x32>
 8008412:	051b      	lsls	r3, r3, #20
 8008414:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008418:	2000      	movs	r0, #0
 800841a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800841e:	ec41 0b17 	vmov	d7, r0, r1
 8008422:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008426:	bd70      	pop	{r4, r5, r6, pc}

08008428 <_strtod_l>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ed2d 8b0e 	vpush	{d8-d14}
 8008430:	b097      	sub	sp, #92	; 0x5c
 8008432:	4604      	mov	r4, r0
 8008434:	920d      	str	r2, [sp, #52]	; 0x34
 8008436:	2200      	movs	r2, #0
 8008438:	9212      	str	r2, [sp, #72]	; 0x48
 800843a:	468a      	mov	sl, r1
 800843c:	f04f 0800 	mov.w	r8, #0
 8008440:	f04f 0900 	mov.w	r9, #0
 8008444:	460a      	mov	r2, r1
 8008446:	9211      	str	r2, [sp, #68]	; 0x44
 8008448:	7811      	ldrb	r1, [r2, #0]
 800844a:	292b      	cmp	r1, #43	; 0x2b
 800844c:	d04c      	beq.n	80084e8 <_strtod_l+0xc0>
 800844e:	d839      	bhi.n	80084c4 <_strtod_l+0x9c>
 8008450:	290d      	cmp	r1, #13
 8008452:	d833      	bhi.n	80084bc <_strtod_l+0x94>
 8008454:	2908      	cmp	r1, #8
 8008456:	d833      	bhi.n	80084c0 <_strtod_l+0x98>
 8008458:	2900      	cmp	r1, #0
 800845a:	d03c      	beq.n	80084d6 <_strtod_l+0xae>
 800845c:	2200      	movs	r2, #0
 800845e:	9208      	str	r2, [sp, #32]
 8008460:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008462:	7832      	ldrb	r2, [r6, #0]
 8008464:	2a30      	cmp	r2, #48	; 0x30
 8008466:	f040 80b8 	bne.w	80085da <_strtod_l+0x1b2>
 800846a:	7872      	ldrb	r2, [r6, #1]
 800846c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008470:	2a58      	cmp	r2, #88	; 0x58
 8008472:	d170      	bne.n	8008556 <_strtod_l+0x12e>
 8008474:	9302      	str	r3, [sp, #8]
 8008476:	9b08      	ldr	r3, [sp, #32]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	ab12      	add	r3, sp, #72	; 0x48
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4a91      	ldr	r2, [pc, #580]	; (80086c4 <_strtod_l+0x29c>)
 8008480:	ab13      	add	r3, sp, #76	; 0x4c
 8008482:	a911      	add	r1, sp, #68	; 0x44
 8008484:	4620      	mov	r0, r4
 8008486:	f001 f8ff 	bl	8009688 <__gethex>
 800848a:	f010 070f 	ands.w	r7, r0, #15
 800848e:	4605      	mov	r5, r0
 8008490:	d005      	beq.n	800849e <_strtod_l+0x76>
 8008492:	2f06      	cmp	r7, #6
 8008494:	d12a      	bne.n	80084ec <_strtod_l+0xc4>
 8008496:	3601      	adds	r6, #1
 8008498:	2300      	movs	r3, #0
 800849a:	9611      	str	r6, [sp, #68]	; 0x44
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8555 	bne.w	8008f50 <_strtod_l+0xb28>
 80084a6:	9b08      	ldr	r3, [sp, #32]
 80084a8:	ec49 8b10 	vmov	d0, r8, r9
 80084ac:	b1cb      	cbz	r3, 80084e2 <_strtod_l+0xba>
 80084ae:	eeb1 0b40 	vneg.f64	d0, d0
 80084b2:	b017      	add	sp, #92	; 0x5c
 80084b4:	ecbd 8b0e 	vpop	{d8-d14}
 80084b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084bc:	2920      	cmp	r1, #32
 80084be:	d1cd      	bne.n	800845c <_strtod_l+0x34>
 80084c0:	3201      	adds	r2, #1
 80084c2:	e7c0      	b.n	8008446 <_strtod_l+0x1e>
 80084c4:	292d      	cmp	r1, #45	; 0x2d
 80084c6:	d1c9      	bne.n	800845c <_strtod_l+0x34>
 80084c8:	2101      	movs	r1, #1
 80084ca:	9108      	str	r1, [sp, #32]
 80084cc:	1c51      	adds	r1, r2, #1
 80084ce:	9111      	str	r1, [sp, #68]	; 0x44
 80084d0:	7852      	ldrb	r2, [r2, #1]
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	d1c4      	bne.n	8008460 <_strtod_l+0x38>
 80084d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084d8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 8535 	bne.w	8008f4c <_strtod_l+0xb24>
 80084e2:	ec49 8b10 	vmov	d0, r8, r9
 80084e6:	e7e4      	b.n	80084b2 <_strtod_l+0x8a>
 80084e8:	2100      	movs	r1, #0
 80084ea:	e7ee      	b.n	80084ca <_strtod_l+0xa2>
 80084ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ee:	b13a      	cbz	r2, 8008500 <_strtod_l+0xd8>
 80084f0:	2135      	movs	r1, #53	; 0x35
 80084f2:	a814      	add	r0, sp, #80	; 0x50
 80084f4:	f7ff ff3a 	bl	800836c <__copybits>
 80084f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7ff fb10 	bl	8007b20 <_Bfree>
 8008500:	1e7b      	subs	r3, r7, #1
 8008502:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008504:	2b04      	cmp	r3, #4
 8008506:	d806      	bhi.n	8008516 <_strtod_l+0xee>
 8008508:	e8df f003 	tbb	[pc, r3]
 800850c:	201d0314 	.word	0x201d0314
 8008510:	14          	.byte	0x14
 8008511:	00          	.byte	0x00
 8008512:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008516:	05eb      	lsls	r3, r5, #23
 8008518:	bf48      	it	mi
 800851a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800851e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008522:	0d1b      	lsrs	r3, r3, #20
 8008524:	051b      	lsls	r3, r3, #20
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1b9      	bne.n	800849e <_strtod_l+0x76>
 800852a:	f7fe fb8f 	bl	8006c4c <__errno>
 800852e:	2322      	movs	r3, #34	; 0x22
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	e7b4      	b.n	800849e <_strtod_l+0x76>
 8008534:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008538:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800853c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008540:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008544:	e7e7      	b.n	8008516 <_strtod_l+0xee>
 8008546:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80086cc <_strtod_l+0x2a4>
 800854a:	e7e4      	b.n	8008516 <_strtod_l+0xee>
 800854c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008550:	f04f 38ff 	mov.w	r8, #4294967295
 8008554:	e7df      	b.n	8008516 <_strtod_l+0xee>
 8008556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	9211      	str	r2, [sp, #68]	; 0x44
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d0f9      	beq.n	8008556 <_strtod_l+0x12e>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d09b      	beq.n	800849e <_strtod_l+0x76>
 8008566:	2301      	movs	r3, #1
 8008568:	9306      	str	r3, [sp, #24]
 800856a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800856c:	9309      	str	r3, [sp, #36]	; 0x24
 800856e:	2300      	movs	r3, #0
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	9307      	str	r3, [sp, #28]
 8008574:	461e      	mov	r6, r3
 8008576:	220a      	movs	r2, #10
 8008578:	9811      	ldr	r0, [sp, #68]	; 0x44
 800857a:	7805      	ldrb	r5, [r0, #0]
 800857c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008580:	b2d9      	uxtb	r1, r3
 8008582:	2909      	cmp	r1, #9
 8008584:	d92b      	bls.n	80085de <_strtod_l+0x1b6>
 8008586:	4950      	ldr	r1, [pc, #320]	; (80086c8 <_strtod_l+0x2a0>)
 8008588:	2201      	movs	r2, #1
 800858a:	f000 ffa9 	bl	80094e0 <strncmp>
 800858e:	2800      	cmp	r0, #0
 8008590:	d035      	beq.n	80085fe <_strtod_l+0x1d6>
 8008592:	2000      	movs	r0, #0
 8008594:	462a      	mov	r2, r5
 8008596:	4633      	mov	r3, r6
 8008598:	4683      	mov	fp, r0
 800859a:	4601      	mov	r1, r0
 800859c:	2a65      	cmp	r2, #101	; 0x65
 800859e:	d001      	beq.n	80085a4 <_strtod_l+0x17c>
 80085a0:	2a45      	cmp	r2, #69	; 0x45
 80085a2:	d118      	bne.n	80085d6 <_strtod_l+0x1ae>
 80085a4:	b91b      	cbnz	r3, 80085ae <_strtod_l+0x186>
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	4303      	orrs	r3, r0
 80085aa:	d094      	beq.n	80084d6 <_strtod_l+0xae>
 80085ac:	2300      	movs	r3, #0
 80085ae:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80085b2:	f10a 0201 	add.w	r2, sl, #1
 80085b6:	9211      	str	r2, [sp, #68]	; 0x44
 80085b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80085bc:	2a2b      	cmp	r2, #43	; 0x2b
 80085be:	d075      	beq.n	80086ac <_strtod_l+0x284>
 80085c0:	2a2d      	cmp	r2, #45	; 0x2d
 80085c2:	d07b      	beq.n	80086bc <_strtod_l+0x294>
 80085c4:	f04f 0e00 	mov.w	lr, #0
 80085c8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80085cc:	2d09      	cmp	r5, #9
 80085ce:	f240 8083 	bls.w	80086d8 <_strtod_l+0x2b0>
 80085d2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80085d6:	2500      	movs	r5, #0
 80085d8:	e09e      	b.n	8008718 <_strtod_l+0x2f0>
 80085da:	2300      	movs	r3, #0
 80085dc:	e7c4      	b.n	8008568 <_strtod_l+0x140>
 80085de:	2e08      	cmp	r6, #8
 80085e0:	bfd5      	itete	le
 80085e2:	9907      	ldrle	r1, [sp, #28]
 80085e4:	9905      	ldrgt	r1, [sp, #20]
 80085e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80085ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80085ee:	f100 0001 	add.w	r0, r0, #1
 80085f2:	bfd4      	ite	le
 80085f4:	9307      	strle	r3, [sp, #28]
 80085f6:	9305      	strgt	r3, [sp, #20]
 80085f8:	3601      	adds	r6, #1
 80085fa:	9011      	str	r0, [sp, #68]	; 0x44
 80085fc:	e7bc      	b.n	8008578 <_strtod_l+0x150>
 80085fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	9211      	str	r2, [sp, #68]	; 0x44
 8008604:	785a      	ldrb	r2, [r3, #1]
 8008606:	b3ae      	cbz	r6, 8008674 <_strtod_l+0x24c>
 8008608:	4683      	mov	fp, r0
 800860a:	4633      	mov	r3, r6
 800860c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008610:	2909      	cmp	r1, #9
 8008612:	d912      	bls.n	800863a <_strtod_l+0x212>
 8008614:	2101      	movs	r1, #1
 8008616:	e7c1      	b.n	800859c <_strtod_l+0x174>
 8008618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	9211      	str	r2, [sp, #68]	; 0x44
 800861e:	785a      	ldrb	r2, [r3, #1]
 8008620:	3001      	adds	r0, #1
 8008622:	2a30      	cmp	r2, #48	; 0x30
 8008624:	d0f8      	beq.n	8008618 <_strtod_l+0x1f0>
 8008626:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800862a:	2b08      	cmp	r3, #8
 800862c:	f200 8495 	bhi.w	8008f5a <_strtod_l+0xb32>
 8008630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008632:	9309      	str	r3, [sp, #36]	; 0x24
 8008634:	4683      	mov	fp, r0
 8008636:	2000      	movs	r0, #0
 8008638:	4603      	mov	r3, r0
 800863a:	3a30      	subs	r2, #48	; 0x30
 800863c:	f100 0101 	add.w	r1, r0, #1
 8008640:	d012      	beq.n	8008668 <_strtod_l+0x240>
 8008642:	448b      	add	fp, r1
 8008644:	eb00 0c03 	add.w	ip, r0, r3
 8008648:	4619      	mov	r1, r3
 800864a:	250a      	movs	r5, #10
 800864c:	4561      	cmp	r1, ip
 800864e:	d113      	bne.n	8008678 <_strtod_l+0x250>
 8008650:	1819      	adds	r1, r3, r0
 8008652:	2908      	cmp	r1, #8
 8008654:	f103 0301 	add.w	r3, r3, #1
 8008658:	4403      	add	r3, r0
 800865a:	dc1b      	bgt.n	8008694 <_strtod_l+0x26c>
 800865c:	9807      	ldr	r0, [sp, #28]
 800865e:	210a      	movs	r1, #10
 8008660:	fb01 2200 	mla	r2, r1, r0, r2
 8008664:	9207      	str	r2, [sp, #28]
 8008666:	2100      	movs	r1, #0
 8008668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800866a:	1c50      	adds	r0, r2, #1
 800866c:	9011      	str	r0, [sp, #68]	; 0x44
 800866e:	7852      	ldrb	r2, [r2, #1]
 8008670:	4608      	mov	r0, r1
 8008672:	e7cb      	b.n	800860c <_strtod_l+0x1e4>
 8008674:	4630      	mov	r0, r6
 8008676:	e7d4      	b.n	8008622 <_strtod_l+0x1fa>
 8008678:	2908      	cmp	r1, #8
 800867a:	f101 0101 	add.w	r1, r1, #1
 800867e:	dc03      	bgt.n	8008688 <_strtod_l+0x260>
 8008680:	9f07      	ldr	r7, [sp, #28]
 8008682:	436f      	muls	r7, r5
 8008684:	9707      	str	r7, [sp, #28]
 8008686:	e7e1      	b.n	800864c <_strtod_l+0x224>
 8008688:	2910      	cmp	r1, #16
 800868a:	bfde      	ittt	le
 800868c:	9f05      	ldrle	r7, [sp, #20]
 800868e:	436f      	mulle	r7, r5
 8008690:	9705      	strle	r7, [sp, #20]
 8008692:	e7db      	b.n	800864c <_strtod_l+0x224>
 8008694:	2b10      	cmp	r3, #16
 8008696:	bfdf      	itttt	le
 8008698:	9805      	ldrle	r0, [sp, #20]
 800869a:	210a      	movle	r1, #10
 800869c:	fb01 2200 	mlale	r2, r1, r0, r2
 80086a0:	9205      	strle	r2, [sp, #20]
 80086a2:	e7e0      	b.n	8008666 <_strtod_l+0x23e>
 80086a4:	f04f 0b00 	mov.w	fp, #0
 80086a8:	2101      	movs	r1, #1
 80086aa:	e77c      	b.n	80085a6 <_strtod_l+0x17e>
 80086ac:	f04f 0e00 	mov.w	lr, #0
 80086b0:	f10a 0202 	add.w	r2, sl, #2
 80086b4:	9211      	str	r2, [sp, #68]	; 0x44
 80086b6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80086ba:	e785      	b.n	80085c8 <_strtod_l+0x1a0>
 80086bc:	f04f 0e01 	mov.w	lr, #1
 80086c0:	e7f6      	b.n	80086b0 <_strtod_l+0x288>
 80086c2:	bf00      	nop
 80086c4:	0800a4d8 	.word	0x0800a4d8
 80086c8:	0800a4d4 	.word	0x0800a4d4
 80086cc:	7ff00000 	.word	0x7ff00000
 80086d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086d2:	1c55      	adds	r5, r2, #1
 80086d4:	9511      	str	r5, [sp, #68]	; 0x44
 80086d6:	7852      	ldrb	r2, [r2, #1]
 80086d8:	2a30      	cmp	r2, #48	; 0x30
 80086da:	d0f9      	beq.n	80086d0 <_strtod_l+0x2a8>
 80086dc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80086e0:	2d08      	cmp	r5, #8
 80086e2:	f63f af78 	bhi.w	80085d6 <_strtod_l+0x1ae>
 80086e6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80086ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086ec:	920a      	str	r2, [sp, #40]	; 0x28
 80086ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086f0:	1c55      	adds	r5, r2, #1
 80086f2:	9511      	str	r5, [sp, #68]	; 0x44
 80086f4:	7852      	ldrb	r2, [r2, #1]
 80086f6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80086fa:	2f09      	cmp	r7, #9
 80086fc:	d937      	bls.n	800876e <_strtod_l+0x346>
 80086fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008700:	1bed      	subs	r5, r5, r7
 8008702:	2d08      	cmp	r5, #8
 8008704:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008708:	dc02      	bgt.n	8008710 <_strtod_l+0x2e8>
 800870a:	4565      	cmp	r5, ip
 800870c:	bfa8      	it	ge
 800870e:	4665      	movge	r5, ip
 8008710:	f1be 0f00 	cmp.w	lr, #0
 8008714:	d000      	beq.n	8008718 <_strtod_l+0x2f0>
 8008716:	426d      	negs	r5, r5
 8008718:	2b00      	cmp	r3, #0
 800871a:	d14d      	bne.n	80087b8 <_strtod_l+0x390>
 800871c:	9b06      	ldr	r3, [sp, #24]
 800871e:	4303      	orrs	r3, r0
 8008720:	f47f aebd 	bne.w	800849e <_strtod_l+0x76>
 8008724:	2900      	cmp	r1, #0
 8008726:	f47f aed6 	bne.w	80084d6 <_strtod_l+0xae>
 800872a:	2a69      	cmp	r2, #105	; 0x69
 800872c:	d027      	beq.n	800877e <_strtod_l+0x356>
 800872e:	dc24      	bgt.n	800877a <_strtod_l+0x352>
 8008730:	2a49      	cmp	r2, #73	; 0x49
 8008732:	d024      	beq.n	800877e <_strtod_l+0x356>
 8008734:	2a4e      	cmp	r2, #78	; 0x4e
 8008736:	f47f aece 	bne.w	80084d6 <_strtod_l+0xae>
 800873a:	4995      	ldr	r1, [pc, #596]	; (8008990 <_strtod_l+0x568>)
 800873c:	a811      	add	r0, sp, #68	; 0x44
 800873e:	f001 f9e3 	bl	8009b08 <__match>
 8008742:	2800      	cmp	r0, #0
 8008744:	f43f aec7 	beq.w	80084d6 <_strtod_l+0xae>
 8008748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b28      	cmp	r3, #40	; 0x28
 800874e:	d12d      	bne.n	80087ac <_strtod_l+0x384>
 8008750:	4990      	ldr	r1, [pc, #576]	; (8008994 <_strtod_l+0x56c>)
 8008752:	aa14      	add	r2, sp, #80	; 0x50
 8008754:	a811      	add	r0, sp, #68	; 0x44
 8008756:	f001 f9eb 	bl	8009b30 <__hexnan>
 800875a:	2805      	cmp	r0, #5
 800875c:	d126      	bne.n	80087ac <_strtod_l+0x384>
 800875e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008760:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008764:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008768:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800876c:	e697      	b.n	800849e <_strtod_l+0x76>
 800876e:	250a      	movs	r5, #10
 8008770:	fb05 2c0c 	mla	ip, r5, ip, r2
 8008774:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008778:	e7b9      	b.n	80086ee <_strtod_l+0x2c6>
 800877a:	2a6e      	cmp	r2, #110	; 0x6e
 800877c:	e7db      	b.n	8008736 <_strtod_l+0x30e>
 800877e:	4986      	ldr	r1, [pc, #536]	; (8008998 <_strtod_l+0x570>)
 8008780:	a811      	add	r0, sp, #68	; 0x44
 8008782:	f001 f9c1 	bl	8009b08 <__match>
 8008786:	2800      	cmp	r0, #0
 8008788:	f43f aea5 	beq.w	80084d6 <_strtod_l+0xae>
 800878c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800878e:	4983      	ldr	r1, [pc, #524]	; (800899c <_strtod_l+0x574>)
 8008790:	3b01      	subs	r3, #1
 8008792:	a811      	add	r0, sp, #68	; 0x44
 8008794:	9311      	str	r3, [sp, #68]	; 0x44
 8008796:	f001 f9b7 	bl	8009b08 <__match>
 800879a:	b910      	cbnz	r0, 80087a2 <_strtod_l+0x37a>
 800879c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800879e:	3301      	adds	r3, #1
 80087a0:	9311      	str	r3, [sp, #68]	; 0x44
 80087a2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80089b0 <_strtod_l+0x588>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	e678      	b.n	800849e <_strtod_l+0x76>
 80087ac:	487c      	ldr	r0, [pc, #496]	; (80089a0 <_strtod_l+0x578>)
 80087ae:	f000 fec7 	bl	8009540 <nan>
 80087b2:	ec59 8b10 	vmov	r8, r9, d0
 80087b6:	e672      	b.n	800849e <_strtod_l+0x76>
 80087b8:	eddd 7a07 	vldr	s15, [sp, #28]
 80087bc:	eba5 020b 	sub.w	r2, r5, fp
 80087c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	bf08      	it	eq
 80087c8:	461e      	moveq	r6, r3
 80087ca:	2b10      	cmp	r3, #16
 80087cc:	9206      	str	r2, [sp, #24]
 80087ce:	461a      	mov	r2, r3
 80087d0:	bfa8      	it	ge
 80087d2:	2210      	movge	r2, #16
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	ec59 8b17 	vmov	r8, r9, d7
 80087da:	dd0c      	ble.n	80087f6 <_strtod_l+0x3ce>
 80087dc:	4971      	ldr	r1, [pc, #452]	; (80089a4 <_strtod_l+0x57c>)
 80087de:	eddd 6a05 	vldr	s13, [sp, #20]
 80087e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80087e6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80087ea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80087ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 80087f2:	ec59 8b16 	vmov	r8, r9, d6
 80087f6:	2b0f      	cmp	r3, #15
 80087f8:	dc37      	bgt.n	800886a <_strtod_l+0x442>
 80087fa:	9906      	ldr	r1, [sp, #24]
 80087fc:	2900      	cmp	r1, #0
 80087fe:	f43f ae4e 	beq.w	800849e <_strtod_l+0x76>
 8008802:	dd23      	ble.n	800884c <_strtod_l+0x424>
 8008804:	2916      	cmp	r1, #22
 8008806:	dc0b      	bgt.n	8008820 <_strtod_l+0x3f8>
 8008808:	4b66      	ldr	r3, [pc, #408]	; (80089a4 <_strtod_l+0x57c>)
 800880a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800880e:	ed93 7b00 	vldr	d7, [r3]
 8008812:	ec49 8b16 	vmov	d6, r8, r9
 8008816:	ee27 7b06 	vmul.f64	d7, d7, d6
 800881a:	ec59 8b17 	vmov	r8, r9, d7
 800881e:	e63e      	b.n	800849e <_strtod_l+0x76>
 8008820:	9806      	ldr	r0, [sp, #24]
 8008822:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008826:	4281      	cmp	r1, r0
 8008828:	db1f      	blt.n	800886a <_strtod_l+0x442>
 800882a:	4a5e      	ldr	r2, [pc, #376]	; (80089a4 <_strtod_l+0x57c>)
 800882c:	f1c3 030f 	rsb	r3, r3, #15
 8008830:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008834:	ed91 7b00 	vldr	d7, [r1]
 8008838:	ec49 8b16 	vmov	d6, r8, r9
 800883c:	1ac3      	subs	r3, r0, r3
 800883e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008842:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008846:	ed92 6b00 	vldr	d6, [r2]
 800884a:	e7e4      	b.n	8008816 <_strtod_l+0x3ee>
 800884c:	9906      	ldr	r1, [sp, #24]
 800884e:	3116      	adds	r1, #22
 8008850:	db0b      	blt.n	800886a <_strtod_l+0x442>
 8008852:	4b54      	ldr	r3, [pc, #336]	; (80089a4 <_strtod_l+0x57c>)
 8008854:	ebab 0505 	sub.w	r5, fp, r5
 8008858:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800885c:	ed95 7b00 	vldr	d7, [r5]
 8008860:	ec49 8b16 	vmov	d6, r8, r9
 8008864:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008868:	e7d7      	b.n	800881a <_strtod_l+0x3f2>
 800886a:	9906      	ldr	r1, [sp, #24]
 800886c:	1a9a      	subs	r2, r3, r2
 800886e:	440a      	add	r2, r1
 8008870:	2a00      	cmp	r2, #0
 8008872:	dd6e      	ble.n	8008952 <_strtod_l+0x52a>
 8008874:	f012 000f 	ands.w	r0, r2, #15
 8008878:	d00a      	beq.n	8008890 <_strtod_l+0x468>
 800887a:	494a      	ldr	r1, [pc, #296]	; (80089a4 <_strtod_l+0x57c>)
 800887c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008880:	ed91 7b00 	vldr	d7, [r1]
 8008884:	ec49 8b16 	vmov	d6, r8, r9
 8008888:	ee27 7b06 	vmul.f64	d7, d7, d6
 800888c:	ec59 8b17 	vmov	r8, r9, d7
 8008890:	f032 020f 	bics.w	r2, r2, #15
 8008894:	d04e      	beq.n	8008934 <_strtod_l+0x50c>
 8008896:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800889a:	dd22      	ble.n	80088e2 <_strtod_l+0x4ba>
 800889c:	2500      	movs	r5, #0
 800889e:	462e      	mov	r6, r5
 80088a0:	9507      	str	r5, [sp, #28]
 80088a2:	462f      	mov	r7, r5
 80088a4:	2322      	movs	r3, #34	; 0x22
 80088a6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80089b0 <_strtod_l+0x588>
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	f04f 0800 	mov.w	r8, #0
 80088b0:	9b07      	ldr	r3, [sp, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f43f adf3 	beq.w	800849e <_strtod_l+0x76>
 80088b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff f930 	bl	8007b20 <_Bfree>
 80088c0:	4639      	mov	r1, r7
 80088c2:	4620      	mov	r0, r4
 80088c4:	f7ff f92c 	bl	8007b20 <_Bfree>
 80088c8:	4631      	mov	r1, r6
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff f928 	bl	8007b20 <_Bfree>
 80088d0:	9907      	ldr	r1, [sp, #28]
 80088d2:	4620      	mov	r0, r4
 80088d4:	f7ff f924 	bl	8007b20 <_Bfree>
 80088d8:	4629      	mov	r1, r5
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff f920 	bl	8007b20 <_Bfree>
 80088e0:	e5dd      	b.n	800849e <_strtod_l+0x76>
 80088e2:	2000      	movs	r0, #0
 80088e4:	ec49 8b17 	vmov	d7, r8, r9
 80088e8:	4f2f      	ldr	r7, [pc, #188]	; (80089a8 <_strtod_l+0x580>)
 80088ea:	1112      	asrs	r2, r2, #4
 80088ec:	4601      	mov	r1, r0
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc23      	bgt.n	800893a <_strtod_l+0x512>
 80088f2:	b108      	cbz	r0, 80088f8 <_strtod_l+0x4d0>
 80088f4:	ec59 8b17 	vmov	r8, r9, d7
 80088f8:	4a2b      	ldr	r2, [pc, #172]	; (80089a8 <_strtod_l+0x580>)
 80088fa:	482c      	ldr	r0, [pc, #176]	; (80089ac <_strtod_l+0x584>)
 80088fc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008900:	ed92 7b00 	vldr	d7, [r2]
 8008904:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008908:	ec49 8b16 	vmov	d6, r8, r9
 800890c:	4a28      	ldr	r2, [pc, #160]	; (80089b0 <_strtod_l+0x588>)
 800890e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008912:	ee17 1a90 	vmov	r1, s15
 8008916:	400a      	ands	r2, r1
 8008918:	4282      	cmp	r2, r0
 800891a:	ec59 8b17 	vmov	r8, r9, d7
 800891e:	d8bd      	bhi.n	800889c <_strtod_l+0x474>
 8008920:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008924:	4282      	cmp	r2, r0
 8008926:	bf86      	itte	hi
 8008928:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80089b4 <_strtod_l+0x58c>
 800892c:	f04f 38ff 	movhi.w	r8, #4294967295
 8008930:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008934:	2200      	movs	r2, #0
 8008936:	9205      	str	r2, [sp, #20]
 8008938:	e076      	b.n	8008a28 <_strtod_l+0x600>
 800893a:	f012 0f01 	tst.w	r2, #1
 800893e:	d004      	beq.n	800894a <_strtod_l+0x522>
 8008940:	ed97 6b00 	vldr	d6, [r7]
 8008944:	2001      	movs	r0, #1
 8008946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800894a:	3101      	adds	r1, #1
 800894c:	1052      	asrs	r2, r2, #1
 800894e:	3708      	adds	r7, #8
 8008950:	e7cd      	b.n	80088ee <_strtod_l+0x4c6>
 8008952:	d0ef      	beq.n	8008934 <_strtod_l+0x50c>
 8008954:	4252      	negs	r2, r2
 8008956:	f012 000f 	ands.w	r0, r2, #15
 800895a:	d00a      	beq.n	8008972 <_strtod_l+0x54a>
 800895c:	4911      	ldr	r1, [pc, #68]	; (80089a4 <_strtod_l+0x57c>)
 800895e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008962:	ed91 7b00 	vldr	d7, [r1]
 8008966:	ec49 8b16 	vmov	d6, r8, r9
 800896a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800896e:	ec59 8b17 	vmov	r8, r9, d7
 8008972:	1112      	asrs	r2, r2, #4
 8008974:	d0de      	beq.n	8008934 <_strtod_l+0x50c>
 8008976:	2a1f      	cmp	r2, #31
 8008978:	dd1e      	ble.n	80089b8 <_strtod_l+0x590>
 800897a:	2500      	movs	r5, #0
 800897c:	462e      	mov	r6, r5
 800897e:	9507      	str	r5, [sp, #28]
 8008980:	462f      	mov	r7, r5
 8008982:	2322      	movs	r3, #34	; 0x22
 8008984:	f04f 0800 	mov.w	r8, #0
 8008988:	f04f 0900 	mov.w	r9, #0
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	e78f      	b.n	80088b0 <_strtod_l+0x488>
 8008990:	0800a2c5 	.word	0x0800a2c5
 8008994:	0800a4ec 	.word	0x0800a4ec
 8008998:	0800a2bd 	.word	0x0800a2bd
 800899c:	0800a2f4 	.word	0x0800a2f4
 80089a0:	0800a67d 	.word	0x0800a67d
 80089a4:	0800a400 	.word	0x0800a400
 80089a8:	0800a3d8 	.word	0x0800a3d8
 80089ac:	7ca00000 	.word	0x7ca00000
 80089b0:	7ff00000 	.word	0x7ff00000
 80089b4:	7fefffff 	.word	0x7fefffff
 80089b8:	f012 0110 	ands.w	r1, r2, #16
 80089bc:	bf18      	it	ne
 80089be:	216a      	movne	r1, #106	; 0x6a
 80089c0:	9105      	str	r1, [sp, #20]
 80089c2:	ec49 8b17 	vmov	d7, r8, r9
 80089c6:	49be      	ldr	r1, [pc, #760]	; (8008cc0 <_strtod_l+0x898>)
 80089c8:	2000      	movs	r0, #0
 80089ca:	07d7      	lsls	r7, r2, #31
 80089cc:	d504      	bpl.n	80089d8 <_strtod_l+0x5b0>
 80089ce:	ed91 6b00 	vldr	d6, [r1]
 80089d2:	2001      	movs	r0, #1
 80089d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089d8:	1052      	asrs	r2, r2, #1
 80089da:	f101 0108 	add.w	r1, r1, #8
 80089de:	d1f4      	bne.n	80089ca <_strtod_l+0x5a2>
 80089e0:	b108      	cbz	r0, 80089e6 <_strtod_l+0x5be>
 80089e2:	ec59 8b17 	vmov	r8, r9, d7
 80089e6:	9a05      	ldr	r2, [sp, #20]
 80089e8:	b1ba      	cbz	r2, 8008a1a <_strtod_l+0x5f2>
 80089ea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80089ee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	4648      	mov	r0, r9
 80089f6:	dd10      	ble.n	8008a1a <_strtod_l+0x5f2>
 80089f8:	2a1f      	cmp	r2, #31
 80089fa:	f340 812c 	ble.w	8008c56 <_strtod_l+0x82e>
 80089fe:	2a34      	cmp	r2, #52	; 0x34
 8008a00:	bfde      	ittt	le
 8008a02:	f04f 32ff 	movle.w	r2, #4294967295
 8008a06:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008a0a:	408a      	lslle	r2, r1
 8008a0c:	f04f 0800 	mov.w	r8, #0
 8008a10:	bfcc      	ite	gt
 8008a12:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008a16:	ea02 0900 	andle.w	r9, r2, r0
 8008a1a:	ec49 8b17 	vmov	d7, r8, r9
 8008a1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a26:	d0a8      	beq.n	800897a <_strtod_l+0x552>
 8008a28:	9a07      	ldr	r2, [sp, #28]
 8008a2a:	9200      	str	r2, [sp, #0]
 8008a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7ff f8dd 	bl	8007bf0 <__s2b>
 8008a36:	9007      	str	r0, [sp, #28]
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	f43f af2f 	beq.w	800889c <_strtod_l+0x474>
 8008a3e:	9a06      	ldr	r2, [sp, #24]
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	ebab 0305 	sub.w	r3, fp, r5
 8008a46:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8008ca0 <_strtod_l+0x878>
 8008a4a:	bfa8      	it	ge
 8008a4c:	2300      	movge	r3, #0
 8008a4e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008ca8 <_strtod_l+0x880>
 8008a52:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008cb0 <_strtod_l+0x888>
 8008a56:	9309      	str	r3, [sp, #36]	; 0x24
 8008a58:	2500      	movs	r5, #0
 8008a5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a60:	462e      	mov	r6, r5
 8008a62:	9b07      	ldr	r3, [sp, #28]
 8008a64:	4620      	mov	r0, r4
 8008a66:	6859      	ldr	r1, [r3, #4]
 8008a68:	f7ff f81a 	bl	8007aa0 <_Balloc>
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f43f af18 	beq.w	80088a4 <_strtod_l+0x47c>
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	3202      	adds	r2, #2
 8008a7a:	f103 010c 	add.w	r1, r3, #12
 8008a7e:	0092      	lsls	r2, r2, #2
 8008a80:	300c      	adds	r0, #12
 8008a82:	f000 fd4f 	bl	8009524 <memcpy>
 8008a86:	ec49 8b10 	vmov	d0, r8, r9
 8008a8a:	aa14      	add	r2, sp, #80	; 0x50
 8008a8c:	a913      	add	r1, sp, #76	; 0x4c
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7ff fbe2 	bl	8008258 <__d2b>
 8008a94:	ec49 8b18 	vmov	d8, r8, r9
 8008a98:	9012      	str	r0, [sp, #72]	; 0x48
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f43f af02 	beq.w	80088a4 <_strtod_l+0x47c>
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7ff f93c 	bl	8007d20 <__i2b>
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	f43f aefa 	beq.w	80088a4 <_strtod_l+0x47c>
 8008ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ab2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfab      	itete	ge
 8008ab8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008aba:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008abc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008ac0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008ac4:	bfac      	ite	ge
 8008ac6:	eb03 0b02 	addge.w	fp, r3, r2
 8008aca:	eba2 0a03 	sublt.w	sl, r2, r3
 8008ace:	9a05      	ldr	r2, [sp, #20]
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	4a7b      	ldr	r2, [pc, #492]	; (8008cc4 <_strtod_l+0x89c>)
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008ade:	f280 80cd 	bge.w	8008c7c <_strtod_l+0x854>
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	2a1f      	cmp	r2, #31
 8008ae6:	eba1 0102 	sub.w	r1, r1, r2
 8008aea:	f04f 0001 	mov.w	r0, #1
 8008aee:	f300 80b9 	bgt.w	8008c64 <_strtod_l+0x83c>
 8008af2:	fa00 f302 	lsl.w	r3, r0, r2
 8008af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af8:	2300      	movs	r3, #0
 8008afa:	930a      	str	r3, [sp, #40]	; 0x28
 8008afc:	eb0b 0301 	add.w	r3, fp, r1
 8008b00:	9a05      	ldr	r2, [sp, #20]
 8008b02:	459b      	cmp	fp, r3
 8008b04:	448a      	add	sl, r1
 8008b06:	4492      	add	sl, r2
 8008b08:	465a      	mov	r2, fp
 8008b0a:	bfa8      	it	ge
 8008b0c:	461a      	movge	r2, r3
 8008b0e:	4552      	cmp	r2, sl
 8008b10:	bfa8      	it	ge
 8008b12:	4652      	movge	r2, sl
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	bfc2      	ittt	gt
 8008b18:	1a9b      	subgt	r3, r3, r2
 8008b1a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008b1e:	ebab 0b02 	subgt.w	fp, fp, r2
 8008b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	dd18      	ble.n	8008b5a <_strtod_l+0x732>
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b2e:	f7ff f9b7 	bl	8007ea0 <__pow5mult>
 8008b32:	4606      	mov	r6, r0
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f43f aeb5 	beq.w	80088a4 <_strtod_l+0x47c>
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff f904 	bl	8007d4c <__multiply>
 8008b44:	900e      	str	r0, [sp, #56]	; 0x38
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f43f aeac 	beq.w	80088a4 <_strtod_l+0x47c>
 8008b4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7fe ffe6 	bl	8007b20 <_Bfree>
 8008b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b58:	9212      	str	r2, [sp, #72]	; 0x48
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f300 8093 	bgt.w	8008c86 <_strtod_l+0x85e>
 8008b60:	9b06      	ldr	r3, [sp, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dd08      	ble.n	8008b78 <_strtod_l+0x750>
 8008b66:	4639      	mov	r1, r7
 8008b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff f998 	bl	8007ea0 <__pow5mult>
 8008b70:	4607      	mov	r7, r0
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f43f ae96 	beq.w	80088a4 <_strtod_l+0x47c>
 8008b78:	f1ba 0f00 	cmp.w	sl, #0
 8008b7c:	dd08      	ble.n	8008b90 <_strtod_l+0x768>
 8008b7e:	4639      	mov	r1, r7
 8008b80:	4652      	mov	r2, sl
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7ff f9e6 	bl	8007f54 <__lshift>
 8008b88:	4607      	mov	r7, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f43f ae8a 	beq.w	80088a4 <_strtod_l+0x47c>
 8008b90:	f1bb 0f00 	cmp.w	fp, #0
 8008b94:	dd08      	ble.n	8008ba8 <_strtod_l+0x780>
 8008b96:	4631      	mov	r1, r6
 8008b98:	465a      	mov	r2, fp
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7ff f9da 	bl	8007f54 <__lshift>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f43f ae7e 	beq.w	80088a4 <_strtod_l+0x47c>
 8008ba8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008baa:	463a      	mov	r2, r7
 8008bac:	4620      	mov	r0, r4
 8008bae:	f7ff fa59 	bl	8008064 <__mdiff>
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f43f ae75 	beq.w	80088a4 <_strtod_l+0x47c>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008bc0:	60c3      	str	r3, [r0, #12]
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	f7ff fa32 	bl	800802c <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	da7f      	bge.n	8008ccc <_strtod_l+0x8a4>
 8008bcc:	ea5a 0a08 	orrs.w	sl, sl, r8
 8008bd0:	f040 80a5 	bne.w	8008d1e <_strtod_l+0x8f6>
 8008bd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f040 80a0 	bne.w	8008d1e <_strtod_l+0x8f6>
 8008bde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008be2:	0d1b      	lsrs	r3, r3, #20
 8008be4:	051b      	lsls	r3, r3, #20
 8008be6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bea:	f240 8098 	bls.w	8008d1e <_strtod_l+0x8f6>
 8008bee:	696b      	ldr	r3, [r5, #20]
 8008bf0:	b91b      	cbnz	r3, 8008bfa <_strtod_l+0x7d2>
 8008bf2:	692b      	ldr	r3, [r5, #16]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	f340 8092 	ble.w	8008d1e <_strtod_l+0x8f6>
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff f9a8 	bl	8007f54 <__lshift>
 8008c04:	4631      	mov	r1, r6
 8008c06:	4605      	mov	r5, r0
 8008c08:	f7ff fa10 	bl	800802c <__mcmp>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f340 8086 	ble.w	8008d1e <_strtod_l+0x8f6>
 8008c12:	9905      	ldr	r1, [sp, #20]
 8008c14:	4a2c      	ldr	r2, [pc, #176]	; (8008cc8 <_strtod_l+0x8a0>)
 8008c16:	464b      	mov	r3, r9
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	f000 809f 	beq.w	8008d5c <_strtod_l+0x934>
 8008c1e:	ea02 0109 	and.w	r1, r2, r9
 8008c22:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c26:	f300 8099 	bgt.w	8008d5c <_strtod_l+0x934>
 8008c2a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c2e:	f77f aea8 	ble.w	8008982 <_strtod_l+0x55a>
 8008c32:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008cb8 <_strtod_l+0x890>
 8008c36:	ec49 8b16 	vmov	d6, r8, r9
 8008c3a:	4b23      	ldr	r3, [pc, #140]	; (8008cc8 <_strtod_l+0x8a0>)
 8008c3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c40:	ee17 2a90 	vmov	r2, s15
 8008c44:	4013      	ands	r3, r2
 8008c46:	ec59 8b17 	vmov	r8, r9, d7
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f47f ae34 	bne.w	80088b8 <_strtod_l+0x490>
 8008c50:	2322      	movs	r3, #34	; 0x22
 8008c52:	6023      	str	r3, [r4, #0]
 8008c54:	e630      	b.n	80088b8 <_strtod_l+0x490>
 8008c56:	f04f 31ff 	mov.w	r1, #4294967295
 8008c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c5e:	ea02 0808 	and.w	r8, r2, r8
 8008c62:	e6da      	b.n	8008a1a <_strtod_l+0x5f2>
 8008c64:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008c68:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008c6c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008c70:	33e2      	adds	r3, #226	; 0xe2
 8008c72:	fa00 f303 	lsl.w	r3, r0, r3
 8008c76:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008c7a:	e73f      	b.n	8008afc <_strtod_l+0x6d4>
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c84:	e73a      	b.n	8008afc <_strtod_l+0x6d4>
 8008c86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff f962 	bl	8007f54 <__lshift>
 8008c90:	9012      	str	r0, [sp, #72]	; 0x48
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f47f af64 	bne.w	8008b60 <_strtod_l+0x738>
 8008c98:	e604      	b.n	80088a4 <_strtod_l+0x47c>
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w
 8008ca0:	94a03595 	.word	0x94a03595
 8008ca4:	3fcfffff 	.word	0x3fcfffff
 8008ca8:	94a03595 	.word	0x94a03595
 8008cac:	3fdfffff 	.word	0x3fdfffff
 8008cb0:	35afe535 	.word	0x35afe535
 8008cb4:	3fe00000 	.word	0x3fe00000
 8008cb8:	00000000 	.word	0x00000000
 8008cbc:	39500000 	.word	0x39500000
 8008cc0:	0800a500 	.word	0x0800a500
 8008cc4:	fffffc02 	.word	0xfffffc02
 8008cc8:	7ff00000 	.word	0x7ff00000
 8008ccc:	46cb      	mov	fp, r9
 8008cce:	d15f      	bne.n	8008d90 <_strtod_l+0x968>
 8008cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cd4:	f1ba 0f00 	cmp.w	sl, #0
 8008cd8:	d02a      	beq.n	8008d30 <_strtod_l+0x908>
 8008cda:	4aa7      	ldr	r2, [pc, #668]	; (8008f78 <_strtod_l+0xb50>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d12b      	bne.n	8008d38 <_strtod_l+0x910>
 8008ce0:	9b05      	ldr	r3, [sp, #20]
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	b1fb      	cbz	r3, 8008d26 <_strtod_l+0x8fe>
 8008ce6:	4ba5      	ldr	r3, [pc, #660]	; (8008f7c <_strtod_l+0xb54>)
 8008ce8:	ea09 0303 	and.w	r3, r9, r3
 8008cec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf4:	d81a      	bhi.n	8008d2c <_strtod_l+0x904>
 8008cf6:	0d1b      	lsrs	r3, r3, #20
 8008cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d119      	bne.n	8008d38 <_strtod_l+0x910>
 8008d04:	4b9e      	ldr	r3, [pc, #632]	; (8008f80 <_strtod_l+0xb58>)
 8008d06:	459b      	cmp	fp, r3
 8008d08:	d102      	bne.n	8008d10 <_strtod_l+0x8e8>
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	f43f adca 	beq.w	80088a4 <_strtod_l+0x47c>
 8008d10:	4b9a      	ldr	r3, [pc, #616]	; (8008f7c <_strtod_l+0xb54>)
 8008d12:	ea0b 0303 	and.w	r3, fp, r3
 8008d16:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008d1a:	f04f 0800 	mov.w	r8, #0
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d186      	bne.n	8008c32 <_strtod_l+0x80a>
 8008d24:	e5c8      	b.n	80088b8 <_strtod_l+0x490>
 8008d26:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2a:	e7e9      	b.n	8008d00 <_strtod_l+0x8d8>
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	e7e7      	b.n	8008d00 <_strtod_l+0x8d8>
 8008d30:	ea53 0308 	orrs.w	r3, r3, r8
 8008d34:	f43f af6d 	beq.w	8008c12 <_strtod_l+0x7ea>
 8008d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3a:	b1cb      	cbz	r3, 8008d70 <_strtod_l+0x948>
 8008d3c:	ea13 0f0b 	tst.w	r3, fp
 8008d40:	d0ed      	beq.n	8008d1e <_strtod_l+0x8f6>
 8008d42:	9a05      	ldr	r2, [sp, #20]
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f1ba 0f00 	cmp.w	sl, #0
 8008d4c:	d014      	beq.n	8008d78 <_strtod_l+0x950>
 8008d4e:	f7ff fb51 	bl	80083f4 <sulp>
 8008d52:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008d56:	ec59 8b17 	vmov	r8, r9, d7
 8008d5a:	e7e0      	b.n	8008d1e <_strtod_l+0x8f6>
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d62:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008d66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008d6a:	f04f 38ff 	mov.w	r8, #4294967295
 8008d6e:	e7d6      	b.n	8008d1e <_strtod_l+0x8f6>
 8008d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d72:	ea13 0f08 	tst.w	r3, r8
 8008d76:	e7e3      	b.n	8008d40 <_strtod_l+0x918>
 8008d78:	f7ff fb3c 	bl	80083f4 <sulp>
 8008d7c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008d80:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d88:	ec59 8b10 	vmov	r8, r9, d0
 8008d8c:	d1c7      	bne.n	8008d1e <_strtod_l+0x8f6>
 8008d8e:	e5f8      	b.n	8008982 <_strtod_l+0x55a>
 8008d90:	4631      	mov	r1, r6
 8008d92:	4628      	mov	r0, r5
 8008d94:	f7ff faba 	bl	800830c <__ratio>
 8008d98:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008d9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da4:	d85f      	bhi.n	8008e66 <_strtod_l+0xa3e>
 8008da6:	f1ba 0f00 	cmp.w	sl, #0
 8008daa:	d166      	bne.n	8008e7a <_strtod_l+0xa52>
 8008dac:	f1b8 0f00 	cmp.w	r8, #0
 8008db0:	d14d      	bne.n	8008e4e <_strtod_l+0xa26>
 8008db2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008db6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d162      	bne.n	8008e84 <_strtod_l+0xa5c>
 8008dbe:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8008dc2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dca:	d401      	bmi.n	8008dd0 <_strtod_l+0x9a8>
 8008dcc:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008dd0:	eeb1 cb4d 	vneg.f64	d12, d13
 8008dd4:	4869      	ldr	r0, [pc, #420]	; (8008f7c <_strtod_l+0xb54>)
 8008dd6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8008f88 <_strtod_l+0xb60>
 8008dda:	ea0b 0100 	and.w	r1, fp, r0
 8008dde:	4561      	cmp	r1, ip
 8008de0:	ec53 2b1c 	vmov	r2, r3, d12
 8008de4:	d17a      	bne.n	8008edc <_strtod_l+0xab4>
 8008de6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008dea:	ec49 8b10 	vmov	d0, r8, r9
 8008dee:	910a      	str	r1, [sp, #40]	; 0x28
 8008df0:	f7ff f9c2 	bl	8008178 <__ulp>
 8008df4:	ec49 8b1e 	vmov	d14, r8, r9
 8008df8:	4860      	ldr	r0, [pc, #384]	; (8008f7c <_strtod_l+0xb54>)
 8008dfa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8008dfe:	ee1e 3a90 	vmov	r3, s29
 8008e02:	4a60      	ldr	r2, [pc, #384]	; (8008f84 <_strtod_l+0xb5c>)
 8008e04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e06:	4018      	ands	r0, r3
 8008e08:	4290      	cmp	r0, r2
 8008e0a:	ec59 8b1e 	vmov	r8, r9, d14
 8008e0e:	d93c      	bls.n	8008e8a <_strtod_l+0xa62>
 8008e10:	ee18 2a90 	vmov	r2, s17
 8008e14:	4b5a      	ldr	r3, [pc, #360]	; (8008f80 <_strtod_l+0xb58>)
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d104      	bne.n	8008e24 <_strtod_l+0x9fc>
 8008e1a:	ee18 3a10 	vmov	r3, s16
 8008e1e:	3301      	adds	r3, #1
 8008e20:	f43f ad40 	beq.w	80088a4 <_strtod_l+0x47c>
 8008e24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8008f80 <_strtod_l+0xb58>
 8008e28:	f04f 38ff 	mov.w	r8, #4294967295
 8008e2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f7fe fe76 	bl	8007b20 <_Bfree>
 8008e34:	4639      	mov	r1, r7
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7fe fe72 	bl	8007b20 <_Bfree>
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f7fe fe6e 	bl	8007b20 <_Bfree>
 8008e44:	4629      	mov	r1, r5
 8008e46:	4620      	mov	r0, r4
 8008e48:	f7fe fe6a 	bl	8007b20 <_Bfree>
 8008e4c:	e609      	b.n	8008a62 <_strtod_l+0x63a>
 8008e4e:	f1b8 0f01 	cmp.w	r8, #1
 8008e52:	d103      	bne.n	8008e5c <_strtod_l+0xa34>
 8008e54:	f1b9 0f00 	cmp.w	r9, #0
 8008e58:	f43f ad93 	beq.w	8008982 <_strtod_l+0x55a>
 8008e5c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8008e60:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008e64:	e7b6      	b.n	8008dd4 <_strtod_l+0x9ac>
 8008e66:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008e6a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008e6e:	f1ba 0f00 	cmp.w	sl, #0
 8008e72:	d0ad      	beq.n	8008dd0 <_strtod_l+0x9a8>
 8008e74:	eeb0 cb4d 	vmov.f64	d12, d13
 8008e78:	e7ac      	b.n	8008dd4 <_strtod_l+0x9ac>
 8008e7a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8008e7e:	eeb0 db4c 	vmov.f64	d13, d12
 8008e82:	e7a7      	b.n	8008dd4 <_strtod_l+0x9ac>
 8008e84:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8008e88:	e7a4      	b.n	8008dd4 <_strtod_l+0x9ac>
 8008e8a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008e8e:	9b05      	ldr	r3, [sp, #20]
 8008e90:	46cb      	mov	fp, r9
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1ca      	bne.n	8008e2c <_strtod_l+0xa04>
 8008e96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e9a:	0d1b      	lsrs	r3, r3, #20
 8008e9c:	051b      	lsls	r3, r3, #20
 8008e9e:	4299      	cmp	r1, r3
 8008ea0:	d1c4      	bne.n	8008e2c <_strtod_l+0xa04>
 8008ea2:	ec51 0b1d 	vmov	r0, r1, d13
 8008ea6:	f7f7 fbf7 	bl	8000698 <__aeabi_d2lz>
 8008eaa:	f7f7 fbaf 	bl	800060c <__aeabi_l2d>
 8008eae:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8008eb2:	ec41 0b17 	vmov	d7, r0, r1
 8008eb6:	ea4b 0b08 	orr.w	fp, fp, r8
 8008eba:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8008ebe:	ee3d db47 	vsub.f64	d13, d13, d7
 8008ec2:	d03c      	beq.n	8008f3e <_strtod_l+0xb16>
 8008ec4:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ecc:	f53f acf4 	bmi.w	80088b8 <_strtod_l+0x490>
 8008ed0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed8:	dda8      	ble.n	8008e2c <_strtod_l+0xa04>
 8008eda:	e4ed      	b.n	80088b8 <_strtod_l+0x490>
 8008edc:	9805      	ldr	r0, [sp, #20]
 8008ede:	b1f0      	cbz	r0, 8008f1e <_strtod_l+0xaf6>
 8008ee0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008ee4:	d81b      	bhi.n	8008f1e <_strtod_l+0xaf6>
 8008ee6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8008f70 <_strtod_l+0xb48>
 8008eea:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef2:	d811      	bhi.n	8008f18 <_strtod_l+0xaf0>
 8008ef4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008ef8:	ee1d 3a10 	vmov	r3, s26
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	bf38      	it	cc
 8008f00:	2301      	movcc	r3, #1
 8008f02:	ee0d 3a10 	vmov	s26, r3
 8008f06:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008f0a:	f1ba 0f00 	cmp.w	sl, #0
 8008f0e:	d113      	bne.n	8008f38 <_strtod_l+0xb10>
 8008f10:	eeb1 7b4d 	vneg.f64	d7, d13
 8008f14:	ec53 2b17 	vmov	r2, r3, d7
 8008f18:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008f1c:	1a43      	subs	r3, r0, r1
 8008f1e:	eeb0 0b48 	vmov.f64	d0, d8
 8008f22:	ec43 2b1c 	vmov	d12, r2, r3
 8008f26:	910a      	str	r1, [sp, #40]	; 0x28
 8008f28:	f7ff f926 	bl	8008178 <__ulp>
 8008f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f2e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008f32:	ec59 8b18 	vmov	r8, r9, d8
 8008f36:	e7aa      	b.n	8008e8e <_strtod_l+0xa66>
 8008f38:	eeb0 7b4d 	vmov.f64	d7, d13
 8008f3c:	e7ea      	b.n	8008f14 <_strtod_l+0xaec>
 8008f3e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f46:	f57f af71 	bpl.w	8008e2c <_strtod_l+0xa04>
 8008f4a:	e4b5      	b.n	80088b8 <_strtod_l+0x490>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9308      	str	r3, [sp, #32]
 8008f50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	f7ff baa6 	b.w	80084a6 <_strtod_l+0x7e>
 8008f5a:	2a65      	cmp	r2, #101	; 0x65
 8008f5c:	f43f aba2 	beq.w	80086a4 <_strtod_l+0x27c>
 8008f60:	2a45      	cmp	r2, #69	; 0x45
 8008f62:	f43f ab9f 	beq.w	80086a4 <_strtod_l+0x27c>
 8008f66:	2101      	movs	r1, #1
 8008f68:	f7ff bbd8 	b.w	800871c <_strtod_l+0x2f4>
 8008f6c:	f3af 8000 	nop.w
 8008f70:	ffc00000 	.word	0xffc00000
 8008f74:	41dfffff 	.word	0x41dfffff
 8008f78:	000fffff 	.word	0x000fffff
 8008f7c:	7ff00000 	.word	0x7ff00000
 8008f80:	7fefffff 	.word	0x7fefffff
 8008f84:	7c9fffff 	.word	0x7c9fffff
 8008f88:	7fe00000 	.word	0x7fe00000

08008f8c <_strtod_r>:
 8008f8c:	4b01      	ldr	r3, [pc, #4]	; (8008f94 <_strtod_r+0x8>)
 8008f8e:	f7ff ba4b 	b.w	8008428 <_strtod_l>
 8008f92:	bf00      	nop
 8008f94:	20000068 	.word	0x20000068

08008f98 <_strtol_l.constprop.0>:
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9e:	d001      	beq.n	8008fa4 <_strtol_l.constprop.0+0xc>
 8008fa0:	2b24      	cmp	r3, #36	; 0x24
 8008fa2:	d906      	bls.n	8008fb2 <_strtol_l.constprop.0+0x1a>
 8008fa4:	f7fd fe52 	bl	8006c4c <__errno>
 8008fa8:	2316      	movs	r3, #22
 8008faa:	6003      	str	r3, [r0, #0]
 8008fac:	2000      	movs	r0, #0
 8008fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009098 <_strtol_l.constprop.0+0x100>
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	462e      	mov	r6, r5
 8008fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fbe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008fc2:	f017 0708 	ands.w	r7, r7, #8
 8008fc6:	d1f7      	bne.n	8008fb8 <_strtol_l.constprop.0+0x20>
 8008fc8:	2c2d      	cmp	r4, #45	; 0x2d
 8008fca:	d132      	bne.n	8009032 <_strtol_l.constprop.0+0x9a>
 8008fcc:	782c      	ldrb	r4, [r5, #0]
 8008fce:	2701      	movs	r7, #1
 8008fd0:	1cb5      	adds	r5, r6, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d05b      	beq.n	800908e <_strtol_l.constprop.0+0xf6>
 8008fd6:	2b10      	cmp	r3, #16
 8008fd8:	d109      	bne.n	8008fee <_strtol_l.constprop.0+0x56>
 8008fda:	2c30      	cmp	r4, #48	; 0x30
 8008fdc:	d107      	bne.n	8008fee <_strtol_l.constprop.0+0x56>
 8008fde:	782c      	ldrb	r4, [r5, #0]
 8008fe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008fe4:	2c58      	cmp	r4, #88	; 0x58
 8008fe6:	d14d      	bne.n	8009084 <_strtol_l.constprop.0+0xec>
 8008fe8:	786c      	ldrb	r4, [r5, #1]
 8008fea:	2310      	movs	r3, #16
 8008fec:	3502      	adds	r5, #2
 8008fee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ff2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ff6:	f04f 0e00 	mov.w	lr, #0
 8008ffa:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ffe:	4676      	mov	r6, lr
 8009000:	fb03 8a19 	mls	sl, r3, r9, r8
 8009004:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009008:	f1bc 0f09 	cmp.w	ip, #9
 800900c:	d816      	bhi.n	800903c <_strtol_l.constprop.0+0xa4>
 800900e:	4664      	mov	r4, ip
 8009010:	42a3      	cmp	r3, r4
 8009012:	dd24      	ble.n	800905e <_strtol_l.constprop.0+0xc6>
 8009014:	f1be 3fff 	cmp.w	lr, #4294967295
 8009018:	d008      	beq.n	800902c <_strtol_l.constprop.0+0x94>
 800901a:	45b1      	cmp	r9, r6
 800901c:	d31c      	bcc.n	8009058 <_strtol_l.constprop.0+0xc0>
 800901e:	d101      	bne.n	8009024 <_strtol_l.constprop.0+0x8c>
 8009020:	45a2      	cmp	sl, r4
 8009022:	db19      	blt.n	8009058 <_strtol_l.constprop.0+0xc0>
 8009024:	fb06 4603 	mla	r6, r6, r3, r4
 8009028:	f04f 0e01 	mov.w	lr, #1
 800902c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009030:	e7e8      	b.n	8009004 <_strtol_l.constprop.0+0x6c>
 8009032:	2c2b      	cmp	r4, #43	; 0x2b
 8009034:	bf04      	itt	eq
 8009036:	782c      	ldrbeq	r4, [r5, #0]
 8009038:	1cb5      	addeq	r5, r6, #2
 800903a:	e7ca      	b.n	8008fd2 <_strtol_l.constprop.0+0x3a>
 800903c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009040:	f1bc 0f19 	cmp.w	ip, #25
 8009044:	d801      	bhi.n	800904a <_strtol_l.constprop.0+0xb2>
 8009046:	3c37      	subs	r4, #55	; 0x37
 8009048:	e7e2      	b.n	8009010 <_strtol_l.constprop.0+0x78>
 800904a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800904e:	f1bc 0f19 	cmp.w	ip, #25
 8009052:	d804      	bhi.n	800905e <_strtol_l.constprop.0+0xc6>
 8009054:	3c57      	subs	r4, #87	; 0x57
 8009056:	e7db      	b.n	8009010 <_strtol_l.constprop.0+0x78>
 8009058:	f04f 3eff 	mov.w	lr, #4294967295
 800905c:	e7e6      	b.n	800902c <_strtol_l.constprop.0+0x94>
 800905e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009062:	d105      	bne.n	8009070 <_strtol_l.constprop.0+0xd8>
 8009064:	2322      	movs	r3, #34	; 0x22
 8009066:	6003      	str	r3, [r0, #0]
 8009068:	4646      	mov	r6, r8
 800906a:	b942      	cbnz	r2, 800907e <_strtol_l.constprop.0+0xe6>
 800906c:	4630      	mov	r0, r6
 800906e:	e79e      	b.n	8008fae <_strtol_l.constprop.0+0x16>
 8009070:	b107      	cbz	r7, 8009074 <_strtol_l.constprop.0+0xdc>
 8009072:	4276      	negs	r6, r6
 8009074:	2a00      	cmp	r2, #0
 8009076:	d0f9      	beq.n	800906c <_strtol_l.constprop.0+0xd4>
 8009078:	f1be 0f00 	cmp.w	lr, #0
 800907c:	d000      	beq.n	8009080 <_strtol_l.constprop.0+0xe8>
 800907e:	1e69      	subs	r1, r5, #1
 8009080:	6011      	str	r1, [r2, #0]
 8009082:	e7f3      	b.n	800906c <_strtol_l.constprop.0+0xd4>
 8009084:	2430      	movs	r4, #48	; 0x30
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1b1      	bne.n	8008fee <_strtol_l.constprop.0+0x56>
 800908a:	2308      	movs	r3, #8
 800908c:	e7af      	b.n	8008fee <_strtol_l.constprop.0+0x56>
 800908e:	2c30      	cmp	r4, #48	; 0x30
 8009090:	d0a5      	beq.n	8008fde <_strtol_l.constprop.0+0x46>
 8009092:	230a      	movs	r3, #10
 8009094:	e7ab      	b.n	8008fee <_strtol_l.constprop.0+0x56>
 8009096:	bf00      	nop
 8009098:	0800a529 	.word	0x0800a529

0800909c <_strtol_r>:
 800909c:	f7ff bf7c 	b.w	8008f98 <_strtol_l.constprop.0>

080090a0 <__ssputs_r>:
 80090a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	688e      	ldr	r6, [r1, #8]
 80090a6:	461f      	mov	r7, r3
 80090a8:	42be      	cmp	r6, r7
 80090aa:	680b      	ldr	r3, [r1, #0]
 80090ac:	4682      	mov	sl, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	4690      	mov	r8, r2
 80090b2:	d82c      	bhi.n	800910e <__ssputs_r+0x6e>
 80090b4:	898a      	ldrh	r2, [r1, #12]
 80090b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090ba:	d026      	beq.n	800910a <__ssputs_r+0x6a>
 80090bc:	6965      	ldr	r5, [r4, #20]
 80090be:	6909      	ldr	r1, [r1, #16]
 80090c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090c4:	eba3 0901 	sub.w	r9, r3, r1
 80090c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090cc:	1c7b      	adds	r3, r7, #1
 80090ce:	444b      	add	r3, r9
 80090d0:	106d      	asrs	r5, r5, #1
 80090d2:	429d      	cmp	r5, r3
 80090d4:	bf38      	it	cc
 80090d6:	461d      	movcc	r5, r3
 80090d8:	0553      	lsls	r3, r2, #21
 80090da:	d527      	bpl.n	800912c <__ssputs_r+0x8c>
 80090dc:	4629      	mov	r1, r5
 80090de:	f7fe fc53 	bl	8007988 <_malloc_r>
 80090e2:	4606      	mov	r6, r0
 80090e4:	b360      	cbz	r0, 8009140 <__ssputs_r+0xa0>
 80090e6:	6921      	ldr	r1, [r4, #16]
 80090e8:	464a      	mov	r2, r9
 80090ea:	f000 fa1b 	bl	8009524 <memcpy>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	6126      	str	r6, [r4, #16]
 80090fc:	6165      	str	r5, [r4, #20]
 80090fe:	444e      	add	r6, r9
 8009100:	eba5 0509 	sub.w	r5, r5, r9
 8009104:	6026      	str	r6, [r4, #0]
 8009106:	60a5      	str	r5, [r4, #8]
 8009108:	463e      	mov	r6, r7
 800910a:	42be      	cmp	r6, r7
 800910c:	d900      	bls.n	8009110 <__ssputs_r+0x70>
 800910e:	463e      	mov	r6, r7
 8009110:	6820      	ldr	r0, [r4, #0]
 8009112:	4632      	mov	r2, r6
 8009114:	4641      	mov	r1, r8
 8009116:	f000 f9c9 	bl	80094ac <memmove>
 800911a:	68a3      	ldr	r3, [r4, #8]
 800911c:	1b9b      	subs	r3, r3, r6
 800911e:	60a3      	str	r3, [r4, #8]
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	4433      	add	r3, r6
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	2000      	movs	r0, #0
 8009128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912c:	462a      	mov	r2, r5
 800912e:	f000 fdac 	bl	8009c8a <_realloc_r>
 8009132:	4606      	mov	r6, r0
 8009134:	2800      	cmp	r0, #0
 8009136:	d1e0      	bne.n	80090fa <__ssputs_r+0x5a>
 8009138:	6921      	ldr	r1, [r4, #16]
 800913a:	4650      	mov	r0, sl
 800913c:	f7fe fbb0 	bl	80078a0 <_free_r>
 8009140:	230c      	movs	r3, #12
 8009142:	f8ca 3000 	str.w	r3, [sl]
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	e7e9      	b.n	8009128 <__ssputs_r+0x88>

08009154 <_svfiprintf_r>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	4698      	mov	r8, r3
 800915a:	898b      	ldrh	r3, [r1, #12]
 800915c:	061b      	lsls	r3, r3, #24
 800915e:	b09d      	sub	sp, #116	; 0x74
 8009160:	4607      	mov	r7, r0
 8009162:	460d      	mov	r5, r1
 8009164:	4614      	mov	r4, r2
 8009166:	d50e      	bpl.n	8009186 <_svfiprintf_r+0x32>
 8009168:	690b      	ldr	r3, [r1, #16]
 800916a:	b963      	cbnz	r3, 8009186 <_svfiprintf_r+0x32>
 800916c:	2140      	movs	r1, #64	; 0x40
 800916e:	f7fe fc0b 	bl	8007988 <_malloc_r>
 8009172:	6028      	str	r0, [r5, #0]
 8009174:	6128      	str	r0, [r5, #16]
 8009176:	b920      	cbnz	r0, 8009182 <_svfiprintf_r+0x2e>
 8009178:	230c      	movs	r3, #12
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e0d0      	b.n	8009324 <_svfiprintf_r+0x1d0>
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	616b      	str	r3, [r5, #20]
 8009186:	2300      	movs	r3, #0
 8009188:	9309      	str	r3, [sp, #36]	; 0x24
 800918a:	2320      	movs	r3, #32
 800918c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009190:	f8cd 800c 	str.w	r8, [sp, #12]
 8009194:	2330      	movs	r3, #48	; 0x30
 8009196:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800933c <_svfiprintf_r+0x1e8>
 800919a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800919e:	f04f 0901 	mov.w	r9, #1
 80091a2:	4623      	mov	r3, r4
 80091a4:	469a      	mov	sl, r3
 80091a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091aa:	b10a      	cbz	r2, 80091b0 <_svfiprintf_r+0x5c>
 80091ac:	2a25      	cmp	r2, #37	; 0x25
 80091ae:	d1f9      	bne.n	80091a4 <_svfiprintf_r+0x50>
 80091b0:	ebba 0b04 	subs.w	fp, sl, r4
 80091b4:	d00b      	beq.n	80091ce <_svfiprintf_r+0x7a>
 80091b6:	465b      	mov	r3, fp
 80091b8:	4622      	mov	r2, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff ff6f 	bl	80090a0 <__ssputs_r>
 80091c2:	3001      	adds	r0, #1
 80091c4:	f000 80a9 	beq.w	800931a <_svfiprintf_r+0x1c6>
 80091c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ca:	445a      	add	r2, fp
 80091cc:	9209      	str	r2, [sp, #36]	; 0x24
 80091ce:	f89a 3000 	ldrb.w	r3, [sl]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80a1 	beq.w	800931a <_svfiprintf_r+0x1c6>
 80091d8:	2300      	movs	r3, #0
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e2:	f10a 0a01 	add.w	sl, sl, #1
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	9307      	str	r3, [sp, #28]
 80091ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091ee:	931a      	str	r3, [sp, #104]	; 0x68
 80091f0:	4654      	mov	r4, sl
 80091f2:	2205      	movs	r2, #5
 80091f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f8:	4850      	ldr	r0, [pc, #320]	; (800933c <_svfiprintf_r+0x1e8>)
 80091fa:	f7f7 f821 	bl	8000240 <memchr>
 80091fe:	9a04      	ldr	r2, [sp, #16]
 8009200:	b9d8      	cbnz	r0, 800923a <_svfiprintf_r+0xe6>
 8009202:	06d0      	lsls	r0, r2, #27
 8009204:	bf44      	itt	mi
 8009206:	2320      	movmi	r3, #32
 8009208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800920c:	0711      	lsls	r1, r2, #28
 800920e:	bf44      	itt	mi
 8009210:	232b      	movmi	r3, #43	; 0x2b
 8009212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009216:	f89a 3000 	ldrb.w	r3, [sl]
 800921a:	2b2a      	cmp	r3, #42	; 0x2a
 800921c:	d015      	beq.n	800924a <_svfiprintf_r+0xf6>
 800921e:	9a07      	ldr	r2, [sp, #28]
 8009220:	4654      	mov	r4, sl
 8009222:	2000      	movs	r0, #0
 8009224:	f04f 0c0a 	mov.w	ip, #10
 8009228:	4621      	mov	r1, r4
 800922a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800922e:	3b30      	subs	r3, #48	; 0x30
 8009230:	2b09      	cmp	r3, #9
 8009232:	d94d      	bls.n	80092d0 <_svfiprintf_r+0x17c>
 8009234:	b1b0      	cbz	r0, 8009264 <_svfiprintf_r+0x110>
 8009236:	9207      	str	r2, [sp, #28]
 8009238:	e014      	b.n	8009264 <_svfiprintf_r+0x110>
 800923a:	eba0 0308 	sub.w	r3, r0, r8
 800923e:	fa09 f303 	lsl.w	r3, r9, r3
 8009242:	4313      	orrs	r3, r2
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	46a2      	mov	sl, r4
 8009248:	e7d2      	b.n	80091f0 <_svfiprintf_r+0x9c>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	1d19      	adds	r1, r3, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	9103      	str	r1, [sp, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfbb      	ittet	lt
 8009256:	425b      	neglt	r3, r3
 8009258:	f042 0202 	orrlt.w	r2, r2, #2
 800925c:	9307      	strge	r3, [sp, #28]
 800925e:	9307      	strlt	r3, [sp, #28]
 8009260:	bfb8      	it	lt
 8009262:	9204      	strlt	r2, [sp, #16]
 8009264:	7823      	ldrb	r3, [r4, #0]
 8009266:	2b2e      	cmp	r3, #46	; 0x2e
 8009268:	d10c      	bne.n	8009284 <_svfiprintf_r+0x130>
 800926a:	7863      	ldrb	r3, [r4, #1]
 800926c:	2b2a      	cmp	r3, #42	; 0x2a
 800926e:	d134      	bne.n	80092da <_svfiprintf_r+0x186>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	1d1a      	adds	r2, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	9203      	str	r2, [sp, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bfb8      	it	lt
 800927c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009280:	3402      	adds	r4, #2
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800934c <_svfiprintf_r+0x1f8>
 8009288:	7821      	ldrb	r1, [r4, #0]
 800928a:	2203      	movs	r2, #3
 800928c:	4650      	mov	r0, sl
 800928e:	f7f6 ffd7 	bl	8000240 <memchr>
 8009292:	b138      	cbz	r0, 80092a4 <_svfiprintf_r+0x150>
 8009294:	9b04      	ldr	r3, [sp, #16]
 8009296:	eba0 000a 	sub.w	r0, r0, sl
 800929a:	2240      	movs	r2, #64	; 0x40
 800929c:	4082      	lsls	r2, r0
 800929e:	4313      	orrs	r3, r2
 80092a0:	3401      	adds	r4, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a8:	4825      	ldr	r0, [pc, #148]	; (8009340 <_svfiprintf_r+0x1ec>)
 80092aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ae:	2206      	movs	r2, #6
 80092b0:	f7f6 ffc6 	bl	8000240 <memchr>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d038      	beq.n	800932a <_svfiprintf_r+0x1d6>
 80092b8:	4b22      	ldr	r3, [pc, #136]	; (8009344 <_svfiprintf_r+0x1f0>)
 80092ba:	bb1b      	cbnz	r3, 8009304 <_svfiprintf_r+0x1b0>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	3307      	adds	r3, #7
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	3308      	adds	r3, #8
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ca:	4433      	add	r3, r6
 80092cc:	9309      	str	r3, [sp, #36]	; 0x24
 80092ce:	e768      	b.n	80091a2 <_svfiprintf_r+0x4e>
 80092d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092d4:	460c      	mov	r4, r1
 80092d6:	2001      	movs	r0, #1
 80092d8:	e7a6      	b.n	8009228 <_svfiprintf_r+0xd4>
 80092da:	2300      	movs	r3, #0
 80092dc:	3401      	adds	r4, #1
 80092de:	9305      	str	r3, [sp, #20]
 80092e0:	4619      	mov	r1, r3
 80092e2:	f04f 0c0a 	mov.w	ip, #10
 80092e6:	4620      	mov	r0, r4
 80092e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ec:	3a30      	subs	r2, #48	; 0x30
 80092ee:	2a09      	cmp	r2, #9
 80092f0:	d903      	bls.n	80092fa <_svfiprintf_r+0x1a6>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0c6      	beq.n	8009284 <_svfiprintf_r+0x130>
 80092f6:	9105      	str	r1, [sp, #20]
 80092f8:	e7c4      	b.n	8009284 <_svfiprintf_r+0x130>
 80092fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80092fe:	4604      	mov	r4, r0
 8009300:	2301      	movs	r3, #1
 8009302:	e7f0      	b.n	80092e6 <_svfiprintf_r+0x192>
 8009304:	ab03      	add	r3, sp, #12
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	462a      	mov	r2, r5
 800930a:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <_svfiprintf_r+0x1f4>)
 800930c:	a904      	add	r1, sp, #16
 800930e:	4638      	mov	r0, r7
 8009310:	f7fc fd76 	bl	8005e00 <_printf_float>
 8009314:	1c42      	adds	r2, r0, #1
 8009316:	4606      	mov	r6, r0
 8009318:	d1d6      	bne.n	80092c8 <_svfiprintf_r+0x174>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	065b      	lsls	r3, r3, #25
 800931e:	f53f af2d 	bmi.w	800917c <_svfiprintf_r+0x28>
 8009322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009324:	b01d      	add	sp, #116	; 0x74
 8009326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932a:	ab03      	add	r3, sp, #12
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462a      	mov	r2, r5
 8009330:	4b05      	ldr	r3, [pc, #20]	; (8009348 <_svfiprintf_r+0x1f4>)
 8009332:	a904      	add	r1, sp, #16
 8009334:	4638      	mov	r0, r7
 8009336:	f7fc ffeb 	bl	8006310 <_printf_i>
 800933a:	e7eb      	b.n	8009314 <_svfiprintf_r+0x1c0>
 800933c:	0800a629 	.word	0x0800a629
 8009340:	0800a633 	.word	0x0800a633
 8009344:	08005e01 	.word	0x08005e01
 8009348:	080090a1 	.word	0x080090a1
 800934c:	0800a62f 	.word	0x0800a62f

08009350 <__sflush_r>:
 8009350:	898a      	ldrh	r2, [r1, #12]
 8009352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009356:	4605      	mov	r5, r0
 8009358:	0710      	lsls	r0, r2, #28
 800935a:	460c      	mov	r4, r1
 800935c:	d458      	bmi.n	8009410 <__sflush_r+0xc0>
 800935e:	684b      	ldr	r3, [r1, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	dc05      	bgt.n	8009370 <__sflush_r+0x20>
 8009364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	dc02      	bgt.n	8009370 <__sflush_r+0x20>
 800936a:	2000      	movs	r0, #0
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009372:	2e00      	cmp	r6, #0
 8009374:	d0f9      	beq.n	800936a <__sflush_r+0x1a>
 8009376:	2300      	movs	r3, #0
 8009378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800937c:	682f      	ldr	r7, [r5, #0]
 800937e:	6a21      	ldr	r1, [r4, #32]
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	d032      	beq.n	80093ea <__sflush_r+0x9a>
 8009384:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	075a      	lsls	r2, r3, #29
 800938a:	d505      	bpl.n	8009398 <__sflush_r+0x48>
 800938c:	6863      	ldr	r3, [r4, #4]
 800938e:	1ac0      	subs	r0, r0, r3
 8009390:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009392:	b10b      	cbz	r3, 8009398 <__sflush_r+0x48>
 8009394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009396:	1ac0      	subs	r0, r0, r3
 8009398:	2300      	movs	r3, #0
 800939a:	4602      	mov	r2, r0
 800939c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800939e:	6a21      	ldr	r1, [r4, #32]
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b0      	blx	r6
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	d106      	bne.n	80093b8 <__sflush_r+0x68>
 80093aa:	6829      	ldr	r1, [r5, #0]
 80093ac:	291d      	cmp	r1, #29
 80093ae:	d82b      	bhi.n	8009408 <__sflush_r+0xb8>
 80093b0:	4a29      	ldr	r2, [pc, #164]	; (8009458 <__sflush_r+0x108>)
 80093b2:	410a      	asrs	r2, r1
 80093b4:	07d6      	lsls	r6, r2, #31
 80093b6:	d427      	bmi.n	8009408 <__sflush_r+0xb8>
 80093b8:	2200      	movs	r2, #0
 80093ba:	6062      	str	r2, [r4, #4]
 80093bc:	04d9      	lsls	r1, r3, #19
 80093be:	6922      	ldr	r2, [r4, #16]
 80093c0:	6022      	str	r2, [r4, #0]
 80093c2:	d504      	bpl.n	80093ce <__sflush_r+0x7e>
 80093c4:	1c42      	adds	r2, r0, #1
 80093c6:	d101      	bne.n	80093cc <__sflush_r+0x7c>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b903      	cbnz	r3, 80093ce <__sflush_r+0x7e>
 80093cc:	6560      	str	r0, [r4, #84]	; 0x54
 80093ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d0:	602f      	str	r7, [r5, #0]
 80093d2:	2900      	cmp	r1, #0
 80093d4:	d0c9      	beq.n	800936a <__sflush_r+0x1a>
 80093d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093da:	4299      	cmp	r1, r3
 80093dc:	d002      	beq.n	80093e4 <__sflush_r+0x94>
 80093de:	4628      	mov	r0, r5
 80093e0:	f7fe fa5e 	bl	80078a0 <_free_r>
 80093e4:	2000      	movs	r0, #0
 80093e6:	6360      	str	r0, [r4, #52]	; 0x34
 80093e8:	e7c0      	b.n	800936c <__sflush_r+0x1c>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b0      	blx	r6
 80093f0:	1c41      	adds	r1, r0, #1
 80093f2:	d1c8      	bne.n	8009386 <__sflush_r+0x36>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0c5      	beq.n	8009386 <__sflush_r+0x36>
 80093fa:	2b1d      	cmp	r3, #29
 80093fc:	d001      	beq.n	8009402 <__sflush_r+0xb2>
 80093fe:	2b16      	cmp	r3, #22
 8009400:	d101      	bne.n	8009406 <__sflush_r+0xb6>
 8009402:	602f      	str	r7, [r5, #0]
 8009404:	e7b1      	b.n	800936a <__sflush_r+0x1a>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	e7ad      	b.n	800936c <__sflush_r+0x1c>
 8009410:	690f      	ldr	r7, [r1, #16]
 8009412:	2f00      	cmp	r7, #0
 8009414:	d0a9      	beq.n	800936a <__sflush_r+0x1a>
 8009416:	0793      	lsls	r3, r2, #30
 8009418:	680e      	ldr	r6, [r1, #0]
 800941a:	bf08      	it	eq
 800941c:	694b      	ldreq	r3, [r1, #20]
 800941e:	600f      	str	r7, [r1, #0]
 8009420:	bf18      	it	ne
 8009422:	2300      	movne	r3, #0
 8009424:	eba6 0807 	sub.w	r8, r6, r7
 8009428:	608b      	str	r3, [r1, #8]
 800942a:	f1b8 0f00 	cmp.w	r8, #0
 800942e:	dd9c      	ble.n	800936a <__sflush_r+0x1a>
 8009430:	6a21      	ldr	r1, [r4, #32]
 8009432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009434:	4643      	mov	r3, r8
 8009436:	463a      	mov	r2, r7
 8009438:	4628      	mov	r0, r5
 800943a:	47b0      	blx	r6
 800943c:	2800      	cmp	r0, #0
 800943e:	dc06      	bgt.n	800944e <__sflush_r+0xfe>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e78e      	b.n	800936c <__sflush_r+0x1c>
 800944e:	4407      	add	r7, r0
 8009450:	eba8 0800 	sub.w	r8, r8, r0
 8009454:	e7e9      	b.n	800942a <__sflush_r+0xda>
 8009456:	bf00      	nop
 8009458:	dfbffffe 	.word	0xdfbffffe

0800945c <_fflush_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	690b      	ldr	r3, [r1, #16]
 8009460:	4605      	mov	r5, r0
 8009462:	460c      	mov	r4, r1
 8009464:	b913      	cbnz	r3, 800946c <_fflush_r+0x10>
 8009466:	2500      	movs	r5, #0
 8009468:	4628      	mov	r0, r5
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	b118      	cbz	r0, 8009476 <_fflush_r+0x1a>
 800946e:	6a03      	ldr	r3, [r0, #32]
 8009470:	b90b      	cbnz	r3, 8009476 <_fflush_r+0x1a>
 8009472:	f7fd faff 	bl	8006a74 <__sinit>
 8009476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0f3      	beq.n	8009466 <_fflush_r+0xa>
 800947e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009480:	07d0      	lsls	r0, r2, #31
 8009482:	d404      	bmi.n	800948e <_fflush_r+0x32>
 8009484:	0599      	lsls	r1, r3, #22
 8009486:	d402      	bmi.n	800948e <_fflush_r+0x32>
 8009488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800948a:	f7fd fc0a 	bl	8006ca2 <__retarget_lock_acquire_recursive>
 800948e:	4628      	mov	r0, r5
 8009490:	4621      	mov	r1, r4
 8009492:	f7ff ff5d 	bl	8009350 <__sflush_r>
 8009496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009498:	07da      	lsls	r2, r3, #31
 800949a:	4605      	mov	r5, r0
 800949c:	d4e4      	bmi.n	8009468 <_fflush_r+0xc>
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	059b      	lsls	r3, r3, #22
 80094a2:	d4e1      	bmi.n	8009468 <_fflush_r+0xc>
 80094a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094a6:	f7fd fbfd 	bl	8006ca4 <__retarget_lock_release_recursive>
 80094aa:	e7dd      	b.n	8009468 <_fflush_r+0xc>

080094ac <memmove>:
 80094ac:	4288      	cmp	r0, r1
 80094ae:	b510      	push	{r4, lr}
 80094b0:	eb01 0402 	add.w	r4, r1, r2
 80094b4:	d902      	bls.n	80094bc <memmove+0x10>
 80094b6:	4284      	cmp	r4, r0
 80094b8:	4623      	mov	r3, r4
 80094ba:	d807      	bhi.n	80094cc <memmove+0x20>
 80094bc:	1e43      	subs	r3, r0, #1
 80094be:	42a1      	cmp	r1, r4
 80094c0:	d008      	beq.n	80094d4 <memmove+0x28>
 80094c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ca:	e7f8      	b.n	80094be <memmove+0x12>
 80094cc:	4402      	add	r2, r0
 80094ce:	4601      	mov	r1, r0
 80094d0:	428a      	cmp	r2, r1
 80094d2:	d100      	bne.n	80094d6 <memmove+0x2a>
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094de:	e7f7      	b.n	80094d0 <memmove+0x24>

080094e0 <strncmp>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	b16a      	cbz	r2, 8009500 <strncmp+0x20>
 80094e4:	3901      	subs	r1, #1
 80094e6:	1884      	adds	r4, r0, r2
 80094e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d103      	bne.n	80094fc <strncmp+0x1c>
 80094f4:	42a0      	cmp	r0, r4
 80094f6:	d001      	beq.n	80094fc <strncmp+0x1c>
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	d1f5      	bne.n	80094e8 <strncmp+0x8>
 80094fc:	1ad0      	subs	r0, r2, r3
 80094fe:	bd10      	pop	{r4, pc}
 8009500:	4610      	mov	r0, r2
 8009502:	e7fc      	b.n	80094fe <strncmp+0x1e>

08009504 <_sbrk_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	; (8009520 <_sbrk_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f7 fe78 	bl	8001204 <_sbrk>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_sbrk_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_sbrk_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	200009f8 	.word	0x200009f8

08009524 <memcpy>:
 8009524:	440a      	add	r2, r1
 8009526:	4291      	cmp	r1, r2
 8009528:	f100 33ff 	add.w	r3, r0, #4294967295
 800952c:	d100      	bne.n	8009530 <memcpy+0xc>
 800952e:	4770      	bx	lr
 8009530:	b510      	push	{r4, lr}
 8009532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800953a:	4291      	cmp	r1, r2
 800953c:	d1f9      	bne.n	8009532 <memcpy+0xe>
 800953e:	bd10      	pop	{r4, pc}

08009540 <nan>:
 8009540:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009548 <nan+0x8>
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	00000000 	.word	0x00000000
 800954c:	7ff80000 	.word	0x7ff80000

08009550 <__assert_func>:
 8009550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009552:	4614      	mov	r4, r2
 8009554:	461a      	mov	r2, r3
 8009556:	4b09      	ldr	r3, [pc, #36]	; (800957c <__assert_func+0x2c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4605      	mov	r5, r0
 800955c:	68d8      	ldr	r0, [r3, #12]
 800955e:	b14c      	cbz	r4, 8009574 <__assert_func+0x24>
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <__assert_func+0x30>)
 8009562:	9100      	str	r1, [sp, #0]
 8009564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009568:	4906      	ldr	r1, [pc, #24]	; (8009584 <__assert_func+0x34>)
 800956a:	462b      	mov	r3, r5
 800956c:	f000 fbca 	bl	8009d04 <fiprintf>
 8009570:	f000 fbda 	bl	8009d28 <abort>
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <__assert_func+0x38>)
 8009576:	461c      	mov	r4, r3
 8009578:	e7f3      	b.n	8009562 <__assert_func+0x12>
 800957a:	bf00      	nop
 800957c:	20000064 	.word	0x20000064
 8009580:	0800a642 	.word	0x0800a642
 8009584:	0800a64f 	.word	0x0800a64f
 8009588:	0800a67d 	.word	0x0800a67d

0800958c <_calloc_r>:
 800958c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800958e:	fba1 2402 	umull	r2, r4, r1, r2
 8009592:	b94c      	cbnz	r4, 80095a8 <_calloc_r+0x1c>
 8009594:	4611      	mov	r1, r2
 8009596:	9201      	str	r2, [sp, #4]
 8009598:	f7fe f9f6 	bl	8007988 <_malloc_r>
 800959c:	9a01      	ldr	r2, [sp, #4]
 800959e:	4605      	mov	r5, r0
 80095a0:	b930      	cbnz	r0, 80095b0 <_calloc_r+0x24>
 80095a2:	4628      	mov	r0, r5
 80095a4:	b003      	add	sp, #12
 80095a6:	bd30      	pop	{r4, r5, pc}
 80095a8:	220c      	movs	r2, #12
 80095aa:	6002      	str	r2, [r0, #0]
 80095ac:	2500      	movs	r5, #0
 80095ae:	e7f8      	b.n	80095a2 <_calloc_r+0x16>
 80095b0:	4621      	mov	r1, r4
 80095b2:	f7fd faf8 	bl	8006ba6 <memset>
 80095b6:	e7f4      	b.n	80095a2 <_calloc_r+0x16>

080095b8 <rshift>:
 80095b8:	6903      	ldr	r3, [r0, #16]
 80095ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095c6:	f100 0414 	add.w	r4, r0, #20
 80095ca:	dd45      	ble.n	8009658 <rshift+0xa0>
 80095cc:	f011 011f 	ands.w	r1, r1, #31
 80095d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095d8:	d10c      	bne.n	80095f4 <rshift+0x3c>
 80095da:	f100 0710 	add.w	r7, r0, #16
 80095de:	4629      	mov	r1, r5
 80095e0:	42b1      	cmp	r1, r6
 80095e2:	d334      	bcc.n	800964e <rshift+0x96>
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	1eea      	subs	r2, r5, #3
 80095ea:	4296      	cmp	r6, r2
 80095ec:	bf38      	it	cc
 80095ee:	2300      	movcc	r3, #0
 80095f0:	4423      	add	r3, r4
 80095f2:	e015      	b.n	8009620 <rshift+0x68>
 80095f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095f8:	f1c1 0820 	rsb	r8, r1, #32
 80095fc:	40cf      	lsrs	r7, r1
 80095fe:	f105 0e04 	add.w	lr, r5, #4
 8009602:	46a1      	mov	r9, r4
 8009604:	4576      	cmp	r6, lr
 8009606:	46f4      	mov	ip, lr
 8009608:	d815      	bhi.n	8009636 <rshift+0x7e>
 800960a:	1a9a      	subs	r2, r3, r2
 800960c:	0092      	lsls	r2, r2, #2
 800960e:	3a04      	subs	r2, #4
 8009610:	3501      	adds	r5, #1
 8009612:	42ae      	cmp	r6, r5
 8009614:	bf38      	it	cc
 8009616:	2200      	movcc	r2, #0
 8009618:	18a3      	adds	r3, r4, r2
 800961a:	50a7      	str	r7, [r4, r2]
 800961c:	b107      	cbz	r7, 8009620 <rshift+0x68>
 800961e:	3304      	adds	r3, #4
 8009620:	1b1a      	subs	r2, r3, r4
 8009622:	42a3      	cmp	r3, r4
 8009624:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009628:	bf08      	it	eq
 800962a:	2300      	moveq	r3, #0
 800962c:	6102      	str	r2, [r0, #16]
 800962e:	bf08      	it	eq
 8009630:	6143      	streq	r3, [r0, #20]
 8009632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009636:	f8dc c000 	ldr.w	ip, [ip]
 800963a:	fa0c fc08 	lsl.w	ip, ip, r8
 800963e:	ea4c 0707 	orr.w	r7, ip, r7
 8009642:	f849 7b04 	str.w	r7, [r9], #4
 8009646:	f85e 7b04 	ldr.w	r7, [lr], #4
 800964a:	40cf      	lsrs	r7, r1
 800964c:	e7da      	b.n	8009604 <rshift+0x4c>
 800964e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009652:	f847 cf04 	str.w	ip, [r7, #4]!
 8009656:	e7c3      	b.n	80095e0 <rshift+0x28>
 8009658:	4623      	mov	r3, r4
 800965a:	e7e1      	b.n	8009620 <rshift+0x68>

0800965c <__hexdig_fun>:
 800965c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009660:	2b09      	cmp	r3, #9
 8009662:	d802      	bhi.n	800966a <__hexdig_fun+0xe>
 8009664:	3820      	subs	r0, #32
 8009666:	b2c0      	uxtb	r0, r0
 8009668:	4770      	bx	lr
 800966a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800966e:	2b05      	cmp	r3, #5
 8009670:	d801      	bhi.n	8009676 <__hexdig_fun+0x1a>
 8009672:	3847      	subs	r0, #71	; 0x47
 8009674:	e7f7      	b.n	8009666 <__hexdig_fun+0xa>
 8009676:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800967a:	2b05      	cmp	r3, #5
 800967c:	d801      	bhi.n	8009682 <__hexdig_fun+0x26>
 800967e:	3827      	subs	r0, #39	; 0x27
 8009680:	e7f1      	b.n	8009666 <__hexdig_fun+0xa>
 8009682:	2000      	movs	r0, #0
 8009684:	4770      	bx	lr
	...

08009688 <__gethex>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4617      	mov	r7, r2
 800968e:	680a      	ldr	r2, [r1, #0]
 8009690:	b085      	sub	sp, #20
 8009692:	f102 0b02 	add.w	fp, r2, #2
 8009696:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800969a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800969e:	4681      	mov	r9, r0
 80096a0:	468a      	mov	sl, r1
 80096a2:	9302      	str	r3, [sp, #8]
 80096a4:	32fe      	adds	r2, #254	; 0xfe
 80096a6:	eb02 030b 	add.w	r3, r2, fp
 80096aa:	46d8      	mov	r8, fp
 80096ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	2830      	cmp	r0, #48	; 0x30
 80096b4:	d0f7      	beq.n	80096a6 <__gethex+0x1e>
 80096b6:	f7ff ffd1 	bl	800965c <__hexdig_fun>
 80096ba:	4604      	mov	r4, r0
 80096bc:	2800      	cmp	r0, #0
 80096be:	d138      	bne.n	8009732 <__gethex+0xaa>
 80096c0:	49a7      	ldr	r1, [pc, #668]	; (8009960 <__gethex+0x2d8>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	4640      	mov	r0, r8
 80096c6:	f7ff ff0b 	bl	80094e0 <strncmp>
 80096ca:	4606      	mov	r6, r0
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d169      	bne.n	80097a4 <__gethex+0x11c>
 80096d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80096d4:	465d      	mov	r5, fp
 80096d6:	f7ff ffc1 	bl	800965c <__hexdig_fun>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d064      	beq.n	80097a8 <__gethex+0x120>
 80096de:	465a      	mov	r2, fp
 80096e0:	7810      	ldrb	r0, [r2, #0]
 80096e2:	2830      	cmp	r0, #48	; 0x30
 80096e4:	4690      	mov	r8, r2
 80096e6:	f102 0201 	add.w	r2, r2, #1
 80096ea:	d0f9      	beq.n	80096e0 <__gethex+0x58>
 80096ec:	f7ff ffb6 	bl	800965c <__hexdig_fun>
 80096f0:	2301      	movs	r3, #1
 80096f2:	fab0 f480 	clz	r4, r0
 80096f6:	0964      	lsrs	r4, r4, #5
 80096f8:	465e      	mov	r6, fp
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	4642      	mov	r2, r8
 80096fe:	4615      	mov	r5, r2
 8009700:	3201      	adds	r2, #1
 8009702:	7828      	ldrb	r0, [r5, #0]
 8009704:	f7ff ffaa 	bl	800965c <__hexdig_fun>
 8009708:	2800      	cmp	r0, #0
 800970a:	d1f8      	bne.n	80096fe <__gethex+0x76>
 800970c:	4994      	ldr	r1, [pc, #592]	; (8009960 <__gethex+0x2d8>)
 800970e:	2201      	movs	r2, #1
 8009710:	4628      	mov	r0, r5
 8009712:	f7ff fee5 	bl	80094e0 <strncmp>
 8009716:	b978      	cbnz	r0, 8009738 <__gethex+0xb0>
 8009718:	b946      	cbnz	r6, 800972c <__gethex+0xa4>
 800971a:	1c6e      	adds	r6, r5, #1
 800971c:	4632      	mov	r2, r6
 800971e:	4615      	mov	r5, r2
 8009720:	3201      	adds	r2, #1
 8009722:	7828      	ldrb	r0, [r5, #0]
 8009724:	f7ff ff9a 	bl	800965c <__hexdig_fun>
 8009728:	2800      	cmp	r0, #0
 800972a:	d1f8      	bne.n	800971e <__gethex+0x96>
 800972c:	1b73      	subs	r3, r6, r5
 800972e:	009e      	lsls	r6, r3, #2
 8009730:	e004      	b.n	800973c <__gethex+0xb4>
 8009732:	2400      	movs	r4, #0
 8009734:	4626      	mov	r6, r4
 8009736:	e7e1      	b.n	80096fc <__gethex+0x74>
 8009738:	2e00      	cmp	r6, #0
 800973a:	d1f7      	bne.n	800972c <__gethex+0xa4>
 800973c:	782b      	ldrb	r3, [r5, #0]
 800973e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009742:	2b50      	cmp	r3, #80	; 0x50
 8009744:	d13d      	bne.n	80097c2 <__gethex+0x13a>
 8009746:	786b      	ldrb	r3, [r5, #1]
 8009748:	2b2b      	cmp	r3, #43	; 0x2b
 800974a:	d02f      	beq.n	80097ac <__gethex+0x124>
 800974c:	2b2d      	cmp	r3, #45	; 0x2d
 800974e:	d031      	beq.n	80097b4 <__gethex+0x12c>
 8009750:	1c69      	adds	r1, r5, #1
 8009752:	f04f 0b00 	mov.w	fp, #0
 8009756:	7808      	ldrb	r0, [r1, #0]
 8009758:	f7ff ff80 	bl	800965c <__hexdig_fun>
 800975c:	1e42      	subs	r2, r0, #1
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	2a18      	cmp	r2, #24
 8009762:	d82e      	bhi.n	80097c2 <__gethex+0x13a>
 8009764:	f1a0 0210 	sub.w	r2, r0, #16
 8009768:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800976c:	f7ff ff76 	bl	800965c <__hexdig_fun>
 8009770:	f100 3cff 	add.w	ip, r0, #4294967295
 8009774:	fa5f fc8c 	uxtb.w	ip, ip
 8009778:	f1bc 0f18 	cmp.w	ip, #24
 800977c:	d91d      	bls.n	80097ba <__gethex+0x132>
 800977e:	f1bb 0f00 	cmp.w	fp, #0
 8009782:	d000      	beq.n	8009786 <__gethex+0xfe>
 8009784:	4252      	negs	r2, r2
 8009786:	4416      	add	r6, r2
 8009788:	f8ca 1000 	str.w	r1, [sl]
 800978c:	b1dc      	cbz	r4, 80097c6 <__gethex+0x13e>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	bf14      	ite	ne
 8009794:	f04f 0800 	movne.w	r8, #0
 8009798:	f04f 0806 	moveq.w	r8, #6
 800979c:	4640      	mov	r0, r8
 800979e:	b005      	add	sp, #20
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	4645      	mov	r5, r8
 80097a6:	4626      	mov	r6, r4
 80097a8:	2401      	movs	r4, #1
 80097aa:	e7c7      	b.n	800973c <__gethex+0xb4>
 80097ac:	f04f 0b00 	mov.w	fp, #0
 80097b0:	1ca9      	adds	r1, r5, #2
 80097b2:	e7d0      	b.n	8009756 <__gethex+0xce>
 80097b4:	f04f 0b01 	mov.w	fp, #1
 80097b8:	e7fa      	b.n	80097b0 <__gethex+0x128>
 80097ba:	230a      	movs	r3, #10
 80097bc:	fb03 0002 	mla	r0, r3, r2, r0
 80097c0:	e7d0      	b.n	8009764 <__gethex+0xdc>
 80097c2:	4629      	mov	r1, r5
 80097c4:	e7e0      	b.n	8009788 <__gethex+0x100>
 80097c6:	eba5 0308 	sub.w	r3, r5, r8
 80097ca:	3b01      	subs	r3, #1
 80097cc:	4621      	mov	r1, r4
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	dc0a      	bgt.n	80097e8 <__gethex+0x160>
 80097d2:	4648      	mov	r0, r9
 80097d4:	f7fe f964 	bl	8007aa0 <_Balloc>
 80097d8:	4604      	mov	r4, r0
 80097da:	b940      	cbnz	r0, 80097ee <__gethex+0x166>
 80097dc:	4b61      	ldr	r3, [pc, #388]	; (8009964 <__gethex+0x2dc>)
 80097de:	4602      	mov	r2, r0
 80097e0:	21e4      	movs	r1, #228	; 0xe4
 80097e2:	4861      	ldr	r0, [pc, #388]	; (8009968 <__gethex+0x2e0>)
 80097e4:	f7ff feb4 	bl	8009550 <__assert_func>
 80097e8:	3101      	adds	r1, #1
 80097ea:	105b      	asrs	r3, r3, #1
 80097ec:	e7ef      	b.n	80097ce <__gethex+0x146>
 80097ee:	f100 0a14 	add.w	sl, r0, #20
 80097f2:	2300      	movs	r3, #0
 80097f4:	495a      	ldr	r1, [pc, #360]	; (8009960 <__gethex+0x2d8>)
 80097f6:	f8cd a004 	str.w	sl, [sp, #4]
 80097fa:	469b      	mov	fp, r3
 80097fc:	45a8      	cmp	r8, r5
 80097fe:	d342      	bcc.n	8009886 <__gethex+0x1fe>
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	f840 bb04 	str.w	fp, [r0], #4
 8009806:	eba0 000a 	sub.w	r0, r0, sl
 800980a:	1080      	asrs	r0, r0, #2
 800980c:	6120      	str	r0, [r4, #16]
 800980e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009812:	4658      	mov	r0, fp
 8009814:	f7fe fa36 	bl	8007c84 <__hi0bits>
 8009818:	683d      	ldr	r5, [r7, #0]
 800981a:	eba8 0000 	sub.w	r0, r8, r0
 800981e:	42a8      	cmp	r0, r5
 8009820:	dd59      	ble.n	80098d6 <__gethex+0x24e>
 8009822:	eba0 0805 	sub.w	r8, r0, r5
 8009826:	4641      	mov	r1, r8
 8009828:	4620      	mov	r0, r4
 800982a:	f7fe fdc2 	bl	80083b2 <__any_on>
 800982e:	4683      	mov	fp, r0
 8009830:	b1b8      	cbz	r0, 8009862 <__gethex+0x1da>
 8009832:	f108 33ff 	add.w	r3, r8, #4294967295
 8009836:	1159      	asrs	r1, r3, #5
 8009838:	f003 021f 	and.w	r2, r3, #31
 800983c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009840:	f04f 0b01 	mov.w	fp, #1
 8009844:	fa0b f202 	lsl.w	r2, fp, r2
 8009848:	420a      	tst	r2, r1
 800984a:	d00a      	beq.n	8009862 <__gethex+0x1da>
 800984c:	455b      	cmp	r3, fp
 800984e:	dd06      	ble.n	800985e <__gethex+0x1d6>
 8009850:	f1a8 0102 	sub.w	r1, r8, #2
 8009854:	4620      	mov	r0, r4
 8009856:	f7fe fdac 	bl	80083b2 <__any_on>
 800985a:	2800      	cmp	r0, #0
 800985c:	d138      	bne.n	80098d0 <__gethex+0x248>
 800985e:	f04f 0b02 	mov.w	fp, #2
 8009862:	4641      	mov	r1, r8
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff fea7 	bl	80095b8 <rshift>
 800986a:	4446      	add	r6, r8
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	42b3      	cmp	r3, r6
 8009870:	da41      	bge.n	80098f6 <__gethex+0x26e>
 8009872:	4621      	mov	r1, r4
 8009874:	4648      	mov	r0, r9
 8009876:	f7fe f953 	bl	8007b20 <_Bfree>
 800987a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800987c:	2300      	movs	r3, #0
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009884:	e78a      	b.n	800979c <__gethex+0x114>
 8009886:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800988a:	2a2e      	cmp	r2, #46	; 0x2e
 800988c:	d014      	beq.n	80098b8 <__gethex+0x230>
 800988e:	2b20      	cmp	r3, #32
 8009890:	d106      	bne.n	80098a0 <__gethex+0x218>
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	f843 bb04 	str.w	fp, [r3], #4
 8009898:	f04f 0b00 	mov.w	fp, #0
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	465b      	mov	r3, fp
 80098a0:	7828      	ldrb	r0, [r5, #0]
 80098a2:	9303      	str	r3, [sp, #12]
 80098a4:	f7ff feda 	bl	800965c <__hexdig_fun>
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	f000 000f 	and.w	r0, r0, #15
 80098ae:	4098      	lsls	r0, r3
 80098b0:	ea4b 0b00 	orr.w	fp, fp, r0
 80098b4:	3304      	adds	r3, #4
 80098b6:	e7a1      	b.n	80097fc <__gethex+0x174>
 80098b8:	45a8      	cmp	r8, r5
 80098ba:	d8e8      	bhi.n	800988e <__gethex+0x206>
 80098bc:	2201      	movs	r2, #1
 80098be:	4628      	mov	r0, r5
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	f7ff fe0d 	bl	80094e0 <strncmp>
 80098c6:	4926      	ldr	r1, [pc, #152]	; (8009960 <__gethex+0x2d8>)
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d1df      	bne.n	800988e <__gethex+0x206>
 80098ce:	e795      	b.n	80097fc <__gethex+0x174>
 80098d0:	f04f 0b03 	mov.w	fp, #3
 80098d4:	e7c5      	b.n	8009862 <__gethex+0x1da>
 80098d6:	da0b      	bge.n	80098f0 <__gethex+0x268>
 80098d8:	eba5 0800 	sub.w	r8, r5, r0
 80098dc:	4621      	mov	r1, r4
 80098de:	4642      	mov	r2, r8
 80098e0:	4648      	mov	r0, r9
 80098e2:	f7fe fb37 	bl	8007f54 <__lshift>
 80098e6:	eba6 0608 	sub.w	r6, r6, r8
 80098ea:	4604      	mov	r4, r0
 80098ec:	f100 0a14 	add.w	sl, r0, #20
 80098f0:	f04f 0b00 	mov.w	fp, #0
 80098f4:	e7ba      	b.n	800986c <__gethex+0x1e4>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	42b3      	cmp	r3, r6
 80098fa:	dd73      	ble.n	80099e4 <__gethex+0x35c>
 80098fc:	1b9e      	subs	r6, r3, r6
 80098fe:	42b5      	cmp	r5, r6
 8009900:	dc34      	bgt.n	800996c <__gethex+0x2e4>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d023      	beq.n	8009950 <__gethex+0x2c8>
 8009908:	2b03      	cmp	r3, #3
 800990a:	d025      	beq.n	8009958 <__gethex+0x2d0>
 800990c:	2b01      	cmp	r3, #1
 800990e:	d115      	bne.n	800993c <__gethex+0x2b4>
 8009910:	42b5      	cmp	r5, r6
 8009912:	d113      	bne.n	800993c <__gethex+0x2b4>
 8009914:	2d01      	cmp	r5, #1
 8009916:	d10b      	bne.n	8009930 <__gethex+0x2a8>
 8009918:	9a02      	ldr	r2, [sp, #8]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	2301      	movs	r3, #1
 8009920:	6123      	str	r3, [r4, #16]
 8009922:	f8ca 3000 	str.w	r3, [sl]
 8009926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009928:	f04f 0862 	mov.w	r8, #98	; 0x62
 800992c:	601c      	str	r4, [r3, #0]
 800992e:	e735      	b.n	800979c <__gethex+0x114>
 8009930:	1e69      	subs	r1, r5, #1
 8009932:	4620      	mov	r0, r4
 8009934:	f7fe fd3d 	bl	80083b2 <__any_on>
 8009938:	2800      	cmp	r0, #0
 800993a:	d1ed      	bne.n	8009918 <__gethex+0x290>
 800993c:	4621      	mov	r1, r4
 800993e:	4648      	mov	r0, r9
 8009940:	f7fe f8ee 	bl	8007b20 <_Bfree>
 8009944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009946:	2300      	movs	r3, #0
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800994e:	e725      	b.n	800979c <__gethex+0x114>
 8009950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f2      	bne.n	800993c <__gethex+0x2b4>
 8009956:	e7df      	b.n	8009918 <__gethex+0x290>
 8009958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1dc      	bne.n	8009918 <__gethex+0x290>
 800995e:	e7ed      	b.n	800993c <__gethex+0x2b4>
 8009960:	0800a4d4 	.word	0x0800a4d4
 8009964:	0800a36d 	.word	0x0800a36d
 8009968:	0800a67e 	.word	0x0800a67e
 800996c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009970:	f1bb 0f00 	cmp.w	fp, #0
 8009974:	d133      	bne.n	80099de <__gethex+0x356>
 8009976:	f1b8 0f00 	cmp.w	r8, #0
 800997a:	d004      	beq.n	8009986 <__gethex+0x2fe>
 800997c:	4641      	mov	r1, r8
 800997e:	4620      	mov	r0, r4
 8009980:	f7fe fd17 	bl	80083b2 <__any_on>
 8009984:	4683      	mov	fp, r0
 8009986:	ea4f 1268 	mov.w	r2, r8, asr #5
 800998a:	2301      	movs	r3, #1
 800998c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009990:	f008 081f 	and.w	r8, r8, #31
 8009994:	fa03 f308 	lsl.w	r3, r3, r8
 8009998:	4213      	tst	r3, r2
 800999a:	4631      	mov	r1, r6
 800999c:	4620      	mov	r0, r4
 800999e:	bf18      	it	ne
 80099a0:	f04b 0b02 	orrne.w	fp, fp, #2
 80099a4:	1bad      	subs	r5, r5, r6
 80099a6:	f7ff fe07 	bl	80095b8 <rshift>
 80099aa:	687e      	ldr	r6, [r7, #4]
 80099ac:	f04f 0802 	mov.w	r8, #2
 80099b0:	f1bb 0f00 	cmp.w	fp, #0
 80099b4:	d04a      	beq.n	8009a4c <__gethex+0x3c4>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d016      	beq.n	80099ea <__gethex+0x362>
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d018      	beq.n	80099f2 <__gethex+0x36a>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d109      	bne.n	80099d8 <__gethex+0x350>
 80099c4:	f01b 0f02 	tst.w	fp, #2
 80099c8:	d006      	beq.n	80099d8 <__gethex+0x350>
 80099ca:	f8da 3000 	ldr.w	r3, [sl]
 80099ce:	ea4b 0b03 	orr.w	fp, fp, r3
 80099d2:	f01b 0f01 	tst.w	fp, #1
 80099d6:	d10f      	bne.n	80099f8 <__gethex+0x370>
 80099d8:	f048 0810 	orr.w	r8, r8, #16
 80099dc:	e036      	b.n	8009a4c <__gethex+0x3c4>
 80099de:	f04f 0b01 	mov.w	fp, #1
 80099e2:	e7d0      	b.n	8009986 <__gethex+0x2fe>
 80099e4:	f04f 0801 	mov.w	r8, #1
 80099e8:	e7e2      	b.n	80099b0 <__gethex+0x328>
 80099ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ec:	f1c3 0301 	rsb	r3, r3, #1
 80099f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0ef      	beq.n	80099d8 <__gethex+0x350>
 80099f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099fc:	f104 0214 	add.w	r2, r4, #20
 8009a00:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4694      	mov	ip, r2
 8009a0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a12:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a16:	d01e      	beq.n	8009a56 <__gethex+0x3ce>
 8009a18:	3101      	adds	r1, #1
 8009a1a:	f8cc 1000 	str.w	r1, [ip]
 8009a1e:	f1b8 0f02 	cmp.w	r8, #2
 8009a22:	f104 0214 	add.w	r2, r4, #20
 8009a26:	d13d      	bne.n	8009aa4 <__gethex+0x41c>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	42ab      	cmp	r3, r5
 8009a2e:	d10b      	bne.n	8009a48 <__gethex+0x3c0>
 8009a30:	1169      	asrs	r1, r5, #5
 8009a32:	2301      	movs	r3, #1
 8009a34:	f005 051f 	and.w	r5, r5, #31
 8009a38:	fa03 f505 	lsl.w	r5, r3, r5
 8009a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a40:	421d      	tst	r5, r3
 8009a42:	bf18      	it	ne
 8009a44:	f04f 0801 	movne.w	r8, #1
 8009a48:	f048 0820 	orr.w	r8, r8, #32
 8009a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4e:	601c      	str	r4, [r3, #0]
 8009a50:	9b02      	ldr	r3, [sp, #8]
 8009a52:	601e      	str	r6, [r3, #0]
 8009a54:	e6a2      	b.n	800979c <__gethex+0x114>
 8009a56:	4290      	cmp	r0, r2
 8009a58:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a5c:	d8d6      	bhi.n	8009a0c <__gethex+0x384>
 8009a5e:	68a2      	ldr	r2, [r4, #8]
 8009a60:	4593      	cmp	fp, r2
 8009a62:	db17      	blt.n	8009a94 <__gethex+0x40c>
 8009a64:	6861      	ldr	r1, [r4, #4]
 8009a66:	4648      	mov	r0, r9
 8009a68:	3101      	adds	r1, #1
 8009a6a:	f7fe f819 	bl	8007aa0 <_Balloc>
 8009a6e:	4682      	mov	sl, r0
 8009a70:	b918      	cbnz	r0, 8009a7a <__gethex+0x3f2>
 8009a72:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <__gethex+0x458>)
 8009a74:	4602      	mov	r2, r0
 8009a76:	2184      	movs	r1, #132	; 0x84
 8009a78:	e6b3      	b.n	80097e2 <__gethex+0x15a>
 8009a7a:	6922      	ldr	r2, [r4, #16]
 8009a7c:	3202      	adds	r2, #2
 8009a7e:	f104 010c 	add.w	r1, r4, #12
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	300c      	adds	r0, #12
 8009a86:	f7ff fd4d 	bl	8009524 <memcpy>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f7fe f847 	bl	8007b20 <_Bfree>
 8009a92:	4654      	mov	r4, sl
 8009a94:	6922      	ldr	r2, [r4, #16]
 8009a96:	1c51      	adds	r1, r2, #1
 8009a98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a9c:	6121      	str	r1, [r4, #16]
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	6151      	str	r1, [r2, #20]
 8009aa2:	e7bc      	b.n	8009a1e <__gethex+0x396>
 8009aa4:	6921      	ldr	r1, [r4, #16]
 8009aa6:	4559      	cmp	r1, fp
 8009aa8:	dd0b      	ble.n	8009ac2 <__gethex+0x43a>
 8009aaa:	2101      	movs	r1, #1
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7ff fd83 	bl	80095b8 <rshift>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3601      	adds	r6, #1
 8009ab6:	42b3      	cmp	r3, r6
 8009ab8:	f6ff aedb 	blt.w	8009872 <__gethex+0x1ea>
 8009abc:	f04f 0801 	mov.w	r8, #1
 8009ac0:	e7c2      	b.n	8009a48 <__gethex+0x3c0>
 8009ac2:	f015 051f 	ands.w	r5, r5, #31
 8009ac6:	d0f9      	beq.n	8009abc <__gethex+0x434>
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	441a      	add	r2, r3
 8009acc:	f1c5 0520 	rsb	r5, r5, #32
 8009ad0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009ad4:	f7fe f8d6 	bl	8007c84 <__hi0bits>
 8009ad8:	42a8      	cmp	r0, r5
 8009ada:	dbe6      	blt.n	8009aaa <__gethex+0x422>
 8009adc:	e7ee      	b.n	8009abc <__gethex+0x434>
 8009ade:	bf00      	nop
 8009ae0:	0800a36d 	.word	0x0800a36d

08009ae4 <L_shift>:
 8009ae4:	f1c2 0208 	rsb	r2, r2, #8
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	b570      	push	{r4, r5, r6, lr}
 8009aec:	f1c2 0620 	rsb	r6, r2, #32
 8009af0:	6843      	ldr	r3, [r0, #4]
 8009af2:	6804      	ldr	r4, [r0, #0]
 8009af4:	fa03 f506 	lsl.w	r5, r3, r6
 8009af8:	432c      	orrs	r4, r5
 8009afa:	40d3      	lsrs	r3, r2
 8009afc:	6004      	str	r4, [r0, #0]
 8009afe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b02:	4288      	cmp	r0, r1
 8009b04:	d3f4      	bcc.n	8009af0 <L_shift+0xc>
 8009b06:	bd70      	pop	{r4, r5, r6, pc}

08009b08 <__match>:
 8009b08:	b530      	push	{r4, r5, lr}
 8009b0a:	6803      	ldr	r3, [r0, #0]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b12:	b914      	cbnz	r4, 8009b1a <__match+0x12>
 8009b14:	6003      	str	r3, [r0, #0]
 8009b16:	2001      	movs	r0, #1
 8009b18:	bd30      	pop	{r4, r5, pc}
 8009b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b22:	2d19      	cmp	r5, #25
 8009b24:	bf98      	it	ls
 8009b26:	3220      	addls	r2, #32
 8009b28:	42a2      	cmp	r2, r4
 8009b2a:	d0f0      	beq.n	8009b0e <__match+0x6>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7f3      	b.n	8009b18 <__match+0x10>

08009b30 <__hexnan>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	680b      	ldr	r3, [r1, #0]
 8009b36:	6801      	ldr	r1, [r0, #0]
 8009b38:	115e      	asrs	r6, r3, #5
 8009b3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b3e:	f013 031f 	ands.w	r3, r3, #31
 8009b42:	b087      	sub	sp, #28
 8009b44:	bf18      	it	ne
 8009b46:	3604      	addne	r6, #4
 8009b48:	2500      	movs	r5, #0
 8009b4a:	1f37      	subs	r7, r6, #4
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	4690      	mov	r8, r2
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b56:	46b9      	mov	r9, r7
 8009b58:	463c      	mov	r4, r7
 8009b5a:	9502      	str	r5, [sp, #8]
 8009b5c:	46ab      	mov	fp, r5
 8009b5e:	784a      	ldrb	r2, [r1, #1]
 8009b60:	1c4b      	adds	r3, r1, #1
 8009b62:	9303      	str	r3, [sp, #12]
 8009b64:	b342      	cbz	r2, 8009bb8 <__hexnan+0x88>
 8009b66:	4610      	mov	r0, r2
 8009b68:	9105      	str	r1, [sp, #20]
 8009b6a:	9204      	str	r2, [sp, #16]
 8009b6c:	f7ff fd76 	bl	800965c <__hexdig_fun>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d14f      	bne.n	8009c14 <__hexnan+0xe4>
 8009b74:	9a04      	ldr	r2, [sp, #16]
 8009b76:	9905      	ldr	r1, [sp, #20]
 8009b78:	2a20      	cmp	r2, #32
 8009b7a:	d818      	bhi.n	8009bae <__hexnan+0x7e>
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	459b      	cmp	fp, r3
 8009b80:	dd13      	ble.n	8009baa <__hexnan+0x7a>
 8009b82:	454c      	cmp	r4, r9
 8009b84:	d206      	bcs.n	8009b94 <__hexnan+0x64>
 8009b86:	2d07      	cmp	r5, #7
 8009b88:	dc04      	bgt.n	8009b94 <__hexnan+0x64>
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f7ff ffa8 	bl	8009ae4 <L_shift>
 8009b94:	4544      	cmp	r4, r8
 8009b96:	d950      	bls.n	8009c3a <__hexnan+0x10a>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ba2:	f8cd b008 	str.w	fp, [sp, #8]
 8009ba6:	464c      	mov	r4, r9
 8009ba8:	461d      	mov	r5, r3
 8009baa:	9903      	ldr	r1, [sp, #12]
 8009bac:	e7d7      	b.n	8009b5e <__hexnan+0x2e>
 8009bae:	2a29      	cmp	r2, #41	; 0x29
 8009bb0:	d155      	bne.n	8009c5e <__hexnan+0x12e>
 8009bb2:	3102      	adds	r1, #2
 8009bb4:	f8ca 1000 	str.w	r1, [sl]
 8009bb8:	f1bb 0f00 	cmp.w	fp, #0
 8009bbc:	d04f      	beq.n	8009c5e <__hexnan+0x12e>
 8009bbe:	454c      	cmp	r4, r9
 8009bc0:	d206      	bcs.n	8009bd0 <__hexnan+0xa0>
 8009bc2:	2d07      	cmp	r5, #7
 8009bc4:	dc04      	bgt.n	8009bd0 <__hexnan+0xa0>
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f7ff ff8a 	bl	8009ae4 <L_shift>
 8009bd0:	4544      	cmp	r4, r8
 8009bd2:	d934      	bls.n	8009c3e <__hexnan+0x10e>
 8009bd4:	f1a8 0204 	sub.w	r2, r8, #4
 8009bd8:	4623      	mov	r3, r4
 8009bda:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bde:	f842 1f04 	str.w	r1, [r2, #4]!
 8009be2:	429f      	cmp	r7, r3
 8009be4:	d2f9      	bcs.n	8009bda <__hexnan+0xaa>
 8009be6:	1b3b      	subs	r3, r7, r4
 8009be8:	f023 0303 	bic.w	r3, r3, #3
 8009bec:	3304      	adds	r3, #4
 8009bee:	3e03      	subs	r6, #3
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	42a6      	cmp	r6, r4
 8009bf4:	bf38      	it	cc
 8009bf6:	2304      	movcc	r3, #4
 8009bf8:	4443      	add	r3, r8
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f843 2b04 	str.w	r2, [r3], #4
 8009c00:	429f      	cmp	r7, r3
 8009c02:	d2fb      	bcs.n	8009bfc <__hexnan+0xcc>
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	b91b      	cbnz	r3, 8009c10 <__hexnan+0xe0>
 8009c08:	4547      	cmp	r7, r8
 8009c0a:	d126      	bne.n	8009c5a <__hexnan+0x12a>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	2005      	movs	r0, #5
 8009c12:	e025      	b.n	8009c60 <__hexnan+0x130>
 8009c14:	3501      	adds	r5, #1
 8009c16:	2d08      	cmp	r5, #8
 8009c18:	f10b 0b01 	add.w	fp, fp, #1
 8009c1c:	dd06      	ble.n	8009c2c <__hexnan+0xfc>
 8009c1e:	4544      	cmp	r4, r8
 8009c20:	d9c3      	bls.n	8009baa <__hexnan+0x7a>
 8009c22:	2300      	movs	r3, #0
 8009c24:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c28:	2501      	movs	r5, #1
 8009c2a:	3c04      	subs	r4, #4
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	f000 000f 	and.w	r0, r0, #15
 8009c32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	e7b7      	b.n	8009baa <__hexnan+0x7a>
 8009c3a:	2508      	movs	r5, #8
 8009c3c:	e7b5      	b.n	8009baa <__hexnan+0x7a>
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0df      	beq.n	8009c04 <__hexnan+0xd4>
 8009c44:	f1c3 0320 	rsb	r3, r3, #32
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4c:	40da      	lsrs	r2, r3
 8009c4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c52:	4013      	ands	r3, r2
 8009c54:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c58:	e7d4      	b.n	8009c04 <__hexnan+0xd4>
 8009c5a:	3f04      	subs	r7, #4
 8009c5c:	e7d2      	b.n	8009c04 <__hexnan+0xd4>
 8009c5e:	2004      	movs	r0, #4
 8009c60:	b007      	add	sp, #28
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c66 <__ascii_mbtowc>:
 8009c66:	b082      	sub	sp, #8
 8009c68:	b901      	cbnz	r1, 8009c6c <__ascii_mbtowc+0x6>
 8009c6a:	a901      	add	r1, sp, #4
 8009c6c:	b142      	cbz	r2, 8009c80 <__ascii_mbtowc+0x1a>
 8009c6e:	b14b      	cbz	r3, 8009c84 <__ascii_mbtowc+0x1e>
 8009c70:	7813      	ldrb	r3, [r2, #0]
 8009c72:	600b      	str	r3, [r1, #0]
 8009c74:	7812      	ldrb	r2, [r2, #0]
 8009c76:	1e10      	subs	r0, r2, #0
 8009c78:	bf18      	it	ne
 8009c7a:	2001      	movne	r0, #1
 8009c7c:	b002      	add	sp, #8
 8009c7e:	4770      	bx	lr
 8009c80:	4610      	mov	r0, r2
 8009c82:	e7fb      	b.n	8009c7c <__ascii_mbtowc+0x16>
 8009c84:	f06f 0001 	mvn.w	r0, #1
 8009c88:	e7f8      	b.n	8009c7c <__ascii_mbtowc+0x16>

08009c8a <_realloc_r>:
 8009c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8e:	4680      	mov	r8, r0
 8009c90:	4614      	mov	r4, r2
 8009c92:	460e      	mov	r6, r1
 8009c94:	b921      	cbnz	r1, 8009ca0 <_realloc_r+0x16>
 8009c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	f7fd be74 	b.w	8007988 <_malloc_r>
 8009ca0:	b92a      	cbnz	r2, 8009cae <_realloc_r+0x24>
 8009ca2:	f7fd fdfd 	bl	80078a0 <_free_r>
 8009ca6:	4625      	mov	r5, r4
 8009ca8:	4628      	mov	r0, r5
 8009caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cae:	f000 f842 	bl	8009d36 <_malloc_usable_size_r>
 8009cb2:	4284      	cmp	r4, r0
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	d802      	bhi.n	8009cbe <_realloc_r+0x34>
 8009cb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cbc:	d812      	bhi.n	8009ce4 <_realloc_r+0x5a>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	f7fd fe61 	bl	8007988 <_malloc_r>
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d0ed      	beq.n	8009ca8 <_realloc_r+0x1e>
 8009ccc:	42bc      	cmp	r4, r7
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	bf28      	it	cs
 8009cd4:	463a      	movcs	r2, r7
 8009cd6:	f7ff fc25 	bl	8009524 <memcpy>
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4640      	mov	r0, r8
 8009cde:	f7fd fddf 	bl	80078a0 <_free_r>
 8009ce2:	e7e1      	b.n	8009ca8 <_realloc_r+0x1e>
 8009ce4:	4635      	mov	r5, r6
 8009ce6:	e7df      	b.n	8009ca8 <_realloc_r+0x1e>

08009ce8 <__ascii_wctomb>:
 8009ce8:	b149      	cbz	r1, 8009cfe <__ascii_wctomb+0x16>
 8009cea:	2aff      	cmp	r2, #255	; 0xff
 8009cec:	bf85      	ittet	hi
 8009cee:	238a      	movhi	r3, #138	; 0x8a
 8009cf0:	6003      	strhi	r3, [r0, #0]
 8009cf2:	700a      	strbls	r2, [r1, #0]
 8009cf4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cf8:	bf98      	it	ls
 8009cfa:	2001      	movls	r0, #1
 8009cfc:	4770      	bx	lr
 8009cfe:	4608      	mov	r0, r1
 8009d00:	4770      	bx	lr
	...

08009d04 <fiprintf>:
 8009d04:	b40e      	push	{r1, r2, r3}
 8009d06:	b503      	push	{r0, r1, lr}
 8009d08:	4601      	mov	r1, r0
 8009d0a:	ab03      	add	r3, sp, #12
 8009d0c:	4805      	ldr	r0, [pc, #20]	; (8009d24 <fiprintf+0x20>)
 8009d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d12:	6800      	ldr	r0, [r0, #0]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	f000 f83f 	bl	8009d98 <_vfiprintf_r>
 8009d1a:	b002      	add	sp, #8
 8009d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d20:	b003      	add	sp, #12
 8009d22:	4770      	bx	lr
 8009d24:	20000064 	.word	0x20000064

08009d28 <abort>:
 8009d28:	b508      	push	{r3, lr}
 8009d2a:	2006      	movs	r0, #6
 8009d2c:	f000 fa0c 	bl	800a148 <raise>
 8009d30:	2001      	movs	r0, #1
 8009d32:	f7f7 f9ef 	bl	8001114 <_exit>

08009d36 <_malloc_usable_size_r>:
 8009d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d3a:	1f18      	subs	r0, r3, #4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfbc      	itt	lt
 8009d40:	580b      	ldrlt	r3, [r1, r0]
 8009d42:	18c0      	addlt	r0, r0, r3
 8009d44:	4770      	bx	lr

08009d46 <__sfputc_r>:
 8009d46:	6893      	ldr	r3, [r2, #8]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	b410      	push	{r4}
 8009d4e:	6093      	str	r3, [r2, #8]
 8009d50:	da08      	bge.n	8009d64 <__sfputc_r+0x1e>
 8009d52:	6994      	ldr	r4, [r2, #24]
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	db01      	blt.n	8009d5c <__sfputc_r+0x16>
 8009d58:	290a      	cmp	r1, #10
 8009d5a:	d103      	bne.n	8009d64 <__sfputc_r+0x1e>
 8009d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d60:	f000 b934 	b.w	8009fcc <__swbuf_r>
 8009d64:	6813      	ldr	r3, [r2, #0]
 8009d66:	1c58      	adds	r0, r3, #1
 8009d68:	6010      	str	r0, [r2, #0]
 8009d6a:	7019      	strb	r1, [r3, #0]
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <__sfputs_r>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	4606      	mov	r6, r0
 8009d78:	460f      	mov	r7, r1
 8009d7a:	4614      	mov	r4, r2
 8009d7c:	18d5      	adds	r5, r2, r3
 8009d7e:	42ac      	cmp	r4, r5
 8009d80:	d101      	bne.n	8009d86 <__sfputs_r+0x12>
 8009d82:	2000      	movs	r0, #0
 8009d84:	e007      	b.n	8009d96 <__sfputs_r+0x22>
 8009d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8a:	463a      	mov	r2, r7
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff ffda 	bl	8009d46 <__sfputc_r>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d1f3      	bne.n	8009d7e <__sfputs_r+0xa>
 8009d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d98 <_vfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	b09d      	sub	sp, #116	; 0x74
 8009da0:	4614      	mov	r4, r2
 8009da2:	4698      	mov	r8, r3
 8009da4:	4606      	mov	r6, r0
 8009da6:	b118      	cbz	r0, 8009db0 <_vfiprintf_r+0x18>
 8009da8:	6a03      	ldr	r3, [r0, #32]
 8009daa:	b90b      	cbnz	r3, 8009db0 <_vfiprintf_r+0x18>
 8009dac:	f7fc fe62 	bl	8006a74 <__sinit>
 8009db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db2:	07d9      	lsls	r1, r3, #31
 8009db4:	d405      	bmi.n	8009dc2 <_vfiprintf_r+0x2a>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	059a      	lsls	r2, r3, #22
 8009dba:	d402      	bmi.n	8009dc2 <_vfiprintf_r+0x2a>
 8009dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dbe:	f7fc ff70 	bl	8006ca2 <__retarget_lock_acquire_recursive>
 8009dc2:	89ab      	ldrh	r3, [r5, #12]
 8009dc4:	071b      	lsls	r3, r3, #28
 8009dc6:	d501      	bpl.n	8009dcc <_vfiprintf_r+0x34>
 8009dc8:	692b      	ldr	r3, [r5, #16]
 8009dca:	b99b      	cbnz	r3, 8009df4 <_vfiprintf_r+0x5c>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f000 f93a 	bl	800a048 <__swsetup_r>
 8009dd4:	b170      	cbz	r0, 8009df4 <_vfiprintf_r+0x5c>
 8009dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd8:	07dc      	lsls	r4, r3, #31
 8009dda:	d504      	bpl.n	8009de6 <_vfiprintf_r+0x4e>
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	b01d      	add	sp, #116	; 0x74
 8009de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de6:	89ab      	ldrh	r3, [r5, #12]
 8009de8:	0598      	lsls	r0, r3, #22
 8009dea:	d4f7      	bmi.n	8009ddc <_vfiprintf_r+0x44>
 8009dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dee:	f7fc ff59 	bl	8006ca4 <__retarget_lock_release_recursive>
 8009df2:	e7f3      	b.n	8009ddc <_vfiprintf_r+0x44>
 8009df4:	2300      	movs	r3, #0
 8009df6:	9309      	str	r3, [sp, #36]	; 0x24
 8009df8:	2320      	movs	r3, #32
 8009dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e02:	2330      	movs	r3, #48	; 0x30
 8009e04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009fb8 <_vfiprintf_r+0x220>
 8009e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e0c:	f04f 0901 	mov.w	r9, #1
 8009e10:	4623      	mov	r3, r4
 8009e12:	469a      	mov	sl, r3
 8009e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e18:	b10a      	cbz	r2, 8009e1e <_vfiprintf_r+0x86>
 8009e1a:	2a25      	cmp	r2, #37	; 0x25
 8009e1c:	d1f9      	bne.n	8009e12 <_vfiprintf_r+0x7a>
 8009e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e22:	d00b      	beq.n	8009e3c <_vfiprintf_r+0xa4>
 8009e24:	465b      	mov	r3, fp
 8009e26:	4622      	mov	r2, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7ff ffa2 	bl	8009d74 <__sfputs_r>
 8009e30:	3001      	adds	r0, #1
 8009e32:	f000 80a9 	beq.w	8009f88 <_vfiprintf_r+0x1f0>
 8009e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e38:	445a      	add	r2, fp
 8009e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80a1 	beq.w	8009f88 <_vfiprintf_r+0x1f0>
 8009e46:	2300      	movs	r3, #0
 8009e48:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e50:	f10a 0a01 	add.w	sl, sl, #1
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e5e:	4654      	mov	r4, sl
 8009e60:	2205      	movs	r2, #5
 8009e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e66:	4854      	ldr	r0, [pc, #336]	; (8009fb8 <_vfiprintf_r+0x220>)
 8009e68:	f7f6 f9ea 	bl	8000240 <memchr>
 8009e6c:	9a04      	ldr	r2, [sp, #16]
 8009e6e:	b9d8      	cbnz	r0, 8009ea8 <_vfiprintf_r+0x110>
 8009e70:	06d1      	lsls	r1, r2, #27
 8009e72:	bf44      	itt	mi
 8009e74:	2320      	movmi	r3, #32
 8009e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7a:	0713      	lsls	r3, r2, #28
 8009e7c:	bf44      	itt	mi
 8009e7e:	232b      	movmi	r3, #43	; 0x2b
 8009e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e84:	f89a 3000 	ldrb.w	r3, [sl]
 8009e88:	2b2a      	cmp	r3, #42	; 0x2a
 8009e8a:	d015      	beq.n	8009eb8 <_vfiprintf_r+0x120>
 8009e8c:	9a07      	ldr	r2, [sp, #28]
 8009e8e:	4654      	mov	r4, sl
 8009e90:	2000      	movs	r0, #0
 8009e92:	f04f 0c0a 	mov.w	ip, #10
 8009e96:	4621      	mov	r1, r4
 8009e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e9c:	3b30      	subs	r3, #48	; 0x30
 8009e9e:	2b09      	cmp	r3, #9
 8009ea0:	d94d      	bls.n	8009f3e <_vfiprintf_r+0x1a6>
 8009ea2:	b1b0      	cbz	r0, 8009ed2 <_vfiprintf_r+0x13a>
 8009ea4:	9207      	str	r2, [sp, #28]
 8009ea6:	e014      	b.n	8009ed2 <_vfiprintf_r+0x13a>
 8009ea8:	eba0 0308 	sub.w	r3, r0, r8
 8009eac:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	46a2      	mov	sl, r4
 8009eb6:	e7d2      	b.n	8009e5e <_vfiprintf_r+0xc6>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	1d19      	adds	r1, r3, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	9103      	str	r1, [sp, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfbb      	ittet	lt
 8009ec4:	425b      	neglt	r3, r3
 8009ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8009eca:	9307      	strge	r3, [sp, #28]
 8009ecc:	9307      	strlt	r3, [sp, #28]
 8009ece:	bfb8      	it	lt
 8009ed0:	9204      	strlt	r2, [sp, #16]
 8009ed2:	7823      	ldrb	r3, [r4, #0]
 8009ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ed6:	d10c      	bne.n	8009ef2 <_vfiprintf_r+0x15a>
 8009ed8:	7863      	ldrb	r3, [r4, #1]
 8009eda:	2b2a      	cmp	r3, #42	; 0x2a
 8009edc:	d134      	bne.n	8009f48 <_vfiprintf_r+0x1b0>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	1d1a      	adds	r2, r3, #4
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	9203      	str	r2, [sp, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bfb8      	it	lt
 8009eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eee:	3402      	adds	r4, #2
 8009ef0:	9305      	str	r3, [sp, #20]
 8009ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009fc8 <_vfiprintf_r+0x230>
 8009ef6:	7821      	ldrb	r1, [r4, #0]
 8009ef8:	2203      	movs	r2, #3
 8009efa:	4650      	mov	r0, sl
 8009efc:	f7f6 f9a0 	bl	8000240 <memchr>
 8009f00:	b138      	cbz	r0, 8009f12 <_vfiprintf_r+0x17a>
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	eba0 000a 	sub.w	r0, r0, sl
 8009f08:	2240      	movs	r2, #64	; 0x40
 8009f0a:	4082      	lsls	r2, r0
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	3401      	adds	r4, #1
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f16:	4829      	ldr	r0, [pc, #164]	; (8009fbc <_vfiprintf_r+0x224>)
 8009f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f1c:	2206      	movs	r2, #6
 8009f1e:	f7f6 f98f 	bl	8000240 <memchr>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d03f      	beq.n	8009fa6 <_vfiprintf_r+0x20e>
 8009f26:	4b26      	ldr	r3, [pc, #152]	; (8009fc0 <_vfiprintf_r+0x228>)
 8009f28:	bb1b      	cbnz	r3, 8009f72 <_vfiprintf_r+0x1da>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	3307      	adds	r3, #7
 8009f2e:	f023 0307 	bic.w	r3, r3, #7
 8009f32:	3308      	adds	r3, #8
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	443b      	add	r3, r7
 8009f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3c:	e768      	b.n	8009e10 <_vfiprintf_r+0x78>
 8009f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f42:	460c      	mov	r4, r1
 8009f44:	2001      	movs	r0, #1
 8009f46:	e7a6      	b.n	8009e96 <_vfiprintf_r+0xfe>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	3401      	adds	r4, #1
 8009f4c:	9305      	str	r3, [sp, #20]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	f04f 0c0a 	mov.w	ip, #10
 8009f54:	4620      	mov	r0, r4
 8009f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5a:	3a30      	subs	r2, #48	; 0x30
 8009f5c:	2a09      	cmp	r2, #9
 8009f5e:	d903      	bls.n	8009f68 <_vfiprintf_r+0x1d0>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0c6      	beq.n	8009ef2 <_vfiprintf_r+0x15a>
 8009f64:	9105      	str	r1, [sp, #20]
 8009f66:	e7c4      	b.n	8009ef2 <_vfiprintf_r+0x15a>
 8009f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e7f0      	b.n	8009f54 <_vfiprintf_r+0x1bc>
 8009f72:	ab03      	add	r3, sp, #12
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	462a      	mov	r2, r5
 8009f78:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <_vfiprintf_r+0x22c>)
 8009f7a:	a904      	add	r1, sp, #16
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7fb ff3f 	bl	8005e00 <_printf_float>
 8009f82:	4607      	mov	r7, r0
 8009f84:	1c78      	adds	r0, r7, #1
 8009f86:	d1d6      	bne.n	8009f36 <_vfiprintf_r+0x19e>
 8009f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d405      	bmi.n	8009f9a <_vfiprintf_r+0x202>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	059a      	lsls	r2, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_vfiprintf_r+0x202>
 8009f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f96:	f7fc fe85 	bl	8006ca4 <__retarget_lock_release_recursive>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	065b      	lsls	r3, r3, #25
 8009f9e:	f53f af1d 	bmi.w	8009ddc <_vfiprintf_r+0x44>
 8009fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fa4:	e71c      	b.n	8009de0 <_vfiprintf_r+0x48>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <_vfiprintf_r+0x22c>)
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7fc f9ad 	bl	8006310 <_printf_i>
 8009fb6:	e7e4      	b.n	8009f82 <_vfiprintf_r+0x1ea>
 8009fb8:	0800a629 	.word	0x0800a629
 8009fbc:	0800a633 	.word	0x0800a633
 8009fc0:	08005e01 	.word	0x08005e01
 8009fc4:	08009d75 	.word	0x08009d75
 8009fc8:	0800a62f 	.word	0x0800a62f

08009fcc <__swbuf_r>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	460e      	mov	r6, r1
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	b118      	cbz	r0, 8009fde <__swbuf_r+0x12>
 8009fd6:	6a03      	ldr	r3, [r0, #32]
 8009fd8:	b90b      	cbnz	r3, 8009fde <__swbuf_r+0x12>
 8009fda:	f7fc fd4b 	bl	8006a74 <__sinit>
 8009fde:	69a3      	ldr	r3, [r4, #24]
 8009fe0:	60a3      	str	r3, [r4, #8]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	071a      	lsls	r2, r3, #28
 8009fe6:	d525      	bpl.n	800a034 <__swbuf_r+0x68>
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	b31b      	cbz	r3, 800a034 <__swbuf_r+0x68>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	6922      	ldr	r2, [r4, #16]
 8009ff0:	1a98      	subs	r0, r3, r2
 8009ff2:	6963      	ldr	r3, [r4, #20]
 8009ff4:	b2f6      	uxtb	r6, r6
 8009ff6:	4283      	cmp	r3, r0
 8009ff8:	4637      	mov	r7, r6
 8009ffa:	dc04      	bgt.n	800a006 <__swbuf_r+0x3a>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7ff fa2c 	bl	800945c <_fflush_r>
 800a004:	b9e0      	cbnz	r0, 800a040 <__swbuf_r+0x74>
 800a006:	68a3      	ldr	r3, [r4, #8]
 800a008:	3b01      	subs	r3, #1
 800a00a:	60a3      	str	r3, [r4, #8]
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	6022      	str	r2, [r4, #0]
 800a012:	701e      	strb	r6, [r3, #0]
 800a014:	6962      	ldr	r2, [r4, #20]
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	429a      	cmp	r2, r3
 800a01a:	d004      	beq.n	800a026 <__swbuf_r+0x5a>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	07db      	lsls	r3, r3, #31
 800a020:	d506      	bpl.n	800a030 <__swbuf_r+0x64>
 800a022:	2e0a      	cmp	r6, #10
 800a024:	d104      	bne.n	800a030 <__swbuf_r+0x64>
 800a026:	4621      	mov	r1, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	f7ff fa17 	bl	800945c <_fflush_r>
 800a02e:	b938      	cbnz	r0, 800a040 <__swbuf_r+0x74>
 800a030:	4638      	mov	r0, r7
 800a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a034:	4621      	mov	r1, r4
 800a036:	4628      	mov	r0, r5
 800a038:	f000 f806 	bl	800a048 <__swsetup_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0d5      	beq.n	8009fec <__swbuf_r+0x20>
 800a040:	f04f 37ff 	mov.w	r7, #4294967295
 800a044:	e7f4      	b.n	800a030 <__swbuf_r+0x64>
	...

0800a048 <__swsetup_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <__swsetup_r+0xac>)
 800a04c:	4605      	mov	r5, r0
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	460c      	mov	r4, r1
 800a052:	b118      	cbz	r0, 800a05c <__swsetup_r+0x14>
 800a054:	6a03      	ldr	r3, [r0, #32]
 800a056:	b90b      	cbnz	r3, 800a05c <__swsetup_r+0x14>
 800a058:	f7fc fd0c 	bl	8006a74 <__sinit>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a062:	0718      	lsls	r0, r3, #28
 800a064:	d422      	bmi.n	800a0ac <__swsetup_r+0x64>
 800a066:	06d9      	lsls	r1, r3, #27
 800a068:	d407      	bmi.n	800a07a <__swsetup_r+0x32>
 800a06a:	2309      	movs	r3, #9
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	e034      	b.n	800a0e4 <__swsetup_r+0x9c>
 800a07a:	0758      	lsls	r0, r3, #29
 800a07c:	d512      	bpl.n	800a0a4 <__swsetup_r+0x5c>
 800a07e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a080:	b141      	cbz	r1, 800a094 <__swsetup_r+0x4c>
 800a082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a086:	4299      	cmp	r1, r3
 800a088:	d002      	beq.n	800a090 <__swsetup_r+0x48>
 800a08a:	4628      	mov	r0, r5
 800a08c:	f7fd fc08 	bl	80078a0 <_free_r>
 800a090:	2300      	movs	r3, #0
 800a092:	6363      	str	r3, [r4, #52]	; 0x34
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	2300      	movs	r3, #0
 800a09e:	6063      	str	r3, [r4, #4]
 800a0a0:	6923      	ldr	r3, [r4, #16]
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	f043 0308 	orr.w	r3, r3, #8
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	b94b      	cbnz	r3, 800a0c4 <__swsetup_r+0x7c>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ba:	d003      	beq.n	800a0c4 <__swsetup_r+0x7c>
 800a0bc:	4621      	mov	r1, r4
 800a0be:	4628      	mov	r0, r5
 800a0c0:	f000 f884 	bl	800a1cc <__smakebuf_r>
 800a0c4:	89a0      	ldrh	r0, [r4, #12]
 800a0c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0ca:	f010 0301 	ands.w	r3, r0, #1
 800a0ce:	d00a      	beq.n	800a0e6 <__swsetup_r+0x9e>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60a3      	str	r3, [r4, #8]
 800a0d4:	6963      	ldr	r3, [r4, #20]
 800a0d6:	425b      	negs	r3, r3
 800a0d8:	61a3      	str	r3, [r4, #24]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b943      	cbnz	r3, 800a0f0 <__swsetup_r+0xa8>
 800a0de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0e2:	d1c4      	bne.n	800a06e <__swsetup_r+0x26>
 800a0e4:	bd38      	pop	{r3, r4, r5, pc}
 800a0e6:	0781      	lsls	r1, r0, #30
 800a0e8:	bf58      	it	pl
 800a0ea:	6963      	ldrpl	r3, [r4, #20]
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	e7f4      	b.n	800a0da <__swsetup_r+0x92>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	e7f7      	b.n	800a0e4 <__swsetup_r+0x9c>
 800a0f4:	20000064 	.word	0x20000064

0800a0f8 <_raise_r>:
 800a0f8:	291f      	cmp	r1, #31
 800a0fa:	b538      	push	{r3, r4, r5, lr}
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	460d      	mov	r5, r1
 800a100:	d904      	bls.n	800a10c <_raise_r+0x14>
 800a102:	2316      	movs	r3, #22
 800a104:	6003      	str	r3, [r0, #0]
 800a106:	f04f 30ff 	mov.w	r0, #4294967295
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a10e:	b112      	cbz	r2, 800a116 <_raise_r+0x1e>
 800a110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a114:	b94b      	cbnz	r3, 800a12a <_raise_r+0x32>
 800a116:	4620      	mov	r0, r4
 800a118:	f000 f830 	bl	800a17c <_getpid_r>
 800a11c:	462a      	mov	r2, r5
 800a11e:	4601      	mov	r1, r0
 800a120:	4620      	mov	r0, r4
 800a122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a126:	f000 b817 	b.w	800a158 <_kill_r>
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d00a      	beq.n	800a144 <_raise_r+0x4c>
 800a12e:	1c59      	adds	r1, r3, #1
 800a130:	d103      	bne.n	800a13a <_raise_r+0x42>
 800a132:	2316      	movs	r3, #22
 800a134:	6003      	str	r3, [r0, #0]
 800a136:	2001      	movs	r0, #1
 800a138:	e7e7      	b.n	800a10a <_raise_r+0x12>
 800a13a:	2400      	movs	r4, #0
 800a13c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a140:	4628      	mov	r0, r5
 800a142:	4798      	blx	r3
 800a144:	2000      	movs	r0, #0
 800a146:	e7e0      	b.n	800a10a <_raise_r+0x12>

0800a148 <raise>:
 800a148:	4b02      	ldr	r3, [pc, #8]	; (800a154 <raise+0xc>)
 800a14a:	4601      	mov	r1, r0
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	f7ff bfd3 	b.w	800a0f8 <_raise_r>
 800a152:	bf00      	nop
 800a154:	20000064 	.word	0x20000064

0800a158 <_kill_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4d07      	ldr	r5, [pc, #28]	; (800a178 <_kill_r+0x20>)
 800a15c:	2300      	movs	r3, #0
 800a15e:	4604      	mov	r4, r0
 800a160:	4608      	mov	r0, r1
 800a162:	4611      	mov	r1, r2
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	f7f6 ffc5 	bl	80010f4 <_kill>
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	d102      	bne.n	800a174 <_kill_r+0x1c>
 800a16e:	682b      	ldr	r3, [r5, #0]
 800a170:	b103      	cbz	r3, 800a174 <_kill_r+0x1c>
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	bd38      	pop	{r3, r4, r5, pc}
 800a176:	bf00      	nop
 800a178:	200009f8 	.word	0x200009f8

0800a17c <_getpid_r>:
 800a17c:	f7f6 bfb2 	b.w	80010e4 <_getpid>

0800a180 <__swhatbuf_r>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	460c      	mov	r4, r1
 800a184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a188:	2900      	cmp	r1, #0
 800a18a:	b096      	sub	sp, #88	; 0x58
 800a18c:	4615      	mov	r5, r2
 800a18e:	461e      	mov	r6, r3
 800a190:	da0d      	bge.n	800a1ae <__swhatbuf_r+0x2e>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a198:	f04f 0100 	mov.w	r1, #0
 800a19c:	bf0c      	ite	eq
 800a19e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a1a2:	2340      	movne	r3, #64	; 0x40
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	6031      	str	r1, [r6, #0]
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	b016      	add	sp, #88	; 0x58
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	466a      	mov	r2, sp
 800a1b0:	f000 f848 	bl	800a244 <_fstat_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	dbec      	blt.n	800a192 <__swhatbuf_r+0x12>
 800a1b8:	9901      	ldr	r1, [sp, #4]
 800a1ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a1be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1c2:	4259      	negs	r1, r3
 800a1c4:	4159      	adcs	r1, r3
 800a1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ca:	e7eb      	b.n	800a1a4 <__swhatbuf_r+0x24>

0800a1cc <__smakebuf_r>:
 800a1cc:	898b      	ldrh	r3, [r1, #12]
 800a1ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d0:	079d      	lsls	r5, r3, #30
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	d507      	bpl.n	800a1e8 <__smakebuf_r+0x1c>
 800a1d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	6123      	str	r3, [r4, #16]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	6163      	str	r3, [r4, #20]
 800a1e4:	b002      	add	sp, #8
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	ab01      	add	r3, sp, #4
 800a1ea:	466a      	mov	r2, sp
 800a1ec:	f7ff ffc8 	bl	800a180 <__swhatbuf_r>
 800a1f0:	9900      	ldr	r1, [sp, #0]
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7fd fbc7 	bl	8007988 <_malloc_r>
 800a1fa:	b948      	cbnz	r0, 800a210 <__smakebuf_r+0x44>
 800a1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a200:	059a      	lsls	r2, r3, #22
 800a202:	d4ef      	bmi.n	800a1e4 <__smakebuf_r+0x18>
 800a204:	f023 0303 	bic.w	r3, r3, #3
 800a208:	f043 0302 	orr.w	r3, r3, #2
 800a20c:	81a3      	strh	r3, [r4, #12]
 800a20e:	e7e3      	b.n	800a1d8 <__smakebuf_r+0xc>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	6020      	str	r0, [r4, #0]
 800a214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	9b00      	ldr	r3, [sp, #0]
 800a21c:	6163      	str	r3, [r4, #20]
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	6120      	str	r0, [r4, #16]
 800a222:	b15b      	cbz	r3, 800a23c <__smakebuf_r+0x70>
 800a224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a228:	4630      	mov	r0, r6
 800a22a:	f000 f81d 	bl	800a268 <_isatty_r>
 800a22e:	b128      	cbz	r0, 800a23c <__smakebuf_r+0x70>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	431d      	orrs	r5, r3
 800a240:	81a5      	strh	r5, [r4, #12]
 800a242:	e7cf      	b.n	800a1e4 <__smakebuf_r+0x18>

0800a244 <_fstat_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4d07      	ldr	r5, [pc, #28]	; (800a264 <_fstat_r+0x20>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	f7f6 ffae 	bl	80011b2 <_fstat>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d102      	bne.n	800a260 <_fstat_r+0x1c>
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	b103      	cbz	r3, 800a260 <_fstat_r+0x1c>
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	bf00      	nop
 800a264:	200009f8 	.word	0x200009f8

0800a268 <_isatty_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d06      	ldr	r5, [pc, #24]	; (800a284 <_isatty_r+0x1c>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	f7f6 ffad 	bl	80011d2 <_isatty>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_isatty_r+0x1a>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_isatty_r+0x1a>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	200009f8 	.word	0x200009f8

0800a288 <_init>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	bf00      	nop
 800a28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28e:	bc08      	pop	{r3}
 800a290:	469e      	mov	lr, r3
 800a292:	4770      	bx	lr

0800a294 <_fini>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	bf00      	nop
 800a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29a:	bc08      	pop	{r3}
 800a29c:	469e      	mov	lr, r3
 800a29e:	4770      	bx	lr
