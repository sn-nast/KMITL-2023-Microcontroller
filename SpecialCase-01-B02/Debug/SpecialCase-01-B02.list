
SpecialCase-01-B02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da0  08004da0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000006c  08004e14  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08004e14  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa56  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc4  00000000  00000000  0002ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000614  00000000  00000000  0002cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027004  00000000  00000000  0002d50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8ac  00000000  00000000  00054510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f11b1  00000000  00000000  0005fdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002454  00000000  00000000  00150f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001533c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004cc8 	.word	0x08004cc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	08004cc8 	.word	0x08004cc8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <MX_GPIO_Init+0xc8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_GPIO_Init+0xcc>)
 8000652:	f001 f991 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000656:	2301      	movs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0xcc>)
 800066e:	f000 fecb 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2302      	movs	r3, #2
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0xcc>)
 800068c:	f000 febc 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0xcc>)
 80006a8:	f000 feae 	bl	8001408 <HAL_GPIO_Init>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020400 	.word	0x40020400

080006bc <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 fca5 	bl	8001014 <HAL_Delay>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <printOut>:

void printOut(const char * text)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {}
 80006dc:	bf00      	nop
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <printOut+0x34>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e8:	2b40      	cmp	r3, #64	; 0x40
 80006ea:	d1f8      	bne.n	80006de <printOut+0xa>
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff fda7 	bl	8000240 <strlen>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <printOut+0x34>)
 80006fc:	f002 fa9d 	bl	8002c3a <HAL_UART_Transmit>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000016c 	.word	0x2000016c

0800070c <receiveUserInput>:
	printOut(text);
	printOut("\n\r");
}

void receiveUserInput()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	receiveTextLength = 0;
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <receiveUserInput+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	char ch = 'a';
 8000718:	2361      	movs	r3, #97	; 0x61
 800071a:	71fb      	strb	r3, [r7, #7]
	while(ch != '\r')
 800071c:	e025      	b.n	800076a <receiveUserInput+0x5e>
	{
		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {}
 800071e:	bf00      	nop
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <receiveUserInput+0x88>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	2b20      	cmp	r3, #32
 800072c:	d1f8      	bne.n	8000720 <receiveUserInput+0x14>
		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 1000);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	2201      	movs	r2, #1
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <receiveUserInput+0x88>)
 8000738:	f002 fb02 	bl	8002d40 <HAL_UART_Receive>
		//SAVE INPUT TO GLobal STRING
		receiveText[receiveTextLength++]= ch;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <receiveUserInput+0x84>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <receiveUserInput+0x84>)
 8000744:	600a      	str	r2, [r1, #0]
 8000746:	79f9      	ldrb	r1, [r7, #7]
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <receiveUserInput+0x8c>)
 800074a:	54d1      	strb	r1, [r2, r3]

		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 800074c:	bf00      	nop
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <receiveUserInput+0x88>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000758:	2b40      	cmp	r3, #64	; 0x40
 800075a:	d1f8      	bne.n	800074e <receiveUserInput+0x42>
		HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1000);
 800075c:	1df9      	adds	r1, r7, #7
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	2201      	movs	r2, #1
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <receiveUserInput+0x88>)
 8000766:	f002 fa68 	bl	8002c3a <HAL_UART_Transmit>
	while(ch != '\r')
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b0d      	cmp	r3, #13
 800076e:	d1d6      	bne.n	800071e <receiveUserInput+0x12>
	}
	//ADD "/r/n"
	receiveText[receiveTextLength++]= '\n';
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <receiveUserInput+0x84>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	4906      	ldr	r1, [pc, #24]	; (8000790 <receiveUserInput+0x84>)
 8000778:	600a      	str	r2, [r1, #0]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <receiveUserInput+0x8c>)
 800077c:	210a      	movs	r1, #10
 800077e:	54d1      	strb	r1, [r2, r3]
	printOut("\n");
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <receiveUserInput+0x90>)
 8000782:	f7ff ffa7 	bl	80006d4 <printOut>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000bc 	.word	0x200000bc
 8000794:	2000016c 	.word	0x2000016c
 8000798:	20000088 	.word	0x20000088
 800079c:	08004ce4 	.word	0x08004ce4

080007a0 <sentMessage>:

void sentMessage(char * text)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC) == RESET) {}
 80007a8:	bf00      	nop
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <sentMessage+0x3c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b4:	2b40      	cmp	r3, #64	; 0x40
 80007b6:	d1f8      	bne.n	80007aa <sentMessage+0xa>
	HAL_UART_Transmit(&huart6, (uint8_t*)text, strlen(text), 1000);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fd41 	bl	8000240 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <sentMessage+0x3c>)
 80007ca:	f002 fa36 	bl	8002c3a <HAL_UART_Transmit>
	isSendable = 0;
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <sentMessage+0x40>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200001f4 	.word	0x200001f4
 80007e0:	2000000c 	.word	0x2000000c

080007e4 <inputName>:

void inputName()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	printOut("\tName: ");
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <inputName+0x34>)
 80007ea:	f7ff ff73 	bl	80006d4 <printOut>
	receiveUserInput();
 80007ee:	f7ff ff8d 	bl	800070c <receiveUserInput>

	// Text require "\r\n"
	sentMessage(receiveText);
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <inputName+0x38>)
 80007f4:	f7ff ffd4 	bl	80007a0 <sentMessage>

	strncpy(myUserName, receiveText, receiveTextLength-2);
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <inputName+0x3c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3b02      	subs	r3, #2
 80007fe:	461a      	mov	r2, r3
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <inputName+0x38>)
 8000802:	4808      	ldr	r0, [pc, #32]	; (8000824 <inputName+0x40>)
 8000804:	f003 fdc8 	bl	8004398 <strncpy>
	myUserName[receiveTextLength-2] = '\0';
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <inputName+0x3c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3b02      	subs	r3, #2
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <inputName+0x40>)
 8000810:	2100      	movs	r1, #0
 8000812:	54d1      	strb	r1, [r2, r3]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08004ce8 	.word	0x08004ce8
 800081c:	20000088 	.word	0x20000088
 8000820:	200000bc 	.word	0x200000bc
 8000824:	20000000 	.word	0x20000000

08000828 <checkCoUserIsReady>:

void checkCoUserIsReady()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
	while (isFirstRx) { }
 800082e:	bf00      	nop
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <checkCoUserIsReady+0x2c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1fb      	bne.n	8000830 <checkCoUserIsReady+0x8>
	char text[50];
	sprintf(text,"\t%s is ready\r\n", coUserName);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <checkCoUserIsReady+0x30>)
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <checkCoUserIsReady+0x34>)
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fd82 	bl	8004348 <siprintf>
	printOut(text);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff44 	bl	80006d4 <printOut>
}
 800084c:	bf00      	nop
 800084e:	3738      	adds	r7, #56	; 0x38
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000008 	.word	0x20000008
 8000858:	200000c0 	.word	0x200000c0
 800085c:	08004cf0 	.word	0x08004cf0

08000860 <checkQuitStatus>:

void checkQuitStatus(char *text)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (text[0] == 'q' && text[2] == '\n')
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b71      	cmp	r3, #113	; 0x71
 800086e:	d10d      	bne.n	800088c <checkQuitStatus+0x2c>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3302      	adds	r3, #2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d108      	bne.n	800088c <checkQuitStatus+0x2c>
	{
		isQuit = 1;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <checkQuitStatus+0x34>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
		isSendable = 0;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <checkQuitStatus+0x38>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
    	HAL_UART_DeInit(&huart6);
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <checkQuitStatus+0x3c>)
 8000888:	f002 f99a 	bl	8002bc0 <HAL_UART_DeInit>
	}
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000164 	.word	0x20000164
 8000898:	2000000c 	.word	0x2000000c
 800089c:	200001f4 	.word	0x200001f4

080008a0 <userInputText>:

void userInputText()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09a      	sub	sp, #104	; 0x68
 80008a4:	af00      	add	r7, sp, #0
	char text[100];
	sprintf(text,"\t %s => ", myUserName);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <userInputText+0x28>)
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <userInputText+0x2c>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fd4b 	bl	8004348 <siprintf>
	printOut(text);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff0d 	bl	80006d4 <printOut>
	receiveUserInput();
 80008ba:	f7ff ff27 	bl	800070c <receiveUserInput>
}
 80008be:	bf00      	nop
 80008c0:	3768      	adds	r7, #104	; 0x68
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000000 	.word	0x20000000
 80008cc:	08004d00 	.word	0x08004d00

080008d0 <showReceivedMessage>:

void showReceivedMessage()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09a      	sub	sp, #104	; 0x68
 80008d4:	af00      	add	r7, sp, #0
	if (strlen(receivedMessage) == 0) {return;}
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <showReceivedMessage+0x2c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00a      	beq.n	80008f4 <showReceivedMessage+0x24>
	char text[100];
	sprintf(text,"\t %s : %s\r\n", coUserName, receivedMessage);
 80008de:	1d38      	adds	r0, r7, #4
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <showReceivedMessage+0x2c>)
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <showReceivedMessage+0x30>)
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <showReceivedMessage+0x34>)
 80008e6:	f003 fd2f 	bl	8004348 <siprintf>
	printOut(text);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fef1 	bl	80006d4 <printOut>
 80008f2:	e000      	b.n	80008f6 <showReceivedMessage+0x26>
	if (strlen(receivedMessage) == 0) {return;}
 80008f4:	bf00      	nop
}
 80008f6:	3768      	adds	r7, #104	; 0x68
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000fc 	.word	0x200000fc
 8000900:	200000c0 	.word	0x200000c0
 8000904:	08004d0c 	.word	0x08004d0c

08000908 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    if (rxData[0] == '\n')
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <HAL_UART_RxCpltCallback+0xa8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b0a      	cmp	r3, #10
 8000916:	d139      	bne.n	800098c <HAL_UART_RxCpltCallback+0x84>
    {
    	HAL_UART_Init(&huart3);
 8000918:	4826      	ldr	r0, [pc, #152]	; (80009b4 <HAL_UART_RxCpltCallback+0xac>)
 800091a:	f002 f903 	bl	8002b24 <HAL_UART_Init>
        // End of message received, process it
    	receivedMessage[--receivedIndex] = '\0';
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_UART_RxCpltCallback+0xb0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <HAL_UART_RxCpltCallback+0xb0>)
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_UART_RxCpltCallback+0xb0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_UART_RxCpltCallback+0xb4>)
 800092e:	2100      	movs	r1, #0
 8000930:	54d1      	strb	r1, [r2, r3]
        if (isFirstRx)
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <HAL_UART_RxCpltCallback+0xb8>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d00a      	beq.n	8000950 <HAL_UART_RxCpltCallback+0x48>
        {
        	strcpy(coUserName, receivedMessage);
 800093a:	4920      	ldr	r1, [pc, #128]	; (80009bc <HAL_UART_RxCpltCallback+0xb4>)
 800093c:	4821      	ldr	r0, [pc, #132]	; (80009c4 <HAL_UART_RxCpltCallback+0xbc>)
 800093e:	f003 fd6b 	bl	8004418 <strcpy>
        	isFirstRx = 0;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_UART_RxCpltCallback+0xb8>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
        	isSendable = 1;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e019      	b.n	8000984 <HAL_UART_RxCpltCallback+0x7c>
        } else if (receivedMessage[0] == 'q' && receivedMessage[1] == '\0')
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_UART_RxCpltCallback+0xb4>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b71      	cmp	r3, #113	; 0x71
 8000956:	d10d      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x6c>
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_RxCpltCallback+0xb4>)
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d109      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x6c>
		{
        	isQuit = 1;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
        	isSendable = 0;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
           	HAL_UART_DeInit(&huart6);
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 800096e:	f002 f927 	bl	8002bc0 <HAL_UART_DeInit>
 8000972:	e007      	b.n	8000984 <HAL_UART_RxCpltCallback+0x7c>
		} else
        {
        	showReceivedMessage();
 8000974:	f7ff ffac 	bl	80008d0 <showReceivedMessage>
        	receivedMessage[0]='\0';
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_UART_RxCpltCallback+0xb4>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
        	isSendable = 1;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
        }
        // Reset the index for the next message
        receivedIndex = 0;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_UART_RxCpltCallback+0xb0>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	e008      	b.n	800099e <HAL_UART_RxCpltCallback+0x96>
    } else
    {
    	receivedMessage[receivedIndex++] = rxData[0];
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_UART_RxCpltCallback+0xb0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	4909      	ldr	r1, [pc, #36]	; (80009b8 <HAL_UART_RxCpltCallback+0xb0>)
 8000994:	600a      	str	r2, [r1, #0]
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_UART_RxCpltCallback+0xa8>)
 8000998:	7811      	ldrb	r1, [r2, #0]
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_UART_RxCpltCallback+0xb4>)
 800099c:	54d1      	strb	r1, [r2, r3]
    }

    // Enable UART receive interrupt again
    HAL_UART_Receive_IT(&huart6, (uint8_t*)rxData, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	4903      	ldr	r1, [pc, #12]	; (80009b0 <HAL_UART_RxCpltCallback+0xa8>)
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 80009a4:	f002 fa90 	bl	8002ec8 <HAL_UART_Receive_IT>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000f4 	.word	0x200000f4
 80009b4:	2000016c 	.word	0x2000016c
 80009b8:	20000160 	.word	0x20000160
 80009bc:	200000fc 	.word	0x200000fc
 80009c0:	20000008 	.word	0x20000008
 80009c4:	200000c0 	.word	0x200000c0
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	20000164 	.word	0x20000164
 80009d0:	200001f4 	.word	0x200001f4

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fabe 	bl	8000f5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f84d 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f7ff fe03 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009e6:	f000 f94b 	bl	8000c80 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80009ea:	f000 f979 	bl	8000ce0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  const char WELCOME_TEXT[] = "Man from U.A.R.T.2!\r\nQuit PRESS q\r\n";
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <main+0x88>)
 80009f0:	1d3c      	adds	r4, r7, #4
 80009f2:	461d      	mov	r5, r3
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_IT(&huart6, (uint8_t*)rxData, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	4917      	ldr	r1, [pc, #92]	; (8000a60 <main+0x8c>)
 8000a04:	4817      	ldr	r0, [pc, #92]	; (8000a64 <main+0x90>)
 8000a06:	f002 fa5f 	bl	8002ec8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printOut(WELCOME_TEXT);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe61 	bl	80006d4 <printOut>
	  checkCoUserIsReady();
 8000a12:	f7ff ff09 	bl	8000828 <checkCoUserIsReady>
	  inputName();
 8000a16:	f7ff fee5 	bl	80007e4 <inputName>

	  while(!isQuit)
 8000a1a:	e014      	b.n	8000a46 <main+0x72>
//		  		  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET&& !isSendable && !isQuit) {}
//		  	  		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 100);
//		  }
		  while(isSendable)
		  {
			  userInputText();
 8000a1c:	f7ff ff40 	bl	80008a0 <userInputText>
			  sentMessage(receiveText);
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <main+0x94>)
 8000a22:	f7ff febd 	bl	80007a0 <sentMessage>
			  checkQuitStatus(receiveText);
 8000a26:	4810      	ldr	r0, [pc, #64]	; (8000a68 <main+0x94>)
 8000a28:	f7ff ff1a 	bl	8000860 <checkQuitStatus>
			  HAL_UART_DeInit(&huart3);
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <main+0x98>)
 8000a2e:	f002 f8c7 	bl	8002bc0 <HAL_UART_DeInit>
			  delay(100);
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f7ff fe42 	bl	80006bc <delay>
		  while(isSendable)
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <main+0x9c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1ed      	bne.n	8000a1c <main+0x48>
		  }
		  delay(10);
 8000a40:	200a      	movs	r0, #10
 8000a42:	f7ff fe3b 	bl	80006bc <delay>
	  while(!isQuit)
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <main+0xa0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f4      	beq.n	8000a38 <main+0x64>
	  }
	  HAL_UART_Init(&huart3);
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <main+0x98>)
 8000a50:	f002 f868 	bl	8002b24 <HAL_UART_Init>
	  printOut("QUIT\r\n");
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <main+0xa4>)
 8000a56:	f7ff fe3d 	bl	80006d4 <printOut>
	  while(1){}
 8000a5a:	e7fe      	b.n	8000a5a <main+0x86>
 8000a5c:	08004d20 	.word	0x08004d20
 8000a60:	200000f4 	.word	0x200000f4
 8000a64:	200001f4 	.word	0x200001f4
 8000a68:	20000088 	.word	0x20000088
 8000a6c:	2000016c 	.word	0x2000016c
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	20000164 	.word	0x20000164
 8000a78:	08004d18 	.word	0x08004d18

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 fc7c 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <SystemClock_Config+0xb0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <SystemClock_Config+0xb0>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <SystemClock_Config+0xb0>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <SystemClock_Config+0xb4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <SystemClock_Config+0xb4>)
 8000ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <SystemClock_Config+0xb4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 ff5f 	bl	80019ac <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f81e 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f9f8 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b1e:	f000 f809 	bl	8000b34 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	; 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f9fe 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART6_IRQHandler+0x10>)
 8000be2:	f002 f9b5 	bl	8002f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200001f4 	.word	0x200001f4

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f003 fbce 	bl	80043c0 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20080000 	.word	0x20080000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000168 	.word	0x20000168
 8000c58:	200003c8 	.word	0x200003c8

08000c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_USART3_UART_Init+0x5c>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cc4:	f001 ff2e 	bl	8002b24 <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cce:	f7ff ff31 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000016c 	.word	0x2000016c
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_USART6_UART_Init+0x5c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART6_UART_Init+0x58>)
 8000d24:	f001 fefe 	bl	8002b24 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f7ff ff01 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001f4 	.word	0x200001f4
 8000d3c:	40011400 	.word	0x40011400

08000d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0b0      	sub	sp, #192	; 0xc0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2290      	movs	r2, #144	; 0x90
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fb11 	bl	8004388 <memset>
  if(uartHandle->Instance==USART3)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a47      	ldr	r2, [pc, #284]	; (8000e88 <HAL_UART_MspInit+0x148>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d13d      	bne.n	8000dec <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 faa8 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8a:	f7ff fed3 	bl	8000b34 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a3e      	ldr	r2, [pc, #248]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a38      	ldr	r2, [pc, #224]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dde:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000de2:	4619      	mov	r1, r3
 8000de4:	482a      	ldr	r0, [pc, #168]	; (8000e90 <HAL_UART_MspInit+0x150>)
 8000de6:	f000 fb0f 	bl	8001408 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000dea:	e049      	b.n	8000e80 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART6)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_UART_MspInit+0x154>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d144      	bne.n	8000e80 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fa65 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e10:	f7ff fe90 	bl	8000b34 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_UART_MspInit+0x14c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000e44:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000e6c:	f000 facc 	bl	8001408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2101      	movs	r1, #1
 8000e74:	2047      	movs	r0, #71	; 0x47
 8000e76:	f000 f9f0 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e7a:	2047      	movs	r0, #71	; 0x47
 8000e7c:	f000 fa09 	bl	8001292 <HAL_NVIC_EnableIRQ>
}
 8000e80:	bf00      	nop
 8000e82:	37c0      	adds	r7, #192	; 0xc0
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40011400 	.word	0x40011400
 8000e98:	40021800 	.word	0x40021800

08000e9c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_UART_MspDeInit+0x58>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10b      	bne.n	8000ec6 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_UART_MspDeInit+0x5c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_UART_MspDeInit+0x5c>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8000eba:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <HAL_UART_MspDeInit+0x60>)
 8000ec0:	f000 fc4e 	bl	8001760 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 8000ec4:	e012      	b.n	8000eec <HAL_UART_MspDeInit+0x50>
  else if(uartHandle->Instance==USART6)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_UART_MspDeInit+0x64>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d10d      	bne.n	8000eec <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART6_CLK_DISABLE();
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_UART_MspDeInit+0x5c>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_UART_MspDeInit+0x5c>)
 8000ed6:	f023 0320 	bic.w	r3, r3, #32
 8000eda:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_14);
 8000edc:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <HAL_UART_MspDeInit+0x68>)
 8000ee2:	f000 fc3d 	bl	8001760 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000ee6:	2047      	movs	r0, #71	; 0x47
 8000ee8:	f000 f9e1 	bl	80012ae <HAL_NVIC_DisableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40011400 	.word	0x40011400
 8000f04:	40021800 	.word	0x40021800

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f32:	f7ff fe93 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f003 fa49 	bl	80043cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fd4b 	bl	80009d4 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f4c:	08004da8 	.word	0x08004da8
  ldr r2, =_sbss
 8000f50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f54:	200003c8 	.word	0x200003c8

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>

08000f5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5e:	2003      	movs	r0, #3
 8000f60:	f000 f970 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f64:	200f      	movs	r0, #15
 8000f66:	f000 f805 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6a:	f7ff fde9 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f999 	bl	80012ca <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f953 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	20000018 	.word	0x20000018
 8000fd0:	20000014 	.word	0x20000014

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000018 	.word	0x20000018
 8000ff8:	2000027c 	.word	0x2000027c

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000027c 	.word	0x2000027c

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000018 	.word	0x20000018

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0000 	.word	0x05fa0000

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db12      	blt.n	8001134 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	490a      	ldr	r1, [pc, #40]	; (8001140 <__NVIC_DisableIRQ+0x44>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	3320      	adds	r3, #32
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001128:	f3bf 8f4f 	dsb	sy
}
 800112c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112e:	f3bf 8f6f 	isb	sy
}
 8001132:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff05 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff1a 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff0d 	bl	80010c0 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff1d 	bl	80010fc <__NVIC_DisableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff94 	bl	8001200 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff fe84 	bl	8000ffc <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d008      	beq.n	8001314 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e052      	b.n	80013ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0216 	bic.w	r2, r2, #22
 8001322:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001332:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_DMA_Abort+0x62>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0208 	bic.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001364:	e013      	b.n	800138e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001366:	f7ff fe49 	bl	8000ffc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b05      	cmp	r3, #5
 8001372:	d90c      	bls.n	800138e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e015      	b.n	80013ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e4      	bne.n	8001366 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	223f      	movs	r2, #63	; 0x3f
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e00c      	b.n	80013fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2205      	movs	r2, #5
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e175      	b.n	8001714 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8164 	bne.w	800170e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x56>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80be 	beq.w	800170e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b66      	ldr	r3, [pc, #408]	; (800172c <HAL_GPIO_Init+0x324>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a65      	ldr	r2, [pc, #404]	; (800172c <HAL_GPIO_Init+0x324>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_GPIO_Init+0x324>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015aa:	4a61      	ldr	r2, [pc, #388]	; (8001730 <HAL_GPIO_Init+0x328>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x32c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d037      	beq.n	8001646 <HAL_GPIO_Init+0x23e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_GPIO_Init+0x330>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d031      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a56      	ldr	r2, [pc, #344]	; (800173c <HAL_GPIO_Init+0x334>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02b      	beq.n	800163e <HAL_GPIO_Init+0x236>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a55      	ldr	r2, [pc, #340]	; (8001740 <HAL_GPIO_Init+0x338>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d025      	beq.n	800163a <HAL_GPIO_Init+0x232>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_GPIO_Init+0x33c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01f      	beq.n	8001636 <HAL_GPIO_Init+0x22e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a53      	ldr	r2, [pc, #332]	; (8001748 <HAL_GPIO_Init+0x340>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x22a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_GPIO_Init+0x344>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x226>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_GPIO_Init+0x348>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x222>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a50      	ldr	r2, [pc, #320]	; (8001754 <HAL_GPIO_Init+0x34c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x21e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x350>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x21a>
 800161e:	2309      	movs	r3, #9
 8001620:	e012      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001622:	230a      	movs	r3, #10
 8001624:	e010      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001626:	2308      	movs	r3, #8
 8001628:	e00e      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800162a:	2307      	movs	r3, #7
 800162c:	e00c      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800162e:	2306      	movs	r3, #6
 8001630:	e00a      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001632:	2305      	movs	r3, #5
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001636:	2304      	movs	r3, #4
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x328>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_GPIO_Init+0x354>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168a:	4a34      	ldr	r2, [pc, #208]	; (800175c <HAL_GPIO_Init+0x354>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_GPIO_Init+0x354>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_GPIO_Init+0x354>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_GPIO_Init+0x354>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_GPIO_Init+0x354>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_GPIO_Init+0x354>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_GPIO_Init+0x354>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f ae86 	bls.w	8001428 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40021400 	.word	0x40021400
 800174c:	40021800 	.word	0x40021800
 8001750:	40021c00 	.word	0x40021c00
 8001754:	40022000 	.word	0x40022000
 8001758:	40022400 	.word	0x40022400
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e0d9      	b.n	8001930 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800177c:	2201      	movs	r2, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	429a      	cmp	r2, r3
 8001794:	f040 80c9 	bne.w	800192a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8001798:	4a6b      	ldr	r2, [pc, #428]	; (8001948 <HAL_GPIO_DeInit+0x1e8>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	4013      	ands	r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a63      	ldr	r2, [pc, #396]	; (800194c <HAL_GPIO_DeInit+0x1ec>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d037      	beq.n	8001832 <HAL_GPIO_DeInit+0xd2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a62      	ldr	r2, [pc, #392]	; (8001950 <HAL_GPIO_DeInit+0x1f0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d031      	beq.n	800182e <HAL_GPIO_DeInit+0xce>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a61      	ldr	r2, [pc, #388]	; (8001954 <HAL_GPIO_DeInit+0x1f4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d02b      	beq.n	800182a <HAL_GPIO_DeInit+0xca>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a60      	ldr	r2, [pc, #384]	; (8001958 <HAL_GPIO_DeInit+0x1f8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d025      	beq.n	8001826 <HAL_GPIO_DeInit+0xc6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a5f      	ldr	r2, [pc, #380]	; (800195c <HAL_GPIO_DeInit+0x1fc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01f      	beq.n	8001822 <HAL_GPIO_DeInit+0xc2>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a5e      	ldr	r2, [pc, #376]	; (8001960 <HAL_GPIO_DeInit+0x200>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_DeInit+0xbe>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <HAL_GPIO_DeInit+0x204>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_DeInit+0xba>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a5c      	ldr	r2, [pc, #368]	; (8001968 <HAL_GPIO_DeInit+0x208>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_DeInit+0xb6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a5b      	ldr	r2, [pc, #364]	; (800196c <HAL_GPIO_DeInit+0x20c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_DeInit+0xb2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a5a      	ldr	r2, [pc, #360]	; (8001970 <HAL_GPIO_DeInit+0x210>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_DeInit+0xae>
 800180a:	2309      	movs	r3, #9
 800180c:	e012      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 800180e:	230a      	movs	r3, #10
 8001810:	e010      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 8001812:	2308      	movs	r3, #8
 8001814:	e00e      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 8001816:	2307      	movs	r3, #7
 8001818:	e00c      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 800181a:	2306      	movs	r3, #6
 800181c:	e00a      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 800181e:	2305      	movs	r3, #5
 8001820:	e008      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_DeInit+0xd4>
 8001832:	2300      	movs	r3, #0
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	429a      	cmp	r2, r3
 8001842:	d132      	bne.n	80018aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001844:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	4949      	ldr	r1, [pc, #292]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 800184e:	4013      	ands	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	4946      	ldr	r1, [pc, #280]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 800185c:	4013      	ands	r3, r2
 800185e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	4942      	ldr	r1, [pc, #264]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 800186a:	4013      	ands	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	493f      	ldr	r1, [pc, #252]	; (8001974 <HAL_GPIO_DeInit+0x214>)
 8001878:	4013      	ands	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800188c:	4a2e      	ldr	r2, [pc, #184]	; (8001948 <HAL_GPIO_DeInit+0x1e8>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	43da      	mvns	r2, r3
 800189c:	482a      	ldr	r0, [pc, #168]	; (8001948 <HAL_GPIO_DeInit+0x1e8>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	400a      	ands	r2, r1
 80018a4:	3302      	adds	r3, #2
 80018a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2103      	movs	r1, #3
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	08d2      	lsrs	r2, r2, #3
 80018e0:	4019      	ands	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2103      	movs	r1, #3
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	2101      	movs	r1, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2103      	movs	r1, #3
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	401a      	ands	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f af22 	bls.w	800177c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40013800 	.word	0x40013800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40021400 	.word	0x40021400
 8001964:	40021800 	.word	0x40021800
 8001968:	40021c00 	.word	0x40021c00
 800196c:	40022000 	.word	0x40022000
 8001970:	40022400 	.word	0x40022400
 8001974:	40013c00 	.word	0x40013c00

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e29b      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	4b96      	ldr	r3, [pc, #600]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d00c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019dc:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d112      	bne.n	8001a0e <HAL_RCC_OscConfig+0x62>
 80019e8:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f4:	d10b      	bne.n	8001a0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4b8d      	ldr	r3, [pc, #564]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06c      	beq.n	8001adc <HAL_RCC_OscConfig+0x130>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d168      	bne.n	8001adc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e275      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7a>
 8001a18:	4b84      	ldr	r3, [pc, #528]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a83      	ldr	r2, [pc, #524]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e02e      	b.n	8001a84 <HAL_RCC_OscConfig+0xd8>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x9c>
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7e      	ldr	r2, [pc, #504]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b7c      	ldr	r3, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7b      	ldr	r2, [pc, #492]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xd8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0xc0>
 8001a52:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xd8>
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6e      	ldr	r2, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b6c      	ldr	r3, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6b      	ldr	r2, [pc, #428]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fab6 	bl	8000ffc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fab2 	bl	8000ffc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e229      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe8>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff faa2 	bl	8000ffc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fa9e 	bl	8000ffc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e215      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x110>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d069      	beq.n	8001bbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x190>
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1e9      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	493d      	ldr	r1, [pc, #244]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e040      	b.n	8001bbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d023      	beq.n	8001b8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fa54 	bl	8000ffc <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fa50 	bl	8000ffc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1c7      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4929      	ldr	r1, [pc, #164]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
 8001b8a:	e018      	b.n	8001bbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa30 	bl	8000ffc <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fa2c 	bl	8000ffc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1a3      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d038      	beq.n	8001c3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff fa0d 	bl	8000ffc <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff fa09 	bl	8000ffc <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e180      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x23a>
 8001c04:	e01a      	b.n	8001c3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff f9f3 	bl	8000ffc <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f9ef 	bl	8000ffc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d903      	bls.n	8001c30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e166      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
 8001c2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a4 	beq.w	8001d92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a88      	ldr	r2, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c72:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7f      	ldr	r2, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f9b7 	bl	8000ffc <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f9b3 	bl	8000ffc <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e12a      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x31a>
 8001cb8:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e02d      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x33c>
 8001cce:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e01c      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x35e>
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a61      	ldr	r2, [pc, #388]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f967 	bl	8000ffc <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f963 	bl	8000ffc <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0d8      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCC_OscConfig+0x386>
 8001d54:	e014      	b.n	8001d80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7ff f951 	bl	8000ffc <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff f94d 	bl	8000ffc <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0c2      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ee      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80ae 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d06d      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d14b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f91e 	bl	8000ffc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff f91a 	bl	8000ffc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e091      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	071b      	lsls	r3, r3, #28
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f8ec 	bl	8000ffc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff f8e8 	bl	8000ffc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e05f      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x47c>
 8001e46:	e057      	b.n	8001ef8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f8d2 	bl	8000ffc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f8ce 	bl	8000ffc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e045      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4b0>
 8001e7a:	e03d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x54c>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_RCC_OscConfig+0x558>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d030      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d129      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d122      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d119      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 020f 	bic.w	r2, r3, #15
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fffe 	bl	8000ffc <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe fffa 	bl	8000ffc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1d0>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff5a 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08004d4c 	.word	0x08004d4c
 80020d8:	20000010 	.word	0x20000010
 80020dc:	20000014 	.word	0x20000014

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e4:	b090      	sub	sp, #64	; 0x40
 80020e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f8:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d00d      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x40>
 8002104:	2b08      	cmp	r3, #8
 8002106:	f200 80a1 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x16c>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x34>
 800210e:	2b04      	cmp	r3, #4
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x3a>
 8002112:	e09b      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_GetSysClockFreq+0x184>)
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002118:	e09b      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_GetSysClockFreq+0x188>)
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800211e:	e098      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <HAL_RCC_GetSysClockFreq+0x180>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800212a:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <HAL_RCC_GetSysClockFreq+0x180>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d028      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_GetSysClockFreq+0x180>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	2200      	movs	r2, #0
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	627a      	str	r2, [r7, #36]	; 0x24
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002148:	2100      	movs	r1, #0
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_GetSysClockFreq+0x188>)
 800214c:	fb03 f201 	mul.w	r2, r3, r1
 8002150:	2300      	movs	r3, #0
 8002152:	fb00 f303 	mul.w	r3, r0, r3
 8002156:	4413      	add	r3, r2
 8002158:	4a43      	ldr	r2, [pc, #268]	; (8002268 <HAL_RCC_GetSysClockFreq+0x188>)
 800215a:	fba0 1202 	umull	r1, r2, r0, r2
 800215e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002160:	460a      	mov	r2, r1
 8002162:	62ba      	str	r2, [r7, #40]	; 0x28
 8002164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002166:	4413      	add	r3, r2
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	2200      	movs	r2, #0
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	61fa      	str	r2, [r7, #28]
 8002172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002176:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800217a:	f7fe f8b9 	bl	80002f0 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4613      	mov	r3, r2
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002186:	e053      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_GetSysClockFreq+0x180>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	2200      	movs	r2, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	617a      	str	r2, [r7, #20]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800219a:	f04f 0b00 	mov.w	fp, #0
 800219e:	4652      	mov	r2, sl
 80021a0:	465b      	mov	r3, fp
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	0159      	lsls	r1, r3, #5
 80021ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b0:	0150      	lsls	r0, r2, #5
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ebb2 080a 	subs.w	r8, r2, sl
 80021ba:	eb63 090b 	sbc.w	r9, r3, fp
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021d2:	ebb2 0408 	subs.w	r4, r2, r8
 80021d6:	eb63 0509 	sbc.w	r5, r3, r9
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	00eb      	lsls	r3, r5, #3
 80021e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e8:	00e2      	lsls	r2, r4, #3
 80021ea:	4614      	mov	r4, r2
 80021ec:	461d      	mov	r5, r3
 80021ee:	eb14 030a 	adds.w	r3, r4, sl
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	eb45 030b 	adc.w	r3, r5, fp
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002206:	4629      	mov	r1, r5
 8002208:	028b      	lsls	r3, r1, #10
 800220a:	4621      	mov	r1, r4
 800220c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002210:	4621      	mov	r1, r4
 8002212:	028a      	lsls	r2, r1, #10
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	2200      	movs	r2, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002224:	f7fe f864 	bl	80002f0 <__aeabi_uldivmod>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4613      	mov	r3, r2
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetSysClockFreq+0x180>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetSysClockFreq+0x184>)
 800224e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002254:	4618      	mov	r0, r3
 8002256:	3740      	adds	r7, #64	; 0x40
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	00f42400 	.word	0x00f42400
 8002268:	017d7840 	.word	0x017d7840

0800226c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCC_GetHCLKFreq+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000010 	.word	0x20000010

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002288:	f7ff fff0 	bl	800226c <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0a9b      	lsrs	r3, r3, #10
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08004d5c 	.word	0x08004d5c

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b0:	f7ff ffdc 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0b5b      	lsrs	r3, r3, #13
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08004d5c 	.word	0x08004d5c

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022fc:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a68      	ldr	r2, [pc, #416]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	4b66      	ldr	r3, [pc, #408]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	4964      	ldr	r1, [pc, #400]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d017      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	4959      	ldr	r1, [pc, #356]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d017      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800236a:	4b4e      	ldr	r3, [pc, #312]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	494a      	ldr	r1, [pc, #296]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 808b 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a39      	ldr	r2, [pc, #228]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fe0e 	bl	8000ffc <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e4:	f7fe fe0a 	bl	8000ffc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e38f      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d035      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	429a      	cmp	r2, r3
 800241e:	d02e      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002428:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d114      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fdd2 	bl	8000ffc <HAL_GetTick>
 8002458:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	e00a      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe fdce 	bl	8000ffc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e351      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ee      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800248a:	d111      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800249a:	400b      	ands	r3, r1
 800249c:	4901      	ldr	r1, [pc, #4]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
 80024a2:	e00b      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000
 80024ac:	0ffffcff 	.word	0x0ffffcff
 80024b0:	4bac      	ldr	r3, [pc, #688]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4aab      	ldr	r2, [pc, #684]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024ba:	6093      	str	r3, [r2, #8]
 80024bc:	4ba9      	ldr	r3, [pc, #676]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c8:	49a6      	ldr	r1, [pc, #664]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d010      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024da:	4ba2      	ldr	r3, [pc, #648]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e0:	4aa0      	ldr	r2, [pc, #640]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ea:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	499b      	ldr	r1, [pc, #620]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002508:	4b96      	ldr	r3, [pc, #600]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002516:	4993      	ldr	r1, [pc, #588]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252a:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002538:	498a      	ldr	r1, [pc, #552]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254c:	4b85      	ldr	r3, [pc, #532]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	4982      	ldr	r1, [pc, #520]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800256e:	4b7d      	ldr	r3, [pc, #500]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4979      	ldr	r1, [pc, #484]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002590:	4b74      	ldr	r3, [pc, #464]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4971      	ldr	r1, [pc, #452]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f023 020c 	bic.w	r2, r3, #12
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c0:	4968      	ldr	r1, [pc, #416]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	4960      	ldr	r1, [pc, #384]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025f6:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	4957      	ldr	r1, [pc, #348]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002618:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	494f      	ldr	r1, [pc, #316]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4946      	ldr	r1, [pc, #280]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	493e      	ldr	r1, [pc, #248]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	4935      	ldr	r1, [pc, #212]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ae:	492d      	ldr	r1, [pc, #180]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d011      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d0:	4924      	ldr	r1, [pc, #144]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e0:	d101      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	4914      	ldr	r1, [pc, #80]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002734:	490b      	ldr	r1, [pc, #44]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002758:	4902      	ldr	r1, [pc, #8]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002760:	e002      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002774:	4b8a      	ldr	r3, [pc, #552]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	4986      	ldr	r1, [pc, #536]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002798:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800279a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a8:	497d      	ldr	r1, [pc, #500]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d006      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80d6 	beq.w	8002970 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027c4:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a75      	ldr	r2, [pc, #468]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fc14 	bl	8000ffc <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027d8:	f7fe fc10 	bl	8000ffc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e195      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027ea:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d021      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11d      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800280c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281e:	0e1b      	lsrs	r3, r3, #24
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	019a      	lsls	r2, r3, #6
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	4958      	ldr	r1, [pc, #352]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02e      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002870:	d129      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002880:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002886:	0f1b      	lsrs	r3, r3, #28
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	019a      	lsls	r2, r3, #6
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	071b      	lsls	r3, r3, #28
 80028a6:	493e      	ldr	r1, [pc, #248]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028ae:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b4:	f023 021f 	bic.w	r2, r3, #31
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	3b01      	subs	r3, #1
 80028be:	4938      	ldr	r1, [pc, #224]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01d      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d8:	0e1b      	lsrs	r3, r3, #24
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e6:	0f1b      	lsrs	r3, r3, #28
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	019a      	lsls	r2, r3, #6
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	431a      	orrs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	4926      	ldr	r1, [pc, #152]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d011      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	019a      	lsls	r2, r3, #6
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	491a      	ldr	r1, [pc, #104]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294a:	f7fe fb57 	bl	8000ffc <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002952:	f7fe fb53 	bl	8000ffc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0d8      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 80ce 	bne.w	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fe fb3a 	bl	8000ffc <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800298a:	e00b      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800298c:	f7fe fb36 	bl	8000ffc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d904      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0bb      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029a4:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b0:	d0ec      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d02e      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d12a      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	0f1b      	lsrs	r3, r3, #28
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	019a      	lsls	r2, r3, #6
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	071b      	lsls	r3, r3, #28
 8002a0e:	4944      	ldr	r1, [pc, #272]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a16:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	3b01      	subs	r3, #1
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	493d      	ldr	r1, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d022      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a44:	d11d      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	0e1b      	lsrs	r3, r3, #24
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	0f1b      	lsrs	r3, r3, #28
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	019a      	lsls	r2, r3, #6
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	071b      	lsls	r3, r3, #28
 8002a7a:	4929      	ldr	r1, [pc, #164]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d028      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	0e1b      	lsrs	r3, r3, #24
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	019a      	lsls	r2, r3, #6
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	071b      	lsls	r3, r3, #28
 8002ac2:	4917      	ldr	r1, [pc, #92]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	4911      	ldr	r1, [pc, #68]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe fa86 	bl	8000ffc <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002af4:	f7fe fa82 	bl	8000ffc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e007      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b12:	d1ef      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e040      	b.n	8002bb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe f8fa 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fd06 	bl	8003574 <UART_SetConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e022      	b.n	8002bb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 ff5e 	bl	8003a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 ffe5 	bl	8003b80 <UART_CheckIdleState>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e02f      	b.n	8002c32 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2224      	movs	r2, #36	; 0x24
 8002bd6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe f94b 	bl	8000e9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b08a      	sub	sp, #40	; 0x28
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d171      	bne.n	8002d36 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_UART_Transmit+0x24>
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06a      	b.n	8002d38 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c70:	f7fe f9c4 	bl	8000ffc <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8e:	d108      	bne.n	8002ca2 <HAL_UART_Transmit+0x68>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	e003      	b.n	8002caa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002caa:	e02c      	b.n	8002d06 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 ffaf 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e038      	b.n	8002d38 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	3302      	adds	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e007      	b.n	8002cf4 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1cc      	bne.n	8002cac <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2140      	movs	r1, #64	; 0x40
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 ff7c 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e005      	b.n	8002d38 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	f040 80b1 	bne.w	8002ebe <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Receive+0x28>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0a9      	b.n	8002ec0 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2222      	movs	r2, #34	; 0x22
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d82:	f7fe f93b 	bl	8000ffc <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d10e      	bne.n	8002dc0 <HAL_UART_Receive+0x80>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_UART_Receive+0x76>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002db4:	e02d      	b.n	8002e12 <HAL_UART_Receive+0xd2>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dbe:	e028      	b.n	8002e12 <HAL_UART_Receive+0xd2>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_UART_Receive+0xa4>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_UART_Receive+0x9a>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	22ff      	movs	r2, #255	; 0xff
 8002dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dd8:	e01b      	b.n	8002e12 <HAL_UART_Receive+0xd2>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	227f      	movs	r2, #127	; 0x7f
 8002dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002de2:	e016      	b.n	8002e12 <HAL_UART_Receive+0xd2>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dec:	d10d      	bne.n	8002e0a <HAL_UART_Receive+0xca>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_UART_Receive+0xc0>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	227f      	movs	r2, #127	; 0x7f
 8002dfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dfe:	e008      	b.n	8002e12 <HAL_UART_Receive+0xd2>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	223f      	movs	r2, #63	; 0x3f
 8002e04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e08:	e003      	b.n	8002e12 <HAL_UART_Receive+0xd2>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e22:	d108      	bne.n	8002e36 <HAL_UART_Receive+0xf6>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e003      	b.n	8002e3e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e3e:	e032      	b.n	8002ea6 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	2120      	movs	r1, #32
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fee5 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e032      	b.n	8002ec0 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10c      	bne.n	8002e7a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	8a7b      	ldrh	r3, [r7, #18]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	3302      	adds	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e00c      	b.n	8002e94 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	8a7b      	ldrh	r3, [r7, #18]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4013      	ands	r3, r2
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1c6      	bne.n	8002e40 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d132      	bne.n	8002f46 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Receive_IT+0x24>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e02b      	b.n	8002f48 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d018      	beq.n	8002f36 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	613b      	str	r3, [r7, #16]
   return(result);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	69f9      	ldr	r1, [r7, #28]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e6      	bne.n	8002f04 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 ff33 	bl	8003da8 <UART_Start_Receive_IT>
 8002f42:	4603      	mov	r3, r0
 8002f44:	e000      	b.n	8002f48 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3728      	adds	r7, #40	; 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0ba      	sub	sp, #232	; 0xe8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f7e:	4013      	ands	r3, r2
 8002f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00f      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 82ac 	beq.w	8003506 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
      }
      return;
 8002fb6:	e2a6      	b.n	8003506 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8117 	beq.w	80031f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fd2:	4b85      	ldr	r3, [pc, #532]	; (80031e8 <HAL_UART_IRQHandler+0x298>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 810a 	beq.w	80031f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d011      	beq.n	800300c <HAL_UART_IRQHandler+0xbc>
 8002fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d011      	beq.n	800303c <HAL_UART_IRQHandler+0xec>
 8003018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2202      	movs	r2, #2
 800302a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	f043 0204 	orr.w	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d011      	beq.n	800306c <HAL_UART_IRQHandler+0x11c>
 8003048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2204      	movs	r2, #4
 800305a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d017      	beq.n	80030a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003088:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2208      	movs	r2, #8
 8003096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309e:	f043 0208 	orr.w	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_UART_IRQHandler+0x18a>
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8212 	beq.w	800350a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003114:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800312a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800312e:	2b00      	cmp	r3, #0
 8003130:	d04f      	beq.n	80031d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fefe 	bl	8003f34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d141      	bne.n	80031ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3308      	adds	r3, #8
 800314c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800315c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3308      	adds	r3, #8
 800316e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003172:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800317e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800318a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1d9      	bne.n	8003146 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	2b00      	cmp	r3, #0
 8003198:	d013      	beq.n	80031c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_UART_IRQHandler+0x29c>)
 80031a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f90b 	bl	80013c2 <HAL_DMA_Abort_IT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d017      	beq.n	80031e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031bc:	4610      	mov	r0, r2
 80031be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e00f      	b.n	80031e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9b6 	bl	8003534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e00b      	b.n	80031e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9b2 	bl	8003534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	e007      	b.n	80031e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f9ae 	bl	8003534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80031e0:	e193      	b.n	800350a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e2:	bf00      	nop
    return;
 80031e4:	e191      	b.n	800350a <HAL_UART_IRQHandler+0x5ba>
 80031e6:	bf00      	nop
 80031e8:	04000120 	.word	0x04000120
 80031ec:	08003ffd 	.word	0x08003ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f040 814c 	bne.w	8003492 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8145 	beq.w	8003492 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 813e 	beq.w	8003492 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2210      	movs	r2, #16
 800321c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	f040 80b6 	bne.w	800339a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800323a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8165 	beq.w	800350e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800324a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800324e:	429a      	cmp	r2, r3
 8003250:	f080 815d 	bcs.w	800350e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800325a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003268:	f000 8086 	beq.w	8003378 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800329a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1da      	bne.n	800326c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e1      	bne.n	80032b6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3308      	adds	r3, #8
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3308      	adds	r3, #8
 8003312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800331c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e3      	bne.n	80032f2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003348:	f023 0310 	bic.w	r3, r3, #16
 800334c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800335a:	65bb      	str	r3, [r7, #88]	; 0x58
 800335c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e4      	bne.n	8003338 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd ffb5 	bl	80012e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800338a:	b29b      	uxth	r3, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8d8 	bl	8003548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003398:	e0b9      	b.n	800350e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80ab 	beq.w	8003512 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80033bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a6 	beq.w	8003512 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e4      	bne.n	80033c6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3308      	adds	r3, #8
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	623b      	str	r3, [r7, #32]
   return(result);
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003420:	633a      	str	r2, [r7, #48]	; 0x30
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e3      	bne.n	80033fc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	60fb      	str	r3, [r7, #12]
   return(result);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f023 0310 	bic.w	r3, r3, #16
 800345c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	617b      	str	r3, [r7, #20]
   return(result);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e4      	bne.n	8003448 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f85c 	bl	8003548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003490:	e03f      	b.n	8003512 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <HAL_UART_IRQHandler+0x56c>
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f853 	bl	8003560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034ba:	e02d      	b.n	8003518 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01c      	beq.n	8003516 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
    }
    return;
 80034e4:	e017      	b.n	8003516 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <HAL_UART_IRQHandler+0x5c8>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fd92 	bl	8004028 <UART_EndTransmit_IT>
    return;
 8003504:	e008      	b.n	8003518 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <HAL_UART_IRQHandler+0x5c8>
    return;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <HAL_UART_IRQHandler+0x5c8>
      return;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003516:	bf00      	nop
  }

}
 8003518:	37e8      	adds	r7, #232	; 0xe8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4ba6      	ldr	r3, [pc, #664]	; (8003838 <UART_SetConfig+0x2c4>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a94      	ldr	r2, [pc, #592]	; (800383c <UART_SetConfig+0x2c8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d120      	bne.n	8003632 <UART_SetConfig+0xbe>
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <UART_SetConfig+0x2cc>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d816      	bhi.n	800362c <UART_SetConfig+0xb8>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0x90>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	08003621 	.word	0x08003621
 800360c:	0800361b 	.word	0x0800361b
 8003610:	08003627 	.word	0x08003627
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e150      	b.n	80038bc <UART_SetConfig+0x348>
 800361a:	2302      	movs	r3, #2
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e14d      	b.n	80038bc <UART_SetConfig+0x348>
 8003620:	2304      	movs	r3, #4
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e14a      	b.n	80038bc <UART_SetConfig+0x348>
 8003626:	2308      	movs	r3, #8
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e147      	b.n	80038bc <UART_SetConfig+0x348>
 800362c:	2310      	movs	r3, #16
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e144      	b.n	80038bc <UART_SetConfig+0x348>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a83      	ldr	r2, [pc, #524]	; (8003844 <UART_SetConfig+0x2d0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d132      	bne.n	80036a2 <UART_SetConfig+0x12e>
 800363c:	4b80      	ldr	r3, [pc, #512]	; (8003840 <UART_SetConfig+0x2cc>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d828      	bhi.n	800369c <UART_SetConfig+0x128>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0xdc>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003685 	.word	0x08003685
 8003654:	0800369d 	.word	0x0800369d
 8003658:	0800369d 	.word	0x0800369d
 800365c:	0800369d 	.word	0x0800369d
 8003660:	08003691 	.word	0x08003691
 8003664:	0800369d 	.word	0x0800369d
 8003668:	0800369d 	.word	0x0800369d
 800366c:	0800369d 	.word	0x0800369d
 8003670:	0800368b 	.word	0x0800368b
 8003674:	0800369d 	.word	0x0800369d
 8003678:	0800369d 	.word	0x0800369d
 800367c:	0800369d 	.word	0x0800369d
 8003680:	08003697 	.word	0x08003697
 8003684:	2300      	movs	r3, #0
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e118      	b.n	80038bc <UART_SetConfig+0x348>
 800368a:	2302      	movs	r3, #2
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e115      	b.n	80038bc <UART_SetConfig+0x348>
 8003690:	2304      	movs	r3, #4
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e112      	b.n	80038bc <UART_SetConfig+0x348>
 8003696:	2308      	movs	r3, #8
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e10f      	b.n	80038bc <UART_SetConfig+0x348>
 800369c:	2310      	movs	r3, #16
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e10c      	b.n	80038bc <UART_SetConfig+0x348>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a68      	ldr	r2, [pc, #416]	; (8003848 <UART_SetConfig+0x2d4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d120      	bne.n	80036ee <UART_SetConfig+0x17a>
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <UART_SetConfig+0x2cc>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d013      	beq.n	80036e2 <UART_SetConfig+0x16e>
 80036ba:	2b30      	cmp	r3, #48	; 0x30
 80036bc:	d814      	bhi.n	80036e8 <UART_SetConfig+0x174>
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d009      	beq.n	80036d6 <UART_SetConfig+0x162>
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d810      	bhi.n	80036e8 <UART_SetConfig+0x174>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <UART_SetConfig+0x15c>
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d006      	beq.n	80036dc <UART_SetConfig+0x168>
 80036ce:	e00b      	b.n	80036e8 <UART_SetConfig+0x174>
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e0f2      	b.n	80038bc <UART_SetConfig+0x348>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e0ef      	b.n	80038bc <UART_SetConfig+0x348>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e0ec      	b.n	80038bc <UART_SetConfig+0x348>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e0e9      	b.n	80038bc <UART_SetConfig+0x348>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e0e6      	b.n	80038bc <UART_SetConfig+0x348>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a56      	ldr	r2, [pc, #344]	; (800384c <UART_SetConfig+0x2d8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d120      	bne.n	800373a <UART_SetConfig+0x1c6>
 80036f8:	4b51      	ldr	r3, [pc, #324]	; (8003840 <UART_SetConfig+0x2cc>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003702:	2bc0      	cmp	r3, #192	; 0xc0
 8003704:	d013      	beq.n	800372e <UART_SetConfig+0x1ba>
 8003706:	2bc0      	cmp	r3, #192	; 0xc0
 8003708:	d814      	bhi.n	8003734 <UART_SetConfig+0x1c0>
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d009      	beq.n	8003722 <UART_SetConfig+0x1ae>
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d810      	bhi.n	8003734 <UART_SetConfig+0x1c0>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x1a8>
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d006      	beq.n	8003728 <UART_SetConfig+0x1b4>
 800371a:	e00b      	b.n	8003734 <UART_SetConfig+0x1c0>
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e0cc      	b.n	80038bc <UART_SetConfig+0x348>
 8003722:	2302      	movs	r3, #2
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e0c9      	b.n	80038bc <UART_SetConfig+0x348>
 8003728:	2304      	movs	r3, #4
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e0c6      	b.n	80038bc <UART_SetConfig+0x348>
 800372e:	2308      	movs	r3, #8
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e0c3      	b.n	80038bc <UART_SetConfig+0x348>
 8003734:	2310      	movs	r3, #16
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e0c0      	b.n	80038bc <UART_SetConfig+0x348>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a44      	ldr	r2, [pc, #272]	; (8003850 <UART_SetConfig+0x2dc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d125      	bne.n	8003790 <UART_SetConfig+0x21c>
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <UART_SetConfig+0x2cc>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003752:	d017      	beq.n	8003784 <UART_SetConfig+0x210>
 8003754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003758:	d817      	bhi.n	800378a <UART_SetConfig+0x216>
 800375a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375e:	d00b      	beq.n	8003778 <UART_SetConfig+0x204>
 8003760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003764:	d811      	bhi.n	800378a <UART_SetConfig+0x216>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <UART_SetConfig+0x1fe>
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d006      	beq.n	800377e <UART_SetConfig+0x20a>
 8003770:	e00b      	b.n	800378a <UART_SetConfig+0x216>
 8003772:	2300      	movs	r3, #0
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e0a1      	b.n	80038bc <UART_SetConfig+0x348>
 8003778:	2302      	movs	r3, #2
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e09e      	b.n	80038bc <UART_SetConfig+0x348>
 800377e:	2304      	movs	r3, #4
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e09b      	b.n	80038bc <UART_SetConfig+0x348>
 8003784:	2308      	movs	r3, #8
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e098      	b.n	80038bc <UART_SetConfig+0x348>
 800378a:	2310      	movs	r3, #16
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e095      	b.n	80038bc <UART_SetConfig+0x348>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <UART_SetConfig+0x2e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d125      	bne.n	80037e6 <UART_SetConfig+0x272>
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <UART_SetConfig+0x2cc>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a8:	d017      	beq.n	80037da <UART_SetConfig+0x266>
 80037aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ae:	d817      	bhi.n	80037e0 <UART_SetConfig+0x26c>
 80037b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b4:	d00b      	beq.n	80037ce <UART_SetConfig+0x25a>
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ba:	d811      	bhi.n	80037e0 <UART_SetConfig+0x26c>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <UART_SetConfig+0x254>
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c4:	d006      	beq.n	80037d4 <UART_SetConfig+0x260>
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x26c>
 80037c8:	2301      	movs	r3, #1
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e076      	b.n	80038bc <UART_SetConfig+0x348>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e073      	b.n	80038bc <UART_SetConfig+0x348>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e070      	b.n	80038bc <UART_SetConfig+0x348>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e06d      	b.n	80038bc <UART_SetConfig+0x348>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e06a      	b.n	80038bc <UART_SetConfig+0x348>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <UART_SetConfig+0x2e4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d138      	bne.n	8003862 <UART_SetConfig+0x2ee>
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <UART_SetConfig+0x2cc>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037fe:	d017      	beq.n	8003830 <UART_SetConfig+0x2bc>
 8003800:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003804:	d82a      	bhi.n	800385c <UART_SetConfig+0x2e8>
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380a:	d00b      	beq.n	8003824 <UART_SetConfig+0x2b0>
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003810:	d824      	bhi.n	800385c <UART_SetConfig+0x2e8>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <UART_SetConfig+0x2aa>
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d006      	beq.n	800382a <UART_SetConfig+0x2b6>
 800381c:	e01e      	b.n	800385c <UART_SetConfig+0x2e8>
 800381e:	2300      	movs	r3, #0
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e04b      	b.n	80038bc <UART_SetConfig+0x348>
 8003824:	2302      	movs	r3, #2
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e048      	b.n	80038bc <UART_SetConfig+0x348>
 800382a:	2304      	movs	r3, #4
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e045      	b.n	80038bc <UART_SetConfig+0x348>
 8003830:	2308      	movs	r3, #8
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e042      	b.n	80038bc <UART_SetConfig+0x348>
 8003836:	bf00      	nop
 8003838:	efff69f3 	.word	0xefff69f3
 800383c:	40011000 	.word	0x40011000
 8003840:	40023800 	.word	0x40023800
 8003844:	40004400 	.word	0x40004400
 8003848:	40004800 	.word	0x40004800
 800384c:	40004c00 	.word	0x40004c00
 8003850:	40005000 	.word	0x40005000
 8003854:	40011400 	.word	0x40011400
 8003858:	40007800 	.word	0x40007800
 800385c:	2310      	movs	r3, #16
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e02c      	b.n	80038bc <UART_SetConfig+0x348>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a72      	ldr	r2, [pc, #456]	; (8003a30 <UART_SetConfig+0x4bc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d125      	bne.n	80038b8 <UART_SetConfig+0x344>
 800386c:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <UART_SetConfig+0x4c0>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003876:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800387a:	d017      	beq.n	80038ac <UART_SetConfig+0x338>
 800387c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003880:	d817      	bhi.n	80038b2 <UART_SetConfig+0x33e>
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d00b      	beq.n	80038a0 <UART_SetConfig+0x32c>
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	d811      	bhi.n	80038b2 <UART_SetConfig+0x33e>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <UART_SetConfig+0x326>
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003896:	d006      	beq.n	80038a6 <UART_SetConfig+0x332>
 8003898:	e00b      	b.n	80038b2 <UART_SetConfig+0x33e>
 800389a:	2300      	movs	r3, #0
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e00d      	b.n	80038bc <UART_SetConfig+0x348>
 80038a0:	2302      	movs	r3, #2
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e00a      	b.n	80038bc <UART_SetConfig+0x348>
 80038a6:	2304      	movs	r3, #4
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e007      	b.n	80038bc <UART_SetConfig+0x348>
 80038ac:	2308      	movs	r3, #8
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e004      	b.n	80038bc <UART_SetConfig+0x348>
 80038b2:	2310      	movs	r3, #16
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e001      	b.n	80038bc <UART_SetConfig+0x348>
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c4:	d15b      	bne.n	800397e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80038c6:	7ffb      	ldrb	r3, [r7, #31]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d828      	bhi.n	800391e <UART_SetConfig+0x3aa>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0x360>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe fcc4 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 80038fc:	61b8      	str	r0, [r7, #24]
        break;
 80038fe:	e013      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe fcd4 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8003904:	61b8      	str	r0, [r7, #24]
        break;
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <UART_SetConfig+0x4c4>)
 800390a:	61bb      	str	r3, [r7, #24]
        break;
 800390c:	e00c      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7fe fbe7 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8003912:	61b8      	str	r0, [r7, #24]
        break;
 8003914:	e008      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	61bb      	str	r3, [r7, #24]
        break;
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	77bb      	strb	r3, [r7, #30]
        break;
 8003926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d074      	beq.n	8003a18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	005a      	lsls	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d916      	bls.n	8003978 <UART_SetConfig+0x404>
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d212      	bcs.n	8003978 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f023 030f 	bic.w	r3, r3, #15
 800395a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	b29a      	uxth	r2, r3
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	4313      	orrs	r3, r2
 800396c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	89fa      	ldrh	r2, [r7, #14]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	e04f      	b.n	8003a18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	77bb      	strb	r3, [r7, #30]
 800397c:	e04c      	b.n	8003a18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d828      	bhi.n	80039d6 <UART_SetConfig+0x462>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x418>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039c1 	.word	0x080039c1
 8003998:	080039d7 	.word	0x080039d7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7fe fc68 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 80039b4:	61b8      	str	r0, [r7, #24]
        break;
 80039b6:	e013      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe fc78 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 80039bc:	61b8      	str	r0, [r7, #24]
        break;
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <UART_SetConfig+0x4c4>)
 80039c2:	61bb      	str	r3, [r7, #24]
        break;
 80039c4:	e00c      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe fb8b 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80039ca:	61b8      	str	r0, [r7, #24]
        break;
 80039cc:	e008      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	61bb      	str	r3, [r7, #24]
        break;
 80039d4:	e004      	b.n	80039e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77bb      	strb	r3, [r7, #30]
        break;
 80039de:	bf00      	nop
    }

    if (pclk != 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	085a      	lsrs	r2, r3, #1
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d909      	bls.n	8003a14 <UART_SetConfig+0x4a0>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d205      	bcs.n	8003a14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e001      	b.n	8003a18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40007c00 	.word	0x40007c00
 8003a34:	40023800 	.word	0x40023800
 8003a38:	00f42400 	.word	0x00f42400

08003a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01a      	beq.n	8003b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3a:	d10a      	bne.n	8003b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b90:	f7fd fa34 	bl	8000ffc <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d10e      	bne.n	8003bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f831 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e027      	b.n	8003c12 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d10e      	bne.n	8003bee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f81b 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e011      	b.n	8003c12 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b09c      	sub	sp, #112	; 0x70
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2a:	e0a7      	b.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	f000 80a3 	beq.w	8003d7c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c36:	f7fd f9e1 	bl	8000ffc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13f      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c60:	667b      	str	r3, [r7, #100]	; 0x64
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e6      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3308      	adds	r3, #8
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	663b      	str	r3, [r7, #96]	; 0x60
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e5      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e068      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d050      	beq.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d148      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e6      	bne.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	613b      	str	r3, [r7, #16]
   return(result);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3308      	adds	r3, #8
 8003d44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d46:	623a      	str	r2, [r7, #32]
 8003d48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	69f9      	ldr	r1, [r7, #28]
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e5      	bne.n	8003d26 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e010      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4013      	ands	r3, r2
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	f43f af48 	beq.w	8003c2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3770      	adds	r7, #112	; 0x70
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b097      	sub	sp, #92	; 0x5c
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d10e      	bne.n	8003dfa <UART_Start_Receive_IT+0x52>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <UART_Start_Receive_IT+0x48>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dee:	e02d      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	22ff      	movs	r2, #255	; 0xff
 8003df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003df8:	e028      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <UART_Start_Receive_IT+0x76>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <UART_Start_Receive_IT+0x6c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	22ff      	movs	r2, #255	; 0xff
 8003e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e12:	e01b      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	227f      	movs	r2, #127	; 0x7f
 8003e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e1c:	e016      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e26:	d10d      	bne.n	8003e44 <UART_Start_Receive_IT+0x9c>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <UART_Start_Receive_IT+0x92>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	227f      	movs	r2, #127	; 0x7f
 8003e34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e38:	e008      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	223f      	movs	r2, #63	; 0x3f
 8003e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e42:	e003      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2222      	movs	r2, #34	; 0x22
 8003e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	657b      	str	r3, [r7, #84]	; 0x54
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d107      	bne.n	8003eaa <UART_Start_Receive_IT+0x102>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <UART_Start_Receive_IT+0x184>)
 8003ea6:	669a      	str	r2, [r3, #104]	; 0x68
 8003ea8:	e002      	b.n	8003eb0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <UART_Start_Receive_IT+0x188>)
 8003eae:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e6      	bne.n	8003eb8 <UART_Start_Receive_IT+0x110>
 8003eea:	e018      	b.n	8003f1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	653b      	str	r3, [r7, #80]	; 0x50
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	69f9      	ldr	r1, [r7, #28]
 8003f10:	6a3a      	ldr	r2, [r7, #32]
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e6      	bne.n	8003eec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	375c      	adds	r7, #92	; 0x5c
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	080041e3 	.word	0x080041e3
 8003f30:	0800407d 	.word	0x0800407d

08003f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b095      	sub	sp, #84	; 0x54
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d118      	bne.n	8003fdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ff0:	bf00      	nop
 8003ff2:	3754      	adds	r7, #84	; 0x54
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fa8a 	bl	8003534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	60bb      	str	r3, [r7, #8]
   return(result);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	613b      	str	r3, [r7, #16]
   return(result);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e6      	bne.n	8004030 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fa56 	bl	8003520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004074:	bf00      	nop
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b096      	sub	sp, #88	; 0x58
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800408a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004094:	2b22      	cmp	r3, #34	; 0x22
 8004096:	f040 8098 	bne.w	80041ca <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80040a8:	b2d9      	uxtb	r1, r3
 80040aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	400a      	ands	r2, r1
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d17b      	bne.n	80041da <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f6:	653b      	str	r3, [r7, #80]	; 0x50
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
 8004102:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e6      	bne.n	80040e2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	623b      	str	r3, [r7, #32]
   return(result);
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004134:	633a      	str	r2, [r7, #48]	; 0x30
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	2b01      	cmp	r3, #1
 8004162:	d12e      	bne.n	80041c2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d103      	bne.n	80041b2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff f9c4 	bl	8003548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041c0:	e00b      	b.n	80041da <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fba0 	bl	8000908 <HAL_UART_RxCpltCallback>
}
 80041c8:	e007      	b.n	80041da <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0208 	orr.w	r2, r2, #8
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	3758      	adds	r7, #88	; 0x58
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b096      	sub	sp, #88	; 0x58
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fa:	2b22      	cmp	r3, #34	; 0x22
 80041fc:	f040 8098 	bne.w	8004330 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004210:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004214:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004218:	4013      	ands	r3, r2
 800421a:	b29a      	uxth	r2, r3
 800421c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d17b      	bne.n	8004340 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
 8004268:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800426c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	61fb      	str	r3, [r7, #28]
   return(result);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d12e      	bne.n	8004328 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	613b      	str	r3, [r7, #16]
   return(result);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e6      	bne.n	80042d0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b10      	cmp	r3, #16
 800430e:	d103      	bne.n	8004318 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2210      	movs	r2, #16
 8004316:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff f911 	bl	8003548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004326:	e00b      	b.n	8004340 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fc faed 	bl	8000908 <HAL_UART_RxCpltCallback>
}
 800432e:	e007      	b.n	8004340 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0208 	orr.w	r2, r2, #8
 800433e:	619a      	str	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	3758      	adds	r7, #88	; 0x58
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <siprintf>:
 8004348:	b40e      	push	{r1, r2, r3}
 800434a:	b500      	push	{lr}
 800434c:	b09c      	sub	sp, #112	; 0x70
 800434e:	ab1d      	add	r3, sp, #116	; 0x74
 8004350:	9002      	str	r0, [sp, #8]
 8004352:	9006      	str	r0, [sp, #24]
 8004354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004358:	4809      	ldr	r0, [pc, #36]	; (8004380 <siprintf+0x38>)
 800435a:	9107      	str	r1, [sp, #28]
 800435c:	9104      	str	r1, [sp, #16]
 800435e:	4909      	ldr	r1, [pc, #36]	; (8004384 <siprintf+0x3c>)
 8004360:	f853 2b04 	ldr.w	r2, [r3], #4
 8004364:	9105      	str	r1, [sp, #20]
 8004366:	6800      	ldr	r0, [r0, #0]
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	a902      	add	r1, sp, #8
 800436c:	f000 f9ae 	bl	80046cc <_svfiprintf_r>
 8004370:	9b02      	ldr	r3, [sp, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	b01c      	add	sp, #112	; 0x70
 8004378:	f85d eb04 	ldr.w	lr, [sp], #4
 800437c:	b003      	add	sp, #12
 800437e:	4770      	bx	lr
 8004380:	20000068 	.word	0x20000068
 8004384:	ffff0208 	.word	0xffff0208

08004388 <memset>:
 8004388:	4402      	add	r2, r0
 800438a:	4603      	mov	r3, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <strncpy>:
 8004398:	b510      	push	{r4, lr}
 800439a:	3901      	subs	r1, #1
 800439c:	4603      	mov	r3, r0
 800439e:	b132      	cbz	r2, 80043ae <strncpy+0x16>
 80043a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80043a4:	f803 4b01 	strb.w	r4, [r3], #1
 80043a8:	3a01      	subs	r2, #1
 80043aa:	2c00      	cmp	r4, #0
 80043ac:	d1f7      	bne.n	800439e <strncpy+0x6>
 80043ae:	441a      	add	r2, r3
 80043b0:	2100      	movs	r1, #0
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d100      	bne.n	80043b8 <strncpy+0x20>
 80043b6:	bd10      	pop	{r4, pc}
 80043b8:	f803 1b01 	strb.w	r1, [r3], #1
 80043bc:	e7f9      	b.n	80043b2 <strncpy+0x1a>
	...

080043c0 <__errno>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	; (80043c8 <__errno+0x8>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000068 	.word	0x20000068

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4d0d      	ldr	r5, [pc, #52]	; (8004404 <__libc_init_array+0x38>)
 80043d0:	4c0d      	ldr	r4, [pc, #52]	; (8004408 <__libc_init_array+0x3c>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	2600      	movs	r6, #0
 80043d8:	42a6      	cmp	r6, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	4d0b      	ldr	r5, [pc, #44]	; (800440c <__libc_init_array+0x40>)
 80043de:	4c0c      	ldr	r4, [pc, #48]	; (8004410 <__libc_init_array+0x44>)
 80043e0:	f000 fc72 	bl	8004cc8 <_init>
 80043e4:	1b64      	subs	r4, r4, r5
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	2600      	movs	r6, #0
 80043ea:	42a6      	cmp	r6, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f4:	4798      	blx	r3
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fe:	4798      	blx	r3
 8004400:	3601      	adds	r6, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	08004da0 	.word	0x08004da0
 8004408:	08004da0 	.word	0x08004da0
 800440c:	08004da0 	.word	0x08004da0
 8004410:	08004da4 	.word	0x08004da4

08004414 <__retarget_lock_acquire_recursive>:
 8004414:	4770      	bx	lr

08004416 <__retarget_lock_release_recursive>:
 8004416:	4770      	bx	lr

08004418 <strcpy>:
 8004418:	4603      	mov	r3, r0
 800441a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441e:	f803 2b01 	strb.w	r2, [r3], #1
 8004422:	2a00      	cmp	r2, #0
 8004424:	d1f9      	bne.n	800441a <strcpy+0x2>
 8004426:	4770      	bx	lr

08004428 <_free_r>:
 8004428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800442a:	2900      	cmp	r1, #0
 800442c:	d044      	beq.n	80044b8 <_free_r+0x90>
 800442e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f1a1 0404 	sub.w	r4, r1, #4
 800443a:	bfb8      	it	lt
 800443c:	18e4      	addlt	r4, r4, r3
 800443e:	f000 f8df 	bl	8004600 <__malloc_lock>
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <_free_r+0x94>)
 8004444:	9801      	ldr	r0, [sp, #4]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	b933      	cbnz	r3, 8004458 <_free_r+0x30>
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	b003      	add	sp, #12
 8004450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004454:	f000 b8da 	b.w	800460c <__malloc_unlock>
 8004458:	42a3      	cmp	r3, r4
 800445a:	d908      	bls.n	800446e <_free_r+0x46>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	1961      	adds	r1, r4, r5
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1949      	addeq	r1, r1, r5
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	e7ed      	b.n	800444a <_free_r+0x22>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x50>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x46>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1855      	adds	r5, r2, r1
 800447c:	42a5      	cmp	r5, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x70>
 8004480:	6824      	ldr	r4, [r4, #0]
 8004482:	4421      	add	r1, r4
 8004484:	1854      	adds	r4, r2, r1
 8004486:	42a3      	cmp	r3, r4
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1e0      	bne.n	800444e <_free_r+0x26>
 800448c:	681c      	ldr	r4, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	440c      	add	r4, r1
 8004494:	6014      	str	r4, [r2, #0]
 8004496:	e7da      	b.n	800444e <_free_r+0x26>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x78>
 800449a:	230c      	movs	r3, #12
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	e7d6      	b.n	800444e <_free_r+0x26>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf04      	itt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	bf04      	itt	eq
 80044b0:	1949      	addeq	r1, r1, r5
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7ca      	b.n	800444e <_free_r+0x26>
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	200003c0 	.word	0x200003c0

080044c0 <sbrk_aligned>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0e      	ldr	r6, [pc, #56]	; (80044fc <sbrk_aligned+0x3c>)
 80044c4:	460c      	mov	r4, r1
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	4605      	mov	r5, r0
 80044ca:	b911      	cbnz	r1, 80044d2 <sbrk_aligned+0x12>
 80044cc:	f000 fba6 	bl	8004c1c <_sbrk_r>
 80044d0:	6030      	str	r0, [r6, #0]
 80044d2:	4621      	mov	r1, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 fba1 	bl	8004c1c <_sbrk_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d00a      	beq.n	80044f4 <sbrk_aligned+0x34>
 80044de:	1cc4      	adds	r4, r0, #3
 80044e0:	f024 0403 	bic.w	r4, r4, #3
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d007      	beq.n	80044f8 <sbrk_aligned+0x38>
 80044e8:	1a21      	subs	r1, r4, r0
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 fb96 	bl	8004c1c <_sbrk_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d101      	bne.n	80044f8 <sbrk_aligned+0x38>
 80044f4:	f04f 34ff 	mov.w	r4, #4294967295
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	200003c4 	.word	0x200003c4

08004500 <_malloc_r>:
 8004500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004504:	1ccd      	adds	r5, r1, #3
 8004506:	f025 0503 	bic.w	r5, r5, #3
 800450a:	3508      	adds	r5, #8
 800450c:	2d0c      	cmp	r5, #12
 800450e:	bf38      	it	cc
 8004510:	250c      	movcc	r5, #12
 8004512:	2d00      	cmp	r5, #0
 8004514:	4607      	mov	r7, r0
 8004516:	db01      	blt.n	800451c <_malloc_r+0x1c>
 8004518:	42a9      	cmp	r1, r5
 800451a:	d905      	bls.n	8004528 <_malloc_r+0x28>
 800451c:	230c      	movs	r3, #12
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	2600      	movs	r6, #0
 8004522:	4630      	mov	r0, r6
 8004524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004528:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045fc <_malloc_r+0xfc>
 800452c:	f000 f868 	bl	8004600 <__malloc_lock>
 8004530:	f8d8 3000 	ldr.w	r3, [r8]
 8004534:	461c      	mov	r4, r3
 8004536:	bb5c      	cbnz	r4, 8004590 <_malloc_r+0x90>
 8004538:	4629      	mov	r1, r5
 800453a:	4638      	mov	r0, r7
 800453c:	f7ff ffc0 	bl	80044c0 <sbrk_aligned>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	4604      	mov	r4, r0
 8004544:	d155      	bne.n	80045f2 <_malloc_r+0xf2>
 8004546:	f8d8 4000 	ldr.w	r4, [r8]
 800454a:	4626      	mov	r6, r4
 800454c:	2e00      	cmp	r6, #0
 800454e:	d145      	bne.n	80045dc <_malloc_r+0xdc>
 8004550:	2c00      	cmp	r4, #0
 8004552:	d048      	beq.n	80045e6 <_malloc_r+0xe6>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	4631      	mov	r1, r6
 8004558:	4638      	mov	r0, r7
 800455a:	eb04 0903 	add.w	r9, r4, r3
 800455e:	f000 fb5d 	bl	8004c1c <_sbrk_r>
 8004562:	4581      	cmp	r9, r0
 8004564:	d13f      	bne.n	80045e6 <_malloc_r+0xe6>
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	1a6d      	subs	r5, r5, r1
 800456a:	4629      	mov	r1, r5
 800456c:	4638      	mov	r0, r7
 800456e:	f7ff ffa7 	bl	80044c0 <sbrk_aligned>
 8004572:	3001      	adds	r0, #1
 8004574:	d037      	beq.n	80045e6 <_malloc_r+0xe6>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	442b      	add	r3, r5
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	f8d8 3000 	ldr.w	r3, [r8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d038      	beq.n	80045f6 <_malloc_r+0xf6>
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	42a2      	cmp	r2, r4
 8004588:	d12b      	bne.n	80045e2 <_malloc_r+0xe2>
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	e00f      	b.n	80045b0 <_malloc_r+0xb0>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	1b52      	subs	r2, r2, r5
 8004594:	d41f      	bmi.n	80045d6 <_malloc_r+0xd6>
 8004596:	2a0b      	cmp	r2, #11
 8004598:	d917      	bls.n	80045ca <_malloc_r+0xca>
 800459a:	1961      	adds	r1, r4, r5
 800459c:	42a3      	cmp	r3, r4
 800459e:	6025      	str	r5, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	6059      	strne	r1, [r3, #4]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	bf08      	it	eq
 80045a8:	f8c8 1000 	streq.w	r1, [r8]
 80045ac:	5162      	str	r2, [r4, r5]
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	4638      	mov	r0, r7
 80045b2:	f104 060b 	add.w	r6, r4, #11
 80045b6:	f000 f829 	bl	800460c <__malloc_unlock>
 80045ba:	f026 0607 	bic.w	r6, r6, #7
 80045be:	1d23      	adds	r3, r4, #4
 80045c0:	1af2      	subs	r2, r6, r3
 80045c2:	d0ae      	beq.n	8004522 <_malloc_r+0x22>
 80045c4:	1b9b      	subs	r3, r3, r6
 80045c6:	50a3      	str	r3, [r4, r2]
 80045c8:	e7ab      	b.n	8004522 <_malloc_r+0x22>
 80045ca:	42a3      	cmp	r3, r4
 80045cc:	6862      	ldr	r2, [r4, #4]
 80045ce:	d1dd      	bne.n	800458c <_malloc_r+0x8c>
 80045d0:	f8c8 2000 	str.w	r2, [r8]
 80045d4:	e7ec      	b.n	80045b0 <_malloc_r+0xb0>
 80045d6:	4623      	mov	r3, r4
 80045d8:	6864      	ldr	r4, [r4, #4]
 80045da:	e7ac      	b.n	8004536 <_malloc_r+0x36>
 80045dc:	4634      	mov	r4, r6
 80045de:	6876      	ldr	r6, [r6, #4]
 80045e0:	e7b4      	b.n	800454c <_malloc_r+0x4c>
 80045e2:	4613      	mov	r3, r2
 80045e4:	e7cc      	b.n	8004580 <_malloc_r+0x80>
 80045e6:	230c      	movs	r3, #12
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	4638      	mov	r0, r7
 80045ec:	f000 f80e 	bl	800460c <__malloc_unlock>
 80045f0:	e797      	b.n	8004522 <_malloc_r+0x22>
 80045f2:	6025      	str	r5, [r4, #0]
 80045f4:	e7dc      	b.n	80045b0 <_malloc_r+0xb0>
 80045f6:	605b      	str	r3, [r3, #4]
 80045f8:	deff      	udf	#255	; 0xff
 80045fa:	bf00      	nop
 80045fc:	200003c0 	.word	0x200003c0

08004600 <__malloc_lock>:
 8004600:	4801      	ldr	r0, [pc, #4]	; (8004608 <__malloc_lock+0x8>)
 8004602:	f7ff bf07 	b.w	8004414 <__retarget_lock_acquire_recursive>
 8004606:	bf00      	nop
 8004608:	200003bc 	.word	0x200003bc

0800460c <__malloc_unlock>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__malloc_unlock+0x8>)
 800460e:	f7ff bf02 	b.w	8004416 <__retarget_lock_release_recursive>
 8004612:	bf00      	nop
 8004614:	200003bc 	.word	0x200003bc

08004618 <__ssputs_r>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	688e      	ldr	r6, [r1, #8]
 800461e:	461f      	mov	r7, r3
 8004620:	42be      	cmp	r6, r7
 8004622:	680b      	ldr	r3, [r1, #0]
 8004624:	4682      	mov	sl, r0
 8004626:	460c      	mov	r4, r1
 8004628:	4690      	mov	r8, r2
 800462a:	d82c      	bhi.n	8004686 <__ssputs_r+0x6e>
 800462c:	898a      	ldrh	r2, [r1, #12]
 800462e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004632:	d026      	beq.n	8004682 <__ssputs_r+0x6a>
 8004634:	6965      	ldr	r5, [r4, #20]
 8004636:	6909      	ldr	r1, [r1, #16]
 8004638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800463c:	eba3 0901 	sub.w	r9, r3, r1
 8004640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004644:	1c7b      	adds	r3, r7, #1
 8004646:	444b      	add	r3, r9
 8004648:	106d      	asrs	r5, r5, #1
 800464a:	429d      	cmp	r5, r3
 800464c:	bf38      	it	cc
 800464e:	461d      	movcc	r5, r3
 8004650:	0553      	lsls	r3, r2, #21
 8004652:	d527      	bpl.n	80046a4 <__ssputs_r+0x8c>
 8004654:	4629      	mov	r1, r5
 8004656:	f7ff ff53 	bl	8004500 <_malloc_r>
 800465a:	4606      	mov	r6, r0
 800465c:	b360      	cbz	r0, 80046b8 <__ssputs_r+0xa0>
 800465e:	6921      	ldr	r1, [r4, #16]
 8004660:	464a      	mov	r2, r9
 8004662:	f000 faeb 	bl	8004c3c <memcpy>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	6126      	str	r6, [r4, #16]
 8004674:	6165      	str	r5, [r4, #20]
 8004676:	444e      	add	r6, r9
 8004678:	eba5 0509 	sub.w	r5, r5, r9
 800467c:	6026      	str	r6, [r4, #0]
 800467e:	60a5      	str	r5, [r4, #8]
 8004680:	463e      	mov	r6, r7
 8004682:	42be      	cmp	r6, r7
 8004684:	d900      	bls.n	8004688 <__ssputs_r+0x70>
 8004686:	463e      	mov	r6, r7
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	4632      	mov	r2, r6
 800468c:	4641      	mov	r1, r8
 800468e:	f000 faab 	bl	8004be8 <memmove>
 8004692:	68a3      	ldr	r3, [r4, #8]
 8004694:	1b9b      	subs	r3, r3, r6
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	4433      	add	r3, r6
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	2000      	movs	r0, #0
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	462a      	mov	r2, r5
 80046a6:	f000 fad7 	bl	8004c58 <_realloc_r>
 80046aa:	4606      	mov	r6, r0
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d1e0      	bne.n	8004672 <__ssputs_r+0x5a>
 80046b0:	6921      	ldr	r1, [r4, #16]
 80046b2:	4650      	mov	r0, sl
 80046b4:	f7ff feb8 	bl	8004428 <_free_r>
 80046b8:	230c      	movs	r3, #12
 80046ba:	f8ca 3000 	str.w	r3, [sl]
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ca:	e7e9      	b.n	80046a0 <__ssputs_r+0x88>

080046cc <_svfiprintf_r>:
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	4698      	mov	r8, r3
 80046d2:	898b      	ldrh	r3, [r1, #12]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	b09d      	sub	sp, #116	; 0x74
 80046d8:	4607      	mov	r7, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	4614      	mov	r4, r2
 80046de:	d50e      	bpl.n	80046fe <_svfiprintf_r+0x32>
 80046e0:	690b      	ldr	r3, [r1, #16]
 80046e2:	b963      	cbnz	r3, 80046fe <_svfiprintf_r+0x32>
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	f7ff ff0b 	bl	8004500 <_malloc_r>
 80046ea:	6028      	str	r0, [r5, #0]
 80046ec:	6128      	str	r0, [r5, #16]
 80046ee:	b920      	cbnz	r0, 80046fa <_svfiprintf_r+0x2e>
 80046f0:	230c      	movs	r3, #12
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e0d0      	b.n	800489c <_svfiprintf_r+0x1d0>
 80046fa:	2340      	movs	r3, #64	; 0x40
 80046fc:	616b      	str	r3, [r5, #20]
 80046fe:	2300      	movs	r3, #0
 8004700:	9309      	str	r3, [sp, #36]	; 0x24
 8004702:	2320      	movs	r3, #32
 8004704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004708:	f8cd 800c 	str.w	r8, [sp, #12]
 800470c:	2330      	movs	r3, #48	; 0x30
 800470e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048b4 <_svfiprintf_r+0x1e8>
 8004712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004716:	f04f 0901 	mov.w	r9, #1
 800471a:	4623      	mov	r3, r4
 800471c:	469a      	mov	sl, r3
 800471e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004722:	b10a      	cbz	r2, 8004728 <_svfiprintf_r+0x5c>
 8004724:	2a25      	cmp	r2, #37	; 0x25
 8004726:	d1f9      	bne.n	800471c <_svfiprintf_r+0x50>
 8004728:	ebba 0b04 	subs.w	fp, sl, r4
 800472c:	d00b      	beq.n	8004746 <_svfiprintf_r+0x7a>
 800472e:	465b      	mov	r3, fp
 8004730:	4622      	mov	r2, r4
 8004732:	4629      	mov	r1, r5
 8004734:	4638      	mov	r0, r7
 8004736:	f7ff ff6f 	bl	8004618 <__ssputs_r>
 800473a:	3001      	adds	r0, #1
 800473c:	f000 80a9 	beq.w	8004892 <_svfiprintf_r+0x1c6>
 8004740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004742:	445a      	add	r2, fp
 8004744:	9209      	str	r2, [sp, #36]	; 0x24
 8004746:	f89a 3000 	ldrb.w	r3, [sl]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80a1 	beq.w	8004892 <_svfiprintf_r+0x1c6>
 8004750:	2300      	movs	r3, #0
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475a:	f10a 0a01 	add.w	sl, sl, #1
 800475e:	9304      	str	r3, [sp, #16]
 8004760:	9307      	str	r3, [sp, #28]
 8004762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004766:	931a      	str	r3, [sp, #104]	; 0x68
 8004768:	4654      	mov	r4, sl
 800476a:	2205      	movs	r2, #5
 800476c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004770:	4850      	ldr	r0, [pc, #320]	; (80048b4 <_svfiprintf_r+0x1e8>)
 8004772:	f7fb fd6d 	bl	8000250 <memchr>
 8004776:	9a04      	ldr	r2, [sp, #16]
 8004778:	b9d8      	cbnz	r0, 80047b2 <_svfiprintf_r+0xe6>
 800477a:	06d0      	lsls	r0, r2, #27
 800477c:	bf44      	itt	mi
 800477e:	2320      	movmi	r3, #32
 8004780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004784:	0711      	lsls	r1, r2, #28
 8004786:	bf44      	itt	mi
 8004788:	232b      	movmi	r3, #43	; 0x2b
 800478a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800478e:	f89a 3000 	ldrb.w	r3, [sl]
 8004792:	2b2a      	cmp	r3, #42	; 0x2a
 8004794:	d015      	beq.n	80047c2 <_svfiprintf_r+0xf6>
 8004796:	9a07      	ldr	r2, [sp, #28]
 8004798:	4654      	mov	r4, sl
 800479a:	2000      	movs	r0, #0
 800479c:	f04f 0c0a 	mov.w	ip, #10
 80047a0:	4621      	mov	r1, r4
 80047a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a6:	3b30      	subs	r3, #48	; 0x30
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	d94d      	bls.n	8004848 <_svfiprintf_r+0x17c>
 80047ac:	b1b0      	cbz	r0, 80047dc <_svfiprintf_r+0x110>
 80047ae:	9207      	str	r2, [sp, #28]
 80047b0:	e014      	b.n	80047dc <_svfiprintf_r+0x110>
 80047b2:	eba0 0308 	sub.w	r3, r0, r8
 80047b6:	fa09 f303 	lsl.w	r3, r9, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	9304      	str	r3, [sp, #16]
 80047be:	46a2      	mov	sl, r4
 80047c0:	e7d2      	b.n	8004768 <_svfiprintf_r+0x9c>
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	1d19      	adds	r1, r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	9103      	str	r1, [sp, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bfbb      	ittet	lt
 80047ce:	425b      	neglt	r3, r3
 80047d0:	f042 0202 	orrlt.w	r2, r2, #2
 80047d4:	9307      	strge	r3, [sp, #28]
 80047d6:	9307      	strlt	r3, [sp, #28]
 80047d8:	bfb8      	it	lt
 80047da:	9204      	strlt	r2, [sp, #16]
 80047dc:	7823      	ldrb	r3, [r4, #0]
 80047de:	2b2e      	cmp	r3, #46	; 0x2e
 80047e0:	d10c      	bne.n	80047fc <_svfiprintf_r+0x130>
 80047e2:	7863      	ldrb	r3, [r4, #1]
 80047e4:	2b2a      	cmp	r3, #42	; 0x2a
 80047e6:	d134      	bne.n	8004852 <_svfiprintf_r+0x186>
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	9203      	str	r2, [sp, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bfb8      	it	lt
 80047f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f8:	3402      	adds	r4, #2
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048c4 <_svfiprintf_r+0x1f8>
 8004800:	7821      	ldrb	r1, [r4, #0]
 8004802:	2203      	movs	r2, #3
 8004804:	4650      	mov	r0, sl
 8004806:	f7fb fd23 	bl	8000250 <memchr>
 800480a:	b138      	cbz	r0, 800481c <_svfiprintf_r+0x150>
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	eba0 000a 	sub.w	r0, r0, sl
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	4082      	lsls	r2, r0
 8004816:	4313      	orrs	r3, r2
 8004818:	3401      	adds	r4, #1
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004820:	4825      	ldr	r0, [pc, #148]	; (80048b8 <_svfiprintf_r+0x1ec>)
 8004822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004826:	2206      	movs	r2, #6
 8004828:	f7fb fd12 	bl	8000250 <memchr>
 800482c:	2800      	cmp	r0, #0
 800482e:	d038      	beq.n	80048a2 <_svfiprintf_r+0x1d6>
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <_svfiprintf_r+0x1f0>)
 8004832:	bb1b      	cbnz	r3, 800487c <_svfiprintf_r+0x1b0>
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	3307      	adds	r3, #7
 8004838:	f023 0307 	bic.w	r3, r3, #7
 800483c:	3308      	adds	r3, #8
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004842:	4433      	add	r3, r6
 8004844:	9309      	str	r3, [sp, #36]	; 0x24
 8004846:	e768      	b.n	800471a <_svfiprintf_r+0x4e>
 8004848:	fb0c 3202 	mla	r2, ip, r2, r3
 800484c:	460c      	mov	r4, r1
 800484e:	2001      	movs	r0, #1
 8004850:	e7a6      	b.n	80047a0 <_svfiprintf_r+0xd4>
 8004852:	2300      	movs	r3, #0
 8004854:	3401      	adds	r4, #1
 8004856:	9305      	str	r3, [sp, #20]
 8004858:	4619      	mov	r1, r3
 800485a:	f04f 0c0a 	mov.w	ip, #10
 800485e:	4620      	mov	r0, r4
 8004860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004864:	3a30      	subs	r2, #48	; 0x30
 8004866:	2a09      	cmp	r2, #9
 8004868:	d903      	bls.n	8004872 <_svfiprintf_r+0x1a6>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0c6      	beq.n	80047fc <_svfiprintf_r+0x130>
 800486e:	9105      	str	r1, [sp, #20]
 8004870:	e7c4      	b.n	80047fc <_svfiprintf_r+0x130>
 8004872:	fb0c 2101 	mla	r1, ip, r1, r2
 8004876:	4604      	mov	r4, r0
 8004878:	2301      	movs	r3, #1
 800487a:	e7f0      	b.n	800485e <_svfiprintf_r+0x192>
 800487c:	ab03      	add	r3, sp, #12
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	462a      	mov	r2, r5
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <_svfiprintf_r+0x1f4>)
 8004884:	a904      	add	r1, sp, #16
 8004886:	4638      	mov	r0, r7
 8004888:	f3af 8000 	nop.w
 800488c:	1c42      	adds	r2, r0, #1
 800488e:	4606      	mov	r6, r0
 8004890:	d1d6      	bne.n	8004840 <_svfiprintf_r+0x174>
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	065b      	lsls	r3, r3, #25
 8004896:	f53f af2d 	bmi.w	80046f4 <_svfiprintf_r+0x28>
 800489a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800489c:	b01d      	add	sp, #116	; 0x74
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a2:	ab03      	add	r3, sp, #12
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	462a      	mov	r2, r5
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <_svfiprintf_r+0x1f4>)
 80048aa:	a904      	add	r1, sp, #16
 80048ac:	4638      	mov	r0, r7
 80048ae:	f000 f879 	bl	80049a4 <_printf_i>
 80048b2:	e7eb      	b.n	800488c <_svfiprintf_r+0x1c0>
 80048b4:	08004d64 	.word	0x08004d64
 80048b8:	08004d6e 	.word	0x08004d6e
 80048bc:	00000000 	.word	0x00000000
 80048c0:	08004619 	.word	0x08004619
 80048c4:	08004d6a 	.word	0x08004d6a

080048c8 <_printf_common>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	4616      	mov	r6, r2
 80048ce:	4699      	mov	r9, r3
 80048d0:	688a      	ldr	r2, [r1, #8]
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d8:	4293      	cmp	r3, r2
 80048da:	bfb8      	it	lt
 80048dc:	4613      	movlt	r3, r2
 80048de:	6033      	str	r3, [r6, #0]
 80048e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e4:	4607      	mov	r7, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	b10a      	cbz	r2, 80048ee <_printf_common+0x26>
 80048ea:	3301      	adds	r3, #1
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	0699      	lsls	r1, r3, #26
 80048f2:	bf42      	ittt	mi
 80048f4:	6833      	ldrmi	r3, [r6, #0]
 80048f6:	3302      	addmi	r3, #2
 80048f8:	6033      	strmi	r3, [r6, #0]
 80048fa:	6825      	ldr	r5, [r4, #0]
 80048fc:	f015 0506 	ands.w	r5, r5, #6
 8004900:	d106      	bne.n	8004910 <_printf_common+0x48>
 8004902:	f104 0a19 	add.w	sl, r4, #25
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	6832      	ldr	r2, [r6, #0]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	42ab      	cmp	r3, r5
 800490e:	dc26      	bgt.n	800495e <_printf_common+0x96>
 8004910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004914:	1e13      	subs	r3, r2, #0
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	bf18      	it	ne
 800491a:	2301      	movne	r3, #1
 800491c:	0692      	lsls	r2, r2, #26
 800491e:	d42b      	bmi.n	8004978 <_printf_common+0xb0>
 8004920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004924:	4649      	mov	r1, r9
 8004926:	4638      	mov	r0, r7
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d01e      	beq.n	800496c <_printf_common+0xa4>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	6922      	ldr	r2, [r4, #16]
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	2b04      	cmp	r3, #4
 8004938:	bf02      	ittt	eq
 800493a:	68e5      	ldreq	r5, [r4, #12]
 800493c:	6833      	ldreq	r3, [r6, #0]
 800493e:	1aed      	subeq	r5, r5, r3
 8004940:	68a3      	ldr	r3, [r4, #8]
 8004942:	bf0c      	ite	eq
 8004944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004948:	2500      	movne	r5, #0
 800494a:	4293      	cmp	r3, r2
 800494c:	bfc4      	itt	gt
 800494e:	1a9b      	subgt	r3, r3, r2
 8004950:	18ed      	addgt	r5, r5, r3
 8004952:	2600      	movs	r6, #0
 8004954:	341a      	adds	r4, #26
 8004956:	42b5      	cmp	r5, r6
 8004958:	d11a      	bne.n	8004990 <_printf_common+0xc8>
 800495a:	2000      	movs	r0, #0
 800495c:	e008      	b.n	8004970 <_printf_common+0xa8>
 800495e:	2301      	movs	r3, #1
 8004960:	4652      	mov	r2, sl
 8004962:	4649      	mov	r1, r9
 8004964:	4638      	mov	r0, r7
 8004966:	47c0      	blx	r8
 8004968:	3001      	adds	r0, #1
 800496a:	d103      	bne.n	8004974 <_printf_common+0xac>
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	3501      	adds	r5, #1
 8004976:	e7c6      	b.n	8004906 <_printf_common+0x3e>
 8004978:	18e1      	adds	r1, r4, r3
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	2030      	movs	r0, #48	; 0x30
 800497e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004982:	4422      	add	r2, r4
 8004984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800498c:	3302      	adds	r3, #2
 800498e:	e7c7      	b.n	8004920 <_printf_common+0x58>
 8004990:	2301      	movs	r3, #1
 8004992:	4622      	mov	r2, r4
 8004994:	4649      	mov	r1, r9
 8004996:	4638      	mov	r0, r7
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d0e6      	beq.n	800496c <_printf_common+0xa4>
 800499e:	3601      	adds	r6, #1
 80049a0:	e7d9      	b.n	8004956 <_printf_common+0x8e>
	...

080049a4 <_printf_i>:
 80049a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a8:	7e0f      	ldrb	r7, [r1, #24]
 80049aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ac:	2f78      	cmp	r7, #120	; 0x78
 80049ae:	4691      	mov	r9, r2
 80049b0:	4680      	mov	r8, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	469a      	mov	sl, r3
 80049b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ba:	d807      	bhi.n	80049cc <_printf_i+0x28>
 80049bc:	2f62      	cmp	r7, #98	; 0x62
 80049be:	d80a      	bhi.n	80049d6 <_printf_i+0x32>
 80049c0:	2f00      	cmp	r7, #0
 80049c2:	f000 80d4 	beq.w	8004b6e <_printf_i+0x1ca>
 80049c6:	2f58      	cmp	r7, #88	; 0x58
 80049c8:	f000 80c0 	beq.w	8004b4c <_printf_i+0x1a8>
 80049cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d4:	e03a      	b.n	8004a4c <_printf_i+0xa8>
 80049d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049da:	2b15      	cmp	r3, #21
 80049dc:	d8f6      	bhi.n	80049cc <_printf_i+0x28>
 80049de:	a101      	add	r1, pc, #4	; (adr r1, 80049e4 <_printf_i+0x40>)
 80049e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e4:	08004a3d 	.word	0x08004a3d
 80049e8:	08004a51 	.word	0x08004a51
 80049ec:	080049cd 	.word	0x080049cd
 80049f0:	080049cd 	.word	0x080049cd
 80049f4:	080049cd 	.word	0x080049cd
 80049f8:	080049cd 	.word	0x080049cd
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	080049cd 	.word	0x080049cd
 8004a04:	080049cd 	.word	0x080049cd
 8004a08:	080049cd 	.word	0x080049cd
 8004a0c:	080049cd 	.word	0x080049cd
 8004a10:	08004b55 	.word	0x08004b55
 8004a14:	08004a7d 	.word	0x08004a7d
 8004a18:	08004b0f 	.word	0x08004b0f
 8004a1c:	080049cd 	.word	0x080049cd
 8004a20:	080049cd 	.word	0x080049cd
 8004a24:	08004b77 	.word	0x08004b77
 8004a28:	080049cd 	.word	0x080049cd
 8004a2c:	08004a7d 	.word	0x08004a7d
 8004a30:	080049cd 	.word	0x080049cd
 8004a34:	080049cd 	.word	0x080049cd
 8004a38:	08004b17 	.word	0x08004b17
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	602a      	str	r2, [r5, #0]
 8004a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e09f      	b.n	8004b90 <_printf_i+0x1ec>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	0607      	lsls	r7, r0, #24
 8004a56:	f103 0104 	add.w	r1, r3, #4
 8004a5a:	6029      	str	r1, [r5, #0]
 8004a5c:	d501      	bpl.n	8004a62 <_printf_i+0xbe>
 8004a5e:	681e      	ldr	r6, [r3, #0]
 8004a60:	e003      	b.n	8004a6a <_printf_i+0xc6>
 8004a62:	0646      	lsls	r6, r0, #25
 8004a64:	d5fb      	bpl.n	8004a5e <_printf_i+0xba>
 8004a66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	da03      	bge.n	8004a76 <_printf_i+0xd2>
 8004a6e:	232d      	movs	r3, #45	; 0x2d
 8004a70:	4276      	negs	r6, r6
 8004a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a76:	485a      	ldr	r0, [pc, #360]	; (8004be0 <_printf_i+0x23c>)
 8004a78:	230a      	movs	r3, #10
 8004a7a:	e012      	b.n	8004aa2 <_printf_i+0xfe>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	1d19      	adds	r1, r3, #4
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	0605      	lsls	r5, r0, #24
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0xe8>
 8004a88:	681e      	ldr	r6, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0xee>
 8004a8c:	0641      	lsls	r1, r0, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0xe4>
 8004a90:	881e      	ldrh	r6, [r3, #0]
 8004a92:	4853      	ldr	r0, [pc, #332]	; (8004be0 <_printf_i+0x23c>)
 8004a94:	2f6f      	cmp	r7, #111	; 0x6f
 8004a96:	bf0c      	ite	eq
 8004a98:	2308      	moveq	r3, #8
 8004a9a:	230a      	movne	r3, #10
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aa2:	6865      	ldr	r5, [r4, #4]
 8004aa4:	60a5      	str	r5, [r4, #8]
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	bfa2      	ittt	ge
 8004aaa:	6821      	ldrge	r1, [r4, #0]
 8004aac:	f021 0104 	bicge.w	r1, r1, #4
 8004ab0:	6021      	strge	r1, [r4, #0]
 8004ab2:	b90e      	cbnz	r6, 8004ab8 <_printf_i+0x114>
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	d04b      	beq.n	8004b50 <_printf_i+0x1ac>
 8004ab8:	4615      	mov	r5, r2
 8004aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004abe:	fb03 6711 	mls	r7, r3, r1, r6
 8004ac2:	5dc7      	ldrb	r7, [r0, r7]
 8004ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ac8:	4637      	mov	r7, r6
 8004aca:	42bb      	cmp	r3, r7
 8004acc:	460e      	mov	r6, r1
 8004ace:	d9f4      	bls.n	8004aba <_printf_i+0x116>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d10b      	bne.n	8004aec <_printf_i+0x148>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	07de      	lsls	r6, r3, #31
 8004ad8:	d508      	bpl.n	8004aec <_printf_i+0x148>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6861      	ldr	r1, [r4, #4]
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	bfde      	ittt	le
 8004ae2:	2330      	movle	r3, #48	; 0x30
 8004ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aec:	1b52      	subs	r2, r2, r5
 8004aee:	6122      	str	r2, [r4, #16]
 8004af0:	f8cd a000 	str.w	sl, [sp]
 8004af4:	464b      	mov	r3, r9
 8004af6:	aa03      	add	r2, sp, #12
 8004af8:	4621      	mov	r1, r4
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fee4 	bl	80048c8 <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d14a      	bne.n	8004b9a <_printf_i+0x1f6>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	b004      	add	sp, #16
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	4833      	ldr	r0, [pc, #204]	; (8004be4 <_printf_i+0x240>)
 8004b18:	2778      	movs	r7, #120	; 0x78
 8004b1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6829      	ldr	r1, [r5, #0]
 8004b22:	061f      	lsls	r7, r3, #24
 8004b24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b28:	d402      	bmi.n	8004b30 <_printf_i+0x18c>
 8004b2a:	065f      	lsls	r7, r3, #25
 8004b2c:	bf48      	it	mi
 8004b2e:	b2b6      	uxthmi	r6, r6
 8004b30:	07df      	lsls	r7, r3, #31
 8004b32:	bf48      	it	mi
 8004b34:	f043 0320 	orrmi.w	r3, r3, #32
 8004b38:	6029      	str	r1, [r5, #0]
 8004b3a:	bf48      	it	mi
 8004b3c:	6023      	strmi	r3, [r4, #0]
 8004b3e:	b91e      	cbnz	r6, 8004b48 <_printf_i+0x1a4>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	f023 0320 	bic.w	r3, r3, #32
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	2310      	movs	r3, #16
 8004b4a:	e7a7      	b.n	8004a9c <_printf_i+0xf8>
 8004b4c:	4824      	ldr	r0, [pc, #144]	; (8004be0 <_printf_i+0x23c>)
 8004b4e:	e7e4      	b.n	8004b1a <_printf_i+0x176>
 8004b50:	4615      	mov	r5, r2
 8004b52:	e7bd      	b.n	8004ad0 <_printf_i+0x12c>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	6826      	ldr	r6, [r4, #0]
 8004b58:	6961      	ldr	r1, [r4, #20]
 8004b5a:	1d18      	adds	r0, r3, #4
 8004b5c:	6028      	str	r0, [r5, #0]
 8004b5e:	0635      	lsls	r5, r6, #24
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0x1c4>
 8004b64:	6019      	str	r1, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <_printf_i+0x1ca>
 8004b68:	0670      	lsls	r0, r6, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0x1c0>
 8004b6c:	8019      	strh	r1, [r3, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	4615      	mov	r5, r2
 8004b74:	e7bc      	b.n	8004af0 <_printf_i+0x14c>
 8004b76:	682b      	ldr	r3, [r5, #0]
 8004b78:	1d1a      	adds	r2, r3, #4
 8004b7a:	602a      	str	r2, [r5, #0]
 8004b7c:	681d      	ldr	r5, [r3, #0]
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7fb fb64 	bl	8000250 <memchr>
 8004b88:	b108      	cbz	r0, 8004b8e <_printf_i+0x1ea>
 8004b8a:	1b40      	subs	r0, r0, r5
 8004b8c:	6060      	str	r0, [r4, #4]
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	2300      	movs	r3, #0
 8004b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b98:	e7aa      	b.n	8004af0 <_printf_i+0x14c>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	47d0      	blx	sl
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d0ad      	beq.n	8004b04 <_printf_i+0x160>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d413      	bmi.n	8004bd6 <_printf_i+0x232>
 8004bae:	68e0      	ldr	r0, [r4, #12]
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	bfb8      	it	lt
 8004bb6:	4618      	movlt	r0, r3
 8004bb8:	e7a6      	b.n	8004b08 <_printf_i+0x164>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	47d0      	blx	sl
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d09d      	beq.n	8004b04 <_printf_i+0x160>
 8004bc8:	3501      	adds	r5, #1
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	9903      	ldr	r1, [sp, #12]
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	dcf2      	bgt.n	8004bba <_printf_i+0x216>
 8004bd4:	e7eb      	b.n	8004bae <_printf_i+0x20a>
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	f104 0619 	add.w	r6, r4, #25
 8004bdc:	e7f5      	b.n	8004bca <_printf_i+0x226>
 8004bde:	bf00      	nop
 8004be0:	08004d75 	.word	0x08004d75
 8004be4:	08004d86 	.word	0x08004d86

08004be8 <memmove>:
 8004be8:	4288      	cmp	r0, r1
 8004bea:	b510      	push	{r4, lr}
 8004bec:	eb01 0402 	add.w	r4, r1, r2
 8004bf0:	d902      	bls.n	8004bf8 <memmove+0x10>
 8004bf2:	4284      	cmp	r4, r0
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	d807      	bhi.n	8004c08 <memmove+0x20>
 8004bf8:	1e43      	subs	r3, r0, #1
 8004bfa:	42a1      	cmp	r1, r4
 8004bfc:	d008      	beq.n	8004c10 <memmove+0x28>
 8004bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c06:	e7f8      	b.n	8004bfa <memmove+0x12>
 8004c08:	4402      	add	r2, r0
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	428a      	cmp	r2, r1
 8004c0e:	d100      	bne.n	8004c12 <memmove+0x2a>
 8004c10:	bd10      	pop	{r4, pc}
 8004c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1a:	e7f7      	b.n	8004c0c <memmove+0x24>

08004c1c <_sbrk_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d06      	ldr	r5, [pc, #24]	; (8004c38 <_sbrk_r+0x1c>)
 8004c20:	2300      	movs	r3, #0
 8004c22:	4604      	mov	r4, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	f7fb ffe2 	bl	8000bf0 <_sbrk>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_sbrk_r+0x1a>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_sbrk_r+0x1a>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	200003b8 	.word	0x200003b8

08004c3c <memcpy>:
 8004c3c:	440a      	add	r2, r1
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c44:	d100      	bne.n	8004c48 <memcpy+0xc>
 8004c46:	4770      	bx	lr
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c52:	4291      	cmp	r1, r2
 8004c54:	d1f9      	bne.n	8004c4a <memcpy+0xe>
 8004c56:	bd10      	pop	{r4, pc}

08004c58 <_realloc_r>:
 8004c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	4614      	mov	r4, r2
 8004c60:	460e      	mov	r6, r1
 8004c62:	b921      	cbnz	r1, 8004c6e <_realloc_r+0x16>
 8004c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f7ff bc49 	b.w	8004500 <_malloc_r>
 8004c6e:	b92a      	cbnz	r2, 8004c7c <_realloc_r+0x24>
 8004c70:	f7ff fbda 	bl	8004428 <_free_r>
 8004c74:	4625      	mov	r5, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7c:	f000 f81b 	bl	8004cb6 <_malloc_usable_size_r>
 8004c80:	4284      	cmp	r4, r0
 8004c82:	4607      	mov	r7, r0
 8004c84:	d802      	bhi.n	8004c8c <_realloc_r+0x34>
 8004c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c8a:	d812      	bhi.n	8004cb2 <_realloc_r+0x5a>
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f7ff fc36 	bl	8004500 <_malloc_r>
 8004c94:	4605      	mov	r5, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0ed      	beq.n	8004c76 <_realloc_r+0x1e>
 8004c9a:	42bc      	cmp	r4, r7
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	bf28      	it	cs
 8004ca2:	463a      	movcs	r2, r7
 8004ca4:	f7ff ffca 	bl	8004c3c <memcpy>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7ff fbbc 	bl	8004428 <_free_r>
 8004cb0:	e7e1      	b.n	8004c76 <_realloc_r+0x1e>
 8004cb2:	4635      	mov	r5, r6
 8004cb4:	e7df      	b.n	8004c76 <_realloc_r+0x1e>

08004cb6 <_malloc_usable_size_r>:
 8004cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cba:	1f18      	subs	r0, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bfbc      	itt	lt
 8004cc0:	580b      	ldrlt	r3, [r1, r0]
 8004cc2:	18c0      	addlt	r0, r0, r3
 8004cc4:	4770      	bx	lr
	...

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
