
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b140  0800e1c8  0800e1c8  0001e1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019308  08019308  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08019308  08019308  00029308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019310  08019310  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019310  08019310  00029310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019314  08019314  00029314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08019318  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001e0  080194f8  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  080194f8  000305e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f068  00000000  00000000  00030251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048c0  00000000  00000000  0004f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00053b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e6  00000000  00000000  00055538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cc70  00000000  00000000  0005691e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024412  00000000  00000000  0008358e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108008  00000000  00000000  000a79a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e54  00000000  00000000  001af9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b77fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e1b0 	.word	0x0800e1b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800e1b0 	.word	0x0800e1b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <printOut>:
#include "Utilities/my_basic.h"

void printOut(const char *text)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET)
 80009dc:	bf00      	nop
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <printOut+0x34>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b40      	cmp	r3, #64	; 0x40
 80009ea:	d1f8      	bne.n	80009de <printOut+0xa>
	{
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fc77 	bl	80002e0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <printOut+0x34>)
 80009fc:	f008 fc64 	bl	80092c8 <HAL_UART_Transmit>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000040c 	.word	0x2000040c

08000a0c <printOutLine>:

void printOutLine(const char *text)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	printOut(text);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffdd 	bl	80009d4 <printOut>
	printOut("\r\n");
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <printOutLine+0x1c>)
 8000a1c:	f7ff ffda 	bl	80009d4 <printOut>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800e1c8 	.word	0x0800e1c8

08000a2c <delay>:

void delay(uint32_t delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f003 f907 	bl	8003c48 <HAL_Delay>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <AM2320_setCommand>:
}


// For AM2320
void AM2320_setCommand(uint8_t *cmdBuffer)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	cmdBuffer[0] = 0x03;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	cmdBuffer[2] = 0x04;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	2204      	movs	r2, #4
 8000a60:	701a      	strb	r2, [r3, #0]
	printOutLine("Set Sensor");
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <AM2320_setCommand+0x2c>)
 8000a64:	f7ff ffd2 	bl	8000a0c <printOutLine>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	0800e1cc 	.word	0x0800e1cc

08000a74 <AM2320_startSensor>:

void AM2320_startSensor(I2C_HandleTypeDef *hi2c, uint8_t *cmdBuffer, uint8_t *dataBuffer)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
	// Setting hi2c1: PB8, PB9 - use hi2c1
	const uint8_t SENSOR_ADDRESS = 0x5c<<1;
 8000a80:	23b8      	movs	r3, #184	; 0xb8
 8000a82:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS, cmdBuffer, 3, 200);
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	b299      	uxth	r1, r3
 8000a88:	23c8      	movs	r3, #200	; 0xc8
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f004 fac3 	bl	800501c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS, cmdBuffer, 3, 200);
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	b299      	uxth	r1, r3
 8000a9a:	23c8      	movs	r3, #200	; 0xc8
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f004 faba 	bl	800501c <HAL_I2C_Master_Transmit>
	delay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffbf 	bl	8000a2c <delay>
	HAL_I2C_Master_Receive(hi2c, SENSOR_ADDRESS, dataBuffer, 8, 200);
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	23c8      	movs	r3, #200	; 0xc8
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f004 fba2 	bl	8005204 <HAL_I2C_Master_Receive>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <AM2320_getTemperatureAndHumidity>:

void AM2320_getTemperatureAndHumidity(float *temperature, float *humidity, uint8_t dataBuffer[8])
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b090      	sub	sp, #64	; 0x40
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	uint16_t Rcrc = dataBuffer[7] << 8;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	86fb      	strh	r3, [r7, #54]	; 0x36
	Rcrc += dataBuffer[6];
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3306      	adds	r3, #6
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000aea:	4413      	add	r3, r2
 8000aec:	86fb      	strh	r3, [r7, #54]	; 0x36
	char text[30];
	if (Rcrc == AM2320_CRC16_2(dataBuffer, 6))
 8000aee:	2106      	movs	r1, #6
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f86d 	bl	8000bd0 <AM2320_CRC16_2>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d148      	bne.n	8000b92 <AM2320_getTemperatureAndHumidity+0xca>
	{
		uint16_t temperatureRawValue = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3304      	adds	r3, #4
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3305      	adds	r3, #5
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	86bb      	strh	r3, [r7, #52]	; 0x34
		*temperature = temperatureRawValue / 10.0;
 8000b1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b26:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	edc3 7a00 	vstr	s15, [r3]
		*temperature = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (*temperature * (-1)) : *temperature;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	09db      	lsrs	r3, r3, #7
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d105      	bne.n	8000b52 <AM2320_getTemperatureAndHumidity+0x8a>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	eef1 7a67 	vneg.f32	s15, s15
 8000b50:	e002      	b.n	8000b58 <AM2320_getTemperatureAndHumidity+0x90>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	edc3 7a00 	vstr	s15, [r3]

		uint16_t himdityRawValue = (dataBuffer[2] << 8) + dataBuffer[3];
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3302      	adds	r3, #2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3303      	adds	r3, #3
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	867b      	strh	r3, [r7, #50]	; 0x32
		*humidity = himdityRawValue / 10.0;
 8000b76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b80:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000b84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	edc3 7a00 	vstr	s15, [r3]
	}
	sprintf(text, "Temperature= %4.1f \t Humidity= %4.1f", *temperature, *humidity);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	edd3 7a00 	vldr	s15, [r3]
 8000ba2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba6:	f107 0014 	add.w	r0, r7, #20
 8000baa:	ed8d 7b00 	vstr	d7, [sp]
 8000bae:	ec53 2b16 	vmov	r2, r3, d6
 8000bb2:	4906      	ldr	r1, [pc, #24]	; (8000bcc <AM2320_getTemperatureAndHumidity+0x104>)
 8000bb4:	f009 ff28 	bl	800aa08 <siprintf>
	printOutLine(text);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff25 	bl	8000a0c <printOutLine>

}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	; 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	0800e1d8 	.word	0x0800e1d8

08000bd0 <AM2320_CRC16_2>:

uint16_t AM2320_CRC16_2(uint8_t *ptr, uint8_t length)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	737b      	strb	r3, [r7, #13]

	while (length--)
 8000be6:	e023      	b.n	8000c30 <AM2320_CRC16_2+0x60>
	{
		crc ^= *ptr++;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	737b      	strb	r3, [r7, #13]
 8000bfc:	e015      	b.n	8000c2a <AM2320_CRC16_2+0x5a>
		{
			if ((crc & 0x01) != 0)
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00a      	beq.n	8000c1e <AM2320_CRC16_2+0x4e>
			{
				crc >>= 1;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	085b      	lsrs	r3, r3, #1
 8000c0c:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000c0e:	89fb      	ldrh	r3, [r7, #14]
 8000c10:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000c14:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	81fb      	strh	r3, [r7, #14]
 8000c1c:	e002      	b.n	8000c24 <AM2320_CRC16_2+0x54>
			}
			else
			{
				crc >>= 1;
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++)
 8000c24:	7b7b      	ldrb	r3, [r7, #13]
 8000c26:	3301      	adds	r3, #1
 8000c28:	737b      	strb	r3, [r7, #13]
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	d9e6      	bls.n	8000bfe <AM2320_CRC16_2+0x2e>
	while (length--)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	70fa      	strb	r2, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1d6      	bne.n	8000be8 <AM2320_CRC16_2+0x18>
			}
		}
	}
	return crc;
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <fillScreenColor>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "spi.h"

void fillScreenColor(uint16_t color)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fcff 	bl	8003658 <ILI9341_Fill_Screen>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <clearScreenArea>:

void clearScreenArea(Rectangle area, uint16_t color)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c70:	4613      	mov	r3, r2
 8000c72:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
 8000c74:	8938      	ldrh	r0, [r7, #8]
 8000c76:	8979      	ldrh	r1, [r7, #10]
 8000c78:	89ba      	ldrh	r2, [r7, #12]
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	f002 fa78 	bl	8003170 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	461a      	mov	r2, r3
 8000c84:	893b      	ldrh	r3, [r7, #8]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	89fa      	ldrh	r2, [r7, #14]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	897a      	ldrh	r2, [r7, #10]
 8000c8e:	1a8a      	subs	r2, r1, r2
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fc3e 	bl	800351c <ILI9341_Draw_Colour_Burst>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <setRotation>:

void setRotation(uint8_t rotation)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fac5 	bl	8003244 <ILI9341_Set_Rotation>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <drawText>:

void drawText(const char *text, uint8_t x, uint8_t y, uint16_t size)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af02      	add	r7, sp, #8
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	70fb      	strb	r3, [r7, #3]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70bb      	strb	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, BLACK, size, WHITE);
 8000cdc:	78ba      	ldrb	r2, [r7, #2]
 8000cde:	78f9      	ldrb	r1, [r7, #3]
 8000ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f002 f9a9 	bl	8003044 <ILI9341_Draw_Text>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <drawTextAtPoint>:

void drawTextAtPoint(const char *text, Point position, uint16_t size)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	8139      	strh	r1, [r7, #8]
 8000d04:	4613      	mov	r3, r2
 8000d06:	80fb      	strh	r3, [r7, #6]
	drawText(text, position.x, position.y, size);
 8000d08:	7a39      	ldrb	r1, [r7, #8]
 8000d0a:	7a7a      	ldrb	r2, [r7, #9]
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff ffd7 	bl	8000cc2 <drawText>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <drawTextWithColor>:

void drawTextWithColor(const char *text, uint8_t x, uint8_t y, uint16_t color,
		uint16_t size, uint16_t backgroundColor)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	70fb      	strb	r3, [r7, #3]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70bb      	strb	r3, [r7, #2]
 8000d32:	4613      	mov	r3, r2
 8000d34:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, color, size, backgroundColor);
 8000d36:	8838      	ldrh	r0, [r7, #0]
 8000d38:	78ba      	ldrb	r2, [r7, #2]
 8000d3a:	78f9      	ldrb	r1, [r7, #3]
 8000d3c:	8abb      	ldrh	r3, [r7, #20]
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	8a3b      	ldrh	r3, [r7, #16]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4603      	mov	r3, r0
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f002 f97c 	bl	8003044 <ILI9341_Draw_Text>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <drawFilledRectangleAtCoord>:
{
	ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1, y1, color);
}

void drawFilledRectangleAtCoord(Rectangle rectangle, uint16_t color)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d62:	4613      	mov	r3, r2
 8000d64:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(rectangle.x0, rectangle.y0, rectangle.x1, rectangle.y1, color);
 8000d66:	8938      	ldrh	r0, [r7, #8]
 8000d68:	8979      	ldrh	r1, [r7, #10]
 8000d6a:	89ba      	ldrh	r2, [r7, #12]
 8000d6c:	89fc      	ldrh	r4, [r7, #14]
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4623      	mov	r3, r4
 8000d74:	f002 f86d 	bl	8002e52 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}

08000d80 <drawFilledCircleAtCoord>:
{
	ILI9341_Draw_Filled_Circle(x, y, radius, color);
}

void drawFilledCircleAtCoord(Circle circle, uint16_t color)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d8e:	4613      	mov	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Circle(circle.x, circle.y, circle.radius, color);
 8000d92:	8938      	ldrh	r0, [r7, #8]
 8000d94:	8979      	ldrh	r1, [r7, #10]
 8000d96:	89ba      	ldrh	r2, [r7, #12]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	f001 ffd2 	bl	8002d42 <ILI9341_Draw_Filled_Circle>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <drawImageAtPoint>:
{
	ILI9341_Draw_Image(imageArray, orientation);
}

void drawImageAtPoint(Image image, uint8_t rotation)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8000db4:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8000db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dc2:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000dc6:	701a      	strb	r2, [r3, #0]
	setRotation(rotation);
 8000dc8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dcc:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff68 	bl	8000ca8 <setRotation>

	Point startPoint = image.drawPoint;
 8000dd8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ddc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000de0:	889b      	ldrh	r3, [r3, #4]
 8000de2:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
	Point endPoint = { 0, 0};
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

	switch (rotation)
 8000df2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000df6:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d841      	bhi.n	8000e84 <drawImageAtPoint+0xdc>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <drawImageAtPoint+0x60>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e4f 	.word	0x08000e4f
 8000e0c:	08000e19 	.word	0x08000e19
 8000e10:	08000e4f 	.word	0x08000e4f
 8000e14:	08000e19 	.word	0x08000e19
	{
	case SCREEN_HORIZONTAL_1:
	case SCREEN_HORIZONTAL_2:
		endPoint.x = startPoint.x + image.width - 1;
 8000e18:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8000e1c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e20:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e24:	88db      	ldrh	r3, [r3, #6]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.y + image.height;
 8000e34:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8000e38:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e3c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e40:	891b      	ldrh	r3, [r3, #8]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8000e4c:	e01a      	b.n	8000e84 <drawImageAtPoint+0xdc>
	case SCREEN_VERTICAL_1:
	case SCREEN_VERTICAL_2:
		endPoint.x = startPoint.y + image.height - 1;
 8000e4e:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8000e52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e56:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e5a:	891b      	ldrh	r3, [r3, #8]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.x + image.width;
 8000e6a:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8000e6e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e72:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e76:	88db      	ldrh	r3, [r3, #6]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8000e82:	bf00      	nop
	}

	ILI9341_Set_Address(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
 8000e84:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	f897 3204 	ldrb.w	r3, [r7, #516]	; 0x204
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f002 f968 	bl	8003170 <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	4834      	ldr	r0, [pc, #208]	; (8000f78 <drawImageAtPoint+0x1d0>)
 8000ea8:	f004 f80e 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <drawImageAtPoint+0x1d0>)
 8000eb4:	f004 f808 	bl	8004ec8 <HAL_GPIO_WritePin>

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];
	uint32_t counter = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000ec4:	e035      	b.n	8000f32 <drawImageAtPoint+0x18a>
	{
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000ecc:	e019      	b.n	8000f02 <drawImageAtPoint+0x15a>
		{
			Temp_small_buffer[k] = image.imageArray[counter + k];
 8000ece:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ed2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000edc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000ee0:	440b      	add	r3, r1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	7819      	ldrb	r1, [r3, #0]
 8000ee6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000eea:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8000eee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000ef2:	4413      	add	r3, r2
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	701a      	strb	r2, [r3, #0]
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000ef8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000efc:	3301      	adds	r3, #1
 8000efe:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000f02:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f0a:	d3e0      	bcc.n	8000ece <drawImageAtPoint+0x126>
		}
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000f0c:	f107 0110 	add.w	r1, r7, #16
 8000f10:	230a      	movs	r3, #10
 8000f12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <drawImageAtPoint+0x1d4>)
 8000f18:	f006 fcfb 	bl	8007912 <HAL_SPI_Transmit>
		counter += BURST_MAX_SIZE;
 8000f1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000f20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f24:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8000f28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000f32:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f36:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000f3a:	88db      	ldrh	r3, [r3, #6]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f42:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000f46:	891b      	ldrh	r3, [r3, #8]
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <drawImageAtPoint+0x1d8>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	1112      	asrs	r2, r2, #4
 8000f54:	17db      	asrs	r3, r3, #31
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d3b1      	bcc.n	8000ec6 <drawImageAtPoint+0x11e>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <drawImageAtPoint+0x1d0>)
 8000f6a:	f003 ffad 	bl	8004ec8 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	200002c0 	.word	0x200002c0
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <getImageArea>:

Rectangle getImageArea(Image image)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Rectangle imageArea =
	{
			image.drawPoint.x,
 8000f92:	793b      	ldrb	r3, [r7, #4]
 8000f94:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000f96:	823b      	strh	r3, [r7, #16]
			image.drawPoint.y,
 8000f98:	797b      	ldrb	r3, [r7, #5]
 8000f9a:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000f9c:	827b      	strh	r3, [r7, #18]
			image.drawPoint.x + image.width,
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000fa8:	82bb      	strh	r3, [r7, #20]
			image.drawPoint.y + image.height
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	893b      	ldrh	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000fb4:	82fb      	strh	r3, [r7, #22]
	};
	return imageArea;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	cb03      	ldmia	r3!, {r0, r1}
 8000fc0:	6010      	str	r0, [r2, #0]
 8000fc2:	6051      	str	r1, [r2, #4]
}
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <getCircleEdgeX>:

uint16_t getCircleEdgeX(Circle circle)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x + circle.radius;
 8000fdc:	883a      	ldrh	r2, [r7, #0]
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29b      	uxth	r3, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <getCircleEdgeY>:

uint16_t getCircleEdgeY(Circle circle)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y + circle.radius;
 8000ffc:	887a      	ldrh	r2, [r7, #2]
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <getCircleEdgeXNegative>:

uint16_t getCircleEdgeXNegative(Circle circle)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	463b      	mov	r3, r7
 8001018:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x - circle.radius;
 800101c:	883a      	ldrh	r2, [r7, #0]
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29b      	uxth	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <getCircleEdgeYNegative>:

uint16_t getCircleEdgeYNegative(Circle circle)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	463b      	mov	r3, r7
 8001038:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y - circle.radius;
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <MX_ADC1_Init+0xa0>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_ADC1_Init+0x9c>)
 800106a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_ADC1_Init+0x9c>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_ADC1_Init+0x9c>)
 800108c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001094:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_ADC1_Init+0x9c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010b6:	f002 fdeb 	bl	8003c90 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010c0:	f001 f98c 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010c4:	2303      	movs	r3, #3
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010cc:	2302      	movs	r3, #2
 80010ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010d6:	f003 f859 	bl	800418c <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010e0:	f001 f97c 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001fc 	.word	0x200001fc
 80010f0:	40012000 	.word	0x40012000

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_ADC_MspInit+0x88>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_ADC_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001146:	2308      	movs	r3, #8
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_ADC_MspInit+0x8c>)
 800115a:	f003 fbe5 	bl	8004928 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2102      	movs	r1, #2
 8001162:	2012      	movs	r0, #18
 8001164:	f003 fb6b 	bl	800483e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001168:	2012      	movs	r0, #18
 800116a:	f003 fb84 	bl	8004876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
     PB6   ------> S_TIM4_CH1
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	4b9e      	ldr	r3, [pc, #632]	; (8001414 <MX_GPIO_Init+0x290>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a9d      	ldr	r2, [pc, #628]	; (8001414 <MX_GPIO_Init+0x290>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b9b      	ldr	r3, [pc, #620]	; (8001414 <MX_GPIO_Init+0x290>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b98      	ldr	r3, [pc, #608]	; (8001414 <MX_GPIO_Init+0x290>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a97      	ldr	r2, [pc, #604]	; (8001414 <MX_GPIO_Init+0x290>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b95      	ldr	r3, [pc, #596]	; (8001414 <MX_GPIO_Init+0x290>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ca:	4b92      	ldr	r3, [pc, #584]	; (8001414 <MX_GPIO_Init+0x290>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a91      	ldr	r2, [pc, #580]	; (8001414 <MX_GPIO_Init+0x290>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <MX_GPIO_Init+0x290>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <MX_GPIO_Init+0x290>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <MX_GPIO_Init+0x290>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b89      	ldr	r3, [pc, #548]	; (8001414 <MX_GPIO_Init+0x290>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b86      	ldr	r3, [pc, #536]	; (8001414 <MX_GPIO_Init+0x290>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a85      	ldr	r2, [pc, #532]	; (8001414 <MX_GPIO_Init+0x290>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b83      	ldr	r3, [pc, #524]	; (8001414 <MX_GPIO_Init+0x290>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b80      	ldr	r3, [pc, #512]	; (8001414 <MX_GPIO_Init+0x290>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a7f      	ldr	r2, [pc, #508]	; (8001414 <MX_GPIO_Init+0x290>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <MX_GPIO_Init+0x290>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <MX_GPIO_Init+0x290>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a79      	ldr	r2, [pc, #484]	; (8001414 <MX_GPIO_Init+0x290>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b77      	ldr	r3, [pc, #476]	; (8001414 <MX_GPIO_Init+0x290>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001242:	4b74      	ldr	r3, [pc, #464]	; (8001414 <MX_GPIO_Init+0x290>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a73      	ldr	r2, [pc, #460]	; (8001414 <MX_GPIO_Init+0x290>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b71      	ldr	r3, [pc, #452]	; (8001414 <MX_GPIO_Init+0x290>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2168      	movs	r1, #104	; 0x68
 800125e:	486e      	ldr	r0, [pc, #440]	; (8001418 <MX_GPIO_Init+0x294>)
 8001260:	f003 fe32 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f244 0181 	movw	r1, #16513	; 0x4081
 800126a:	486c      	ldr	r0, [pc, #432]	; (800141c <MX_GPIO_Init+0x298>)
 800126c:	f003 fe2c 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	; 0x40
 8001274:	486a      	ldr	r0, [pc, #424]	; (8001420 <MX_GPIO_Init+0x29c>)
 8001276:	f003 fe27 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001280:	4868      	ldr	r0, [pc, #416]	; (8001424 <MX_GPIO_Init+0x2a0>)
 8001282:	f003 fe21 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001286:	2314      	movs	r3, #20
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	485f      	ldr	r0, [pc, #380]	; (8001418 <MX_GPIO_Init+0x294>)
 800129a:	f003 fb45 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800129e:	2368      	movs	r3, #104	; 0x68
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4858      	ldr	r0, [pc, #352]	; (8001418 <MX_GPIO_Init+0x294>)
 80012b6:	f003 fb37 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4855      	ldr	r0, [pc, #340]	; (8001424 <MX_GPIO_Init+0x2a0>)
 80012d0:	f003 fb2a 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012d4:	2332      	movs	r3, #50	; 0x32
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	484d      	ldr	r0, [pc, #308]	; (8001424 <MX_GPIO_Init+0x2a0>)
 80012f0:	f003 fb1a 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012f4:	2386      	movs	r3, #134	; 0x86
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4846      	ldr	r0, [pc, #280]	; (8001428 <MX_GPIO_Init+0x2a4>)
 8001310:	f003 fb0a 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LD3_Pin|LD2_Pin;
 8001314:	f244 0381 	movw	r3, #16513	; 0x4081
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	483b      	ldr	r0, [pc, #236]	; (800141c <MX_GPIO_Init+0x298>)
 800132e:	f003 fafb 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001332:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001344:	2304      	movs	r3, #4
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4833      	ldr	r0, [pc, #204]	; (800141c <MX_GPIO_Init+0x298>)
 8001350:	f003 faea 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	482a      	ldr	r0, [pc, #168]	; (800141c <MX_GPIO_Init+0x298>)
 8001372:	f003 fad9 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4824      	ldr	r0, [pc, #144]	; (8001420 <MX_GPIO_Init+0x29c>)
 800138e:	f003 facb 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <MX_GPIO_Init+0x29c>)
 80013a6:	f003 fabf 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80013aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <MX_GPIO_Init+0x2a0>)
 80013c4:	f003 fab0 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013da:	230b      	movs	r3, #11
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_GPIO_Init+0x29c>)
 80013e6:	f003 fa9f 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_BACKLIGHT_Pin;
 80013ea:	2340      	movs	r3, #64	; 0x40
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013fa:	2302      	movs	r3, #2
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_LED_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_GPIO_Init+0x298>)
 8001406:	f003 fa8f 	bl	8004928 <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	; 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40021000 	.word	0x40021000
 800141c:	40020400 	.word	0x40020400
 8001420:	40021800 	.word	0x40021800
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000

0800142c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_I2C1_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <MX_I2C1_Init+0x7c>)
 800143a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001468:	f003 fd48 	bl	8004efc <HAL_I2C_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001472:	f000 ffb3 	bl	80023dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001476:	2100      	movs	r1, #0
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <MX_I2C1_Init+0x74>)
 800147a:	f004 ff81 	bl	8006380 <HAL_I2CEx_ConfigAnalogFilter>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001484:	f000 ffaa 	bl	80023dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_I2C1_Init+0x74>)
 800148c:	f004 ffc3 	bl	8006416 <HAL_I2CEx_ConfigDigitalFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 ffa1 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000244 	.word	0x20000244
 80014a4:	40005400 	.word	0x40005400
 80014a8:	20404768 	.word	0x20404768

080014ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ae      	sub	sp, #184	; 0xb8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2290      	movs	r2, #144	; 0x90
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 fafe 	bl	800aace <memset>
  if(i2cHandle->Instance==I2C1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_I2C_MspInit+0xd4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d14c      	bne.n	8001576 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4618      	mov	r0, r3
 80014ec:	f005 fd14 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014f6:	f000 ff71 	bl	80023dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001512:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152c:	2304      	movs	r3, #4
 800152e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001536:	4619      	mov	r1, r3
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <HAL_I2C_MspInit+0xdc>)
 800153a:	f003 f9f5 	bl	8004928 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	201f      	movs	r0, #31
 800155c:	f003 f96f 	bl	800483e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001560:	201f      	movs	r0, #31
 8001562:	f003 f988 	bl	8004876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2020      	movs	r0, #32
 800156c:	f003 f967 	bl	800483e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001570:	2020      	movs	r0, #32
 8001572:	f003 f980 	bl	8004876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	37b8      	adds	r7, #184	; 0xb8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40005400 	.word	0x40005400
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001590:	f3bf 8f4f 	dsb	sy
}
 8001594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001596:	f3bf 8f6f 	isb	sy
}
 800159a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <SCB_EnableICache+0x48>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015a4:	f3bf 8f4f 	dsb	sy
}
 80015a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015aa:	f3bf 8f6f 	isb	sy
}
 80015ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <SCB_EnableICache+0x48>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <SCB_EnableICache+0x48>)
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015bc:	f3bf 8f4f 	dsb	sy
}
 80015c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015c2:	f3bf 8f6f 	isb	sy
}
 80015c6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <SCB_EnableDCache+0x84>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015e6:	f3bf 8f4f 	dsb	sy
}
 80015ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <SCB_EnableDCache+0x84>)
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0b5b      	lsrs	r3, r3, #13
 80015f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015fc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001606:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001610:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001616:	4911      	ldr	r1, [pc, #68]	; (800165c <SCB_EnableDCache+0x84>)
 8001618:	4313      	orrs	r3, r2
 800161a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	60ba      	str	r2, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ef      	bne.n	8001608 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	60fa      	str	r2, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1e5      	bne.n	80015fe <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <SCB_EnableDCache+0x84>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <SCB_EnableDCache+0x84>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001644:	f3bf 8f4f 	dsb	sy
}
 8001648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800164a:	f3bf 8f6f 	isb	sy
}
 800164e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <getTemperatureText>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTemperatureText(float temperature, char *temperatureString) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
 800166a:	6038      	str	r0, [r7, #0]
	sprintf(temperatureString, "%.1f C", temperature);
 800166c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001674:	ec53 2b17 	vmov	r2, r3, d7
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <getTemperatureText+0x28>)
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	f009 f9c4 	bl	800aa08 <siprintf>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800e214 	.word	0x0800e214

0800168c <getHumidityText>:

void getHumidityText(float humidity, char *humidityString) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	ed87 0a01 	vstr	s0, [r7, #4]
 8001696:	6038      	str	r0, [r7, #0]
	sprintf(humidityString, "%.1f %%RH", humidity);
 8001698:	edd7 7a01 	vldr	s15, [r7, #4]
 800169c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a0:	ec53 2b17 	vmov	r2, r3, d7
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <getHumidityText+0x28>)
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f009 f9ae 	bl	800aa08 <siprintf>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	0800e21c 	.word	0x0800e21c

080016b8 <convertColorToRgb565>:

uint16_t convertColorToRgb565(float redIntensity, float greenIntensity, float blueIntensity) {
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0a03 	vstr	s0, [r7, #12]
 80016c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016c6:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t red = (uint16_t)(redIntensity * 31.0 + 0.5);
 80016ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d2:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 80016d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80016de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	82fb      	strh	r3, [r7, #22]
  uint16_t green = (uint16_t)(greenIntensity * 63.0 + 0.5);
 80016ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80016f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001758 <convertColorToRgb565+0xa0>
 80016f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016fc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001700:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	82bb      	strh	r3, [r7, #20]
  uint16_t blue = (uint16_t)(blueIntensity * 31.0 + 0.5);
 800170e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001716:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 800171a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800171e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001722:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001726:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800172a:	ee17 3a90 	vmov	r3, s15
 800172e:	827b      	strh	r3, [r7, #18]

  uint16_t color = (red << 11) | (green << 5) | blue;
 8001730:	8afb      	ldrh	r3, [r7, #22]
 8001732:	02db      	lsls	r3, r3, #11
 8001734:	b21a      	sxth	r2, r3
 8001736:	8abb      	ldrh	r3, [r7, #20]
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21a      	sxth	r2, r3
 8001740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001744:	4313      	orrs	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	823b      	strh	r3, [r7, #16]

  return color;
 800174a:	8a3b      	ldrh	r3, [r7, #16]
}
 800174c:	4618      	mov	r0, r3
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	00000000 	.word	0x00000000
 800175c:	404f8000 	.word	0x404f8000

08001760 <createColorBox>:

Rectangle createColorBox(Circle circle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	e883 0006 	stmia.w	r3, {r1, r2}
	const uint16_t BOX_WIDTH = 150;
 800176e:	2396      	movs	r3, #150	; 0x96
 8001770:	83fb      	strh	r3, [r7, #30]
	const uint16_t BOX_HEIGHT = 20;
 8001772:	2314      	movs	r3, #20
 8001774:	83bb      	strh	r3, [r7, #28]
	const uint16_t GAP_X_CIRCLE_AND_BOX = 15;
 8001776:	230f      	movs	r3, #15
 8001778:	837b      	strh	r3, [r7, #26]

	Rectangle rectangle = {
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX,
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001780:	f7ff fc26 	bl	8000fd0 <getCircleEdgeX>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	8b7b      	ldrh	r3, [r7, #26]
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800178e:	823b      	strh	r3, [r7, #16]
			circle.y - (circle.radius / 2),
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	893b      	ldrh	r3, [r7, #8]
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800179c:	827b      	strh	r3, [r7, #18]
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017a4:	f7ff fc14 	bl	8000fd0 <getCircleEdgeX>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	8b7b      	ldrh	r3, [r7, #26]
 80017ae:	4413      	add	r3, r2
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	8bfb      	ldrh	r3, [r7, #30]
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 80017b8:	82bb      	strh	r3, [r7, #20]
			circle.y + BOX_HEIGHT
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	8bbb      	ldrh	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 80017c2:	82fb      	strh	r3, [r7, #22]
	};
	return rectangle;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	461a      	mov	r2, r3
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	cb03      	ldmia	r3!, {r0, r1}
 80017ce:	6010      	str	r0, [r2, #0]
 80017d0:	6051      	str	r1, [r2, #4]
}
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <createColorIntensityBar>:

Rectangle createColorIntensityBar(Rectangle refRectangle, float colorIntensity)
{
 80017da:	b480      	push	{r7}
 80017dc:	b089      	sub	sp, #36	; 0x24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	e883 0006 	stmia.w	r3, {r1, r2}
 80017e8:	ed87 0a00 	vstr	s0, [r7]
	const uint16_t BOX_WIDTH = 150;
 80017ec:	2396      	movs	r3, #150	; 0x96
 80017ee:	83fb      	strh	r3, [r7, #30]

	Rectangle intensityBar = {
			refRectangle.x0,
 80017f0:	88bb      	ldrh	r3, [r7, #4]
	Rectangle intensityBar = {
 80017f2:	82bb      	strh	r3, [r7, #20]
			refRectangle.y0,
 80017f4:	88fb      	ldrh	r3, [r7, #6]
	Rectangle intensityBar = {
 80017f6:	82fb      	strh	r3, [r7, #22]
			refRectangle.x0 + (int) (colorIntensity * BOX_WIDTH),
 80017f8:	88ba      	ldrh	r2, [r7, #4]
 80017fa:	8bfb      	ldrh	r3, [r7, #30]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	edd7 7a00 	vldr	s15, [r7]
 8001808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001810:	ee17 3a90 	vmov	r3, s15
 8001814:	b29b      	uxth	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b29b      	uxth	r3, r3
	Rectangle intensityBar = {
 800181a:	833b      	strh	r3, [r7, #24]
			refRectangle.y1
 800181c:	897b      	ldrh	r3, [r7, #10]
	Rectangle intensityBar = {
 800181e:	837b      	strh	r3, [r7, #26]
	};
	return intensityBar;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	461a      	mov	r2, r3
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	cb03      	ldmia	r3!, {r0, r1}
 800182a:	6010      	str	r0, [r2, #0]
 800182c:	6051      	str	r1, [r2, #4]
}
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <drawColorIntensityBar>:

void drawColorIntensityBar(Rectangle colorBox, ColorInfo colorInfo, uint16_t brightColor)
{
 800183a:	b082      	sub	sp, #8
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	463c      	mov	r4, r7
 8001844:	e884 0003 	stmia.w	r4, {r0, r1}
 8001848:	f107 0120 	add.w	r1, r7, #32
 800184c:	e881 000c 	stmia.w	r1, {r2, r3}

	Rectangle colorIntensityBar = createColorIntensityBar(colorBox, colorInfo.intensity);
 8001850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001854:	f107 0008 	add.w	r0, r7, #8
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	463b      	mov	r3, r7
 800185e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001862:	f7ff ffba 	bl	80017da <createColorIntensityBar>

	drawFilledRectangleAtCoord(colorBox, brightColor);
 8001866:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001868:	461a      	mov	r2, r3
 800186a:	463b      	mov	r3, r7
 800186c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001870:	f7ff fa70 	bl	8000d54 <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(colorIntensityBar, colorInfo.color);
 8001874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001876:	461a      	mov	r2, r3
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001880:	f7ff fa68 	bl	8000d54 <drawFilledRectangleAtCoord>
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800188e:	b002      	add	sp, #8
 8001890:	4770      	bx	lr
	...

08001894 <drawColorIntensityPercentageText>:

void drawColorIntensityPercentageText(Rectangle colorBox, ColorInfo colorInfo)
{
 8001894:	b082      	sub	sp, #8
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	b089      	sub	sp, #36	; 0x24
 800189a:	af00      	add	r7, sp, #0
 800189c:	463c      	mov	r4, r7
 800189e:	e884 0003 	stmia.w	r4, {r0, r1}
 80018a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018a6:	e881 000c 	stmia.w	r1, {r2, r3}
	char text[10];
	const uint8_t GAP_X_BOX_AND_PERCENTAGE = 10;
 80018aa:	230a      	movs	r3, #10
 80018ac:	77fb      	strb	r3, [r7, #31]
	const uint8_t COLOR_PERCENTAGE_FONT_SIZE = 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	77bb      	strb	r3, [r7, #30]

	Point percentagePoint = {colorBox.x1 + GAP_X_BOX_AND_PERCENTAGE, colorBox.y0};
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	743b      	strb	r3, [r7, #16]
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	747b      	strb	r3, [r7, #17]
	Rectangle clearArea = {percentagePoint.x, percentagePoint.y, percentagePoint.x + 50, percentagePoint.y + 20};
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	813b      	strh	r3, [r7, #8]
 80018ca:	7c7b      	ldrb	r3, [r7, #17]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	7c3b      	ldrb	r3, [r7, #16]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3332      	adds	r3, #50	; 0x32
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	81bb      	strh	r3, [r7, #12]
 80018da:	7c7b      	ldrb	r3, [r7, #17]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3314      	adds	r3, #20
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	81fb      	strh	r3, [r7, #14]

	sprintf(text, "%d%%", (int) (colorInfo.intensity * 100));
 80018e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001934 <drawColorIntensityPercentageText+0xa0>
 80018ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	ee17 2a90 	vmov	r2, s15
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <drawColorIntensityPercentageText+0xa4>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 f882 	bl	800aa08 <siprintf>

	clearScreenArea(clearArea, WHITE);
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001910:	f7ff f9a7 	bl	8000c62 <clearScreenArea>
	drawTextAtPoint(text, percentagePoint, COLOR_PERCENTAGE_FONT_SIZE);
 8001914:	7fbb      	ldrb	r3, [r7, #30]
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f9eb 	bl	8000cfa <drawTextAtPoint>
}
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800192e:	b002      	add	sp, #8
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	42c80000 	.word	0x42c80000
 8001938:	0800e228 	.word	0x0800e228

0800193c <drawHueCircle>:

void drawHueCircle(ColorInfo mixedColorInfo)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	drawFilledCircleAtCoord(mixedColorInfo.circle, mixedColorInfo.color);
 8001948:	897b      	ldrh	r3, [r7, #10]
 800194a:	461a      	mov	r2, r3
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001952:	f7ff fa15 	bl	8000d80 <drawFilledCircleAtCoord>
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <drawColorInfo>:

void drawColorInfo(ColorInfo colorInfo, uint16_t brightColor)
{
 800195e:	b590      	push	{r4, r7, lr}
 8001960:	b089      	sub	sp, #36	; 0x24
 8001962:	af02      	add	r7, sp, #8
 8001964:	1d3c      	adds	r4, r7, #4
 8001966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800196a:	807b      	strh	r3, [r7, #2]
	Rectangle boxArea = createColorBox(colorInfo.circle);
 800196c:	f107 0010 	add.w	r0, r7, #16
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001976:	f7ff fef3 	bl	8001760 <createColorBox>
	drawFilledCircleAtCoord(colorInfo.circle, colorInfo.color);
 800197a:	897b      	ldrh	r3, [r7, #10]
 800197c:	461a      	mov	r2, r3
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001984:	f7ff f9fc 	bl	8000d80 <drawFilledCircleAtCoord>
	drawColorIntensityBar(boxArea, colorInfo, brightColor);
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	cb0c      	ldmia	r3, {r2, r3}
 8001994:	f107 0110 	add.w	r1, r7, #16
 8001998:	c903      	ldmia	r1, {r0, r1}
 800199a:	f7ff ff4e 	bl	800183a <drawColorIntensityBar>
	drawColorIntensityPercentageText(boxArea, colorInfo);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	cb0c      	ldmia	r3, {r2, r3}
 80019a6:	f107 0110 	add.w	r1, r7, #16
 80019aa:	c903      	ldmia	r1, {r0, r1}
 80019ac:	f7ff ff72 	bl	8001894 <drawColorIntensityPercentageText>
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <drawRgbInfo>:

void drawRgbInfo(ColorInfo redColor, ColorInfo greenColor, ColorInfo blueColor, ColorInfo mixedColor)
{
 80019b8:	b082      	sub	sp, #8
 80019ba:	b590      	push	{r4, r7, lr}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	1d3c      	adds	r4, r7, #4
 80019c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
	drawHueCircle(mixedColor);
 80019c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019d0:	f7ff ffb4 	bl	800193c <drawHueCircle>
	drawColorInfo(redColor, BRIGHT_RED);
 80019d4:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80019d8:	1d3a      	adds	r2, r7, #4
 80019da:	ca07      	ldmia	r2, {r0, r1, r2}
 80019dc:	f7ff ffbf 	bl	800195e <drawColorInfo>
	drawColorInfo(greenColor, BRIGHT_GREEN);
 80019e0:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 80019e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ea:	f7ff ffb8 	bl	800195e <drawColorInfo>
	drawColorInfo(blueColor, BRIGHT_BLUE);
 80019ee:	f24e 733f 	movw	r3, #59199	; 0xe73f
 80019f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f8:	f7ff ffb1 	bl	800195e <drawColorInfo>
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a06:	b002      	add	sp, #8
 8001a08:	4770      	bx	lr

08001a0a <isTouchWithinCircle>:

uint8_t isTouchWithinCircle(Circle circle, uint16_t xPos, uint16_t yPos)
{
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	f107 0408 	add.w	r4, r7, #8
 8001a14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a18:	4611      	mov	r1, r2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	80fb      	strh	r3, [r7, #6]
 8001a20:	4613      	mov	r3, r2
 8001a22:	80bb      	strh	r3, [r7, #4]
	uint16_t xPositive = getCircleEdgeX(circle);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a2c:	f7ff fad0 	bl	8000fd0 <getCircleEdgeX>
 8001a30:	4603      	mov	r3, r0
 8001a32:	82fb      	strh	r3, [r7, #22]
	uint16_t xNegative = getCircleEdgeXNegative(circle);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a3c:	f7ff fae8 	bl	8001010 <getCircleEdgeXNegative>
 8001a40:	4603      	mov	r3, r0
 8001a42:	82bb      	strh	r3, [r7, #20]
	uint16_t yPositive = getCircleEdgeY(circle);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a4c:	f7ff fad0 	bl	8000ff0 <getCircleEdgeY>
 8001a50:	4603      	mov	r3, r0
 8001a52:	827b      	strh	r3, [r7, #18]
	uint16_t yNegative = getCircleEdgeYNegative(circle);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a5c:	f7ff fae8 	bl	8001030 <getCircleEdgeYNegative>
 8001a60:	4603      	mov	r3, r0
 8001a62:	823b      	strh	r3, [r7, #16]

	if (xPos > xNegative && xPos < xPositive && yPos > yNegative && yPos < yPositive)
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	8abb      	ldrh	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d90d      	bls.n	8001a88 <isTouchWithinCircle+0x7e>
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	8afb      	ldrh	r3, [r7, #22]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d209      	bcs.n	8001a88 <isTouchWithinCircle+0x7e>
 8001a74:	88ba      	ldrh	r2, [r7, #4]
 8001a76:	8a3b      	ldrh	r3, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d905      	bls.n	8001a88 <isTouchWithinCircle+0x7e>
 8001a7c:	88ba      	ldrh	r2, [r7, #4]
 8001a7e:	8a7b      	ldrh	r3, [r7, #18]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d201      	bcs.n	8001a88 <isTouchWithinCircle+0x7e>
	{
		return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <isTouchWithinCircle+0x80>
	} else
	{
		return 0;
 8001a88:	2300      	movs	r3, #0
	}
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}

08001a92 <isTouchWithinRectangle>:

uint8_t isTouchWithinRectangle(Rectangle rectangle, uint16_t xPos, uint16_t yPos)
{
 8001a92:	b490      	push	{r4, r7}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	f107 0408 	add.w	r4, r7, #8
 8001a9c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	80bb      	strh	r3, [r7, #4]
	if (xPos >= rectangle.x0 && xPos <= rectangle.x1 && yPos <= rectangle.y1 && yPos >= rectangle.y0)
 8001aac:	893b      	ldrh	r3, [r7, #8]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d30d      	bcc.n	8001ad0 <isTouchWithinRectangle+0x3e>
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d809      	bhi.n	8001ad0 <isTouchWithinRectangle+0x3e>
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	88ba      	ldrh	r2, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d805      	bhi.n	8001ad0 <isTouchWithinRectangle+0x3e>
 8001ac4:	897b      	ldrh	r3, [r7, #10]
 8001ac6:	88ba      	ldrh	r2, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d301      	bcc.n	8001ad0 <isTouchWithinRectangle+0x3e>
	{
		return 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <isTouchWithinRectangle+0x40>
	} else
	{
		return 0;
 8001ad0:	2300      	movs	r3, #0
	}

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc90      	pop	{r4, r7}
 8001ada:	4770      	bx	lr

08001adc <addColorIntensity>:

void addColorIntensity(ColorInfo *colorInfo)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	const float MAX_INTENSITY = 1.0;
 8001ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ae8:	60fb      	str	r3, [r7, #12]
	const float STEP_INTENSITY = 0.1;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <addColorIntensity+0x50>)
 8001aec:	60bb      	str	r3, [r7, #8]

	if (colorInfo->intensity >= MAX_INTENSITY) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d804      	bhi.n	8001b0c <addColorIntensity+0x30>
		colorInfo->intensity = 0.0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
	} else
	{
		colorInfo->intensity += STEP_INTENSITY;
	}
}
 8001b0a:	e009      	b.n	8001b20 <addColorIntensity+0x44>
		colorInfo->intensity += STEP_INTENSITY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	3dcccccd 	.word	0x3dcccccd

08001b30 <checkTouchHueCircle>:
	sprintf(text, "T: (%d,%d)", xPos, yPos);
	drawText(text, 50, 180, 3);
}

void checkTouchHueCircle(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	uint16_t xPos = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	83fb      	strh	r3, [r7, #30]
	uint16_t yPos = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	83bb      	strh	r3, [r7, #28]

	int isDisplaying = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]

	while (isDisplaying) {
 8001b4a:	e080      	b.n	8001c4e <checkTouchHueCircle+0x11e>
		HAL_Delay(10);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f002 f87b 	bl	8003c48 <HAL_Delay>

		if (TP_Touchpad_Pressed())
 8001b52:	f002 f803 	bl	8003b5c <TP_Touchpad_Pressed>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d078      	beq.n	8001c4e <checkTouchHueCircle+0x11e>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 ff39 	bl	80039d8 <TP_Read_Coordinates>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d112      	bne.n	8001b92 <checkTouchHueCircle+0x62>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <checkTouchHueCircle+0x50>
				{
					xPos = position_array[1];
 8001b72:	8afb      	ldrh	r3, [r7, #22]
 8001b74:	83fb      	strh	r3, [r7, #30]
					yPos = SCREEN_HEIGHT - position_array[0];
 8001b76:	8abb      	ldrh	r3, [r7, #20]
 8001b78:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001b7c:	83bb      	strh	r3, [r7, #28]
 8001b7e:	e008      	b.n	8001b92 <checkTouchHueCircle+0x62>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001b80:	2301      	movs	r3, #1
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d105      	bne.n	8001b92 <checkTouchHueCircle+0x62>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001b8c:	83fb      	strh	r3, [r7, #30]
					yPos = position_array[0];
 8001b8e:	8abb      	ldrh	r3, [r7, #20]
 8001b90:	83bb      	strh	r3, [r7, #28]
				}
			}

			if (isTouchWithinCircle(redColor->circle, xPos, yPos))
 8001b92:	8bbb      	ldrh	r3, [r7, #28]
 8001b94:	8bfa      	ldrh	r2, [r7, #30]
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	c903      	ldmia	r1, {r0, r1}
 8001b9a:	f7ff ff36 	bl	8001a0a <isTouchWithinCircle>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <checkTouchHueCircle+0x88>
			{
				addColorIntensity(redColor);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff ff99 	bl	8001adc <addColorIntensity>
				drawColorInfo(*redColor, BRIGHT_RED);
 8001baa:	f64f 733c 	movw	r3, #65340	; 0xff3c
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb2:	f7ff fed4 	bl	800195e <drawColorInfo>
 8001bb6:	e030      	b.n	8001c1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(greenColor->circle, xPos, yPos))
 8001bb8:	8bbb      	ldrh	r3, [r7, #28]
 8001bba:	8bfa      	ldrh	r2, [r7, #30]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	c903      	ldmia	r1, {r0, r1}
 8001bc0:	f7ff ff23 	bl	8001a0a <isTouchWithinCircle>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <checkTouchHueCircle+0xae>
			{
				addColorIntensity(greenColor);
 8001bca:	68b8      	ldr	r0, [r7, #8]
 8001bcc:	f7ff ff86 	bl	8001adc <addColorIntensity>
				drawColorInfo(*greenColor, BRIGHT_GREEN);
 8001bd0:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bd8:	f7ff fec1 	bl	800195e <drawColorInfo>
 8001bdc:	e01d      	b.n	8001c1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(blueColor->circle, xPos, yPos))
 8001bde:	8bbb      	ldrh	r3, [r7, #28]
 8001be0:	8bfa      	ldrh	r2, [r7, #30]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	c903      	ldmia	r1, {r0, r1}
 8001be6:	f7ff ff10 	bl	8001a0a <isTouchWithinCircle>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <checkTouchHueCircle+0xd4>
			{
				addColorIntensity(blueColor);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff73 	bl	8001adc <addColorIntensity>
				drawColorInfo(*blueColor, BRIGHT_BLUE);
 8001bf6:	f24e 733f 	movw	r3, #59199	; 0xe73f
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bfe:	f7ff feae 	bl	800195e <drawColorInfo>
 8001c02:	e00a      	b.n	8001c1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(mixedColor->circle, xPos, yPos))
 8001c04:	8bbb      	ldrh	r3, [r7, #28]
 8001c06:	8bfa      	ldrh	r2, [r7, #30]
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	c903      	ldmia	r1, {r0, r1}
 8001c0c:	f7ff fefd 	bl	8001a0a <isTouchWithinCircle>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <checkTouchHueCircle+0xea>
			{
				isDisplaying = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
			}

			mixedColor->color = convertColorToRgb565(redColor->intensity, greenColor->intensity, blueColor->intensity);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c2c:	eeb0 1a66 	vmov.f32	s2, s13
 8001c30:	eef0 0a47 	vmov.f32	s1, s14
 8001c34:	eeb0 0a67 	vmov.f32	s0, s15
 8001c38:	f7ff fd3e 	bl	80016b8 <convertColorToRgb565>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	80da      	strh	r2, [r3, #6]
			drawHueCircle(*mixedColor);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c4a:	f7ff fe77 	bl	800193c <drawHueCircle>
	while (isDisplaying) {
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f af7b 	bne.w	8001b4c <checkTouchHueCircle+0x1c>
		}
	}
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <startTimerInStudentInfoPage>:

void startTimerInStudentInfoPage()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	count = 0;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <startTimerInStudentInfoPage+0x20>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Init(&htim2);
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <startTimerInStudentInfoPage+0x24>)
 8001c6c:	f006 f948 	bl	8007f00 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <startTimerInStudentInfoPage+0x24>)
 8001c72:	f006 f9f9 	bl	8008068 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <startTimerInStudentInfoPage+0x28>)
 8001c78:	f002 f84e 	bl	8003d18 <HAL_ADC_Start_IT>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000298 	.word	0x20000298
 8001c84:	20000374 	.word	0x20000374
 8001c88:	200001fc 	.word	0x200001fc

08001c8c <stopTimerInStudentInfoPage>:

void stopTimerInStudentInfoPage()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <stopTimerInStudentInfoPage+0x14>)
 8001c92:	f006 f98c 	bl	8007fae <HAL_TIM_Base_DeInit>
	HAL_ADC_Stop_IT(&hadc1);
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <stopTimerInStudentInfoPage+0x18>)
 8001c98:	f002 f916 	bl	8003ec8 <HAL_ADC_Stop_IT>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000374 	.word	0x20000374
 8001ca4:	200001fc 	.word	0x200001fc

08001ca8 <startTimerOnSensor>:

void startTimerOnSensor()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <startTimerOnSensor+0x10>)
 8001cae:	f006 fa4b 	bl	8008148 <HAL_TIM_Base_Start_IT>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200003c0 	.word	0x200003c0

08001cbc <stopTimerOnSensor>:

void stopTimerOnSensor()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <stopTimerOnSensor+0x10>)
 8001cc2:	f006 fab9 	bl	8008238 <HAL_TIM_Base_Stop_IT>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200003c0 	.word	0x200003c0

08001cd0 <drawColorInfoPage>:

void drawColorInfoPage(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af08      	add	r7, sp, #32
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
	fillScreenColor(WHITE);
 8001cde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ce2:	f7fe ffb1 	bl	8000c48 <fillScreenColor>
	setRotation(SCREEN_ROTATION);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ffdd 	bl	8000ca8 <setRotation>

	startTimerOnSensor();
 8001cee:	f7ff ffdb 	bl	8001ca8 <startTimerOnSensor>
	drawRgbInfo(*redColor, *greenColor, *blueColor, *mixedColor);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	68fc      	ldr	r4, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	ad05      	add	r5, sp, #20
 8001cfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cfc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	ad02      	add	r5, sp, #8
 8001d04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	1d1a      	adds	r2, r3, #4
 8001d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d1c:	f7ff fe4c 	bl	80019b8 <drawRgbInfo>
	checkTouchHueCircle(redColor, greenColor, blueColor, mixedColor);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff ff02 	bl	8001b30 <checkTouchHueCircle>
	stopTimerOnSensor();
 8001d2c:	f7ff ffc6 	bl	8001cbc <stopTimerOnSensor>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bdb0      	pop	{r4, r5, r7, pc}

08001d38 <drawStudentInfoText>:

void drawStudentInfoText(StudentInfo studentInfo, Point endImagePoint, uint16_t textColor)
{
 8001d38:	b084      	sub	sp, #16
 8001d3a:	b5b0      	push	{r4, r5, r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af02      	add	r7, sp, #8
 8001d40:	f107 0420 	add.w	r4, r7, #32
 8001d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const int LINE_SPACEING_SIZE = 40;
 8001d48:	2328      	movs	r3, #40	; 0x28
 8001d4a:	60fb      	str	r3, [r7, #12]
	const int FONT_SIZE = 2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]

	Point infoPoint =
	{
			endImagePoint.x + 10,
 8001d50:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d54:	330a      	adds	r3, #10
 8001d56:	b2db      	uxtb	r3, r3
	Point infoPoint =
 8001d58:	713b      	strb	r3, [r7, #4]
 8001d5a:	2332      	movs	r3, #50	; 0x32
 8001d5c:	717b      	strb	r3, [r7, #5]
			50
	};

	drawTextWithColor(studentInfo.group, infoPoint.x, infoPoint.y, textColor, FONT_SIZE, WHITE);
 8001d5e:	7939      	ldrb	r1, [r7, #4]
 8001d60:	797a      	ldrb	r2, [r7, #5]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8001d6a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001d6e:	9401      	str	r4, [sp, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4603      	mov	r3, r0
 8001d74:	f107 0020 	add.w	r0, r7, #32
 8001d78:	f7fe ffd0 	bl	8000d1c <drawTextWithColor>
	drawTextWithColor(studentInfo.firstName, infoPoint.x, infoPoint.y + LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001d7c:	7939      	ldrb	r1, [r7, #4]
 8001d7e:	797a      	ldrb	r2, [r7, #5]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
 8001d90:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001d94:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001d98:	9501      	str	r5, [sp, #4]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	f7fe ffbd 	bl	8000d1c <drawTextWithColor>
	drawTextWithColor(studentInfo.lastName, infoPoint.x, infoPoint.y + 2 *LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001da2:	7939      	ldrb	r1, [r7, #4]
 8001da4:	797a      	ldrb	r2, [r7, #5]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
 8001dba:	f107 0052 	add.w	r0, r7, #82	; 0x52
 8001dbe:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001dc2:	9501      	str	r5, [sp, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	f7fe ffa8 	bl	8000d1c <drawTextWithColor>
	drawTextWithColor(studentInfo.id, infoPoint.x, infoPoint.y + 3*LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001dcc:	7939      	ldrb	r1, [r7, #4]
 8001dce:	797a      	ldrb	r2, [r7, #5]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	0040      	lsls	r0, r0, #1
 8001dd8:	4403      	add	r3, r0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
 8001de8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001dec:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001df0:	9501      	str	r5, [sp, #4]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4623      	mov	r3, r4
 8001df6:	f7fe ff91 	bl	8000d1c <drawTextWithColor>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e04:	b004      	add	sp, #16
 8001e06:	4770      	bx	lr

08001e08 <drawStudentInfoPage>:

void drawStudentInfoPage(StudentInfo studentInfo, ColorInfo colorInfo)
{
 8001e08:	b084      	sub	sp, #16
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b0a4      	sub	sp, #144	; 0x90
 8001e0e:	af18      	add	r7, sp, #96	; 0x60
 8001e10:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 8001e14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	fillScreenColor(WHITE);
 8001e18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e1c:	f7fe ff14 	bl	8000c48 <fillScreenColor>
	setRotation(SCREEN_ROTATION);
 8001e20:	2301      	movs	r3, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe ff40 	bl	8000ca8 <setRotation>
	Image *image = &studentInfo.image;
 8001e28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24

	Point endImagePoint = {
			image->drawPoint.x + image->width,
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	791a      	ldrb	r2, [r3, #4]
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	88db      	ldrh	r3, [r3, #6]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2db      	uxtb	r3, r3
	Point endImagePoint = {
 8001e3c:	f887 3020 	strb.w	r3, [r7, #32]
			image->drawPoint.y + image->height
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	795a      	ldrb	r2, [r3, #5]
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	891b      	ldrh	r3, [r3, #8]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
	Point endImagePoint = {
 8001e4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	};
	Rectangle imageArea = getImageArea(*image);
 8001e52:	f107 0018 	add.w	r0, r7, #24
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5a:	f7ff f893 	bl	8000f84 <getImageArea>

	drawImageAtPoint(*image, SCREEN_ROTATION);
 8001e5e:	2301      	movs	r3, #1
 8001e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e64:	f7fe ffa0 	bl	8000da8 <drawImageAtPoint>
	drawStudentInfoText(studentInfo, endImagePoint, colorInfo.color);
 8001e68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001e6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e6e:	8c3b      	ldrh	r3, [r7, #32]
 8001e70:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8001e74:	4668      	mov	r0, sp
 8001e76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e7a:	2258      	movs	r2, #88	; 0x58
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f008 fea6 	bl	800abce <memcpy>
 8001e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e88:	f7ff ff56 	bl	8001d38 <drawStudentInfoText>

	uint16_t xPos = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t yPos = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	85bb      	strh	r3, [r7, #44]	; 0x2c

	startTimerInStudentInfoPage();
 8001e94:	f7ff fee4 	bl	8001c60 <startTimerInStudentInfoPage>

	int isDisplaying = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (isDisplaying) {
 8001e9c:	e03f      	b.n	8001f1e <drawStudentInfoPage+0x116>
		char txt[20];
		sprintf(txt, "Count: %d", (int) count);
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <drawStudentInfoPage+0x130>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4925      	ldr	r1, [pc, #148]	; (8001f3c <drawStudentInfoPage+0x134>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f008 fdad 	bl	800aa08 <siprintf>
		drawText(txt, 10, 200, 3);
 8001eae:	1d38      	adds	r0, r7, #4
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	22c8      	movs	r2, #200	; 0xc8
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	f7fe ff04 	bl	8000cc2 <drawText>
		if (count > 4)
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <drawStudentInfoPage+0x130>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d902      	bls.n	8001ec8 <drawStudentInfoPage+0xc0>
		{
			isDisplaying = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec6:	e02a      	b.n	8001f1e <drawStudentInfoPage+0x116>
		} else if (TP_Touchpad_Pressed())
 8001ec8:	f001 fe48 	bl	8003b5c <TP_Touchpad_Pressed>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d025      	beq.n	8001f1e <drawStudentInfoPage+0x116>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fd7f 	bl	80039d8 <TP_Read_Coordinates>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d112      	bne.n	8001f06 <drawStudentInfoPage+0xfe>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d106      	bne.n	8001ef4 <drawStudentInfoPage+0xec>
				{
					xPos = position_array[1];
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
					yPos = SCREEN_HEIGHT - position_array[0];
 8001eea:	883b      	ldrh	r3, [r7, #0]
 8001eec:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001ef0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ef2:	e008      	b.n	8001f06 <drawStudentInfoPage+0xfe>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d105      	bne.n	8001f06 <drawStudentInfoPage+0xfe>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001f00:	85fb      	strh	r3, [r7, #46]	; 0x2e
					yPos = position_array[0];
 8001f02:	883b      	ldrh	r3, [r7, #0]
 8001f04:	85bb      	strh	r3, [r7, #44]	; 0x2c
				}
			}

			if (isTouchWithinRectangle(imageArea, xPos, yPos))
 8001f06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f0a:	f107 0118 	add.w	r1, r7, #24
 8001f0e:	c903      	ldmia	r1, {r0, r1}
 8001f10:	f7ff fdbf 	bl	8001a92 <isTouchWithinRectangle>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <drawStudentInfoPage+0x116>
			{
				isDisplaying = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (isDisplaying) {
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1bc      	bne.n	8001e9e <drawStudentInfoPage+0x96>
			}
		}
	}

	stopTimerInStudentInfoPage();
 8001f24:	f7ff feb2 	bl	8001c8c <stopTimerInStudentInfoPage>
}
 8001f28:	bf00      	nop
 8001f2a:	3730      	adds	r7, #48	; 0x30
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f32:	b004      	add	sp, #16
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000298 	.word	0x20000298
 8001f3c:	0800e23c 	.word	0x0800e23c

08001f40 <drawTemperatureTextAtPoint>:

void drawTemperatureTextAtPoint(float temperature, Point temperaturePosition)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f4a:	8038      	strh	r0, [r7, #0]
	char temperatureText[10];
	Rectangle temperatureArea = { temperaturePosition.x, temperaturePosition.y, temperaturePosition.x + 82, temperaturePosition.y + 20};
 8001f4c:	783b      	ldrb	r3, [r7, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	81bb      	strh	r3, [r7, #12]
 8001f52:	787b      	ldrb	r3, [r7, #1]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	81fb      	strh	r3, [r7, #14]
 8001f58:	783b      	ldrb	r3, [r7, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3352      	adds	r3, #82	; 0x52
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	823b      	strh	r3, [r7, #16]
 8001f62:	787b      	ldrb	r3, [r7, #1]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3314      	adds	r3, #20
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	827b      	strh	r3, [r7, #18]

	clearScreenArea(temperatureArea, WHITE);
 8001f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f78:	f7fe fe73 	bl	8000c62 <clearScreenArea>
	getTemperatureText(temperature, temperatureText);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4618      	mov	r0, r3
 8001f82:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f86:	f7ff fb6b 	bl	8001660 <getTemperatureText>
	drawTextAtPoint(temperatureText, temperaturePosition, 2);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	2202      	movs	r2, #2
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe feb1 	bl	8000cfa <drawTextAtPoint>
}
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <drawHumidityTextAtPoint>:

void drawHumidityTextAtPoint(float humidity, Point humidityPosition)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001faa:	8038      	strh	r0, [r7, #0]
	char temperatureText[10];
	Rectangle temperatureArea = { humidityPosition.x, humidityPosition.y, humidityPosition.x + 82, humidityPosition.y + 20};
 8001fac:	783b      	ldrb	r3, [r7, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	81bb      	strh	r3, [r7, #12]
 8001fb2:	787b      	ldrb	r3, [r7, #1]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	81fb      	strh	r3, [r7, #14]
 8001fb8:	783b      	ldrb	r3, [r7, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3352      	adds	r3, #82	; 0x52
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	823b      	strh	r3, [r7, #16]
 8001fc2:	787b      	ldrb	r3, [r7, #1]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3314      	adds	r3, #20
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	827b      	strh	r3, [r7, #18]

	clearScreenArea(temperatureArea, WHITE);
 8001fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fd8:	f7fe fe43 	bl	8000c62 <clearScreenArea>
	getHumidityText(humidity, temperatureText);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fe6:	f7ff fb51 	bl	800168c <getHumidityText>
	drawTextAtPoint(temperatureText, humidityPosition, 2);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	2202      	movs	r2, #2
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fe81 	bl	8000cfa <drawTextAtPoint>
}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_ADC_ConvCpltCallback>:
	ledBacklight->timer->Instance->CCMR3 = (10000-1) * dutyCycle;
	HAL_TIM_PWM_Start(ledBacklight->timer, ledBacklight->timerChannel);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_ADC_ConvCpltCallback+0x28>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d104      	bne.n	800201a <HAL_ADC_ConvCpltCallback+0x1a>
	{
		count++;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002018:	6013      	str	r3, [r2, #0]
	};
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200001fc 	.word	0x200001fc
 800202c:	20000298 	.word	0x20000298

08002030 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b092      	sub	sp, #72	; 0x48
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	static float humidity = 20.5;
	static uint8_t cmdBuffer[3];
	static uint8_t dataBuffer[8];

	static int isSetCommand = 0;
	if (!isSetCommand)
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d110      	bne.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		char text[50];
		sprintf(text, "AM2320 I2C DEMO Starting ...");
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	491f      	ldr	r1, [pc, #124]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002046:	4618      	mov	r0, r3
 8002048:	f008 fcde 	bl	800aa08 <siprintf>
		printOutLine(text);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fcdb 	bl	8000a0c <printOutLine>

		AM2320_setCommand(cmdBuffer);
 8002056:	481c      	ldr	r0, [pc, #112]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002058:	f7fe fcf4 	bl	8000a44 <AM2320_setCommand>
		isSetCommand = 1;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d126      	bne.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		countTimer++;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002072:	6013      	str	r3, [r2, #0]

		Point temperaturePosition = { 25, 30 };
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		Point humidityPosition = { SCREEN_WIDTH / 2 + 10, 30 };
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

		AM2320_startSensor(&hi2c1, cmdBuffer, dataBuffer);
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002086:	4910      	ldr	r1, [pc, #64]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002088:	4815      	ldr	r0, [pc, #84]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800208a:	f7fe fcf3 	bl	8000a74 <AM2320_startSensor>
		AM2320_getTemperatureAndHumidity(&temperature, &humidity, dataBuffer);
 800208e:	4a13      	ldr	r2, [pc, #76]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002090:	4914      	ldr	r1, [pc, #80]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002092:	4815      	ldr	r0, [pc, #84]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002094:	f7fe fd18 	bl	8000ac8 <AM2320_getTemperatureAndHumidity>

		drawTemperatureTextAtPoint(temperature, temperaturePosition);
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	f7ff ff4c 	bl	8001f40 <drawTemperatureTextAtPoint>
		drawHumidityTextAtPoint(humidity, humidityPosition);
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020b0:	eeb0 0a67 	vmov.f32	s0, s15
 80020b4:	f7ff ff74 	bl	8001fa0 <drawHumidityTextAtPoint>
	}
}
 80020b8:	bf00      	nop
 80020ba:	3748      	adds	r7, #72	; 0x48
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000029c 	.word	0x2000029c
 80020c4:	0800e248 	.word	0x0800e248
 80020c8:	200002a0 	.word	0x200002a0
 80020cc:	200003c0 	.word	0x200003c0
 80020d0:	200002a4 	.word	0x200002a4
 80020d4:	0800e268 	.word	0x0800e268
 80020d8:	0800e26c 	.word	0x0800e26c
 80020dc:	200002a8 	.word	0x200002a8
 80020e0:	20000244 	.word	0x20000244
 80020e4:	20000004 	.word	0x20000004
 80020e8:	20000000 	.word	0x20000000

080020ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b0c7      	sub	sp, #284	; 0x11c
 80020f0:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80020f2:	f7ff fa4b 	bl	800158c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80020f6:	f7ff fa6f 	bl	80015d8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fa:	f001 fd3f 	bl	8003b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020fe:	f000 f8fd 	bl	80022fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002102:	f7ff f83f 	bl	8001184 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002106:	f000 fd63 	bl	8002bd0 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 800210a:	f000 f9b5 	bl	8002478 <MX_SPI5_Init>
  MX_TIM1_Init();
 800210e:	f000 fb5f 	bl	80027d0 <MX_TIM1_Init>
  MX_RNG_Init();
 8002112:	f000 f969 	bl	80023e8 <MX_RNG_Init>
  MX_I2C1_Init();
 8002116:	f7ff f989 	bl	800142c <MX_I2C1_Init>
  MX_TIM2_Init();
 800211a:	f000 fbad 	bl	8002878 <MX_TIM2_Init>
  MX_ADC1_Init();
 800211e:	f7fe ff97 	bl	8001050 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002122:	f000 fbf7 	bl	8002914 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); // initial driver setup to drive ili9341
 8002126:	f001 f8eb 	bl	8003300 <ILI9341_Init>

	const uint16_t COLOR_CIRCLE_RADIUS = 22;
 800212a:	2316      	movs	r3, #22
 800212c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	ColorInfo redColor = {
 8002130:	231e      	movs	r3, #30
 8002132:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002136:	235f      	movs	r3, #95	; 0x5f
 8002138:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 800213c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002140:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002144:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002148:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			{ 30, SCREEN_HEIGHT / 4 + 35, COLOR_CIRCLE_RADIUS },
			RED,
			0
	};
	ColorInfo greenColor = {
 8002154:	231e      	movs	r3, #30
 8002156:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			{ 30, getCircleEdgeY(redColor.circle) + COLOR_CIRCLE_RADIUS + 15, COLOR_CIRCLE_RADIUS },
 800215a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800215e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002162:	f7fe ff45 	bl	8000ff0 <getCircleEdgeY>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	330f      	adds	r3, #15
 8002174:	b29b      	uxth	r3, r3
	ColorInfo greenColor = {
 8002176:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800217a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800217e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002182:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002186:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			GREEN,
			0
	};
	ColorInfo blueColor = {
 8002192:	231e      	movs	r3, #30
 8002194:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			{ 30, getCircleEdgeY(greenColor.circle) + COLOR_CIRCLE_RADIUS + 15, COLOR_CIRCLE_RADIUS },
 8002198:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800219c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021a0:	f7fe ff26 	bl	8000ff0 <getCircleEdgeY>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80021ac:	4413      	add	r3, r2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	330f      	adds	r3, #15
 80021b2:	b29b      	uxth	r3, r3
	ColorInfo blueColor = {
 80021b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80021b8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80021bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80021c0:	231f      	movs	r3, #31
 80021c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			BLUE,
			0
	};
	ColorInfo mixedColor = {
 80021ce:	2387      	movs	r3, #135	; 0x87
 80021d0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80021d4:	232d      	movs	r3, #45	; 0x2d
 80021d6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80021da:	2319      	movs	r3, #25
 80021dc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			{ SCREEN_WIDTH / 2 - 25, 45, 25 },
			convertColorToRgb565(redColor.intensity, greenColor.intensity, blueColor.intensity),
 80021e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021e4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80021e8:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80021ec:	eeb0 1a66 	vmov.f32	s2, s13
 80021f0:	eef0 0a47 	vmov.f32	s1, s14
 80021f4:	eeb0 0a67 	vmov.f32	s0, s15
 80021f8:	f7ff fa5e 	bl	80016b8 <convertColorToRgb565>
 80021fc:	4603      	mov	r3, r0
	ColorInfo mixedColor = {
 80021fe:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			0
	};

	Point redPandaImagePoint = { 30, 30 };
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <main+0x1f8>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	Image redPandaImage = {
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <main+0x1fc>)
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002216:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800221a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800221e:	2378      	movs	r3, #120	; 0x78
 8002220:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002224:	23b5      	movs	r3, #181	; 0xb5
 8002226:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
//			sunImagePoint,
//			120,
//			160
//	};

	StudentInfo myInfo =
 800222a:	4a30      	ldr	r2, [pc, #192]	; (80022ec <main+0x200>)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002230:	c303      	stmia	r3!, {r0, r1}
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	3302      	adds	r3, #2
 8002236:	0c12      	lsrs	r2, r2, #16
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	f107 030f 	add.w	r3, r7, #15
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	721a      	strb	r2, [r3, #8]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <main+0x204>)
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	ca07      	ldmia	r2, {r0, r1, r2}
 800224e:	c303      	stmia	r3!, {r0, r1}
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <main+0x208>)
 8002264:	f107 0436 	add.w	r4, r7, #54	; 0x36
 8002268:	cb07      	ldmia	r3!, {r0, r1, r2}
 800226a:	6020      	str	r0, [r4, #0]
 800226c:	6061      	str	r1, [r4, #4]
 800226e:	60a2      	str	r2, [r4, #8]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	81a3      	strh	r3, [r4, #12]
 8002274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <main+0x20c>)
 8002284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002288:	ca07      	ldmia	r2, {r0, r1, r2}
 800228a:	c303      	stmia	r3!, {r0, r1}
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002294:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002298:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800229c:	ca07      	ldmia	r2, {r0, r1, r2}
 800229e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		drawColorInfoPage(&redColor, &greenColor, &blueColor, &mixedColor);
 80022a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022aa:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80022ae:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80022b2:	f7ff fd0d 	bl	8001cd0 <drawColorInfoPage>
		drawStudentInfoPage(myInfo, mixedColor);
 80022b6:	ac16      	add	r4, sp, #88	; 0x58
 80022b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022c4:	4668      	mov	r0, sp
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2258      	movs	r2, #88	; 0x58
 80022cc:	4619      	mov	r1, r3
 80022ce:	f008 fc7e 	bl	800abce <memcpy>
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d6:	f7ff fd97 	bl	8001e08 <drawStudentInfoPage>
		delay(10);
 80022da:	200a      	movs	r0, #10
 80022dc:	f7fe fba6 	bl	8000a2c <delay>
		drawColorInfoPage(&redColor, &greenColor, &blueColor, &mixedColor);
 80022e0:	e7df      	b.n	80022a2 <main+0x1b6>
 80022e2:	bf00      	nop
 80022e4:	0800e270 	.word	0x0800e270
 80022e8:	0800e2d4 	.word	0x0800e2d4
 80022ec:	0800e274 	.word	0x0800e274
 80022f0:	0800e288 	.word	0x0800e288
 80022f4:	0800e2a8 	.word	0x0800e2a8
 80022f8:	0800e2c8 	.word	0x0800e2c8

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b094      	sub	sp, #80	; 0x50
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	2234      	movs	r2, #52	; 0x34
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f008 fbdf 	bl	800aace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002320:	f004 f8c6 	bl	80064b0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <SystemClock_Config+0xd8>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <SystemClock_Config+0xd8>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	; 0x40
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <SystemClock_Config+0xd8>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <SystemClock_Config+0xdc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <SystemClock_Config+0xdc>)
 8002342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <SystemClock_Config+0xdc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002354:	2301      	movs	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002358:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800235c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235e:	2302      	movs	r3, #2
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002368:	2304      	movs	r3, #4
 800236a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800236c:	23d8      	movs	r3, #216	; 0xd8
 800236e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002370:	2302      	movs	r3, #2
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002374:	2309      	movs	r3, #9
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002378:	2302      	movs	r3, #2
 800237a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4618      	mov	r0, r3
 8002382:	f004 f8f5 	bl	8006570 <HAL_RCC_OscConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800238c:	f000 f826 	bl	80023dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002390:	f004 f89e 	bl	80064d0 <HAL_PWREx_EnableOverDrive>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800239a:	f000 f81f 	bl	80023dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800239e:	230f      	movs	r3, #15
 80023a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a2:	2302      	movs	r3, #2
 80023a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80023b6:	f107 0308 	add.w	r3, r7, #8
 80023ba:	2107      	movs	r1, #7
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fb85 	bl	8006acc <HAL_RCC_ClockConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80023c8:	f000 f808 	bl	80023dc <Error_Handler>
  }
}
 80023cc:	bf00      	nop
 80023ce:	3750      	adds	r7, #80	; 0x50
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023e4:	e7fe      	b.n	80023e4 <Error_Handler+0x8>
	...

080023e8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_RNG_Init+0x20>)
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <MX_RNG_Init+0x24>)
 80023f0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_RNG_Init+0x20>)
 80023f4:	f005 f9b8 	bl	8007768 <HAL_RNG_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023fe:	f7ff ffed 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200002b0 	.word	0x200002b0
 800240c:	50060800 	.word	0x50060800

08002410 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a8      	sub	sp, #160	; 0xa0
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	2290      	movs	r2, #144	; 0x90
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f008 fb54 	bl	800aace <memset>
  if(rngHandle->Instance==RNG)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_RNG_MspInit+0x60>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d11b      	bne.n	8002468 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002430:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002434:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fd69 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800244c:	f7ff ffc6 	bl	80023dc <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_RNG_MspInit+0x64>)
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_RNG_MspInit+0x64>)
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	6353      	str	r3, [r2, #52]	; 0x34
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RNG_MspInit+0x64>)
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002468:	bf00      	nop
 800246a:	37a0      	adds	r7, #160	; 0xa0
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	50060800 	.word	0x50060800
 8002474:	40023800 	.word	0x40023800

08002478 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_SPI5_Init+0x74>)
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <MX_SPI5_Init+0x78>)
 8002480:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_SPI5_Init+0x74>)
 8002484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002488:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_SPI5_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_SPI5_Init+0x74>)
 8002492:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002496:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_SPI5_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_SPI5_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_SPI5_Init+0x74>)
 80024a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024aa:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_SPI5_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_SPI5_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_SPI5_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_SPI5_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_SPI5_Init+0x74>)
 80024c6:	2207      	movs	r2, #7
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_SPI5_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_SPI5_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_SPI5_Init+0x74>)
 80024d8:	f005 f970 	bl	80077bc <HAL_SPI_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80024e2:	f7ff ff7b 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200002c0 	.word	0x200002c0
 80024f0:	40015000 	.word	0x40015000

080024f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_SPI_MspInit+0x7c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d128      	bne.n	8002568 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a16      	ldr	r2, [pc, #88]	; (8002574 <HAL_SPI_MspInit+0x80>)
 800251c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002534:	f043 0320 	orr.w	r3, r3, #32
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_SPI_MspInit+0x80>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002546:	f44f 7360 	mov.w	r3, #896	; 0x380
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002558:	2305      	movs	r3, #5
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <HAL_SPI_MspInit+0x84>)
 8002564:	f002 f9e0 	bl	8004928 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002568:	bf00      	nop
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40015000 	.word	0x40015000
 8002574:	40023800 	.word	0x40023800
 8002578:	40021400 	.word	0x40021400

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_MspInit+0x44>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_MspInit+0x44>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_MspInit+0x44>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_MspInit+0x44>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_MspInit+0x44>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_MspInit+0x44>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c8:	f001 fb1e 	bl	8003c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <ADC_IRQHandler+0x10>)
 80025d6:	f001 fcb5 	bl	8003f44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200001fc 	.word	0x200001fc

080025e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM3_IRQHandler+0x10>)
 80025ea:	f005 feb5 	bl	8008358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200003c0 	.word	0x200003c0

080025f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <I2C1_EV_IRQHandler+0x10>)
 80025fe:	f002 fef7 	bl	80053f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000244 	.word	0x20000244

0800260c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <I2C1_ER_IRQHandler+0x10>)
 8002612:	f002 ff07 	bl	8005424 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000244 	.word	0x20000244

08002620 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
	return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_kill>:

int _kill(int pid, int sig) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800263a:	f008 fa9b 	bl	800ab74 <__errno>
 800263e:	4603      	mov	r3, r0
 8002640:	2216      	movs	r2, #22
 8002642:	601a      	str	r2, [r3, #0]
	return -1;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_exit>:

void _exit(int status) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ffe7 	bl	8002630 <_kill>
	while (1) {
 8002662:	e7fe      	b.n	8002662 <_exit+0x12>

08002664 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e00a      	b.n	800268c <_read+0x28>
		*ptr++ = __io_getchar();
 8002676:	f3af 8000 	nop.w
 800267a:	4601      	mov	r1, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	60ba      	str	r2, [r7, #8]
 8002682:	b2ca      	uxtb	r2, r1
 8002684:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbf0      	blt.n	8002676 <_read+0x12>
	}

	return len;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e009      	b.n	80026c4 <_write+0x26>
		__io_putchar(*ptr++);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	60ba      	str	r2, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	dbf1      	blt.n	80026b0 <_write+0x12>
	}
	return len;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_close>:

int _close(int file) {
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_fstat>:

int _fstat(int file, struct stat *st) {
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_isatty>:

int _isatty(int file) {
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
		errno = ENOMEM;
 8002770:	f008 fa00 	bl	800ab74 <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <_sbrk+0x64>)
 8002790:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20080000 	.word	0x20080000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	20000324 	.word	0x20000324
 80027a8:	200005e8 	.word	0x200005e8

080027ac <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <SystemInit+0x20>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <SystemInit+0x20>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <MX_TIM1_Init+0xa0>)
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <MX_TIM1_Init+0xa4>)
 80027f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <MX_TIM1_Init+0xa0>)
 80027f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80027fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_TIM1_Init+0xa0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <MX_TIM1_Init+0xa0>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_TIM1_Init+0xa0>)
 800280a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MX_TIM1_Init+0xa0>)
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <MX_TIM1_Init+0xa0>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800281c:	4814      	ldr	r0, [pc, #80]	; (8002870 <MX_TIM1_Init+0xa0>)
 800281e:	f005 fb6f 	bl	8007f00 <HAL_TIM_Base_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002828:	f7ff fdd8 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002832:	f107 0310 	add.w	r3, r7, #16
 8002836:	4619      	mov	r1, r3
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_TIM1_Init+0xa0>)
 800283a:	f005 ffc1 	bl	80087c0 <HAL_TIM_ConfigClockSource>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002844:	f7ff fdca 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_TIM1_Init+0xa0>)
 800285a:	f006 fc3b 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002864:	f7ff fdba 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000328 	.word	0x20000328
 8002874:	40010000 	.word	0x40010000

08002878 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0310 	add.w	r3, r7, #16
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <MX_TIM2_Init+0x98>)
 8002898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800289c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MX_TIM2_Init+0x98>)
 80028a0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80028a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_TIM2_Init+0x98>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_TIM2_Init+0x98>)
 80028ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_TIM2_Init+0x98>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_TIM2_Init+0x98>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028c0:	4813      	ldr	r0, [pc, #76]	; (8002910 <MX_TIM2_Init+0x98>)
 80028c2:	f005 fb1d 	bl	8007f00 <HAL_TIM_Base_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80028cc:	f7ff fd86 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	4619      	mov	r1, r3
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <MX_TIM2_Init+0x98>)
 80028de:	f005 ff6f 	bl	80087c0 <HAL_TIM_ConfigClockSource>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80028e8:	f7ff fd78 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028ec:	2320      	movs	r3, #32
 80028ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_TIM2_Init+0x98>)
 80028fa:	f006 fbeb 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002904:	f7ff fd6a 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000374 	.word	0x20000374

08002914 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	; 0x38
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002934:	463b      	mov	r3, r7
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	615a      	str	r2, [r3, #20]
 8002944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <MX_TIM3_Init+0xec>)
 8002948:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <MX_TIM3_Init+0xf0>)
 800294a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <MX_TIM3_Init+0xec>)
 800294e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002952:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <MX_TIM3_Init+0xec>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <MX_TIM3_Init+0xec>)
 800295c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002960:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <MX_TIM3_Init+0xec>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <MX_TIM3_Init+0xec>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800296e:	4824      	ldr	r0, [pc, #144]	; (8002a00 <MX_TIM3_Init+0xec>)
 8002970:	f005 fac6 	bl	8007f00 <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800297a:	f7ff fd2f 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002988:	4619      	mov	r1, r3
 800298a:	481d      	ldr	r0, [pc, #116]	; (8002a00 <MX_TIM3_Init+0xec>)
 800298c:	f005 ff18 	bl	80087c0 <HAL_TIM_ConfigClockSource>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002996:	f7ff fd21 	bl	80023dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800299a:	4819      	ldr	r0, [pc, #100]	; (8002a00 <MX_TIM3_Init+0xec>)
 800299c:	f005 fc7b 	bl	8008296 <HAL_TIM_PWM_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80029a6:	f7ff fd19 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	4811      	ldr	r0, [pc, #68]	; (8002a00 <MX_TIM3_Init+0xec>)
 80029ba:	f006 fb8b 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80029c4:	f7ff fd0a 	bl	80023dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029c8:	2360      	movs	r3, #96	; 0x60
 80029ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80029cc:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80029d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029da:	463b      	mov	r3, r7
 80029dc:	2200      	movs	r2, #0
 80029de:	4619      	mov	r1, r3
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <MX_TIM3_Init+0xec>)
 80029e2:	f005 fdd9 	bl	8008598 <HAL_TIM_PWM_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80029ec:	f7ff fcf6 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <MX_TIM3_Init+0xec>)
 80029f2:	f000 f87b 	bl	8002aec <HAL_TIM_MspPostInit>

}
 80029f6:	bf00      	nop
 80029f8:	3738      	adds	r7, #56	; 0x38
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200003c0 	.word	0x200003c0
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08c      	sub	sp, #48	; 0x30
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <HAL_TIM_Base_MspInit+0xd4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10c      	bne.n	8002a44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a42:	e046      	b.n	8002ad2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d128      	bne.n	8002aa0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	4812      	ldr	r0, [pc, #72]	; (8002ae4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a9a:	f001 ff45 	bl	8004928 <HAL_GPIO_Init>
}
 8002a9e:	e018      	b.n	8002ad2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_TIM_Base_MspInit+0xe0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d113      	bne.n	8002ad2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_TIM_Base_MspInit+0xd8>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	201d      	movs	r0, #29
 8002ac8:	f001 feb9 	bl	800483e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002acc:	201d      	movs	r0, #29
 8002ace:	f001 fed2 	bl	8004876 <HAL_NVIC_EnableIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	3730      	adds	r7, #48	; 0x30
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40000400 	.word	0x40000400

08002aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_TIM_MspPostInit+0x64>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d11b      	bne.n	8002b46 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_TIM_MspPostInit+0x68>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_TIM_MspPostInit+0x68>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_TIM_MspPostInit+0x68>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Temperature_and_Humidity_TIMER_Pin;
 8002b26:	2340      	movs	r3, #64	; 0x40
 8002b28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b36:	2302      	movs	r3, #2
 8002b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temperature_and_Humidity_TIMER_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <HAL_TIM_MspPostInit+0x6c>)
 8002b42:	f001 fef1 	bl	8004928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Base_MspDeInit+0x64>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
}
 8002b7a:	e01d      	b.n	8002bb8 <HAL_TIM_Base_MspDeInit+0x5c>
  else if(tim_baseHandle->Instance==TIM2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d10a      	bne.n	8002b9c <HAL_TIM_Base_MspDeInit+0x40>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 8002b92:	2120      	movs	r1, #32
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002b96:	f002 f873 	bl	8004c80 <HAL_GPIO_DeInit>
}
 8002b9a:	e00d      	b.n	8002bb8 <HAL_TIM_Base_MspDeInit+0x5c>
  else if(tim_baseHandle->Instance==TIM3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_TIM_Base_MspDeInit+0x70>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <HAL_TIM_Base_MspDeInit+0x5c>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_TIM_Base_MspDeInit+0x68>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <HAL_TIM_Base_MspDeInit+0x68>)
 8002bac:	f023 0302 	bic.w	r3, r3, #2
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8002bb2:	201d      	movs	r0, #29
 8002bb4:	f001 fe6d 	bl	8004892 <HAL_NVIC_DisableIRQ>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <MX_USART3_UART_Init+0x5c>)
 8002bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <MX_USART3_UART_Init+0x58>)
 8002c14:	f006 fb0a 	bl	800922c <HAL_UART_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002c1e:	f7ff fbdd 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000040c 	.word	0x2000040c
 8002c2c:	40004800 	.word	0x40004800

08002c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0ae      	sub	sp, #184	; 0xb8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2290      	movs	r2, #144	; 0x90
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f007 ff3c 	bl	800aace <memset>
  if(uartHandle->Instance==USART3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <HAL_UART_MspInit+0xb4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d13c      	bne.n	8002cda <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 f952 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c7a:	f7ff fbaf 	bl	80023dc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_UART_MspInit+0xb8>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_UART_MspInit+0xb8>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_UART_MspInit+0xb8>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_UART_MspInit+0xb8>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <HAL_UART_MspInit+0xb8>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_UART_MspInit+0xb8>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cc8:	2307      	movs	r3, #7
 8002cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	; (8002cec <HAL_UART_MspInit+0xbc>)
 8002cd6:	f001 fe27 	bl	8004928 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cda:	bf00      	nop
 8002cdc:	37b8      	adds	r7, #184	; 0xb8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40004800 	.word	0x40004800
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020c00 	.word	0x40020c00

08002cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf4:	480d      	ldr	r0, [pc, #52]	; (8002d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cf6:	490e      	ldr	r1, [pc, #56]	; (8002d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cfc:	e002      	b.n	8002d04 <LoopCopyDataInit>

08002cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d02:	3304      	adds	r3, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d08:	d3f9      	bcc.n	8002cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d0c:	4c0b      	ldr	r4, [pc, #44]	; (8002d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d10:	e001      	b.n	8002d16 <LoopFillZerobss>

08002d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d14:	3204      	adds	r2, #4

08002d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d18:	d3fb      	bcc.n	8002d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d1a:	f7ff fd47 	bl	80027ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f007 ff2f 	bl	800ab80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d22:	f7ff f9e3 	bl	80020ec <main>
  bx  lr    
 8002d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d34:	08019318 	.word	0x08019318
  ldr r2, =_sbss
 8002d38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d3c:	200005e4 	.word	0x200005e4

08002d40 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <BusFault_Handler>

08002d42 <ILI9341_Draw_Filled_Circle>:
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour)
{
 8002d42:	b590      	push	{r4, r7, lr}
 8002d44:	b08b      	sub	sp, #44	; 0x2c
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4608      	mov	r0, r1
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4623      	mov	r3, r4
 8002d52:	80fb      	strh	r3, [r7, #6]
 8002d54:	4603      	mov	r3, r0
 8002d56:	80bb      	strh	r3, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	f1c3 0301 	rsb	r3, r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8002d7a:	e061      	b.n	8002e40 <ILI9341_Draw_Filled_Circle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e018      	b.n	8002db8 <ILI9341_Draw_Filled_Circle+0x76>
		{
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	b298      	uxth	r0, r3
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	88bb      	ldrh	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	883a      	ldrh	r2, [r7, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	f000 fc84 	bl	80036a4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	b298      	uxth	r0, r3
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	88ba      	ldrh	r2, [r7, #4]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	883a      	ldrh	r2, [r7, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f000 fc79 	bl	80036a4 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	3301      	adds	r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dde0      	ble.n	8002d86 <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++)
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e018      	b.n	8002e00 <ILI9341_Draw_Filled_Circle+0xbe>
		{
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b298      	uxth	r0, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	88bb      	ldrh	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	883a      	ldrh	r2, [r7, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	f000 fc60 	bl	80036a4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	b298      	uxth	r0, r3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	88ba      	ldrh	r2, [r7, #4]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	883a      	ldrh	r2, [r7, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f000 fc55 	bl	80036a4 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4413      	add	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	dde0      	ble.n	8002dce <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005a      	lsls	r2, r3, #1
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	dd09      	ble.n	8002e40 <ILI9341_Draw_Filled_Circle+0xfe>
		{
			x--;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	da99      	bge.n	8002d7c <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	372c      	adds	r7, #44	; 0x2c
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}

08002e52 <ILI9341_Draw_Filled_Rectangle_Coord>:
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8002e52:	b590      	push	{r4, r7, lr}
 8002e54:	b089      	sub	sp, #36	; 0x24
 8002e56:	af02      	add	r7, sp, #8
 8002e58:	4604      	mov	r4, r0
 8002e5a:	4608      	mov	r0, r1
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4623      	mov	r3, r4
 8002e62:	80fb      	strh	r3, [r7, #6]
 8002e64:	4603      	mov	r3, r0
 8002e66:	80bb      	strh	r3, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8002e8c:	887a      	ldrh	r2, [r7, #2]
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da01      	bge.n	8002e9e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8002ea2:	883a      	ldrh	r2, [r7, #0]
 8002ea4:	88bb      	ldrh	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	da01      	bge.n	8002eb4 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	823b      	strh	r3, [r7, #16]
 8002ec6:	e005      	b.n	8002ed4 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002ed4:	7cbb      	ldrb	r3, [r7, #18]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002eda:	883a      	ldrh	r2, [r7, #0]
 8002edc:	88bb      	ldrh	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	81fb      	strh	r3, [r7, #14]
 8002ee6:	e005      	b.n	8002ef4 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002ee8:	88ba      	ldrh	r2, [r7, #4]
 8002eea:	883b      	ldrh	r3, [r7, #0]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8002ef0:	883b      	ldrh	r3, [r7, #0]
 8002ef2:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8002ef4:	8abc      	ldrh	r4, [r7, #20]
 8002ef6:	8afa      	ldrh	r2, [r7, #22]
 8002ef8:	89f9      	ldrh	r1, [r7, #14]
 8002efa:	8a38      	ldrh	r0, [r7, #16]
 8002efc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4623      	mov	r3, r4
 8002f02:	f000 fca9 	bl	8003858 <ILI9341_Draw_Rectangle>
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}
	...

08002f10 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4623      	mov	r3, r4
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	4603      	mov	r3, r0
 8002f24:	71bb      	strb	r3, [r7, #6]
 8002f26:	460b      	mov	r3, r1
 8002f28:	717b      	strb	r3, [r7, #5]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b1f      	cmp	r3, #31
 8002f36:	d802      	bhi.n	8002f3e <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	71fb      	strb	r3, [r7, #7]
 8002f3c:	e002      	b.n	8002f44 <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	3b20      	subs	r3, #32
 8002f42:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	753b      	strb	r3, [r7, #20]
 8002f48:	e012      	b.n	8002f70 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8002f4a:	7dfa      	ldrb	r2, [r7, #23]
 8002f4c:	7d38      	ldrb	r0, [r7, #20]
 8002f4e:	7d39      	ldrb	r1, [r7, #20]
 8002f50:	4c3b      	ldr	r4, [pc, #236]	; (8003040 <ILI9341_Draw_Char+0x130>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4423      	add	r3, r4
 8002f5c:	4403      	add	r3, r0
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	f101 0318 	add.w	r3, r1, #24
 8002f64:	443b      	add	r3, r7
 8002f66:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002f6a:	7d3b      	ldrb	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	753b      	strb	r3, [r7, #20]
 8002f70:	7d3b      	ldrb	r3, [r7, #20]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d9e9      	bls.n	8002f4a <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8002f76:	79bb      	ldrb	r3, [r7, #6]
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	797b      	ldrb	r3, [r7, #5]
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f80:	461a      	mov	r2, r3
 8002f82:	0052      	lsls	r2, r2, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	b29c      	uxth	r4, r3
 8002f90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4623      	mov	r3, r4
 8002f96:	f000 fc5f 	bl	8003858 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	757b      	strb	r3, [r7, #21]
 8002f9e:	e047      	b.n	8003030 <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75bb      	strb	r3, [r7, #22]
 8002fa4:	e03e      	b.n	8003024 <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 8002fa6:	7d7b      	ldrb	r3, [r7, #21]
 8002fa8:	3318      	adds	r3, #24
 8002faa:	443b      	add	r3, r7
 8002fac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	7dbb      	ldrb	r3, [r7, #22]
 8002fb4:	fa42 f303 	asr.w	r3, r2, r3
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02e      	beq.n	800301e <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 8002fc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d110      	bne.n	8002fe8 <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	7d7b      	ldrb	r3, [r7, #21]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	b298      	uxth	r0, r3
 8002fd2:	797b      	ldrb	r3, [r7, #5]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	7dbb      	ldrb	r3, [r7, #22]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f000 fb5f 	bl	80036a4 <ILI9341_Draw_Pixel>
 8002fe6:	e01a      	b.n	800301e <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8002fe8:	79bb      	ldrb	r3, [r7, #6]
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	7d7b      	ldrb	r3, [r7, #21]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002ff2:	fb11 f303 	smulbb	r3, r1, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b298      	uxth	r0, r3
 8002ffc:	797b      	ldrb	r3, [r7, #5]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	7dbb      	ldrb	r3, [r7, #22]
 8003002:	b29b      	uxth	r3, r3
 8003004:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003006:	fb11 f303 	smulbb	r3, r1, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	4413      	add	r3, r2
 800300e:	b299      	uxth	r1, r3
 8003010:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8003012:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4623      	mov	r3, r4
 800301a:	f000 fc1d 	bl	8003858 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 800301e:	7dbb      	ldrb	r3, [r7, #22]
 8003020:	3301      	adds	r3, #1
 8003022:	75bb      	strb	r3, [r7, #22]
 8003024:	7dbb      	ldrb	r3, [r7, #22]
 8003026:	2b07      	cmp	r3, #7
 8003028:	d9bd      	bls.n	8002fa6 <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 800302a:	7d7b      	ldrb	r3, [r7, #21]
 800302c:	3301      	adds	r3, #1
 800302e:	757b      	strb	r3, [r7, #21]
 8003030:	7d7b      	ldrb	r3, [r7, #21]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d9b4      	bls.n	8002fa0 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}
 8003040:	08018c9c 	.word	0x08018c9c

08003044 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b085      	sub	sp, #20
 8003048:	af02      	add	r7, sp, #8
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	70fb      	strb	r3, [r7, #3]
 8003056:	460b      	mov	r3, r1
 8003058:	70bb      	strb	r3, [r7, #2]
 800305a:	4613      	mov	r3, r2
 800305c:	803b      	strh	r3, [r7, #0]
	while (*Text)
 800305e:	e017      	b.n	8003090 <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	7818      	ldrb	r0, [r3, #0]
 8003068:	883c      	ldrh	r4, [r7, #0]
 800306a:	78ba      	ldrb	r2, [r7, #2]
 800306c:	78f9      	ldrb	r1, [r7, #3]
 800306e:	8bbb      	ldrh	r3, [r7, #28]
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	8b3b      	ldrh	r3, [r7, #24]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4623      	mov	r3, r4
 8003078:	f7ff ff4a 	bl	8002f10 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 800307c:	8b3b      	ldrh	r3, [r7, #24]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	0052      	lsls	r2, r2, #1
 8003084:	4413      	add	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	4413      	add	r3, r2
 800308e:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e3      	bne.n	8003060 <ILI9341_Draw_Text+0x1c>
	}
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
	...

080030a4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 80030a8:	f7ff f9e6 	bl	8002478 <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 80030ac:	f7fe f86a 	bl	8001184 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80030b0:	2200      	movs	r2, #0
 80030b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <ILI9341_SPI_Init+0x1c>)
 80030b8:	f001 ff06 	bl	8004ec8 <HAL_GPIO_WritePin>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40020800 	.word	0x40020800

080030c4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80030ce:	1df9      	adds	r1, r7, #7
 80030d0:	2301      	movs	r3, #1
 80030d2:	2201      	movs	r2, #1
 80030d4:	4803      	ldr	r0, [pc, #12]	; (80030e4 <ILI9341_SPI_Send+0x20>)
 80030d6:	f004 fc1c 	bl	8007912 <HAL_SPI_Transmit>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200002c0 	.word	0x200002c0

080030e8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <ILI9341_Write_Command+0x40>)
 80030fa:	f001 fee5 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80030fe:	2200      	movs	r2, #0
 8003100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003104:	4808      	ldr	r0, [pc, #32]	; (8003128 <ILI9341_Write_Command+0x40>)
 8003106:	f001 fedf 	bl	8004ec8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ffd9 	bl	80030c4 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003112:	2201      	movs	r2, #1
 8003114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <ILI9341_Write_Command+0x40>)
 800311a:	f001 fed5 	bl	8004ec8 <HAL_GPIO_WritePin>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40020800 	.word	0x40020800

0800312c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003136:	2201      	movs	r2, #1
 8003138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800313c:	480b      	ldr	r0, [pc, #44]	; (800316c <ILI9341_Write_Data+0x40>)
 800313e:	f001 fec3 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003142:	2200      	movs	r2, #0
 8003144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003148:	4808      	ldr	r0, [pc, #32]	; (800316c <ILI9341_Write_Data+0x40>)
 800314a:	f001 febd 	bl	8004ec8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ffb7 	bl	80030c4 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003156:	2201      	movs	r2, #1
 8003158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <ILI9341_Write_Data+0x40>)
 800315e:	f001 feb3 	bl	8004ec8 <HAL_GPIO_WritePin>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40020800 	.word	0x40020800

08003170 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4623      	mov	r3, r4
 8003180:	80fb      	strh	r3, [r7, #6]
 8003182:	4603      	mov	r3, r0
 8003184:	80bb      	strh	r3, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	807b      	strh	r3, [r7, #2]
 800318a:	4613      	mov	r3, r2
 800318c:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 800318e:	202a      	movs	r0, #42	; 0x2a
 8003190:	f7ff ffaa 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ffc5 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffc0 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ffb9 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ffb4 	bl	800312c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80031c4:	202b      	movs	r0, #43	; 0x2b
 80031c6:	f7ff ff8f 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 80031ca:	88bb      	ldrh	r3, [r7, #4]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ffaa 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80031d8:	88bb      	ldrh	r3, [r7, #4]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ffa5 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 80031e2:	883b      	ldrh	r3, [r7, #0]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff9e 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 80031f0:	883b      	ldrh	r3, [r7, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff99 	bl	800312c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80031fa:	202c      	movs	r0, #44	; 0x2c
 80031fc:	f7ff ff74 	bl	80030e8 <ILI9341_Write_Command>
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bd90      	pop	{r4, r7, pc}

08003208 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003212:	480b      	ldr	r0, [pc, #44]	; (8003240 <ILI9341_Reset+0x38>)
 8003214:	f001 fe58 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003218:	20c8      	movs	r0, #200	; 0xc8
 800321a:	f000 fd15 	bl	8003c48 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800321e:	2200      	movs	r2, #0
 8003220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <ILI9341_Reset+0x38>)
 8003226:	f001 fe4f 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800322a:	20c8      	movs	r0, #200	; 0xc8
 800322c:	f000 fd0c 	bl	8003c48 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003230:	2201      	movs	r2, #1
 8003232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003236:	4802      	ldr	r0, [pc, #8]	; (8003240 <ILI9341_Reset+0x38>)
 8003238:	f001 fe46 	bl	8004ec8 <HAL_GPIO_WritePin>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40020800 	.word	0x40020800

08003244 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8003252:	2036      	movs	r0, #54	; 0x36
 8003254:	f7ff ff48 	bl	80030e8 <ILI9341_Write_Command>
	HAL_Delay(1);
 8003258:	2001      	movs	r0, #1
 800325a:	f000 fcf5 	bl	8003c48 <HAL_Delay>

	switch (screen_rotation)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d837      	bhi.n	80032d4 <ILI9341_Set_Rotation+0x90>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <ILI9341_Set_Rotation+0x28>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003293 	.word	0x08003293
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080032bf 	.word	0x080032bf
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 800327c:	2048      	movs	r0, #72	; 0x48
 800327e:	f7ff ff55 	bl	800312c <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <ILI9341_Set_Rotation+0x9c>)
 8003284:	22f0      	movs	r2, #240	; 0xf0
 8003286:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <ILI9341_Set_Rotation+0xa0>)
 800328a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800328e:	801a      	strh	r2, [r3, #0]
		break;
 8003290:	e021      	b.n	80032d6 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8003292:	2028      	movs	r0, #40	; 0x28
 8003294:	f7ff ff4a 	bl	800312c <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <ILI9341_Set_Rotation+0x9c>)
 800329a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800329e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <ILI9341_Set_Rotation+0xa0>)
 80032a2:	22f0      	movs	r2, #240	; 0xf0
 80032a4:	801a      	strh	r2, [r3, #0]
		break;
 80032a6:	e016      	b.n	80032d6 <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 80032a8:	2088      	movs	r0, #136	; 0x88
 80032aa:	f7ff ff3f 	bl	800312c <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <ILI9341_Set_Rotation+0x9c>)
 80032b0:	22f0      	movs	r2, #240	; 0xf0
 80032b2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <ILI9341_Set_Rotation+0xa0>)
 80032b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032ba:	801a      	strh	r2, [r3, #0]
		break;
 80032bc:	e00b      	b.n	80032d6 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 80032be:	20e8      	movs	r0, #232	; 0xe8
 80032c0:	f7ff ff34 	bl	800312c <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <ILI9341_Set_Rotation+0x9c>)
 80032c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032ca:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <ILI9341_Set_Rotation+0xa0>)
 80032ce:	22f0      	movs	r2, #240	; 0xf0
 80032d0:	801a      	strh	r2, [r3, #0]
		break;
 80032d2:	e000      	b.n	80032d6 <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 80032d4:	bf00      	nop
	}
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000000e 	.word	0x2000000e
 80032e4:	2000000c 	.word	0x2000000c

080032e8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80032ec:	2201      	movs	r2, #1
 80032ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032f2:	4802      	ldr	r0, [pc, #8]	; (80032fc <ILI9341_Enable+0x14>)
 80032f4:	f001 fde8 	bl	8004ec8 <HAL_GPIO_WritePin>
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40020800 	.word	0x40020800

08003300 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8003304:	f7ff fff0 	bl	80032e8 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8003308:	f7ff fecc 	bl	80030a4 <ILI9341_SPI_Init>
	ILI9341_Reset();
 800330c:	f7ff ff7c 	bl	8003208 <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8003310:	2001      	movs	r0, #1
 8003312:	f7ff fee9 	bl	80030e8 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8003316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800331a:	f000 fc95 	bl	8003c48 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800331e:	20cb      	movs	r0, #203	; 0xcb
 8003320:	f7ff fee2 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8003324:	2039      	movs	r0, #57	; 0x39
 8003326:	f7ff ff01 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800332a:	202c      	movs	r0, #44	; 0x2c
 800332c:	f7ff fefe 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7ff fefb 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8003336:	2034      	movs	r0, #52	; 0x34
 8003338:	f7ff fef8 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 800333c:	2002      	movs	r0, #2
 800333e:	f7ff fef5 	bl	800312c <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8003342:	20cf      	movs	r0, #207	; 0xcf
 8003344:	f7ff fed0 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7ff feef 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800334e:	20c1      	movs	r0, #193	; 0xc1
 8003350:	f7ff feec 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8003354:	2030      	movs	r0, #48	; 0x30
 8003356:	f7ff fee9 	bl	800312c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 800335a:	20e8      	movs	r0, #232	; 0xe8
 800335c:	f7ff fec4 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8003360:	2085      	movs	r0, #133	; 0x85
 8003362:	f7ff fee3 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7ff fee0 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 800336c:	2078      	movs	r0, #120	; 0x78
 800336e:	f7ff fedd 	bl	800312c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8003372:	20ea      	movs	r0, #234	; 0xea
 8003374:	f7ff feb8 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7ff fed7 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800337e:	2000      	movs	r0, #0
 8003380:	f7ff fed4 	bl	800312c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8003384:	20ed      	movs	r0, #237	; 0xed
 8003386:	f7ff feaf 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 800338a:	2064      	movs	r0, #100	; 0x64
 800338c:	f7ff fece 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8003390:	2003      	movs	r0, #3
 8003392:	f7ff fecb 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8003396:	2012      	movs	r0, #18
 8003398:	f7ff fec8 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 800339c:	2081      	movs	r0, #129	; 0x81
 800339e:	f7ff fec5 	bl	800312c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80033a2:	20f7      	movs	r0, #247	; 0xf7
 80033a4:	f7ff fea0 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80033a8:	2020      	movs	r0, #32
 80033aa:	f7ff febf 	bl	800312c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80033ae:	20c0      	movs	r0, #192	; 0xc0
 80033b0:	f7ff fe9a 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80033b4:	2023      	movs	r0, #35	; 0x23
 80033b6:	f7ff feb9 	bl	800312c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80033ba:	20c1      	movs	r0, #193	; 0xc1
 80033bc:	f7ff fe94 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80033c0:	2010      	movs	r0, #16
 80033c2:	f7ff feb3 	bl	800312c <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80033c6:	20c5      	movs	r0, #197	; 0xc5
 80033c8:	f7ff fe8e 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80033cc:	203e      	movs	r0, #62	; 0x3e
 80033ce:	f7ff fead 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80033d2:	2028      	movs	r0, #40	; 0x28
 80033d4:	f7ff feaa 	bl	800312c <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80033d8:	20c7      	movs	r0, #199	; 0xc7
 80033da:	f7ff fe85 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80033de:	2086      	movs	r0, #134	; 0x86
 80033e0:	f7ff fea4 	bl	800312c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80033e4:	2036      	movs	r0, #54	; 0x36
 80033e6:	f7ff fe7f 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80033ea:	2048      	movs	r0, #72	; 0x48
 80033ec:	f7ff fe9e 	bl	800312c <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80033f0:	203a      	movs	r0, #58	; 0x3a
 80033f2:	f7ff fe79 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 80033f6:	2055      	movs	r0, #85	; 0x55
 80033f8:	f7ff fe98 	bl	800312c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80033fc:	20b1      	movs	r0, #177	; 0xb1
 80033fe:	f7ff fe73 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7ff fe92 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8003408:	2018      	movs	r0, #24
 800340a:	f7ff fe8f 	bl	800312c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800340e:	20b6      	movs	r0, #182	; 0xb6
 8003410:	f7ff fe6a 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8003414:	2008      	movs	r0, #8
 8003416:	f7ff fe89 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800341a:	2082      	movs	r0, #130	; 0x82
 800341c:	f7ff fe86 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8003420:	2027      	movs	r0, #39	; 0x27
 8003422:	f7ff fe83 	bl	800312c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8003426:	20f2      	movs	r0, #242	; 0xf2
 8003428:	f7ff fe5e 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800342c:	2000      	movs	r0, #0
 800342e:	f7ff fe7d 	bl	800312c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8003432:	2026      	movs	r0, #38	; 0x26
 8003434:	f7ff fe58 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8003438:	2001      	movs	r0, #1
 800343a:	f7ff fe77 	bl	800312c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800343e:	20e0      	movs	r0, #224	; 0xe0
 8003440:	f7ff fe52 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8003444:	200f      	movs	r0, #15
 8003446:	f7ff fe71 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800344a:	2031      	movs	r0, #49	; 0x31
 800344c:	f7ff fe6e 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8003450:	202b      	movs	r0, #43	; 0x2b
 8003452:	f7ff fe6b 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8003456:	200c      	movs	r0, #12
 8003458:	f7ff fe68 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800345c:	200e      	movs	r0, #14
 800345e:	f7ff fe65 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8003462:	2008      	movs	r0, #8
 8003464:	f7ff fe62 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8003468:	204e      	movs	r0, #78	; 0x4e
 800346a:	f7ff fe5f 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 800346e:	20f1      	movs	r0, #241	; 0xf1
 8003470:	f7ff fe5c 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8003474:	2037      	movs	r0, #55	; 0x37
 8003476:	f7ff fe59 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800347a:	2007      	movs	r0, #7
 800347c:	f7ff fe56 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8003480:	2010      	movs	r0, #16
 8003482:	f7ff fe53 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8003486:	2003      	movs	r0, #3
 8003488:	f7ff fe50 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800348c:	200e      	movs	r0, #14
 800348e:	f7ff fe4d 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8003492:	2009      	movs	r0, #9
 8003494:	f7ff fe4a 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff fe47 	bl	800312c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 800349e:	20e1      	movs	r0, #225	; 0xe1
 80034a0:	f7ff fe22 	bl	80030e8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7ff fe41 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80034aa:	200e      	movs	r0, #14
 80034ac:	f7ff fe3e 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80034b0:	2014      	movs	r0, #20
 80034b2:	f7ff fe3b 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80034b6:	2003      	movs	r0, #3
 80034b8:	f7ff fe38 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80034bc:	2011      	movs	r0, #17
 80034be:	f7ff fe35 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80034c2:	2007      	movs	r0, #7
 80034c4:	f7ff fe32 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80034c8:	2031      	movs	r0, #49	; 0x31
 80034ca:	f7ff fe2f 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80034ce:	20c1      	movs	r0, #193	; 0xc1
 80034d0:	f7ff fe2c 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80034d4:	2048      	movs	r0, #72	; 0x48
 80034d6:	f7ff fe29 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80034da:	2008      	movs	r0, #8
 80034dc:	f7ff fe26 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80034e0:	200f      	movs	r0, #15
 80034e2:	f7ff fe23 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80034e6:	200c      	movs	r0, #12
 80034e8:	f7ff fe20 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80034ec:	2031      	movs	r0, #49	; 0x31
 80034ee:	f7ff fe1d 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80034f2:	2036      	movs	r0, #54	; 0x36
 80034f4:	f7ff fe1a 	bl	800312c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80034f8:	200f      	movs	r0, #15
 80034fa:	f7ff fe17 	bl	800312c <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80034fe:	2011      	movs	r0, #17
 8003500:	f7ff fdf2 	bl	80030e8 <ILI9341_Write_Command>
	HAL_Delay(120);
 8003504:	2078      	movs	r0, #120	; 0x78
 8003506:	f000 fb9f 	bl	8003c48 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800350a:	2029      	movs	r0, #41	; 0x29
 800350c:	f7ff fdec 	bl	80030e8 <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003510:	2000      	movs	r0, #0
 8003512:	f7ff fe97 	bl	8003244 <ILI9341_Set_Rotation>
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800351c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003520:	b08d      	sub	sp, #52	; 0x34
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	6039      	str	r1, [r7, #0]
 8003528:	80fb      	strh	r3, [r7, #6]
 800352a:	466b      	mov	r3, sp
 800352c:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800353a:	d202      	bcs.n	8003542 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003540:	e002      	b.n	8003548 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8003542:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800354e:	4840      	ldr	r0, [pc, #256]	; (8003650 <ILI9341_Draw_Colour_Burst+0x134>)
 8003550:	f001 fcba 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003554:	2200      	movs	r2, #0
 8003556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800355a:	483d      	ldr	r0, [pc, #244]	; (8003650 <ILI9341_Draw_Colour_Burst+0x134>)
 800355c:	f001 fcb4 	bl	8004ec8 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	b29b      	uxth	r3, r3
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 800356a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800356c:	460b      	mov	r3, r1
 800356e:	3b01      	subs	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	2300      	movs	r3, #0
 8003574:	4688      	mov	r8, r1
 8003576:	4699      	mov	r9, r3
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003584:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003588:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800358c:	2300      	movs	r3, #0
 800358e:	460c      	mov	r4, r1
 8003590:	461d      	mov	r5, r3
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	00eb      	lsls	r3, r5, #3
 800359c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a0:	00e2      	lsls	r2, r4, #3
 80035a2:	1dcb      	adds	r3, r1, #7
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	ebad 0d03 	sub.w	sp, sp, r3
 80035ac:	466b      	mov	r3, sp
 80035ae:	3300      	adds	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 80035b2:	2300      	movs	r3, #0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b6:	e00e      	b.n	80035d6 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	4413      	add	r3, r2
 80035be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80035c2:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	3301      	adds	r3, #1
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	b2d1      	uxtb	r1, r2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	3302      	adds	r3, #2
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3ec      	bcc.n	80035b8 <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80035f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f8:	fb01 f202 	mul.w	r2, r1, r2
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d010      	beq.n	8003628 <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	e009      	b.n	8003620 <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	b29a      	uxth	r2, r3
 8003610:	230a      	movs	r3, #10
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	480f      	ldr	r0, [pc, #60]	; (8003654 <ILI9341_Draw_Colour_Burst+0x138>)
 8003616:	f004 f97c 	bl	8007912 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	3301      	adds	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3f1      	bcc.n	800360c <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	b29a      	uxth	r2, r3
 800362c:	230a      	movs	r3, #10
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	4808      	ldr	r0, [pc, #32]	; (8003654 <ILI9341_Draw_Colour_Burst+0x138>)
 8003632:	f004 f96e 	bl	8007912 <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003636:	2201      	movs	r2, #1
 8003638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800363c:	4804      	ldr	r0, [pc, #16]	; (8003650 <ILI9341_Draw_Colour_Burst+0x134>)
 800363e:	f001 fc43 	bl	8004ec8 <HAL_GPIO_WritePin>
 8003642:	46b5      	mov	sp, r6
}
 8003644:	bf00      	nop
 8003646:	3734      	adds	r7, #52	; 0x34
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800364e:	bf00      	nop
 8003650:	40020800 	.word	0x40020800
 8003654:	200002c0 	.word	0x200002c0

08003658 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <ILI9341_Fill_Screen+0x44>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <ILI9341_Fill_Screen+0x48>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	2100      	movs	r1, #0
 8003670:	2000      	movs	r0, #0
 8003672:	f7ff fd7d 	bl	8003170 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <ILI9341_Fill_Screen+0x44>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <ILI9341_Fill_Screen+0x48>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	461a      	mov	r2, r3
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff44 	bl	800351c <ILI9341_Draw_Colour_Burst>
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	2000000e 	.word	0x2000000e
 80036a0:	2000000c 	.word	0x2000000c

080036a4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	80fb      	strh	r3, [r7, #6]
 80036ae:	460b      	mov	r3, r1
 80036b0:	80bb      	strh	r3, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <ILI9341_Draw_Pixel+0x1a4>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	429a      	cmp	r2, r3
 80036c0:	f080 80be 	bcs.w	8003840 <ILI9341_Draw_Pixel+0x19c>
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <ILI9341_Draw_Pixel+0x1a8>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	88ba      	ldrh	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f080 80b7 	bcs.w	8003840 <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80036d2:	2200      	movs	r2, #0
 80036d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036d8:	485d      	ldr	r0, [pc, #372]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80036da:	f001 fbf5 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80036de:	2200      	movs	r2, #0
 80036e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e4:	485a      	ldr	r0, [pc, #360]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80036e6:	f001 fbef 	bl	8004ec8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 80036ea:	202a      	movs	r0, #42	; 0x2a
 80036ec:	f7ff fcea 	bl	80030c4 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80036f0:	2201      	movs	r2, #1
 80036f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f6:	4856      	ldr	r0, [pc, #344]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80036f8:	f001 fbe6 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80036fc:	2201      	movs	r2, #1
 80036fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003702:	4853      	ldr	r0, [pc, #332]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003704:	f001 fbe0 	bl	8004ec8 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370e:	4850      	ldr	r0, [pc, #320]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003710:	f001 fbda 	bl	8004ec8 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b29b      	uxth	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	753b      	strb	r3, [r7, #20]
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	3301      	adds	r3, #1
 8003728:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800372a:	b2db      	uxtb	r3, r3
 800372c:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	3301      	adds	r3, #1
 8003734:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 8003736:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8003738:	f107 0114 	add.w	r1, r7, #20
 800373c:	2301      	movs	r3, #1
 800373e:	2204      	movs	r2, #4
 8003740:	4844      	ldr	r0, [pc, #272]	; (8003854 <ILI9341_Draw_Pixel+0x1b0>)
 8003742:	f004 f8e6 	bl	8007912 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003746:	2201      	movs	r2, #1
 8003748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800374c:	4840      	ldr	r0, [pc, #256]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 800374e:	f001 fbbb 	bl	8004ec8 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003758:	483d      	ldr	r0, [pc, #244]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 800375a:	f001 fbb5 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800375e:	2200      	movs	r2, #0
 8003760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003764:	483a      	ldr	r0, [pc, #232]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003766:	f001 fbaf 	bl	8004ec8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 800376a:	202b      	movs	r0, #43	; 0x2b
 800376c:	f7ff fcaa 	bl	80030c4 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003770:	2201      	movs	r2, #1
 8003772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003776:	4836      	ldr	r0, [pc, #216]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003778:	f001 fba6 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800377c:	2201      	movs	r2, #1
 800377e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003782:	4833      	ldr	r0, [pc, #204]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003784:	f001 fba0 	bl	8004ec8 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800378e:	4830      	ldr	r0, [pc, #192]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003790:	f001 fb9a 	bl	8004ec8 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 8003794:	88bb      	ldrh	r3, [r7, #4]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b29b      	uxth	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	743b      	strb	r3, [r7, #16]
 800379e:	88bb      	ldrh	r3, [r7, #4]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 80037a4:	88bb      	ldrh	r3, [r7, #4]
 80037a6:	3301      	adds	r3, #1
 80037a8:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 80037ae:	88bb      	ldrh	r3, [r7, #4]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 80037b6:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80037b8:	f107 0110 	add.w	r1, r7, #16
 80037bc:	2301      	movs	r3, #1
 80037be:	2204      	movs	r2, #4
 80037c0:	4824      	ldr	r0, [pc, #144]	; (8003854 <ILI9341_Draw_Pixel+0x1b0>)
 80037c2:	f004 f8a6 	bl	8007912 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80037c6:	2201      	movs	r2, #1
 80037c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037cc:	4820      	ldr	r0, [pc, #128]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80037ce:	f001 fb7b 	bl	8004ec8 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80037d2:	2200      	movs	r2, #0
 80037d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037d8:	481d      	ldr	r0, [pc, #116]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80037da:	f001 fb75 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80037de:	2200      	movs	r2, #0
 80037e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037e4:	481a      	ldr	r0, [pc, #104]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80037e6:	f001 fb6f 	bl	8004ec8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80037ea:	202c      	movs	r0, #44	; 0x2c
 80037ec:	f7ff fc6a 	bl	80030c4 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80037f0:	2201      	movs	r2, #1
 80037f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037f6:	4816      	ldr	r0, [pc, #88]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 80037f8:	f001 fb66 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80037fc:	2201      	movs	r2, #1
 80037fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003802:	4813      	ldr	r0, [pc, #76]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003804:	f001 fb60 	bl	8004ec8 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003808:	2200      	movs	r2, #0
 800380a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800380e:	4810      	ldr	r0, [pc, #64]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 8003810:	f001 fb5a 	bl	8004ec8 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	b29b      	uxth	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	733b      	strb	r3, [r7, #12]
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003824:	f107 010c 	add.w	r1, r7, #12
 8003828:	2301      	movs	r3, #1
 800382a:	2202      	movs	r2, #2
 800382c:	4809      	ldr	r0, [pc, #36]	; (8003854 <ILI9341_Draw_Pixel+0x1b0>)
 800382e:	f004 f870 	bl	8007912 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003832:	2201      	movs	r2, #1
 8003834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003838:	4805      	ldr	r0, [pc, #20]	; (8003850 <ILI9341_Draw_Pixel+0x1ac>)
 800383a:	f001 fb45 	bl	8004ec8 <HAL_GPIO_WritePin>
 800383e:	e000      	b.n	8003842 <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 8003840:	bf00      	nop

}
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	2000000e 	.word	0x2000000e
 800384c:	2000000c 	.word	0x2000000c
 8003850:	40020800 	.word	0x40020800
 8003854:	200002c0 	.word	0x200002c0

08003858 <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	461a      	mov	r2, r3
 8003866:	4623      	mov	r3, r4
 8003868:	80fb      	strh	r3, [r7, #6]
 800386a:	4603      	mov	r3, r0
 800386c:	80bb      	strh	r3, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	807b      	strh	r3, [r7, #2]
 8003872:	4613      	mov	r3, r2
 8003874:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <ILI9341_Draw_Rectangle+0xb0>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	429a      	cmp	r2, r3
 8003880:	d23d      	bcs.n	80038fe <ILI9341_Draw_Rectangle+0xa6>
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <ILI9341_Draw_Rectangle+0xb4>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	88ba      	ldrh	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d237      	bcs.n	80038fe <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	4413      	add	r3, r2
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <ILI9341_Draw_Rectangle+0xb0>)
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	b292      	uxth	r2, r2
 800389a:	4293      	cmp	r3, r2
 800389c:	dd05      	ble.n	80038aa <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <ILI9341_Draw_Rectangle+0xb0>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 80038aa:	88ba      	ldrh	r2, [r7, #4]
 80038ac:	883b      	ldrh	r3, [r7, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <ILI9341_Draw_Rectangle+0xb4>)
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	b292      	uxth	r2, r2
 80038b6:	4293      	cmp	r3, r2
 80038b8:	dd05      	ble.n	80038c6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <ILI9341_Draw_Rectangle+0xb4>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	88bb      	ldrh	r3, [r7, #4]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	887b      	ldrh	r3, [r7, #2]
 80038ca:	4413      	add	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29c      	uxth	r4, r3
 80038d2:	88ba      	ldrh	r2, [r7, #4]
 80038d4:	883b      	ldrh	r3, [r7, #0]
 80038d6:	4413      	add	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	88b9      	ldrh	r1, [r7, #4]
 80038e0:	88f8      	ldrh	r0, [r7, #6]
 80038e2:	4622      	mov	r2, r4
 80038e4:	f7ff fc44 	bl	8003170 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 80038e8:	883b      	ldrh	r3, [r7, #0]
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	8b3b      	ldrh	r3, [r7, #24]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe10 	bl	800351c <ILI9341_Draw_Colour_Burst>
 80038fc:	e000      	b.n	8003900 <ILI9341_Draw_Rectangle+0xa8>
		return;
 80038fe:	bf00      	nop
}
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}
 8003906:	bf00      	nop
 8003908:	2000000e 	.word	0x2000000e
 800390c:	2000000c 	.word	0x2000000c

08003910 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 8003916:	2310      	movs	r3, #16
 8003918:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 800391e:	e019      	b.n	8003954 <TP_Read+0x44>
	{
		value <<= 1;
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003926:	2201      	movs	r2, #1
 8003928:	2108      	movs	r1, #8
 800392a:	480e      	ldr	r0, [pc, #56]	; (8003964 <TP_Read+0x54>)
 800392c:	f001 facc 	bl	8004ec8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003930:	2200      	movs	r2, #0
 8003932:	2108      	movs	r1, #8
 8003934:	480b      	ldr	r0, [pc, #44]	; (8003964 <TP_Read+0x54>)
 8003936:	f001 fac7 	bl	8004ec8 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800393a:	2110      	movs	r1, #16
 800393c:	4809      	ldr	r0, [pc, #36]	; (8003964 <TP_Read+0x54>)
 800393e:	f001 faab 	bl	8004e98 <HAL_GPIO_ReadPin>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <TP_Read+0x3e>
		{
			value++;
 8003948:	88bb      	ldrh	r3, [r7, #4]
 800394a:	3301      	adds	r3, #1
 800394c:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	3b01      	subs	r3, #1
 8003952:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e2      	bne.n	8003920 <TP_Read+0x10>
	};

	return value;
 800395a:	88bb      	ldrh	r3, [r7, #4]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000

08003968 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 8003972:	2308      	movs	r3, #8
 8003974:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003976:	2200      	movs	r2, #0
 8003978:	2108      	movs	r1, #8
 800397a:	4815      	ldr	r0, [pc, #84]	; (80039d0 <TP_Write+0x68>)
 800397c:	f001 faa4 	bl	8004ec8 <HAL_GPIO_WritePin>

	while (i > 0)
 8003980:	e01e      	b.n	80039c0 <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	2b00      	cmp	r3, #0
 8003988:	da05      	bge.n	8003996 <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800398a:	2201      	movs	r2, #1
 800398c:	2120      	movs	r1, #32
 800398e:	4810      	ldr	r0, [pc, #64]	; (80039d0 <TP_Write+0x68>)
 8003990:	f001 fa9a 	bl	8004ec8 <HAL_GPIO_WritePin>
 8003994:	e004      	b.n	80039a0 <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	2120      	movs	r1, #32
 800399a:	480d      	ldr	r0, [pc, #52]	; (80039d0 <TP_Write+0x68>)
 800399c:	f001 fa94 	bl	8004ec8 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80039a6:	2201      	movs	r2, #1
 80039a8:	2108      	movs	r1, #8
 80039aa:	4809      	ldr	r0, [pc, #36]	; (80039d0 <TP_Write+0x68>)
 80039ac:	f001 fa8c 	bl	8004ec8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2108      	movs	r1, #8
 80039b4:	4806      	ldr	r0, [pc, #24]	; (80039d0 <TP_Write+0x68>)
 80039b6:	f001 fa87 	bl	8004ec8 <HAL_GPIO_WritePin>
		i--;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	3b01      	subs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1dd      	bne.n	8003982 <TP_Write+0x1a>
	};
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	00000000 	.word	0x00000000

080039d8 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80039e0:	2201      	movs	r2, #1
 80039e2:	2108      	movs	r1, #8
 80039e4:	485a      	ldr	r0, [pc, #360]	; (8003b50 <TP_Read_Coordinates+0x178>)
 80039e6:	f001 fa6f 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80039ea:	2201      	movs	r2, #1
 80039ec:	2120      	movs	r1, #32
 80039ee:	4858      	ldr	r0, [pc, #352]	; (8003b50 <TP_Read_Coordinates+0x178>)
 80039f0:	f001 fa6a 	bl	8004ec8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80039f4:	2201      	movs	r2, #1
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	4855      	ldr	r0, [pc, #340]	; (8003b50 <TP_Read_Coordinates+0x178>)
 80039fa:	f001 fa65 	bl	8004ec8 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 8003a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0e:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2140      	movs	r1, #64	; 0x40
 8003a18:	484d      	ldr	r0, [pc, #308]	; (8003b50 <TP_Read_Coordinates+0x178>)
 8003a1a:	f001 fa55 	bl	8004ec8 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003a1e:	e023      	b.n	8003a68 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 8003a20:	2090      	movs	r0, #144	; 0x90
 8003a22:	f7ff ffa1 	bl	8003968 <TP_Write>

		rawy = TP_Read();
 8003a26:	f7ff ff73 	bl	8003910 <TP_Read>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	6a3a      	ldr	r2, [r7, #32]
 8003a32:	4413      	add	r3, r2
 8003a34:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 8003a36:	89fb      	ldrh	r3, [r7, #14]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 8003a3e:	20d0      	movs	r0, #208	; 0xd0
 8003a40:	f7ff ff92 	bl	8003968 <TP_Write>
		rawx = TP_Read();
 8003a44:	f7ff ff64 	bl	8003910 <TP_Read>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 8003a4c:	89bb      	ldrh	r3, [r7, #12]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	4413      	add	r3, r2
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 8003a54:	89bb      	ldrh	r3, [r7, #12]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
		samples--;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
		counted_samples++;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3301      	adds	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <TP_Read_Coordinates+0xa4>
 8003a6e:	2104      	movs	r1, #4
 8003a70:	4837      	ldr	r0, [pc, #220]	; (8003b50 <TP_Read_Coordinates+0x178>)
 8003a72:	f001 fa11 	bl	8004e98 <HAL_GPIO_ReadPin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0d1      	beq.n	8003a20 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2140      	movs	r1, #64	; 0x40
 8003a80:	4833      	ldr	r0, [pc, #204]	; (8003b50 <TP_Read_Coordinates+0x178>)
 8003a82:	f001 fa21 	bl	8004ec8 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8c:	d14d      	bne.n	8003b2a <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003a8e:	2104      	movs	r1, #4
 8003a90:	482f      	ldr	r0, [pc, #188]	; (8003b50 <TP_Read_Coordinates+0x178>)
 8003a92:	f001 fa01 	bl	8004e98 <HAL_GPIO_ReadPin>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d146      	bne.n	8003b2a <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8003ab8:	89bb      	ldrh	r3, [r7, #12]
 8003aba:	425b      	negs	r3, r3
 8003abc:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003ac4:	89ba      	ldrh	r2, [r7, #12]
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <TP_Read_Coordinates+0x17c>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ae2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003b48 <TP_Read_Coordinates+0x170>
 8003ae6:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003aea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003aee:	ee17 3a90 	vmov	r3, s15
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8003af8:	89fb      	ldrh	r3, [r7, #14]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <TP_Read_Coordinates+0x180>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	09db      	lsrs	r3, r3, #7
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b0f      	subs	r3, #15
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b0e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003b48 <TP_Read_Coordinates+0x170>
 8003b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3302      	adds	r3, #2
 8003b1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b1e:	ee17 2a90 	vmov	r2, s15
 8003b22:	b292      	uxth	r2, r2
 8003b24:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3302      	adds	r3, #2
 8003b34:	2200      	movs	r2, #0
 8003b36:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 8003b38:	2300      	movs	r3, #0
	}
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3728      	adds	r7, #40	; 0x28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	f3af 8000 	nop.w
 8003b48:	28f5c28f 	.word	0x28f5c28f
 8003b4c:	3ff28f5c 	.word	0x3ff28f5c
 8003b50:	40021000 	.word	0x40021000
 8003b54:	e01e01e1 	.word	0xe01e01e1
 8003b58:	a0a0a0a1 	.word	0xa0a0a0a1

08003b5c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003b60:	2104      	movs	r1, #4
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <TP_Touchpad_Pressed+0x1c>)
 8003b64:	f001 f998 	bl	8004e98 <HAL_GPIO_ReadPin>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003b72:	2300      	movs	r3, #0
	}
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_Init+0x28>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <HAL_Init+0x28>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f000 fe4b 	bl	8004828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f000 f808 	bl	8003ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b98:	f7fe fcf0 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023c00 	.word	0x40023c00

08003ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_InitTick+0x54>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_InitTick+0x58>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fe71 	bl	80048ae <HAL_SYSTICK_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e00e      	b.n	8003bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b0f      	cmp	r3, #15
 8003bda:	d80a      	bhi.n	8003bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f000 fe2b 	bl	800483e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be8:	4a06      	ldr	r2, [pc, #24]	; (8003c04 <HAL_InitTick+0x5c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000008 	.word	0x20000008
 8003c00:	20000014 	.word	0x20000014
 8003c04:	20000010 	.word	0x20000010

08003c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_IncTick+0x20>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_IncTick+0x24>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <HAL_IncTick+0x24>)
 8003c1a:	6013      	str	r3, [r2, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000014 	.word	0x20000014
 8003c2c:	20000494 	.word	0x20000494

08003c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return uwTick;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_GetTick+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000494 	.word	0x20000494

08003c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c50:	f7ff ffee 	bl	8003c30 <HAL_GetTick>
 8003c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d005      	beq.n	8003c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_Delay+0x44>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c6e:	bf00      	nop
 8003c70:	f7ff ffde 	bl	8003c30 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d8f7      	bhi.n	8003c70 <HAL_Delay+0x28>
  {
  }
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000014 	.word	0x20000014

08003c90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e031      	b.n	8003d0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd fa20 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_ADC_Init+0x84>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	f043 0202 	orr.w	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fbaa 	bl	8004438 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cfa:	e001      	b.n	8003d00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	ffffeefd 	.word	0xffffeefd

08003d18 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_Start_IT+0x1a>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0b5      	b.n	8003e9e <HAL_ADC_Start_IT+0x186>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d018      	beq.n	8003d7a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003d58:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_ADC_Start_IT+0x194>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a54      	ldr	r2, [pc, #336]	; (8003eb0 <HAL_ADC_Start_IT+0x198>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0c9a      	lsrs	r2, r3, #18
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003d6c:	e002      	b.n	8003d74 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f9      	bne.n	8003d6e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d17d      	bne.n	8003e84 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8c:	4b49      	ldr	r3, [pc, #292]	; (8003eb4 <HAL_ADC_Start_IT+0x19c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	d106      	bne.n	8003dd2 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	f023 0206 	bic.w	r2, r3, #6
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	645a      	str	r2, [r3, #68]	; 0x44
 8003dd0:	e002      	b.n	8003dd8 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003de8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <HAL_ADC_Start_IT+0x1a0>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_ADC_Start_IT+0x1a4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d143      	bne.n	8003e9c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e03a      	b.n	8003e9c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a25      	ldr	r2, [pc, #148]	; (8003ec0 <HAL_ADC_Start_IT+0x1a8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10e      	bne.n	8003e4e <HAL_ADC_Start_IT+0x136>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e4c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_ADC_Start_IT+0x1a4>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d120      	bne.n	8003e9c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <HAL_ADC_Start_IT+0x1ac>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d11b      	bne.n	8003e9c <HAL_ADC_Start_IT+0x184>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d114      	bne.n	8003e9c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	e00b      	b.n	8003e9c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0210 	orr.w	r2, r3, #16
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000008 	.word	0x20000008
 8003eb0:	431bde83 	.word	0x431bde83
 8003eb4:	fffff8fe 	.word	0xfffff8fe
 8003eb8:	04000020 	.word	0x04000020
 8003ebc:	40012300 	.word	0x40012300
 8003ec0:	40012000 	.word	0x40012000
 8003ec4:	40012200 	.word	0x40012200

08003ec8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_Stop_IT+0x16>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e027      	b.n	8003f2e <HAL_ADC_Stop_IT+0x66>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_ADC_Stop_IT+0x74>)
 8003f10:	400b      	ands	r3, r1
 8003f12:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_ADC_Stop_IT+0x78>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	fbffffdf 	.word	0xfbffffdf
 8003f40:	ffffeefe 	.word	0xffffeefe

08003f44 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d049      	beq.n	800400e <HAL_ADC_IRQHandler+0xca>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d046      	beq.n	800400e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d12b      	bne.n	8003ffe <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d127      	bne.n	8003ffe <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d119      	bne.n	8003ffe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0220 	bic.w	r2, r2, #32
 8003fd8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fffe 	bl	8002000 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0212 	mvn.w	r2, #18
 800400c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d057      	beq.n	80040d4 <HAL_ADC_IRQHandler+0x190>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d054      	beq.n	80040d4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d139      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800405a:	2b00      	cmp	r3, #0
 800405c:	d006      	beq.n	800406c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004068:	2b00      	cmp	r3, #0
 800406a:	d12b      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	d124      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11d      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800408c:	2b00      	cmp	r3, #0
 800408e:	d119      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800409e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fab1 	bl	800462c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 020c 	mvn.w	r2, #12
 80040d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d017      	beq.n	800411a <HAL_ADC_IRQHandler+0x1d6>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d014      	beq.n	800411a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10d      	bne.n	800411a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f82a 	bl	8004164 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0201 	mvn.w	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004128:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_ADC_IRQHandler+0x218>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d012      	beq.n	800415c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f043 0202 	orr.w	r2, r3, #2
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f06f 0220 	mvn.w	r2, #32
 800414a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f813 	bl	8004178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0220 	mvn.w	r2, #32
 800415a:	601a      	str	r2, [r3, #0]
  }
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x1c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e136      	b.n	8004416 <HAL_ADC_ConfigChannel+0x28a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d93a      	bls.n	800422e <HAL_ADC_ConfigChannel+0xa2>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c0:	d035      	beq.n	800422e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68d9      	ldr	r1, [r3, #12]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	4613      	mov	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	3b1e      	subs	r3, #30
 80041d8:	2207      	movs	r2, #7
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43da      	mvns	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	400a      	ands	r2, r1
 80041e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a8d      	ldr	r2, [pc, #564]	; (8004424 <HAL_ADC_ConfigChannel+0x298>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10a      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68d9      	ldr	r1, [r3, #12]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	061a      	lsls	r2, r3, #24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004206:	e035      	b.n	8004274 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	4618      	mov	r0, r3
 800421a:	4603      	mov	r3, r0
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4403      	add	r3, r0
 8004220:	3b1e      	subs	r3, #30
 8004222:	409a      	lsls	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800422c:	e022      	b.n	8004274 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6919      	ldr	r1, [r3, #16]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	2207      	movs	r2, #7
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43da      	mvns	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	400a      	ands	r2, r1
 8004250:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6919      	ldr	r1, [r3, #16]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4618      	mov	r0, r3
 8004264:	4603      	mov	r3, r0
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4403      	add	r3, r0
 800426a:	409a      	lsls	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b06      	cmp	r3, #6
 800427a:	d824      	bhi.n	80042c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	3b05      	subs	r3, #5
 800428e:	221f      	movs	r2, #31
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43da      	mvns	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	400a      	ands	r2, r1
 800429c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	3b05      	subs	r3, #5
 80042b8:	fa00 f203 	lsl.w	r2, r0, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	635a      	str	r2, [r3, #52]	; 0x34
 80042c4:	e04c      	b.n	8004360 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d824      	bhi.n	8004318 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	3b23      	subs	r3, #35	; 0x23
 80042e0:	221f      	movs	r2, #31
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	400a      	ands	r2, r1
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4618      	mov	r0, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	3b23      	subs	r3, #35	; 0x23
 800430a:	fa00 f203 	lsl.w	r2, r0, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
 8004316:	e023      	b.n	8004360 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	3b41      	subs	r3, #65	; 0x41
 800432a:	221f      	movs	r2, #31
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43da      	mvns	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	400a      	ands	r2, r1
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4618      	mov	r0, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	3b41      	subs	r3, #65	; 0x41
 8004354:	fa00 f203 	lsl.w	r2, r0, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a30      	ldr	r2, [pc, #192]	; (8004428 <HAL_ADC_ConfigChannel+0x29c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10a      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x1f4>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004372:	d105      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004374:	4b2d      	ldr	r3, [pc, #180]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4a2c      	ldr	r2, [pc, #176]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 800437a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800437e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <HAL_ADC_ConfigChannel+0x29c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10f      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x21e>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b12      	cmp	r3, #18
 8004390:	d10b      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a25      	ldr	r2, [pc, #148]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 8004398:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800439c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4a22      	ldr	r2, [pc, #136]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 80043a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_ADC_ConfigChannel+0x29c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d12b      	bne.n	800440c <HAL_ADC_ConfigChannel+0x280>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_ADC_ConfigChannel+0x298>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x23a>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b11      	cmp	r3, #17
 80043c4:	d122      	bne.n	800440c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 80043cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80043d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_ADC_ConfigChannel+0x2a0>)
 80043d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_ADC_ConfigChannel+0x298>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_ADC_ConfigChannel+0x2a4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a11      	ldr	r2, [pc, #68]	; (8004434 <HAL_ADC_ConfigChannel+0x2a8>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	0c9a      	lsrs	r2, r3, #18
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043fe:	e002      	b.n	8004406 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f9      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	10000012 	.word	0x10000012
 8004428:	40012000 	.word	0x40012000
 800442c:	40012300 	.word	0x40012300
 8004430:	20000008 	.word	0x20000008
 8004434:	431bde83 	.word	0x431bde83

08004438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004440:	4b78      	ldr	r3, [pc, #480]	; (8004624 <ADC_Init+0x1ec>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a77      	ldr	r2, [pc, #476]	; (8004624 <ADC_Init+0x1ec>)
 8004446:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800444a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800444c:	4b75      	ldr	r3, [pc, #468]	; (8004624 <ADC_Init+0x1ec>)
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4973      	ldr	r1, [pc, #460]	; (8004624 <ADC_Init+0x1ec>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	021a      	lsls	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800448c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	4a58      	ldr	r2, [pc, #352]	; (8004628 <ADC_Init+0x1f0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d022      	beq.n	8004512 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	e00f      	b.n	8004532 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004530:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0202 	bic.w	r2, r2, #2
 8004540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	005a      	lsls	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01b      	beq.n	8004598 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800457e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6859      	ldr	r1, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	3b01      	subs	r3, #1
 800458c:	035a      	lsls	r2, r3, #13
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	e007      	b.n	80045a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	051a      	lsls	r2, r3, #20
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6899      	ldr	r1, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ea:	025a      	lsls	r2, r3, #9
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	029a      	lsls	r2, r3, #10
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40012300 	.word	0x40012300
 8004628:	0f000001 	.word	0x0f000001

0800462c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <__NVIC_SetPriorityGrouping>:
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <__NVIC_SetPriorityGrouping+0x40>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800465c:	4013      	ands	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <__NVIC_SetPriorityGrouping+0x44>)
 800466a:	4313      	orrs	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800466e:	4a04      	ldr	r2, [pc, #16]	; (8004680 <__NVIC_SetPriorityGrouping+0x40>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	60d3      	str	r3, [r2, #12]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000ed00 	.word	0xe000ed00
 8004684:	05fa0000 	.word	0x05fa0000

08004688 <__NVIC_GetPriorityGrouping>:
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <__NVIC_GetPriorityGrouping+0x18>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 0307 	and.w	r3, r3, #7
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <__NVIC_EnableIRQ>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	db0b      	blt.n	80046ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	4907      	ldr	r1, [pc, #28]	; (80046dc <__NVIC_EnableIRQ+0x38>)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2001      	movs	r0, #1
 80046c6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000e100 	.word	0xe000e100

080046e0 <__NVIC_DisableIRQ>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db12      	blt.n	8004718 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	f003 021f 	and.w	r2, r3, #31
 80046f8:	490a      	ldr	r1, [pc, #40]	; (8004724 <__NVIC_DisableIRQ+0x44>)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2001      	movs	r0, #1
 8004702:	fa00 f202 	lsl.w	r2, r0, r2
 8004706:	3320      	adds	r3, #32
 8004708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800470c:	f3bf 8f4f 	dsb	sy
}
 8004710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004712:	f3bf 8f6f 	isb	sy
}
 8004716:	bf00      	nop
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000e100 	.word	0xe000e100

08004728 <__NVIC_SetPriority>:
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	6039      	str	r1, [r7, #0]
 8004732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004738:	2b00      	cmp	r3, #0
 800473a:	db0a      	blt.n	8004752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	b2da      	uxtb	r2, r3
 8004740:	490c      	ldr	r1, [pc, #48]	; (8004774 <__NVIC_SetPriority+0x4c>)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	0112      	lsls	r2, r2, #4
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	440b      	add	r3, r1
 800474c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004750:	e00a      	b.n	8004768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4908      	ldr	r1, [pc, #32]	; (8004778 <__NVIC_SetPriority+0x50>)
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	3b04      	subs	r3, #4
 8004760:	0112      	lsls	r2, r2, #4
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	440b      	add	r3, r1
 8004766:	761a      	strb	r2, [r3, #24]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000e100 	.word	0xe000e100
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <NVIC_EncodePriority>:
{
 800477c:	b480      	push	{r7}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f1c3 0307 	rsb	r3, r3, #7
 8004796:	2b04      	cmp	r3, #4
 8004798:	bf28      	it	cs
 800479a:	2304      	movcs	r3, #4
 800479c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d902      	bls.n	80047ac <NVIC_EncodePriority+0x30>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3b03      	subs	r3, #3
 80047aa:	e000      	b.n	80047ae <NVIC_EncodePriority+0x32>
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	401a      	ands	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c4:	f04f 31ff 	mov.w	r1, #4294967295
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	fa01 f303 	lsl.w	r3, r1, r3
 80047ce:	43d9      	mvns	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	4313      	orrs	r3, r2
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3724      	adds	r7, #36	; 0x24
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047f4:	d301      	bcc.n	80047fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047f6:	2301      	movs	r3, #1
 80047f8:	e00f      	b.n	800481a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <SysTick_Config+0x40>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004802:	210f      	movs	r1, #15
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	f7ff ff8e 	bl	8004728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <SysTick_Config+0x40>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <SysTick_Config+0x40>)
 8004814:	2207      	movs	r2, #7
 8004816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	e000e010 	.word	0xe000e010

08004828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff05 	bl	8004640 <__NVIC_SetPriorityGrouping>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	4603      	mov	r3, r0
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004850:	f7ff ff1a 	bl	8004688 <__NVIC_GetPriorityGrouping>
 8004854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	6978      	ldr	r0, [r7, #20]
 800485c:	f7ff ff8e 	bl	800477c <NVIC_EncodePriority>
 8004860:	4602      	mov	r2, r0
 8004862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff ff5d 	bl	8004728 <__NVIC_SetPriority>
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	4603      	mov	r3, r0
 800487e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ff0d 	bl	80046a4 <__NVIC_EnableIRQ>
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	4603      	mov	r3, r0
 800489a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ff1d 	bl	80046e0 <__NVIC_DisableIRQ>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff94 	bl	80047e4 <SysTick_Config>
 80048bc:	4603      	mov	r3, r0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d004      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2280      	movs	r2, #128	; 0x80
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e00c      	b.n	80048fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2205      	movs	r2, #5
 80048e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004918:	b2db      	uxtb	r3, r3
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e175      	b.n	8004c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004948:	2201      	movs	r2, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	429a      	cmp	r2, r3
 8004962:	f040 8164 	bne.w	8004c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d005      	beq.n	800497e <HAL_GPIO_Init+0x56>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d130      	bne.n	80049e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2203      	movs	r2, #3
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b4:	2201      	movs	r2, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 0201 	and.w	r2, r3, #1
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d017      	beq.n	8004a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2203      	movs	r2, #3
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d123      	bne.n	8004a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	08da      	lsrs	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3208      	adds	r2, #8
 8004a6a:	69b9      	ldr	r1, [r7, #24]
 8004a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0203 	and.w	r2, r3, #3
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80be 	beq.w	8004c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab2:	4b66      	ldr	r3, [pc, #408]	; (8004c4c <HAL_GPIO_Init+0x324>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	4a65      	ldr	r2, [pc, #404]	; (8004c4c <HAL_GPIO_Init+0x324>)
 8004ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004abc:	6453      	str	r3, [r2, #68]	; 0x44
 8004abe:	4b63      	ldr	r3, [pc, #396]	; (8004c4c <HAL_GPIO_Init+0x324>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004aca:	4a61      	ldr	r2, [pc, #388]	; (8004c50 <HAL_GPIO_Init+0x328>)
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	089b      	lsrs	r3, r3, #2
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	220f      	movs	r2, #15
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <HAL_GPIO_Init+0x32c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d037      	beq.n	8004b66 <HAL_GPIO_Init+0x23e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a57      	ldr	r2, [pc, #348]	; (8004c58 <HAL_GPIO_Init+0x330>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <HAL_GPIO_Init+0x23a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a56      	ldr	r2, [pc, #344]	; (8004c5c <HAL_GPIO_Init+0x334>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02b      	beq.n	8004b5e <HAL_GPIO_Init+0x236>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a55      	ldr	r2, [pc, #340]	; (8004c60 <HAL_GPIO_Init+0x338>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d025      	beq.n	8004b5a <HAL_GPIO_Init+0x232>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a54      	ldr	r2, [pc, #336]	; (8004c64 <HAL_GPIO_Init+0x33c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01f      	beq.n	8004b56 <HAL_GPIO_Init+0x22e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a53      	ldr	r2, [pc, #332]	; (8004c68 <HAL_GPIO_Init+0x340>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d019      	beq.n	8004b52 <HAL_GPIO_Init+0x22a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <HAL_GPIO_Init+0x344>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_GPIO_Init+0x226>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a51      	ldr	r2, [pc, #324]	; (8004c70 <HAL_GPIO_Init+0x348>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00d      	beq.n	8004b4a <HAL_GPIO_Init+0x222>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a50      	ldr	r2, [pc, #320]	; (8004c74 <HAL_GPIO_Init+0x34c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <HAL_GPIO_Init+0x21e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4f      	ldr	r2, [pc, #316]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d101      	bne.n	8004b42 <HAL_GPIO_Init+0x21a>
 8004b3e:	2309      	movs	r3, #9
 8004b40:	e012      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b42:	230a      	movs	r3, #10
 8004b44:	e010      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b46:	2308      	movs	r3, #8
 8004b48:	e00e      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b4a:	2307      	movs	r3, #7
 8004b4c:	e00c      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b4e:	2306      	movs	r3, #6
 8004b50:	e00a      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b52:	2305      	movs	r3, #5
 8004b54:	e008      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b56:	2304      	movs	r3, #4
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e004      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b66:	2300      	movs	r3, #0
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	f002 0203 	and.w	r2, r2, #3
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	4093      	lsls	r3, r2
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b78:	4935      	ldr	r1, [pc, #212]	; (8004c50 <HAL_GPIO_Init+0x328>)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3302      	adds	r3, #2
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b86:	4b3d      	ldr	r3, [pc, #244]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004baa:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bb0:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bd4:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bda:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bfe:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <HAL_GPIO_Init+0x354>)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	f67f ae86 	bls.w	8004948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020c00 	.word	0x40020c00
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40021400 	.word	0x40021400
 8004c6c:	40021800 	.word	0x40021800
 8004c70:	40021c00 	.word	0x40021c00
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40022400 	.word	0x40022400
 8004c7c:	40013c00 	.word	0x40013c00

08004c80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e0d9      	b.n	8004e50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4013      	ands	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	f040 80c9 	bne.w	8004e4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004cb8:	4a6b      	ldr	r2, [pc, #428]	; (8004e68 <HAL_GPIO_DeInit+0x1e8>)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	220f      	movs	r2, #15
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a63      	ldr	r2, [pc, #396]	; (8004e6c <HAL_GPIO_DeInit+0x1ec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d037      	beq.n	8004d52 <HAL_GPIO_DeInit+0xd2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a62      	ldr	r2, [pc, #392]	; (8004e70 <HAL_GPIO_DeInit+0x1f0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d031      	beq.n	8004d4e <HAL_GPIO_DeInit+0xce>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a61      	ldr	r2, [pc, #388]	; (8004e74 <HAL_GPIO_DeInit+0x1f4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02b      	beq.n	8004d4a <HAL_GPIO_DeInit+0xca>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a60      	ldr	r2, [pc, #384]	; (8004e78 <HAL_GPIO_DeInit+0x1f8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d025      	beq.n	8004d46 <HAL_GPIO_DeInit+0xc6>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a5f      	ldr	r2, [pc, #380]	; (8004e7c <HAL_GPIO_DeInit+0x1fc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01f      	beq.n	8004d42 <HAL_GPIO_DeInit+0xc2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a5e      	ldr	r2, [pc, #376]	; (8004e80 <HAL_GPIO_DeInit+0x200>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d019      	beq.n	8004d3e <HAL_GPIO_DeInit+0xbe>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a5d      	ldr	r2, [pc, #372]	; (8004e84 <HAL_GPIO_DeInit+0x204>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_GPIO_DeInit+0xba>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a5c      	ldr	r2, [pc, #368]	; (8004e88 <HAL_GPIO_DeInit+0x208>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00d      	beq.n	8004d36 <HAL_GPIO_DeInit+0xb6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a5b      	ldr	r2, [pc, #364]	; (8004e8c <HAL_GPIO_DeInit+0x20c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <HAL_GPIO_DeInit+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a5a      	ldr	r2, [pc, #360]	; (8004e90 <HAL_GPIO_DeInit+0x210>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_GPIO_DeInit+0xae>
 8004d2a:	2309      	movs	r3, #9
 8004d2c:	e012      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d2e:	230a      	movs	r3, #10
 8004d30:	e010      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d32:	2308      	movs	r3, #8
 8004d34:	e00e      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d36:	2307      	movs	r3, #7
 8004d38:	e00c      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	e00a      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d3e:	2305      	movs	r3, #5
 8004d40:	e008      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d42:	2304      	movs	r3, #4
 8004d44:	e006      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d46:	2303      	movs	r3, #3
 8004d48:	e004      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e002      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <HAL_GPIO_DeInit+0xd4>
 8004d52:	2300      	movs	r3, #0
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	f002 0203 	and.w	r2, r2, #3
 8004d5a:	0092      	lsls	r2, r2, #2
 8004d5c:	4093      	lsls	r3, r2
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d132      	bne.n	8004dca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d64:	4b4b      	ldr	r3, [pc, #300]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	4949      	ldr	r1, [pc, #292]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	4946      	ldr	r1, [pc, #280]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d80:	4b44      	ldr	r3, [pc, #272]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	4942      	ldr	r1, [pc, #264]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d8e:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	493f      	ldr	r1, [pc, #252]	; (8004e94 <HAL_GPIO_DeInit+0x214>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	220f      	movs	r2, #15
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004dac:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <HAL_GPIO_DeInit+0x1e8>)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	482a      	ldr	r0, [pc, #168]	; (8004e68 <HAL_GPIO_DeInit+0x1e8>)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	089b      	lsrs	r3, r3, #2
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	401a      	ands	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	220f      	movs	r2, #15
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	08d2      	lsrs	r2, r2, #3
 8004e00:	4019      	ands	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3208      	adds	r2, #8
 8004e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2103      	movs	r1, #3
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	2101      	movs	r1, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	401a      	ands	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b0f      	cmp	r3, #15
 8004e54:	f67f af22 	bls.w	8004c9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	40020000 	.word	0x40020000
 8004e70:	40020400 	.word	0x40020400
 8004e74:	40020800 	.word	0x40020800
 8004e78:	40020c00 	.word	0x40020c00
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40021400 	.word	0x40021400
 8004e84:	40021800 	.word	0x40021800
 8004e88:	40021c00 	.word	0x40021c00
 8004e8c:	40022000 	.word	0x40022000
 8004e90:	40022400 	.word	0x40022400
 8004e94:	40013c00 	.word	0x40013c00

08004e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	e001      	b.n	8004eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	807b      	strh	r3, [r7, #2]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ed8:	787b      	ldrb	r3, [r7, #1]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ede:	887a      	ldrh	r2, [r7, #2]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ee4:	e003      	b.n	8004eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ee6:	887b      	ldrh	r3, [r7, #2]
 8004ee8:	041a      	lsls	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	619a      	str	r2, [r3, #24]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07f      	b.n	800500e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fac2 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d107      	bne.n	8004f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	e006      	b.n	8004f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d104      	bne.n	8004f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <HAL_I2C_Init+0x11c>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	02008000 	.word	0x02008000

0800501c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	461a      	mov	r2, r3
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
 800502c:	4613      	mov	r3, r2
 800502e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	f040 80da 	bne.w	80051f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_I2C_Master_Transmit+0x30>
 8005048:	2302      	movs	r3, #2
 800504a:	e0d3      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005054:	f7fe fdec 	bl	8003c30 <HAL_GetTick>
 8005058:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2319      	movs	r3, #25
 8005060:	2201      	movs	r2, #1
 8005062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fee3 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0be      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2210      	movs	r2, #16
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	893a      	ldrh	r2, [r7, #8]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2bff      	cmp	r3, #255	; 0xff
 80050a6:	d90e      	bls.n	80050c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	22ff      	movs	r2, #255	; 0xff
 80050ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	8979      	ldrh	r1, [r7, #10]
 80050b6:	4b51      	ldr	r3, [pc, #324]	; (80051fc <HAL_I2C_Master_Transmit+0x1e0>)
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f001 f8ce 	bl	8006260 <I2C_TransferConfig>
 80050c4:	e06c      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_I2C_Master_Transmit+0x1e0>)
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f001 f8bd 	bl	8006260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050e6:	e05b      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	6a39      	ldr	r1, [r7, #32]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fee0 	bl	8005eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e07b      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d034      	beq.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d130      	bne.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fe72 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e04d      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2bff      	cmp	r3, #255	; 0xff
 8005160:	d90e      	bls.n	8005180 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	b2da      	uxtb	r2, r3
 800516e:	8979      	ldrh	r1, [r7, #10]
 8005170:	2300      	movs	r3, #0
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f001 f871 	bl	8006260 <I2C_TransferConfig>
 800517e:	e00f      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	8979      	ldrh	r1, [r7, #10]
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f001 f860 	bl	8006260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d19e      	bne.n	80050e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	6a39      	ldr	r1, [r7, #32]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 febf 	bl	8005f32 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e01a      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2220      	movs	r2, #32
 80051c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_I2C_Master_Transmit+0x1e4>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	80002000 	.word	0x80002000
 8005200:	fe00e800 	.word	0xfe00e800

08005204 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	461a      	mov	r2, r3
 8005210:	460b      	mov	r3, r1
 8005212:	817b      	strh	r3, [r7, #10]
 8005214:	4613      	mov	r3, r2
 8005216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b20      	cmp	r3, #32
 8005222:	f040 80db 	bne.w	80053dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_I2C_Master_Receive+0x30>
 8005230:	2302      	movs	r3, #2
 8005232:	e0d4      	b.n	80053de <HAL_I2C_Master_Receive+0x1da>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800523c:	f7fe fcf8 	bl	8003c30 <HAL_GetTick>
 8005240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2319      	movs	r3, #25
 8005248:	2201      	movs	r2, #1
 800524a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fdef 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0bf      	b.n	80053de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2222      	movs	r2, #34	; 0x22
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2210      	movs	r2, #16
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	893a      	ldrh	r2, [r7, #8]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2bff      	cmp	r3, #255	; 0xff
 800528e:	d90e      	bls.n	80052ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	22ff      	movs	r2, #255	; 0xff
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	b2da      	uxtb	r2, r3
 800529c:	8979      	ldrh	r1, [r7, #10]
 800529e:	4b52      	ldr	r3, [pc, #328]	; (80053e8 <HAL_I2C_Master_Receive+0x1e4>)
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 ffda 	bl	8006260 <I2C_TransferConfig>
 80052ac:	e06d      	b.n	800538a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	8979      	ldrh	r1, [r7, #10]
 80052c0:	4b49      	ldr	r3, [pc, #292]	; (80053e8 <HAL_I2C_Master_Receive+0x1e4>)
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 ffc9 	bl	8006260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052ce:	e05c      	b.n	800538a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	6a39      	ldr	r1, [r7, #32]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fe69 	bl	8005fac <I2C_WaitOnRXNEFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e07c      	b.n	80053de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d034      	beq.n	800538a <HAL_I2C_Master_Receive+0x186>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005324:	2b00      	cmp	r3, #0
 8005326:	d130      	bne.n	800538a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2200      	movs	r2, #0
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fd7d 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e04d      	b.n	80053de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2bff      	cmp	r3, #255	; 0xff
 800534a:	d90e      	bls.n	800536a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	22ff      	movs	r2, #255	; 0xff
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005356:	b2da      	uxtb	r2, r3
 8005358:	8979      	ldrh	r1, [r7, #10]
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 ff7c 	bl	8006260 <I2C_TransferConfig>
 8005368:	e00f      	b.n	800538a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005378:	b2da      	uxtb	r2, r3
 800537a:	8979      	ldrh	r1, [r7, #10]
 800537c:	2300      	movs	r3, #0
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 ff6b 	bl	8006260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d19d      	bne.n	80052d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6a39      	ldr	r1, [r7, #32]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fdca 	bl	8005f32 <I2C_WaitOnSTOPFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e01a      	b.n	80053de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2220      	movs	r2, #32
 80053ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <HAL_I2C_Master_Receive+0x1e8>)
 80053bc:	400b      	ands	r3, r1
 80053be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	80002400 	.word	0x80002400
 80053ec:	fe00e800 	.word	0xfe00e800

080053f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
  }
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00f      	beq.n	8005466 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	f043 0201 	orr.w	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005464:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00f      	beq.n	8005490 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f043 0208 	orr.w	r2, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800548e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00f      	beq.n	80054ba <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	f043 0202 	orr.w	r2, r3, #2
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 030b 	and.w	r3, r3, #11
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fb77 	bl	8005bc0 <I2C_ITError>
  }
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
 800550e:	4613      	mov	r3, r2
 8005510:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <I2C_Slave_ISR_IT+0x24>
 800557a:	2302      	movs	r3, #2
 800557c:	e0e1      	b.n	8005742 <I2C_Slave_ISR_IT+0x1e8>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800559a:	6939      	ldr	r1, [r7, #16]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f9b5 	bl	800590c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d04b      	beq.n	8005644 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d046      	beq.n	8005644 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d128      	bne.n	8005612 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b28      	cmp	r3, #40	; 0x28
 80055ca:	d108      	bne.n	80055de <I2C_Slave_ISR_IT+0x84>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055d2:	d104      	bne.n	80055de <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055d4:	6939      	ldr	r1, [r7, #16]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa9e 	bl	8005b18 <I2C_ITListenCplt>
 80055dc:	e031      	b.n	8005642 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b29      	cmp	r3, #41	; 0x29
 80055e8:	d10e      	bne.n	8005608 <I2C_Slave_ISR_IT+0xae>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055f0:	d00a      	beq.n	8005608 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2210      	movs	r2, #16
 80055f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fbd7 	bl	8005dae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f926 	bl	8005852 <I2C_ITSlaveSeqCplt>
 8005606:	e01c      	b.n	8005642 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2210      	movs	r2, #16
 800560e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005610:	e08f      	b.n	8005732 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2210      	movs	r2, #16
 8005618:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	f043 0204 	orr.w	r2, r3, #4
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <I2C_Slave_ISR_IT+0xda>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005632:	d17e      	bne.n	8005732 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	4619      	mov	r1, r3
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fac0 	bl	8005bc0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005640:	e077      	b.n	8005732 <I2C_Slave_ISR_IT+0x1d8>
 8005642:	e076      	b.n	8005732 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02f      	beq.n	80056ae <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d02a      	beq.n	80056ae <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d018      	beq.n	8005694 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d14b      	bne.n	8005736 <I2C_Slave_ISR_IT+0x1dc>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056a4:	d047      	beq.n	8005736 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f8d3 	bl	8005852 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80056ac:	e043      	b.n	8005736 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d009      	beq.n	80056cc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056c2:	6939      	ldr	r1, [r7, #16]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f840 	bl	800574a <I2C_ITAddrCplt>
 80056ca:	e035      	b.n	8005738 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d030      	beq.n	8005738 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02b      	beq.n	8005738 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d018      	beq.n	800571c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	851a      	strh	r2, [r3, #40]	; 0x28
 800571a:	e00d      	b.n	8005738 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005722:	d002      	beq.n	800572a <I2C_Slave_ISR_IT+0x1d0>
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f891 	bl	8005852 <I2C_ITSlaveSeqCplt>
 8005730:	e002      	b.n	8005738 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005736:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005760:	2b28      	cmp	r3, #40	; 0x28
 8005762:	d16a      	bne.n	800583a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	b29b      	uxth	r3, r3
 800577e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005782:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005790:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800579e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d138      	bne.n	800581a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	89bb      	ldrh	r3, [r7, #12]
 80057b0:	4053      	eors	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f003 0306 	and.w	r3, r3, #6
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11c      	bne.n	80057f6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80057bc:	897b      	ldrh	r3, [r7, #10]
 80057be:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d13b      	bne.n	800584a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2208      	movs	r2, #8
 80057de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057e8:	89ba      	ldrh	r2, [r7, #12]
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fe87 	bl	8005502 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057f4:	e029      	b.n	800584a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80057f6:	893b      	ldrh	r3, [r7, #8]
 80057f8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fd60 	bl	80062c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800580c:	89ba      	ldrh	r2, [r7, #12]
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fe75 	bl	8005502 <HAL_I2C_AddrCallback>
}
 8005818:	e017      	b.n	800584a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800581a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fd50 	bl	80062c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800582c:	89ba      	ldrh	r2, [r7, #12]
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fe65 	bl	8005502 <HAL_I2C_AddrCallback>
}
 8005838:	e007      	b.n	800584a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2208      	movs	r2, #8
 8005840:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e00c      	b.n	80058a0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800589e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b29      	cmp	r3, #41	; 0x29
 80058aa:	d112      	bne.n	80058d2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2228      	movs	r2, #40	; 0x28
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2221      	movs	r2, #33	; 0x21
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058ba:	2101      	movs	r1, #1
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fd01 	bl	80062c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff fe05 	bl	80054da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058d0:	e017      	b.n	8005902 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b2a      	cmp	r3, #42	; 0x2a
 80058dc:	d111      	bne.n	8005902 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2228      	movs	r2, #40	; 0x28
 80058e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2222      	movs	r2, #34	; 0x22
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058ec:	2102      	movs	r1, #2
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fce8 	bl	80062c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fdf6 	bl	80054ee <HAL_I2C_SlaveRxCpltCallback>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005928:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2220      	movs	r2, #32
 8005930:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b21      	cmp	r3, #33	; 0x21
 8005936:	d002      	beq.n	800593e <I2C_ITSlaveCplt+0x32>
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b29      	cmp	r3, #41	; 0x29
 800593c:	d108      	bne.n	8005950 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800593e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fcbe 	bl	80062c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2221      	movs	r2, #33	; 0x21
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
 800594e:	e00d      	b.n	800596c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b22      	cmp	r3, #34	; 0x22
 8005954:	d002      	beq.n	800595c <I2C_ITSlaveCplt+0x50>
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b2a      	cmp	r3, #42	; 0x2a
 800595a:	d107      	bne.n	800596c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800595c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fcaf 	bl	80062c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2222      	movs	r2, #34	; 0x22
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800597a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b62      	ldr	r3, [pc, #392]	; (8005b10 <I2C_ITSlaveCplt+0x204>)
 8005988:	400b      	ands	r3, r1
 800598a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa0e 	bl	8005dae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d013      	beq.n	80059c4 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01f      	beq.n	80059f4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c2:	e017      	b.n	80059f4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d012      	beq.n	80059f4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d020      	beq.n	8005a40 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 0304 	bic.w	r3, r3, #4
 8005a04:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f043 0204 	orr.w	r2, r3, #4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f8a4 	bl	8005bc0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b28      	cmp	r3, #40	; 0x28
 8005a82:	d141      	bne.n	8005b08 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f846 	bl	8005b18 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a8c:	e03c      	b.n	8005b08 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a96:	d014      	beq.n	8005ac2 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff feda 	bl	8005852 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <I2C_ITSlaveCplt+0x208>)
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fd2f 	bl	800551e <HAL_I2C_ListenCpltCallback>
}
 8005ac0:	e022      	b.n	8005b08 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b22      	cmp	r3, #34	; 0x22
 8005acc:	d10e      	bne.n	8005aec <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fd02 	bl	80054ee <HAL_I2C_SlaveRxCpltCallback>
}
 8005aea:	e00d      	b.n	8005b08 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fce9 	bl	80054da <HAL_I2C_SlaveTxCpltCallback>
}
 8005b08:	bf00      	nop
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	fe00e800 	.word	0xfe00e800
 8005b14:	ffff0000 	.word	0xffff0000

08005b18 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <I2C_ITListenCplt+0xa4>)
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d022      	beq.n	8005b94 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d012      	beq.n	8005b94 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f043 0204 	orr.w	r2, r3, #4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b94:	f248 0103 	movw	r1, #32771	; 0x8003
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fb93 	bl	80062c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fcb5 	bl	800551e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	ffff0000 	.word	0xffff0000

08005bc0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a5d      	ldr	r2, [pc, #372]	; (8005d54 <I2C_ITError+0x194>)
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b28      	cmp	r3, #40	; 0x28
 8005bf6:	d005      	beq.n	8005c04 <I2C_ITError+0x44>
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b29      	cmp	r3, #41	; 0x29
 8005bfc:	d002      	beq.n	8005c04 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b2a      	cmp	r3, #42	; 0x2a
 8005c02:	d10b      	bne.n	8005c1c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c04:	2103      	movs	r1, #3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fb5c 	bl	80062c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2228      	movs	r2, #40	; 0x28
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a50      	ldr	r2, [pc, #320]	; (8005d58 <I2C_ITError+0x198>)
 8005c18:	635a      	str	r2, [r3, #52]	; 0x34
 8005c1a:	e011      	b.n	8005c40 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c1c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb4f 	bl	80062c4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b60      	cmp	r3, #96	; 0x60
 8005c30:	d003      	beq.n	8005c3a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d039      	beq.n	8005cc2 <I2C_ITError+0x102>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b11      	cmp	r3, #17
 8005c52:	d002      	beq.n	8005c5a <I2C_ITError+0x9a>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b21      	cmp	r3, #33	; 0x21
 8005c58:	d133      	bne.n	8005cc2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c68:	d107      	bne.n	8005c7a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c78:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fe43 	bl	800490a <HAL_DMA_GetState>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d017      	beq.n	8005cba <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	4a33      	ldr	r2, [pc, #204]	; (8005d5c <I2C_ITError+0x19c>)
 8005c90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fe11 	bl	80048c6 <HAL_DMA_Abort_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04d      	beq.n	8005d46 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cb8:	e045      	b.n	8005d46 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f850 	bl	8005d60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cc0:	e041      	b.n	8005d46 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d039      	beq.n	8005d3e <I2C_ITError+0x17e>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b12      	cmp	r3, #18
 8005cce:	d002      	beq.n	8005cd6 <I2C_ITError+0x116>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b22      	cmp	r3, #34	; 0x22
 8005cd4:	d133      	bne.n	8005d3e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce4:	d107      	bne.n	8005cf6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fe05 	bl	800490a <HAL_DMA_GetState>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d017      	beq.n	8005d36 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <I2C_ITError+0x19c>)
 8005d0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fdd3 	bl	80048c6 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d34:	e009      	b.n	8005d4a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f812 	bl	8005d60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d3c:	e005      	b.n	8005d4a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f80e 	bl	8005d60 <I2C_TreatErrorCallback>
  }
}
 8005d44:	e002      	b.n	8005d4c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d4a:	bf00      	nop
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	ffff0000 	.word	0xffff0000
 8005d58:	0800555b 	.word	0x0800555b
 8005d5c:	08005df7 	.word	0x08005df7

08005d60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b60      	cmp	r3, #96	; 0x60
 8005d72:	d10e      	bne.n	8005d92 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fbdb 	bl	8005546 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d90:	e009      	b.n	8005da6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fbc6 	bl	8005532 <HAL_I2C_ErrorCallback>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d103      	bne.n	8005dcc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d007      	beq.n	8005dea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	619a      	str	r2, [r3, #24]
  }
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	2200      	movs	r2, #0
 8005e12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	2200      	movs	r2, #0
 8005e22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ff9b 	bl	8005d60 <I2C_TreatErrorCallback>
}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e42:	e022      	b.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d01e      	beq.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fd fef0 	bl	8003c30 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d113      	bne.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e00f      	b.n	8005eaa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	bf0c      	ite	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d0cd      	beq.n	8005e44 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ebe:	e02c      	b.n	8005f1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f8eb 	bl	80060a0 <I2C_IsErrorOccurred>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e02a      	b.n	8005f2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d01e      	beq.n	8005f1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005edc:	f7fd fea8 	bl	8003c30 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d113      	bne.n	8005f1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e007      	b.n	8005f2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d1cb      	bne.n	8005ec0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f3e:	e028      	b.n	8005f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f8ab 	bl	80060a0 <I2C_IsErrorOccurred>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e026      	b.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f54:	f7fd fe6c 	bl	8003c30 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d113      	bne.n	8005f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e007      	b.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d1cf      	bne.n	8005f40 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb8:	e064      	b.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f86e 	bl	80060a0 <I2C_IsErrorOccurred>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e062      	b.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d138      	bne.n	800604e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d105      	bne.n	8005ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e04e      	b.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b10      	cmp	r3, #16
 8006002:	d107      	bne.n	8006014 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2210      	movs	r2, #16
 800600a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2204      	movs	r2, #4
 8006010:	645a      	str	r2, [r3, #68]	; 0x44
 8006012:	e002      	b.n	800601a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2220      	movs	r2, #32
 8006020:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b1b      	ldr	r3, [pc, #108]	; (800609c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800602e:	400b      	ands	r3, r1
 8006030:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e022      	b.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fd fdef 	bl	8003c30 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e007      	b.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b04      	cmp	r3, #4
 8006090:	d193      	bne.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	fe00e800 	.word	0xfe00e800

080060a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d068      	beq.n	800619e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2210      	movs	r2, #16
 80060d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060d4:	e049      	b.n	800616a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d045      	beq.n	800616a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fd fda7 	bl	8003c30 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_IsErrorOccurred+0x54>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d13a      	bne.n	800616a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d121      	bne.n	800615c <I2C_IsErrorOccurred+0xbc>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800611e:	d01d      	beq.n	800615c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	2b20      	cmp	r3, #32
 8006124:	d01a      	beq.n	800615c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006136:	f7fd fd7b 	bl	8003c30 <HAL_GetTick>
 800613a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800613c:	e00e      	b.n	800615c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800613e:	f7fd fd77 	bl	8003c30 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b19      	cmp	r3, #25
 800614a:	d907      	bls.n	800615c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	f043 0320 	orr.w	r3, r3, #32
 8006152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800615a:	e006      	b.n	800616a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d1e9      	bne.n	800613e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b20      	cmp	r3, #32
 8006176:	d003      	beq.n	8006180 <I2C_IsErrorOccurred+0xe0>
 8006178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0aa      	beq.n	80060d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2220      	movs	r2, #32
 800618e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	f043 0304 	orr.w	r3, r3, #4
 8006196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	f043 0308 	orr.w	r3, r3, #8
 80061d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	f043 0302 	orr.w	r3, r3, #2
 80061fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800620c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01c      	beq.n	800624e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff fdca 	bl	8005dae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6859      	ldr	r1, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4b0d      	ldr	r3, [pc, #52]	; (800625c <I2C_IsErrorOccurred+0x1bc>)
 8006226:	400b      	ands	r3, r1
 8006228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800624e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006252:	4618      	mov	r0, r3
 8006254:	3728      	adds	r7, #40	; 0x28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	fe00e800 	.word	0xfe00e800

08006260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	817b      	strh	r3, [r7, #10]
 800626e:	4613      	mov	r3, r2
 8006270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006278:	7a7b      	ldrb	r3, [r7, #9]
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	4313      	orrs	r3, r2
 800628a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800628e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	0d5b      	lsrs	r3, r3, #21
 800629a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800629e:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <I2C_TransferConfig+0x60>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	43db      	mvns	r3, r3
 80062a4:	ea02 0103 	and.w	r1, r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	03ff63ff 	.word	0x03ff63ff

080062c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00f      	beq.n	80062fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80062e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062f2:	2b28      	cmp	r3, #40	; 0x28
 80062f4:	d003      	beq.n	80062fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80062fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00f      	beq.n	8006328 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800630e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800631c:	2b28      	cmp	r3, #40	; 0x28
 800631e:	d003      	beq.n	8006328 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006326:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	da03      	bge.n	8006338 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006336:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006338:	887b      	ldrh	r3, [r7, #2]
 800633a:	2b10      	cmp	r3, #16
 800633c:	d103      	bne.n	8006346 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006344:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006346:	887b      	ldrh	r3, [r7, #2]
 8006348:	2b20      	cmp	r3, #32
 800634a:	d103      	bne.n	8006354 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f043 0320 	orr.w	r3, r3, #32
 8006352:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d103      	bne.n	8006362 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006360:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6819      	ldr	r1, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	43da      	mvns	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	400a      	ands	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
}
 8006374:	bf00      	nop
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	d138      	bne.n	8006408 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e032      	b.n	800640a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	e000      	b.n	800640a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006408:	2302      	movs	r3, #2
  }
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b20      	cmp	r3, #32
 800642a:	d139      	bne.n	80064a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006436:	2302      	movs	r3, #2
 8006438:	e033      	b.n	80064a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	; 0x24
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006468:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a04      	ldr	r2, [pc, #16]	; (80064cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40007000 	.word	0x40007000

080064d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064da:	4b23      	ldr	r3, [pc, #140]	; (8006568 <HAL_PWREx_EnableOverDrive+0x98>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e4:	6413      	str	r3, [r2, #64]	; 0x40
 80064e6:	4b20      	ldr	r3, [pc, #128]	; (8006568 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1d      	ldr	r2, [pc, #116]	; (800656c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064fe:	f7fd fb97 	bl	8003c30 <HAL_GetTick>
 8006502:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006504:	e009      	b.n	800651a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006506:	f7fd fb93 	bl	8003c30 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006514:	d901      	bls.n	800651a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e022      	b.n	8006560 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800651a:	4b14      	ldr	r3, [pc, #80]	; (800656c <HAL_PWREx_EnableOverDrive+0x9c>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006526:	d1ee      	bne.n	8006506 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006528:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_PWREx_EnableOverDrive+0x9c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0f      	ldr	r2, [pc, #60]	; (800656c <HAL_PWREx_EnableOverDrive+0x9c>)
 800652e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006532:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006534:	f7fd fb7c 	bl	8003c30 <HAL_GetTick>
 8006538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800653a:	e009      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800653c:	f7fd fb78 	bl	8003c30 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654a:	d901      	bls.n	8006550 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e007      	b.n	8006560 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800655c:	d1ee      	bne.n	800653c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40023800 	.word	0x40023800
 800656c:	40007000 	.word	0x40007000

08006570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006578:	2300      	movs	r3, #0
 800657a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e29b      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 8087 	beq.w	80066a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006594:	4b96      	ldr	r3, [pc, #600]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	2b04      	cmp	r3, #4
 800659e:	d00c      	beq.n	80065ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a0:	4b93      	ldr	r3, [pc, #588]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 030c 	and.w	r3, r3, #12
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d112      	bne.n	80065d2 <HAL_RCC_OscConfig+0x62>
 80065ac:	4b90      	ldr	r3, [pc, #576]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b8:	d10b      	bne.n	80065d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ba:	4b8d      	ldr	r3, [pc, #564]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d06c      	beq.n	80066a0 <HAL_RCC_OscConfig+0x130>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d168      	bne.n	80066a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e275      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	d106      	bne.n	80065ea <HAL_RCC_OscConfig+0x7a>
 80065dc:	4b84      	ldr	r3, [pc, #528]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a83      	ldr	r2, [pc, #524]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	e02e      	b.n	8006648 <HAL_RCC_OscConfig+0xd8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10c      	bne.n	800660c <HAL_RCC_OscConfig+0x9c>
 80065f2:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a7e      	ldr	r2, [pc, #504]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80065f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4b7c      	ldr	r3, [pc, #496]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a7b      	ldr	r2, [pc, #492]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e01d      	b.n	8006648 <HAL_RCC_OscConfig+0xd8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006614:	d10c      	bne.n	8006630 <HAL_RCC_OscConfig+0xc0>
 8006616:	4b76      	ldr	r3, [pc, #472]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a75      	ldr	r2, [pc, #468]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800661c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b73      	ldr	r3, [pc, #460]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a72      	ldr	r2, [pc, #456]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e00b      	b.n	8006648 <HAL_RCC_OscConfig+0xd8>
 8006630:	4b6f      	ldr	r3, [pc, #444]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6e      	ldr	r2, [pc, #440]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	4b6c      	ldr	r3, [pc, #432]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a6b      	ldr	r2, [pc, #428]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d013      	beq.n	8006678 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fd faee 	bl	8003c30 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006658:	f7fd faea 	bl	8003c30 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b64      	cmp	r3, #100	; 0x64
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e229      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	4b61      	ldr	r3, [pc, #388]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0xe8>
 8006676:	e014      	b.n	80066a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006678:	f7fd fada 	bl	8003c30 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006680:	f7fd fad6 	bl	8003c30 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b64      	cmp	r3, #100	; 0x64
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e215      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	4b57      	ldr	r3, [pc, #348]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f0      	bne.n	8006680 <HAL_RCC_OscConfig+0x110>
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d069      	beq.n	8006782 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ae:	4b50      	ldr	r3, [pc, #320]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ba:	4b4d      	ldr	r3, [pc, #308]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d11c      	bne.n	8006700 <HAL_RCC_OscConfig+0x190>
 80066c6:	4b4a      	ldr	r3, [pc, #296]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d116      	bne.n	8006700 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d2:	4b47      	ldr	r3, [pc, #284]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_RCC_OscConfig+0x17a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d001      	beq.n	80066ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e1e9      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ea:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	493d      	ldr	r1, [pc, #244]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fe:	e040      	b.n	8006782 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d023      	beq.n	8006750 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006708:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a38      	ldr	r2, [pc, #224]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006714:	f7fd fa8c 	bl	8003c30 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800671c:	f7fd fa88 	bl	8003c30 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e1c7      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672e:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673a:	4b2d      	ldr	r3, [pc, #180]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4929      	ldr	r1, [pc, #164]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800674a:	4313      	orrs	r3, r2
 800674c:	600b      	str	r3, [r1, #0]
 800674e:	e018      	b.n	8006782 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006750:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fd fa68 	bl	8003c30 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006764:	f7fd fa64 	bl	8003c30 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e1a3      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006776:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d038      	beq.n	8006800 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d019      	beq.n	80067ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006796:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a2:	f7fd fa45 	bl	8003c30 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fd fa41 	bl	8003c30 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e180      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80067be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f0      	beq.n	80067aa <HAL_RCC_OscConfig+0x23a>
 80067c8:	e01a      	b.n	8006800 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80067cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ce:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <HAL_RCC_OscConfig+0x280>)
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d6:	f7fd fa2b 	bl	8003c30 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067dc:	e00a      	b.n	80067f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067de:	f7fd fa27 	bl	8003c30 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d903      	bls.n	80067f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e166      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
 80067f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f4:	4b92      	ldr	r3, [pc, #584]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80067f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1ee      	bne.n	80067de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80a4 	beq.w	8006956 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680e:	4b8c      	ldr	r3, [pc, #560]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800681a:	4b89      	ldr	r3, [pc, #548]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a88      	ldr	r2, [pc, #544]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006824:	6413      	str	r3, [r2, #64]	; 0x40
 8006826:	4b86      	ldr	r3, [pc, #536]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006836:	4b83      	ldr	r3, [pc, #524]	; (8006a44 <HAL_RCC_OscConfig+0x4d4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d118      	bne.n	8006874 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006842:	4b80      	ldr	r3, [pc, #512]	; (8006a44 <HAL_RCC_OscConfig+0x4d4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a7f      	ldr	r2, [pc, #508]	; (8006a44 <HAL_RCC_OscConfig+0x4d4>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684e:	f7fd f9ef 	bl	8003c30 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006854:	e008      	b.n	8006868 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006856:	f7fd f9eb 	bl	8003c30 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b64      	cmp	r3, #100	; 0x64
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e12a      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006868:	4b76      	ldr	r3, [pc, #472]	; (8006a44 <HAL_RCC_OscConfig+0x4d4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d106      	bne.n	800688a <HAL_RCC_OscConfig+0x31a>
 800687c:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	4a6f      	ldr	r2, [pc, #444]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	6713      	str	r3, [r2, #112]	; 0x70
 8006888:	e02d      	b.n	80068e6 <HAL_RCC_OscConfig+0x376>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10c      	bne.n	80068ac <HAL_RCC_OscConfig+0x33c>
 8006892:	4b6b      	ldr	r3, [pc, #428]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	4a6a      	ldr	r2, [pc, #424]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	6713      	str	r3, [r2, #112]	; 0x70
 800689e:	4b68      	ldr	r3, [pc, #416]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4a67      	ldr	r2, [pc, #412]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068a4:	f023 0304 	bic.w	r3, r3, #4
 80068a8:	6713      	str	r3, [r2, #112]	; 0x70
 80068aa:	e01c      	b.n	80068e6 <HAL_RCC_OscConfig+0x376>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d10c      	bne.n	80068ce <HAL_RCC_OscConfig+0x35e>
 80068b4:	4b62      	ldr	r3, [pc, #392]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	4a61      	ldr	r2, [pc, #388]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	6713      	str	r3, [r2, #112]	; 0x70
 80068c0:	4b5f      	ldr	r3, [pc, #380]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	4a5e      	ldr	r2, [pc, #376]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	; 0x70
 80068cc:	e00b      	b.n	80068e6 <HAL_RCC_OscConfig+0x376>
 80068ce:	4b5c      	ldr	r3, [pc, #368]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	4a5b      	ldr	r2, [pc, #364]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	; 0x70
 80068da:	4b59      	ldr	r3, [pc, #356]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	4a58      	ldr	r2, [pc, #352]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d015      	beq.n	800691a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ee:	f7fd f99f 	bl	8003c30 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fd f99b 	bl	8003c30 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e0d8      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	4b4c      	ldr	r3, [pc, #304]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ee      	beq.n	80068f6 <HAL_RCC_OscConfig+0x386>
 8006918:	e014      	b.n	8006944 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691a:	f7fd f989 	bl	8003c30 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006920:	e00a      	b.n	8006938 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006922:	f7fd f985 	bl	8003c30 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006930:	4293      	cmp	r3, r2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e0c2      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006938:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ee      	bne.n	8006922 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d105      	bne.n	8006956 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694a:	4b3d      	ldr	r3, [pc, #244]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	4a3c      	ldr	r2, [pc, #240]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006954:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 80ae 	beq.w	8006abc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006960:	4b37      	ldr	r3, [pc, #220]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b08      	cmp	r3, #8
 800696a:	d06d      	beq.n	8006a48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d14b      	bne.n	8006a0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006974:	4b32      	ldr	r3, [pc, #200]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a31      	ldr	r2, [pc, #196]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800697a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800697e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006980:	f7fd f956 	bl	8003c30 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006988:	f7fd f952 	bl	8003c30 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e091      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699a:	4b29      	ldr	r3, [pc, #164]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69da      	ldr	r2, [r3, #28]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	019b      	lsls	r3, r3, #6
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	3b01      	subs	r3, #1
 80069c0:	041b      	lsls	r3, r3, #16
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	061b      	lsls	r3, r3, #24
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	071b      	lsls	r3, r3, #28
 80069d2:	491b      	ldr	r1, [pc, #108]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 80069de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e4:	f7fd f924 	bl	8003c30 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fd f920 	bl	8003c30 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e05f      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x47c>
 8006a0a:	e057      	b.n	8006abc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7fd f90a 	bl	8003c30 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fd f906 	bl	8003c30 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e045      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a32:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <HAL_RCC_OscConfig+0x4d0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4b0>
 8006a3e:	e03d      	b.n	8006abc <HAL_RCC_OscConfig+0x54c>
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a48:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <HAL_RCC_OscConfig+0x558>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d030      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d129      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d122      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a78:	4013      	ands	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d119      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	3b01      	subs	r3, #1
 8006a92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d10f      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40023800 	.word	0x40023800

08006acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0d0      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b6a      	ldr	r3, [pc, #424]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d910      	bls.n	8006b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b67      	ldr	r3, [pc, #412]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f023 020f 	bic.w	r2, r3, #15
 8006afa:	4965      	ldr	r1, [pc, #404]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b63      	ldr	r3, [pc, #396]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0b8      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d020      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b2c:	4b59      	ldr	r3, [pc, #356]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4a58      	ldr	r2, [pc, #352]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b44:	4b53      	ldr	r3, [pc, #332]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4a52      	ldr	r2, [pc, #328]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b50:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	494d      	ldr	r1, [pc, #308]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d040      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d107      	bne.n	8006b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d115      	bne.n	8006bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e07f      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b8e:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e073      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e06b      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bae:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f023 0203 	bic.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4936      	ldr	r1, [pc, #216]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fd f836 	bl	8003c30 <HAL_GetTick>
 8006bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc8:	f7fd f832 	bl	8003c30 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e053      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bde:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 020c 	and.w	r2, r3, #12
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d1eb      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d210      	bcs.n	8006c20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfe:	4b24      	ldr	r3, [pc, #144]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 020f 	bic.w	r2, r3, #15
 8006c06:	4922      	ldr	r1, [pc, #136]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0e:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e032      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c2c:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4916      	ldr	r1, [pc, #88]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	490e      	ldr	r1, [pc, #56]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c5e:	f000 f821 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8006c62:	4602      	mov	r2, r0
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	490a      	ldr	r1, [pc, #40]	; (8006c98 <HAL_RCC_ClockConfig+0x1cc>)
 8006c70:	5ccb      	ldrb	r3, [r1, r3]
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <HAL_RCC_ClockConfig+0x1d0>)
 8006c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <HAL_RCC_ClockConfig+0x1d4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fc ff92 	bl	8003ba8 <HAL_InitTick>

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40023c00 	.word	0x40023c00
 8006c94:	40023800 	.word	0x40023800
 8006c98:	08018c84 	.word	0x08018c84
 8006c9c:	20000008 	.word	0x20000008
 8006ca0:	20000010 	.word	0x20000010

08006ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca8:	b094      	sub	sp, #80	; 0x50
 8006caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cbc:	4b79      	ldr	r3, [pc, #484]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 030c 	and.w	r3, r3, #12
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d00d      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	f200 80e1 	bhi.w	8006e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d003      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x3a>
 8006cd6:	e0db      	b.n	8006e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cd8:	4b73      	ldr	r3, [pc, #460]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cdc:	e0db      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cde:	4b73      	ldr	r3, [pc, #460]	; (8006eac <HAL_RCC_GetSysClockFreq+0x208>)
 8006ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ce2:	e0d8      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ce4:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cee:	4b6d      	ldr	r3, [pc, #436]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d063      	beq.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cfa:	4b6a      	ldr	r3, [pc, #424]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	099b      	lsrs	r3, r3, #6
 8006d00:	2200      	movs	r2, #0
 8006d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
 8006d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d16:	4622      	mov	r2, r4
 8006d18:	462b      	mov	r3, r5
 8006d1a:	f04f 0000 	mov.w	r0, #0
 8006d1e:	f04f 0100 	mov.w	r1, #0
 8006d22:	0159      	lsls	r1, r3, #5
 8006d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d28:	0150      	lsls	r0, r2, #5
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4621      	mov	r1, r4
 8006d30:	1a51      	subs	r1, r2, r1
 8006d32:	6139      	str	r1, [r7, #16]
 8006d34:	4629      	mov	r1, r5
 8006d36:	eb63 0301 	sbc.w	r3, r3, r1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d48:	4659      	mov	r1, fp
 8006d4a:	018b      	lsls	r3, r1, #6
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d52:	4651      	mov	r1, sl
 8006d54:	018a      	lsls	r2, r1, #6
 8006d56:	4651      	mov	r1, sl
 8006d58:	ebb2 0801 	subs.w	r8, r2, r1
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8006d62:	f04f 0200 	mov.w	r2, #0
 8006d66:	f04f 0300 	mov.w	r3, #0
 8006d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d76:	4690      	mov	r8, r2
 8006d78:	4699      	mov	r9, r3
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	eb18 0303 	adds.w	r3, r8, r3
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	462b      	mov	r3, r5
 8006d84:	eb49 0303 	adc.w	r3, r9, r3
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d96:	4629      	mov	r1, r5
 8006d98:	024b      	lsls	r3, r1, #9
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006da0:	4621      	mov	r1, r4
 8006da2:	024a      	lsls	r2, r1, #9
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006daa:	2200      	movs	r2, #0
 8006dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006db4:	f7f9 fc58 	bl	8000668 <__aeabi_uldivmod>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc0:	e058      	b.n	8006e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dc2:	4b38      	ldr	r3, [pc, #224]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	099b      	lsrs	r3, r3, #6
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	4611      	mov	r1, r2
 8006dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dd2:	623b      	str	r3, [r7, #32]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ddc:	4642      	mov	r2, r8
 8006dde:	464b      	mov	r3, r9
 8006de0:	f04f 0000 	mov.w	r0, #0
 8006de4:	f04f 0100 	mov.w	r1, #0
 8006de8:	0159      	lsls	r1, r3, #5
 8006dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dee:	0150      	lsls	r0, r2, #5
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4641      	mov	r1, r8
 8006df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e14:	ebb2 040a 	subs.w	r4, r2, sl
 8006e18:	eb63 050b 	sbc.w	r5, r3, fp
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	00eb      	lsls	r3, r5, #3
 8006e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e2a:	00e2      	lsls	r2, r4, #3
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	461d      	mov	r5, r3
 8006e30:	4643      	mov	r3, r8
 8006e32:	18e3      	adds	r3, r4, r3
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	464b      	mov	r3, r9
 8006e38:	eb45 0303 	adc.w	r3, r5, r3
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	028b      	lsls	r3, r1, #10
 8006e4e:	4621      	mov	r1, r4
 8006e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e54:	4621      	mov	r1, r4
 8006e56:	028a      	lsls	r2, r1, #10
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5e:	2200      	movs	r2, #0
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	61fa      	str	r2, [r7, #28]
 8006e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e68:	f7f9 fbfe 	bl	8000668 <__aeabi_uldivmod>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4613      	mov	r3, r2
 8006e72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e8e:	e002      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3750      	adds	r7, #80	; 0x50
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	00f42400 	.word	0x00f42400
 8006eac:	007a1200 	.word	0x007a1200

08006eb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000008 	.word	0x20000008

08006ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ecc:	f7ff fff0 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	0a9b      	lsrs	r3, r3, #10
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	4903      	ldr	r1, [pc, #12]	; (8006eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ede:	5ccb      	ldrb	r3, [r1, r3]
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	08018c94 	.word	0x08018c94

08006ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ef4:	f7ff ffdc 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	0b5b      	lsrs	r3, r3, #13
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	4903      	ldr	r1, [pc, #12]	; (8006f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f06:	5ccb      	ldrb	r3, [r1, r3]
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40023800 	.word	0x40023800
 8006f14:	08018c94 	.word	0x08018c94

08006f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f40:	4b69      	ldr	r3, [pc, #420]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4a68      	ldr	r2, [pc, #416]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f4a:	6093      	str	r3, [r2, #8]
 8006f4c:	4b66      	ldr	r3, [pc, #408]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f54:	4964      	ldr	r1, [pc, #400]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d017      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f72:	4b5d      	ldr	r3, [pc, #372]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	4959      	ldr	r1, [pc, #356]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f90:	d101      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f92:	2301      	movs	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d017      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fae:	4b4e      	ldr	r3, [pc, #312]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	494a      	ldr	r1, [pc, #296]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fcc:	d101      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fea:	2301      	movs	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 808b 	beq.w	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ffc:	4b3a      	ldr	r3, [pc, #232]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	4a39      	ldr	r2, [pc, #228]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007006:	6413      	str	r3, [r2, #64]	; 0x40
 8007008:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007014:	4b35      	ldr	r3, [pc, #212]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a34      	ldr	r2, [pc, #208]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800701a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007020:	f7fc fe06 	bl	8003c30 <HAL_GetTick>
 8007024:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007028:	f7fc fe02 	bl	8003c30 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e38f      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800703a:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007046:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d035      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	429a      	cmp	r2, r3
 8007062:	d02e      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007064:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800706e:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007078:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800708c:	4b16      	ldr	r3, [pc, #88]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b01      	cmp	r3, #1
 8007096:	d114      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7fc fdca 	bl	8003c30 <HAL_GetTick>
 800709c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709e:	e00a      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a0:	f7fc fdc6 	bl	8003c30 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e351      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ee      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ce:	d111      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070dc:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070de:	400b      	ands	r3, r1
 80070e0:	4901      	ldr	r1, [pc, #4]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	e00b      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070e8:	40023800 	.word	0x40023800
 80070ec:	40007000 	.word	0x40007000
 80070f0:	0ffffcff 	.word	0x0ffffcff
 80070f4:	4bac      	ldr	r3, [pc, #688]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4aab      	ldr	r2, [pc, #684]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070fe:	6093      	str	r3, [r2, #8]
 8007100:	4ba9      	ldr	r3, [pc, #676]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800710c:	49a6      	ldr	r1, [pc, #664]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800710e:	4313      	orrs	r3, r2
 8007110:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d010      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800711e:	4ba2      	ldr	r3, [pc, #648]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007124:	4aa0      	ldr	r2, [pc, #640]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800712e:	4b9e      	ldr	r3, [pc, #632]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007130:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	499b      	ldr	r1, [pc, #620]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800714c:	4b96      	ldr	r3, [pc, #600]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800715a:	4993      	ldr	r1, [pc, #588]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800716e:	4b8e      	ldr	r3, [pc, #568]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800717c:	498a      	ldr	r1, [pc, #552]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007190:	4b85      	ldr	r3, [pc, #532]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719e:	4982      	ldr	r1, [pc, #520]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071b2:	4b7d      	ldr	r3, [pc, #500]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	4979      	ldr	r1, [pc, #484]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071d4:	4b74      	ldr	r3, [pc, #464]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071da:	f023 0203 	bic.w	r2, r3, #3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	4971      	ldr	r1, [pc, #452]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071f6:	4b6c      	ldr	r3, [pc, #432]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fc:	f023 020c 	bic.w	r2, r3, #12
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007204:	4968      	ldr	r1, [pc, #416]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007218:	4b63      	ldr	r3, [pc, #396]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800721a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	4960      	ldr	r1, [pc, #384]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007228:	4313      	orrs	r3, r2
 800722a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800723a:	4b5b      	ldr	r3, [pc, #364]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007248:	4957      	ldr	r1, [pc, #348]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800725c:	4b52      	ldr	r3, [pc, #328]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	494f      	ldr	r1, [pc, #316]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800727e:	4b4a      	ldr	r3, [pc, #296]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007284:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728c:	4946      	ldr	r1, [pc, #280]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80072a0:	4b41      	ldr	r3, [pc, #260]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ae:	493e      	ldr	r1, [pc, #248]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80072c2:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d0:	4935      	ldr	r1, [pc, #212]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00a      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072e4:	4b30      	ldr	r3, [pc, #192]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f2:	492d      	ldr	r1, [pc, #180]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d011      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007306:	4b28      	ldr	r3, [pc, #160]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007314:	4924      	ldr	r1, [pc, #144]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007324:	d101      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007326:	2301      	movs	r3, #1
 8007328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007346:	4b18      	ldr	r3, [pc, #96]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007354:	4914      	ldr	r1, [pc, #80]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007378:	490b      	ldr	r1, [pc, #44]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739c:	4902      	ldr	r1, [pc, #8]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073a4:	e002      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80073a6:	bf00      	nop
 80073a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073b8:	4b8a      	ldr	r3, [pc, #552]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c8:	4986      	ldr	r1, [pc, #536]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073dc:	4b81      	ldr	r3, [pc, #516]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ec:	497d      	ldr	r1, [pc, #500]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d006      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80d6 	beq.w	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007408:	4b76      	ldr	r3, [pc, #472]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a75      	ldr	r2, [pc, #468]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800740e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007414:	f7fc fc0c 	bl	8003c30 <HAL_GetTick>
 8007418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800741a:	e008      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800741c:	f7fc fc08 	bl	8003c30 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b64      	cmp	r3, #100	; 0x64
 8007428:	d901      	bls.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e195      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800742e:	4b6d      	ldr	r3, [pc, #436]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f0      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d021      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744a:	2b00      	cmp	r3, #0
 800744c:	d11d      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800744e:	4b65      	ldr	r3, [pc, #404]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007454:	0c1b      	lsrs	r3, r3, #16
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800745c:	4b61      	ldr	r3, [pc, #388]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800745e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007462:	0e1b      	lsrs	r3, r3, #24
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	019a      	lsls	r2, r3, #6
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	431a      	orrs	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	061b      	lsls	r3, r3, #24
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	4958      	ldr	r1, [pc, #352]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749e:	d00a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d02e      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074b4:	d129      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074b6:	4b4b      	ldr	r3, [pc, #300]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074bc:	0c1b      	lsrs	r3, r3, #16
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074c4:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ca:	0f1b      	lsrs	r3, r3, #28
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	019a      	lsls	r2, r3, #6
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	061b      	lsls	r3, r3, #24
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	071b      	lsls	r3, r3, #28
 80074ea:	493e      	ldr	r1, [pc, #248]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074f2:	4b3c      	ldr	r3, [pc, #240]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f8:	f023 021f 	bic.w	r2, r3, #31
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	3b01      	subs	r3, #1
 8007502:	4938      	ldr	r1, [pc, #224]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01d      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007516:	4b33      	ldr	r3, [pc, #204]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751c:	0e1b      	lsrs	r3, r3, #24
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007524:	4b2f      	ldr	r3, [pc, #188]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	019a      	lsls	r2, r3, #6
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	431a      	orrs	r2, r3
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	4926      	ldr	r1, [pc, #152]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	019a      	lsls	r2, r3, #6
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	061b      	lsls	r3, r3, #24
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	071b      	lsls	r3, r3, #28
 800757a:	491a      	ldr	r1, [pc, #104]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007582:	4b18      	ldr	r3, [pc, #96]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800758c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800758e:	f7fc fb4f 	bl	8003c30 <HAL_GetTick>
 8007592:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007596:	f7fc fb4b 	bl	8003c30 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b64      	cmp	r3, #100	; 0x64
 80075a2:	d901      	bls.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e0d8      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075a8:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0f0      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	f040 80ce 	bne.w	8007758 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c8:	f7fc fb32 	bl	8003c30 <HAL_GetTick>
 80075cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075ce:	e00b      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075d0:	f7fc fb2e 	bl	8003c30 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b64      	cmp	r3, #100	; 0x64
 80075dc:	d904      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e0bb      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80075e2:	bf00      	nop
 80075e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075e8:	4b5e      	ldr	r3, [pc, #376]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f4:	d0ec      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007612:	2b00      	cmp	r3, #0
 8007614:	d02e      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d12a      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800761e:	4b51      	ldr	r3, [pc, #324]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007624:	0c1b      	lsrs	r3, r3, #16
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800762c:	4b4d      	ldr	r3, [pc, #308]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	0f1b      	lsrs	r3, r3, #28
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	019a      	lsls	r2, r3, #6
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	041b      	lsls	r3, r3, #16
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	061b      	lsls	r3, r3, #24
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	071b      	lsls	r3, r3, #28
 8007652:	4944      	ldr	r1, [pc, #272]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007654:	4313      	orrs	r3, r2
 8007656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800765a:	4b42      	ldr	r3, [pc, #264]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800765c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007660:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	3b01      	subs	r3, #1
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	493d      	ldr	r1, [pc, #244]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d022      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007688:	d11d      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800768a:	4b36      	ldr	r3, [pc, #216]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007690:	0e1b      	lsrs	r3, r3, #24
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007698:	4b32      	ldr	r3, [pc, #200]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769e:	0f1b      	lsrs	r3, r3, #28
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	019a      	lsls	r2, r3, #6
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	431a      	orrs	r2, r3
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	061b      	lsls	r3, r3, #24
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	071b      	lsls	r3, r3, #28
 80076be:	4929      	ldr	r1, [pc, #164]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d028      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	0e1b      	lsrs	r3, r3, #24
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076e0:	4b20      	ldr	r3, [pc, #128]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	019a      	lsls	r2, r3, #6
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	431a      	orrs	r2, r3
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	061b      	lsls	r3, r3, #24
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	071b      	lsls	r3, r3, #28
 8007706:	4917      	ldr	r1, [pc, #92]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4911      	ldr	r1, [pc, #68]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007724:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a0e      	ldr	r2, [pc, #56]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800772a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007730:	f7fc fa7e 	bl	8003c30 <HAL_GetTick>
 8007734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007736:	e008      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007738:	f7fc fa7a 	bl	8003c30 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d901      	bls.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e007      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800774a:	4b06      	ldr	r3, [pc, #24]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007756:	d1ef      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40023800 	.word	0x40023800

08007768 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e01c      	b.n	80077b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	795b      	ldrb	r3, [r3, #5]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fa fe40 	bl	8002410 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0204 	orr.w	r2, r2, #4
 80077a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e09d      	b.n	800790a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d108      	bne.n	80077e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077de:	d009      	beq.n	80077f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	61da      	str	r2, [r3, #28]
 80077e6:	e005      	b.n	80077f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fa fe70 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800782a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007834:	d902      	bls.n	800783c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e002      	b.n	8007842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800783c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800784a:	d007      	beq.n	800785c <HAL_SPI_Init+0xa0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007854:	d002      	beq.n	800785c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789e:	ea42 0103 	orr.w	r1, r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	f003 0204 	and.w	r2, r3, #4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80078d8:	ea42 0103 	orr.w	r1, r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b088      	sub	sp, #32
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_SPI_Transmit+0x22>
 8007930:	2302      	movs	r3, #2
 8007932:	e158      	b.n	8007be6 <HAL_SPI_Transmit+0x2d4>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793c:	f7fc f978 	bl	8003c30 <HAL_GetTick>
 8007940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b01      	cmp	r3, #1
 8007950:	d002      	beq.n	8007958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007952:	2302      	movs	r3, #2
 8007954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007956:	e13d      	b.n	8007bd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_SPI_Transmit+0x52>
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d102      	bne.n	800796a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007968:	e134      	b.n	8007bd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2203      	movs	r2, #3
 800796e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b4:	d10f      	bne.n	80079d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d007      	beq.n	80079f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079fc:	d94b      	bls.n	8007a96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SPI_Transmit+0xfa>
 8007a06:	8afb      	ldrh	r3, [r7, #22]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d13e      	bne.n	8007a8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	881a      	ldrh	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	1c9a      	adds	r2, r3, #2
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a30:	e02b      	b.n	8007a8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d112      	bne.n	8007a66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	881a      	ldrh	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	1c9a      	adds	r2, r3, #2
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a64:	e011      	b.n	8007a8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a66:	f7fc f8e3 	bl	8003c30 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d803      	bhi.n	8007a7e <HAL_SPI_Transmit+0x16c>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d102      	bne.n	8007a84 <HAL_SPI_Transmit+0x172>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a88:	e0a4      	b.n	8007bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1ce      	bne.n	8007a32 <HAL_SPI_Transmit+0x120>
 8007a94:	e07c      	b.n	8007b90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_SPI_Transmit+0x192>
 8007a9e:	8afb      	ldrh	r3, [r7, #22]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d170      	bne.n	8007b86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d912      	bls.n	8007ad4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b02      	subs	r3, #2
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ad2:	e058      	b.n	8007b86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330c      	adds	r3, #12
 8007ade:	7812      	ldrb	r2, [r2, #0]
 8007ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007afa:	e044      	b.n	8007b86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d12b      	bne.n	8007b62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d912      	bls.n	8007b3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b02      	subs	r3, #2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b38:	e025      	b.n	8007b86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	330c      	adds	r3, #12
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b60:	e011      	b.n	8007b86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b62:	f7fc f865 	bl	8003c30 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d803      	bhi.n	8007b7a <HAL_SPI_Transmit+0x268>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d102      	bne.n	8007b80 <HAL_SPI_Transmit+0x26e>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b84:	e026      	b.n	8007bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1b5      	bne.n	8007afc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f949 	bl	8007e2c <SPI_EndRxTxTransaction>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	613b      	str	r3, [r7, #16]
 8007bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e000      	b.n	8007bd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3720      	adds	r7, #32
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c00:	f7fc f816 	bl	8003c30 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c10:	f7fc f80e 	bl	8003c30 <HAL_GetTick>
 8007c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c16:	4b39      	ldr	r3, [pc, #228]	; (8007cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	015b      	lsls	r3, r3, #5
 8007c1c:	0d1b      	lsrs	r3, r3, #20
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c26:	e054      	b.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d050      	beq.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c30:	f7fb fffe 	bl	8003c30 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d902      	bls.n	8007c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d13d      	bne.n	8007cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5e:	d111      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c68:	d004      	beq.n	8007c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c72:	d107      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8c:	d10f      	bne.n	8007cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e017      	b.n	8007cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d19b      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000008 	.word	0x20000008

08007d00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d12:	f7fb ff8d 	bl	8003c30 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	4413      	add	r3, r2
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d22:	f7fb ff85 	bl	8003c30 <HAL_GetTick>
 8007d26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d30:	4b3d      	ldr	r3, [pc, #244]	; (8007e28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	00da      	lsls	r2, r3, #3
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	0d1b      	lsrs	r3, r3, #20
 8007d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d48:	e060      	b.n	8007e0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d50:	d107      	bne.n	8007d62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d050      	beq.n	8007e0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d6a:	f7fb ff61 	bl	8003c30 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d902      	bls.n	8007d80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d13d      	bne.n	8007dfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d98:	d111      	bne.n	8007dbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da2:	d004      	beq.n	8007dae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dac:	d107      	bne.n	8007dbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc6:	d10f      	bne.n	8007de8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e010      	b.n	8007e1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4013      	ands	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d196      	bne.n	8007d4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3728      	adds	r7, #40	; 0x28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000008 	.word	0x20000008

08007e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7ff ff5b 	bl	8007d00 <SPI_WaitFifoStateUntilTimeout>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e54:	f043 0220 	orr.w	r2, r3, #32
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e046      	b.n	8007eee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e60:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <SPI_EndRxTxTransaction+0xcc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a25      	ldr	r2, [pc, #148]	; (8007efc <SPI_EndRxTxTransaction+0xd0>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	0d5b      	lsrs	r3, r3, #21
 8007e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e70:	fb02 f303 	mul.w	r3, r2, r3
 8007e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e7e:	d112      	bne.n	8007ea6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2200      	movs	r2, #0
 8007e88:	2180      	movs	r1, #128	; 0x80
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff feb0 	bl	8007bf0 <SPI_WaitFlagStateUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d016      	beq.n	8007ec4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9a:	f043 0220 	orr.w	r2, r3, #32
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e023      	b.n	8007eee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebc:	2b80      	cmp	r3, #128	; 0x80
 8007ebe:	d0f2      	beq.n	8007ea6 <SPI_EndRxTxTransaction+0x7a>
 8007ec0:	e000      	b.n	8007ec4 <SPI_EndRxTxTransaction+0x98>
        break;
 8007ec2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff15 	bl	8007d00 <SPI_WaitFifoStateUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e000      	b.n	8007eee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000008 	.word	0x20000008
 8007efc:	165e9f81 	.word	0x165e9f81

08007f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e049      	b.n	8007fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7fa fd6e 	bl	8002a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f000 fd30 	bl	80089a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6a1a      	ldr	r2, [r3, #32]
 8007fc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <HAL_TIM_Base_DeInit+0x40>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6a1a      	ldr	r2, [r3, #32]
 8007fd4:	f240 4344 	movw	r3, #1092	; 0x444
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <HAL_TIM_Base_DeInit+0x40>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fa fdb4 	bl	8002b5c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	d001      	beq.n	8008080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e04c      	b.n	800811a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a26      	ldr	r2, [pc, #152]	; (8008128 <HAL_TIM_Base_Start+0xc0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d022      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809a:	d01d      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a22      	ldr	r2, [pc, #136]	; (800812c <HAL_TIM_Base_Start+0xc4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d018      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a21      	ldr	r2, [pc, #132]	; (8008130 <HAL_TIM_Base_Start+0xc8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d013      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1f      	ldr	r2, [pc, #124]	; (8008134 <HAL_TIM_Base_Start+0xcc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00e      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1e      	ldr	r2, [pc, #120]	; (8008138 <HAL_TIM_Base_Start+0xd0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d009      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1c      	ldr	r2, [pc, #112]	; (800813c <HAL_TIM_Base_Start+0xd4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d004      	beq.n	80080d8 <HAL_TIM_Base_Start+0x70>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1b      	ldr	r2, [pc, #108]	; (8008140 <HAL_TIM_Base_Start+0xd8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d115      	bne.n	8008104 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	4b19      	ldr	r3, [pc, #100]	; (8008144 <HAL_TIM_Base_Start+0xdc>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b06      	cmp	r3, #6
 80080e8:	d015      	beq.n	8008116 <HAL_TIM_Base_Start+0xae>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f0:	d011      	beq.n	8008116 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0201 	orr.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008102:	e008      	b.n	8008116 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e000      	b.n	8008118 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40010400 	.word	0x40010400
 800813c:	40014000 	.word	0x40014000
 8008140:	40001800 	.word	0x40001800
 8008144:	00010007 	.word	0x00010007

08008148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	d001      	beq.n	8008160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e054      	b.n	800820a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0201 	orr.w	r2, r2, #1
 8008176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <HAL_TIM_Base_Start_IT+0xd0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d022      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d01d      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a22      	ldr	r2, [pc, #136]	; (800821c <HAL_TIM_Base_Start_IT+0xd4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d018      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a21      	ldr	r2, [pc, #132]	; (8008220 <HAL_TIM_Base_Start_IT+0xd8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d013      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1f      	ldr	r2, [pc, #124]	; (8008224 <HAL_TIM_Base_Start_IT+0xdc>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00e      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <HAL_TIM_Base_Start_IT+0xe0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d009      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1c      	ldr	r2, [pc, #112]	; (800822c <HAL_TIM_Base_Start_IT+0xe4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d004      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x80>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1b      	ldr	r2, [pc, #108]	; (8008230 <HAL_TIM_Base_Start_IT+0xe8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d115      	bne.n	80081f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	4b19      	ldr	r3, [pc, #100]	; (8008234 <HAL_TIM_Base_Start_IT+0xec>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b06      	cmp	r3, #6
 80081d8:	d015      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0xbe>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e0:	d011      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	e008      	b.n	8008206 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0201 	orr.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e000      	b.n	8008208 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	40010000 	.word	0x40010000
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800
 8008224:	40000c00 	.word	0x40000c00
 8008228:	40010400 	.word	0x40010400
 800822c:	40014000 	.word	0x40014000
 8008230:	40001800 	.word	0x40001800
 8008234:	00010007 	.word	0x00010007

08008238 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0201 	bic.w	r2, r2, #1
 800824e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	f241 1311 	movw	r3, #4369	; 0x1111
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10f      	bne.n	8008280 <HAL_TIM_Base_Stop_IT+0x48>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6a1a      	ldr	r2, [r3, #32]
 8008266:	f240 4344 	movw	r3, #1092	; 0x444
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <HAL_TIM_Base_Stop_IT+0x48>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0201 	bic.w	r2, r2, #1
 800827e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e049      	b.n	800833c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f841 	bl	8008344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f000 fb65 	bl	80089a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b02      	cmp	r3, #2
 800836c:	d122      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b02      	cmp	r3, #2
 800837a:	d11b      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0202 	mvn.w	r2, #2
 8008384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fae4 	bl	8008968 <HAL_TIM_IC_CaptureCallback>
 80083a0:	e005      	b.n	80083ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fad6 	bl	8008954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fae7 	bl	800897c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d122      	bne.n	8008408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d11b      	bne.n	8008408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f06f 0204 	mvn.w	r2, #4
 80083d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2202      	movs	r2, #2
 80083de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 faba 	bl	8008968 <HAL_TIM_IC_CaptureCallback>
 80083f4:	e005      	b.n	8008402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 faac 	bl	8008954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fabd 	bl	800897c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b08      	cmp	r3, #8
 8008414:	d122      	bne.n	800845c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b08      	cmp	r3, #8
 8008422:	d11b      	bne.n	800845c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f06f 0208 	mvn.w	r2, #8
 800842c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2204      	movs	r2, #4
 8008432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa90 	bl	8008968 <HAL_TIM_IC_CaptureCallback>
 8008448:	e005      	b.n	8008456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa82 	bl	8008954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fa93 	bl	800897c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b10      	cmp	r3, #16
 8008468:	d122      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0310 	and.w	r3, r3, #16
 8008474:	2b10      	cmp	r3, #16
 8008476:	d11b      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0210 	mvn.w	r2, #16
 8008480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2208      	movs	r2, #8
 8008486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa66 	bl	8008968 <HAL_TIM_IC_CaptureCallback>
 800849c:	e005      	b.n	80084aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa58 	bl	8008954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fa69 	bl	800897c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d10e      	bne.n	80084dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d107      	bne.n	80084dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0201 	mvn.w	r2, #1
 80084d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7f9 fdaa 	bl	8002030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f4:	2b80      	cmp	r3, #128	; 0x80
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fe7e 	bl	8009204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008516:	d10e      	bne.n	8008536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d107      	bne.n	8008536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800852e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fe71 	bl	8009218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d10e      	bne.n	8008562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	d107      	bne.n	8008562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800855a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa17 	bl	8008990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0320 	and.w	r3, r3, #32
 800856c:	2b20      	cmp	r3, #32
 800856e:	d10e      	bne.n	800858e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b20      	cmp	r3, #32
 800857c:	d107      	bne.n	800858e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f06f 0220 	mvn.w	r2, #32
 8008586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fe31 	bl	80091f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e0ff      	b.n	80087b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b14      	cmp	r3, #20
 80085c2:	f200 80f0 	bhi.w	80087a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80085c6:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	08008621 	.word	0x08008621
 80085d0:	080087a7 	.word	0x080087a7
 80085d4:	080087a7 	.word	0x080087a7
 80085d8:	080087a7 	.word	0x080087a7
 80085dc:	08008661 	.word	0x08008661
 80085e0:	080087a7 	.word	0x080087a7
 80085e4:	080087a7 	.word	0x080087a7
 80085e8:	080087a7 	.word	0x080087a7
 80085ec:	080086a3 	.word	0x080086a3
 80085f0:	080087a7 	.word	0x080087a7
 80085f4:	080087a7 	.word	0x080087a7
 80085f8:	080087a7 	.word	0x080087a7
 80085fc:	080086e3 	.word	0x080086e3
 8008600:	080087a7 	.word	0x080087a7
 8008604:	080087a7 	.word	0x080087a7
 8008608:	080087a7 	.word	0x080087a7
 800860c:	08008725 	.word	0x08008725
 8008610:	080087a7 	.word	0x080087a7
 8008614:	080087a7 	.word	0x080087a7
 8008618:	080087a7 	.word	0x080087a7
 800861c:	08008765 	.word	0x08008765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fa5c 	bl	8008ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699a      	ldr	r2, [r3, #24]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0208 	orr.w	r2, r2, #8
 800863a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0204 	bic.w	r2, r2, #4
 800864a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6999      	ldr	r1, [r3, #24]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	619a      	str	r2, [r3, #24]
      break;
 800865e:	e0a5      	b.n	80087ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 faae 	bl	8008bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800868a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6999      	ldr	r1, [r3, #24]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	021a      	lsls	r2, r3, #8
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	619a      	str	r2, [r3, #24]
      break;
 80086a0:	e084      	b.n	80087ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fb05 	bl	8008cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69da      	ldr	r2, [r3, #28]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0208 	orr.w	r2, r2, #8
 80086bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69da      	ldr	r2, [r3, #28]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0204 	bic.w	r2, r2, #4
 80086cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69d9      	ldr	r1, [r3, #28]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	61da      	str	r2, [r3, #28]
      break;
 80086e0:	e064      	b.n	80087ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fb5b 	bl	8008da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69da      	ldr	r2, [r3, #28]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69da      	ldr	r2, [r3, #28]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800870c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69d9      	ldr	r1, [r3, #28]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	021a      	lsls	r2, r3, #8
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	61da      	str	r2, [r3, #28]
      break;
 8008722:	e043      	b.n	80087ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fb92 	bl	8008e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0208 	orr.w	r2, r2, #8
 800873e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0204 	bic.w	r2, r2, #4
 800874e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008762:	e023      	b.n	80087ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fbc4 	bl	8008ef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800877e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800878e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	021a      	lsls	r2, r3, #8
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	430a      	orrs	r2, r1
 80087a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087a4:	e002      	b.n	80087ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
      break;
 80087aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop

080087c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_TIM_ConfigClockSource+0x1c>
 80087d8:	2302      	movs	r3, #2
 80087da:	e0b4      	b.n	8008946 <HAL_TIM_ConfigClockSource+0x186>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	4b56      	ldr	r3, [pc, #344]	; (8008950 <HAL_TIM_ConfigClockSource+0x190>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008814:	d03e      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0xd4>
 8008816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881a:	f200 8087 	bhi.w	800892c <HAL_TIM_ConfigClockSource+0x16c>
 800881e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008822:	f000 8086 	beq.w	8008932 <HAL_TIM_ConfigClockSource+0x172>
 8008826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882a:	d87f      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 800882c:	2b70      	cmp	r3, #112	; 0x70
 800882e:	d01a      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0xa6>
 8008830:	2b70      	cmp	r3, #112	; 0x70
 8008832:	d87b      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 8008834:	2b60      	cmp	r3, #96	; 0x60
 8008836:	d050      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x11a>
 8008838:	2b60      	cmp	r3, #96	; 0x60
 800883a:	d877      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 800883c:	2b50      	cmp	r3, #80	; 0x50
 800883e:	d03c      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0xfa>
 8008840:	2b50      	cmp	r3, #80	; 0x50
 8008842:	d873      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 8008844:	2b40      	cmp	r3, #64	; 0x40
 8008846:	d058      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x13a>
 8008848:	2b40      	cmp	r3, #64	; 0x40
 800884a:	d86f      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 800884c:	2b30      	cmp	r3, #48	; 0x30
 800884e:	d064      	beq.n	800891a <HAL_TIM_ConfigClockSource+0x15a>
 8008850:	2b30      	cmp	r3, #48	; 0x30
 8008852:	d86b      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 8008854:	2b20      	cmp	r3, #32
 8008856:	d060      	beq.n	800891a <HAL_TIM_ConfigClockSource+0x15a>
 8008858:	2b20      	cmp	r3, #32
 800885a:	d867      	bhi.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d05c      	beq.n	800891a <HAL_TIM_ConfigClockSource+0x15a>
 8008860:	2b10      	cmp	r3, #16
 8008862:	d05a      	beq.n	800891a <HAL_TIM_ConfigClockSource+0x15a>
 8008864:	e062      	b.n	800892c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008876:	f000 fc0d 	bl	8009094 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	609a      	str	r2, [r3, #8]
      break;
 8008892:	e04f      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088a4:	f000 fbf6 	bl	8009094 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088b6:	609a      	str	r2, [r3, #8]
      break;
 80088b8:	e03c      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088c6:	461a      	mov	r2, r3
 80088c8:	f000 fb6a 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2150      	movs	r1, #80	; 0x50
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fbc3 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 80088d8:	e02c      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088e6:	461a      	mov	r2, r3
 80088e8:	f000 fb89 	bl	8008ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2160      	movs	r1, #96	; 0x60
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fbb3 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 80088f8:	e01c      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008906:	461a      	mov	r2, r3
 8008908:	f000 fb4a 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2140      	movs	r1, #64	; 0x40
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fba3 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 8008918:	e00c      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4619      	mov	r1, r3
 8008924:	4610      	mov	r0, r2
 8008926:	f000 fb9a 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 800892a:	e003      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
      break;
 8008930:	e000      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	fffeff88 	.word	0xfffeff88

08008954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a40      	ldr	r2, [pc, #256]	; (8008ab8 <TIM_Base_SetConfig+0x114>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d013      	beq.n	80089e4 <TIM_Base_SetConfig+0x40>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c2:	d00f      	beq.n	80089e4 <TIM_Base_SetConfig+0x40>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a3d      	ldr	r2, [pc, #244]	; (8008abc <TIM_Base_SetConfig+0x118>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d00b      	beq.n	80089e4 <TIM_Base_SetConfig+0x40>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a3c      	ldr	r2, [pc, #240]	; (8008ac0 <TIM_Base_SetConfig+0x11c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d007      	beq.n	80089e4 <TIM_Base_SetConfig+0x40>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a3b      	ldr	r2, [pc, #236]	; (8008ac4 <TIM_Base_SetConfig+0x120>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d003      	beq.n	80089e4 <TIM_Base_SetConfig+0x40>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a3a      	ldr	r2, [pc, #232]	; (8008ac8 <TIM_Base_SetConfig+0x124>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d108      	bne.n	80089f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2f      	ldr	r2, [pc, #188]	; (8008ab8 <TIM_Base_SetConfig+0x114>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d02b      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a04:	d027      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2c      	ldr	r2, [pc, #176]	; (8008abc <TIM_Base_SetConfig+0x118>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d023      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2b      	ldr	r2, [pc, #172]	; (8008ac0 <TIM_Base_SetConfig+0x11c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d01f      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a2a      	ldr	r2, [pc, #168]	; (8008ac4 <TIM_Base_SetConfig+0x120>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d01b      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a29      	ldr	r2, [pc, #164]	; (8008ac8 <TIM_Base_SetConfig+0x124>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d017      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a28      	ldr	r2, [pc, #160]	; (8008acc <TIM_Base_SetConfig+0x128>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d013      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a27      	ldr	r2, [pc, #156]	; (8008ad0 <TIM_Base_SetConfig+0x12c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00f      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <TIM_Base_SetConfig+0x130>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00b      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a25      	ldr	r2, [pc, #148]	; (8008ad8 <TIM_Base_SetConfig+0x134>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d007      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a24      	ldr	r2, [pc, #144]	; (8008adc <TIM_Base_SetConfig+0x138>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d003      	beq.n	8008a56 <TIM_Base_SetConfig+0xb2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a23      	ldr	r2, [pc, #140]	; (8008ae0 <TIM_Base_SetConfig+0x13c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d108      	bne.n	8008a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <TIM_Base_SetConfig+0x114>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_Base_SetConfig+0xf8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a0c      	ldr	r2, [pc, #48]	; (8008ac8 <TIM_Base_SetConfig+0x124>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d103      	bne.n	8008aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	615a      	str	r2, [r3, #20]
}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	40014000 	.word	0x40014000
 8008ad0:	40014400 	.word	0x40014400
 8008ad4:	40014800 	.word	0x40014800
 8008ad8:	40001800 	.word	0x40001800
 8008adc:	40001c00 	.word	0x40001c00
 8008ae0:	40002000 	.word	0x40002000

08008ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f023 0201 	bic.w	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4b2b      	ldr	r3, [pc, #172]	; (8008bbc <TIM_OC1_SetConfig+0xd8>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f023 0302 	bic.w	r3, r3, #2
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a21      	ldr	r2, [pc, #132]	; (8008bc0 <TIM_OC1_SetConfig+0xdc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d003      	beq.n	8008b48 <TIM_OC1_SetConfig+0x64>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a20      	ldr	r2, [pc, #128]	; (8008bc4 <TIM_OC1_SetConfig+0xe0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d10c      	bne.n	8008b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 0308 	bic.w	r3, r3, #8
 8008b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f023 0304 	bic.w	r3, r3, #4
 8008b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a16      	ldr	r2, [pc, #88]	; (8008bc0 <TIM_OC1_SetConfig+0xdc>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d003      	beq.n	8008b72 <TIM_OC1_SetConfig+0x8e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a15      	ldr	r2, [pc, #84]	; (8008bc4 <TIM_OC1_SetConfig+0xe0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d111      	bne.n	8008b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	621a      	str	r2, [r3, #32]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	fffeff8f 	.word	0xfffeff8f
 8008bc0:	40010000 	.word	0x40010000
 8008bc4:	40010400 	.word	0x40010400

08008bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f023 0210 	bic.w	r2, r3, #16
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4b2e      	ldr	r3, [pc, #184]	; (8008cac <TIM_OC2_SetConfig+0xe4>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f023 0320 	bic.w	r3, r3, #32
 8008c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a23      	ldr	r2, [pc, #140]	; (8008cb0 <TIM_OC2_SetConfig+0xe8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_OC2_SetConfig+0x68>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a22      	ldr	r2, [pc, #136]	; (8008cb4 <TIM_OC2_SetConfig+0xec>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10d      	bne.n	8008c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a18      	ldr	r2, [pc, #96]	; (8008cb0 <TIM_OC2_SetConfig+0xe8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d003      	beq.n	8008c5c <TIM_OC2_SetConfig+0x94>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a17      	ldr	r2, [pc, #92]	; (8008cb4 <TIM_OC2_SetConfig+0xec>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d113      	bne.n	8008c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	feff8fff 	.word	0xfeff8fff
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400

08008cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <TIM_OC3_SetConfig+0xe0>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0303 	bic.w	r3, r3, #3
 8008cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	021b      	lsls	r3, r3, #8
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a22      	ldr	r2, [pc, #136]	; (8008d9c <TIM_OC3_SetConfig+0xe4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d003      	beq.n	8008d1e <TIM_OC3_SetConfig+0x66>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a21      	ldr	r2, [pc, #132]	; (8008da0 <TIM_OC3_SetConfig+0xe8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d10d      	bne.n	8008d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a17      	ldr	r2, [pc, #92]	; (8008d9c <TIM_OC3_SetConfig+0xe4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d003      	beq.n	8008d4a <TIM_OC3_SetConfig+0x92>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a16      	ldr	r2, [pc, #88]	; (8008da0 <TIM_OC3_SetConfig+0xe8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d113      	bne.n	8008d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	621a      	str	r2, [r3, #32]
}
 8008d8c:	bf00      	nop
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	fffeff8f 	.word	0xfffeff8f
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40010400 	.word	0x40010400

08008da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4b1e      	ldr	r3, [pc, #120]	; (8008e48 <TIM_OC4_SetConfig+0xa4>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	031b      	lsls	r3, r3, #12
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a13      	ldr	r2, [pc, #76]	; (8008e4c <TIM_OC4_SetConfig+0xa8>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_OC4_SetConfig+0x68>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <TIM_OC4_SetConfig+0xac>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d109      	bne.n	8008e20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	019b      	lsls	r3, r3, #6
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	621a      	str	r2, [r3, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	feff8fff 	.word	0xfeff8fff
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	40010400 	.word	0x40010400

08008e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <TIM_OC5_SetConfig+0x98>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	041b      	lsls	r3, r3, #16
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a12      	ldr	r2, [pc, #72]	; (8008ef0 <TIM_OC5_SetConfig+0x9c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d003      	beq.n	8008eb2 <TIM_OC5_SetConfig+0x5e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a11      	ldr	r2, [pc, #68]	; (8008ef4 <TIM_OC5_SetConfig+0xa0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d109      	bne.n	8008ec6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	621a      	str	r2, [r3, #32]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	fffeff8f 	.word	0xfffeff8f
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400

08008ef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <TIM_OC6_SetConfig+0x9c>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	051b      	lsls	r3, r3, #20
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <TIM_OC6_SetConfig+0xa0>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_OC6_SetConfig+0x60>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a12      	ldr	r2, [pc, #72]	; (8008f9c <TIM_OC6_SetConfig+0xa4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d109      	bne.n	8008f6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	029b      	lsls	r3, r3, #10
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	feff8fff 	.word	0xfeff8fff
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40010400 	.word	0x40010400

08008fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f023 0201 	bic.w	r2, r3, #1
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 030a 	bic.w	r3, r3, #10
 8008fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b087      	sub	sp, #28
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	f023 0210 	bic.w	r2, r3, #16
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	031b      	lsls	r3, r3, #12
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800903a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800905e:	b480      	push	{r7}
 8009060:	b085      	sub	sp, #20
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	f043 0307 	orr.w	r3, r3, #7
 8009080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	609a      	str	r2, [r3, #8]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	021a      	lsls	r2, r3, #8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	609a      	str	r2, [r3, #8]
}
 80090c8:	bf00      	nop
 80090ca:	371c      	adds	r7, #28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e06d      	b.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a30      	ldr	r2, [pc, #192]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d004      	beq.n	8009120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a2f      	ldr	r2, [pc, #188]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d108      	bne.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a20      	ldr	r2, [pc, #128]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d022      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915e:	d01d      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d018      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a1c      	ldr	r2, [pc, #112]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d013      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1a      	ldr	r2, [pc, #104]	; (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00e      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d009      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a16      	ldr	r2, [pc, #88]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d004      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a15      	ldr	r2, [pc, #84]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d10c      	bne.n	80091b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	40010000 	.word	0x40010000
 80091d8:	40010400 	.word	0x40010400
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40014000 	.word	0x40014000
 80091ec:	40001800 	.word	0x40001800

080091f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e040      	b.n	80092c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7f9 fcee 	bl	8002c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2224      	movs	r2, #36	; 0x24
 8009258:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0201 	bic.w	r2, r2, #1
 8009268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f8b0 	bl	80093d0 <UART_SetConfig>
 8009270:	4603      	mov	r3, r0
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e022      	b.n	80092c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fb08 	bl	8009898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fb8f 	bl	80099dc <UART_CheckIdleState>
 80092be:	4603      	mov	r3, r0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	4613      	mov	r3, r2
 80092d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092dc:	2b20      	cmp	r3, #32
 80092de:	d171      	bne.n	80093c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <HAL_UART_Transmit+0x24>
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e06a      	b.n	80093c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2221      	movs	r2, #33	; 0x21
 80092fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092fe:	f7fa fc97 	bl	8003c30 <HAL_GetTick>
 8009302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	88fa      	ldrh	r2, [r7, #6]
 8009310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931c:	d108      	bne.n	8009330 <HAL_UART_Transmit+0x68>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	e003      	b.n	8009338 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009334:	2300      	movs	r3, #0
 8009336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009338:	e02c      	b.n	8009394 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2200      	movs	r2, #0
 8009342:	2180      	movs	r1, #128	; 0x80
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fb96 	bl	8009a76 <UART_WaitOnFlagUntilTimeout>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e038      	b.n	80093c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10b      	bne.n	8009372 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	3302      	adds	r3, #2
 800936e:	61bb      	str	r3, [r7, #24]
 8009370:	e007      	b.n	8009382 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	781a      	ldrb	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	3301      	adds	r3, #1
 8009380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1cc      	bne.n	800933a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2200      	movs	r2, #0
 80093a8:	2140      	movs	r1, #64	; 0x40
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fb63 	bl	8009a76 <UART_WaitOnFlagUntilTimeout>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e005      	b.n	80093c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2220      	movs	r2, #32
 80093be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	e000      	b.n	80093c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80093c4:	2302      	movs	r3, #2
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689a      	ldr	r2, [r3, #8]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4ba6      	ldr	r3, [pc, #664]	; (8009694 <UART_SetConfig+0x2c4>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6812      	ldr	r2, [r2, #0]
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	430b      	orrs	r3, r1
 8009406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	430a      	orrs	r2, r1
 8009440:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a94      	ldr	r2, [pc, #592]	; (8009698 <UART_SetConfig+0x2c8>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d120      	bne.n	800948e <UART_SetConfig+0xbe>
 800944c:	4b93      	ldr	r3, [pc, #588]	; (800969c <UART_SetConfig+0x2cc>)
 800944e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	2b03      	cmp	r3, #3
 8009458:	d816      	bhi.n	8009488 <UART_SetConfig+0xb8>
 800945a:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <UART_SetConfig+0x90>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	08009471 	.word	0x08009471
 8009464:	0800947d 	.word	0x0800947d
 8009468:	08009477 	.word	0x08009477
 800946c:	08009483 	.word	0x08009483
 8009470:	2301      	movs	r3, #1
 8009472:	77fb      	strb	r3, [r7, #31]
 8009474:	e150      	b.n	8009718 <UART_SetConfig+0x348>
 8009476:	2302      	movs	r3, #2
 8009478:	77fb      	strb	r3, [r7, #31]
 800947a:	e14d      	b.n	8009718 <UART_SetConfig+0x348>
 800947c:	2304      	movs	r3, #4
 800947e:	77fb      	strb	r3, [r7, #31]
 8009480:	e14a      	b.n	8009718 <UART_SetConfig+0x348>
 8009482:	2308      	movs	r3, #8
 8009484:	77fb      	strb	r3, [r7, #31]
 8009486:	e147      	b.n	8009718 <UART_SetConfig+0x348>
 8009488:	2310      	movs	r3, #16
 800948a:	77fb      	strb	r3, [r7, #31]
 800948c:	e144      	b.n	8009718 <UART_SetConfig+0x348>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a83      	ldr	r2, [pc, #524]	; (80096a0 <UART_SetConfig+0x2d0>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d132      	bne.n	80094fe <UART_SetConfig+0x12e>
 8009498:	4b80      	ldr	r3, [pc, #512]	; (800969c <UART_SetConfig+0x2cc>)
 800949a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949e:	f003 030c 	and.w	r3, r3, #12
 80094a2:	2b0c      	cmp	r3, #12
 80094a4:	d828      	bhi.n	80094f8 <UART_SetConfig+0x128>
 80094a6:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <UART_SetConfig+0xdc>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	080094e1 	.word	0x080094e1
 80094b0:	080094f9 	.word	0x080094f9
 80094b4:	080094f9 	.word	0x080094f9
 80094b8:	080094f9 	.word	0x080094f9
 80094bc:	080094ed 	.word	0x080094ed
 80094c0:	080094f9 	.word	0x080094f9
 80094c4:	080094f9 	.word	0x080094f9
 80094c8:	080094f9 	.word	0x080094f9
 80094cc:	080094e7 	.word	0x080094e7
 80094d0:	080094f9 	.word	0x080094f9
 80094d4:	080094f9 	.word	0x080094f9
 80094d8:	080094f9 	.word	0x080094f9
 80094dc:	080094f3 	.word	0x080094f3
 80094e0:	2300      	movs	r3, #0
 80094e2:	77fb      	strb	r3, [r7, #31]
 80094e4:	e118      	b.n	8009718 <UART_SetConfig+0x348>
 80094e6:	2302      	movs	r3, #2
 80094e8:	77fb      	strb	r3, [r7, #31]
 80094ea:	e115      	b.n	8009718 <UART_SetConfig+0x348>
 80094ec:	2304      	movs	r3, #4
 80094ee:	77fb      	strb	r3, [r7, #31]
 80094f0:	e112      	b.n	8009718 <UART_SetConfig+0x348>
 80094f2:	2308      	movs	r3, #8
 80094f4:	77fb      	strb	r3, [r7, #31]
 80094f6:	e10f      	b.n	8009718 <UART_SetConfig+0x348>
 80094f8:	2310      	movs	r3, #16
 80094fa:	77fb      	strb	r3, [r7, #31]
 80094fc:	e10c      	b.n	8009718 <UART_SetConfig+0x348>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a68      	ldr	r2, [pc, #416]	; (80096a4 <UART_SetConfig+0x2d4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d120      	bne.n	800954a <UART_SetConfig+0x17a>
 8009508:	4b64      	ldr	r3, [pc, #400]	; (800969c <UART_SetConfig+0x2cc>)
 800950a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009512:	2b30      	cmp	r3, #48	; 0x30
 8009514:	d013      	beq.n	800953e <UART_SetConfig+0x16e>
 8009516:	2b30      	cmp	r3, #48	; 0x30
 8009518:	d814      	bhi.n	8009544 <UART_SetConfig+0x174>
 800951a:	2b20      	cmp	r3, #32
 800951c:	d009      	beq.n	8009532 <UART_SetConfig+0x162>
 800951e:	2b20      	cmp	r3, #32
 8009520:	d810      	bhi.n	8009544 <UART_SetConfig+0x174>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <UART_SetConfig+0x15c>
 8009526:	2b10      	cmp	r3, #16
 8009528:	d006      	beq.n	8009538 <UART_SetConfig+0x168>
 800952a:	e00b      	b.n	8009544 <UART_SetConfig+0x174>
 800952c:	2300      	movs	r3, #0
 800952e:	77fb      	strb	r3, [r7, #31]
 8009530:	e0f2      	b.n	8009718 <UART_SetConfig+0x348>
 8009532:	2302      	movs	r3, #2
 8009534:	77fb      	strb	r3, [r7, #31]
 8009536:	e0ef      	b.n	8009718 <UART_SetConfig+0x348>
 8009538:	2304      	movs	r3, #4
 800953a:	77fb      	strb	r3, [r7, #31]
 800953c:	e0ec      	b.n	8009718 <UART_SetConfig+0x348>
 800953e:	2308      	movs	r3, #8
 8009540:	77fb      	strb	r3, [r7, #31]
 8009542:	e0e9      	b.n	8009718 <UART_SetConfig+0x348>
 8009544:	2310      	movs	r3, #16
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e0e6      	b.n	8009718 <UART_SetConfig+0x348>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a56      	ldr	r2, [pc, #344]	; (80096a8 <UART_SetConfig+0x2d8>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d120      	bne.n	8009596 <UART_SetConfig+0x1c6>
 8009554:	4b51      	ldr	r3, [pc, #324]	; (800969c <UART_SetConfig+0x2cc>)
 8009556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800955e:	2bc0      	cmp	r3, #192	; 0xc0
 8009560:	d013      	beq.n	800958a <UART_SetConfig+0x1ba>
 8009562:	2bc0      	cmp	r3, #192	; 0xc0
 8009564:	d814      	bhi.n	8009590 <UART_SetConfig+0x1c0>
 8009566:	2b80      	cmp	r3, #128	; 0x80
 8009568:	d009      	beq.n	800957e <UART_SetConfig+0x1ae>
 800956a:	2b80      	cmp	r3, #128	; 0x80
 800956c:	d810      	bhi.n	8009590 <UART_SetConfig+0x1c0>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <UART_SetConfig+0x1a8>
 8009572:	2b40      	cmp	r3, #64	; 0x40
 8009574:	d006      	beq.n	8009584 <UART_SetConfig+0x1b4>
 8009576:	e00b      	b.n	8009590 <UART_SetConfig+0x1c0>
 8009578:	2300      	movs	r3, #0
 800957a:	77fb      	strb	r3, [r7, #31]
 800957c:	e0cc      	b.n	8009718 <UART_SetConfig+0x348>
 800957e:	2302      	movs	r3, #2
 8009580:	77fb      	strb	r3, [r7, #31]
 8009582:	e0c9      	b.n	8009718 <UART_SetConfig+0x348>
 8009584:	2304      	movs	r3, #4
 8009586:	77fb      	strb	r3, [r7, #31]
 8009588:	e0c6      	b.n	8009718 <UART_SetConfig+0x348>
 800958a:	2308      	movs	r3, #8
 800958c:	77fb      	strb	r3, [r7, #31]
 800958e:	e0c3      	b.n	8009718 <UART_SetConfig+0x348>
 8009590:	2310      	movs	r3, #16
 8009592:	77fb      	strb	r3, [r7, #31]
 8009594:	e0c0      	b.n	8009718 <UART_SetConfig+0x348>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a44      	ldr	r2, [pc, #272]	; (80096ac <UART_SetConfig+0x2dc>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d125      	bne.n	80095ec <UART_SetConfig+0x21c>
 80095a0:	4b3e      	ldr	r3, [pc, #248]	; (800969c <UART_SetConfig+0x2cc>)
 80095a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ae:	d017      	beq.n	80095e0 <UART_SetConfig+0x210>
 80095b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b4:	d817      	bhi.n	80095e6 <UART_SetConfig+0x216>
 80095b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ba:	d00b      	beq.n	80095d4 <UART_SetConfig+0x204>
 80095bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c0:	d811      	bhi.n	80095e6 <UART_SetConfig+0x216>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <UART_SetConfig+0x1fe>
 80095c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ca:	d006      	beq.n	80095da <UART_SetConfig+0x20a>
 80095cc:	e00b      	b.n	80095e6 <UART_SetConfig+0x216>
 80095ce:	2300      	movs	r3, #0
 80095d0:	77fb      	strb	r3, [r7, #31]
 80095d2:	e0a1      	b.n	8009718 <UART_SetConfig+0x348>
 80095d4:	2302      	movs	r3, #2
 80095d6:	77fb      	strb	r3, [r7, #31]
 80095d8:	e09e      	b.n	8009718 <UART_SetConfig+0x348>
 80095da:	2304      	movs	r3, #4
 80095dc:	77fb      	strb	r3, [r7, #31]
 80095de:	e09b      	b.n	8009718 <UART_SetConfig+0x348>
 80095e0:	2308      	movs	r3, #8
 80095e2:	77fb      	strb	r3, [r7, #31]
 80095e4:	e098      	b.n	8009718 <UART_SetConfig+0x348>
 80095e6:	2310      	movs	r3, #16
 80095e8:	77fb      	strb	r3, [r7, #31]
 80095ea:	e095      	b.n	8009718 <UART_SetConfig+0x348>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a2f      	ldr	r2, [pc, #188]	; (80096b0 <UART_SetConfig+0x2e0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d125      	bne.n	8009642 <UART_SetConfig+0x272>
 80095f6:	4b29      	ldr	r3, [pc, #164]	; (800969c <UART_SetConfig+0x2cc>)
 80095f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009604:	d017      	beq.n	8009636 <UART_SetConfig+0x266>
 8009606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800960a:	d817      	bhi.n	800963c <UART_SetConfig+0x26c>
 800960c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009610:	d00b      	beq.n	800962a <UART_SetConfig+0x25a>
 8009612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009616:	d811      	bhi.n	800963c <UART_SetConfig+0x26c>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <UART_SetConfig+0x254>
 800961c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009620:	d006      	beq.n	8009630 <UART_SetConfig+0x260>
 8009622:	e00b      	b.n	800963c <UART_SetConfig+0x26c>
 8009624:	2301      	movs	r3, #1
 8009626:	77fb      	strb	r3, [r7, #31]
 8009628:	e076      	b.n	8009718 <UART_SetConfig+0x348>
 800962a:	2302      	movs	r3, #2
 800962c:	77fb      	strb	r3, [r7, #31]
 800962e:	e073      	b.n	8009718 <UART_SetConfig+0x348>
 8009630:	2304      	movs	r3, #4
 8009632:	77fb      	strb	r3, [r7, #31]
 8009634:	e070      	b.n	8009718 <UART_SetConfig+0x348>
 8009636:	2308      	movs	r3, #8
 8009638:	77fb      	strb	r3, [r7, #31]
 800963a:	e06d      	b.n	8009718 <UART_SetConfig+0x348>
 800963c:	2310      	movs	r3, #16
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e06a      	b.n	8009718 <UART_SetConfig+0x348>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <UART_SetConfig+0x2e4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d138      	bne.n	80096be <UART_SetConfig+0x2ee>
 800964c:	4b13      	ldr	r3, [pc, #76]	; (800969c <UART_SetConfig+0x2cc>)
 800964e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009652:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800965a:	d017      	beq.n	800968c <UART_SetConfig+0x2bc>
 800965c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009660:	d82a      	bhi.n	80096b8 <UART_SetConfig+0x2e8>
 8009662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009666:	d00b      	beq.n	8009680 <UART_SetConfig+0x2b0>
 8009668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966c:	d824      	bhi.n	80096b8 <UART_SetConfig+0x2e8>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <UART_SetConfig+0x2aa>
 8009672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009676:	d006      	beq.n	8009686 <UART_SetConfig+0x2b6>
 8009678:	e01e      	b.n	80096b8 <UART_SetConfig+0x2e8>
 800967a:	2300      	movs	r3, #0
 800967c:	77fb      	strb	r3, [r7, #31]
 800967e:	e04b      	b.n	8009718 <UART_SetConfig+0x348>
 8009680:	2302      	movs	r3, #2
 8009682:	77fb      	strb	r3, [r7, #31]
 8009684:	e048      	b.n	8009718 <UART_SetConfig+0x348>
 8009686:	2304      	movs	r3, #4
 8009688:	77fb      	strb	r3, [r7, #31]
 800968a:	e045      	b.n	8009718 <UART_SetConfig+0x348>
 800968c:	2308      	movs	r3, #8
 800968e:	77fb      	strb	r3, [r7, #31]
 8009690:	e042      	b.n	8009718 <UART_SetConfig+0x348>
 8009692:	bf00      	nop
 8009694:	efff69f3 	.word	0xefff69f3
 8009698:	40011000 	.word	0x40011000
 800969c:	40023800 	.word	0x40023800
 80096a0:	40004400 	.word	0x40004400
 80096a4:	40004800 	.word	0x40004800
 80096a8:	40004c00 	.word	0x40004c00
 80096ac:	40005000 	.word	0x40005000
 80096b0:	40011400 	.word	0x40011400
 80096b4:	40007800 	.word	0x40007800
 80096b8:	2310      	movs	r3, #16
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e02c      	b.n	8009718 <UART_SetConfig+0x348>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a72      	ldr	r2, [pc, #456]	; (800988c <UART_SetConfig+0x4bc>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d125      	bne.n	8009714 <UART_SetConfig+0x344>
 80096c8:	4b71      	ldr	r3, [pc, #452]	; (8009890 <UART_SetConfig+0x4c0>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80096d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80096d6:	d017      	beq.n	8009708 <UART_SetConfig+0x338>
 80096d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80096dc:	d817      	bhi.n	800970e <UART_SetConfig+0x33e>
 80096de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e2:	d00b      	beq.n	80096fc <UART_SetConfig+0x32c>
 80096e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e8:	d811      	bhi.n	800970e <UART_SetConfig+0x33e>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <UART_SetConfig+0x326>
 80096ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096f2:	d006      	beq.n	8009702 <UART_SetConfig+0x332>
 80096f4:	e00b      	b.n	800970e <UART_SetConfig+0x33e>
 80096f6:	2300      	movs	r3, #0
 80096f8:	77fb      	strb	r3, [r7, #31]
 80096fa:	e00d      	b.n	8009718 <UART_SetConfig+0x348>
 80096fc:	2302      	movs	r3, #2
 80096fe:	77fb      	strb	r3, [r7, #31]
 8009700:	e00a      	b.n	8009718 <UART_SetConfig+0x348>
 8009702:	2304      	movs	r3, #4
 8009704:	77fb      	strb	r3, [r7, #31]
 8009706:	e007      	b.n	8009718 <UART_SetConfig+0x348>
 8009708:	2308      	movs	r3, #8
 800970a:	77fb      	strb	r3, [r7, #31]
 800970c:	e004      	b.n	8009718 <UART_SetConfig+0x348>
 800970e:	2310      	movs	r3, #16
 8009710:	77fb      	strb	r3, [r7, #31]
 8009712:	e001      	b.n	8009718 <UART_SetConfig+0x348>
 8009714:	2310      	movs	r3, #16
 8009716:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009720:	d15b      	bne.n	80097da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009722:	7ffb      	ldrb	r3, [r7, #31]
 8009724:	2b08      	cmp	r3, #8
 8009726:	d828      	bhi.n	800977a <UART_SetConfig+0x3aa>
 8009728:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <UART_SetConfig+0x360>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009755 	.word	0x08009755
 8009734:	0800975d 	.word	0x0800975d
 8009738:	08009765 	.word	0x08009765
 800973c:	0800977b 	.word	0x0800977b
 8009740:	0800976b 	.word	0x0800976b
 8009744:	0800977b 	.word	0x0800977b
 8009748:	0800977b 	.word	0x0800977b
 800974c:	0800977b 	.word	0x0800977b
 8009750:	08009773 	.word	0x08009773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009754:	f7fd fbb8 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 8009758:	61b8      	str	r0, [r7, #24]
        break;
 800975a:	e013      	b.n	8009784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800975c:	f7fd fbc8 	bl	8006ef0 <HAL_RCC_GetPCLK2Freq>
 8009760:	61b8      	str	r0, [r7, #24]
        break;
 8009762:	e00f      	b.n	8009784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009764:	4b4b      	ldr	r3, [pc, #300]	; (8009894 <UART_SetConfig+0x4c4>)
 8009766:	61bb      	str	r3, [r7, #24]
        break;
 8009768:	e00c      	b.n	8009784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800976a:	f7fd fa9b 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 800976e:	61b8      	str	r0, [r7, #24]
        break;
 8009770:	e008      	b.n	8009784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009776:	61bb      	str	r3, [r7, #24]
        break;
 8009778:	e004      	b.n	8009784 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	77bb      	strb	r3, [r7, #30]
        break;
 8009782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d074      	beq.n	8009874 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	005a      	lsls	r2, r3, #1
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	085b      	lsrs	r3, r3, #1
 8009794:	441a      	add	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	fbb2 f3f3 	udiv	r3, r2, r3
 800979e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2b0f      	cmp	r3, #15
 80097a4:	d916      	bls.n	80097d4 <UART_SetConfig+0x404>
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ac:	d212      	bcs.n	80097d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f023 030f 	bic.w	r3, r3, #15
 80097b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	b29b      	uxth	r3, r3
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	89fb      	ldrh	r3, [r7, #14]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	89fa      	ldrh	r2, [r7, #14]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	e04f      	b.n	8009874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	77bb      	strb	r3, [r7, #30]
 80097d8:	e04c      	b.n	8009874 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097da:	7ffb      	ldrb	r3, [r7, #31]
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d828      	bhi.n	8009832 <UART_SetConfig+0x462>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <UART_SetConfig+0x418>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	0800980d 	.word	0x0800980d
 80097ec:	08009815 	.word	0x08009815
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	08009833 	.word	0x08009833
 80097f8:	08009823 	.word	0x08009823
 80097fc:	08009833 	.word	0x08009833
 8009800:	08009833 	.word	0x08009833
 8009804:	08009833 	.word	0x08009833
 8009808:	0800982b 	.word	0x0800982b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800980c:	f7fd fb5c 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 8009810:	61b8      	str	r0, [r7, #24]
        break;
 8009812:	e013      	b.n	800983c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009814:	f7fd fb6c 	bl	8006ef0 <HAL_RCC_GetPCLK2Freq>
 8009818:	61b8      	str	r0, [r7, #24]
        break;
 800981a:	e00f      	b.n	800983c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800981c:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <UART_SetConfig+0x4c4>)
 800981e:	61bb      	str	r3, [r7, #24]
        break;
 8009820:	e00c      	b.n	800983c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009822:	f7fd fa3f 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8009826:	61b8      	str	r0, [r7, #24]
        break;
 8009828:	e008      	b.n	800983c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800982a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800982e:	61bb      	str	r3, [r7, #24]
        break;
 8009830:	e004      	b.n	800983c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	77bb      	strb	r3, [r7, #30]
        break;
 800983a:	bf00      	nop
    }

    if (pclk != 0U)
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d018      	beq.n	8009874 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	085a      	lsrs	r2, r3, #1
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	441a      	add	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	fbb2 f3f3 	udiv	r3, r2, r3
 8009854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b0f      	cmp	r3, #15
 800985a:	d909      	bls.n	8009870 <UART_SetConfig+0x4a0>
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009862:	d205      	bcs.n	8009870 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60da      	str	r2, [r3, #12]
 800986e:	e001      	b.n	8009874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009880:	7fbb      	ldrb	r3, [r7, #30]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	40007c00 	.word	0x40007c00
 8009890:	40023800 	.word	0x40023800
 8009894:	00f42400 	.word	0x00f42400

08009898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00a      	beq.n	8009906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	430a      	orrs	r2, r1
 8009904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	f003 0308 	and.w	r3, r3, #8
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01a      	beq.n	80099ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009996:	d10a      	bne.n	80099ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	605a      	str	r2, [r3, #4]
  }
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099ec:	f7fa f920 	bl	8003c30 <HAL_GetTick>
 80099f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d10e      	bne.n	8009a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f831 	bl	8009a76 <UART_WaitOnFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e027      	b.n	8009a6e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	d10e      	bne.n	8009a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f81b 	bl	8009a76 <UART_WaitOnFlagUntilTimeout>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e011      	b.n	8009a6e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b09c      	sub	sp, #112	; 0x70
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	4613      	mov	r3, r2
 8009a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a86:	e0a7      	b.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8e:	f000 80a3 	beq.w	8009bd8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a92:	f7fa f8cd 	bl	8003c30 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d302      	bcc.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d13f      	bne.n	8009b28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009abc:	667b      	str	r3, [r7, #100]	; 0x64
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ac8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e6      	bne.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3308      	adds	r3, #8
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	663b      	str	r3, [r7, #96]	; 0x60
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3308      	adds	r3, #8
 8009af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009afa:	64ba      	str	r2, [r7, #72]	; 0x48
 8009afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e5      	bne.n	8009ada <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2220      	movs	r2, #32
 8009b12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e068      	b.n	8009bfa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d050      	beq.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b44:	d148      	bne.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	e853 3f00 	ldrex	r3, [r3]
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e6      	bne.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3308      	adds	r3, #8
 8009b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	613b      	str	r3, [r7, #16]
   return(result);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ba2:	623a      	str	r2, [r7, #32]
 8009ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	69f9      	ldr	r1, [r7, #28]
 8009ba8:	6a3a      	ldr	r2, [r7, #32]
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e5      	bne.n	8009b82 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e010      	b.n	8009bfa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69da      	ldr	r2, [r3, #28]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4013      	ands	r3, r2
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bf0c      	ite	eq
 8009be8:	2301      	moveq	r3, #1
 8009bea:	2300      	movne	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	461a      	mov	r2, r3
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	f43f af48 	beq.w	8009a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3770      	adds	r7, #112	; 0x70
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <__cvt>:
 8009c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c04:	ed2d 8b02 	vpush	{d8}
 8009c08:	eeb0 8b40 	vmov.f64	d8, d0
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	4617      	mov	r7, r2
 8009c10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009c14:	ee18 2a90 	vmov	r2, s17
 8009c18:	f025 0520 	bic.w	r5, r5, #32
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	bfb6      	itet	lt
 8009c20:	222d      	movlt	r2, #45	; 0x2d
 8009c22:	2200      	movge	r2, #0
 8009c24:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c28:	2d46      	cmp	r5, #70	; 0x46
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	d004      	beq.n	8009c3a <__cvt+0x38>
 8009c30:	2d45      	cmp	r5, #69	; 0x45
 8009c32:	d100      	bne.n	8009c36 <__cvt+0x34>
 8009c34:	3401      	adds	r4, #1
 8009c36:	2102      	movs	r1, #2
 8009c38:	e000      	b.n	8009c3c <__cvt+0x3a>
 8009c3a:	2103      	movs	r1, #3
 8009c3c:	ab03      	add	r3, sp, #12
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	ab02      	add	r3, sp, #8
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	4622      	mov	r2, r4
 8009c46:	4633      	mov	r3, r6
 8009c48:	eeb0 0b48 	vmov.f64	d0, d8
 8009c4c:	f001 f85c 	bl	800ad08 <_dtoa_r>
 8009c50:	2d47      	cmp	r5, #71	; 0x47
 8009c52:	d101      	bne.n	8009c58 <__cvt+0x56>
 8009c54:	07fb      	lsls	r3, r7, #31
 8009c56:	d51a      	bpl.n	8009c8e <__cvt+0x8c>
 8009c58:	2d46      	cmp	r5, #70	; 0x46
 8009c5a:	eb00 0204 	add.w	r2, r0, r4
 8009c5e:	d10c      	bne.n	8009c7a <__cvt+0x78>
 8009c60:	7803      	ldrb	r3, [r0, #0]
 8009c62:	2b30      	cmp	r3, #48	; 0x30
 8009c64:	d107      	bne.n	8009c76 <__cvt+0x74>
 8009c66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6e:	bf1c      	itt	ne
 8009c70:	f1c4 0401 	rsbne	r4, r4, #1
 8009c74:	6034      	strne	r4, [r6, #0]
 8009c76:	6833      	ldr	r3, [r6, #0]
 8009c78:	441a      	add	r2, r3
 8009c7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c82:	bf08      	it	eq
 8009c84:	9203      	streq	r2, [sp, #12]
 8009c86:	2130      	movs	r1, #48	; 0x30
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d307      	bcc.n	8009c9e <__cvt+0x9c>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c92:	1a1b      	subs	r3, r3, r0
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	b005      	add	sp, #20
 8009c98:	ecbd 8b02 	vpop	{d8}
 8009c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9e:	1c5c      	adds	r4, r3, #1
 8009ca0:	9403      	str	r4, [sp, #12]
 8009ca2:	7019      	strb	r1, [r3, #0]
 8009ca4:	e7f0      	b.n	8009c88 <__cvt+0x86>

08009ca6 <__exponent>:
 8009ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2900      	cmp	r1, #0
 8009cac:	bfb8      	it	lt
 8009cae:	4249      	neglt	r1, r1
 8009cb0:	f803 2b02 	strb.w	r2, [r3], #2
 8009cb4:	bfb4      	ite	lt
 8009cb6:	222d      	movlt	r2, #45	; 0x2d
 8009cb8:	222b      	movge	r2, #43	; 0x2b
 8009cba:	2909      	cmp	r1, #9
 8009cbc:	7042      	strb	r2, [r0, #1]
 8009cbe:	dd2a      	ble.n	8009d16 <__exponent+0x70>
 8009cc0:	f10d 0207 	add.w	r2, sp, #7
 8009cc4:	4617      	mov	r7, r2
 8009cc6:	260a      	movs	r6, #10
 8009cc8:	4694      	mov	ip, r2
 8009cca:	fb91 f5f6 	sdiv	r5, r1, r6
 8009cce:	fb06 1415 	mls	r4, r6, r5, r1
 8009cd2:	3430      	adds	r4, #48	; 0x30
 8009cd4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009cd8:	460c      	mov	r4, r1
 8009cda:	2c63      	cmp	r4, #99	; 0x63
 8009cdc:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	dcf1      	bgt.n	8009cc8 <__exponent+0x22>
 8009ce4:	3130      	adds	r1, #48	; 0x30
 8009ce6:	f1ac 0402 	sub.w	r4, ip, #2
 8009cea:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009cee:	1c41      	adds	r1, r0, #1
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	42ba      	cmp	r2, r7
 8009cf4:	d30a      	bcc.n	8009d0c <__exponent+0x66>
 8009cf6:	f10d 0209 	add.w	r2, sp, #9
 8009cfa:	eba2 020c 	sub.w	r2, r2, ip
 8009cfe:	42bc      	cmp	r4, r7
 8009d00:	bf88      	it	hi
 8009d02:	2200      	movhi	r2, #0
 8009d04:	4413      	add	r3, r2
 8009d06:	1a18      	subs	r0, r3, r0
 8009d08:	b003      	add	sp, #12
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009d10:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009d14:	e7ed      	b.n	8009cf2 <__exponent+0x4c>
 8009d16:	2330      	movs	r3, #48	; 0x30
 8009d18:	3130      	adds	r1, #48	; 0x30
 8009d1a:	7083      	strb	r3, [r0, #2]
 8009d1c:	70c1      	strb	r1, [r0, #3]
 8009d1e:	1d03      	adds	r3, r0, #4
 8009d20:	e7f1      	b.n	8009d06 <__exponent+0x60>
 8009d22:	0000      	movs	r0, r0
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_printf_float>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	b08b      	sub	sp, #44	; 0x2c
 8009d2e:	460c      	mov	r4, r1
 8009d30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009d34:	4616      	mov	r6, r2
 8009d36:	461f      	mov	r7, r3
 8009d38:	4605      	mov	r5, r0
 8009d3a:	f000 fed1 	bl	800aae0 <_localeconv_r>
 8009d3e:	f8d0 b000 	ldr.w	fp, [r0]
 8009d42:	4658      	mov	r0, fp
 8009d44:	f7f6 facc 	bl	80002e0 <strlen>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9308      	str	r3, [sp, #32]
 8009d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	3307      	adds	r3, #7
 8009d58:	f023 0307 	bic.w	r3, r3, #7
 8009d5c:	f103 0108 	add.w	r1, r3, #8
 8009d60:	f8c8 1000 	str.w	r1, [r8]
 8009d64:	ed93 0b00 	vldr	d0, [r3]
 8009d68:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009fc8 <_printf_float+0x2a0>
 8009d6c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009d70:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d78:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	dd24      	ble.n	8009dca <_printf_float+0xa2>
 8009d80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	d502      	bpl.n	8009d90 <_printf_float+0x68>
 8009d8a:	232d      	movs	r3, #45	; 0x2d
 8009d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d90:	498f      	ldr	r1, [pc, #572]	; (8009fd0 <_printf_float+0x2a8>)
 8009d92:	4b90      	ldr	r3, [pc, #576]	; (8009fd4 <_printf_float+0x2ac>)
 8009d94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d98:	bf94      	ite	ls
 8009d9a:	4688      	movls	r8, r1
 8009d9c:	4698      	movhi	r8, r3
 8009d9e:	2303      	movs	r3, #3
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	f022 0204 	bic.w	r2, r2, #4
 8009da6:	2300      	movs	r3, #0
 8009da8:	6022      	str	r2, [r4, #0]
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	9700      	str	r7, [sp, #0]
 8009dae:	4633      	mov	r3, r6
 8009db0:	aa09      	add	r2, sp, #36	; 0x24
 8009db2:	4621      	mov	r1, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f000 f9d1 	bl	800a15c <_printf_common>
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f040 808a 	bne.w	8009ed4 <_printf_float+0x1ac>
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	b00b      	add	sp, #44	; 0x2c
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	eeb4 0b40 	vcmp.f64	d0, d0
 8009dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd2:	d709      	bvc.n	8009de8 <_printf_float+0xc0>
 8009dd4:	ee10 3a90 	vmov	r3, s1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfbc      	itt	lt
 8009ddc:	232d      	movlt	r3, #45	; 0x2d
 8009dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009de2:	497d      	ldr	r1, [pc, #500]	; (8009fd8 <_printf_float+0x2b0>)
 8009de4:	4b7d      	ldr	r3, [pc, #500]	; (8009fdc <_printf_float+0x2b4>)
 8009de6:	e7d5      	b.n	8009d94 <_printf_float+0x6c>
 8009de8:	6863      	ldr	r3, [r4, #4]
 8009dea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009dee:	9104      	str	r1, [sp, #16]
 8009df0:	1c59      	adds	r1, r3, #1
 8009df2:	d13c      	bne.n	8009e6e <_printf_float+0x146>
 8009df4:	2306      	movs	r3, #6
 8009df6:	6063      	str	r3, [r4, #4]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9303      	str	r3, [sp, #12]
 8009dfc:	ab08      	add	r3, sp, #32
 8009dfe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e06:	ab07      	add	r3, sp, #28
 8009e08:	6861      	ldr	r1, [r4, #4]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	6022      	str	r2, [r4, #0]
 8009e0e:	f10d 031b 	add.w	r3, sp, #27
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7ff fef5 	bl	8009c02 <__cvt>
 8009e18:	9b04      	ldr	r3, [sp, #16]
 8009e1a:	9907      	ldr	r1, [sp, #28]
 8009e1c:	2b47      	cmp	r3, #71	; 0x47
 8009e1e:	4680      	mov	r8, r0
 8009e20:	d108      	bne.n	8009e34 <_printf_float+0x10c>
 8009e22:	1cc8      	adds	r0, r1, #3
 8009e24:	db02      	blt.n	8009e2c <_printf_float+0x104>
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	dd41      	ble.n	8009eb0 <_printf_float+0x188>
 8009e2c:	f1a9 0902 	sub.w	r9, r9, #2
 8009e30:	fa5f f989 	uxtb.w	r9, r9
 8009e34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e38:	d820      	bhi.n	8009e7c <_printf_float+0x154>
 8009e3a:	3901      	subs	r1, #1
 8009e3c:	464a      	mov	r2, r9
 8009e3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e42:	9107      	str	r1, [sp, #28]
 8009e44:	f7ff ff2f 	bl	8009ca6 <__exponent>
 8009e48:	9a08      	ldr	r2, [sp, #32]
 8009e4a:	9004      	str	r0, [sp, #16]
 8009e4c:	1813      	adds	r3, r2, r0
 8009e4e:	2a01      	cmp	r2, #1
 8009e50:	6123      	str	r3, [r4, #16]
 8009e52:	dc02      	bgt.n	8009e5a <_printf_float+0x132>
 8009e54:	6822      	ldr	r2, [r4, #0]
 8009e56:	07d2      	lsls	r2, r2, #31
 8009e58:	d501      	bpl.n	8009e5e <_printf_float+0x136>
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	6123      	str	r3, [r4, #16]
 8009e5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0a2      	beq.n	8009dac <_printf_float+0x84>
 8009e66:	232d      	movs	r3, #45	; 0x2d
 8009e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6c:	e79e      	b.n	8009dac <_printf_float+0x84>
 8009e6e:	9904      	ldr	r1, [sp, #16]
 8009e70:	2947      	cmp	r1, #71	; 0x47
 8009e72:	d1c1      	bne.n	8009df8 <_printf_float+0xd0>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1bf      	bne.n	8009df8 <_printf_float+0xd0>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e7bc      	b.n	8009df6 <_printf_float+0xce>
 8009e7c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e80:	d118      	bne.n	8009eb4 <_printf_float+0x18c>
 8009e82:	2900      	cmp	r1, #0
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	dd0b      	ble.n	8009ea0 <_printf_float+0x178>
 8009e88:	6121      	str	r1, [r4, #16]
 8009e8a:	b913      	cbnz	r3, 8009e92 <_printf_float+0x16a>
 8009e8c:	6822      	ldr	r2, [r4, #0]
 8009e8e:	07d0      	lsls	r0, r2, #31
 8009e90:	d502      	bpl.n	8009e98 <_printf_float+0x170>
 8009e92:	3301      	adds	r3, #1
 8009e94:	440b      	add	r3, r1
 8009e96:	6123      	str	r3, [r4, #16]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e9c:	9304      	str	r3, [sp, #16]
 8009e9e:	e7de      	b.n	8009e5e <_printf_float+0x136>
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_printf_float+0x180>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	07d2      	lsls	r2, r2, #31
 8009ea6:	d501      	bpl.n	8009eac <_printf_float+0x184>
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	e7f4      	b.n	8009e96 <_printf_float+0x16e>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e7f2      	b.n	8009e96 <_printf_float+0x16e>
 8009eb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	db05      	blt.n	8009ec6 <_printf_float+0x19e>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	6121      	str	r1, [r4, #16]
 8009ebe:	07d8      	lsls	r0, r3, #31
 8009ec0:	d5ea      	bpl.n	8009e98 <_printf_float+0x170>
 8009ec2:	1c4b      	adds	r3, r1, #1
 8009ec4:	e7e7      	b.n	8009e96 <_printf_float+0x16e>
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	bfd4      	ite	le
 8009eca:	f1c1 0202 	rsble	r2, r1, #2
 8009ece:	2201      	movgt	r2, #1
 8009ed0:	4413      	add	r3, r2
 8009ed2:	e7e0      	b.n	8009e96 <_printf_float+0x16e>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	055a      	lsls	r2, r3, #21
 8009ed8:	d407      	bmi.n	8009eea <_printf_float+0x1c2>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	4642      	mov	r2, r8
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d12a      	bne.n	8009f3e <_printf_float+0x216>
 8009ee8:	e76a      	b.n	8009dc0 <_printf_float+0x98>
 8009eea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009eee:	f240 80e0 	bls.w	800a0b2 <_printf_float+0x38a>
 8009ef2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ef6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efe:	d133      	bne.n	8009f68 <_printf_float+0x240>
 8009f00:	4a37      	ldr	r2, [pc, #220]	; (8009fe0 <_printf_float+0x2b8>)
 8009f02:	2301      	movs	r3, #1
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af58 	beq.w	8009dc0 <_printf_float+0x98>
 8009f10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	db02      	blt.n	8009f1e <_printf_float+0x1f6>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	07d8      	lsls	r0, r3, #31
 8009f1c:	d50f      	bpl.n	8009f3e <_printf_float+0x216>
 8009f1e:	4653      	mov	r3, sl
 8009f20:	465a      	mov	r2, fp
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f af49 	beq.w	8009dc0 <_printf_float+0x98>
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	f104 091a 	add.w	r9, r4, #26
 8009f36:	9b08      	ldr	r3, [sp, #32]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	4543      	cmp	r3, r8
 8009f3c:	dc09      	bgt.n	8009f52 <_printf_float+0x22a>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	079b      	lsls	r3, r3, #30
 8009f42:	f100 8106 	bmi.w	800a152 <_printf_float+0x42a>
 8009f46:	68e0      	ldr	r0, [r4, #12]
 8009f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	bfb8      	it	lt
 8009f4e:	4618      	movlt	r0, r3
 8009f50:	e738      	b.n	8009dc4 <_printf_float+0x9c>
 8009f52:	2301      	movs	r3, #1
 8009f54:	464a      	mov	r2, r9
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	f43f af2f 	beq.w	8009dc0 <_printf_float+0x98>
 8009f62:	f108 0801 	add.w	r8, r8, #1
 8009f66:	e7e6      	b.n	8009f36 <_printf_float+0x20e>
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	dc3a      	bgt.n	8009fe4 <_printf_float+0x2bc>
 8009f6e:	4a1c      	ldr	r2, [pc, #112]	; (8009fe0 <_printf_float+0x2b8>)
 8009f70:	2301      	movs	r3, #1
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b8      	blx	r7
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f43f af21 	beq.w	8009dc0 <_printf_float+0x98>
 8009f7e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	d102      	bne.n	8009f8c <_printf_float+0x264>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	07d9      	lsls	r1, r3, #31
 8009f8a:	d5d8      	bpl.n	8009f3e <_printf_float+0x216>
 8009f8c:	4653      	mov	r3, sl
 8009f8e:	465a      	mov	r2, fp
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	f43f af12 	beq.w	8009dc0 <_printf_float+0x98>
 8009f9c:	f04f 0900 	mov.w	r9, #0
 8009fa0:	f104 0a1a 	add.w	sl, r4, #26
 8009fa4:	9b07      	ldr	r3, [sp, #28]
 8009fa6:	425b      	negs	r3, r3
 8009fa8:	454b      	cmp	r3, r9
 8009faa:	dc01      	bgt.n	8009fb0 <_printf_float+0x288>
 8009fac:	9b08      	ldr	r3, [sp, #32]
 8009fae:	e795      	b.n	8009edc <_printf_float+0x1b4>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b8      	blx	r7
 8009fba:	3001      	adds	r0, #1
 8009fbc:	f43f af00 	beq.w	8009dc0 <_printf_float+0x98>
 8009fc0:	f109 0901 	add.w	r9, r9, #1
 8009fc4:	e7ee      	b.n	8009fa4 <_printf_float+0x27c>
 8009fc6:	bf00      	nop
 8009fc8:	ffffffff 	.word	0xffffffff
 8009fcc:	7fefffff 	.word	0x7fefffff
 8009fd0:	08018edc 	.word	0x08018edc
 8009fd4:	08018ee0 	.word	0x08018ee0
 8009fd8:	08018ee4 	.word	0x08018ee4
 8009fdc:	08018ee8 	.word	0x08018ee8
 8009fe0:	08018eec 	.word	0x08018eec
 8009fe4:	9a08      	ldr	r2, [sp, #32]
 8009fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	bfa8      	it	ge
 8009fec:	461a      	movge	r2, r3
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	4691      	mov	r9, r2
 8009ff2:	dc38      	bgt.n	800a066 <_printf_float+0x33e>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffc:	f104 021a 	add.w	r2, r4, #26
 800a000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a002:	9905      	ldr	r1, [sp, #20]
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	eba3 0309 	sub.w	r3, r3, r9
 800a00a:	428b      	cmp	r3, r1
 800a00c:	dc33      	bgt.n	800a076 <_printf_float+0x34e>
 800a00e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a012:	429a      	cmp	r2, r3
 800a014:	db3c      	blt.n	800a090 <_printf_float+0x368>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	07da      	lsls	r2, r3, #31
 800a01a:	d439      	bmi.n	800a090 <_printf_float+0x368>
 800a01c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a020:	eba2 0903 	sub.w	r9, r2, r3
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	1ad2      	subs	r2, r2, r3
 800a028:	4591      	cmp	r9, r2
 800a02a:	bfa8      	it	ge
 800a02c:	4691      	movge	r9, r2
 800a02e:	f1b9 0f00 	cmp.w	r9, #0
 800a032:	dc35      	bgt.n	800a0a0 <_printf_float+0x378>
 800a034:	f04f 0800 	mov.w	r8, #0
 800a038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a03c:	f104 0a1a 	add.w	sl, r4, #26
 800a040:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	eba3 0309 	sub.w	r3, r3, r9
 800a04a:	4543      	cmp	r3, r8
 800a04c:	f77f af77 	ble.w	8009f3e <_printf_float+0x216>
 800a050:	2301      	movs	r3, #1
 800a052:	4652      	mov	r2, sl
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	47b8      	blx	r7
 800a05a:	3001      	adds	r0, #1
 800a05c:	f43f aeb0 	beq.w	8009dc0 <_printf_float+0x98>
 800a060:	f108 0801 	add.w	r8, r8, #1
 800a064:	e7ec      	b.n	800a040 <_printf_float+0x318>
 800a066:	4613      	mov	r3, r2
 800a068:	4631      	mov	r1, r6
 800a06a:	4642      	mov	r2, r8
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	d1bf      	bne.n	8009ff4 <_printf_float+0x2cc>
 800a074:	e6a4      	b.n	8009dc0 <_printf_float+0x98>
 800a076:	2301      	movs	r3, #1
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	9204      	str	r2, [sp, #16]
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	f43f ae9d 	beq.w	8009dc0 <_printf_float+0x98>
 800a086:	9b05      	ldr	r3, [sp, #20]
 800a088:	9a04      	ldr	r2, [sp, #16]
 800a08a:	3301      	adds	r3, #1
 800a08c:	9305      	str	r3, [sp, #20]
 800a08e:	e7b7      	b.n	800a000 <_printf_float+0x2d8>
 800a090:	4653      	mov	r3, sl
 800a092:	465a      	mov	r2, fp
 800a094:	4631      	mov	r1, r6
 800a096:	4628      	mov	r0, r5
 800a098:	47b8      	blx	r7
 800a09a:	3001      	adds	r0, #1
 800a09c:	d1be      	bne.n	800a01c <_printf_float+0x2f4>
 800a09e:	e68f      	b.n	8009dc0 <_printf_float+0x98>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	464b      	mov	r3, r9
 800a0a4:	4442      	add	r2, r8
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d1c1      	bne.n	800a034 <_printf_float+0x30c>
 800a0b0:	e686      	b.n	8009dc0 <_printf_float+0x98>
 800a0b2:	9a08      	ldr	r2, [sp, #32]
 800a0b4:	2a01      	cmp	r2, #1
 800a0b6:	dc01      	bgt.n	800a0bc <_printf_float+0x394>
 800a0b8:	07db      	lsls	r3, r3, #31
 800a0ba:	d537      	bpl.n	800a12c <_printf_float+0x404>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4642      	mov	r2, r8
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f ae7a 	beq.w	8009dc0 <_printf_float+0x98>
 800a0cc:	4653      	mov	r3, sl
 800a0ce:	465a      	mov	r2, fp
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f ae72 	beq.w	8009dc0 <_printf_float+0x98>
 800a0dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a0e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e8:	9b08      	ldr	r3, [sp, #32]
 800a0ea:	d01a      	beq.n	800a122 <_printf_float+0x3fa>
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	f108 0201 	add.w	r2, r8, #1
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d10e      	bne.n	800a11a <_printf_float+0x3f2>
 800a0fc:	e660      	b.n	8009dc0 <_printf_float+0x98>
 800a0fe:	2301      	movs	r3, #1
 800a100:	464a      	mov	r2, r9
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae59 	beq.w	8009dc0 <_printf_float+0x98>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	3b01      	subs	r3, #1
 800a116:	4543      	cmp	r3, r8
 800a118:	dcf1      	bgt.n	800a0fe <_printf_float+0x3d6>
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a120:	e6dd      	b.n	8009ede <_printf_float+0x1b6>
 800a122:	f04f 0800 	mov.w	r8, #0
 800a126:	f104 091a 	add.w	r9, r4, #26
 800a12a:	e7f2      	b.n	800a112 <_printf_float+0x3ea>
 800a12c:	2301      	movs	r3, #1
 800a12e:	4642      	mov	r2, r8
 800a130:	e7df      	b.n	800a0f2 <_printf_float+0x3ca>
 800a132:	2301      	movs	r3, #1
 800a134:	464a      	mov	r2, r9
 800a136:	4631      	mov	r1, r6
 800a138:	4628      	mov	r0, r5
 800a13a:	47b8      	blx	r7
 800a13c:	3001      	adds	r0, #1
 800a13e:	f43f ae3f 	beq.w	8009dc0 <_printf_float+0x98>
 800a142:	f108 0801 	add.w	r8, r8, #1
 800a146:	68e3      	ldr	r3, [r4, #12]
 800a148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a14a:	1a5b      	subs	r3, r3, r1
 800a14c:	4543      	cmp	r3, r8
 800a14e:	dcf0      	bgt.n	800a132 <_printf_float+0x40a>
 800a150:	e6f9      	b.n	8009f46 <_printf_float+0x21e>
 800a152:	f04f 0800 	mov.w	r8, #0
 800a156:	f104 0919 	add.w	r9, r4, #25
 800a15a:	e7f4      	b.n	800a146 <_printf_float+0x41e>

0800a15c <_printf_common>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	4616      	mov	r6, r2
 800a162:	4699      	mov	r9, r3
 800a164:	688a      	ldr	r2, [r1, #8]
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfb8      	it	lt
 800a170:	4613      	movlt	r3, r2
 800a172:	6033      	str	r3, [r6, #0]
 800a174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a178:	4607      	mov	r7, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b10a      	cbz	r2, 800a182 <_printf_common+0x26>
 800a17e:	3301      	adds	r3, #1
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	0699      	lsls	r1, r3, #26
 800a186:	bf42      	ittt	mi
 800a188:	6833      	ldrmi	r3, [r6, #0]
 800a18a:	3302      	addmi	r3, #2
 800a18c:	6033      	strmi	r3, [r6, #0]
 800a18e:	6825      	ldr	r5, [r4, #0]
 800a190:	f015 0506 	ands.w	r5, r5, #6
 800a194:	d106      	bne.n	800a1a4 <_printf_common+0x48>
 800a196:	f104 0a19 	add.w	sl, r4, #25
 800a19a:	68e3      	ldr	r3, [r4, #12]
 800a19c:	6832      	ldr	r2, [r6, #0]
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	dc26      	bgt.n	800a1f2 <_printf_common+0x96>
 800a1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1a8:	1e13      	subs	r3, r2, #0
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	bf18      	it	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	0692      	lsls	r2, r2, #26
 800a1b2:	d42b      	bmi.n	800a20c <_printf_common+0xb0>
 800a1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d01e      	beq.n	800a200 <_printf_common+0xa4>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	6922      	ldr	r2, [r4, #16]
 800a1c6:	f003 0306 	and.w	r3, r3, #6
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	bf02      	ittt	eq
 800a1ce:	68e5      	ldreq	r5, [r4, #12]
 800a1d0:	6833      	ldreq	r3, [r6, #0]
 800a1d2:	1aed      	subeq	r5, r5, r3
 800a1d4:	68a3      	ldr	r3, [r4, #8]
 800a1d6:	bf0c      	ite	eq
 800a1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1dc:	2500      	movne	r5, #0
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	bfc4      	itt	gt
 800a1e2:	1a9b      	subgt	r3, r3, r2
 800a1e4:	18ed      	addgt	r5, r5, r3
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	341a      	adds	r4, #26
 800a1ea:	42b5      	cmp	r5, r6
 800a1ec:	d11a      	bne.n	800a224 <_printf_common+0xc8>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e008      	b.n	800a204 <_printf_common+0xa8>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	47c0      	blx	r8
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d103      	bne.n	800a208 <_printf_common+0xac>
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a208:	3501      	adds	r5, #1
 800a20a:	e7c6      	b.n	800a19a <_printf_common+0x3e>
 800a20c:	18e1      	adds	r1, r4, r3
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	2030      	movs	r0, #48	; 0x30
 800a212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a216:	4422      	add	r2, r4
 800a218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a220:	3302      	adds	r3, #2
 800a222:	e7c7      	b.n	800a1b4 <_printf_common+0x58>
 800a224:	2301      	movs	r3, #1
 800a226:	4622      	mov	r2, r4
 800a228:	4649      	mov	r1, r9
 800a22a:	4638      	mov	r0, r7
 800a22c:	47c0      	blx	r8
 800a22e:	3001      	adds	r0, #1
 800a230:	d0e6      	beq.n	800a200 <_printf_common+0xa4>
 800a232:	3601      	adds	r6, #1
 800a234:	e7d9      	b.n	800a1ea <_printf_common+0x8e>
	...

0800a238 <_printf_i>:
 800a238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	7e0f      	ldrb	r7, [r1, #24]
 800a23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a240:	2f78      	cmp	r7, #120	; 0x78
 800a242:	4691      	mov	r9, r2
 800a244:	4680      	mov	r8, r0
 800a246:	460c      	mov	r4, r1
 800a248:	469a      	mov	sl, r3
 800a24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a24e:	d807      	bhi.n	800a260 <_printf_i+0x28>
 800a250:	2f62      	cmp	r7, #98	; 0x62
 800a252:	d80a      	bhi.n	800a26a <_printf_i+0x32>
 800a254:	2f00      	cmp	r7, #0
 800a256:	f000 80d4 	beq.w	800a402 <_printf_i+0x1ca>
 800a25a:	2f58      	cmp	r7, #88	; 0x58
 800a25c:	f000 80c0 	beq.w	800a3e0 <_printf_i+0x1a8>
 800a260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a268:	e03a      	b.n	800a2e0 <_printf_i+0xa8>
 800a26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a26e:	2b15      	cmp	r3, #21
 800a270:	d8f6      	bhi.n	800a260 <_printf_i+0x28>
 800a272:	a101      	add	r1, pc, #4	; (adr r1, 800a278 <_printf_i+0x40>)
 800a274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	0800a2e5 	.word	0x0800a2e5
 800a280:	0800a261 	.word	0x0800a261
 800a284:	0800a261 	.word	0x0800a261
 800a288:	0800a261 	.word	0x0800a261
 800a28c:	0800a261 	.word	0x0800a261
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a261 	.word	0x0800a261
 800a298:	0800a261 	.word	0x0800a261
 800a29c:	0800a261 	.word	0x0800a261
 800a2a0:	0800a261 	.word	0x0800a261
 800a2a4:	0800a3e9 	.word	0x0800a3e9
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a3a3 	.word	0x0800a3a3
 800a2b0:	0800a261 	.word	0x0800a261
 800a2b4:	0800a261 	.word	0x0800a261
 800a2b8:	0800a40b 	.word	0x0800a40b
 800a2bc:	0800a261 	.word	0x0800a261
 800a2c0:	0800a311 	.word	0x0800a311
 800a2c4:	0800a261 	.word	0x0800a261
 800a2c8:	0800a261 	.word	0x0800a261
 800a2cc:	0800a3ab 	.word	0x0800a3ab
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	602a      	str	r2, [r5, #0]
 800a2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e09f      	b.n	800a424 <_printf_i+0x1ec>
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	0607      	lsls	r7, r0, #24
 800a2ea:	f103 0104 	add.w	r1, r3, #4
 800a2ee:	6029      	str	r1, [r5, #0]
 800a2f0:	d501      	bpl.n	800a2f6 <_printf_i+0xbe>
 800a2f2:	681e      	ldr	r6, [r3, #0]
 800a2f4:	e003      	b.n	800a2fe <_printf_i+0xc6>
 800a2f6:	0646      	lsls	r6, r0, #25
 800a2f8:	d5fb      	bpl.n	800a2f2 <_printf_i+0xba>
 800a2fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	da03      	bge.n	800a30a <_printf_i+0xd2>
 800a302:	232d      	movs	r3, #45	; 0x2d
 800a304:	4276      	negs	r6, r6
 800a306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a30a:	485a      	ldr	r0, [pc, #360]	; (800a474 <_printf_i+0x23c>)
 800a30c:	230a      	movs	r3, #10
 800a30e:	e012      	b.n	800a336 <_printf_i+0xfe>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	6820      	ldr	r0, [r4, #0]
 800a314:	1d19      	adds	r1, r3, #4
 800a316:	6029      	str	r1, [r5, #0]
 800a318:	0605      	lsls	r5, r0, #24
 800a31a:	d501      	bpl.n	800a320 <_printf_i+0xe8>
 800a31c:	681e      	ldr	r6, [r3, #0]
 800a31e:	e002      	b.n	800a326 <_printf_i+0xee>
 800a320:	0641      	lsls	r1, r0, #25
 800a322:	d5fb      	bpl.n	800a31c <_printf_i+0xe4>
 800a324:	881e      	ldrh	r6, [r3, #0]
 800a326:	4853      	ldr	r0, [pc, #332]	; (800a474 <_printf_i+0x23c>)
 800a328:	2f6f      	cmp	r7, #111	; 0x6f
 800a32a:	bf0c      	ite	eq
 800a32c:	2308      	moveq	r3, #8
 800a32e:	230a      	movne	r3, #10
 800a330:	2100      	movs	r1, #0
 800a332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a336:	6865      	ldr	r5, [r4, #4]
 800a338:	60a5      	str	r5, [r4, #8]
 800a33a:	2d00      	cmp	r5, #0
 800a33c:	bfa2      	ittt	ge
 800a33e:	6821      	ldrge	r1, [r4, #0]
 800a340:	f021 0104 	bicge.w	r1, r1, #4
 800a344:	6021      	strge	r1, [r4, #0]
 800a346:	b90e      	cbnz	r6, 800a34c <_printf_i+0x114>
 800a348:	2d00      	cmp	r5, #0
 800a34a:	d04b      	beq.n	800a3e4 <_printf_i+0x1ac>
 800a34c:	4615      	mov	r5, r2
 800a34e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a352:	fb03 6711 	mls	r7, r3, r1, r6
 800a356:	5dc7      	ldrb	r7, [r0, r7]
 800a358:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a35c:	4637      	mov	r7, r6
 800a35e:	42bb      	cmp	r3, r7
 800a360:	460e      	mov	r6, r1
 800a362:	d9f4      	bls.n	800a34e <_printf_i+0x116>
 800a364:	2b08      	cmp	r3, #8
 800a366:	d10b      	bne.n	800a380 <_printf_i+0x148>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	07de      	lsls	r6, r3, #31
 800a36c:	d508      	bpl.n	800a380 <_printf_i+0x148>
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	4299      	cmp	r1, r3
 800a374:	bfde      	ittt	le
 800a376:	2330      	movle	r3, #48	; 0x30
 800a378:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a37c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a380:	1b52      	subs	r2, r2, r5
 800a382:	6122      	str	r2, [r4, #16]
 800a384:	f8cd a000 	str.w	sl, [sp]
 800a388:	464b      	mov	r3, r9
 800a38a:	aa03      	add	r2, sp, #12
 800a38c:	4621      	mov	r1, r4
 800a38e:	4640      	mov	r0, r8
 800a390:	f7ff fee4 	bl	800a15c <_printf_common>
 800a394:	3001      	adds	r0, #1
 800a396:	d14a      	bne.n	800a42e <_printf_i+0x1f6>
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	b004      	add	sp, #16
 800a39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	f043 0320 	orr.w	r3, r3, #32
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	4833      	ldr	r0, [pc, #204]	; (800a478 <_printf_i+0x240>)
 800a3ac:	2778      	movs	r7, #120	; 0x78
 800a3ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	6829      	ldr	r1, [r5, #0]
 800a3b6:	061f      	lsls	r7, r3, #24
 800a3b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3bc:	d402      	bmi.n	800a3c4 <_printf_i+0x18c>
 800a3be:	065f      	lsls	r7, r3, #25
 800a3c0:	bf48      	it	mi
 800a3c2:	b2b6      	uxthmi	r6, r6
 800a3c4:	07df      	lsls	r7, r3, #31
 800a3c6:	bf48      	it	mi
 800a3c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a3cc:	6029      	str	r1, [r5, #0]
 800a3ce:	bf48      	it	mi
 800a3d0:	6023      	strmi	r3, [r4, #0]
 800a3d2:	b91e      	cbnz	r6, 800a3dc <_printf_i+0x1a4>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	f023 0320 	bic.w	r3, r3, #32
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	2310      	movs	r3, #16
 800a3de:	e7a7      	b.n	800a330 <_printf_i+0xf8>
 800a3e0:	4824      	ldr	r0, [pc, #144]	; (800a474 <_printf_i+0x23c>)
 800a3e2:	e7e4      	b.n	800a3ae <_printf_i+0x176>
 800a3e4:	4615      	mov	r5, r2
 800a3e6:	e7bd      	b.n	800a364 <_printf_i+0x12c>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	6826      	ldr	r6, [r4, #0]
 800a3ec:	6961      	ldr	r1, [r4, #20]
 800a3ee:	1d18      	adds	r0, r3, #4
 800a3f0:	6028      	str	r0, [r5, #0]
 800a3f2:	0635      	lsls	r5, r6, #24
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	d501      	bpl.n	800a3fc <_printf_i+0x1c4>
 800a3f8:	6019      	str	r1, [r3, #0]
 800a3fa:	e002      	b.n	800a402 <_printf_i+0x1ca>
 800a3fc:	0670      	lsls	r0, r6, #25
 800a3fe:	d5fb      	bpl.n	800a3f8 <_printf_i+0x1c0>
 800a400:	8019      	strh	r1, [r3, #0]
 800a402:	2300      	movs	r3, #0
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	4615      	mov	r5, r2
 800a408:	e7bc      	b.n	800a384 <_printf_i+0x14c>
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	1d1a      	adds	r2, r3, #4
 800a40e:	602a      	str	r2, [r5, #0]
 800a410:	681d      	ldr	r5, [r3, #0]
 800a412:	6862      	ldr	r2, [r4, #4]
 800a414:	2100      	movs	r1, #0
 800a416:	4628      	mov	r0, r5
 800a418:	f7f5 ff12 	bl	8000240 <memchr>
 800a41c:	b108      	cbz	r0, 800a422 <_printf_i+0x1ea>
 800a41e:	1b40      	subs	r0, r0, r5
 800a420:	6060      	str	r0, [r4, #4]
 800a422:	6863      	ldr	r3, [r4, #4]
 800a424:	6123      	str	r3, [r4, #16]
 800a426:	2300      	movs	r3, #0
 800a428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42c:	e7aa      	b.n	800a384 <_printf_i+0x14c>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	462a      	mov	r2, r5
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d0ad      	beq.n	800a398 <_printf_i+0x160>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	079b      	lsls	r3, r3, #30
 800a440:	d413      	bmi.n	800a46a <_printf_i+0x232>
 800a442:	68e0      	ldr	r0, [r4, #12]
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	4298      	cmp	r0, r3
 800a448:	bfb8      	it	lt
 800a44a:	4618      	movlt	r0, r3
 800a44c:	e7a6      	b.n	800a39c <_printf_i+0x164>
 800a44e:	2301      	movs	r3, #1
 800a450:	4632      	mov	r2, r6
 800a452:	4649      	mov	r1, r9
 800a454:	4640      	mov	r0, r8
 800a456:	47d0      	blx	sl
 800a458:	3001      	adds	r0, #1
 800a45a:	d09d      	beq.n	800a398 <_printf_i+0x160>
 800a45c:	3501      	adds	r5, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	9903      	ldr	r1, [sp, #12]
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	42ab      	cmp	r3, r5
 800a466:	dcf2      	bgt.n	800a44e <_printf_i+0x216>
 800a468:	e7eb      	b.n	800a442 <_printf_i+0x20a>
 800a46a:	2500      	movs	r5, #0
 800a46c:	f104 0619 	add.w	r6, r4, #25
 800a470:	e7f5      	b.n	800a45e <_printf_i+0x226>
 800a472:	bf00      	nop
 800a474:	08018eee 	.word	0x08018eee
 800a478:	08018eff 	.word	0x08018eff

0800a47c <_scanf_float>:
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	b087      	sub	sp, #28
 800a482:	4617      	mov	r7, r2
 800a484:	9303      	str	r3, [sp, #12]
 800a486:	688b      	ldr	r3, [r1, #8]
 800a488:	1e5a      	subs	r2, r3, #1
 800a48a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a48e:	bf83      	ittte	hi
 800a490:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a494:	195b      	addhi	r3, r3, r5
 800a496:	9302      	strhi	r3, [sp, #8]
 800a498:	2300      	movls	r3, #0
 800a49a:	bf86      	itte	hi
 800a49c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a4a0:	608b      	strhi	r3, [r1, #8]
 800a4a2:	9302      	strls	r3, [sp, #8]
 800a4a4:	680b      	ldr	r3, [r1, #0]
 800a4a6:	468b      	mov	fp, r1
 800a4a8:	2500      	movs	r5, #0
 800a4aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a4ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800a4b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4b6:	4680      	mov	r8, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	465e      	mov	r6, fp
 800a4bc:	46aa      	mov	sl, r5
 800a4be:	46a9      	mov	r9, r5
 800a4c0:	9501      	str	r5, [sp, #4]
 800a4c2:	68a2      	ldr	r2, [r4, #8]
 800a4c4:	b152      	cbz	r2, 800a4dc <_scanf_float+0x60>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b4e      	cmp	r3, #78	; 0x4e
 800a4cc:	d864      	bhi.n	800a598 <_scanf_float+0x11c>
 800a4ce:	2b40      	cmp	r3, #64	; 0x40
 800a4d0:	d83c      	bhi.n	800a54c <_scanf_float+0xd0>
 800a4d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a4d6:	b2c8      	uxtb	r0, r1
 800a4d8:	280e      	cmp	r0, #14
 800a4da:	d93a      	bls.n	800a552 <_scanf_float+0xd6>
 800a4dc:	f1b9 0f00 	cmp.w	r9, #0
 800a4e0:	d003      	beq.n	800a4ea <_scanf_float+0x6e>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ee:	f1ba 0f01 	cmp.w	sl, #1
 800a4f2:	f200 8113 	bhi.w	800a71c <_scanf_float+0x2a0>
 800a4f6:	455e      	cmp	r6, fp
 800a4f8:	f200 8105 	bhi.w	800a706 <_scanf_float+0x28a>
 800a4fc:	2501      	movs	r5, #1
 800a4fe:	4628      	mov	r0, r5
 800a500:	b007      	add	sp, #28
 800a502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a506:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a50a:	2a0d      	cmp	r2, #13
 800a50c:	d8e6      	bhi.n	800a4dc <_scanf_float+0x60>
 800a50e:	a101      	add	r1, pc, #4	; (adr r1, 800a514 <_scanf_float+0x98>)
 800a510:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a514:	0800a653 	.word	0x0800a653
 800a518:	0800a4dd 	.word	0x0800a4dd
 800a51c:	0800a4dd 	.word	0x0800a4dd
 800a520:	0800a4dd 	.word	0x0800a4dd
 800a524:	0800a6b3 	.word	0x0800a6b3
 800a528:	0800a68b 	.word	0x0800a68b
 800a52c:	0800a4dd 	.word	0x0800a4dd
 800a530:	0800a4dd 	.word	0x0800a4dd
 800a534:	0800a661 	.word	0x0800a661
 800a538:	0800a4dd 	.word	0x0800a4dd
 800a53c:	0800a4dd 	.word	0x0800a4dd
 800a540:	0800a4dd 	.word	0x0800a4dd
 800a544:	0800a4dd 	.word	0x0800a4dd
 800a548:	0800a619 	.word	0x0800a619
 800a54c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a550:	e7db      	b.n	800a50a <_scanf_float+0x8e>
 800a552:	290e      	cmp	r1, #14
 800a554:	d8c2      	bhi.n	800a4dc <_scanf_float+0x60>
 800a556:	a001      	add	r0, pc, #4	; (adr r0, 800a55c <_scanf_float+0xe0>)
 800a558:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a55c:	0800a60b 	.word	0x0800a60b
 800a560:	0800a4dd 	.word	0x0800a4dd
 800a564:	0800a60b 	.word	0x0800a60b
 800a568:	0800a69f 	.word	0x0800a69f
 800a56c:	0800a4dd 	.word	0x0800a4dd
 800a570:	0800a5b9 	.word	0x0800a5b9
 800a574:	0800a5f5 	.word	0x0800a5f5
 800a578:	0800a5f5 	.word	0x0800a5f5
 800a57c:	0800a5f5 	.word	0x0800a5f5
 800a580:	0800a5f5 	.word	0x0800a5f5
 800a584:	0800a5f5 	.word	0x0800a5f5
 800a588:	0800a5f5 	.word	0x0800a5f5
 800a58c:	0800a5f5 	.word	0x0800a5f5
 800a590:	0800a5f5 	.word	0x0800a5f5
 800a594:	0800a5f5 	.word	0x0800a5f5
 800a598:	2b6e      	cmp	r3, #110	; 0x6e
 800a59a:	d809      	bhi.n	800a5b0 <_scanf_float+0x134>
 800a59c:	2b60      	cmp	r3, #96	; 0x60
 800a59e:	d8b2      	bhi.n	800a506 <_scanf_float+0x8a>
 800a5a0:	2b54      	cmp	r3, #84	; 0x54
 800a5a2:	d077      	beq.n	800a694 <_scanf_float+0x218>
 800a5a4:	2b59      	cmp	r3, #89	; 0x59
 800a5a6:	d199      	bne.n	800a4dc <_scanf_float+0x60>
 800a5a8:	2d07      	cmp	r5, #7
 800a5aa:	d197      	bne.n	800a4dc <_scanf_float+0x60>
 800a5ac:	2508      	movs	r5, #8
 800a5ae:	e029      	b.n	800a604 <_scanf_float+0x188>
 800a5b0:	2b74      	cmp	r3, #116	; 0x74
 800a5b2:	d06f      	beq.n	800a694 <_scanf_float+0x218>
 800a5b4:	2b79      	cmp	r3, #121	; 0x79
 800a5b6:	e7f6      	b.n	800a5a6 <_scanf_float+0x12a>
 800a5b8:	6821      	ldr	r1, [r4, #0]
 800a5ba:	05c8      	lsls	r0, r1, #23
 800a5bc:	d51a      	bpl.n	800a5f4 <_scanf_float+0x178>
 800a5be:	9b02      	ldr	r3, [sp, #8]
 800a5c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5c4:	6021      	str	r1, [r4, #0]
 800a5c6:	f109 0901 	add.w	r9, r9, #1
 800a5ca:	b11b      	cbz	r3, 800a5d4 <_scanf_float+0x158>
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	9302      	str	r3, [sp, #8]
 800a5d2:	60a2      	str	r2, [r4, #8]
 800a5d4:	68a3      	ldr	r3, [r4, #8]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	60a3      	str	r3, [r4, #8]
 800a5da:	6923      	ldr	r3, [r4, #16]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	6123      	str	r3, [r4, #16]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	607b      	str	r3, [r7, #4]
 800a5e8:	f340 8084 	ble.w	800a6f4 <_scanf_float+0x278>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	603b      	str	r3, [r7, #0]
 800a5f2:	e766      	b.n	800a4c2 <_scanf_float+0x46>
 800a5f4:	eb1a 0f05 	cmn.w	sl, r5
 800a5f8:	f47f af70 	bne.w	800a4dc <_scanf_float+0x60>
 800a5fc:	6822      	ldr	r2, [r4, #0]
 800a5fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a602:	6022      	str	r2, [r4, #0]
 800a604:	f806 3b01 	strb.w	r3, [r6], #1
 800a608:	e7e4      	b.n	800a5d4 <_scanf_float+0x158>
 800a60a:	6822      	ldr	r2, [r4, #0]
 800a60c:	0610      	lsls	r0, r2, #24
 800a60e:	f57f af65 	bpl.w	800a4dc <_scanf_float+0x60>
 800a612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a616:	e7f4      	b.n	800a602 <_scanf_float+0x186>
 800a618:	f1ba 0f00 	cmp.w	sl, #0
 800a61c:	d10e      	bne.n	800a63c <_scanf_float+0x1c0>
 800a61e:	f1b9 0f00 	cmp.w	r9, #0
 800a622:	d10e      	bne.n	800a642 <_scanf_float+0x1c6>
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a62a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a62e:	d108      	bne.n	800a642 <_scanf_float+0x1c6>
 800a630:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a634:	6022      	str	r2, [r4, #0]
 800a636:	f04f 0a01 	mov.w	sl, #1
 800a63a:	e7e3      	b.n	800a604 <_scanf_float+0x188>
 800a63c:	f1ba 0f02 	cmp.w	sl, #2
 800a640:	d055      	beq.n	800a6ee <_scanf_float+0x272>
 800a642:	2d01      	cmp	r5, #1
 800a644:	d002      	beq.n	800a64c <_scanf_float+0x1d0>
 800a646:	2d04      	cmp	r5, #4
 800a648:	f47f af48 	bne.w	800a4dc <_scanf_float+0x60>
 800a64c:	3501      	adds	r5, #1
 800a64e:	b2ed      	uxtb	r5, r5
 800a650:	e7d8      	b.n	800a604 <_scanf_float+0x188>
 800a652:	f1ba 0f01 	cmp.w	sl, #1
 800a656:	f47f af41 	bne.w	800a4dc <_scanf_float+0x60>
 800a65a:	f04f 0a02 	mov.w	sl, #2
 800a65e:	e7d1      	b.n	800a604 <_scanf_float+0x188>
 800a660:	b97d      	cbnz	r5, 800a682 <_scanf_float+0x206>
 800a662:	f1b9 0f00 	cmp.w	r9, #0
 800a666:	f47f af3c 	bne.w	800a4e2 <_scanf_float+0x66>
 800a66a:	6822      	ldr	r2, [r4, #0]
 800a66c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a670:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a674:	f47f af39 	bne.w	800a4ea <_scanf_float+0x6e>
 800a678:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a67c:	6022      	str	r2, [r4, #0]
 800a67e:	2501      	movs	r5, #1
 800a680:	e7c0      	b.n	800a604 <_scanf_float+0x188>
 800a682:	2d03      	cmp	r5, #3
 800a684:	d0e2      	beq.n	800a64c <_scanf_float+0x1d0>
 800a686:	2d05      	cmp	r5, #5
 800a688:	e7de      	b.n	800a648 <_scanf_float+0x1cc>
 800a68a:	2d02      	cmp	r5, #2
 800a68c:	f47f af26 	bne.w	800a4dc <_scanf_float+0x60>
 800a690:	2503      	movs	r5, #3
 800a692:	e7b7      	b.n	800a604 <_scanf_float+0x188>
 800a694:	2d06      	cmp	r5, #6
 800a696:	f47f af21 	bne.w	800a4dc <_scanf_float+0x60>
 800a69a:	2507      	movs	r5, #7
 800a69c:	e7b2      	b.n	800a604 <_scanf_float+0x188>
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	0591      	lsls	r1, r2, #22
 800a6a2:	f57f af1b 	bpl.w	800a4dc <_scanf_float+0x60>
 800a6a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6b0:	e7a8      	b.n	800a604 <_scanf_float+0x188>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a6b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6bc:	d006      	beq.n	800a6cc <_scanf_float+0x250>
 800a6be:	0550      	lsls	r0, r2, #21
 800a6c0:	f57f af0c 	bpl.w	800a4dc <_scanf_float+0x60>
 800a6c4:	f1b9 0f00 	cmp.w	r9, #0
 800a6c8:	f43f af0f 	beq.w	800a4ea <_scanf_float+0x6e>
 800a6cc:	0591      	lsls	r1, r2, #22
 800a6ce:	bf58      	it	pl
 800a6d0:	9901      	ldrpl	r1, [sp, #4]
 800a6d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6d6:	bf58      	it	pl
 800a6d8:	eba9 0101 	subpl.w	r1, r9, r1
 800a6dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6e0:	bf58      	it	pl
 800a6e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	f04f 0900 	mov.w	r9, #0
 800a6ec:	e78a      	b.n	800a604 <_scanf_float+0x188>
 800a6ee:	f04f 0a03 	mov.w	sl, #3
 800a6f2:	e787      	b.n	800a604 <_scanf_float+0x188>
 800a6f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4798      	blx	r3
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f43f aedf 	beq.w	800a4c2 <_scanf_float+0x46>
 800a704:	e6ea      	b.n	800a4dc <_scanf_float+0x60>
 800a706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a70a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a70e:	463a      	mov	r2, r7
 800a710:	4640      	mov	r0, r8
 800a712:	4798      	blx	r3
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	3b01      	subs	r3, #1
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	e6ec      	b.n	800a4f6 <_scanf_float+0x7a>
 800a71c:	1e6b      	subs	r3, r5, #1
 800a71e:	2b06      	cmp	r3, #6
 800a720:	d825      	bhi.n	800a76e <_scanf_float+0x2f2>
 800a722:	2d02      	cmp	r5, #2
 800a724:	d836      	bhi.n	800a794 <_scanf_float+0x318>
 800a726:	455e      	cmp	r6, fp
 800a728:	f67f aee8 	bls.w	800a4fc <_scanf_float+0x80>
 800a72c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a730:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a734:	463a      	mov	r2, r7
 800a736:	4640      	mov	r0, r8
 800a738:	4798      	blx	r3
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	6123      	str	r3, [r4, #16]
 800a740:	e7f1      	b.n	800a726 <_scanf_float+0x2aa>
 800a742:	9802      	ldr	r0, [sp, #8]
 800a744:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a748:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a74c:	9002      	str	r0, [sp, #8]
 800a74e:	463a      	mov	r2, r7
 800a750:	4640      	mov	r0, r8
 800a752:	4798      	blx	r3
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	3b01      	subs	r3, #1
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a75e:	fa5f fa8a 	uxtb.w	sl, sl
 800a762:	f1ba 0f02 	cmp.w	sl, #2
 800a766:	d1ec      	bne.n	800a742 <_scanf_float+0x2c6>
 800a768:	3d03      	subs	r5, #3
 800a76a:	b2ed      	uxtb	r5, r5
 800a76c:	1b76      	subs	r6, r6, r5
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	05da      	lsls	r2, r3, #23
 800a772:	d52f      	bpl.n	800a7d4 <_scanf_float+0x358>
 800a774:	055b      	lsls	r3, r3, #21
 800a776:	d510      	bpl.n	800a79a <_scanf_float+0x31e>
 800a778:	455e      	cmp	r6, fp
 800a77a:	f67f aebf 	bls.w	800a4fc <_scanf_float+0x80>
 800a77e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a786:	463a      	mov	r2, r7
 800a788:	4640      	mov	r0, r8
 800a78a:	4798      	blx	r3
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	3b01      	subs	r3, #1
 800a790:	6123      	str	r3, [r4, #16]
 800a792:	e7f1      	b.n	800a778 <_scanf_float+0x2fc>
 800a794:	46aa      	mov	sl, r5
 800a796:	9602      	str	r6, [sp, #8]
 800a798:	e7df      	b.n	800a75a <_scanf_float+0x2de>
 800a79a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	2965      	cmp	r1, #101	; 0x65
 800a7a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	d00c      	beq.n	800a7c8 <_scanf_float+0x34c>
 800a7ae:	2945      	cmp	r1, #69	; 0x45
 800a7b0:	d00a      	beq.n	800a7c8 <_scanf_float+0x34c>
 800a7b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7b6:	463a      	mov	r2, r7
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4798      	blx	r3
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	1eb5      	subs	r5, r6, #2
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7cc:	463a      	mov	r2, r7
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4798      	blx	r3
 800a7d2:	462e      	mov	r6, r5
 800a7d4:	6825      	ldr	r5, [r4, #0]
 800a7d6:	f015 0510 	ands.w	r5, r5, #16
 800a7da:	d14d      	bne.n	800a878 <_scanf_float+0x3fc>
 800a7dc:	7035      	strb	r5, [r6, #0]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e8:	d11a      	bne.n	800a820 <_scanf_float+0x3a4>
 800a7ea:	9b01      	ldr	r3, [sp, #4]
 800a7ec:	454b      	cmp	r3, r9
 800a7ee:	eba3 0209 	sub.w	r2, r3, r9
 800a7f2:	d122      	bne.n	800a83a <_scanf_float+0x3be>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4659      	mov	r1, fp
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	f002 fb67 	bl	800cecc <_strtod_r>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	6821      	ldr	r1, [r4, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f011 0f02 	tst.w	r1, #2
 800a808:	f103 0204 	add.w	r2, r3, #4
 800a80c:	d020      	beq.n	800a850 <_scanf_float+0x3d4>
 800a80e:	9903      	ldr	r1, [sp, #12]
 800a810:	600a      	str	r2, [r1, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	ed83 0b00 	vstr	d0, [r3]
 800a818:	68e3      	ldr	r3, [r4, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60e3      	str	r3, [r4, #12]
 800a81e:	e66e      	b.n	800a4fe <_scanf_float+0x82>
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0e6      	beq.n	800a7f4 <_scanf_float+0x378>
 800a826:	9905      	ldr	r1, [sp, #20]
 800a828:	230a      	movs	r3, #10
 800a82a:	462a      	mov	r2, r5
 800a82c:	3101      	adds	r1, #1
 800a82e:	4640      	mov	r0, r8
 800a830:	f002 fbd4 	bl	800cfdc <_strtol_r>
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	9e05      	ldr	r6, [sp, #20]
 800a838:	1ac2      	subs	r2, r0, r3
 800a83a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a83e:	429e      	cmp	r6, r3
 800a840:	bf28      	it	cs
 800a842:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a846:	490d      	ldr	r1, [pc, #52]	; (800a87c <_scanf_float+0x400>)
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 f8dd 	bl	800aa08 <siprintf>
 800a84e:	e7d1      	b.n	800a7f4 <_scanf_float+0x378>
 800a850:	f011 0f04 	tst.w	r1, #4
 800a854:	9903      	ldr	r1, [sp, #12]
 800a856:	600a      	str	r2, [r1, #0]
 800a858:	d1db      	bne.n	800a812 <_scanf_float+0x396>
 800a85a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a862:	681e      	ldr	r6, [r3, #0]
 800a864:	d705      	bvc.n	800a872 <_scanf_float+0x3f6>
 800a866:	4806      	ldr	r0, [pc, #24]	; (800a880 <_scanf_float+0x404>)
 800a868:	f000 f9c0 	bl	800abec <nanf>
 800a86c:	ed86 0a00 	vstr	s0, [r6]
 800a870:	e7d2      	b.n	800a818 <_scanf_float+0x39c>
 800a872:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a876:	e7f9      	b.n	800a86c <_scanf_float+0x3f0>
 800a878:	2500      	movs	r5, #0
 800a87a:	e640      	b.n	800a4fe <_scanf_float+0x82>
 800a87c:	08018f10 	.word	0x08018f10
 800a880:	080192a5 	.word	0x080192a5

0800a884 <std>:
 800a884:	2300      	movs	r3, #0
 800a886:	b510      	push	{r4, lr}
 800a888:	4604      	mov	r4, r0
 800a88a:	e9c0 3300 	strd	r3, r3, [r0]
 800a88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a892:	6083      	str	r3, [r0, #8]
 800a894:	8181      	strh	r1, [r0, #12]
 800a896:	6643      	str	r3, [r0, #100]	; 0x64
 800a898:	81c2      	strh	r2, [r0, #14]
 800a89a:	6183      	str	r3, [r0, #24]
 800a89c:	4619      	mov	r1, r3
 800a89e:	2208      	movs	r2, #8
 800a8a0:	305c      	adds	r0, #92	; 0x5c
 800a8a2:	f000 f914 	bl	800aace <memset>
 800a8a6:	4b0d      	ldr	r3, [pc, #52]	; (800a8dc <std+0x58>)
 800a8a8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <std+0x5c>)
 800a8ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ae:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <std+0x60>)
 800a8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <std+0x64>)
 800a8b4:	6323      	str	r3, [r4, #48]	; 0x30
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <std+0x68>)
 800a8b8:	6224      	str	r4, [r4, #32]
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	d006      	beq.n	800a8cc <std+0x48>
 800a8be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8c2:	4294      	cmp	r4, r2
 800a8c4:	d002      	beq.n	800a8cc <std+0x48>
 800a8c6:	33d0      	adds	r3, #208	; 0xd0
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d105      	bne.n	800a8d8 <std+0x54>
 800a8cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	f000 b978 	b.w	800abc8 <__retarget_lock_init_recursive>
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	bf00      	nop
 800a8dc:	0800aa49 	.word	0x0800aa49
 800a8e0:	0800aa6b 	.word	0x0800aa6b
 800a8e4:	0800aaa3 	.word	0x0800aaa3
 800a8e8:	0800aac7 	.word	0x0800aac7
 800a8ec:	20000498 	.word	0x20000498

0800a8f0 <stdio_exit_handler>:
 800a8f0:	4a02      	ldr	r2, [pc, #8]	; (800a8fc <stdio_exit_handler+0xc>)
 800a8f2:	4903      	ldr	r1, [pc, #12]	; (800a900 <stdio_exit_handler+0x10>)
 800a8f4:	4803      	ldr	r0, [pc, #12]	; (800a904 <stdio_exit_handler+0x14>)
 800a8f6:	f000 b869 	b.w	800a9cc <_fwalk_sglue>
 800a8fa:	bf00      	nop
 800a8fc:	20000018 	.word	0x20000018
 800a900:	0800d39d 	.word	0x0800d39d
 800a904:	20000024 	.word	0x20000024

0800a908 <cleanup_stdio>:
 800a908:	6841      	ldr	r1, [r0, #4]
 800a90a:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <cleanup_stdio+0x34>)
 800a90c:	4299      	cmp	r1, r3
 800a90e:	b510      	push	{r4, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	d001      	beq.n	800a918 <cleanup_stdio+0x10>
 800a914:	f002 fd42 	bl	800d39c <_fflush_r>
 800a918:	68a1      	ldr	r1, [r4, #8]
 800a91a:	4b09      	ldr	r3, [pc, #36]	; (800a940 <cleanup_stdio+0x38>)
 800a91c:	4299      	cmp	r1, r3
 800a91e:	d002      	beq.n	800a926 <cleanup_stdio+0x1e>
 800a920:	4620      	mov	r0, r4
 800a922:	f002 fd3b 	bl	800d39c <_fflush_r>
 800a926:	68e1      	ldr	r1, [r4, #12]
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <cleanup_stdio+0x3c>)
 800a92a:	4299      	cmp	r1, r3
 800a92c:	d004      	beq.n	800a938 <cleanup_stdio+0x30>
 800a92e:	4620      	mov	r0, r4
 800a930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a934:	f002 bd32 	b.w	800d39c <_fflush_r>
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	bf00      	nop
 800a93c:	20000498 	.word	0x20000498
 800a940:	20000500 	.word	0x20000500
 800a944:	20000568 	.word	0x20000568

0800a948 <global_stdio_init.part.0>:
 800a948:	b510      	push	{r4, lr}
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <global_stdio_init.part.0+0x30>)
 800a94c:	4c0b      	ldr	r4, [pc, #44]	; (800a97c <global_stdio_init.part.0+0x34>)
 800a94e:	4a0c      	ldr	r2, [pc, #48]	; (800a980 <global_stdio_init.part.0+0x38>)
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	4620      	mov	r0, r4
 800a954:	2200      	movs	r2, #0
 800a956:	2104      	movs	r1, #4
 800a958:	f7ff ff94 	bl	800a884 <std>
 800a95c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a960:	2201      	movs	r2, #1
 800a962:	2109      	movs	r1, #9
 800a964:	f7ff ff8e 	bl	800a884 <std>
 800a968:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a96c:	2202      	movs	r2, #2
 800a96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a972:	2112      	movs	r1, #18
 800a974:	f7ff bf86 	b.w	800a884 <std>
 800a978:	200005d0 	.word	0x200005d0
 800a97c:	20000498 	.word	0x20000498
 800a980:	0800a8f1 	.word	0x0800a8f1

0800a984 <__sfp_lock_acquire>:
 800a984:	4801      	ldr	r0, [pc, #4]	; (800a98c <__sfp_lock_acquire+0x8>)
 800a986:	f000 b920 	b.w	800abca <__retarget_lock_acquire_recursive>
 800a98a:	bf00      	nop
 800a98c:	200005d9 	.word	0x200005d9

0800a990 <__sfp_lock_release>:
 800a990:	4801      	ldr	r0, [pc, #4]	; (800a998 <__sfp_lock_release+0x8>)
 800a992:	f000 b91b 	b.w	800abcc <__retarget_lock_release_recursive>
 800a996:	bf00      	nop
 800a998:	200005d9 	.word	0x200005d9

0800a99c <__sinit>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	4604      	mov	r4, r0
 800a9a0:	f7ff fff0 	bl	800a984 <__sfp_lock_acquire>
 800a9a4:	6a23      	ldr	r3, [r4, #32]
 800a9a6:	b11b      	cbz	r3, 800a9b0 <__sinit+0x14>
 800a9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ac:	f7ff bff0 	b.w	800a990 <__sfp_lock_release>
 800a9b0:	4b04      	ldr	r3, [pc, #16]	; (800a9c4 <__sinit+0x28>)
 800a9b2:	6223      	str	r3, [r4, #32]
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <__sinit+0x2c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1f5      	bne.n	800a9a8 <__sinit+0xc>
 800a9bc:	f7ff ffc4 	bl	800a948 <global_stdio_init.part.0>
 800a9c0:	e7f2      	b.n	800a9a8 <__sinit+0xc>
 800a9c2:	bf00      	nop
 800a9c4:	0800a909 	.word	0x0800a909
 800a9c8:	200005d0 	.word	0x200005d0

0800a9cc <_fwalk_sglue>:
 800a9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	4688      	mov	r8, r1
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	2600      	movs	r6, #0
 800a9d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a9e0:	d505      	bpl.n	800a9ee <_fwalk_sglue+0x22>
 800a9e2:	6824      	ldr	r4, [r4, #0]
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	d1f7      	bne.n	800a9d8 <_fwalk_sglue+0xc>
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d907      	bls.n	800aa04 <_fwalk_sglue+0x38>
 800a9f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	d003      	beq.n	800aa04 <_fwalk_sglue+0x38>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4638      	mov	r0, r7
 800aa00:	47c0      	blx	r8
 800aa02:	4306      	orrs	r6, r0
 800aa04:	3568      	adds	r5, #104	; 0x68
 800aa06:	e7e9      	b.n	800a9dc <_fwalk_sglue+0x10>

0800aa08 <siprintf>:
 800aa08:	b40e      	push	{r1, r2, r3}
 800aa0a:	b500      	push	{lr}
 800aa0c:	b09c      	sub	sp, #112	; 0x70
 800aa0e:	ab1d      	add	r3, sp, #116	; 0x74
 800aa10:	9002      	str	r0, [sp, #8]
 800aa12:	9006      	str	r0, [sp, #24]
 800aa14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa18:	4809      	ldr	r0, [pc, #36]	; (800aa40 <siprintf+0x38>)
 800aa1a:	9107      	str	r1, [sp, #28]
 800aa1c:	9104      	str	r1, [sp, #16]
 800aa1e:	4909      	ldr	r1, [pc, #36]	; (800aa44 <siprintf+0x3c>)
 800aa20:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa24:	9105      	str	r1, [sp, #20]
 800aa26:	6800      	ldr	r0, [r0, #0]
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	a902      	add	r1, sp, #8
 800aa2c:	f002 fb32 	bl	800d094 <_svfiprintf_r>
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	2200      	movs	r2, #0
 800aa34:	701a      	strb	r2, [r3, #0]
 800aa36:	b01c      	add	sp, #112	; 0x70
 800aa38:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa3c:	b003      	add	sp, #12
 800aa3e:	4770      	bx	lr
 800aa40:	20000070 	.word	0x20000070
 800aa44:	ffff0208 	.word	0xffff0208

0800aa48 <__sread>:
 800aa48:	b510      	push	{r4, lr}
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa50:	f000 f86c 	bl	800ab2c <_read_r>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	bfab      	itete	ge
 800aa58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa5a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa5c:	181b      	addge	r3, r3, r0
 800aa5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa62:	bfac      	ite	ge
 800aa64:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa66:	81a3      	strhlt	r3, [r4, #12]
 800aa68:	bd10      	pop	{r4, pc}

0800aa6a <__swrite>:
 800aa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6e:	461f      	mov	r7, r3
 800aa70:	898b      	ldrh	r3, [r1, #12]
 800aa72:	05db      	lsls	r3, r3, #23
 800aa74:	4605      	mov	r5, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	4616      	mov	r6, r2
 800aa7a:	d505      	bpl.n	800aa88 <__swrite+0x1e>
 800aa7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa80:	2302      	movs	r3, #2
 800aa82:	2200      	movs	r2, #0
 800aa84:	f000 f840 	bl	800ab08 <_lseek_r>
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa92:	81a3      	strh	r3, [r4, #12]
 800aa94:	4632      	mov	r2, r6
 800aa96:	463b      	mov	r3, r7
 800aa98:	4628      	mov	r0, r5
 800aa9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9e:	f000 b857 	b.w	800ab50 <_write_r>

0800aaa2 <__sseek>:
 800aaa2:	b510      	push	{r4, lr}
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaaa:	f000 f82d 	bl	800ab08 <_lseek_r>
 800aaae:	1c43      	adds	r3, r0, #1
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	bf15      	itete	ne
 800aab4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aaba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aabe:	81a3      	strheq	r3, [r4, #12]
 800aac0:	bf18      	it	ne
 800aac2:	81a3      	strhne	r3, [r4, #12]
 800aac4:	bd10      	pop	{r4, pc}

0800aac6 <__sclose>:
 800aac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaca:	f000 b80d 	b.w	800aae8 <_close_r>

0800aace <memset>:
 800aace:	4402      	add	r2, r0
 800aad0:	4603      	mov	r3, r0
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d100      	bne.n	800aad8 <memset+0xa>
 800aad6:	4770      	bx	lr
 800aad8:	f803 1b01 	strb.w	r1, [r3], #1
 800aadc:	e7f9      	b.n	800aad2 <memset+0x4>
	...

0800aae0 <_localeconv_r>:
 800aae0:	4800      	ldr	r0, [pc, #0]	; (800aae4 <_localeconv_r+0x4>)
 800aae2:	4770      	bx	lr
 800aae4:	20000164 	.word	0x20000164

0800aae8 <_close_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d06      	ldr	r5, [pc, #24]	; (800ab04 <_close_r+0x1c>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f7f7 fdef 	bl	80026d6 <_close>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_close_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_close_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	200005d4 	.word	0x200005d4

0800ab08 <_lseek_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	; (800ab28 <_lseek_r+0x20>)
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f7 fe04 	bl	8002724 <_lseek>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_lseek_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_lseek_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	200005d4 	.word	0x200005d4

0800ab2c <_read_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	; (800ab4c <_read_r+0x20>)
 800ab30:	4604      	mov	r4, r0
 800ab32:	4608      	mov	r0, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	2200      	movs	r2, #0
 800ab38:	602a      	str	r2, [r5, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f7f7 fd92 	bl	8002664 <_read>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_read_r+0x1e>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_read_r+0x1e>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	200005d4 	.word	0x200005d4

0800ab50 <_write_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d07      	ldr	r5, [pc, #28]	; (800ab70 <_write_r+0x20>)
 800ab54:	4604      	mov	r4, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f7 fd9d 	bl	800269e <_write>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_write_r+0x1e>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_write_r+0x1e>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	200005d4 	.word	0x200005d4

0800ab74 <__errno>:
 800ab74:	4b01      	ldr	r3, [pc, #4]	; (800ab7c <__errno+0x8>)
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20000070 	.word	0x20000070

0800ab80 <__libc_init_array>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	4d0d      	ldr	r5, [pc, #52]	; (800abb8 <__libc_init_array+0x38>)
 800ab84:	4c0d      	ldr	r4, [pc, #52]	; (800abbc <__libc_init_array+0x3c>)
 800ab86:	1b64      	subs	r4, r4, r5
 800ab88:	10a4      	asrs	r4, r4, #2
 800ab8a:	2600      	movs	r6, #0
 800ab8c:	42a6      	cmp	r6, r4
 800ab8e:	d109      	bne.n	800aba4 <__libc_init_array+0x24>
 800ab90:	4d0b      	ldr	r5, [pc, #44]	; (800abc0 <__libc_init_array+0x40>)
 800ab92:	4c0c      	ldr	r4, [pc, #48]	; (800abc4 <__libc_init_array+0x44>)
 800ab94:	f003 fb0c 	bl	800e1b0 <_init>
 800ab98:	1b64      	subs	r4, r4, r5
 800ab9a:	10a4      	asrs	r4, r4, #2
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	42a6      	cmp	r6, r4
 800aba0:	d105      	bne.n	800abae <__libc_init_array+0x2e>
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba8:	4798      	blx	r3
 800abaa:	3601      	adds	r6, #1
 800abac:	e7ee      	b.n	800ab8c <__libc_init_array+0xc>
 800abae:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb2:	4798      	blx	r3
 800abb4:	3601      	adds	r6, #1
 800abb6:	e7f2      	b.n	800ab9e <__libc_init_array+0x1e>
 800abb8:	08019310 	.word	0x08019310
 800abbc:	08019310 	.word	0x08019310
 800abc0:	08019310 	.word	0x08019310
 800abc4:	08019314 	.word	0x08019314

0800abc8 <__retarget_lock_init_recursive>:
 800abc8:	4770      	bx	lr

0800abca <__retarget_lock_acquire_recursive>:
 800abca:	4770      	bx	lr

0800abcc <__retarget_lock_release_recursive>:
 800abcc:	4770      	bx	lr

0800abce <memcpy>:
 800abce:	440a      	add	r2, r1
 800abd0:	4291      	cmp	r1, r2
 800abd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800abd6:	d100      	bne.n	800abda <memcpy+0xc>
 800abd8:	4770      	bx	lr
 800abda:	b510      	push	{r4, lr}
 800abdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abe4:	4291      	cmp	r1, r2
 800abe6:	d1f9      	bne.n	800abdc <memcpy+0xe>
 800abe8:	bd10      	pop	{r4, pc}
	...

0800abec <nanf>:
 800abec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800abf4 <nanf+0x8>
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	7fc00000 	.word	0x7fc00000

0800abf8 <quorem>:
 800abf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	6903      	ldr	r3, [r0, #16]
 800abfe:	690c      	ldr	r4, [r1, #16]
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	4607      	mov	r7, r0
 800ac04:	db7e      	blt.n	800ad04 <quorem+0x10c>
 800ac06:	3c01      	subs	r4, #1
 800ac08:	f101 0814 	add.w	r8, r1, #20
 800ac0c:	f100 0514 	add.w	r5, r0, #20
 800ac10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	429a      	cmp	r2, r3
 800ac22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac2a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac2e:	d331      	bcc.n	800ac94 <quorem+0x9c>
 800ac30:	f04f 0e00 	mov.w	lr, #0
 800ac34:	4640      	mov	r0, r8
 800ac36:	46ac      	mov	ip, r5
 800ac38:	46f2      	mov	sl, lr
 800ac3a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac3e:	b293      	uxth	r3, r2
 800ac40:	fb06 e303 	mla	r3, r6, r3, lr
 800ac44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac48:	0c1a      	lsrs	r2, r3, #16
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	ebaa 0303 	sub.w	r3, sl, r3
 800ac50:	f8dc a000 	ldr.w	sl, [ip]
 800ac54:	fa13 f38a 	uxtah	r3, r3, sl
 800ac58:	fb06 220e 	mla	r2, r6, lr, r2
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac64:	b292      	uxth	r2, r2
 800ac66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac6e:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac72:	4581      	cmp	r9, r0
 800ac74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac78:	f84c 3b04 	str.w	r3, [ip], #4
 800ac7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac80:	d2db      	bcs.n	800ac3a <quorem+0x42>
 800ac82:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac86:	b92b      	cbnz	r3, 800ac94 <quorem+0x9c>
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	3b04      	subs	r3, #4
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	d32c      	bcc.n	800acec <quorem+0xf4>
 800ac92:	613c      	str	r4, [r7, #16]
 800ac94:	4638      	mov	r0, r7
 800ac96:	f001 f969 	bl	800bf6c <__mcmp>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	db22      	blt.n	800ace4 <quorem+0xec>
 800ac9e:	3601      	adds	r6, #1
 800aca0:	4629      	mov	r1, r5
 800aca2:	2000      	movs	r0, #0
 800aca4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aca8:	f8d1 c000 	ldr.w	ip, [r1]
 800acac:	b293      	uxth	r3, r2
 800acae:	1ac3      	subs	r3, r0, r3
 800acb0:	0c12      	lsrs	r2, r2, #16
 800acb2:	fa13 f38c 	uxtah	r3, r3, ip
 800acb6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800acba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc4:	45c1      	cmp	r9, r8
 800acc6:	f841 3b04 	str.w	r3, [r1], #4
 800acca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acce:	d2e9      	bcs.n	800aca4 <quorem+0xac>
 800acd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd8:	b922      	cbnz	r2, 800ace4 <quorem+0xec>
 800acda:	3b04      	subs	r3, #4
 800acdc:	429d      	cmp	r5, r3
 800acde:	461a      	mov	r2, r3
 800ace0:	d30a      	bcc.n	800acf8 <quorem+0x100>
 800ace2:	613c      	str	r4, [r7, #16]
 800ace4:	4630      	mov	r0, r6
 800ace6:	b003      	add	sp, #12
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	6812      	ldr	r2, [r2, #0]
 800acee:	3b04      	subs	r3, #4
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	d1ce      	bne.n	800ac92 <quorem+0x9a>
 800acf4:	3c01      	subs	r4, #1
 800acf6:	e7c9      	b.n	800ac8c <quorem+0x94>
 800acf8:	6812      	ldr	r2, [r2, #0]
 800acfa:	3b04      	subs	r3, #4
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	d1f0      	bne.n	800ace2 <quorem+0xea>
 800ad00:	3c01      	subs	r4, #1
 800ad02:	e7eb      	b.n	800acdc <quorem+0xe4>
 800ad04:	2000      	movs	r0, #0
 800ad06:	e7ee      	b.n	800ace6 <quorem+0xee>

0800ad08 <_dtoa_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	ed2d 8b02 	vpush	{d8}
 800ad10:	69c5      	ldr	r5, [r0, #28]
 800ad12:	b091      	sub	sp, #68	; 0x44
 800ad14:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad18:	ec59 8b10 	vmov	r8, r9, d0
 800ad1c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ad1e:	9106      	str	r1, [sp, #24]
 800ad20:	4606      	mov	r6, r0
 800ad22:	9208      	str	r2, [sp, #32]
 800ad24:	930c      	str	r3, [sp, #48]	; 0x30
 800ad26:	b975      	cbnz	r5, 800ad46 <_dtoa_r+0x3e>
 800ad28:	2010      	movs	r0, #16
 800ad2a:	f000 fda5 	bl	800b878 <malloc>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	61f0      	str	r0, [r6, #28]
 800ad32:	b920      	cbnz	r0, 800ad3e <_dtoa_r+0x36>
 800ad34:	4ba6      	ldr	r3, [pc, #664]	; (800afd0 <_dtoa_r+0x2c8>)
 800ad36:	21ef      	movs	r1, #239	; 0xef
 800ad38:	48a6      	ldr	r0, [pc, #664]	; (800afd4 <_dtoa_r+0x2cc>)
 800ad3a:	f002 fb9d 	bl	800d478 <__assert_func>
 800ad3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad42:	6005      	str	r5, [r0, #0]
 800ad44:	60c5      	str	r5, [r0, #12]
 800ad46:	69f3      	ldr	r3, [r6, #28]
 800ad48:	6819      	ldr	r1, [r3, #0]
 800ad4a:	b151      	cbz	r1, 800ad62 <_dtoa_r+0x5a>
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	604a      	str	r2, [r1, #4]
 800ad50:	2301      	movs	r3, #1
 800ad52:	4093      	lsls	r3, r2
 800ad54:	608b      	str	r3, [r1, #8]
 800ad56:	4630      	mov	r0, r6
 800ad58:	f000 fe82 	bl	800ba60 <_Bfree>
 800ad5c:	69f3      	ldr	r3, [r6, #28]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	f1b9 0300 	subs.w	r3, r9, #0
 800ad66:	bfbb      	ittet	lt
 800ad68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad6c:	9303      	strlt	r3, [sp, #12]
 800ad6e:	2300      	movge	r3, #0
 800ad70:	2201      	movlt	r2, #1
 800ad72:	bfac      	ite	ge
 800ad74:	6023      	strge	r3, [r4, #0]
 800ad76:	6022      	strlt	r2, [r4, #0]
 800ad78:	4b97      	ldr	r3, [pc, #604]	; (800afd8 <_dtoa_r+0x2d0>)
 800ad7a:	9c03      	ldr	r4, [sp, #12]
 800ad7c:	43a3      	bics	r3, r4
 800ad7e:	d11c      	bne.n	800adba <_dtoa_r+0xb2>
 800ad80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad82:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ad8c:	ea53 0308 	orrs.w	r3, r3, r8
 800ad90:	f000 84fb 	beq.w	800b78a <_dtoa_r+0xa82>
 800ad94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad96:	b963      	cbnz	r3, 800adb2 <_dtoa_r+0xaa>
 800ad98:	4b90      	ldr	r3, [pc, #576]	; (800afdc <_dtoa_r+0x2d4>)
 800ad9a:	e020      	b.n	800adde <_dtoa_r+0xd6>
 800ad9c:	4b90      	ldr	r3, [pc, #576]	; (800afe0 <_dtoa_r+0x2d8>)
 800ad9e:	9301      	str	r3, [sp, #4]
 800ada0:	3308      	adds	r3, #8
 800ada2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	9801      	ldr	r0, [sp, #4]
 800ada8:	b011      	add	sp, #68	; 0x44
 800adaa:	ecbd 8b02 	vpop	{d8}
 800adae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb2:	4b8a      	ldr	r3, [pc, #552]	; (800afdc <_dtoa_r+0x2d4>)
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	3303      	adds	r3, #3
 800adb8:	e7f3      	b.n	800ada2 <_dtoa_r+0x9a>
 800adba:	ed9d 8b02 	vldr	d8, [sp, #8]
 800adbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800adc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc6:	d10c      	bne.n	800ade2 <_dtoa_r+0xda>
 800adc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adca:	2301      	movs	r3, #1
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 84d7 	beq.w	800b784 <_dtoa_r+0xa7c>
 800add6:	4b83      	ldr	r3, [pc, #524]	; (800afe4 <_dtoa_r+0x2dc>)
 800add8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	3b01      	subs	r3, #1
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	e7e1      	b.n	800ada6 <_dtoa_r+0x9e>
 800ade2:	aa0e      	add	r2, sp, #56	; 0x38
 800ade4:	a90f      	add	r1, sp, #60	; 0x3c
 800ade6:	4630      	mov	r0, r6
 800ade8:	eeb0 0b48 	vmov.f64	d0, d8
 800adec:	f001 f9d4 	bl	800c198 <__d2b>
 800adf0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800adf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adf6:	4605      	mov	r5, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d046      	beq.n	800ae8a <_dtoa_r+0x182>
 800adfc:	eeb0 7b48 	vmov.f64	d7, d8
 800ae00:	ee18 1a90 	vmov	r1, s17
 800ae04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ae08:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ae0c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ae10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ae14:	2000      	movs	r0, #0
 800ae16:	ee07 1a90 	vmov	s15, r1
 800ae1a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800ae1e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800afb8 <_dtoa_r+0x2b0>
 800ae22:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae26:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800afc0 <_dtoa_r+0x2b8>
 800ae2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ae2e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800afc8 <_dtoa_r+0x2c0>
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ae3a:	eeb0 7b46 	vmov.f64	d7, d6
 800ae3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ae42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ae46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ae4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4e:	ee16 ba90 	vmov	fp, s13
 800ae52:	9009      	str	r0, [sp, #36]	; 0x24
 800ae54:	d508      	bpl.n	800ae68 <_dtoa_r+0x160>
 800ae56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ae5a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ae5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae62:	bf18      	it	ne
 800ae64:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ae68:	f1bb 0f16 	cmp.w	fp, #22
 800ae6c:	d82b      	bhi.n	800aec6 <_dtoa_r+0x1be>
 800ae6e:	495e      	ldr	r1, [pc, #376]	; (800afe8 <_dtoa_r+0x2e0>)
 800ae70:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ae74:	ed91 7b00 	vldr	d7, [r1]
 800ae78:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae80:	d501      	bpl.n	800ae86 <_dtoa_r+0x17e>
 800ae82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae86:	2100      	movs	r1, #0
 800ae88:	e01e      	b.n	800aec8 <_dtoa_r+0x1c0>
 800ae8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ae92:	2920      	cmp	r1, #32
 800ae94:	bfc1      	itttt	gt
 800ae96:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800ae9a:	408c      	lslgt	r4, r1
 800ae9c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800aea0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800aea4:	bfd6      	itet	le
 800aea6:	f1c1 0120 	rsble	r1, r1, #32
 800aeaa:	4321      	orrgt	r1, r4
 800aeac:	fa08 f101 	lslle.w	r1, r8, r1
 800aeb0:	ee07 1a90 	vmov	s15, r1
 800aeb4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	ee17 1a90 	vmov	r1, s15
 800aebe:	2001      	movs	r0, #1
 800aec0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aec4:	e7a7      	b.n	800ae16 <_dtoa_r+0x10e>
 800aec6:	2101      	movs	r1, #1
 800aec8:	1ad2      	subs	r2, r2, r3
 800aeca:	1e53      	subs	r3, r2, #1
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	bf45      	ittet	mi
 800aed0:	f1c2 0301 	rsbmi	r3, r2, #1
 800aed4:	9304      	strmi	r3, [sp, #16]
 800aed6:	2300      	movpl	r3, #0
 800aed8:	2300      	movmi	r3, #0
 800aeda:	bf4c      	ite	mi
 800aedc:	9305      	strmi	r3, [sp, #20]
 800aede:	9304      	strpl	r3, [sp, #16]
 800aee0:	f1bb 0f00 	cmp.w	fp, #0
 800aee4:	910b      	str	r1, [sp, #44]	; 0x2c
 800aee6:	db18      	blt.n	800af1a <_dtoa_r+0x212>
 800aee8:	9b05      	ldr	r3, [sp, #20]
 800aeea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800aeee:	445b      	add	r3, fp
 800aef0:	9305      	str	r3, [sp, #20]
 800aef2:	2300      	movs	r3, #0
 800aef4:	9a06      	ldr	r2, [sp, #24]
 800aef6:	2a09      	cmp	r2, #9
 800aef8:	d848      	bhi.n	800af8c <_dtoa_r+0x284>
 800aefa:	2a05      	cmp	r2, #5
 800aefc:	bfc4      	itt	gt
 800aefe:	3a04      	subgt	r2, #4
 800af00:	9206      	strgt	r2, [sp, #24]
 800af02:	9a06      	ldr	r2, [sp, #24]
 800af04:	f1a2 0202 	sub.w	r2, r2, #2
 800af08:	bfcc      	ite	gt
 800af0a:	2400      	movgt	r4, #0
 800af0c:	2401      	movle	r4, #1
 800af0e:	2a03      	cmp	r2, #3
 800af10:	d847      	bhi.n	800afa2 <_dtoa_r+0x29a>
 800af12:	e8df f002 	tbb	[pc, r2]
 800af16:	2d0b      	.short	0x2d0b
 800af18:	392b      	.short	0x392b
 800af1a:	9b04      	ldr	r3, [sp, #16]
 800af1c:	2200      	movs	r2, #0
 800af1e:	eba3 030b 	sub.w	r3, r3, fp
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	920a      	str	r2, [sp, #40]	; 0x28
 800af26:	f1cb 0300 	rsb	r3, fp, #0
 800af2a:	e7e3      	b.n	800aef4 <_dtoa_r+0x1ec>
 800af2c:	2200      	movs	r2, #0
 800af2e:	9207      	str	r2, [sp, #28]
 800af30:	9a08      	ldr	r2, [sp, #32]
 800af32:	2a00      	cmp	r2, #0
 800af34:	dc38      	bgt.n	800afa8 <_dtoa_r+0x2a0>
 800af36:	f04f 0a01 	mov.w	sl, #1
 800af3a:	46d1      	mov	r9, sl
 800af3c:	4652      	mov	r2, sl
 800af3e:	f8cd a020 	str.w	sl, [sp, #32]
 800af42:	69f7      	ldr	r7, [r6, #28]
 800af44:	2100      	movs	r1, #0
 800af46:	2004      	movs	r0, #4
 800af48:	f100 0c14 	add.w	ip, r0, #20
 800af4c:	4594      	cmp	ip, r2
 800af4e:	d930      	bls.n	800afb2 <_dtoa_r+0x2aa>
 800af50:	6079      	str	r1, [r7, #4]
 800af52:	4630      	mov	r0, r6
 800af54:	930d      	str	r3, [sp, #52]	; 0x34
 800af56:	f000 fd43 	bl	800b9e0 <_Balloc>
 800af5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5c:	9001      	str	r0, [sp, #4]
 800af5e:	4602      	mov	r2, r0
 800af60:	2800      	cmp	r0, #0
 800af62:	d145      	bne.n	800aff0 <_dtoa_r+0x2e8>
 800af64:	4b21      	ldr	r3, [pc, #132]	; (800afec <_dtoa_r+0x2e4>)
 800af66:	f240 11af 	movw	r1, #431	; 0x1af
 800af6a:	e6e5      	b.n	800ad38 <_dtoa_r+0x30>
 800af6c:	2201      	movs	r2, #1
 800af6e:	e7de      	b.n	800af2e <_dtoa_r+0x226>
 800af70:	2200      	movs	r2, #0
 800af72:	9207      	str	r2, [sp, #28]
 800af74:	9a08      	ldr	r2, [sp, #32]
 800af76:	eb0b 0a02 	add.w	sl, fp, r2
 800af7a:	f10a 0901 	add.w	r9, sl, #1
 800af7e:	464a      	mov	r2, r9
 800af80:	2a01      	cmp	r2, #1
 800af82:	bfb8      	it	lt
 800af84:	2201      	movlt	r2, #1
 800af86:	e7dc      	b.n	800af42 <_dtoa_r+0x23a>
 800af88:	2201      	movs	r2, #1
 800af8a:	e7f2      	b.n	800af72 <_dtoa_r+0x26a>
 800af8c:	2401      	movs	r4, #1
 800af8e:	2200      	movs	r2, #0
 800af90:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800af94:	f04f 3aff 	mov.w	sl, #4294967295
 800af98:	2100      	movs	r1, #0
 800af9a:	46d1      	mov	r9, sl
 800af9c:	2212      	movs	r2, #18
 800af9e:	9108      	str	r1, [sp, #32]
 800afa0:	e7cf      	b.n	800af42 <_dtoa_r+0x23a>
 800afa2:	2201      	movs	r2, #1
 800afa4:	9207      	str	r2, [sp, #28]
 800afa6:	e7f5      	b.n	800af94 <_dtoa_r+0x28c>
 800afa8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800afac:	46d1      	mov	r9, sl
 800afae:	4652      	mov	r2, sl
 800afb0:	e7c7      	b.n	800af42 <_dtoa_r+0x23a>
 800afb2:	3101      	adds	r1, #1
 800afb4:	0040      	lsls	r0, r0, #1
 800afb6:	e7c7      	b.n	800af48 <_dtoa_r+0x240>
 800afb8:	636f4361 	.word	0x636f4361
 800afbc:	3fd287a7 	.word	0x3fd287a7
 800afc0:	8b60c8b3 	.word	0x8b60c8b3
 800afc4:	3fc68a28 	.word	0x3fc68a28
 800afc8:	509f79fb 	.word	0x509f79fb
 800afcc:	3fd34413 	.word	0x3fd34413
 800afd0:	08018f22 	.word	0x08018f22
 800afd4:	08018f39 	.word	0x08018f39
 800afd8:	7ff00000 	.word	0x7ff00000
 800afdc:	08018f1e 	.word	0x08018f1e
 800afe0:	08018f15 	.word	0x08018f15
 800afe4:	08018eed 	.word	0x08018eed
 800afe8:	08019028 	.word	0x08019028
 800afec:	08018f91 	.word	0x08018f91
 800aff0:	69f2      	ldr	r2, [r6, #28]
 800aff2:	9901      	ldr	r1, [sp, #4]
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	f1b9 0f0e 	cmp.w	r9, #14
 800affa:	d86c      	bhi.n	800b0d6 <_dtoa_r+0x3ce>
 800affc:	2c00      	cmp	r4, #0
 800affe:	d06a      	beq.n	800b0d6 <_dtoa_r+0x3ce>
 800b000:	f1bb 0f00 	cmp.w	fp, #0
 800b004:	f340 80a0 	ble.w	800b148 <_dtoa_r+0x440>
 800b008:	4ac1      	ldr	r2, [pc, #772]	; (800b310 <_dtoa_r+0x608>)
 800b00a:	f00b 010f 	and.w	r1, fp, #15
 800b00e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b012:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b016:	ed92 7b00 	vldr	d7, [r2]
 800b01a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b01e:	f000 8087 	beq.w	800b130 <_dtoa_r+0x428>
 800b022:	49bc      	ldr	r1, [pc, #752]	; (800b314 <_dtoa_r+0x60c>)
 800b024:	ed91 6b08 	vldr	d6, [r1, #32]
 800b028:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b02c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b030:	f002 020f 	and.w	r2, r2, #15
 800b034:	2103      	movs	r1, #3
 800b036:	48b7      	ldr	r0, [pc, #732]	; (800b314 <_dtoa_r+0x60c>)
 800b038:	2a00      	cmp	r2, #0
 800b03a:	d17b      	bne.n	800b134 <_dtoa_r+0x42c>
 800b03c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b040:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b044:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b04a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b04e:	2a00      	cmp	r2, #0
 800b050:	f000 80a0 	beq.w	800b194 <_dtoa_r+0x48c>
 800b054:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b058:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b060:	f140 8098 	bpl.w	800b194 <_dtoa_r+0x48c>
 800b064:	f1b9 0f00 	cmp.w	r9, #0
 800b068:	f000 8094 	beq.w	800b194 <_dtoa_r+0x48c>
 800b06c:	f1ba 0f00 	cmp.w	sl, #0
 800b070:	dd2f      	ble.n	800b0d2 <_dtoa_r+0x3ca>
 800b072:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b076:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b07a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b07e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b082:	3101      	adds	r1, #1
 800b084:	4654      	mov	r4, sl
 800b086:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b08a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b08e:	ee07 1a90 	vmov	s15, r1
 800b092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b096:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b09a:	ee15 7a90 	vmov	r7, s11
 800b09e:	ec51 0b15 	vmov	r0, r1, d5
 800b0a2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b0a6:	2c00      	cmp	r4, #0
 800b0a8:	d177      	bne.n	800b19a <_dtoa_r+0x492>
 800b0aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b0ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b0b2:	ec41 0b17 	vmov	d7, r0, r1
 800b0b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	f300 826a 	bgt.w	800b596 <_dtoa_r+0x88e>
 800b0c2:	eeb1 7b47 	vneg.f64	d7, d7
 800b0c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ce:	f100 8260 	bmi.w	800b592 <_dtoa_r+0x88a>
 800b0d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0d8:	2a00      	cmp	r2, #0
 800b0da:	f2c0 811d 	blt.w	800b318 <_dtoa_r+0x610>
 800b0de:	f1bb 0f0e 	cmp.w	fp, #14
 800b0e2:	f300 8119 	bgt.w	800b318 <_dtoa_r+0x610>
 800b0e6:	4b8a      	ldr	r3, [pc, #552]	; (800b310 <_dtoa_r+0x608>)
 800b0e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0ec:	ed93 6b00 	vldr	d6, [r3]
 800b0f0:	9b08      	ldr	r3, [sp, #32]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f280 80b7 	bge.w	800b266 <_dtoa_r+0x55e>
 800b0f8:	f1b9 0f00 	cmp.w	r9, #0
 800b0fc:	f300 80b3 	bgt.w	800b266 <_dtoa_r+0x55e>
 800b100:	f040 8246 	bne.w	800b590 <_dtoa_r+0x888>
 800b104:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b108:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b10c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b110:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b118:	464c      	mov	r4, r9
 800b11a:	464f      	mov	r7, r9
 800b11c:	f280 821c 	bge.w	800b558 <_dtoa_r+0x850>
 800b120:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b124:	2331      	movs	r3, #49	; 0x31
 800b126:	f808 3b01 	strb.w	r3, [r8], #1
 800b12a:	f10b 0b01 	add.w	fp, fp, #1
 800b12e:	e218      	b.n	800b562 <_dtoa_r+0x85a>
 800b130:	2102      	movs	r1, #2
 800b132:	e780      	b.n	800b036 <_dtoa_r+0x32e>
 800b134:	07d4      	lsls	r4, r2, #31
 800b136:	d504      	bpl.n	800b142 <_dtoa_r+0x43a>
 800b138:	ed90 6b00 	vldr	d6, [r0]
 800b13c:	3101      	adds	r1, #1
 800b13e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b142:	1052      	asrs	r2, r2, #1
 800b144:	3008      	adds	r0, #8
 800b146:	e777      	b.n	800b038 <_dtoa_r+0x330>
 800b148:	d022      	beq.n	800b190 <_dtoa_r+0x488>
 800b14a:	f1cb 0200 	rsb	r2, fp, #0
 800b14e:	4970      	ldr	r1, [pc, #448]	; (800b310 <_dtoa_r+0x608>)
 800b150:	f002 000f 	and.w	r0, r2, #15
 800b154:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b158:	ed91 7b00 	vldr	d7, [r1]
 800b15c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b160:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b164:	486b      	ldr	r0, [pc, #428]	; (800b314 <_dtoa_r+0x60c>)
 800b166:	1112      	asrs	r2, r2, #4
 800b168:	2400      	movs	r4, #0
 800b16a:	2102      	movs	r1, #2
 800b16c:	b92a      	cbnz	r2, 800b17a <_dtoa_r+0x472>
 800b16e:	2c00      	cmp	r4, #0
 800b170:	f43f af6a 	beq.w	800b048 <_dtoa_r+0x340>
 800b174:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b178:	e766      	b.n	800b048 <_dtoa_r+0x340>
 800b17a:	07d7      	lsls	r7, r2, #31
 800b17c:	d505      	bpl.n	800b18a <_dtoa_r+0x482>
 800b17e:	ed90 6b00 	vldr	d6, [r0]
 800b182:	3101      	adds	r1, #1
 800b184:	2401      	movs	r4, #1
 800b186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b18a:	1052      	asrs	r2, r2, #1
 800b18c:	3008      	adds	r0, #8
 800b18e:	e7ed      	b.n	800b16c <_dtoa_r+0x464>
 800b190:	2102      	movs	r1, #2
 800b192:	e759      	b.n	800b048 <_dtoa_r+0x340>
 800b194:	465a      	mov	r2, fp
 800b196:	464c      	mov	r4, r9
 800b198:	e775      	b.n	800b086 <_dtoa_r+0x37e>
 800b19a:	ec41 0b17 	vmov	d7, r0, r1
 800b19e:	495c      	ldr	r1, [pc, #368]	; (800b310 <_dtoa_r+0x608>)
 800b1a0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b1a4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b1a8:	9901      	ldr	r1, [sp, #4]
 800b1aa:	440c      	add	r4, r1
 800b1ac:	9907      	ldr	r1, [sp, #28]
 800b1ae:	b351      	cbz	r1, 800b206 <_dtoa_r+0x4fe>
 800b1b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b1b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b1b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1bc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b1c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b1c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b1c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b1cc:	ee14 1a90 	vmov	r1, s9
 800b1d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b1d4:	3130      	adds	r1, #48	; 0x30
 800b1d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b1da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e2:	f808 1b01 	strb.w	r1, [r8], #1
 800b1e6:	d439      	bmi.n	800b25c <_dtoa_r+0x554>
 800b1e8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b1ec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f4:	d472      	bmi.n	800b2dc <_dtoa_r+0x5d4>
 800b1f6:	45a0      	cmp	r8, r4
 800b1f8:	f43f af6b 	beq.w	800b0d2 <_dtoa_r+0x3ca>
 800b1fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b200:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b204:	e7e0      	b.n	800b1c8 <_dtoa_r+0x4c0>
 800b206:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b20a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b20e:	4620      	mov	r0, r4
 800b210:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b214:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b218:	ee14 1a90 	vmov	r1, s9
 800b21c:	3130      	adds	r1, #48	; 0x30
 800b21e:	f808 1b01 	strb.w	r1, [r8], #1
 800b222:	45a0      	cmp	r8, r4
 800b224:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b228:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b22c:	d118      	bne.n	800b260 <_dtoa_r+0x558>
 800b22e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b232:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b236:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23e:	dc4d      	bgt.n	800b2dc <_dtoa_r+0x5d4>
 800b240:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b244:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24c:	f57f af41 	bpl.w	800b0d2 <_dtoa_r+0x3ca>
 800b250:	4680      	mov	r8, r0
 800b252:	3801      	subs	r0, #1
 800b254:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b258:	2b30      	cmp	r3, #48	; 0x30
 800b25a:	d0f9      	beq.n	800b250 <_dtoa_r+0x548>
 800b25c:	4693      	mov	fp, r2
 800b25e:	e02a      	b.n	800b2b6 <_dtoa_r+0x5ae>
 800b260:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b264:	e7d6      	b.n	800b214 <_dtoa_r+0x50c>
 800b266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b26a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b26e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b272:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b276:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b27a:	ee15 3a10 	vmov	r3, s10
 800b27e:	3330      	adds	r3, #48	; 0x30
 800b280:	f808 3b01 	strb.w	r3, [r8], #1
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	eba8 0303 	sub.w	r3, r8, r3
 800b28a:	4599      	cmp	r9, r3
 800b28c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b290:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b294:	d133      	bne.n	800b2fe <_dtoa_r+0x5f6>
 800b296:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b29a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a2:	dc1a      	bgt.n	800b2da <_dtoa_r+0x5d2>
 800b2a4:	eeb4 7b46 	vcmp.f64	d7, d6
 800b2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ac:	d103      	bne.n	800b2b6 <_dtoa_r+0x5ae>
 800b2ae:	ee15 3a10 	vmov	r3, s10
 800b2b2:	07d9      	lsls	r1, r3, #31
 800b2b4:	d411      	bmi.n	800b2da <_dtoa_r+0x5d2>
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f000 fbd1 	bl	800ba60 <_Bfree>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2c2:	f888 3000 	strb.w	r3, [r8]
 800b2c6:	f10b 0301 	add.w	r3, fp, #1
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f43f ad69 	beq.w	800ada6 <_dtoa_r+0x9e>
 800b2d4:	f8c3 8000 	str.w	r8, [r3]
 800b2d8:	e565      	b.n	800ada6 <_dtoa_r+0x9e>
 800b2da:	465a      	mov	r2, fp
 800b2dc:	4643      	mov	r3, r8
 800b2de:	4698      	mov	r8, r3
 800b2e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b2e4:	2939      	cmp	r1, #57	; 0x39
 800b2e6:	d106      	bne.n	800b2f6 <_dtoa_r+0x5ee>
 800b2e8:	9901      	ldr	r1, [sp, #4]
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d1f7      	bne.n	800b2de <_dtoa_r+0x5d6>
 800b2ee:	9801      	ldr	r0, [sp, #4]
 800b2f0:	2130      	movs	r1, #48	; 0x30
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	7001      	strb	r1, [r0, #0]
 800b2f6:	7819      	ldrb	r1, [r3, #0]
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	7019      	strb	r1, [r3, #0]
 800b2fc:	e7ae      	b.n	800b25c <_dtoa_r+0x554>
 800b2fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b302:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30a:	d1b2      	bne.n	800b272 <_dtoa_r+0x56a>
 800b30c:	e7d3      	b.n	800b2b6 <_dtoa_r+0x5ae>
 800b30e:	bf00      	nop
 800b310:	08019028 	.word	0x08019028
 800b314:	08019000 	.word	0x08019000
 800b318:	9907      	ldr	r1, [sp, #28]
 800b31a:	2900      	cmp	r1, #0
 800b31c:	f000 80d0 	beq.w	800b4c0 <_dtoa_r+0x7b8>
 800b320:	9906      	ldr	r1, [sp, #24]
 800b322:	2901      	cmp	r1, #1
 800b324:	f300 80b4 	bgt.w	800b490 <_dtoa_r+0x788>
 800b328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b32a:	2900      	cmp	r1, #0
 800b32c:	f000 80ac 	beq.w	800b488 <_dtoa_r+0x780>
 800b330:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b334:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b338:	461c      	mov	r4, r3
 800b33a:	9309      	str	r3, [sp, #36]	; 0x24
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	4413      	add	r3, r2
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	9b05      	ldr	r3, [sp, #20]
 800b344:	2101      	movs	r1, #1
 800b346:	4413      	add	r3, r2
 800b348:	4630      	mov	r0, r6
 800b34a:	9305      	str	r3, [sp, #20]
 800b34c:	f000 fc88 	bl	800bc60 <__i2b>
 800b350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b352:	4607      	mov	r7, r0
 800b354:	f1b8 0f00 	cmp.w	r8, #0
 800b358:	d00d      	beq.n	800b376 <_dtoa_r+0x66e>
 800b35a:	9a05      	ldr	r2, [sp, #20]
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	dd0a      	ble.n	800b376 <_dtoa_r+0x66e>
 800b360:	4542      	cmp	r2, r8
 800b362:	9904      	ldr	r1, [sp, #16]
 800b364:	bfa8      	it	ge
 800b366:	4642      	movge	r2, r8
 800b368:	1a89      	subs	r1, r1, r2
 800b36a:	9104      	str	r1, [sp, #16]
 800b36c:	9905      	ldr	r1, [sp, #20]
 800b36e:	eba8 0802 	sub.w	r8, r8, r2
 800b372:	1a8a      	subs	r2, r1, r2
 800b374:	9205      	str	r2, [sp, #20]
 800b376:	b303      	cbz	r3, 800b3ba <_dtoa_r+0x6b2>
 800b378:	9a07      	ldr	r2, [sp, #28]
 800b37a:	2a00      	cmp	r2, #0
 800b37c:	f000 80a5 	beq.w	800b4ca <_dtoa_r+0x7c2>
 800b380:	2c00      	cmp	r4, #0
 800b382:	dd13      	ble.n	800b3ac <_dtoa_r+0x6a4>
 800b384:	4639      	mov	r1, r7
 800b386:	4622      	mov	r2, r4
 800b388:	4630      	mov	r0, r6
 800b38a:	930d      	str	r3, [sp, #52]	; 0x34
 800b38c:	f000 fd28 	bl	800bde0 <__pow5mult>
 800b390:	462a      	mov	r2, r5
 800b392:	4601      	mov	r1, r0
 800b394:	4607      	mov	r7, r0
 800b396:	4630      	mov	r0, r6
 800b398:	f000 fc78 	bl	800bc8c <__multiply>
 800b39c:	4629      	mov	r1, r5
 800b39e:	9009      	str	r0, [sp, #36]	; 0x24
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 fb5d 	bl	800ba60 <_Bfree>
 800b3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3aa:	4615      	mov	r5, r2
 800b3ac:	1b1a      	subs	r2, r3, r4
 800b3ae:	d004      	beq.n	800b3ba <_dtoa_r+0x6b2>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f000 fd14 	bl	800bde0 <__pow5mult>
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f000 fc4f 	bl	800bc60 <__i2b>
 800b3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	f340 8081 	ble.w	800b4ce <_dtoa_r+0x7c6>
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 fd05 	bl	800bde0 <__pow5mult>
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	4604      	mov	r4, r0
 800b3dc:	dd7a      	ble.n	800b4d4 <_dtoa_r+0x7cc>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e2:	6922      	ldr	r2, [r4, #16]
 800b3e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3e8:	6910      	ldr	r0, [r2, #16]
 800b3ea:	f000 fbeb 	bl	800bbc4 <__hi0bits>
 800b3ee:	f1c0 0020 	rsb	r0, r0, #32
 800b3f2:	9b05      	ldr	r3, [sp, #20]
 800b3f4:	4418      	add	r0, r3
 800b3f6:	f010 001f 	ands.w	r0, r0, #31
 800b3fa:	f000 8093 	beq.w	800b524 <_dtoa_r+0x81c>
 800b3fe:	f1c0 0220 	rsb	r2, r0, #32
 800b402:	2a04      	cmp	r2, #4
 800b404:	f340 8085 	ble.w	800b512 <_dtoa_r+0x80a>
 800b408:	9b04      	ldr	r3, [sp, #16]
 800b40a:	f1c0 001c 	rsb	r0, r0, #28
 800b40e:	4403      	add	r3, r0
 800b410:	9304      	str	r3, [sp, #16]
 800b412:	9b05      	ldr	r3, [sp, #20]
 800b414:	4480      	add	r8, r0
 800b416:	4403      	add	r3, r0
 800b418:	9305      	str	r3, [sp, #20]
 800b41a:	9b04      	ldr	r3, [sp, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dd05      	ble.n	800b42c <_dtoa_r+0x724>
 800b420:	4629      	mov	r1, r5
 800b422:	461a      	mov	r2, r3
 800b424:	4630      	mov	r0, r6
 800b426:	f000 fd35 	bl	800be94 <__lshift>
 800b42a:	4605      	mov	r5, r0
 800b42c:	9b05      	ldr	r3, [sp, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	dd05      	ble.n	800b43e <_dtoa_r+0x736>
 800b432:	4621      	mov	r1, r4
 800b434:	461a      	mov	r2, r3
 800b436:	4630      	mov	r0, r6
 800b438:	f000 fd2c 	bl	800be94 <__lshift>
 800b43c:	4604      	mov	r4, r0
 800b43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d071      	beq.n	800b528 <_dtoa_r+0x820>
 800b444:	4621      	mov	r1, r4
 800b446:	4628      	mov	r0, r5
 800b448:	f000 fd90 	bl	800bf6c <__mcmp>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	da6b      	bge.n	800b528 <_dtoa_r+0x820>
 800b450:	2300      	movs	r3, #0
 800b452:	4629      	mov	r1, r5
 800b454:	220a      	movs	r2, #10
 800b456:	4630      	mov	r0, r6
 800b458:	f000 fb24 	bl	800baa4 <__multadd>
 800b45c:	9b07      	ldr	r3, [sp, #28]
 800b45e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b462:	4605      	mov	r5, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8197 	beq.w	800b798 <_dtoa_r+0xa90>
 800b46a:	4639      	mov	r1, r7
 800b46c:	2300      	movs	r3, #0
 800b46e:	220a      	movs	r2, #10
 800b470:	4630      	mov	r0, r6
 800b472:	f000 fb17 	bl	800baa4 <__multadd>
 800b476:	f1ba 0f00 	cmp.w	sl, #0
 800b47a:	4607      	mov	r7, r0
 800b47c:	f300 8093 	bgt.w	800b5a6 <_dtoa_r+0x89e>
 800b480:	9b06      	ldr	r3, [sp, #24]
 800b482:	2b02      	cmp	r3, #2
 800b484:	dc57      	bgt.n	800b536 <_dtoa_r+0x82e>
 800b486:	e08e      	b.n	800b5a6 <_dtoa_r+0x89e>
 800b488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b48a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b48e:	e751      	b.n	800b334 <_dtoa_r+0x62c>
 800b490:	f109 34ff 	add.w	r4, r9, #4294967295
 800b494:	42a3      	cmp	r3, r4
 800b496:	bfbf      	itttt	lt
 800b498:	1ae2      	sublt	r2, r4, r3
 800b49a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b49c:	189b      	addlt	r3, r3, r2
 800b49e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b4a0:	bfae      	itee	ge
 800b4a2:	1b1c      	subge	r4, r3, r4
 800b4a4:	4623      	movlt	r3, r4
 800b4a6:	2400      	movlt	r4, #0
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	bfb5      	itete	lt
 800b4ae:	9a04      	ldrlt	r2, [sp, #16]
 800b4b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b4b4:	eba2 0809 	sublt.w	r8, r2, r9
 800b4b8:	464a      	movge	r2, r9
 800b4ba:	bfb8      	it	lt
 800b4bc:	2200      	movlt	r2, #0
 800b4be:	e73c      	b.n	800b33a <_dtoa_r+0x632>
 800b4c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b4c4:	9f07      	ldr	r7, [sp, #28]
 800b4c6:	461c      	mov	r4, r3
 800b4c8:	e744      	b.n	800b354 <_dtoa_r+0x64c>
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	e770      	b.n	800b3b0 <_dtoa_r+0x6a8>
 800b4ce:	9b06      	ldr	r3, [sp, #24]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	dc18      	bgt.n	800b506 <_dtoa_r+0x7fe>
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	b9b3      	cbnz	r3, 800b506 <_dtoa_r+0x7fe>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b4de:	b9a2      	cbnz	r2, 800b50a <_dtoa_r+0x802>
 800b4e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b4e4:	0d12      	lsrs	r2, r2, #20
 800b4e6:	0512      	lsls	r2, r2, #20
 800b4e8:	b18a      	cbz	r2, 800b50e <_dtoa_r+0x806>
 800b4ea:	9b04      	ldr	r3, [sp, #16]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	9b05      	ldr	r3, [sp, #20]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	9305      	str	r3, [sp, #20]
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f47f af70 	bne.w	800b3e2 <_dtoa_r+0x6da>
 800b502:	2001      	movs	r0, #1
 800b504:	e775      	b.n	800b3f2 <_dtoa_r+0x6ea>
 800b506:	2300      	movs	r3, #0
 800b508:	e7f6      	b.n	800b4f8 <_dtoa_r+0x7f0>
 800b50a:	9b02      	ldr	r3, [sp, #8]
 800b50c:	e7f4      	b.n	800b4f8 <_dtoa_r+0x7f0>
 800b50e:	9209      	str	r2, [sp, #36]	; 0x24
 800b510:	e7f3      	b.n	800b4fa <_dtoa_r+0x7f2>
 800b512:	d082      	beq.n	800b41a <_dtoa_r+0x712>
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	321c      	adds	r2, #28
 800b518:	4413      	add	r3, r2
 800b51a:	9304      	str	r3, [sp, #16]
 800b51c:	9b05      	ldr	r3, [sp, #20]
 800b51e:	4490      	add	r8, r2
 800b520:	4413      	add	r3, r2
 800b522:	e779      	b.n	800b418 <_dtoa_r+0x710>
 800b524:	4602      	mov	r2, r0
 800b526:	e7f5      	b.n	800b514 <_dtoa_r+0x80c>
 800b528:	f1b9 0f00 	cmp.w	r9, #0
 800b52c:	dc36      	bgt.n	800b59c <_dtoa_r+0x894>
 800b52e:	9b06      	ldr	r3, [sp, #24]
 800b530:	2b02      	cmp	r3, #2
 800b532:	dd33      	ble.n	800b59c <_dtoa_r+0x894>
 800b534:	46ca      	mov	sl, r9
 800b536:	f1ba 0f00 	cmp.w	sl, #0
 800b53a:	d10d      	bne.n	800b558 <_dtoa_r+0x850>
 800b53c:	4621      	mov	r1, r4
 800b53e:	4653      	mov	r3, sl
 800b540:	2205      	movs	r2, #5
 800b542:	4630      	mov	r0, r6
 800b544:	f000 faae 	bl	800baa4 <__multadd>
 800b548:	4601      	mov	r1, r0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4628      	mov	r0, r5
 800b54e:	f000 fd0d 	bl	800bf6c <__mcmp>
 800b552:	2800      	cmp	r0, #0
 800b554:	f73f ade4 	bgt.w	800b120 <_dtoa_r+0x418>
 800b558:	9b08      	ldr	r3, [sp, #32]
 800b55a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b55e:	ea6f 0b03 	mvn.w	fp, r3
 800b562:	f04f 0900 	mov.w	r9, #0
 800b566:	4621      	mov	r1, r4
 800b568:	4630      	mov	r0, r6
 800b56a:	f000 fa79 	bl	800ba60 <_Bfree>
 800b56e:	2f00      	cmp	r7, #0
 800b570:	f43f aea1 	beq.w	800b2b6 <_dtoa_r+0x5ae>
 800b574:	f1b9 0f00 	cmp.w	r9, #0
 800b578:	d005      	beq.n	800b586 <_dtoa_r+0x87e>
 800b57a:	45b9      	cmp	r9, r7
 800b57c:	d003      	beq.n	800b586 <_dtoa_r+0x87e>
 800b57e:	4649      	mov	r1, r9
 800b580:	4630      	mov	r0, r6
 800b582:	f000 fa6d 	bl	800ba60 <_Bfree>
 800b586:	4639      	mov	r1, r7
 800b588:	4630      	mov	r0, r6
 800b58a:	f000 fa69 	bl	800ba60 <_Bfree>
 800b58e:	e692      	b.n	800b2b6 <_dtoa_r+0x5ae>
 800b590:	2400      	movs	r4, #0
 800b592:	4627      	mov	r7, r4
 800b594:	e7e0      	b.n	800b558 <_dtoa_r+0x850>
 800b596:	4693      	mov	fp, r2
 800b598:	4627      	mov	r7, r4
 800b59a:	e5c1      	b.n	800b120 <_dtoa_r+0x418>
 800b59c:	9b07      	ldr	r3, [sp, #28]
 800b59e:	46ca      	mov	sl, r9
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8100 	beq.w	800b7a6 <_dtoa_r+0xa9e>
 800b5a6:	f1b8 0f00 	cmp.w	r8, #0
 800b5aa:	dd05      	ble.n	800b5b8 <_dtoa_r+0x8b0>
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	4642      	mov	r2, r8
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f000 fc6f 	bl	800be94 <__lshift>
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d05d      	beq.n	800b67a <_dtoa_r+0x972>
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 fa0d 	bl	800b9e0 <_Balloc>
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	b928      	cbnz	r0, 800b5d6 <_dtoa_r+0x8ce>
 800b5ca:	4b82      	ldr	r3, [pc, #520]	; (800b7d4 <_dtoa_r+0xacc>)
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b5d2:	f7ff bbb1 	b.w	800ad38 <_dtoa_r+0x30>
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	3202      	adds	r2, #2
 800b5da:	0092      	lsls	r2, r2, #2
 800b5dc:	f107 010c 	add.w	r1, r7, #12
 800b5e0:	300c      	adds	r0, #12
 800b5e2:	f7ff faf4 	bl	800abce <memcpy>
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4641      	mov	r1, r8
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f000 fc52 	bl	800be94 <__lshift>
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	9304      	str	r3, [sp, #16]
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	4453      	add	r3, sl
 800b5fa:	9308      	str	r3, [sp, #32]
 800b5fc:	9b02      	ldr	r3, [sp, #8]
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	46b9      	mov	r9, r7
 800b604:	9307      	str	r3, [sp, #28]
 800b606:	4607      	mov	r7, r0
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	4621      	mov	r1, r4
 800b60c:	3b01      	subs	r3, #1
 800b60e:	4628      	mov	r0, r5
 800b610:	9302      	str	r3, [sp, #8]
 800b612:	f7ff faf1 	bl	800abf8 <quorem>
 800b616:	4603      	mov	r3, r0
 800b618:	3330      	adds	r3, #48	; 0x30
 800b61a:	9005      	str	r0, [sp, #20]
 800b61c:	4649      	mov	r1, r9
 800b61e:	4628      	mov	r0, r5
 800b620:	9309      	str	r3, [sp, #36]	; 0x24
 800b622:	f000 fca3 	bl	800bf6c <__mcmp>
 800b626:	463a      	mov	r2, r7
 800b628:	4682      	mov	sl, r0
 800b62a:	4621      	mov	r1, r4
 800b62c:	4630      	mov	r0, r6
 800b62e:	f000 fcb9 	bl	800bfa4 <__mdiff>
 800b632:	68c2      	ldr	r2, [r0, #12]
 800b634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b636:	4680      	mov	r8, r0
 800b638:	bb0a      	cbnz	r2, 800b67e <_dtoa_r+0x976>
 800b63a:	4601      	mov	r1, r0
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 fc95 	bl	800bf6c <__mcmp>
 800b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b644:	4602      	mov	r2, r0
 800b646:	4641      	mov	r1, r8
 800b648:	4630      	mov	r0, r6
 800b64a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b64e:	f000 fa07 	bl	800ba60 <_Bfree>
 800b652:	9b06      	ldr	r3, [sp, #24]
 800b654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b656:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b65a:	ea43 0102 	orr.w	r1, r3, r2
 800b65e:	9b07      	ldr	r3, [sp, #28]
 800b660:	4319      	orrs	r1, r3
 800b662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b664:	d10d      	bne.n	800b682 <_dtoa_r+0x97a>
 800b666:	2b39      	cmp	r3, #57	; 0x39
 800b668:	d029      	beq.n	800b6be <_dtoa_r+0x9b6>
 800b66a:	f1ba 0f00 	cmp.w	sl, #0
 800b66e:	dd01      	ble.n	800b674 <_dtoa_r+0x96c>
 800b670:	9b05      	ldr	r3, [sp, #20]
 800b672:	3331      	adds	r3, #49	; 0x31
 800b674:	9a02      	ldr	r2, [sp, #8]
 800b676:	7013      	strb	r3, [r2, #0]
 800b678:	e775      	b.n	800b566 <_dtoa_r+0x85e>
 800b67a:	4638      	mov	r0, r7
 800b67c:	e7b8      	b.n	800b5f0 <_dtoa_r+0x8e8>
 800b67e:	2201      	movs	r2, #1
 800b680:	e7e1      	b.n	800b646 <_dtoa_r+0x93e>
 800b682:	f1ba 0f00 	cmp.w	sl, #0
 800b686:	db06      	blt.n	800b696 <_dtoa_r+0x98e>
 800b688:	9906      	ldr	r1, [sp, #24]
 800b68a:	ea41 0a0a 	orr.w	sl, r1, sl
 800b68e:	9907      	ldr	r1, [sp, #28]
 800b690:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b694:	d120      	bne.n	800b6d8 <_dtoa_r+0x9d0>
 800b696:	2a00      	cmp	r2, #0
 800b698:	ddec      	ble.n	800b674 <_dtoa_r+0x96c>
 800b69a:	4629      	mov	r1, r5
 800b69c:	2201      	movs	r2, #1
 800b69e:	4630      	mov	r0, r6
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	f000 fbf7 	bl	800be94 <__lshift>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	f000 fc5f 	bl	800bf6c <__mcmp>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	9b04      	ldr	r3, [sp, #16]
 800b6b2:	dc02      	bgt.n	800b6ba <_dtoa_r+0x9b2>
 800b6b4:	d1de      	bne.n	800b674 <_dtoa_r+0x96c>
 800b6b6:	07da      	lsls	r2, r3, #31
 800b6b8:	d5dc      	bpl.n	800b674 <_dtoa_r+0x96c>
 800b6ba:	2b39      	cmp	r3, #57	; 0x39
 800b6bc:	d1d8      	bne.n	800b670 <_dtoa_r+0x968>
 800b6be:	9a02      	ldr	r2, [sp, #8]
 800b6c0:	2339      	movs	r3, #57	; 0x39
 800b6c2:	7013      	strb	r3, [r2, #0]
 800b6c4:	4643      	mov	r3, r8
 800b6c6:	4698      	mov	r8, r3
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b6ce:	2a39      	cmp	r2, #57	; 0x39
 800b6d0:	d051      	beq.n	800b776 <_dtoa_r+0xa6e>
 800b6d2:	3201      	adds	r2, #1
 800b6d4:	701a      	strb	r2, [r3, #0]
 800b6d6:	e746      	b.n	800b566 <_dtoa_r+0x85e>
 800b6d8:	2a00      	cmp	r2, #0
 800b6da:	dd03      	ble.n	800b6e4 <_dtoa_r+0x9dc>
 800b6dc:	2b39      	cmp	r3, #57	; 0x39
 800b6de:	d0ee      	beq.n	800b6be <_dtoa_r+0x9b6>
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	e7c7      	b.n	800b674 <_dtoa_r+0x96c>
 800b6e4:	9a04      	ldr	r2, [sp, #16]
 800b6e6:	9908      	ldr	r1, [sp, #32]
 800b6e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6ec:	428a      	cmp	r2, r1
 800b6ee:	d02b      	beq.n	800b748 <_dtoa_r+0xa40>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	220a      	movs	r2, #10
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f000 f9d4 	bl	800baa4 <__multadd>
 800b6fc:	45b9      	cmp	r9, r7
 800b6fe:	4605      	mov	r5, r0
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	f04f 020a 	mov.w	r2, #10
 800b708:	4649      	mov	r1, r9
 800b70a:	4630      	mov	r0, r6
 800b70c:	d107      	bne.n	800b71e <_dtoa_r+0xa16>
 800b70e:	f000 f9c9 	bl	800baa4 <__multadd>
 800b712:	4681      	mov	r9, r0
 800b714:	4607      	mov	r7, r0
 800b716:	9b04      	ldr	r3, [sp, #16]
 800b718:	3301      	adds	r3, #1
 800b71a:	9304      	str	r3, [sp, #16]
 800b71c:	e774      	b.n	800b608 <_dtoa_r+0x900>
 800b71e:	f000 f9c1 	bl	800baa4 <__multadd>
 800b722:	4639      	mov	r1, r7
 800b724:	4681      	mov	r9, r0
 800b726:	2300      	movs	r3, #0
 800b728:	220a      	movs	r2, #10
 800b72a:	4630      	mov	r0, r6
 800b72c:	f000 f9ba 	bl	800baa4 <__multadd>
 800b730:	4607      	mov	r7, r0
 800b732:	e7f0      	b.n	800b716 <_dtoa_r+0xa0e>
 800b734:	f1ba 0f00 	cmp.w	sl, #0
 800b738:	9a01      	ldr	r2, [sp, #4]
 800b73a:	bfcc      	ite	gt
 800b73c:	46d0      	movgt	r8, sl
 800b73e:	f04f 0801 	movle.w	r8, #1
 800b742:	4490      	add	r8, r2
 800b744:	f04f 0900 	mov.w	r9, #0
 800b748:	4629      	mov	r1, r5
 800b74a:	2201      	movs	r2, #1
 800b74c:	4630      	mov	r0, r6
 800b74e:	9302      	str	r3, [sp, #8]
 800b750:	f000 fba0 	bl	800be94 <__lshift>
 800b754:	4621      	mov	r1, r4
 800b756:	4605      	mov	r5, r0
 800b758:	f000 fc08 	bl	800bf6c <__mcmp>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	dcb1      	bgt.n	800b6c4 <_dtoa_r+0x9bc>
 800b760:	d102      	bne.n	800b768 <_dtoa_r+0xa60>
 800b762:	9b02      	ldr	r3, [sp, #8]
 800b764:	07db      	lsls	r3, r3, #31
 800b766:	d4ad      	bmi.n	800b6c4 <_dtoa_r+0x9bc>
 800b768:	4643      	mov	r3, r8
 800b76a:	4698      	mov	r8, r3
 800b76c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b770:	2a30      	cmp	r2, #48	; 0x30
 800b772:	d0fa      	beq.n	800b76a <_dtoa_r+0xa62>
 800b774:	e6f7      	b.n	800b566 <_dtoa_r+0x85e>
 800b776:	9a01      	ldr	r2, [sp, #4]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d1a4      	bne.n	800b6c6 <_dtoa_r+0x9be>
 800b77c:	f10b 0b01 	add.w	fp, fp, #1
 800b780:	2331      	movs	r3, #49	; 0x31
 800b782:	e778      	b.n	800b676 <_dtoa_r+0x96e>
 800b784:	4b14      	ldr	r3, [pc, #80]	; (800b7d8 <_dtoa_r+0xad0>)
 800b786:	f7ff bb2a 	b.w	800adde <_dtoa_r+0xd6>
 800b78a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f47f ab05 	bne.w	800ad9c <_dtoa_r+0x94>
 800b792:	4b12      	ldr	r3, [pc, #72]	; (800b7dc <_dtoa_r+0xad4>)
 800b794:	f7ff bb23 	b.w	800adde <_dtoa_r+0xd6>
 800b798:	f1ba 0f00 	cmp.w	sl, #0
 800b79c:	dc03      	bgt.n	800b7a6 <_dtoa_r+0xa9e>
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	f73f aec8 	bgt.w	800b536 <_dtoa_r+0x82e>
 800b7a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f7ff fa23 	bl	800abf8 <quorem>
 800b7b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b7b6:	f808 3b01 	strb.w	r3, [r8], #1
 800b7ba:	9a01      	ldr	r2, [sp, #4]
 800b7bc:	eba8 0202 	sub.w	r2, r8, r2
 800b7c0:	4592      	cmp	sl, r2
 800b7c2:	ddb7      	ble.n	800b734 <_dtoa_r+0xa2c>
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f000 f96a 	bl	800baa4 <__multadd>
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	e7ea      	b.n	800b7aa <_dtoa_r+0xaa2>
 800b7d4:	08018f91 	.word	0x08018f91
 800b7d8:	08018eec 	.word	0x08018eec
 800b7dc:	08018f15 	.word	0x08018f15

0800b7e0 <_free_r>:
 800b7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7e2:	2900      	cmp	r1, #0
 800b7e4:	d044      	beq.n	800b870 <_free_r+0x90>
 800b7e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7ea:	9001      	str	r0, [sp, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f1a1 0404 	sub.w	r4, r1, #4
 800b7f2:	bfb8      	it	lt
 800b7f4:	18e4      	addlt	r4, r4, r3
 800b7f6:	f000 f8e7 	bl	800b9c8 <__malloc_lock>
 800b7fa:	4a1e      	ldr	r2, [pc, #120]	; (800b874 <_free_r+0x94>)
 800b7fc:	9801      	ldr	r0, [sp, #4]
 800b7fe:	6813      	ldr	r3, [r2, #0]
 800b800:	b933      	cbnz	r3, 800b810 <_free_r+0x30>
 800b802:	6063      	str	r3, [r4, #4]
 800b804:	6014      	str	r4, [r2, #0]
 800b806:	b003      	add	sp, #12
 800b808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b80c:	f000 b8e2 	b.w	800b9d4 <__malloc_unlock>
 800b810:	42a3      	cmp	r3, r4
 800b812:	d908      	bls.n	800b826 <_free_r+0x46>
 800b814:	6825      	ldr	r5, [r4, #0]
 800b816:	1961      	adds	r1, r4, r5
 800b818:	428b      	cmp	r3, r1
 800b81a:	bf01      	itttt	eq
 800b81c:	6819      	ldreq	r1, [r3, #0]
 800b81e:	685b      	ldreq	r3, [r3, #4]
 800b820:	1949      	addeq	r1, r1, r5
 800b822:	6021      	streq	r1, [r4, #0]
 800b824:	e7ed      	b.n	800b802 <_free_r+0x22>
 800b826:	461a      	mov	r2, r3
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	b10b      	cbz	r3, 800b830 <_free_r+0x50>
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	d9fa      	bls.n	800b826 <_free_r+0x46>
 800b830:	6811      	ldr	r1, [r2, #0]
 800b832:	1855      	adds	r5, r2, r1
 800b834:	42a5      	cmp	r5, r4
 800b836:	d10b      	bne.n	800b850 <_free_r+0x70>
 800b838:	6824      	ldr	r4, [r4, #0]
 800b83a:	4421      	add	r1, r4
 800b83c:	1854      	adds	r4, r2, r1
 800b83e:	42a3      	cmp	r3, r4
 800b840:	6011      	str	r1, [r2, #0]
 800b842:	d1e0      	bne.n	800b806 <_free_r+0x26>
 800b844:	681c      	ldr	r4, [r3, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	6053      	str	r3, [r2, #4]
 800b84a:	440c      	add	r4, r1
 800b84c:	6014      	str	r4, [r2, #0]
 800b84e:	e7da      	b.n	800b806 <_free_r+0x26>
 800b850:	d902      	bls.n	800b858 <_free_r+0x78>
 800b852:	230c      	movs	r3, #12
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	e7d6      	b.n	800b806 <_free_r+0x26>
 800b858:	6825      	ldr	r5, [r4, #0]
 800b85a:	1961      	adds	r1, r4, r5
 800b85c:	428b      	cmp	r3, r1
 800b85e:	bf04      	itt	eq
 800b860:	6819      	ldreq	r1, [r3, #0]
 800b862:	685b      	ldreq	r3, [r3, #4]
 800b864:	6063      	str	r3, [r4, #4]
 800b866:	bf04      	itt	eq
 800b868:	1949      	addeq	r1, r1, r5
 800b86a:	6021      	streq	r1, [r4, #0]
 800b86c:	6054      	str	r4, [r2, #4]
 800b86e:	e7ca      	b.n	800b806 <_free_r+0x26>
 800b870:	b003      	add	sp, #12
 800b872:	bd30      	pop	{r4, r5, pc}
 800b874:	200005dc 	.word	0x200005dc

0800b878 <malloc>:
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <malloc+0xc>)
 800b87a:	4601      	mov	r1, r0
 800b87c:	6818      	ldr	r0, [r3, #0]
 800b87e:	f000 b823 	b.w	800b8c8 <_malloc_r>
 800b882:	bf00      	nop
 800b884:	20000070 	.word	0x20000070

0800b888 <sbrk_aligned>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	4e0e      	ldr	r6, [pc, #56]	; (800b8c4 <sbrk_aligned+0x3c>)
 800b88c:	460c      	mov	r4, r1
 800b88e:	6831      	ldr	r1, [r6, #0]
 800b890:	4605      	mov	r5, r0
 800b892:	b911      	cbnz	r1, 800b89a <sbrk_aligned+0x12>
 800b894:	f001 fdd6 	bl	800d444 <_sbrk_r>
 800b898:	6030      	str	r0, [r6, #0]
 800b89a:	4621      	mov	r1, r4
 800b89c:	4628      	mov	r0, r5
 800b89e:	f001 fdd1 	bl	800d444 <_sbrk_r>
 800b8a2:	1c43      	adds	r3, r0, #1
 800b8a4:	d00a      	beq.n	800b8bc <sbrk_aligned+0x34>
 800b8a6:	1cc4      	adds	r4, r0, #3
 800b8a8:	f024 0403 	bic.w	r4, r4, #3
 800b8ac:	42a0      	cmp	r0, r4
 800b8ae:	d007      	beq.n	800b8c0 <sbrk_aligned+0x38>
 800b8b0:	1a21      	subs	r1, r4, r0
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f001 fdc6 	bl	800d444 <_sbrk_r>
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d101      	bne.n	800b8c0 <sbrk_aligned+0x38>
 800b8bc:	f04f 34ff 	mov.w	r4, #4294967295
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	200005e0 	.word	0x200005e0

0800b8c8 <_malloc_r>:
 800b8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8cc:	1ccd      	adds	r5, r1, #3
 800b8ce:	f025 0503 	bic.w	r5, r5, #3
 800b8d2:	3508      	adds	r5, #8
 800b8d4:	2d0c      	cmp	r5, #12
 800b8d6:	bf38      	it	cc
 800b8d8:	250c      	movcc	r5, #12
 800b8da:	2d00      	cmp	r5, #0
 800b8dc:	4607      	mov	r7, r0
 800b8de:	db01      	blt.n	800b8e4 <_malloc_r+0x1c>
 800b8e0:	42a9      	cmp	r1, r5
 800b8e2:	d905      	bls.n	800b8f0 <_malloc_r+0x28>
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	2600      	movs	r6, #0
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b9c4 <_malloc_r+0xfc>
 800b8f4:	f000 f868 	bl	800b9c8 <__malloc_lock>
 800b8f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8fc:	461c      	mov	r4, r3
 800b8fe:	bb5c      	cbnz	r4, 800b958 <_malloc_r+0x90>
 800b900:	4629      	mov	r1, r5
 800b902:	4638      	mov	r0, r7
 800b904:	f7ff ffc0 	bl	800b888 <sbrk_aligned>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	4604      	mov	r4, r0
 800b90c:	d155      	bne.n	800b9ba <_malloc_r+0xf2>
 800b90e:	f8d8 4000 	ldr.w	r4, [r8]
 800b912:	4626      	mov	r6, r4
 800b914:	2e00      	cmp	r6, #0
 800b916:	d145      	bne.n	800b9a4 <_malloc_r+0xdc>
 800b918:	2c00      	cmp	r4, #0
 800b91a:	d048      	beq.n	800b9ae <_malloc_r+0xe6>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	4631      	mov	r1, r6
 800b920:	4638      	mov	r0, r7
 800b922:	eb04 0903 	add.w	r9, r4, r3
 800b926:	f001 fd8d 	bl	800d444 <_sbrk_r>
 800b92a:	4581      	cmp	r9, r0
 800b92c:	d13f      	bne.n	800b9ae <_malloc_r+0xe6>
 800b92e:	6821      	ldr	r1, [r4, #0]
 800b930:	1a6d      	subs	r5, r5, r1
 800b932:	4629      	mov	r1, r5
 800b934:	4638      	mov	r0, r7
 800b936:	f7ff ffa7 	bl	800b888 <sbrk_aligned>
 800b93a:	3001      	adds	r0, #1
 800b93c:	d037      	beq.n	800b9ae <_malloc_r+0xe6>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	442b      	add	r3, r5
 800b942:	6023      	str	r3, [r4, #0]
 800b944:	f8d8 3000 	ldr.w	r3, [r8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d038      	beq.n	800b9be <_malloc_r+0xf6>
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	42a2      	cmp	r2, r4
 800b950:	d12b      	bne.n	800b9aa <_malloc_r+0xe2>
 800b952:	2200      	movs	r2, #0
 800b954:	605a      	str	r2, [r3, #4]
 800b956:	e00f      	b.n	800b978 <_malloc_r+0xb0>
 800b958:	6822      	ldr	r2, [r4, #0]
 800b95a:	1b52      	subs	r2, r2, r5
 800b95c:	d41f      	bmi.n	800b99e <_malloc_r+0xd6>
 800b95e:	2a0b      	cmp	r2, #11
 800b960:	d917      	bls.n	800b992 <_malloc_r+0xca>
 800b962:	1961      	adds	r1, r4, r5
 800b964:	42a3      	cmp	r3, r4
 800b966:	6025      	str	r5, [r4, #0]
 800b968:	bf18      	it	ne
 800b96a:	6059      	strne	r1, [r3, #4]
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	bf08      	it	eq
 800b970:	f8c8 1000 	streq.w	r1, [r8]
 800b974:	5162      	str	r2, [r4, r5]
 800b976:	604b      	str	r3, [r1, #4]
 800b978:	4638      	mov	r0, r7
 800b97a:	f104 060b 	add.w	r6, r4, #11
 800b97e:	f000 f829 	bl	800b9d4 <__malloc_unlock>
 800b982:	f026 0607 	bic.w	r6, r6, #7
 800b986:	1d23      	adds	r3, r4, #4
 800b988:	1af2      	subs	r2, r6, r3
 800b98a:	d0ae      	beq.n	800b8ea <_malloc_r+0x22>
 800b98c:	1b9b      	subs	r3, r3, r6
 800b98e:	50a3      	str	r3, [r4, r2]
 800b990:	e7ab      	b.n	800b8ea <_malloc_r+0x22>
 800b992:	42a3      	cmp	r3, r4
 800b994:	6862      	ldr	r2, [r4, #4]
 800b996:	d1dd      	bne.n	800b954 <_malloc_r+0x8c>
 800b998:	f8c8 2000 	str.w	r2, [r8]
 800b99c:	e7ec      	b.n	800b978 <_malloc_r+0xb0>
 800b99e:	4623      	mov	r3, r4
 800b9a0:	6864      	ldr	r4, [r4, #4]
 800b9a2:	e7ac      	b.n	800b8fe <_malloc_r+0x36>
 800b9a4:	4634      	mov	r4, r6
 800b9a6:	6876      	ldr	r6, [r6, #4]
 800b9a8:	e7b4      	b.n	800b914 <_malloc_r+0x4c>
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	e7cc      	b.n	800b948 <_malloc_r+0x80>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	603b      	str	r3, [r7, #0]
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	f000 f80e 	bl	800b9d4 <__malloc_unlock>
 800b9b8:	e797      	b.n	800b8ea <_malloc_r+0x22>
 800b9ba:	6025      	str	r5, [r4, #0]
 800b9bc:	e7dc      	b.n	800b978 <_malloc_r+0xb0>
 800b9be:	605b      	str	r3, [r3, #4]
 800b9c0:	deff      	udf	#255	; 0xff
 800b9c2:	bf00      	nop
 800b9c4:	200005dc 	.word	0x200005dc

0800b9c8 <__malloc_lock>:
 800b9c8:	4801      	ldr	r0, [pc, #4]	; (800b9d0 <__malloc_lock+0x8>)
 800b9ca:	f7ff b8fe 	b.w	800abca <__retarget_lock_acquire_recursive>
 800b9ce:	bf00      	nop
 800b9d0:	200005d8 	.word	0x200005d8

0800b9d4 <__malloc_unlock>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	; (800b9dc <__malloc_unlock+0x8>)
 800b9d6:	f7ff b8f9 	b.w	800abcc <__retarget_lock_release_recursive>
 800b9da:	bf00      	nop
 800b9dc:	200005d8 	.word	0x200005d8

0800b9e0 <_Balloc>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	69c6      	ldr	r6, [r0, #28]
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	b976      	cbnz	r6, 800ba08 <_Balloc+0x28>
 800b9ea:	2010      	movs	r0, #16
 800b9ec:	f7ff ff44 	bl	800b878 <malloc>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	61e0      	str	r0, [r4, #28]
 800b9f4:	b920      	cbnz	r0, 800ba00 <_Balloc+0x20>
 800b9f6:	4b18      	ldr	r3, [pc, #96]	; (800ba58 <_Balloc+0x78>)
 800b9f8:	4818      	ldr	r0, [pc, #96]	; (800ba5c <_Balloc+0x7c>)
 800b9fa:	216b      	movs	r1, #107	; 0x6b
 800b9fc:	f001 fd3c 	bl	800d478 <__assert_func>
 800ba00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba04:	6006      	str	r6, [r0, #0]
 800ba06:	60c6      	str	r6, [r0, #12]
 800ba08:	69e6      	ldr	r6, [r4, #28]
 800ba0a:	68f3      	ldr	r3, [r6, #12]
 800ba0c:	b183      	cbz	r3, 800ba30 <_Balloc+0x50>
 800ba0e:	69e3      	ldr	r3, [r4, #28]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba16:	b9b8      	cbnz	r0, 800ba48 <_Balloc+0x68>
 800ba18:	2101      	movs	r1, #1
 800ba1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba1e:	1d72      	adds	r2, r6, #5
 800ba20:	0092      	lsls	r2, r2, #2
 800ba22:	4620      	mov	r0, r4
 800ba24:	f001 fd46 	bl	800d4b4 <_calloc_r>
 800ba28:	b160      	cbz	r0, 800ba44 <_Balloc+0x64>
 800ba2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba2e:	e00e      	b.n	800ba4e <_Balloc+0x6e>
 800ba30:	2221      	movs	r2, #33	; 0x21
 800ba32:	2104      	movs	r1, #4
 800ba34:	4620      	mov	r0, r4
 800ba36:	f001 fd3d 	bl	800d4b4 <_calloc_r>
 800ba3a:	69e3      	ldr	r3, [r4, #28]
 800ba3c:	60f0      	str	r0, [r6, #12]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e4      	bne.n	800ba0e <_Balloc+0x2e>
 800ba44:	2000      	movs	r0, #0
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	6802      	ldr	r2, [r0, #0]
 800ba4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba54:	e7f7      	b.n	800ba46 <_Balloc+0x66>
 800ba56:	bf00      	nop
 800ba58:	08018f22 	.word	0x08018f22
 800ba5c:	08018fa2 	.word	0x08018fa2

0800ba60 <_Bfree>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	69c6      	ldr	r6, [r0, #28]
 800ba64:	4605      	mov	r5, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	b976      	cbnz	r6, 800ba88 <_Bfree+0x28>
 800ba6a:	2010      	movs	r0, #16
 800ba6c:	f7ff ff04 	bl	800b878 <malloc>
 800ba70:	4602      	mov	r2, r0
 800ba72:	61e8      	str	r0, [r5, #28]
 800ba74:	b920      	cbnz	r0, 800ba80 <_Bfree+0x20>
 800ba76:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <_Bfree+0x3c>)
 800ba78:	4809      	ldr	r0, [pc, #36]	; (800baa0 <_Bfree+0x40>)
 800ba7a:	218f      	movs	r1, #143	; 0x8f
 800ba7c:	f001 fcfc 	bl	800d478 <__assert_func>
 800ba80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba84:	6006      	str	r6, [r0, #0]
 800ba86:	60c6      	str	r6, [r0, #12]
 800ba88:	b13c      	cbz	r4, 800ba9a <_Bfree+0x3a>
 800ba8a:	69eb      	ldr	r3, [r5, #28]
 800ba8c:	6862      	ldr	r2, [r4, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba94:	6021      	str	r1, [r4, #0]
 800ba96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	08018f22 	.word	0x08018f22
 800baa0:	08018fa2 	.word	0x08018fa2

0800baa4 <__multadd>:
 800baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa8:	690d      	ldr	r5, [r1, #16]
 800baaa:	4607      	mov	r7, r0
 800baac:	460c      	mov	r4, r1
 800baae:	461e      	mov	r6, r3
 800bab0:	f101 0c14 	add.w	ip, r1, #20
 800bab4:	2000      	movs	r0, #0
 800bab6:	f8dc 3000 	ldr.w	r3, [ip]
 800baba:	b299      	uxth	r1, r3
 800babc:	fb02 6101 	mla	r1, r2, r1, r6
 800bac0:	0c1e      	lsrs	r6, r3, #16
 800bac2:	0c0b      	lsrs	r3, r1, #16
 800bac4:	fb02 3306 	mla	r3, r2, r6, r3
 800bac8:	b289      	uxth	r1, r1
 800baca:	3001      	adds	r0, #1
 800bacc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bad0:	4285      	cmp	r5, r0
 800bad2:	f84c 1b04 	str.w	r1, [ip], #4
 800bad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bada:	dcec      	bgt.n	800bab6 <__multadd+0x12>
 800badc:	b30e      	cbz	r6, 800bb22 <__multadd+0x7e>
 800bade:	68a3      	ldr	r3, [r4, #8]
 800bae0:	42ab      	cmp	r3, r5
 800bae2:	dc19      	bgt.n	800bb18 <__multadd+0x74>
 800bae4:	6861      	ldr	r1, [r4, #4]
 800bae6:	4638      	mov	r0, r7
 800bae8:	3101      	adds	r1, #1
 800baea:	f7ff ff79 	bl	800b9e0 <_Balloc>
 800baee:	4680      	mov	r8, r0
 800baf0:	b928      	cbnz	r0, 800bafe <__multadd+0x5a>
 800baf2:	4602      	mov	r2, r0
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <__multadd+0x84>)
 800baf6:	480d      	ldr	r0, [pc, #52]	; (800bb2c <__multadd+0x88>)
 800baf8:	21ba      	movs	r1, #186	; 0xba
 800bafa:	f001 fcbd 	bl	800d478 <__assert_func>
 800bafe:	6922      	ldr	r2, [r4, #16]
 800bb00:	3202      	adds	r2, #2
 800bb02:	f104 010c 	add.w	r1, r4, #12
 800bb06:	0092      	lsls	r2, r2, #2
 800bb08:	300c      	adds	r0, #12
 800bb0a:	f7ff f860 	bl	800abce <memcpy>
 800bb0e:	4621      	mov	r1, r4
 800bb10:	4638      	mov	r0, r7
 800bb12:	f7ff ffa5 	bl	800ba60 <_Bfree>
 800bb16:	4644      	mov	r4, r8
 800bb18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	615e      	str	r6, [r3, #20]
 800bb20:	6125      	str	r5, [r4, #16]
 800bb22:	4620      	mov	r0, r4
 800bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb28:	08018f91 	.word	0x08018f91
 800bb2c:	08018fa2 	.word	0x08018fa2

0800bb30 <__s2b>:
 800bb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb34:	460c      	mov	r4, r1
 800bb36:	4615      	mov	r5, r2
 800bb38:	461f      	mov	r7, r3
 800bb3a:	2209      	movs	r2, #9
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	4606      	mov	r6, r0
 800bb40:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb44:	2100      	movs	r1, #0
 800bb46:	2201      	movs	r2, #1
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	db09      	blt.n	800bb60 <__s2b+0x30>
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7ff ff47 	bl	800b9e0 <_Balloc>
 800bb52:	b940      	cbnz	r0, 800bb66 <__s2b+0x36>
 800bb54:	4602      	mov	r2, r0
 800bb56:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <__s2b+0x8c>)
 800bb58:	4819      	ldr	r0, [pc, #100]	; (800bbc0 <__s2b+0x90>)
 800bb5a:	21d3      	movs	r1, #211	; 0xd3
 800bb5c:	f001 fc8c 	bl	800d478 <__assert_func>
 800bb60:	0052      	lsls	r2, r2, #1
 800bb62:	3101      	adds	r1, #1
 800bb64:	e7f0      	b.n	800bb48 <__s2b+0x18>
 800bb66:	9b08      	ldr	r3, [sp, #32]
 800bb68:	6143      	str	r3, [r0, #20]
 800bb6a:	2d09      	cmp	r5, #9
 800bb6c:	f04f 0301 	mov.w	r3, #1
 800bb70:	6103      	str	r3, [r0, #16]
 800bb72:	dd16      	ble.n	800bba2 <__s2b+0x72>
 800bb74:	f104 0909 	add.w	r9, r4, #9
 800bb78:	46c8      	mov	r8, r9
 800bb7a:	442c      	add	r4, r5
 800bb7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb80:	4601      	mov	r1, r0
 800bb82:	3b30      	subs	r3, #48	; 0x30
 800bb84:	220a      	movs	r2, #10
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7ff ff8c 	bl	800baa4 <__multadd>
 800bb8c:	45a0      	cmp	r8, r4
 800bb8e:	d1f5      	bne.n	800bb7c <__s2b+0x4c>
 800bb90:	f1a5 0408 	sub.w	r4, r5, #8
 800bb94:	444c      	add	r4, r9
 800bb96:	1b2d      	subs	r5, r5, r4
 800bb98:	1963      	adds	r3, r4, r5
 800bb9a:	42bb      	cmp	r3, r7
 800bb9c:	db04      	blt.n	800bba8 <__s2b+0x78>
 800bb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba2:	340a      	adds	r4, #10
 800bba4:	2509      	movs	r5, #9
 800bba6:	e7f6      	b.n	800bb96 <__s2b+0x66>
 800bba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbac:	4601      	mov	r1, r0
 800bbae:	3b30      	subs	r3, #48	; 0x30
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f7ff ff76 	bl	800baa4 <__multadd>
 800bbb8:	e7ee      	b.n	800bb98 <__s2b+0x68>
 800bbba:	bf00      	nop
 800bbbc:	08018f91 	.word	0x08018f91
 800bbc0:	08018fa2 	.word	0x08018fa2

0800bbc4 <__hi0bits>:
 800bbc4:	0c03      	lsrs	r3, r0, #16
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	b9d3      	cbnz	r3, 800bc00 <__hi0bits+0x3c>
 800bbca:	0400      	lsls	r0, r0, #16
 800bbcc:	2310      	movs	r3, #16
 800bbce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbd2:	bf04      	itt	eq
 800bbd4:	0200      	lsleq	r0, r0, #8
 800bbd6:	3308      	addeq	r3, #8
 800bbd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbdc:	bf04      	itt	eq
 800bbde:	0100      	lsleq	r0, r0, #4
 800bbe0:	3304      	addeq	r3, #4
 800bbe2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbe6:	bf04      	itt	eq
 800bbe8:	0080      	lsleq	r0, r0, #2
 800bbea:	3302      	addeq	r3, #2
 800bbec:	2800      	cmp	r0, #0
 800bbee:	db05      	blt.n	800bbfc <__hi0bits+0x38>
 800bbf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbf4:	f103 0301 	add.w	r3, r3, #1
 800bbf8:	bf08      	it	eq
 800bbfa:	2320      	moveq	r3, #32
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	4770      	bx	lr
 800bc00:	2300      	movs	r3, #0
 800bc02:	e7e4      	b.n	800bbce <__hi0bits+0xa>

0800bc04 <__lo0bits>:
 800bc04:	6803      	ldr	r3, [r0, #0]
 800bc06:	f013 0207 	ands.w	r2, r3, #7
 800bc0a:	d00c      	beq.n	800bc26 <__lo0bits+0x22>
 800bc0c:	07d9      	lsls	r1, r3, #31
 800bc0e:	d422      	bmi.n	800bc56 <__lo0bits+0x52>
 800bc10:	079a      	lsls	r2, r3, #30
 800bc12:	bf49      	itett	mi
 800bc14:	085b      	lsrmi	r3, r3, #1
 800bc16:	089b      	lsrpl	r3, r3, #2
 800bc18:	6003      	strmi	r3, [r0, #0]
 800bc1a:	2201      	movmi	r2, #1
 800bc1c:	bf5c      	itt	pl
 800bc1e:	6003      	strpl	r3, [r0, #0]
 800bc20:	2202      	movpl	r2, #2
 800bc22:	4610      	mov	r0, r2
 800bc24:	4770      	bx	lr
 800bc26:	b299      	uxth	r1, r3
 800bc28:	b909      	cbnz	r1, 800bc2e <__lo0bits+0x2a>
 800bc2a:	0c1b      	lsrs	r3, r3, #16
 800bc2c:	2210      	movs	r2, #16
 800bc2e:	b2d9      	uxtb	r1, r3
 800bc30:	b909      	cbnz	r1, 800bc36 <__lo0bits+0x32>
 800bc32:	3208      	adds	r2, #8
 800bc34:	0a1b      	lsrs	r3, r3, #8
 800bc36:	0719      	lsls	r1, r3, #28
 800bc38:	bf04      	itt	eq
 800bc3a:	091b      	lsreq	r3, r3, #4
 800bc3c:	3204      	addeq	r2, #4
 800bc3e:	0799      	lsls	r1, r3, #30
 800bc40:	bf04      	itt	eq
 800bc42:	089b      	lsreq	r3, r3, #2
 800bc44:	3202      	addeq	r2, #2
 800bc46:	07d9      	lsls	r1, r3, #31
 800bc48:	d403      	bmi.n	800bc52 <__lo0bits+0x4e>
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	f102 0201 	add.w	r2, r2, #1
 800bc50:	d003      	beq.n	800bc5a <__lo0bits+0x56>
 800bc52:	6003      	str	r3, [r0, #0]
 800bc54:	e7e5      	b.n	800bc22 <__lo0bits+0x1e>
 800bc56:	2200      	movs	r2, #0
 800bc58:	e7e3      	b.n	800bc22 <__lo0bits+0x1e>
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	e7e1      	b.n	800bc22 <__lo0bits+0x1e>
	...

0800bc60 <__i2b>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	460c      	mov	r4, r1
 800bc64:	2101      	movs	r1, #1
 800bc66:	f7ff febb 	bl	800b9e0 <_Balloc>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	b928      	cbnz	r0, 800bc7a <__i2b+0x1a>
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <__i2b+0x24>)
 800bc70:	4805      	ldr	r0, [pc, #20]	; (800bc88 <__i2b+0x28>)
 800bc72:	f240 1145 	movw	r1, #325	; 0x145
 800bc76:	f001 fbff 	bl	800d478 <__assert_func>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	6144      	str	r4, [r0, #20]
 800bc7e:	6103      	str	r3, [r0, #16]
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	bf00      	nop
 800bc84:	08018f91 	.word	0x08018f91
 800bc88:	08018fa2 	.word	0x08018fa2

0800bc8c <__multiply>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	4691      	mov	r9, r2
 800bc92:	690a      	ldr	r2, [r1, #16]
 800bc94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	bfb8      	it	lt
 800bc9c:	460b      	movlt	r3, r1
 800bc9e:	460c      	mov	r4, r1
 800bca0:	bfbc      	itt	lt
 800bca2:	464c      	movlt	r4, r9
 800bca4:	4699      	movlt	r9, r3
 800bca6:	6927      	ldr	r7, [r4, #16]
 800bca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcac:	68a3      	ldr	r3, [r4, #8]
 800bcae:	6861      	ldr	r1, [r4, #4]
 800bcb0:	eb07 060a 	add.w	r6, r7, sl
 800bcb4:	42b3      	cmp	r3, r6
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	bfb8      	it	lt
 800bcba:	3101      	addlt	r1, #1
 800bcbc:	f7ff fe90 	bl	800b9e0 <_Balloc>
 800bcc0:	b930      	cbnz	r0, 800bcd0 <__multiply+0x44>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4b44      	ldr	r3, [pc, #272]	; (800bdd8 <__multiply+0x14c>)
 800bcc6:	4845      	ldr	r0, [pc, #276]	; (800bddc <__multiply+0x150>)
 800bcc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bccc:	f001 fbd4 	bl	800d478 <__assert_func>
 800bcd0:	f100 0514 	add.w	r5, r0, #20
 800bcd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcd8:	462b      	mov	r3, r5
 800bcda:	2200      	movs	r2, #0
 800bcdc:	4543      	cmp	r3, r8
 800bcde:	d321      	bcc.n	800bd24 <__multiply+0x98>
 800bce0:	f104 0314 	add.w	r3, r4, #20
 800bce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bce8:	f109 0314 	add.w	r3, r9, #20
 800bcec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcf0:	9202      	str	r2, [sp, #8]
 800bcf2:	1b3a      	subs	r2, r7, r4
 800bcf4:	3a15      	subs	r2, #21
 800bcf6:	f022 0203 	bic.w	r2, r2, #3
 800bcfa:	3204      	adds	r2, #4
 800bcfc:	f104 0115 	add.w	r1, r4, #21
 800bd00:	428f      	cmp	r7, r1
 800bd02:	bf38      	it	cc
 800bd04:	2204      	movcc	r2, #4
 800bd06:	9201      	str	r2, [sp, #4]
 800bd08:	9a02      	ldr	r2, [sp, #8]
 800bd0a:	9303      	str	r3, [sp, #12]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d80c      	bhi.n	800bd2a <__multiply+0x9e>
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	dd03      	ble.n	800bd1c <__multiply+0x90>
 800bd14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d05b      	beq.n	800bdd4 <__multiply+0x148>
 800bd1c:	6106      	str	r6, [r0, #16]
 800bd1e:	b005      	add	sp, #20
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	f843 2b04 	str.w	r2, [r3], #4
 800bd28:	e7d8      	b.n	800bcdc <__multiply+0x50>
 800bd2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd2e:	f1ba 0f00 	cmp.w	sl, #0
 800bd32:	d024      	beq.n	800bd7e <__multiply+0xf2>
 800bd34:	f104 0e14 	add.w	lr, r4, #20
 800bd38:	46a9      	mov	r9, r5
 800bd3a:	f04f 0c00 	mov.w	ip, #0
 800bd3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd42:	f8d9 1000 	ldr.w	r1, [r9]
 800bd46:	fa1f fb82 	uxth.w	fp, r2
 800bd4a:	b289      	uxth	r1, r1
 800bd4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd54:	f8d9 2000 	ldr.w	r2, [r9]
 800bd58:	4461      	add	r1, ip
 800bd5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd66:	b289      	uxth	r1, r1
 800bd68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd6c:	4577      	cmp	r7, lr
 800bd6e:	f849 1b04 	str.w	r1, [r9], #4
 800bd72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd76:	d8e2      	bhi.n	800bd3e <__multiply+0xb2>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	f845 c002 	str.w	ip, [r5, r2]
 800bd7e:	9a03      	ldr	r2, [sp, #12]
 800bd80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd84:	3304      	adds	r3, #4
 800bd86:	f1b9 0f00 	cmp.w	r9, #0
 800bd8a:	d021      	beq.n	800bdd0 <__multiply+0x144>
 800bd8c:	6829      	ldr	r1, [r5, #0]
 800bd8e:	f104 0c14 	add.w	ip, r4, #20
 800bd92:	46ae      	mov	lr, r5
 800bd94:	f04f 0a00 	mov.w	sl, #0
 800bd98:	f8bc b000 	ldrh.w	fp, [ip]
 800bd9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bda0:	fb09 220b 	mla	r2, r9, fp, r2
 800bda4:	4452      	add	r2, sl
 800bda6:	b289      	uxth	r1, r1
 800bda8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdac:	f84e 1b04 	str.w	r1, [lr], #4
 800bdb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bdb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdb8:	f8be 1000 	ldrh.w	r1, [lr]
 800bdbc:	fb09 110a 	mla	r1, r9, sl, r1
 800bdc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bdc4:	4567      	cmp	r7, ip
 800bdc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdca:	d8e5      	bhi.n	800bd98 <__multiply+0x10c>
 800bdcc:	9a01      	ldr	r2, [sp, #4]
 800bdce:	50a9      	str	r1, [r5, r2]
 800bdd0:	3504      	adds	r5, #4
 800bdd2:	e799      	b.n	800bd08 <__multiply+0x7c>
 800bdd4:	3e01      	subs	r6, #1
 800bdd6:	e79b      	b.n	800bd10 <__multiply+0x84>
 800bdd8:	08018f91 	.word	0x08018f91
 800bddc:	08018fa2 	.word	0x08018fa2

0800bde0 <__pow5mult>:
 800bde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde4:	4615      	mov	r5, r2
 800bde6:	f012 0203 	ands.w	r2, r2, #3
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	d007      	beq.n	800be00 <__pow5mult+0x20>
 800bdf0:	4c25      	ldr	r4, [pc, #148]	; (800be88 <__pow5mult+0xa8>)
 800bdf2:	3a01      	subs	r2, #1
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdfa:	f7ff fe53 	bl	800baa4 <__multadd>
 800bdfe:	4607      	mov	r7, r0
 800be00:	10ad      	asrs	r5, r5, #2
 800be02:	d03d      	beq.n	800be80 <__pow5mult+0xa0>
 800be04:	69f4      	ldr	r4, [r6, #28]
 800be06:	b97c      	cbnz	r4, 800be28 <__pow5mult+0x48>
 800be08:	2010      	movs	r0, #16
 800be0a:	f7ff fd35 	bl	800b878 <malloc>
 800be0e:	4602      	mov	r2, r0
 800be10:	61f0      	str	r0, [r6, #28]
 800be12:	b928      	cbnz	r0, 800be20 <__pow5mult+0x40>
 800be14:	4b1d      	ldr	r3, [pc, #116]	; (800be8c <__pow5mult+0xac>)
 800be16:	481e      	ldr	r0, [pc, #120]	; (800be90 <__pow5mult+0xb0>)
 800be18:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be1c:	f001 fb2c 	bl	800d478 <__assert_func>
 800be20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be24:	6004      	str	r4, [r0, #0]
 800be26:	60c4      	str	r4, [r0, #12]
 800be28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be30:	b94c      	cbnz	r4, 800be46 <__pow5mult+0x66>
 800be32:	f240 2171 	movw	r1, #625	; 0x271
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ff12 	bl	800bc60 <__i2b>
 800be3c:	2300      	movs	r3, #0
 800be3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be42:	4604      	mov	r4, r0
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	f04f 0900 	mov.w	r9, #0
 800be4a:	07eb      	lsls	r3, r5, #31
 800be4c:	d50a      	bpl.n	800be64 <__pow5mult+0x84>
 800be4e:	4639      	mov	r1, r7
 800be50:	4622      	mov	r2, r4
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ff1a 	bl	800bc8c <__multiply>
 800be58:	4639      	mov	r1, r7
 800be5a:	4680      	mov	r8, r0
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff fdff 	bl	800ba60 <_Bfree>
 800be62:	4647      	mov	r7, r8
 800be64:	106d      	asrs	r5, r5, #1
 800be66:	d00b      	beq.n	800be80 <__pow5mult+0xa0>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	b938      	cbnz	r0, 800be7c <__pow5mult+0x9c>
 800be6c:	4622      	mov	r2, r4
 800be6e:	4621      	mov	r1, r4
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff ff0b 	bl	800bc8c <__multiply>
 800be76:	6020      	str	r0, [r4, #0]
 800be78:	f8c0 9000 	str.w	r9, [r0]
 800be7c:	4604      	mov	r4, r0
 800be7e:	e7e4      	b.n	800be4a <__pow5mult+0x6a>
 800be80:	4638      	mov	r0, r7
 800be82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be86:	bf00      	nop
 800be88:	080190f0 	.word	0x080190f0
 800be8c:	08018f22 	.word	0x08018f22
 800be90:	08018fa2 	.word	0x08018fa2

0800be94 <__lshift>:
 800be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	460c      	mov	r4, r1
 800be9a:	6849      	ldr	r1, [r1, #4]
 800be9c:	6923      	ldr	r3, [r4, #16]
 800be9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	4607      	mov	r7, r0
 800bea6:	4691      	mov	r9, r2
 800bea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beac:	f108 0601 	add.w	r6, r8, #1
 800beb0:	42b3      	cmp	r3, r6
 800beb2:	db0b      	blt.n	800becc <__lshift+0x38>
 800beb4:	4638      	mov	r0, r7
 800beb6:	f7ff fd93 	bl	800b9e0 <_Balloc>
 800beba:	4605      	mov	r5, r0
 800bebc:	b948      	cbnz	r0, 800bed2 <__lshift+0x3e>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b28      	ldr	r3, [pc, #160]	; (800bf64 <__lshift+0xd0>)
 800bec2:	4829      	ldr	r0, [pc, #164]	; (800bf68 <__lshift+0xd4>)
 800bec4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bec8:	f001 fad6 	bl	800d478 <__assert_func>
 800becc:	3101      	adds	r1, #1
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	e7ee      	b.n	800beb0 <__lshift+0x1c>
 800bed2:	2300      	movs	r3, #0
 800bed4:	f100 0114 	add.w	r1, r0, #20
 800bed8:	f100 0210 	add.w	r2, r0, #16
 800bedc:	4618      	mov	r0, r3
 800bede:	4553      	cmp	r3, sl
 800bee0:	db33      	blt.n	800bf4a <__lshift+0xb6>
 800bee2:	6920      	ldr	r0, [r4, #16]
 800bee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bee8:	f104 0314 	add.w	r3, r4, #20
 800beec:	f019 091f 	ands.w	r9, r9, #31
 800bef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bef8:	d02b      	beq.n	800bf52 <__lshift+0xbe>
 800befa:	f1c9 0e20 	rsb	lr, r9, #32
 800befe:	468a      	mov	sl, r1
 800bf00:	2200      	movs	r2, #0
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	fa00 f009 	lsl.w	r0, r0, r9
 800bf08:	4310      	orrs	r0, r2
 800bf0a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf12:	459c      	cmp	ip, r3
 800bf14:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf18:	d8f3      	bhi.n	800bf02 <__lshift+0x6e>
 800bf1a:	ebac 0304 	sub.w	r3, ip, r4
 800bf1e:	3b15      	subs	r3, #21
 800bf20:	f023 0303 	bic.w	r3, r3, #3
 800bf24:	3304      	adds	r3, #4
 800bf26:	f104 0015 	add.w	r0, r4, #21
 800bf2a:	4584      	cmp	ip, r0
 800bf2c:	bf38      	it	cc
 800bf2e:	2304      	movcc	r3, #4
 800bf30:	50ca      	str	r2, [r1, r3]
 800bf32:	b10a      	cbz	r2, 800bf38 <__lshift+0xa4>
 800bf34:	f108 0602 	add.w	r6, r8, #2
 800bf38:	3e01      	subs	r6, #1
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	612e      	str	r6, [r5, #16]
 800bf3e:	4621      	mov	r1, r4
 800bf40:	f7ff fd8e 	bl	800ba60 <_Bfree>
 800bf44:	4628      	mov	r0, r5
 800bf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf4e:	3301      	adds	r3, #1
 800bf50:	e7c5      	b.n	800bede <__lshift+0x4a>
 800bf52:	3904      	subs	r1, #4
 800bf54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf58:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf5c:	459c      	cmp	ip, r3
 800bf5e:	d8f9      	bhi.n	800bf54 <__lshift+0xc0>
 800bf60:	e7ea      	b.n	800bf38 <__lshift+0xa4>
 800bf62:	bf00      	nop
 800bf64:	08018f91 	.word	0x08018f91
 800bf68:	08018fa2 	.word	0x08018fa2

0800bf6c <__mcmp>:
 800bf6c:	b530      	push	{r4, r5, lr}
 800bf6e:	6902      	ldr	r2, [r0, #16]
 800bf70:	690c      	ldr	r4, [r1, #16]
 800bf72:	1b12      	subs	r2, r2, r4
 800bf74:	d10e      	bne.n	800bf94 <__mcmp+0x28>
 800bf76:	f100 0314 	add.w	r3, r0, #20
 800bf7a:	3114      	adds	r1, #20
 800bf7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf8c:	42a5      	cmp	r5, r4
 800bf8e:	d003      	beq.n	800bf98 <__mcmp+0x2c>
 800bf90:	d305      	bcc.n	800bf9e <__mcmp+0x32>
 800bf92:	2201      	movs	r2, #1
 800bf94:	4610      	mov	r0, r2
 800bf96:	bd30      	pop	{r4, r5, pc}
 800bf98:	4283      	cmp	r3, r0
 800bf9a:	d3f3      	bcc.n	800bf84 <__mcmp+0x18>
 800bf9c:	e7fa      	b.n	800bf94 <__mcmp+0x28>
 800bf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa2:	e7f7      	b.n	800bf94 <__mcmp+0x28>

0800bfa4 <__mdiff>:
 800bfa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	4606      	mov	r6, r0
 800bfac:	4611      	mov	r1, r2
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4690      	mov	r8, r2
 800bfb2:	f7ff ffdb 	bl	800bf6c <__mcmp>
 800bfb6:	1e05      	subs	r5, r0, #0
 800bfb8:	d110      	bne.n	800bfdc <__mdiff+0x38>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7ff fd0f 	bl	800b9e0 <_Balloc>
 800bfc2:	b930      	cbnz	r0, 800bfd2 <__mdiff+0x2e>
 800bfc4:	4b3a      	ldr	r3, [pc, #232]	; (800c0b0 <__mdiff+0x10c>)
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	f240 2137 	movw	r1, #567	; 0x237
 800bfcc:	4839      	ldr	r0, [pc, #228]	; (800c0b4 <__mdiff+0x110>)
 800bfce:	f001 fa53 	bl	800d478 <__assert_func>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	bfa4      	itt	ge
 800bfde:	4643      	movge	r3, r8
 800bfe0:	46a0      	movge	r8, r4
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfe8:	bfa6      	itte	ge
 800bfea:	461c      	movge	r4, r3
 800bfec:	2500      	movge	r5, #0
 800bfee:	2501      	movlt	r5, #1
 800bff0:	f7ff fcf6 	bl	800b9e0 <_Balloc>
 800bff4:	b920      	cbnz	r0, 800c000 <__mdiff+0x5c>
 800bff6:	4b2e      	ldr	r3, [pc, #184]	; (800c0b0 <__mdiff+0x10c>)
 800bff8:	4602      	mov	r2, r0
 800bffa:	f240 2145 	movw	r1, #581	; 0x245
 800bffe:	e7e5      	b.n	800bfcc <__mdiff+0x28>
 800c000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c004:	6926      	ldr	r6, [r4, #16]
 800c006:	60c5      	str	r5, [r0, #12]
 800c008:	f104 0914 	add.w	r9, r4, #20
 800c00c:	f108 0514 	add.w	r5, r8, #20
 800c010:	f100 0e14 	add.w	lr, r0, #20
 800c014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c01c:	f108 0210 	add.w	r2, r8, #16
 800c020:	46f2      	mov	sl, lr
 800c022:	2100      	movs	r1, #0
 800c024:	f859 3b04 	ldr.w	r3, [r9], #4
 800c028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c02c:	fa11 f88b 	uxtah	r8, r1, fp
 800c030:	b299      	uxth	r1, r3
 800c032:	0c1b      	lsrs	r3, r3, #16
 800c034:	eba8 0801 	sub.w	r8, r8, r1
 800c038:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c03c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c040:	fa1f f888 	uxth.w	r8, r8
 800c044:	1419      	asrs	r1, r3, #16
 800c046:	454e      	cmp	r6, r9
 800c048:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c04c:	f84a 3b04 	str.w	r3, [sl], #4
 800c050:	d8e8      	bhi.n	800c024 <__mdiff+0x80>
 800c052:	1b33      	subs	r3, r6, r4
 800c054:	3b15      	subs	r3, #21
 800c056:	f023 0303 	bic.w	r3, r3, #3
 800c05a:	3304      	adds	r3, #4
 800c05c:	3415      	adds	r4, #21
 800c05e:	42a6      	cmp	r6, r4
 800c060:	bf38      	it	cc
 800c062:	2304      	movcc	r3, #4
 800c064:	441d      	add	r5, r3
 800c066:	4473      	add	r3, lr
 800c068:	469e      	mov	lr, r3
 800c06a:	462e      	mov	r6, r5
 800c06c:	4566      	cmp	r6, ip
 800c06e:	d30e      	bcc.n	800c08e <__mdiff+0xea>
 800c070:	f10c 0203 	add.w	r2, ip, #3
 800c074:	1b52      	subs	r2, r2, r5
 800c076:	f022 0203 	bic.w	r2, r2, #3
 800c07a:	3d03      	subs	r5, #3
 800c07c:	45ac      	cmp	ip, r5
 800c07e:	bf38      	it	cc
 800c080:	2200      	movcc	r2, #0
 800c082:	4413      	add	r3, r2
 800c084:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c088:	b17a      	cbz	r2, 800c0aa <__mdiff+0x106>
 800c08a:	6107      	str	r7, [r0, #16]
 800c08c:	e7a4      	b.n	800bfd8 <__mdiff+0x34>
 800c08e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c092:	fa11 f288 	uxtah	r2, r1, r8
 800c096:	1414      	asrs	r4, r2, #16
 800c098:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c09c:	b292      	uxth	r2, r2
 800c09e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0a2:	f84e 2b04 	str.w	r2, [lr], #4
 800c0a6:	1421      	asrs	r1, r4, #16
 800c0a8:	e7e0      	b.n	800c06c <__mdiff+0xc8>
 800c0aa:	3f01      	subs	r7, #1
 800c0ac:	e7ea      	b.n	800c084 <__mdiff+0xe0>
 800c0ae:	bf00      	nop
 800c0b0:	08018f91 	.word	0x08018f91
 800c0b4:	08018fa2 	.word	0x08018fa2

0800c0b8 <__ulp>:
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	ed8d 0b00 	vstr	d0, [sp]
 800c0be:	9a01      	ldr	r2, [sp, #4]
 800c0c0:	4b0f      	ldr	r3, [pc, #60]	; (800c100 <__ulp+0x48>)
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dc08      	bgt.n	800c0de <__ulp+0x26>
 800c0cc:	425b      	negs	r3, r3
 800c0ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c0d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0d6:	da04      	bge.n	800c0e2 <__ulp+0x2a>
 800c0d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0dc:	4113      	asrs	r3, r2
 800c0de:	2200      	movs	r2, #0
 800c0e0:	e008      	b.n	800c0f4 <__ulp+0x3c>
 800c0e2:	f1a2 0314 	sub.w	r3, r2, #20
 800c0e6:	2b1e      	cmp	r3, #30
 800c0e8:	bfda      	itte	le
 800c0ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c0ee:	40da      	lsrle	r2, r3
 800c0f0:	2201      	movgt	r2, #1
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	ec41 0b10 	vmov	d0, r0, r1
 800c0fc:	b002      	add	sp, #8
 800c0fe:	4770      	bx	lr
 800c100:	7ff00000 	.word	0x7ff00000

0800c104 <__b2d>:
 800c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c108:	6906      	ldr	r6, [r0, #16]
 800c10a:	f100 0814 	add.w	r8, r0, #20
 800c10e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c112:	1f37      	subs	r7, r6, #4
 800c114:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c118:	4610      	mov	r0, r2
 800c11a:	f7ff fd53 	bl	800bbc4 <__hi0bits>
 800c11e:	f1c0 0320 	rsb	r3, r0, #32
 800c122:	280a      	cmp	r0, #10
 800c124:	600b      	str	r3, [r1, #0]
 800c126:	491b      	ldr	r1, [pc, #108]	; (800c194 <__b2d+0x90>)
 800c128:	dc15      	bgt.n	800c156 <__b2d+0x52>
 800c12a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c12e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c132:	45b8      	cmp	r8, r7
 800c134:	ea43 0501 	orr.w	r5, r3, r1
 800c138:	bf34      	ite	cc
 800c13a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c13e:	2300      	movcs	r3, #0
 800c140:	3015      	adds	r0, #21
 800c142:	fa02 f000 	lsl.w	r0, r2, r0
 800c146:	fa23 f30c 	lsr.w	r3, r3, ip
 800c14a:	4303      	orrs	r3, r0
 800c14c:	461c      	mov	r4, r3
 800c14e:	ec45 4b10 	vmov	d0, r4, r5
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c156:	45b8      	cmp	r8, r7
 800c158:	bf3a      	itte	cc
 800c15a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c15e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c162:	2300      	movcs	r3, #0
 800c164:	380b      	subs	r0, #11
 800c166:	d012      	beq.n	800c18e <__b2d+0x8a>
 800c168:	f1c0 0120 	rsb	r1, r0, #32
 800c16c:	fa23 f401 	lsr.w	r4, r3, r1
 800c170:	4082      	lsls	r2, r0
 800c172:	4322      	orrs	r2, r4
 800c174:	4547      	cmp	r7, r8
 800c176:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c17a:	bf8c      	ite	hi
 800c17c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c180:	2200      	movls	r2, #0
 800c182:	4083      	lsls	r3, r0
 800c184:	40ca      	lsrs	r2, r1
 800c186:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c18a:	4313      	orrs	r3, r2
 800c18c:	e7de      	b.n	800c14c <__b2d+0x48>
 800c18e:	ea42 0501 	orr.w	r5, r2, r1
 800c192:	e7db      	b.n	800c14c <__b2d+0x48>
 800c194:	3ff00000 	.word	0x3ff00000

0800c198 <__d2b>:
 800c198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c19c:	460f      	mov	r7, r1
 800c19e:	2101      	movs	r1, #1
 800c1a0:	ec59 8b10 	vmov	r8, r9, d0
 800c1a4:	4616      	mov	r6, r2
 800c1a6:	f7ff fc1b 	bl	800b9e0 <_Balloc>
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	b930      	cbnz	r0, 800c1bc <__d2b+0x24>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	4b24      	ldr	r3, [pc, #144]	; (800c244 <__d2b+0xac>)
 800c1b2:	4825      	ldr	r0, [pc, #148]	; (800c248 <__d2b+0xb0>)
 800c1b4:	f240 310f 	movw	r1, #783	; 0x30f
 800c1b8:	f001 f95e 	bl	800d478 <__assert_func>
 800c1bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1c4:	bb2d      	cbnz	r5, 800c212 <__d2b+0x7a>
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	f1b8 0300 	subs.w	r3, r8, #0
 800c1cc:	d026      	beq.n	800c21c <__d2b+0x84>
 800c1ce:	4668      	mov	r0, sp
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	f7ff fd17 	bl	800bc04 <__lo0bits>
 800c1d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c1da:	b1e8      	cbz	r0, 800c218 <__d2b+0x80>
 800c1dc:	f1c0 0320 	rsb	r3, r0, #32
 800c1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e4:	430b      	orrs	r3, r1
 800c1e6:	40c2      	lsrs	r2, r0
 800c1e8:	6163      	str	r3, [r4, #20]
 800c1ea:	9201      	str	r2, [sp, #4]
 800c1ec:	9b01      	ldr	r3, [sp, #4]
 800c1ee:	61a3      	str	r3, [r4, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bf14      	ite	ne
 800c1f4:	2202      	movne	r2, #2
 800c1f6:	2201      	moveq	r2, #1
 800c1f8:	6122      	str	r2, [r4, #16]
 800c1fa:	b1bd      	cbz	r5, 800c22c <__d2b+0x94>
 800c1fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c200:	4405      	add	r5, r0
 800c202:	603d      	str	r5, [r7, #0]
 800c204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c208:	6030      	str	r0, [r6, #0]
 800c20a:	4620      	mov	r0, r4
 800c20c:	b003      	add	sp, #12
 800c20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c216:	e7d6      	b.n	800c1c6 <__d2b+0x2e>
 800c218:	6161      	str	r1, [r4, #20]
 800c21a:	e7e7      	b.n	800c1ec <__d2b+0x54>
 800c21c:	a801      	add	r0, sp, #4
 800c21e:	f7ff fcf1 	bl	800bc04 <__lo0bits>
 800c222:	9b01      	ldr	r3, [sp, #4]
 800c224:	6163      	str	r3, [r4, #20]
 800c226:	3020      	adds	r0, #32
 800c228:	2201      	movs	r2, #1
 800c22a:	e7e5      	b.n	800c1f8 <__d2b+0x60>
 800c22c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c234:	6038      	str	r0, [r7, #0]
 800c236:	6918      	ldr	r0, [r3, #16]
 800c238:	f7ff fcc4 	bl	800bbc4 <__hi0bits>
 800c23c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c240:	e7e2      	b.n	800c208 <__d2b+0x70>
 800c242:	bf00      	nop
 800c244:	08018f91 	.word	0x08018f91
 800c248:	08018fa2 	.word	0x08018fa2

0800c24c <__ratio>:
 800c24c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	4688      	mov	r8, r1
 800c252:	4669      	mov	r1, sp
 800c254:	4681      	mov	r9, r0
 800c256:	f7ff ff55 	bl	800c104 <__b2d>
 800c25a:	a901      	add	r1, sp, #4
 800c25c:	4640      	mov	r0, r8
 800c25e:	ec55 4b10 	vmov	r4, r5, d0
 800c262:	ee10 aa10 	vmov	sl, s0
 800c266:	f7ff ff4d 	bl	800c104 <__b2d>
 800c26a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c26e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c272:	1ad2      	subs	r2, r2, r3
 800c274:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c278:	1a5b      	subs	r3, r3, r1
 800c27a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c27e:	ec57 6b10 	vmov	r6, r7, d0
 800c282:	2b00      	cmp	r3, #0
 800c284:	bfd6      	itet	le
 800c286:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c28a:	462a      	movgt	r2, r5
 800c28c:	463a      	movle	r2, r7
 800c28e:	46ab      	mov	fp, r5
 800c290:	bfd6      	itet	le
 800c292:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c296:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c29a:	ee00 3a90 	vmovle	s1, r3
 800c29e:	ec4b ab17 	vmov	d7, sl, fp
 800c2a2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c2a6:	b003      	add	sp, #12
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2ac <__copybits>:
 800c2ac:	3901      	subs	r1, #1
 800c2ae:	b570      	push	{r4, r5, r6, lr}
 800c2b0:	1149      	asrs	r1, r1, #5
 800c2b2:	6914      	ldr	r4, [r2, #16]
 800c2b4:	3101      	adds	r1, #1
 800c2b6:	f102 0314 	add.w	r3, r2, #20
 800c2ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2c2:	1f05      	subs	r5, r0, #4
 800c2c4:	42a3      	cmp	r3, r4
 800c2c6:	d30c      	bcc.n	800c2e2 <__copybits+0x36>
 800c2c8:	1aa3      	subs	r3, r4, r2
 800c2ca:	3b11      	subs	r3, #17
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	3211      	adds	r2, #17
 800c2d2:	42a2      	cmp	r2, r4
 800c2d4:	bf88      	it	hi
 800c2d6:	2300      	movhi	r3, #0
 800c2d8:	4418      	add	r0, r3
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4288      	cmp	r0, r1
 800c2de:	d305      	bcc.n	800c2ec <__copybits+0x40>
 800c2e0:	bd70      	pop	{r4, r5, r6, pc}
 800c2e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2ea:	e7eb      	b.n	800c2c4 <__copybits+0x18>
 800c2ec:	f840 3b04 	str.w	r3, [r0], #4
 800c2f0:	e7f4      	b.n	800c2dc <__copybits+0x30>

0800c2f2 <__any_on>:
 800c2f2:	f100 0214 	add.w	r2, r0, #20
 800c2f6:	6900      	ldr	r0, [r0, #16]
 800c2f8:	114b      	asrs	r3, r1, #5
 800c2fa:	4298      	cmp	r0, r3
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	db11      	blt.n	800c324 <__any_on+0x32>
 800c300:	dd0a      	ble.n	800c318 <__any_on+0x26>
 800c302:	f011 011f 	ands.w	r1, r1, #31
 800c306:	d007      	beq.n	800c318 <__any_on+0x26>
 800c308:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c30c:	fa24 f001 	lsr.w	r0, r4, r1
 800c310:	fa00 f101 	lsl.w	r1, r0, r1
 800c314:	428c      	cmp	r4, r1
 800c316:	d10b      	bne.n	800c330 <__any_on+0x3e>
 800c318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d803      	bhi.n	800c328 <__any_on+0x36>
 800c320:	2000      	movs	r0, #0
 800c322:	bd10      	pop	{r4, pc}
 800c324:	4603      	mov	r3, r0
 800c326:	e7f7      	b.n	800c318 <__any_on+0x26>
 800c328:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d0f5      	beq.n	800c31c <__any_on+0x2a>
 800c330:	2001      	movs	r0, #1
 800c332:	e7f6      	b.n	800c322 <__any_on+0x30>

0800c334 <sulp>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	4604      	mov	r4, r0
 800c338:	460d      	mov	r5, r1
 800c33a:	4616      	mov	r6, r2
 800c33c:	ec45 4b10 	vmov	d0, r4, r5
 800c340:	f7ff feba 	bl	800c0b8 <__ulp>
 800c344:	b17e      	cbz	r6, 800c366 <sulp+0x32>
 800c346:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c34a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd09      	ble.n	800c366 <sulp+0x32>
 800c352:	051b      	lsls	r3, r3, #20
 800c354:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c358:	2000      	movs	r0, #0
 800c35a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c35e:	ec41 0b17 	vmov	d7, r0, r1
 800c362:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c366:	bd70      	pop	{r4, r5, r6, pc}

0800c368 <_strtod_l>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	ed2d 8b0e 	vpush	{d8-d14}
 800c370:	b097      	sub	sp, #92	; 0x5c
 800c372:	4604      	mov	r4, r0
 800c374:	920d      	str	r2, [sp, #52]	; 0x34
 800c376:	2200      	movs	r2, #0
 800c378:	9212      	str	r2, [sp, #72]	; 0x48
 800c37a:	468a      	mov	sl, r1
 800c37c:	f04f 0800 	mov.w	r8, #0
 800c380:	f04f 0900 	mov.w	r9, #0
 800c384:	460a      	mov	r2, r1
 800c386:	9211      	str	r2, [sp, #68]	; 0x44
 800c388:	7811      	ldrb	r1, [r2, #0]
 800c38a:	292b      	cmp	r1, #43	; 0x2b
 800c38c:	d04c      	beq.n	800c428 <_strtod_l+0xc0>
 800c38e:	d839      	bhi.n	800c404 <_strtod_l+0x9c>
 800c390:	290d      	cmp	r1, #13
 800c392:	d833      	bhi.n	800c3fc <_strtod_l+0x94>
 800c394:	2908      	cmp	r1, #8
 800c396:	d833      	bhi.n	800c400 <_strtod_l+0x98>
 800c398:	2900      	cmp	r1, #0
 800c39a:	d03c      	beq.n	800c416 <_strtod_l+0xae>
 800c39c:	2200      	movs	r2, #0
 800c39e:	9208      	str	r2, [sp, #32]
 800c3a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c3a2:	7832      	ldrb	r2, [r6, #0]
 800c3a4:	2a30      	cmp	r2, #48	; 0x30
 800c3a6:	f040 80b8 	bne.w	800c51a <_strtod_l+0x1b2>
 800c3aa:	7872      	ldrb	r2, [r6, #1]
 800c3ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c3b0:	2a58      	cmp	r2, #88	; 0x58
 800c3b2:	d170      	bne.n	800c496 <_strtod_l+0x12e>
 800c3b4:	9302      	str	r3, [sp, #8]
 800c3b6:	9b08      	ldr	r3, [sp, #32]
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	ab12      	add	r3, sp, #72	; 0x48
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	4a91      	ldr	r2, [pc, #580]	; (800c604 <_strtod_l+0x29c>)
 800c3c0:	ab13      	add	r3, sp, #76	; 0x4c
 800c3c2:	a911      	add	r1, sp, #68	; 0x44
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f001 f8f3 	bl	800d5b0 <__gethex>
 800c3ca:	f010 070f 	ands.w	r7, r0, #15
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	d005      	beq.n	800c3de <_strtod_l+0x76>
 800c3d2:	2f06      	cmp	r7, #6
 800c3d4:	d12a      	bne.n	800c42c <_strtod_l+0xc4>
 800c3d6:	3601      	adds	r6, #1
 800c3d8:	2300      	movs	r3, #0
 800c3da:	9611      	str	r6, [sp, #68]	; 0x44
 800c3dc:	9308      	str	r3, [sp, #32]
 800c3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f040 8555 	bne.w	800ce90 <_strtod_l+0xb28>
 800c3e6:	9b08      	ldr	r3, [sp, #32]
 800c3e8:	ec49 8b10 	vmov	d0, r8, r9
 800c3ec:	b1cb      	cbz	r3, 800c422 <_strtod_l+0xba>
 800c3ee:	eeb1 0b40 	vneg.f64	d0, d0
 800c3f2:	b017      	add	sp, #92	; 0x5c
 800c3f4:	ecbd 8b0e 	vpop	{d8-d14}
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	2920      	cmp	r1, #32
 800c3fe:	d1cd      	bne.n	800c39c <_strtod_l+0x34>
 800c400:	3201      	adds	r2, #1
 800c402:	e7c0      	b.n	800c386 <_strtod_l+0x1e>
 800c404:	292d      	cmp	r1, #45	; 0x2d
 800c406:	d1c9      	bne.n	800c39c <_strtod_l+0x34>
 800c408:	2101      	movs	r1, #1
 800c40a:	9108      	str	r1, [sp, #32]
 800c40c:	1c51      	adds	r1, r2, #1
 800c40e:	9111      	str	r1, [sp, #68]	; 0x44
 800c410:	7852      	ldrb	r2, [r2, #1]
 800c412:	2a00      	cmp	r2, #0
 800c414:	d1c4      	bne.n	800c3a0 <_strtod_l+0x38>
 800c416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c418:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f040 8535 	bne.w	800ce8c <_strtod_l+0xb24>
 800c422:	ec49 8b10 	vmov	d0, r8, r9
 800c426:	e7e4      	b.n	800c3f2 <_strtod_l+0x8a>
 800c428:	2100      	movs	r1, #0
 800c42a:	e7ee      	b.n	800c40a <_strtod_l+0xa2>
 800c42c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c42e:	b13a      	cbz	r2, 800c440 <_strtod_l+0xd8>
 800c430:	2135      	movs	r1, #53	; 0x35
 800c432:	a814      	add	r0, sp, #80	; 0x50
 800c434:	f7ff ff3a 	bl	800c2ac <__copybits>
 800c438:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7ff fb10 	bl	800ba60 <_Bfree>
 800c440:	1e7b      	subs	r3, r7, #1
 800c442:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c444:	2b04      	cmp	r3, #4
 800c446:	d806      	bhi.n	800c456 <_strtod_l+0xee>
 800c448:	e8df f003 	tbb	[pc, r3]
 800c44c:	201d0314 	.word	0x201d0314
 800c450:	14          	.byte	0x14
 800c451:	00          	.byte	0x00
 800c452:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800c456:	05eb      	lsls	r3, r5, #23
 800c458:	bf48      	it	mi
 800c45a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c45e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c462:	0d1b      	lsrs	r3, r3, #20
 800c464:	051b      	lsls	r3, r3, #20
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1b9      	bne.n	800c3de <_strtod_l+0x76>
 800c46a:	f7fe fb83 	bl	800ab74 <__errno>
 800c46e:	2322      	movs	r3, #34	; 0x22
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	e7b4      	b.n	800c3de <_strtod_l+0x76>
 800c474:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800c478:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c47c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c480:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c484:	e7e7      	b.n	800c456 <_strtod_l+0xee>
 800c486:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c60c <_strtod_l+0x2a4>
 800c48a:	e7e4      	b.n	800c456 <_strtod_l+0xee>
 800c48c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c490:	f04f 38ff 	mov.w	r8, #4294967295
 800c494:	e7df      	b.n	800c456 <_strtod_l+0xee>
 800c496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	9211      	str	r2, [sp, #68]	; 0x44
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	2b30      	cmp	r3, #48	; 0x30
 800c4a0:	d0f9      	beq.n	800c496 <_strtod_l+0x12e>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d09b      	beq.n	800c3de <_strtod_l+0x76>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	9306      	str	r3, [sp, #24]
 800c4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9305      	str	r3, [sp, #20]
 800c4b2:	9307      	str	r3, [sp, #28]
 800c4b4:	461e      	mov	r6, r3
 800c4b6:	220a      	movs	r2, #10
 800c4b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c4ba:	7805      	ldrb	r5, [r0, #0]
 800c4bc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c4c0:	b2d9      	uxtb	r1, r3
 800c4c2:	2909      	cmp	r1, #9
 800c4c4:	d92b      	bls.n	800c51e <_strtod_l+0x1b6>
 800c4c6:	4950      	ldr	r1, [pc, #320]	; (800c608 <_strtod_l+0x2a0>)
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f000 ffa9 	bl	800d420 <strncmp>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d035      	beq.n	800c53e <_strtod_l+0x1d6>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	462a      	mov	r2, r5
 800c4d6:	4633      	mov	r3, r6
 800c4d8:	4683      	mov	fp, r0
 800c4da:	4601      	mov	r1, r0
 800c4dc:	2a65      	cmp	r2, #101	; 0x65
 800c4de:	d001      	beq.n	800c4e4 <_strtod_l+0x17c>
 800c4e0:	2a45      	cmp	r2, #69	; 0x45
 800c4e2:	d118      	bne.n	800c516 <_strtod_l+0x1ae>
 800c4e4:	b91b      	cbnz	r3, 800c4ee <_strtod_l+0x186>
 800c4e6:	9b06      	ldr	r3, [sp, #24]
 800c4e8:	4303      	orrs	r3, r0
 800c4ea:	d094      	beq.n	800c416 <_strtod_l+0xae>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c4f2:	f10a 0201 	add.w	r2, sl, #1
 800c4f6:	9211      	str	r2, [sp, #68]	; 0x44
 800c4f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c4fc:	2a2b      	cmp	r2, #43	; 0x2b
 800c4fe:	d075      	beq.n	800c5ec <_strtod_l+0x284>
 800c500:	2a2d      	cmp	r2, #45	; 0x2d
 800c502:	d07b      	beq.n	800c5fc <_strtod_l+0x294>
 800c504:	f04f 0e00 	mov.w	lr, #0
 800c508:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c50c:	2d09      	cmp	r5, #9
 800c50e:	f240 8083 	bls.w	800c618 <_strtod_l+0x2b0>
 800c512:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c516:	2500      	movs	r5, #0
 800c518:	e09e      	b.n	800c658 <_strtod_l+0x2f0>
 800c51a:	2300      	movs	r3, #0
 800c51c:	e7c4      	b.n	800c4a8 <_strtod_l+0x140>
 800c51e:	2e08      	cmp	r6, #8
 800c520:	bfd5      	itete	le
 800c522:	9907      	ldrle	r1, [sp, #28]
 800c524:	9905      	ldrgt	r1, [sp, #20]
 800c526:	fb02 3301 	mlale	r3, r2, r1, r3
 800c52a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c52e:	f100 0001 	add.w	r0, r0, #1
 800c532:	bfd4      	ite	le
 800c534:	9307      	strle	r3, [sp, #28]
 800c536:	9305      	strgt	r3, [sp, #20]
 800c538:	3601      	adds	r6, #1
 800c53a:	9011      	str	r0, [sp, #68]	; 0x44
 800c53c:	e7bc      	b.n	800c4b8 <_strtod_l+0x150>
 800c53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c540:	1c5a      	adds	r2, r3, #1
 800c542:	9211      	str	r2, [sp, #68]	; 0x44
 800c544:	785a      	ldrb	r2, [r3, #1]
 800c546:	b3ae      	cbz	r6, 800c5b4 <_strtod_l+0x24c>
 800c548:	4683      	mov	fp, r0
 800c54a:	4633      	mov	r3, r6
 800c54c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c550:	2909      	cmp	r1, #9
 800c552:	d912      	bls.n	800c57a <_strtod_l+0x212>
 800c554:	2101      	movs	r1, #1
 800c556:	e7c1      	b.n	800c4dc <_strtod_l+0x174>
 800c558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	9211      	str	r2, [sp, #68]	; 0x44
 800c55e:	785a      	ldrb	r2, [r3, #1]
 800c560:	3001      	adds	r0, #1
 800c562:	2a30      	cmp	r2, #48	; 0x30
 800c564:	d0f8      	beq.n	800c558 <_strtod_l+0x1f0>
 800c566:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c56a:	2b08      	cmp	r3, #8
 800c56c:	f200 8495 	bhi.w	800ce9a <_strtod_l+0xb32>
 800c570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c572:	9309      	str	r3, [sp, #36]	; 0x24
 800c574:	4683      	mov	fp, r0
 800c576:	2000      	movs	r0, #0
 800c578:	4603      	mov	r3, r0
 800c57a:	3a30      	subs	r2, #48	; 0x30
 800c57c:	f100 0101 	add.w	r1, r0, #1
 800c580:	d012      	beq.n	800c5a8 <_strtod_l+0x240>
 800c582:	448b      	add	fp, r1
 800c584:	eb00 0c03 	add.w	ip, r0, r3
 800c588:	4619      	mov	r1, r3
 800c58a:	250a      	movs	r5, #10
 800c58c:	4561      	cmp	r1, ip
 800c58e:	d113      	bne.n	800c5b8 <_strtod_l+0x250>
 800c590:	1819      	adds	r1, r3, r0
 800c592:	2908      	cmp	r1, #8
 800c594:	f103 0301 	add.w	r3, r3, #1
 800c598:	4403      	add	r3, r0
 800c59a:	dc1b      	bgt.n	800c5d4 <_strtod_l+0x26c>
 800c59c:	9807      	ldr	r0, [sp, #28]
 800c59e:	210a      	movs	r1, #10
 800c5a0:	fb01 2200 	mla	r2, r1, r0, r2
 800c5a4:	9207      	str	r2, [sp, #28]
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c5aa:	1c50      	adds	r0, r2, #1
 800c5ac:	9011      	str	r0, [sp, #68]	; 0x44
 800c5ae:	7852      	ldrb	r2, [r2, #1]
 800c5b0:	4608      	mov	r0, r1
 800c5b2:	e7cb      	b.n	800c54c <_strtod_l+0x1e4>
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	e7d4      	b.n	800c562 <_strtod_l+0x1fa>
 800c5b8:	2908      	cmp	r1, #8
 800c5ba:	f101 0101 	add.w	r1, r1, #1
 800c5be:	dc03      	bgt.n	800c5c8 <_strtod_l+0x260>
 800c5c0:	9f07      	ldr	r7, [sp, #28]
 800c5c2:	436f      	muls	r7, r5
 800c5c4:	9707      	str	r7, [sp, #28]
 800c5c6:	e7e1      	b.n	800c58c <_strtod_l+0x224>
 800c5c8:	2910      	cmp	r1, #16
 800c5ca:	bfde      	ittt	le
 800c5cc:	9f05      	ldrle	r7, [sp, #20]
 800c5ce:	436f      	mulle	r7, r5
 800c5d0:	9705      	strle	r7, [sp, #20]
 800c5d2:	e7db      	b.n	800c58c <_strtod_l+0x224>
 800c5d4:	2b10      	cmp	r3, #16
 800c5d6:	bfdf      	itttt	le
 800c5d8:	9805      	ldrle	r0, [sp, #20]
 800c5da:	210a      	movle	r1, #10
 800c5dc:	fb01 2200 	mlale	r2, r1, r0, r2
 800c5e0:	9205      	strle	r2, [sp, #20]
 800c5e2:	e7e0      	b.n	800c5a6 <_strtod_l+0x23e>
 800c5e4:	f04f 0b00 	mov.w	fp, #0
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	e77c      	b.n	800c4e6 <_strtod_l+0x17e>
 800c5ec:	f04f 0e00 	mov.w	lr, #0
 800c5f0:	f10a 0202 	add.w	r2, sl, #2
 800c5f4:	9211      	str	r2, [sp, #68]	; 0x44
 800c5f6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c5fa:	e785      	b.n	800c508 <_strtod_l+0x1a0>
 800c5fc:	f04f 0e01 	mov.w	lr, #1
 800c600:	e7f6      	b.n	800c5f0 <_strtod_l+0x288>
 800c602:	bf00      	nop
 800c604:	08019100 	.word	0x08019100
 800c608:	080190fc 	.word	0x080190fc
 800c60c:	7ff00000 	.word	0x7ff00000
 800c610:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c612:	1c55      	adds	r5, r2, #1
 800c614:	9511      	str	r5, [sp, #68]	; 0x44
 800c616:	7852      	ldrb	r2, [r2, #1]
 800c618:	2a30      	cmp	r2, #48	; 0x30
 800c61a:	d0f9      	beq.n	800c610 <_strtod_l+0x2a8>
 800c61c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c620:	2d08      	cmp	r5, #8
 800c622:	f63f af78 	bhi.w	800c516 <_strtod_l+0x1ae>
 800c626:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c62a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c62c:	920a      	str	r2, [sp, #40]	; 0x28
 800c62e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c630:	1c55      	adds	r5, r2, #1
 800c632:	9511      	str	r5, [sp, #68]	; 0x44
 800c634:	7852      	ldrb	r2, [r2, #1]
 800c636:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c63a:	2f09      	cmp	r7, #9
 800c63c:	d937      	bls.n	800c6ae <_strtod_l+0x346>
 800c63e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c640:	1bed      	subs	r5, r5, r7
 800c642:	2d08      	cmp	r5, #8
 800c644:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c648:	dc02      	bgt.n	800c650 <_strtod_l+0x2e8>
 800c64a:	4565      	cmp	r5, ip
 800c64c:	bfa8      	it	ge
 800c64e:	4665      	movge	r5, ip
 800c650:	f1be 0f00 	cmp.w	lr, #0
 800c654:	d000      	beq.n	800c658 <_strtod_l+0x2f0>
 800c656:	426d      	negs	r5, r5
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d14d      	bne.n	800c6f8 <_strtod_l+0x390>
 800c65c:	9b06      	ldr	r3, [sp, #24]
 800c65e:	4303      	orrs	r3, r0
 800c660:	f47f aebd 	bne.w	800c3de <_strtod_l+0x76>
 800c664:	2900      	cmp	r1, #0
 800c666:	f47f aed6 	bne.w	800c416 <_strtod_l+0xae>
 800c66a:	2a69      	cmp	r2, #105	; 0x69
 800c66c:	d027      	beq.n	800c6be <_strtod_l+0x356>
 800c66e:	dc24      	bgt.n	800c6ba <_strtod_l+0x352>
 800c670:	2a49      	cmp	r2, #73	; 0x49
 800c672:	d024      	beq.n	800c6be <_strtod_l+0x356>
 800c674:	2a4e      	cmp	r2, #78	; 0x4e
 800c676:	f47f aece 	bne.w	800c416 <_strtod_l+0xae>
 800c67a:	4995      	ldr	r1, [pc, #596]	; (800c8d0 <_strtod_l+0x568>)
 800c67c:	a811      	add	r0, sp, #68	; 0x44
 800c67e:	f001 f9d7 	bl	800da30 <__match>
 800c682:	2800      	cmp	r0, #0
 800c684:	f43f aec7 	beq.w	800c416 <_strtod_l+0xae>
 800c688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b28      	cmp	r3, #40	; 0x28
 800c68e:	d12d      	bne.n	800c6ec <_strtod_l+0x384>
 800c690:	4990      	ldr	r1, [pc, #576]	; (800c8d4 <_strtod_l+0x56c>)
 800c692:	aa14      	add	r2, sp, #80	; 0x50
 800c694:	a811      	add	r0, sp, #68	; 0x44
 800c696:	f001 f9df 	bl	800da58 <__hexnan>
 800c69a:	2805      	cmp	r0, #5
 800c69c:	d126      	bne.n	800c6ec <_strtod_l+0x384>
 800c69e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c6a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c6a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c6ac:	e697      	b.n	800c3de <_strtod_l+0x76>
 800c6ae:	250a      	movs	r5, #10
 800c6b0:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c6b4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c6b8:	e7b9      	b.n	800c62e <_strtod_l+0x2c6>
 800c6ba:	2a6e      	cmp	r2, #110	; 0x6e
 800c6bc:	e7db      	b.n	800c676 <_strtod_l+0x30e>
 800c6be:	4986      	ldr	r1, [pc, #536]	; (800c8d8 <_strtod_l+0x570>)
 800c6c0:	a811      	add	r0, sp, #68	; 0x44
 800c6c2:	f001 f9b5 	bl	800da30 <__match>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f aea5 	beq.w	800c416 <_strtod_l+0xae>
 800c6cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6ce:	4983      	ldr	r1, [pc, #524]	; (800c8dc <_strtod_l+0x574>)
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	a811      	add	r0, sp, #68	; 0x44
 800c6d4:	9311      	str	r3, [sp, #68]	; 0x44
 800c6d6:	f001 f9ab 	bl	800da30 <__match>
 800c6da:	b910      	cbnz	r0, 800c6e2 <_strtod_l+0x37a>
 800c6dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6de:	3301      	adds	r3, #1
 800c6e0:	9311      	str	r3, [sp, #68]	; 0x44
 800c6e2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c8f0 <_strtod_l+0x588>
 800c6e6:	f04f 0800 	mov.w	r8, #0
 800c6ea:	e678      	b.n	800c3de <_strtod_l+0x76>
 800c6ec:	487c      	ldr	r0, [pc, #496]	; (800c8e0 <_strtod_l+0x578>)
 800c6ee:	f000 febb 	bl	800d468 <nan>
 800c6f2:	ec59 8b10 	vmov	r8, r9, d0
 800c6f6:	e672      	b.n	800c3de <_strtod_l+0x76>
 800c6f8:	eddd 7a07 	vldr	s15, [sp, #28]
 800c6fc:	eba5 020b 	sub.w	r2, r5, fp
 800c700:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c704:	2e00      	cmp	r6, #0
 800c706:	bf08      	it	eq
 800c708:	461e      	moveq	r6, r3
 800c70a:	2b10      	cmp	r3, #16
 800c70c:	9206      	str	r2, [sp, #24]
 800c70e:	461a      	mov	r2, r3
 800c710:	bfa8      	it	ge
 800c712:	2210      	movge	r2, #16
 800c714:	2b09      	cmp	r3, #9
 800c716:	ec59 8b17 	vmov	r8, r9, d7
 800c71a:	dd0c      	ble.n	800c736 <_strtod_l+0x3ce>
 800c71c:	4971      	ldr	r1, [pc, #452]	; (800c8e4 <_strtod_l+0x57c>)
 800c71e:	eddd 6a05 	vldr	s13, [sp, #20]
 800c722:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c726:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c72a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c72e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c732:	ec59 8b16 	vmov	r8, r9, d6
 800c736:	2b0f      	cmp	r3, #15
 800c738:	dc37      	bgt.n	800c7aa <_strtod_l+0x442>
 800c73a:	9906      	ldr	r1, [sp, #24]
 800c73c:	2900      	cmp	r1, #0
 800c73e:	f43f ae4e 	beq.w	800c3de <_strtod_l+0x76>
 800c742:	dd23      	ble.n	800c78c <_strtod_l+0x424>
 800c744:	2916      	cmp	r1, #22
 800c746:	dc0b      	bgt.n	800c760 <_strtod_l+0x3f8>
 800c748:	4b66      	ldr	r3, [pc, #408]	; (800c8e4 <_strtod_l+0x57c>)
 800c74a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c74e:	ed93 7b00 	vldr	d7, [r3]
 800c752:	ec49 8b16 	vmov	d6, r8, r9
 800c756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c75a:	ec59 8b17 	vmov	r8, r9, d7
 800c75e:	e63e      	b.n	800c3de <_strtod_l+0x76>
 800c760:	9806      	ldr	r0, [sp, #24]
 800c762:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c766:	4281      	cmp	r1, r0
 800c768:	db1f      	blt.n	800c7aa <_strtod_l+0x442>
 800c76a:	4a5e      	ldr	r2, [pc, #376]	; (800c8e4 <_strtod_l+0x57c>)
 800c76c:	f1c3 030f 	rsb	r3, r3, #15
 800c770:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c774:	ed91 7b00 	vldr	d7, [r1]
 800c778:	ec49 8b16 	vmov	d6, r8, r9
 800c77c:	1ac3      	subs	r3, r0, r3
 800c77e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c782:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c786:	ed92 6b00 	vldr	d6, [r2]
 800c78a:	e7e4      	b.n	800c756 <_strtod_l+0x3ee>
 800c78c:	9906      	ldr	r1, [sp, #24]
 800c78e:	3116      	adds	r1, #22
 800c790:	db0b      	blt.n	800c7aa <_strtod_l+0x442>
 800c792:	4b54      	ldr	r3, [pc, #336]	; (800c8e4 <_strtod_l+0x57c>)
 800c794:	ebab 0505 	sub.w	r5, fp, r5
 800c798:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c79c:	ed95 7b00 	vldr	d7, [r5]
 800c7a0:	ec49 8b16 	vmov	d6, r8, r9
 800c7a4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c7a8:	e7d7      	b.n	800c75a <_strtod_l+0x3f2>
 800c7aa:	9906      	ldr	r1, [sp, #24]
 800c7ac:	1a9a      	subs	r2, r3, r2
 800c7ae:	440a      	add	r2, r1
 800c7b0:	2a00      	cmp	r2, #0
 800c7b2:	dd6e      	ble.n	800c892 <_strtod_l+0x52a>
 800c7b4:	f012 000f 	ands.w	r0, r2, #15
 800c7b8:	d00a      	beq.n	800c7d0 <_strtod_l+0x468>
 800c7ba:	494a      	ldr	r1, [pc, #296]	; (800c8e4 <_strtod_l+0x57c>)
 800c7bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c7c0:	ed91 7b00 	vldr	d7, [r1]
 800c7c4:	ec49 8b16 	vmov	d6, r8, r9
 800c7c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7cc:	ec59 8b17 	vmov	r8, r9, d7
 800c7d0:	f032 020f 	bics.w	r2, r2, #15
 800c7d4:	d04e      	beq.n	800c874 <_strtod_l+0x50c>
 800c7d6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c7da:	dd22      	ble.n	800c822 <_strtod_l+0x4ba>
 800c7dc:	2500      	movs	r5, #0
 800c7de:	462e      	mov	r6, r5
 800c7e0:	9507      	str	r5, [sp, #28]
 800c7e2:	462f      	mov	r7, r5
 800c7e4:	2322      	movs	r3, #34	; 0x22
 800c7e6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c8f0 <_strtod_l+0x588>
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	f04f 0800 	mov.w	r8, #0
 800c7f0:	9b07      	ldr	r3, [sp, #28]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f43f adf3 	beq.w	800c3de <_strtod_l+0x76>
 800c7f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7ff f930 	bl	800ba60 <_Bfree>
 800c800:	4639      	mov	r1, r7
 800c802:	4620      	mov	r0, r4
 800c804:	f7ff f92c 	bl	800ba60 <_Bfree>
 800c808:	4631      	mov	r1, r6
 800c80a:	4620      	mov	r0, r4
 800c80c:	f7ff f928 	bl	800ba60 <_Bfree>
 800c810:	9907      	ldr	r1, [sp, #28]
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff f924 	bl	800ba60 <_Bfree>
 800c818:	4629      	mov	r1, r5
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7ff f920 	bl	800ba60 <_Bfree>
 800c820:	e5dd      	b.n	800c3de <_strtod_l+0x76>
 800c822:	2000      	movs	r0, #0
 800c824:	ec49 8b17 	vmov	d7, r8, r9
 800c828:	4f2f      	ldr	r7, [pc, #188]	; (800c8e8 <_strtod_l+0x580>)
 800c82a:	1112      	asrs	r2, r2, #4
 800c82c:	4601      	mov	r1, r0
 800c82e:	2a01      	cmp	r2, #1
 800c830:	dc23      	bgt.n	800c87a <_strtod_l+0x512>
 800c832:	b108      	cbz	r0, 800c838 <_strtod_l+0x4d0>
 800c834:	ec59 8b17 	vmov	r8, r9, d7
 800c838:	4a2b      	ldr	r2, [pc, #172]	; (800c8e8 <_strtod_l+0x580>)
 800c83a:	482c      	ldr	r0, [pc, #176]	; (800c8ec <_strtod_l+0x584>)
 800c83c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c840:	ed92 7b00 	vldr	d7, [r2]
 800c844:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c848:	ec49 8b16 	vmov	d6, r8, r9
 800c84c:	4a28      	ldr	r2, [pc, #160]	; (800c8f0 <_strtod_l+0x588>)
 800c84e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c852:	ee17 1a90 	vmov	r1, s15
 800c856:	400a      	ands	r2, r1
 800c858:	4282      	cmp	r2, r0
 800c85a:	ec59 8b17 	vmov	r8, r9, d7
 800c85e:	d8bd      	bhi.n	800c7dc <_strtod_l+0x474>
 800c860:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c864:	4282      	cmp	r2, r0
 800c866:	bf86      	itte	hi
 800c868:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c8f4 <_strtod_l+0x58c>
 800c86c:	f04f 38ff 	movhi.w	r8, #4294967295
 800c870:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c874:	2200      	movs	r2, #0
 800c876:	9205      	str	r2, [sp, #20]
 800c878:	e076      	b.n	800c968 <_strtod_l+0x600>
 800c87a:	f012 0f01 	tst.w	r2, #1
 800c87e:	d004      	beq.n	800c88a <_strtod_l+0x522>
 800c880:	ed97 6b00 	vldr	d6, [r7]
 800c884:	2001      	movs	r0, #1
 800c886:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c88a:	3101      	adds	r1, #1
 800c88c:	1052      	asrs	r2, r2, #1
 800c88e:	3708      	adds	r7, #8
 800c890:	e7cd      	b.n	800c82e <_strtod_l+0x4c6>
 800c892:	d0ef      	beq.n	800c874 <_strtod_l+0x50c>
 800c894:	4252      	negs	r2, r2
 800c896:	f012 000f 	ands.w	r0, r2, #15
 800c89a:	d00a      	beq.n	800c8b2 <_strtod_l+0x54a>
 800c89c:	4911      	ldr	r1, [pc, #68]	; (800c8e4 <_strtod_l+0x57c>)
 800c89e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c8a2:	ed91 7b00 	vldr	d7, [r1]
 800c8a6:	ec49 8b16 	vmov	d6, r8, r9
 800c8aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c8ae:	ec59 8b17 	vmov	r8, r9, d7
 800c8b2:	1112      	asrs	r2, r2, #4
 800c8b4:	d0de      	beq.n	800c874 <_strtod_l+0x50c>
 800c8b6:	2a1f      	cmp	r2, #31
 800c8b8:	dd1e      	ble.n	800c8f8 <_strtod_l+0x590>
 800c8ba:	2500      	movs	r5, #0
 800c8bc:	462e      	mov	r6, r5
 800c8be:	9507      	str	r5, [sp, #28]
 800c8c0:	462f      	mov	r7, r5
 800c8c2:	2322      	movs	r3, #34	; 0x22
 800c8c4:	f04f 0800 	mov.w	r8, #0
 800c8c8:	f04f 0900 	mov.w	r9, #0
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	e78f      	b.n	800c7f0 <_strtod_l+0x488>
 800c8d0:	08018ee9 	.word	0x08018ee9
 800c8d4:	08019114 	.word	0x08019114
 800c8d8:	08018ee1 	.word	0x08018ee1
 800c8dc:	08018f18 	.word	0x08018f18
 800c8e0:	080192a5 	.word	0x080192a5
 800c8e4:	08019028 	.word	0x08019028
 800c8e8:	08019000 	.word	0x08019000
 800c8ec:	7ca00000 	.word	0x7ca00000
 800c8f0:	7ff00000 	.word	0x7ff00000
 800c8f4:	7fefffff 	.word	0x7fefffff
 800c8f8:	f012 0110 	ands.w	r1, r2, #16
 800c8fc:	bf18      	it	ne
 800c8fe:	216a      	movne	r1, #106	; 0x6a
 800c900:	9105      	str	r1, [sp, #20]
 800c902:	ec49 8b17 	vmov	d7, r8, r9
 800c906:	49be      	ldr	r1, [pc, #760]	; (800cc00 <_strtod_l+0x898>)
 800c908:	2000      	movs	r0, #0
 800c90a:	07d7      	lsls	r7, r2, #31
 800c90c:	d504      	bpl.n	800c918 <_strtod_l+0x5b0>
 800c90e:	ed91 6b00 	vldr	d6, [r1]
 800c912:	2001      	movs	r0, #1
 800c914:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c918:	1052      	asrs	r2, r2, #1
 800c91a:	f101 0108 	add.w	r1, r1, #8
 800c91e:	d1f4      	bne.n	800c90a <_strtod_l+0x5a2>
 800c920:	b108      	cbz	r0, 800c926 <_strtod_l+0x5be>
 800c922:	ec59 8b17 	vmov	r8, r9, d7
 800c926:	9a05      	ldr	r2, [sp, #20]
 800c928:	b1ba      	cbz	r2, 800c95a <_strtod_l+0x5f2>
 800c92a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c92e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c932:	2a00      	cmp	r2, #0
 800c934:	4648      	mov	r0, r9
 800c936:	dd10      	ble.n	800c95a <_strtod_l+0x5f2>
 800c938:	2a1f      	cmp	r2, #31
 800c93a:	f340 812c 	ble.w	800cb96 <_strtod_l+0x82e>
 800c93e:	2a34      	cmp	r2, #52	; 0x34
 800c940:	bfde      	ittt	le
 800c942:	f04f 32ff 	movle.w	r2, #4294967295
 800c946:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c94a:	408a      	lslle	r2, r1
 800c94c:	f04f 0800 	mov.w	r8, #0
 800c950:	bfcc      	ite	gt
 800c952:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c956:	ea02 0900 	andle.w	r9, r2, r0
 800c95a:	ec49 8b17 	vmov	d7, r8, r9
 800c95e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c966:	d0a8      	beq.n	800c8ba <_strtod_l+0x552>
 800c968:	9a07      	ldr	r2, [sp, #28]
 800c96a:	9200      	str	r2, [sp, #0]
 800c96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c96e:	4632      	mov	r2, r6
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff f8dd 	bl	800bb30 <__s2b>
 800c976:	9007      	str	r0, [sp, #28]
 800c978:	2800      	cmp	r0, #0
 800c97a:	f43f af2f 	beq.w	800c7dc <_strtod_l+0x474>
 800c97e:	9a06      	ldr	r2, [sp, #24]
 800c980:	2a00      	cmp	r2, #0
 800c982:	ebab 0305 	sub.w	r3, fp, r5
 800c986:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800cbe0 <_strtod_l+0x878>
 800c98a:	bfa8      	it	ge
 800c98c:	2300      	movge	r3, #0
 800c98e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800cbe8 <_strtod_l+0x880>
 800c992:	ed9f bb97 	vldr	d11, [pc, #604]	; 800cbf0 <_strtod_l+0x888>
 800c996:	9309      	str	r3, [sp, #36]	; 0x24
 800c998:	2500      	movs	r5, #0
 800c99a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c99e:	930c      	str	r3, [sp, #48]	; 0x30
 800c9a0:	462e      	mov	r6, r5
 800c9a2:	9b07      	ldr	r3, [sp, #28]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	6859      	ldr	r1, [r3, #4]
 800c9a8:	f7ff f81a 	bl	800b9e0 <_Balloc>
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f af18 	beq.w	800c7e4 <_strtod_l+0x47c>
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	691a      	ldr	r2, [r3, #16]
 800c9b8:	3202      	adds	r2, #2
 800c9ba:	f103 010c 	add.w	r1, r3, #12
 800c9be:	0092      	lsls	r2, r2, #2
 800c9c0:	300c      	adds	r0, #12
 800c9c2:	f7fe f904 	bl	800abce <memcpy>
 800c9c6:	ec49 8b10 	vmov	d0, r8, r9
 800c9ca:	aa14      	add	r2, sp, #80	; 0x50
 800c9cc:	a913      	add	r1, sp, #76	; 0x4c
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f7ff fbe2 	bl	800c198 <__d2b>
 800c9d4:	ec49 8b18 	vmov	d8, r8, r9
 800c9d8:	9012      	str	r0, [sp, #72]	; 0x48
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	f43f af02 	beq.w	800c7e4 <_strtod_l+0x47c>
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f7ff f93c 	bl	800bc60 <__i2b>
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	f43f aefa 	beq.w	800c7e4 <_strtod_l+0x47c>
 800c9f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bfab      	itete	ge
 800c9f8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c9fa:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c9fc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ca00:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ca04:	bfac      	ite	ge
 800ca06:	eb03 0b02 	addge.w	fp, r3, r2
 800ca0a:	eba2 0a03 	sublt.w	sl, r2, r3
 800ca0e:	9a05      	ldr	r2, [sp, #20]
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	440b      	add	r3, r1
 800ca14:	4a7b      	ldr	r2, [pc, #492]	; (800cc04 <_strtod_l+0x89c>)
 800ca16:	3b01      	subs	r3, #1
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ca1e:	f280 80cd 	bge.w	800cbbc <_strtod_l+0x854>
 800ca22:	1ad2      	subs	r2, r2, r3
 800ca24:	2a1f      	cmp	r2, #31
 800ca26:	eba1 0102 	sub.w	r1, r1, r2
 800ca2a:	f04f 0001 	mov.w	r0, #1
 800ca2e:	f300 80b9 	bgt.w	800cba4 <_strtod_l+0x83c>
 800ca32:	fa00 f302 	lsl.w	r3, r0, r2
 800ca36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca38:	2300      	movs	r3, #0
 800ca3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca3c:	eb0b 0301 	add.w	r3, fp, r1
 800ca40:	9a05      	ldr	r2, [sp, #20]
 800ca42:	459b      	cmp	fp, r3
 800ca44:	448a      	add	sl, r1
 800ca46:	4492      	add	sl, r2
 800ca48:	465a      	mov	r2, fp
 800ca4a:	bfa8      	it	ge
 800ca4c:	461a      	movge	r2, r3
 800ca4e:	4552      	cmp	r2, sl
 800ca50:	bfa8      	it	ge
 800ca52:	4652      	movge	r2, sl
 800ca54:	2a00      	cmp	r2, #0
 800ca56:	bfc2      	ittt	gt
 800ca58:	1a9b      	subgt	r3, r3, r2
 800ca5a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ca5e:	ebab 0b02 	subgt.w	fp, fp, r2
 800ca62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca64:	2a00      	cmp	r2, #0
 800ca66:	dd18      	ble.n	800ca9a <_strtod_l+0x732>
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca6e:	f7ff f9b7 	bl	800bde0 <__pow5mult>
 800ca72:	4606      	mov	r6, r0
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f43f aeb5 	beq.w	800c7e4 <_strtod_l+0x47c>
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7ff f904 	bl	800bc8c <__multiply>
 800ca84:	900e      	str	r0, [sp, #56]	; 0x38
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f43f aeac 	beq.w	800c7e4 <_strtod_l+0x47c>
 800ca8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f7fe ffe6 	bl	800ba60 <_Bfree>
 800ca94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca98:	9212      	str	r2, [sp, #72]	; 0x48
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f300 8093 	bgt.w	800cbc6 <_strtod_l+0x85e>
 800caa0:	9b06      	ldr	r3, [sp, #24]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	dd08      	ble.n	800cab8 <_strtod_l+0x750>
 800caa6:	4639      	mov	r1, r7
 800caa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caaa:	4620      	mov	r0, r4
 800caac:	f7ff f998 	bl	800bde0 <__pow5mult>
 800cab0:	4607      	mov	r7, r0
 800cab2:	2800      	cmp	r0, #0
 800cab4:	f43f ae96 	beq.w	800c7e4 <_strtod_l+0x47c>
 800cab8:	f1ba 0f00 	cmp.w	sl, #0
 800cabc:	dd08      	ble.n	800cad0 <_strtod_l+0x768>
 800cabe:	4639      	mov	r1, r7
 800cac0:	4652      	mov	r2, sl
 800cac2:	4620      	mov	r0, r4
 800cac4:	f7ff f9e6 	bl	800be94 <__lshift>
 800cac8:	4607      	mov	r7, r0
 800caca:	2800      	cmp	r0, #0
 800cacc:	f43f ae8a 	beq.w	800c7e4 <_strtod_l+0x47c>
 800cad0:	f1bb 0f00 	cmp.w	fp, #0
 800cad4:	dd08      	ble.n	800cae8 <_strtod_l+0x780>
 800cad6:	4631      	mov	r1, r6
 800cad8:	465a      	mov	r2, fp
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff f9da 	bl	800be94 <__lshift>
 800cae0:	4606      	mov	r6, r0
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f43f ae7e 	beq.w	800c7e4 <_strtod_l+0x47c>
 800cae8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800caea:	463a      	mov	r2, r7
 800caec:	4620      	mov	r0, r4
 800caee:	f7ff fa59 	bl	800bfa4 <__mdiff>
 800caf2:	4605      	mov	r5, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f43f ae75 	beq.w	800c7e4 <_strtod_l+0x47c>
 800cafa:	2300      	movs	r3, #0
 800cafc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800cb00:	60c3      	str	r3, [r0, #12]
 800cb02:	4631      	mov	r1, r6
 800cb04:	f7ff fa32 	bl	800bf6c <__mcmp>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	da7f      	bge.n	800cc0c <_strtod_l+0x8a4>
 800cb0c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800cb10:	f040 80a5 	bne.w	800cc5e <_strtod_l+0x8f6>
 800cb14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f040 80a0 	bne.w	800cc5e <_strtod_l+0x8f6>
 800cb1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb22:	0d1b      	lsrs	r3, r3, #20
 800cb24:	051b      	lsls	r3, r3, #20
 800cb26:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb2a:	f240 8098 	bls.w	800cc5e <_strtod_l+0x8f6>
 800cb2e:	696b      	ldr	r3, [r5, #20]
 800cb30:	b91b      	cbnz	r3, 800cb3a <_strtod_l+0x7d2>
 800cb32:	692b      	ldr	r3, [r5, #16]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	f340 8092 	ble.w	800cc5e <_strtod_l+0x8f6>
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f7ff f9a8 	bl	800be94 <__lshift>
 800cb44:	4631      	mov	r1, r6
 800cb46:	4605      	mov	r5, r0
 800cb48:	f7ff fa10 	bl	800bf6c <__mcmp>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	f340 8086 	ble.w	800cc5e <_strtod_l+0x8f6>
 800cb52:	9905      	ldr	r1, [sp, #20]
 800cb54:	4a2c      	ldr	r2, [pc, #176]	; (800cc08 <_strtod_l+0x8a0>)
 800cb56:	464b      	mov	r3, r9
 800cb58:	2900      	cmp	r1, #0
 800cb5a:	f000 809f 	beq.w	800cc9c <_strtod_l+0x934>
 800cb5e:	ea02 0109 	and.w	r1, r2, r9
 800cb62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb66:	f300 8099 	bgt.w	800cc9c <_strtod_l+0x934>
 800cb6a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb6e:	f77f aea8 	ble.w	800c8c2 <_strtod_l+0x55a>
 800cb72:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cbf8 <_strtod_l+0x890>
 800cb76:	ec49 8b16 	vmov	d6, r8, r9
 800cb7a:	4b23      	ldr	r3, [pc, #140]	; (800cc08 <_strtod_l+0x8a0>)
 800cb7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cb80:	ee17 2a90 	vmov	r2, s15
 800cb84:	4013      	ands	r3, r2
 800cb86:	ec59 8b17 	vmov	r8, r9, d7
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f47f ae34 	bne.w	800c7f8 <_strtod_l+0x490>
 800cb90:	2322      	movs	r3, #34	; 0x22
 800cb92:	6023      	str	r3, [r4, #0]
 800cb94:	e630      	b.n	800c7f8 <_strtod_l+0x490>
 800cb96:	f04f 31ff 	mov.w	r1, #4294967295
 800cb9a:	fa01 f202 	lsl.w	r2, r1, r2
 800cb9e:	ea02 0808 	and.w	r8, r2, r8
 800cba2:	e6da      	b.n	800c95a <_strtod_l+0x5f2>
 800cba4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cba8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cbac:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cbb0:	33e2      	adds	r3, #226	; 0xe2
 800cbb2:	fa00 f303 	lsl.w	r3, r0, r3
 800cbb6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800cbba:	e73f      	b.n	800ca3c <_strtod_l+0x6d4>
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cbc4:	e73a      	b.n	800ca3c <_strtod_l+0x6d4>
 800cbc6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7ff f962 	bl	800be94 <__lshift>
 800cbd0:	9012      	str	r0, [sp, #72]	; 0x48
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f47f af64 	bne.w	800caa0 <_strtod_l+0x738>
 800cbd8:	e604      	b.n	800c7e4 <_strtod_l+0x47c>
 800cbda:	bf00      	nop
 800cbdc:	f3af 8000 	nop.w
 800cbe0:	94a03595 	.word	0x94a03595
 800cbe4:	3fcfffff 	.word	0x3fcfffff
 800cbe8:	94a03595 	.word	0x94a03595
 800cbec:	3fdfffff 	.word	0x3fdfffff
 800cbf0:	35afe535 	.word	0x35afe535
 800cbf4:	3fe00000 	.word	0x3fe00000
 800cbf8:	00000000 	.word	0x00000000
 800cbfc:	39500000 	.word	0x39500000
 800cc00:	08019128 	.word	0x08019128
 800cc04:	fffffc02 	.word	0xfffffc02
 800cc08:	7ff00000 	.word	0x7ff00000
 800cc0c:	46cb      	mov	fp, r9
 800cc0e:	d15f      	bne.n	800ccd0 <_strtod_l+0x968>
 800cc10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc14:	f1ba 0f00 	cmp.w	sl, #0
 800cc18:	d02a      	beq.n	800cc70 <_strtod_l+0x908>
 800cc1a:	4aa7      	ldr	r2, [pc, #668]	; (800ceb8 <_strtod_l+0xb50>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d12b      	bne.n	800cc78 <_strtod_l+0x910>
 800cc20:	9b05      	ldr	r3, [sp, #20]
 800cc22:	4642      	mov	r2, r8
 800cc24:	b1fb      	cbz	r3, 800cc66 <_strtod_l+0x8fe>
 800cc26:	4ba5      	ldr	r3, [pc, #660]	; (800cebc <_strtod_l+0xb54>)
 800cc28:	ea09 0303 	and.w	r3, r9, r3
 800cc2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc30:	f04f 31ff 	mov.w	r1, #4294967295
 800cc34:	d81a      	bhi.n	800cc6c <_strtod_l+0x904>
 800cc36:	0d1b      	lsrs	r3, r3, #20
 800cc38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d119      	bne.n	800cc78 <_strtod_l+0x910>
 800cc44:	4b9e      	ldr	r3, [pc, #632]	; (800cec0 <_strtod_l+0xb58>)
 800cc46:	459b      	cmp	fp, r3
 800cc48:	d102      	bne.n	800cc50 <_strtod_l+0x8e8>
 800cc4a:	3201      	adds	r2, #1
 800cc4c:	f43f adca 	beq.w	800c7e4 <_strtod_l+0x47c>
 800cc50:	4b9a      	ldr	r3, [pc, #616]	; (800cebc <_strtod_l+0xb54>)
 800cc52:	ea0b 0303 	and.w	r3, fp, r3
 800cc56:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cc5a:	f04f 0800 	mov.w	r8, #0
 800cc5e:	9b05      	ldr	r3, [sp, #20]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d186      	bne.n	800cb72 <_strtod_l+0x80a>
 800cc64:	e5c8      	b.n	800c7f8 <_strtod_l+0x490>
 800cc66:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6a:	e7e9      	b.n	800cc40 <_strtod_l+0x8d8>
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	e7e7      	b.n	800cc40 <_strtod_l+0x8d8>
 800cc70:	ea53 0308 	orrs.w	r3, r3, r8
 800cc74:	f43f af6d 	beq.w	800cb52 <_strtod_l+0x7ea>
 800cc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7a:	b1cb      	cbz	r3, 800ccb0 <_strtod_l+0x948>
 800cc7c:	ea13 0f0b 	tst.w	r3, fp
 800cc80:	d0ed      	beq.n	800cc5e <_strtod_l+0x8f6>
 800cc82:	9a05      	ldr	r2, [sp, #20]
 800cc84:	4640      	mov	r0, r8
 800cc86:	4649      	mov	r1, r9
 800cc88:	f1ba 0f00 	cmp.w	sl, #0
 800cc8c:	d014      	beq.n	800ccb8 <_strtod_l+0x950>
 800cc8e:	f7ff fb51 	bl	800c334 <sulp>
 800cc92:	ee38 7b00 	vadd.f64	d7, d8, d0
 800cc96:	ec59 8b17 	vmov	r8, r9, d7
 800cc9a:	e7e0      	b.n	800cc5e <_strtod_l+0x8f6>
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cca2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cca6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ccaa:	f04f 38ff 	mov.w	r8, #4294967295
 800ccae:	e7d6      	b.n	800cc5e <_strtod_l+0x8f6>
 800ccb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccb2:	ea13 0f08 	tst.w	r3, r8
 800ccb6:	e7e3      	b.n	800cc80 <_strtod_l+0x918>
 800ccb8:	f7ff fb3c 	bl	800c334 <sulp>
 800ccbc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ccc0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ccc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc8:	ec59 8b10 	vmov	r8, r9, d0
 800cccc:	d1c7      	bne.n	800cc5e <_strtod_l+0x8f6>
 800ccce:	e5f8      	b.n	800c8c2 <_strtod_l+0x55a>
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7ff faba 	bl	800c24c <__ratio>
 800ccd8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ccdc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce4:	d85f      	bhi.n	800cda6 <_strtod_l+0xa3e>
 800cce6:	f1ba 0f00 	cmp.w	sl, #0
 800ccea:	d166      	bne.n	800cdba <_strtod_l+0xa52>
 800ccec:	f1b8 0f00 	cmp.w	r8, #0
 800ccf0:	d14d      	bne.n	800cd8e <_strtod_l+0xa26>
 800ccf2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccf6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d162      	bne.n	800cdc4 <_strtod_l+0xa5c>
 800ccfe:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800cd02:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0a:	d401      	bmi.n	800cd10 <_strtod_l+0x9a8>
 800cd0c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800cd10:	eeb1 cb4d 	vneg.f64	d12, d13
 800cd14:	4869      	ldr	r0, [pc, #420]	; (800cebc <_strtod_l+0xb54>)
 800cd16:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800cec8 <_strtod_l+0xb60>
 800cd1a:	ea0b 0100 	and.w	r1, fp, r0
 800cd1e:	4561      	cmp	r1, ip
 800cd20:	ec53 2b1c 	vmov	r2, r3, d12
 800cd24:	d17a      	bne.n	800ce1c <_strtod_l+0xab4>
 800cd26:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cd2a:	ec49 8b10 	vmov	d0, r8, r9
 800cd2e:	910a      	str	r1, [sp, #40]	; 0x28
 800cd30:	f7ff f9c2 	bl	800c0b8 <__ulp>
 800cd34:	ec49 8b1e 	vmov	d14, r8, r9
 800cd38:	4860      	ldr	r0, [pc, #384]	; (800cebc <_strtod_l+0xb54>)
 800cd3a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800cd3e:	ee1e 3a90 	vmov	r3, s29
 800cd42:	4a60      	ldr	r2, [pc, #384]	; (800cec4 <_strtod_l+0xb5c>)
 800cd44:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd46:	4018      	ands	r0, r3
 800cd48:	4290      	cmp	r0, r2
 800cd4a:	ec59 8b1e 	vmov	r8, r9, d14
 800cd4e:	d93c      	bls.n	800cdca <_strtod_l+0xa62>
 800cd50:	ee18 2a90 	vmov	r2, s17
 800cd54:	4b5a      	ldr	r3, [pc, #360]	; (800cec0 <_strtod_l+0xb58>)
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d104      	bne.n	800cd64 <_strtod_l+0x9fc>
 800cd5a:	ee18 3a10 	vmov	r3, s16
 800cd5e:	3301      	adds	r3, #1
 800cd60:	f43f ad40 	beq.w	800c7e4 <_strtod_l+0x47c>
 800cd64:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800cec0 <_strtod_l+0xb58>
 800cd68:	f04f 38ff 	mov.w	r8, #4294967295
 800cd6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7fe fe76 	bl	800ba60 <_Bfree>
 800cd74:	4639      	mov	r1, r7
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7fe fe72 	bl	800ba60 <_Bfree>
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f7fe fe6e 	bl	800ba60 <_Bfree>
 800cd84:	4629      	mov	r1, r5
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7fe fe6a 	bl	800ba60 <_Bfree>
 800cd8c:	e609      	b.n	800c9a2 <_strtod_l+0x63a>
 800cd8e:	f1b8 0f01 	cmp.w	r8, #1
 800cd92:	d103      	bne.n	800cd9c <_strtod_l+0xa34>
 800cd94:	f1b9 0f00 	cmp.w	r9, #0
 800cd98:	f43f ad93 	beq.w	800c8c2 <_strtod_l+0x55a>
 800cd9c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800cda0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800cda4:	e7b6      	b.n	800cd14 <_strtod_l+0x9ac>
 800cda6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cdaa:	ee20 db0d 	vmul.f64	d13, d0, d13
 800cdae:	f1ba 0f00 	cmp.w	sl, #0
 800cdb2:	d0ad      	beq.n	800cd10 <_strtod_l+0x9a8>
 800cdb4:	eeb0 cb4d 	vmov.f64	d12, d13
 800cdb8:	e7ac      	b.n	800cd14 <_strtod_l+0x9ac>
 800cdba:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800cdbe:	eeb0 db4c 	vmov.f64	d13, d12
 800cdc2:	e7a7      	b.n	800cd14 <_strtod_l+0x9ac>
 800cdc4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800cdc8:	e7a4      	b.n	800cd14 <_strtod_l+0x9ac>
 800cdca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cdce:	9b05      	ldr	r3, [sp, #20]
 800cdd0:	46cb      	mov	fp, r9
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1ca      	bne.n	800cd6c <_strtod_l+0xa04>
 800cdd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cdda:	0d1b      	lsrs	r3, r3, #20
 800cddc:	051b      	lsls	r3, r3, #20
 800cdde:	4299      	cmp	r1, r3
 800cde0:	d1c4      	bne.n	800cd6c <_strtod_l+0xa04>
 800cde2:	ec51 0b1d 	vmov	r0, r1, d13
 800cde6:	f7f3 fc57 	bl	8000698 <__aeabi_d2lz>
 800cdea:	f7f3 fc0f 	bl	800060c <__aeabi_l2d>
 800cdee:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800cdf2:	ec41 0b17 	vmov	d7, r0, r1
 800cdf6:	ea4b 0b08 	orr.w	fp, fp, r8
 800cdfa:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800cdfe:	ee3d db47 	vsub.f64	d13, d13, d7
 800ce02:	d03c      	beq.n	800ce7e <_strtod_l+0xb16>
 800ce04:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	f53f acf4 	bmi.w	800c7f8 <_strtod_l+0x490>
 800ce10:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ce14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce18:	dda8      	ble.n	800cd6c <_strtod_l+0xa04>
 800ce1a:	e4ed      	b.n	800c7f8 <_strtod_l+0x490>
 800ce1c:	9805      	ldr	r0, [sp, #20]
 800ce1e:	b1f0      	cbz	r0, 800ce5e <_strtod_l+0xaf6>
 800ce20:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ce24:	d81b      	bhi.n	800ce5e <_strtod_l+0xaf6>
 800ce26:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800ceb0 <_strtod_l+0xb48>
 800ce2a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ce2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce32:	d811      	bhi.n	800ce58 <_strtod_l+0xaf0>
 800ce34:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ce38:	ee1d 3a10 	vmov	r3, s26
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	bf38      	it	cc
 800ce40:	2301      	movcc	r3, #1
 800ce42:	ee0d 3a10 	vmov	s26, r3
 800ce46:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ce4a:	f1ba 0f00 	cmp.w	sl, #0
 800ce4e:	d113      	bne.n	800ce78 <_strtod_l+0xb10>
 800ce50:	eeb1 7b4d 	vneg.f64	d7, d13
 800ce54:	ec53 2b17 	vmov	r2, r3, d7
 800ce58:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ce5c:	1a43      	subs	r3, r0, r1
 800ce5e:	eeb0 0b48 	vmov.f64	d0, d8
 800ce62:	ec43 2b1c 	vmov	d12, r2, r3
 800ce66:	910a      	str	r1, [sp, #40]	; 0x28
 800ce68:	f7ff f926 	bl	800c0b8 <__ulp>
 800ce6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce6e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ce72:	ec59 8b18 	vmov	r8, r9, d8
 800ce76:	e7aa      	b.n	800cdce <_strtod_l+0xa66>
 800ce78:	eeb0 7b4d 	vmov.f64	d7, d13
 800ce7c:	e7ea      	b.n	800ce54 <_strtod_l+0xaec>
 800ce7e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ce82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce86:	f57f af71 	bpl.w	800cd6c <_strtod_l+0xa04>
 800ce8a:	e4b5      	b.n	800c7f8 <_strtod_l+0x490>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	f7ff baa6 	b.w	800c3e6 <_strtod_l+0x7e>
 800ce9a:	2a65      	cmp	r2, #101	; 0x65
 800ce9c:	f43f aba2 	beq.w	800c5e4 <_strtod_l+0x27c>
 800cea0:	2a45      	cmp	r2, #69	; 0x45
 800cea2:	f43f ab9f 	beq.w	800c5e4 <_strtod_l+0x27c>
 800cea6:	2101      	movs	r1, #1
 800cea8:	f7ff bbd8 	b.w	800c65c <_strtod_l+0x2f4>
 800ceac:	f3af 8000 	nop.w
 800ceb0:	ffc00000 	.word	0xffc00000
 800ceb4:	41dfffff 	.word	0x41dfffff
 800ceb8:	000fffff 	.word	0x000fffff
 800cebc:	7ff00000 	.word	0x7ff00000
 800cec0:	7fefffff 	.word	0x7fefffff
 800cec4:	7c9fffff 	.word	0x7c9fffff
 800cec8:	7fe00000 	.word	0x7fe00000

0800cecc <_strtod_r>:
 800cecc:	4b01      	ldr	r3, [pc, #4]	; (800ced4 <_strtod_r+0x8>)
 800cece:	f7ff ba4b 	b.w	800c368 <_strtod_l>
 800ced2:	bf00      	nop
 800ced4:	20000074 	.word	0x20000074

0800ced8 <_strtol_l.constprop.0>:
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cede:	d001      	beq.n	800cee4 <_strtol_l.constprop.0+0xc>
 800cee0:	2b24      	cmp	r3, #36	; 0x24
 800cee2:	d906      	bls.n	800cef2 <_strtol_l.constprop.0+0x1a>
 800cee4:	f7fd fe46 	bl	800ab74 <__errno>
 800cee8:	2316      	movs	r3, #22
 800ceea:	6003      	str	r3, [r0, #0]
 800ceec:	2000      	movs	r0, #0
 800ceee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cfd8 <_strtol_l.constprop.0+0x100>
 800cef6:	460d      	mov	r5, r1
 800cef8:	462e      	mov	r6, r5
 800cefa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cefe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cf02:	f017 0708 	ands.w	r7, r7, #8
 800cf06:	d1f7      	bne.n	800cef8 <_strtol_l.constprop.0+0x20>
 800cf08:	2c2d      	cmp	r4, #45	; 0x2d
 800cf0a:	d132      	bne.n	800cf72 <_strtol_l.constprop.0+0x9a>
 800cf0c:	782c      	ldrb	r4, [r5, #0]
 800cf0e:	2701      	movs	r7, #1
 800cf10:	1cb5      	adds	r5, r6, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d05b      	beq.n	800cfce <_strtol_l.constprop.0+0xf6>
 800cf16:	2b10      	cmp	r3, #16
 800cf18:	d109      	bne.n	800cf2e <_strtol_l.constprop.0+0x56>
 800cf1a:	2c30      	cmp	r4, #48	; 0x30
 800cf1c:	d107      	bne.n	800cf2e <_strtol_l.constprop.0+0x56>
 800cf1e:	782c      	ldrb	r4, [r5, #0]
 800cf20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf24:	2c58      	cmp	r4, #88	; 0x58
 800cf26:	d14d      	bne.n	800cfc4 <_strtol_l.constprop.0+0xec>
 800cf28:	786c      	ldrb	r4, [r5, #1]
 800cf2a:	2310      	movs	r3, #16
 800cf2c:	3502      	adds	r5, #2
 800cf2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf32:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf36:	f04f 0e00 	mov.w	lr, #0
 800cf3a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf3e:	4676      	mov	r6, lr
 800cf40:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf44:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf48:	f1bc 0f09 	cmp.w	ip, #9
 800cf4c:	d816      	bhi.n	800cf7c <_strtol_l.constprop.0+0xa4>
 800cf4e:	4664      	mov	r4, ip
 800cf50:	42a3      	cmp	r3, r4
 800cf52:	dd24      	ble.n	800cf9e <_strtol_l.constprop.0+0xc6>
 800cf54:	f1be 3fff 	cmp.w	lr, #4294967295
 800cf58:	d008      	beq.n	800cf6c <_strtol_l.constprop.0+0x94>
 800cf5a:	45b1      	cmp	r9, r6
 800cf5c:	d31c      	bcc.n	800cf98 <_strtol_l.constprop.0+0xc0>
 800cf5e:	d101      	bne.n	800cf64 <_strtol_l.constprop.0+0x8c>
 800cf60:	45a2      	cmp	sl, r4
 800cf62:	db19      	blt.n	800cf98 <_strtol_l.constprop.0+0xc0>
 800cf64:	fb06 4603 	mla	r6, r6, r3, r4
 800cf68:	f04f 0e01 	mov.w	lr, #1
 800cf6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf70:	e7e8      	b.n	800cf44 <_strtol_l.constprop.0+0x6c>
 800cf72:	2c2b      	cmp	r4, #43	; 0x2b
 800cf74:	bf04      	itt	eq
 800cf76:	782c      	ldrbeq	r4, [r5, #0]
 800cf78:	1cb5      	addeq	r5, r6, #2
 800cf7a:	e7ca      	b.n	800cf12 <_strtol_l.constprop.0+0x3a>
 800cf7c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf80:	f1bc 0f19 	cmp.w	ip, #25
 800cf84:	d801      	bhi.n	800cf8a <_strtol_l.constprop.0+0xb2>
 800cf86:	3c37      	subs	r4, #55	; 0x37
 800cf88:	e7e2      	b.n	800cf50 <_strtol_l.constprop.0+0x78>
 800cf8a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf8e:	f1bc 0f19 	cmp.w	ip, #25
 800cf92:	d804      	bhi.n	800cf9e <_strtol_l.constprop.0+0xc6>
 800cf94:	3c57      	subs	r4, #87	; 0x57
 800cf96:	e7db      	b.n	800cf50 <_strtol_l.constprop.0+0x78>
 800cf98:	f04f 3eff 	mov.w	lr, #4294967295
 800cf9c:	e7e6      	b.n	800cf6c <_strtol_l.constprop.0+0x94>
 800cf9e:	f1be 3fff 	cmp.w	lr, #4294967295
 800cfa2:	d105      	bne.n	800cfb0 <_strtol_l.constprop.0+0xd8>
 800cfa4:	2322      	movs	r3, #34	; 0x22
 800cfa6:	6003      	str	r3, [r0, #0]
 800cfa8:	4646      	mov	r6, r8
 800cfaa:	b942      	cbnz	r2, 800cfbe <_strtol_l.constprop.0+0xe6>
 800cfac:	4630      	mov	r0, r6
 800cfae:	e79e      	b.n	800ceee <_strtol_l.constprop.0+0x16>
 800cfb0:	b107      	cbz	r7, 800cfb4 <_strtol_l.constprop.0+0xdc>
 800cfb2:	4276      	negs	r6, r6
 800cfb4:	2a00      	cmp	r2, #0
 800cfb6:	d0f9      	beq.n	800cfac <_strtol_l.constprop.0+0xd4>
 800cfb8:	f1be 0f00 	cmp.w	lr, #0
 800cfbc:	d000      	beq.n	800cfc0 <_strtol_l.constprop.0+0xe8>
 800cfbe:	1e69      	subs	r1, r5, #1
 800cfc0:	6011      	str	r1, [r2, #0]
 800cfc2:	e7f3      	b.n	800cfac <_strtol_l.constprop.0+0xd4>
 800cfc4:	2430      	movs	r4, #48	; 0x30
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1b1      	bne.n	800cf2e <_strtol_l.constprop.0+0x56>
 800cfca:	2308      	movs	r3, #8
 800cfcc:	e7af      	b.n	800cf2e <_strtol_l.constprop.0+0x56>
 800cfce:	2c30      	cmp	r4, #48	; 0x30
 800cfd0:	d0a5      	beq.n	800cf1e <_strtol_l.constprop.0+0x46>
 800cfd2:	230a      	movs	r3, #10
 800cfd4:	e7ab      	b.n	800cf2e <_strtol_l.constprop.0+0x56>
 800cfd6:	bf00      	nop
 800cfd8:	08019151 	.word	0x08019151

0800cfdc <_strtol_r>:
 800cfdc:	f7ff bf7c 	b.w	800ced8 <_strtol_l.constprop.0>

0800cfe0 <__ssputs_r>:
 800cfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe4:	688e      	ldr	r6, [r1, #8]
 800cfe6:	461f      	mov	r7, r3
 800cfe8:	42be      	cmp	r6, r7
 800cfea:	680b      	ldr	r3, [r1, #0]
 800cfec:	4682      	mov	sl, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	4690      	mov	r8, r2
 800cff2:	d82c      	bhi.n	800d04e <__ssputs_r+0x6e>
 800cff4:	898a      	ldrh	r2, [r1, #12]
 800cff6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cffa:	d026      	beq.n	800d04a <__ssputs_r+0x6a>
 800cffc:	6965      	ldr	r5, [r4, #20]
 800cffe:	6909      	ldr	r1, [r1, #16]
 800d000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d004:	eba3 0901 	sub.w	r9, r3, r1
 800d008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d00c:	1c7b      	adds	r3, r7, #1
 800d00e:	444b      	add	r3, r9
 800d010:	106d      	asrs	r5, r5, #1
 800d012:	429d      	cmp	r5, r3
 800d014:	bf38      	it	cc
 800d016:	461d      	movcc	r5, r3
 800d018:	0553      	lsls	r3, r2, #21
 800d01a:	d527      	bpl.n	800d06c <__ssputs_r+0x8c>
 800d01c:	4629      	mov	r1, r5
 800d01e:	f7fe fc53 	bl	800b8c8 <_malloc_r>
 800d022:	4606      	mov	r6, r0
 800d024:	b360      	cbz	r0, 800d080 <__ssputs_r+0xa0>
 800d026:	6921      	ldr	r1, [r4, #16]
 800d028:	464a      	mov	r2, r9
 800d02a:	f7fd fdd0 	bl	800abce <memcpy>
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d038:	81a3      	strh	r3, [r4, #12]
 800d03a:	6126      	str	r6, [r4, #16]
 800d03c:	6165      	str	r5, [r4, #20]
 800d03e:	444e      	add	r6, r9
 800d040:	eba5 0509 	sub.w	r5, r5, r9
 800d044:	6026      	str	r6, [r4, #0]
 800d046:	60a5      	str	r5, [r4, #8]
 800d048:	463e      	mov	r6, r7
 800d04a:	42be      	cmp	r6, r7
 800d04c:	d900      	bls.n	800d050 <__ssputs_r+0x70>
 800d04e:	463e      	mov	r6, r7
 800d050:	6820      	ldr	r0, [r4, #0]
 800d052:	4632      	mov	r2, r6
 800d054:	4641      	mov	r1, r8
 800d056:	f000 f9c9 	bl	800d3ec <memmove>
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	1b9b      	subs	r3, r3, r6
 800d05e:	60a3      	str	r3, [r4, #8]
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	4433      	add	r3, r6
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	2000      	movs	r0, #0
 800d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06c:	462a      	mov	r2, r5
 800d06e:	f000 fda0 	bl	800dbb2 <_realloc_r>
 800d072:	4606      	mov	r6, r0
 800d074:	2800      	cmp	r0, #0
 800d076:	d1e0      	bne.n	800d03a <__ssputs_r+0x5a>
 800d078:	6921      	ldr	r1, [r4, #16]
 800d07a:	4650      	mov	r0, sl
 800d07c:	f7fe fbb0 	bl	800b7e0 <_free_r>
 800d080:	230c      	movs	r3, #12
 800d082:	f8ca 3000 	str.w	r3, [sl]
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	f04f 30ff 	mov.w	r0, #4294967295
 800d092:	e7e9      	b.n	800d068 <__ssputs_r+0x88>

0800d094 <_svfiprintf_r>:
 800d094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d098:	4698      	mov	r8, r3
 800d09a:	898b      	ldrh	r3, [r1, #12]
 800d09c:	061b      	lsls	r3, r3, #24
 800d09e:	b09d      	sub	sp, #116	; 0x74
 800d0a0:	4607      	mov	r7, r0
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	4614      	mov	r4, r2
 800d0a6:	d50e      	bpl.n	800d0c6 <_svfiprintf_r+0x32>
 800d0a8:	690b      	ldr	r3, [r1, #16]
 800d0aa:	b963      	cbnz	r3, 800d0c6 <_svfiprintf_r+0x32>
 800d0ac:	2140      	movs	r1, #64	; 0x40
 800d0ae:	f7fe fc0b 	bl	800b8c8 <_malloc_r>
 800d0b2:	6028      	str	r0, [r5, #0]
 800d0b4:	6128      	str	r0, [r5, #16]
 800d0b6:	b920      	cbnz	r0, 800d0c2 <_svfiprintf_r+0x2e>
 800d0b8:	230c      	movs	r3, #12
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c0:	e0d0      	b.n	800d264 <_svfiprintf_r+0x1d0>
 800d0c2:	2340      	movs	r3, #64	; 0x40
 800d0c4:	616b      	str	r3, [r5, #20]
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ca:	2320      	movs	r3, #32
 800d0cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d4:	2330      	movs	r3, #48	; 0x30
 800d0d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d27c <_svfiprintf_r+0x1e8>
 800d0da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0de:	f04f 0901 	mov.w	r9, #1
 800d0e2:	4623      	mov	r3, r4
 800d0e4:	469a      	mov	sl, r3
 800d0e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ea:	b10a      	cbz	r2, 800d0f0 <_svfiprintf_r+0x5c>
 800d0ec:	2a25      	cmp	r2, #37	; 0x25
 800d0ee:	d1f9      	bne.n	800d0e4 <_svfiprintf_r+0x50>
 800d0f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f4:	d00b      	beq.n	800d10e <_svfiprintf_r+0x7a>
 800d0f6:	465b      	mov	r3, fp
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f7ff ff6f 	bl	800cfe0 <__ssputs_r>
 800d102:	3001      	adds	r0, #1
 800d104:	f000 80a9 	beq.w	800d25a <_svfiprintf_r+0x1c6>
 800d108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d10a:	445a      	add	r2, fp
 800d10c:	9209      	str	r2, [sp, #36]	; 0x24
 800d10e:	f89a 3000 	ldrb.w	r3, [sl]
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 80a1 	beq.w	800d25a <_svfiprintf_r+0x1c6>
 800d118:	2300      	movs	r3, #0
 800d11a:	f04f 32ff 	mov.w	r2, #4294967295
 800d11e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d122:	f10a 0a01 	add.w	sl, sl, #1
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	9307      	str	r3, [sp, #28]
 800d12a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d12e:	931a      	str	r3, [sp, #104]	; 0x68
 800d130:	4654      	mov	r4, sl
 800d132:	2205      	movs	r2, #5
 800d134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d138:	4850      	ldr	r0, [pc, #320]	; (800d27c <_svfiprintf_r+0x1e8>)
 800d13a:	f7f3 f881 	bl	8000240 <memchr>
 800d13e:	9a04      	ldr	r2, [sp, #16]
 800d140:	b9d8      	cbnz	r0, 800d17a <_svfiprintf_r+0xe6>
 800d142:	06d0      	lsls	r0, r2, #27
 800d144:	bf44      	itt	mi
 800d146:	2320      	movmi	r3, #32
 800d148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d14c:	0711      	lsls	r1, r2, #28
 800d14e:	bf44      	itt	mi
 800d150:	232b      	movmi	r3, #43	; 0x2b
 800d152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d156:	f89a 3000 	ldrb.w	r3, [sl]
 800d15a:	2b2a      	cmp	r3, #42	; 0x2a
 800d15c:	d015      	beq.n	800d18a <_svfiprintf_r+0xf6>
 800d15e:	9a07      	ldr	r2, [sp, #28]
 800d160:	4654      	mov	r4, sl
 800d162:	2000      	movs	r0, #0
 800d164:	f04f 0c0a 	mov.w	ip, #10
 800d168:	4621      	mov	r1, r4
 800d16a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d16e:	3b30      	subs	r3, #48	; 0x30
 800d170:	2b09      	cmp	r3, #9
 800d172:	d94d      	bls.n	800d210 <_svfiprintf_r+0x17c>
 800d174:	b1b0      	cbz	r0, 800d1a4 <_svfiprintf_r+0x110>
 800d176:	9207      	str	r2, [sp, #28]
 800d178:	e014      	b.n	800d1a4 <_svfiprintf_r+0x110>
 800d17a:	eba0 0308 	sub.w	r3, r0, r8
 800d17e:	fa09 f303 	lsl.w	r3, r9, r3
 800d182:	4313      	orrs	r3, r2
 800d184:	9304      	str	r3, [sp, #16]
 800d186:	46a2      	mov	sl, r4
 800d188:	e7d2      	b.n	800d130 <_svfiprintf_r+0x9c>
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	1d19      	adds	r1, r3, #4
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	9103      	str	r1, [sp, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	bfbb      	ittet	lt
 800d196:	425b      	neglt	r3, r3
 800d198:	f042 0202 	orrlt.w	r2, r2, #2
 800d19c:	9307      	strge	r3, [sp, #28]
 800d19e:	9307      	strlt	r3, [sp, #28]
 800d1a0:	bfb8      	it	lt
 800d1a2:	9204      	strlt	r2, [sp, #16]
 800d1a4:	7823      	ldrb	r3, [r4, #0]
 800d1a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1a8:	d10c      	bne.n	800d1c4 <_svfiprintf_r+0x130>
 800d1aa:	7863      	ldrb	r3, [r4, #1]
 800d1ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ae:	d134      	bne.n	800d21a <_svfiprintf_r+0x186>
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	1d1a      	adds	r2, r3, #4
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	9203      	str	r2, [sp, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	bfb8      	it	lt
 800d1bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1c0:	3402      	adds	r4, #2
 800d1c2:	9305      	str	r3, [sp, #20]
 800d1c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d28c <_svfiprintf_r+0x1f8>
 800d1c8:	7821      	ldrb	r1, [r4, #0]
 800d1ca:	2203      	movs	r2, #3
 800d1cc:	4650      	mov	r0, sl
 800d1ce:	f7f3 f837 	bl	8000240 <memchr>
 800d1d2:	b138      	cbz	r0, 800d1e4 <_svfiprintf_r+0x150>
 800d1d4:	9b04      	ldr	r3, [sp, #16]
 800d1d6:	eba0 000a 	sub.w	r0, r0, sl
 800d1da:	2240      	movs	r2, #64	; 0x40
 800d1dc:	4082      	lsls	r2, r0
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	3401      	adds	r4, #1
 800d1e2:	9304      	str	r3, [sp, #16]
 800d1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e8:	4825      	ldr	r0, [pc, #148]	; (800d280 <_svfiprintf_r+0x1ec>)
 800d1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ee:	2206      	movs	r2, #6
 800d1f0:	f7f3 f826 	bl	8000240 <memchr>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d038      	beq.n	800d26a <_svfiprintf_r+0x1d6>
 800d1f8:	4b22      	ldr	r3, [pc, #136]	; (800d284 <_svfiprintf_r+0x1f0>)
 800d1fa:	bb1b      	cbnz	r3, 800d244 <_svfiprintf_r+0x1b0>
 800d1fc:	9b03      	ldr	r3, [sp, #12]
 800d1fe:	3307      	adds	r3, #7
 800d200:	f023 0307 	bic.w	r3, r3, #7
 800d204:	3308      	adds	r3, #8
 800d206:	9303      	str	r3, [sp, #12]
 800d208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20a:	4433      	add	r3, r6
 800d20c:	9309      	str	r3, [sp, #36]	; 0x24
 800d20e:	e768      	b.n	800d0e2 <_svfiprintf_r+0x4e>
 800d210:	fb0c 3202 	mla	r2, ip, r2, r3
 800d214:	460c      	mov	r4, r1
 800d216:	2001      	movs	r0, #1
 800d218:	e7a6      	b.n	800d168 <_svfiprintf_r+0xd4>
 800d21a:	2300      	movs	r3, #0
 800d21c:	3401      	adds	r4, #1
 800d21e:	9305      	str	r3, [sp, #20]
 800d220:	4619      	mov	r1, r3
 800d222:	f04f 0c0a 	mov.w	ip, #10
 800d226:	4620      	mov	r0, r4
 800d228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d22c:	3a30      	subs	r2, #48	; 0x30
 800d22e:	2a09      	cmp	r2, #9
 800d230:	d903      	bls.n	800d23a <_svfiprintf_r+0x1a6>
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c6      	beq.n	800d1c4 <_svfiprintf_r+0x130>
 800d236:	9105      	str	r1, [sp, #20]
 800d238:	e7c4      	b.n	800d1c4 <_svfiprintf_r+0x130>
 800d23a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d23e:	4604      	mov	r4, r0
 800d240:	2301      	movs	r3, #1
 800d242:	e7f0      	b.n	800d226 <_svfiprintf_r+0x192>
 800d244:	ab03      	add	r3, sp, #12
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	462a      	mov	r2, r5
 800d24a:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <_svfiprintf_r+0x1f4>)
 800d24c:	a904      	add	r1, sp, #16
 800d24e:	4638      	mov	r0, r7
 800d250:	f7fc fd6a 	bl	8009d28 <_printf_float>
 800d254:	1c42      	adds	r2, r0, #1
 800d256:	4606      	mov	r6, r0
 800d258:	d1d6      	bne.n	800d208 <_svfiprintf_r+0x174>
 800d25a:	89ab      	ldrh	r3, [r5, #12]
 800d25c:	065b      	lsls	r3, r3, #25
 800d25e:	f53f af2d 	bmi.w	800d0bc <_svfiprintf_r+0x28>
 800d262:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d264:	b01d      	add	sp, #116	; 0x74
 800d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26a:	ab03      	add	r3, sp, #12
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	462a      	mov	r2, r5
 800d270:	4b05      	ldr	r3, [pc, #20]	; (800d288 <_svfiprintf_r+0x1f4>)
 800d272:	a904      	add	r1, sp, #16
 800d274:	4638      	mov	r0, r7
 800d276:	f7fc ffdf 	bl	800a238 <_printf_i>
 800d27a:	e7eb      	b.n	800d254 <_svfiprintf_r+0x1c0>
 800d27c:	08019251 	.word	0x08019251
 800d280:	0801925b 	.word	0x0801925b
 800d284:	08009d29 	.word	0x08009d29
 800d288:	0800cfe1 	.word	0x0800cfe1
 800d28c:	08019257 	.word	0x08019257

0800d290 <__sflush_r>:
 800d290:	898a      	ldrh	r2, [r1, #12]
 800d292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d296:	4605      	mov	r5, r0
 800d298:	0710      	lsls	r0, r2, #28
 800d29a:	460c      	mov	r4, r1
 800d29c:	d458      	bmi.n	800d350 <__sflush_r+0xc0>
 800d29e:	684b      	ldr	r3, [r1, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dc05      	bgt.n	800d2b0 <__sflush_r+0x20>
 800d2a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	dc02      	bgt.n	800d2b0 <__sflush_r+0x20>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2b2:	2e00      	cmp	r6, #0
 800d2b4:	d0f9      	beq.n	800d2aa <__sflush_r+0x1a>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2bc:	682f      	ldr	r7, [r5, #0]
 800d2be:	6a21      	ldr	r1, [r4, #32]
 800d2c0:	602b      	str	r3, [r5, #0]
 800d2c2:	d032      	beq.n	800d32a <__sflush_r+0x9a>
 800d2c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	075a      	lsls	r2, r3, #29
 800d2ca:	d505      	bpl.n	800d2d8 <__sflush_r+0x48>
 800d2cc:	6863      	ldr	r3, [r4, #4]
 800d2ce:	1ac0      	subs	r0, r0, r3
 800d2d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2d2:	b10b      	cbz	r3, 800d2d8 <__sflush_r+0x48>
 800d2d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2d6:	1ac0      	subs	r0, r0, r3
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4602      	mov	r2, r0
 800d2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2de:	6a21      	ldr	r1, [r4, #32]
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	47b0      	blx	r6
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	89a3      	ldrh	r3, [r4, #12]
 800d2e8:	d106      	bne.n	800d2f8 <__sflush_r+0x68>
 800d2ea:	6829      	ldr	r1, [r5, #0]
 800d2ec:	291d      	cmp	r1, #29
 800d2ee:	d82b      	bhi.n	800d348 <__sflush_r+0xb8>
 800d2f0:	4a29      	ldr	r2, [pc, #164]	; (800d398 <__sflush_r+0x108>)
 800d2f2:	410a      	asrs	r2, r1
 800d2f4:	07d6      	lsls	r6, r2, #31
 800d2f6:	d427      	bmi.n	800d348 <__sflush_r+0xb8>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	6062      	str	r2, [r4, #4]
 800d2fc:	04d9      	lsls	r1, r3, #19
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	6022      	str	r2, [r4, #0]
 800d302:	d504      	bpl.n	800d30e <__sflush_r+0x7e>
 800d304:	1c42      	adds	r2, r0, #1
 800d306:	d101      	bne.n	800d30c <__sflush_r+0x7c>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	b903      	cbnz	r3, 800d30e <__sflush_r+0x7e>
 800d30c:	6560      	str	r0, [r4, #84]	; 0x54
 800d30e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d310:	602f      	str	r7, [r5, #0]
 800d312:	2900      	cmp	r1, #0
 800d314:	d0c9      	beq.n	800d2aa <__sflush_r+0x1a>
 800d316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d31a:	4299      	cmp	r1, r3
 800d31c:	d002      	beq.n	800d324 <__sflush_r+0x94>
 800d31e:	4628      	mov	r0, r5
 800d320:	f7fe fa5e 	bl	800b7e0 <_free_r>
 800d324:	2000      	movs	r0, #0
 800d326:	6360      	str	r0, [r4, #52]	; 0x34
 800d328:	e7c0      	b.n	800d2ac <__sflush_r+0x1c>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4628      	mov	r0, r5
 800d32e:	47b0      	blx	r6
 800d330:	1c41      	adds	r1, r0, #1
 800d332:	d1c8      	bne.n	800d2c6 <__sflush_r+0x36>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d0c5      	beq.n	800d2c6 <__sflush_r+0x36>
 800d33a:	2b1d      	cmp	r3, #29
 800d33c:	d001      	beq.n	800d342 <__sflush_r+0xb2>
 800d33e:	2b16      	cmp	r3, #22
 800d340:	d101      	bne.n	800d346 <__sflush_r+0xb6>
 800d342:	602f      	str	r7, [r5, #0]
 800d344:	e7b1      	b.n	800d2aa <__sflush_r+0x1a>
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	e7ad      	b.n	800d2ac <__sflush_r+0x1c>
 800d350:	690f      	ldr	r7, [r1, #16]
 800d352:	2f00      	cmp	r7, #0
 800d354:	d0a9      	beq.n	800d2aa <__sflush_r+0x1a>
 800d356:	0793      	lsls	r3, r2, #30
 800d358:	680e      	ldr	r6, [r1, #0]
 800d35a:	bf08      	it	eq
 800d35c:	694b      	ldreq	r3, [r1, #20]
 800d35e:	600f      	str	r7, [r1, #0]
 800d360:	bf18      	it	ne
 800d362:	2300      	movne	r3, #0
 800d364:	eba6 0807 	sub.w	r8, r6, r7
 800d368:	608b      	str	r3, [r1, #8]
 800d36a:	f1b8 0f00 	cmp.w	r8, #0
 800d36e:	dd9c      	ble.n	800d2aa <__sflush_r+0x1a>
 800d370:	6a21      	ldr	r1, [r4, #32]
 800d372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d374:	4643      	mov	r3, r8
 800d376:	463a      	mov	r2, r7
 800d378:	4628      	mov	r0, r5
 800d37a:	47b0      	blx	r6
 800d37c:	2800      	cmp	r0, #0
 800d37e:	dc06      	bgt.n	800d38e <__sflush_r+0xfe>
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	f04f 30ff 	mov.w	r0, #4294967295
 800d38c:	e78e      	b.n	800d2ac <__sflush_r+0x1c>
 800d38e:	4407      	add	r7, r0
 800d390:	eba8 0800 	sub.w	r8, r8, r0
 800d394:	e7e9      	b.n	800d36a <__sflush_r+0xda>
 800d396:	bf00      	nop
 800d398:	dfbffffe 	.word	0xdfbffffe

0800d39c <_fflush_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	690b      	ldr	r3, [r1, #16]
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	b913      	cbnz	r3, 800d3ac <_fflush_r+0x10>
 800d3a6:	2500      	movs	r5, #0
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	bd38      	pop	{r3, r4, r5, pc}
 800d3ac:	b118      	cbz	r0, 800d3b6 <_fflush_r+0x1a>
 800d3ae:	6a03      	ldr	r3, [r0, #32]
 800d3b0:	b90b      	cbnz	r3, 800d3b6 <_fflush_r+0x1a>
 800d3b2:	f7fd faf3 	bl	800a99c <__sinit>
 800d3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0f3      	beq.n	800d3a6 <_fflush_r+0xa>
 800d3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3c0:	07d0      	lsls	r0, r2, #31
 800d3c2:	d404      	bmi.n	800d3ce <_fflush_r+0x32>
 800d3c4:	0599      	lsls	r1, r3, #22
 800d3c6:	d402      	bmi.n	800d3ce <_fflush_r+0x32>
 800d3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ca:	f7fd fbfe 	bl	800abca <__retarget_lock_acquire_recursive>
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	f7ff ff5d 	bl	800d290 <__sflush_r>
 800d3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3d8:	07da      	lsls	r2, r3, #31
 800d3da:	4605      	mov	r5, r0
 800d3dc:	d4e4      	bmi.n	800d3a8 <_fflush_r+0xc>
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	059b      	lsls	r3, r3, #22
 800d3e2:	d4e1      	bmi.n	800d3a8 <_fflush_r+0xc>
 800d3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3e6:	f7fd fbf1 	bl	800abcc <__retarget_lock_release_recursive>
 800d3ea:	e7dd      	b.n	800d3a8 <_fflush_r+0xc>

0800d3ec <memmove>:
 800d3ec:	4288      	cmp	r0, r1
 800d3ee:	b510      	push	{r4, lr}
 800d3f0:	eb01 0402 	add.w	r4, r1, r2
 800d3f4:	d902      	bls.n	800d3fc <memmove+0x10>
 800d3f6:	4284      	cmp	r4, r0
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	d807      	bhi.n	800d40c <memmove+0x20>
 800d3fc:	1e43      	subs	r3, r0, #1
 800d3fe:	42a1      	cmp	r1, r4
 800d400:	d008      	beq.n	800d414 <memmove+0x28>
 800d402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d40a:	e7f8      	b.n	800d3fe <memmove+0x12>
 800d40c:	4402      	add	r2, r0
 800d40e:	4601      	mov	r1, r0
 800d410:	428a      	cmp	r2, r1
 800d412:	d100      	bne.n	800d416 <memmove+0x2a>
 800d414:	bd10      	pop	{r4, pc}
 800d416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d41e:	e7f7      	b.n	800d410 <memmove+0x24>

0800d420 <strncmp>:
 800d420:	b510      	push	{r4, lr}
 800d422:	b16a      	cbz	r2, 800d440 <strncmp+0x20>
 800d424:	3901      	subs	r1, #1
 800d426:	1884      	adds	r4, r0, r2
 800d428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d430:	429a      	cmp	r2, r3
 800d432:	d103      	bne.n	800d43c <strncmp+0x1c>
 800d434:	42a0      	cmp	r0, r4
 800d436:	d001      	beq.n	800d43c <strncmp+0x1c>
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d1f5      	bne.n	800d428 <strncmp+0x8>
 800d43c:	1ad0      	subs	r0, r2, r3
 800d43e:	bd10      	pop	{r4, pc}
 800d440:	4610      	mov	r0, r2
 800d442:	e7fc      	b.n	800d43e <strncmp+0x1e>

0800d444 <_sbrk_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4d06      	ldr	r5, [pc, #24]	; (800d460 <_sbrk_r+0x1c>)
 800d448:	2300      	movs	r3, #0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	602b      	str	r3, [r5, #0]
 800d450:	f7f5 f976 	bl	8002740 <_sbrk>
 800d454:	1c43      	adds	r3, r0, #1
 800d456:	d102      	bne.n	800d45e <_sbrk_r+0x1a>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	b103      	cbz	r3, 800d45e <_sbrk_r+0x1a>
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	200005d4 	.word	0x200005d4
 800d464:	00000000 	.word	0x00000000

0800d468 <nan>:
 800d468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d470 <nan+0x8>
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	00000000 	.word	0x00000000
 800d474:	7ff80000 	.word	0x7ff80000

0800d478 <__assert_func>:
 800d478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d47a:	4614      	mov	r4, r2
 800d47c:	461a      	mov	r2, r3
 800d47e:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <__assert_func+0x2c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4605      	mov	r5, r0
 800d484:	68d8      	ldr	r0, [r3, #12]
 800d486:	b14c      	cbz	r4, 800d49c <__assert_func+0x24>
 800d488:	4b07      	ldr	r3, [pc, #28]	; (800d4a8 <__assert_func+0x30>)
 800d48a:	9100      	str	r1, [sp, #0]
 800d48c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d490:	4906      	ldr	r1, [pc, #24]	; (800d4ac <__assert_func+0x34>)
 800d492:	462b      	mov	r3, r5
 800d494:	f000 fbca 	bl	800dc2c <fiprintf>
 800d498:	f000 fbda 	bl	800dc50 <abort>
 800d49c:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <__assert_func+0x38>)
 800d49e:	461c      	mov	r4, r3
 800d4a0:	e7f3      	b.n	800d48a <__assert_func+0x12>
 800d4a2:	bf00      	nop
 800d4a4:	20000070 	.word	0x20000070
 800d4a8:	0801926a 	.word	0x0801926a
 800d4ac:	08019277 	.word	0x08019277
 800d4b0:	080192a5 	.word	0x080192a5

0800d4b4 <_calloc_r>:
 800d4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4b6:	fba1 2402 	umull	r2, r4, r1, r2
 800d4ba:	b94c      	cbnz	r4, 800d4d0 <_calloc_r+0x1c>
 800d4bc:	4611      	mov	r1, r2
 800d4be:	9201      	str	r2, [sp, #4]
 800d4c0:	f7fe fa02 	bl	800b8c8 <_malloc_r>
 800d4c4:	9a01      	ldr	r2, [sp, #4]
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	b930      	cbnz	r0, 800d4d8 <_calloc_r+0x24>
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	b003      	add	sp, #12
 800d4ce:	bd30      	pop	{r4, r5, pc}
 800d4d0:	220c      	movs	r2, #12
 800d4d2:	6002      	str	r2, [r0, #0]
 800d4d4:	2500      	movs	r5, #0
 800d4d6:	e7f8      	b.n	800d4ca <_calloc_r+0x16>
 800d4d8:	4621      	mov	r1, r4
 800d4da:	f7fd faf8 	bl	800aace <memset>
 800d4de:	e7f4      	b.n	800d4ca <_calloc_r+0x16>

0800d4e0 <rshift>:
 800d4e0:	6903      	ldr	r3, [r0, #16]
 800d4e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4ee:	f100 0414 	add.w	r4, r0, #20
 800d4f2:	dd45      	ble.n	800d580 <rshift+0xa0>
 800d4f4:	f011 011f 	ands.w	r1, r1, #31
 800d4f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d500:	d10c      	bne.n	800d51c <rshift+0x3c>
 800d502:	f100 0710 	add.w	r7, r0, #16
 800d506:	4629      	mov	r1, r5
 800d508:	42b1      	cmp	r1, r6
 800d50a:	d334      	bcc.n	800d576 <rshift+0x96>
 800d50c:	1a9b      	subs	r3, r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	1eea      	subs	r2, r5, #3
 800d512:	4296      	cmp	r6, r2
 800d514:	bf38      	it	cc
 800d516:	2300      	movcc	r3, #0
 800d518:	4423      	add	r3, r4
 800d51a:	e015      	b.n	800d548 <rshift+0x68>
 800d51c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d520:	f1c1 0820 	rsb	r8, r1, #32
 800d524:	40cf      	lsrs	r7, r1
 800d526:	f105 0e04 	add.w	lr, r5, #4
 800d52a:	46a1      	mov	r9, r4
 800d52c:	4576      	cmp	r6, lr
 800d52e:	46f4      	mov	ip, lr
 800d530:	d815      	bhi.n	800d55e <rshift+0x7e>
 800d532:	1a9a      	subs	r2, r3, r2
 800d534:	0092      	lsls	r2, r2, #2
 800d536:	3a04      	subs	r2, #4
 800d538:	3501      	adds	r5, #1
 800d53a:	42ae      	cmp	r6, r5
 800d53c:	bf38      	it	cc
 800d53e:	2200      	movcc	r2, #0
 800d540:	18a3      	adds	r3, r4, r2
 800d542:	50a7      	str	r7, [r4, r2]
 800d544:	b107      	cbz	r7, 800d548 <rshift+0x68>
 800d546:	3304      	adds	r3, #4
 800d548:	1b1a      	subs	r2, r3, r4
 800d54a:	42a3      	cmp	r3, r4
 800d54c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d550:	bf08      	it	eq
 800d552:	2300      	moveq	r3, #0
 800d554:	6102      	str	r2, [r0, #16]
 800d556:	bf08      	it	eq
 800d558:	6143      	streq	r3, [r0, #20]
 800d55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55e:	f8dc c000 	ldr.w	ip, [ip]
 800d562:	fa0c fc08 	lsl.w	ip, ip, r8
 800d566:	ea4c 0707 	orr.w	r7, ip, r7
 800d56a:	f849 7b04 	str.w	r7, [r9], #4
 800d56e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d572:	40cf      	lsrs	r7, r1
 800d574:	e7da      	b.n	800d52c <rshift+0x4c>
 800d576:	f851 cb04 	ldr.w	ip, [r1], #4
 800d57a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d57e:	e7c3      	b.n	800d508 <rshift+0x28>
 800d580:	4623      	mov	r3, r4
 800d582:	e7e1      	b.n	800d548 <rshift+0x68>

0800d584 <__hexdig_fun>:
 800d584:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d588:	2b09      	cmp	r3, #9
 800d58a:	d802      	bhi.n	800d592 <__hexdig_fun+0xe>
 800d58c:	3820      	subs	r0, #32
 800d58e:	b2c0      	uxtb	r0, r0
 800d590:	4770      	bx	lr
 800d592:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d596:	2b05      	cmp	r3, #5
 800d598:	d801      	bhi.n	800d59e <__hexdig_fun+0x1a>
 800d59a:	3847      	subs	r0, #71	; 0x47
 800d59c:	e7f7      	b.n	800d58e <__hexdig_fun+0xa>
 800d59e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d5a2:	2b05      	cmp	r3, #5
 800d5a4:	d801      	bhi.n	800d5aa <__hexdig_fun+0x26>
 800d5a6:	3827      	subs	r0, #39	; 0x27
 800d5a8:	e7f1      	b.n	800d58e <__hexdig_fun+0xa>
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	4770      	bx	lr
	...

0800d5b0 <__gethex>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	4617      	mov	r7, r2
 800d5b6:	680a      	ldr	r2, [r1, #0]
 800d5b8:	b085      	sub	sp, #20
 800d5ba:	f102 0b02 	add.w	fp, r2, #2
 800d5be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d5c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5c6:	4681      	mov	r9, r0
 800d5c8:	468a      	mov	sl, r1
 800d5ca:	9302      	str	r3, [sp, #8]
 800d5cc:	32fe      	adds	r2, #254	; 0xfe
 800d5ce:	eb02 030b 	add.w	r3, r2, fp
 800d5d2:	46d8      	mov	r8, fp
 800d5d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	2830      	cmp	r0, #48	; 0x30
 800d5dc:	d0f7      	beq.n	800d5ce <__gethex+0x1e>
 800d5de:	f7ff ffd1 	bl	800d584 <__hexdig_fun>
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d138      	bne.n	800d65a <__gethex+0xaa>
 800d5e8:	49a7      	ldr	r1, [pc, #668]	; (800d888 <__gethex+0x2d8>)
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	f7ff ff17 	bl	800d420 <strncmp>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d169      	bne.n	800d6cc <__gethex+0x11c>
 800d5f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d5fc:	465d      	mov	r5, fp
 800d5fe:	f7ff ffc1 	bl	800d584 <__hexdig_fun>
 800d602:	2800      	cmp	r0, #0
 800d604:	d064      	beq.n	800d6d0 <__gethex+0x120>
 800d606:	465a      	mov	r2, fp
 800d608:	7810      	ldrb	r0, [r2, #0]
 800d60a:	2830      	cmp	r0, #48	; 0x30
 800d60c:	4690      	mov	r8, r2
 800d60e:	f102 0201 	add.w	r2, r2, #1
 800d612:	d0f9      	beq.n	800d608 <__gethex+0x58>
 800d614:	f7ff ffb6 	bl	800d584 <__hexdig_fun>
 800d618:	2301      	movs	r3, #1
 800d61a:	fab0 f480 	clz	r4, r0
 800d61e:	0964      	lsrs	r4, r4, #5
 800d620:	465e      	mov	r6, fp
 800d622:	9301      	str	r3, [sp, #4]
 800d624:	4642      	mov	r2, r8
 800d626:	4615      	mov	r5, r2
 800d628:	3201      	adds	r2, #1
 800d62a:	7828      	ldrb	r0, [r5, #0]
 800d62c:	f7ff ffaa 	bl	800d584 <__hexdig_fun>
 800d630:	2800      	cmp	r0, #0
 800d632:	d1f8      	bne.n	800d626 <__gethex+0x76>
 800d634:	4994      	ldr	r1, [pc, #592]	; (800d888 <__gethex+0x2d8>)
 800d636:	2201      	movs	r2, #1
 800d638:	4628      	mov	r0, r5
 800d63a:	f7ff fef1 	bl	800d420 <strncmp>
 800d63e:	b978      	cbnz	r0, 800d660 <__gethex+0xb0>
 800d640:	b946      	cbnz	r6, 800d654 <__gethex+0xa4>
 800d642:	1c6e      	adds	r6, r5, #1
 800d644:	4632      	mov	r2, r6
 800d646:	4615      	mov	r5, r2
 800d648:	3201      	adds	r2, #1
 800d64a:	7828      	ldrb	r0, [r5, #0]
 800d64c:	f7ff ff9a 	bl	800d584 <__hexdig_fun>
 800d650:	2800      	cmp	r0, #0
 800d652:	d1f8      	bne.n	800d646 <__gethex+0x96>
 800d654:	1b73      	subs	r3, r6, r5
 800d656:	009e      	lsls	r6, r3, #2
 800d658:	e004      	b.n	800d664 <__gethex+0xb4>
 800d65a:	2400      	movs	r4, #0
 800d65c:	4626      	mov	r6, r4
 800d65e:	e7e1      	b.n	800d624 <__gethex+0x74>
 800d660:	2e00      	cmp	r6, #0
 800d662:	d1f7      	bne.n	800d654 <__gethex+0xa4>
 800d664:	782b      	ldrb	r3, [r5, #0]
 800d666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d66a:	2b50      	cmp	r3, #80	; 0x50
 800d66c:	d13d      	bne.n	800d6ea <__gethex+0x13a>
 800d66e:	786b      	ldrb	r3, [r5, #1]
 800d670:	2b2b      	cmp	r3, #43	; 0x2b
 800d672:	d02f      	beq.n	800d6d4 <__gethex+0x124>
 800d674:	2b2d      	cmp	r3, #45	; 0x2d
 800d676:	d031      	beq.n	800d6dc <__gethex+0x12c>
 800d678:	1c69      	adds	r1, r5, #1
 800d67a:	f04f 0b00 	mov.w	fp, #0
 800d67e:	7808      	ldrb	r0, [r1, #0]
 800d680:	f7ff ff80 	bl	800d584 <__hexdig_fun>
 800d684:	1e42      	subs	r2, r0, #1
 800d686:	b2d2      	uxtb	r2, r2
 800d688:	2a18      	cmp	r2, #24
 800d68a:	d82e      	bhi.n	800d6ea <__gethex+0x13a>
 800d68c:	f1a0 0210 	sub.w	r2, r0, #16
 800d690:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d694:	f7ff ff76 	bl	800d584 <__hexdig_fun>
 800d698:	f100 3cff 	add.w	ip, r0, #4294967295
 800d69c:	fa5f fc8c 	uxtb.w	ip, ip
 800d6a0:	f1bc 0f18 	cmp.w	ip, #24
 800d6a4:	d91d      	bls.n	800d6e2 <__gethex+0x132>
 800d6a6:	f1bb 0f00 	cmp.w	fp, #0
 800d6aa:	d000      	beq.n	800d6ae <__gethex+0xfe>
 800d6ac:	4252      	negs	r2, r2
 800d6ae:	4416      	add	r6, r2
 800d6b0:	f8ca 1000 	str.w	r1, [sl]
 800d6b4:	b1dc      	cbz	r4, 800d6ee <__gethex+0x13e>
 800d6b6:	9b01      	ldr	r3, [sp, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	bf14      	ite	ne
 800d6bc:	f04f 0800 	movne.w	r8, #0
 800d6c0:	f04f 0806 	moveq.w	r8, #6
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	b005      	add	sp, #20
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	4645      	mov	r5, r8
 800d6ce:	4626      	mov	r6, r4
 800d6d0:	2401      	movs	r4, #1
 800d6d2:	e7c7      	b.n	800d664 <__gethex+0xb4>
 800d6d4:	f04f 0b00 	mov.w	fp, #0
 800d6d8:	1ca9      	adds	r1, r5, #2
 800d6da:	e7d0      	b.n	800d67e <__gethex+0xce>
 800d6dc:	f04f 0b01 	mov.w	fp, #1
 800d6e0:	e7fa      	b.n	800d6d8 <__gethex+0x128>
 800d6e2:	230a      	movs	r3, #10
 800d6e4:	fb03 0002 	mla	r0, r3, r2, r0
 800d6e8:	e7d0      	b.n	800d68c <__gethex+0xdc>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	e7e0      	b.n	800d6b0 <__gethex+0x100>
 800d6ee:	eba5 0308 	sub.w	r3, r5, r8
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	2b07      	cmp	r3, #7
 800d6f8:	dc0a      	bgt.n	800d710 <__gethex+0x160>
 800d6fa:	4648      	mov	r0, r9
 800d6fc:	f7fe f970 	bl	800b9e0 <_Balloc>
 800d700:	4604      	mov	r4, r0
 800d702:	b940      	cbnz	r0, 800d716 <__gethex+0x166>
 800d704:	4b61      	ldr	r3, [pc, #388]	; (800d88c <__gethex+0x2dc>)
 800d706:	4602      	mov	r2, r0
 800d708:	21e4      	movs	r1, #228	; 0xe4
 800d70a:	4861      	ldr	r0, [pc, #388]	; (800d890 <__gethex+0x2e0>)
 800d70c:	f7ff feb4 	bl	800d478 <__assert_func>
 800d710:	3101      	adds	r1, #1
 800d712:	105b      	asrs	r3, r3, #1
 800d714:	e7ef      	b.n	800d6f6 <__gethex+0x146>
 800d716:	f100 0a14 	add.w	sl, r0, #20
 800d71a:	2300      	movs	r3, #0
 800d71c:	495a      	ldr	r1, [pc, #360]	; (800d888 <__gethex+0x2d8>)
 800d71e:	f8cd a004 	str.w	sl, [sp, #4]
 800d722:	469b      	mov	fp, r3
 800d724:	45a8      	cmp	r8, r5
 800d726:	d342      	bcc.n	800d7ae <__gethex+0x1fe>
 800d728:	9801      	ldr	r0, [sp, #4]
 800d72a:	f840 bb04 	str.w	fp, [r0], #4
 800d72e:	eba0 000a 	sub.w	r0, r0, sl
 800d732:	1080      	asrs	r0, r0, #2
 800d734:	6120      	str	r0, [r4, #16]
 800d736:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d73a:	4658      	mov	r0, fp
 800d73c:	f7fe fa42 	bl	800bbc4 <__hi0bits>
 800d740:	683d      	ldr	r5, [r7, #0]
 800d742:	eba8 0000 	sub.w	r0, r8, r0
 800d746:	42a8      	cmp	r0, r5
 800d748:	dd59      	ble.n	800d7fe <__gethex+0x24e>
 800d74a:	eba0 0805 	sub.w	r8, r0, r5
 800d74e:	4641      	mov	r1, r8
 800d750:	4620      	mov	r0, r4
 800d752:	f7fe fdce 	bl	800c2f2 <__any_on>
 800d756:	4683      	mov	fp, r0
 800d758:	b1b8      	cbz	r0, 800d78a <__gethex+0x1da>
 800d75a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d75e:	1159      	asrs	r1, r3, #5
 800d760:	f003 021f 	and.w	r2, r3, #31
 800d764:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d768:	f04f 0b01 	mov.w	fp, #1
 800d76c:	fa0b f202 	lsl.w	r2, fp, r2
 800d770:	420a      	tst	r2, r1
 800d772:	d00a      	beq.n	800d78a <__gethex+0x1da>
 800d774:	455b      	cmp	r3, fp
 800d776:	dd06      	ble.n	800d786 <__gethex+0x1d6>
 800d778:	f1a8 0102 	sub.w	r1, r8, #2
 800d77c:	4620      	mov	r0, r4
 800d77e:	f7fe fdb8 	bl	800c2f2 <__any_on>
 800d782:	2800      	cmp	r0, #0
 800d784:	d138      	bne.n	800d7f8 <__gethex+0x248>
 800d786:	f04f 0b02 	mov.w	fp, #2
 800d78a:	4641      	mov	r1, r8
 800d78c:	4620      	mov	r0, r4
 800d78e:	f7ff fea7 	bl	800d4e0 <rshift>
 800d792:	4446      	add	r6, r8
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	42b3      	cmp	r3, r6
 800d798:	da41      	bge.n	800d81e <__gethex+0x26e>
 800d79a:	4621      	mov	r1, r4
 800d79c:	4648      	mov	r0, r9
 800d79e:	f7fe f95f 	bl	800ba60 <_Bfree>
 800d7a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d7ac:	e78a      	b.n	800d6c4 <__gethex+0x114>
 800d7ae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d7b2:	2a2e      	cmp	r2, #46	; 0x2e
 800d7b4:	d014      	beq.n	800d7e0 <__gethex+0x230>
 800d7b6:	2b20      	cmp	r3, #32
 800d7b8:	d106      	bne.n	800d7c8 <__gethex+0x218>
 800d7ba:	9b01      	ldr	r3, [sp, #4]
 800d7bc:	f843 bb04 	str.w	fp, [r3], #4
 800d7c0:	f04f 0b00 	mov.w	fp, #0
 800d7c4:	9301      	str	r3, [sp, #4]
 800d7c6:	465b      	mov	r3, fp
 800d7c8:	7828      	ldrb	r0, [r5, #0]
 800d7ca:	9303      	str	r3, [sp, #12]
 800d7cc:	f7ff feda 	bl	800d584 <__hexdig_fun>
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	f000 000f 	and.w	r0, r0, #15
 800d7d6:	4098      	lsls	r0, r3
 800d7d8:	ea4b 0b00 	orr.w	fp, fp, r0
 800d7dc:	3304      	adds	r3, #4
 800d7de:	e7a1      	b.n	800d724 <__gethex+0x174>
 800d7e0:	45a8      	cmp	r8, r5
 800d7e2:	d8e8      	bhi.n	800d7b6 <__gethex+0x206>
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	9303      	str	r3, [sp, #12]
 800d7ea:	f7ff fe19 	bl	800d420 <strncmp>
 800d7ee:	4926      	ldr	r1, [pc, #152]	; (800d888 <__gethex+0x2d8>)
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d1df      	bne.n	800d7b6 <__gethex+0x206>
 800d7f6:	e795      	b.n	800d724 <__gethex+0x174>
 800d7f8:	f04f 0b03 	mov.w	fp, #3
 800d7fc:	e7c5      	b.n	800d78a <__gethex+0x1da>
 800d7fe:	da0b      	bge.n	800d818 <__gethex+0x268>
 800d800:	eba5 0800 	sub.w	r8, r5, r0
 800d804:	4621      	mov	r1, r4
 800d806:	4642      	mov	r2, r8
 800d808:	4648      	mov	r0, r9
 800d80a:	f7fe fb43 	bl	800be94 <__lshift>
 800d80e:	eba6 0608 	sub.w	r6, r6, r8
 800d812:	4604      	mov	r4, r0
 800d814:	f100 0a14 	add.w	sl, r0, #20
 800d818:	f04f 0b00 	mov.w	fp, #0
 800d81c:	e7ba      	b.n	800d794 <__gethex+0x1e4>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	42b3      	cmp	r3, r6
 800d822:	dd73      	ble.n	800d90c <__gethex+0x35c>
 800d824:	1b9e      	subs	r6, r3, r6
 800d826:	42b5      	cmp	r5, r6
 800d828:	dc34      	bgt.n	800d894 <__gethex+0x2e4>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d023      	beq.n	800d878 <__gethex+0x2c8>
 800d830:	2b03      	cmp	r3, #3
 800d832:	d025      	beq.n	800d880 <__gethex+0x2d0>
 800d834:	2b01      	cmp	r3, #1
 800d836:	d115      	bne.n	800d864 <__gethex+0x2b4>
 800d838:	42b5      	cmp	r5, r6
 800d83a:	d113      	bne.n	800d864 <__gethex+0x2b4>
 800d83c:	2d01      	cmp	r5, #1
 800d83e:	d10b      	bne.n	800d858 <__gethex+0x2a8>
 800d840:	9a02      	ldr	r2, [sp, #8]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	2301      	movs	r3, #1
 800d848:	6123      	str	r3, [r4, #16]
 800d84a:	f8ca 3000 	str.w	r3, [sl]
 800d84e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d850:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d854:	601c      	str	r4, [r3, #0]
 800d856:	e735      	b.n	800d6c4 <__gethex+0x114>
 800d858:	1e69      	subs	r1, r5, #1
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7fe fd49 	bl	800c2f2 <__any_on>
 800d860:	2800      	cmp	r0, #0
 800d862:	d1ed      	bne.n	800d840 <__gethex+0x290>
 800d864:	4621      	mov	r1, r4
 800d866:	4648      	mov	r0, r9
 800d868:	f7fe f8fa 	bl	800ba60 <_Bfree>
 800d86c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d86e:	2300      	movs	r3, #0
 800d870:	6013      	str	r3, [r2, #0]
 800d872:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d876:	e725      	b.n	800d6c4 <__gethex+0x114>
 800d878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1f2      	bne.n	800d864 <__gethex+0x2b4>
 800d87e:	e7df      	b.n	800d840 <__gethex+0x290>
 800d880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1dc      	bne.n	800d840 <__gethex+0x290>
 800d886:	e7ed      	b.n	800d864 <__gethex+0x2b4>
 800d888:	080190fc 	.word	0x080190fc
 800d88c:	08018f91 	.word	0x08018f91
 800d890:	080192a6 	.word	0x080192a6
 800d894:	f106 38ff 	add.w	r8, r6, #4294967295
 800d898:	f1bb 0f00 	cmp.w	fp, #0
 800d89c:	d133      	bne.n	800d906 <__gethex+0x356>
 800d89e:	f1b8 0f00 	cmp.w	r8, #0
 800d8a2:	d004      	beq.n	800d8ae <__gethex+0x2fe>
 800d8a4:	4641      	mov	r1, r8
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f7fe fd23 	bl	800c2f2 <__any_on>
 800d8ac:	4683      	mov	fp, r0
 800d8ae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d8b8:	f008 081f 	and.w	r8, r8, #31
 800d8bc:	fa03 f308 	lsl.w	r3, r3, r8
 800d8c0:	4213      	tst	r3, r2
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	bf18      	it	ne
 800d8c8:	f04b 0b02 	orrne.w	fp, fp, #2
 800d8cc:	1bad      	subs	r5, r5, r6
 800d8ce:	f7ff fe07 	bl	800d4e0 <rshift>
 800d8d2:	687e      	ldr	r6, [r7, #4]
 800d8d4:	f04f 0802 	mov.w	r8, #2
 800d8d8:	f1bb 0f00 	cmp.w	fp, #0
 800d8dc:	d04a      	beq.n	800d974 <__gethex+0x3c4>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d016      	beq.n	800d912 <__gethex+0x362>
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d018      	beq.n	800d91a <__gethex+0x36a>
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d109      	bne.n	800d900 <__gethex+0x350>
 800d8ec:	f01b 0f02 	tst.w	fp, #2
 800d8f0:	d006      	beq.n	800d900 <__gethex+0x350>
 800d8f2:	f8da 3000 	ldr.w	r3, [sl]
 800d8f6:	ea4b 0b03 	orr.w	fp, fp, r3
 800d8fa:	f01b 0f01 	tst.w	fp, #1
 800d8fe:	d10f      	bne.n	800d920 <__gethex+0x370>
 800d900:	f048 0810 	orr.w	r8, r8, #16
 800d904:	e036      	b.n	800d974 <__gethex+0x3c4>
 800d906:	f04f 0b01 	mov.w	fp, #1
 800d90a:	e7d0      	b.n	800d8ae <__gethex+0x2fe>
 800d90c:	f04f 0801 	mov.w	r8, #1
 800d910:	e7e2      	b.n	800d8d8 <__gethex+0x328>
 800d912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d914:	f1c3 0301 	rsb	r3, r3, #1
 800d918:	930f      	str	r3, [sp, #60]	; 0x3c
 800d91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0ef      	beq.n	800d900 <__gethex+0x350>
 800d920:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d924:	f104 0214 	add.w	r2, r4, #20
 800d928:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d932:	2300      	movs	r3, #0
 800d934:	4694      	mov	ip, r2
 800d936:	f852 1b04 	ldr.w	r1, [r2], #4
 800d93a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d93e:	d01e      	beq.n	800d97e <__gethex+0x3ce>
 800d940:	3101      	adds	r1, #1
 800d942:	f8cc 1000 	str.w	r1, [ip]
 800d946:	f1b8 0f02 	cmp.w	r8, #2
 800d94a:	f104 0214 	add.w	r2, r4, #20
 800d94e:	d13d      	bne.n	800d9cc <__gethex+0x41c>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	3b01      	subs	r3, #1
 800d954:	42ab      	cmp	r3, r5
 800d956:	d10b      	bne.n	800d970 <__gethex+0x3c0>
 800d958:	1169      	asrs	r1, r5, #5
 800d95a:	2301      	movs	r3, #1
 800d95c:	f005 051f 	and.w	r5, r5, #31
 800d960:	fa03 f505 	lsl.w	r5, r3, r5
 800d964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d968:	421d      	tst	r5, r3
 800d96a:	bf18      	it	ne
 800d96c:	f04f 0801 	movne.w	r8, #1
 800d970:	f048 0820 	orr.w	r8, r8, #32
 800d974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d976:	601c      	str	r4, [r3, #0]
 800d978:	9b02      	ldr	r3, [sp, #8]
 800d97a:	601e      	str	r6, [r3, #0]
 800d97c:	e6a2      	b.n	800d6c4 <__gethex+0x114>
 800d97e:	4290      	cmp	r0, r2
 800d980:	f842 3c04 	str.w	r3, [r2, #-4]
 800d984:	d8d6      	bhi.n	800d934 <__gethex+0x384>
 800d986:	68a2      	ldr	r2, [r4, #8]
 800d988:	4593      	cmp	fp, r2
 800d98a:	db17      	blt.n	800d9bc <__gethex+0x40c>
 800d98c:	6861      	ldr	r1, [r4, #4]
 800d98e:	4648      	mov	r0, r9
 800d990:	3101      	adds	r1, #1
 800d992:	f7fe f825 	bl	800b9e0 <_Balloc>
 800d996:	4682      	mov	sl, r0
 800d998:	b918      	cbnz	r0, 800d9a2 <__gethex+0x3f2>
 800d99a:	4b1b      	ldr	r3, [pc, #108]	; (800da08 <__gethex+0x458>)
 800d99c:	4602      	mov	r2, r0
 800d99e:	2184      	movs	r1, #132	; 0x84
 800d9a0:	e6b3      	b.n	800d70a <__gethex+0x15a>
 800d9a2:	6922      	ldr	r2, [r4, #16]
 800d9a4:	3202      	adds	r2, #2
 800d9a6:	f104 010c 	add.w	r1, r4, #12
 800d9aa:	0092      	lsls	r2, r2, #2
 800d9ac:	300c      	adds	r0, #12
 800d9ae:	f7fd f90e 	bl	800abce <memcpy>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4648      	mov	r0, r9
 800d9b6:	f7fe f853 	bl	800ba60 <_Bfree>
 800d9ba:	4654      	mov	r4, sl
 800d9bc:	6922      	ldr	r2, [r4, #16]
 800d9be:	1c51      	adds	r1, r2, #1
 800d9c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d9c4:	6121      	str	r1, [r4, #16]
 800d9c6:	2101      	movs	r1, #1
 800d9c8:	6151      	str	r1, [r2, #20]
 800d9ca:	e7bc      	b.n	800d946 <__gethex+0x396>
 800d9cc:	6921      	ldr	r1, [r4, #16]
 800d9ce:	4559      	cmp	r1, fp
 800d9d0:	dd0b      	ble.n	800d9ea <__gethex+0x43a>
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f7ff fd83 	bl	800d4e0 <rshift>
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	3601      	adds	r6, #1
 800d9de:	42b3      	cmp	r3, r6
 800d9e0:	f6ff aedb 	blt.w	800d79a <__gethex+0x1ea>
 800d9e4:	f04f 0801 	mov.w	r8, #1
 800d9e8:	e7c2      	b.n	800d970 <__gethex+0x3c0>
 800d9ea:	f015 051f 	ands.w	r5, r5, #31
 800d9ee:	d0f9      	beq.n	800d9e4 <__gethex+0x434>
 800d9f0:	9b01      	ldr	r3, [sp, #4]
 800d9f2:	441a      	add	r2, r3
 800d9f4:	f1c5 0520 	rsb	r5, r5, #32
 800d9f8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d9fc:	f7fe f8e2 	bl	800bbc4 <__hi0bits>
 800da00:	42a8      	cmp	r0, r5
 800da02:	dbe6      	blt.n	800d9d2 <__gethex+0x422>
 800da04:	e7ee      	b.n	800d9e4 <__gethex+0x434>
 800da06:	bf00      	nop
 800da08:	08018f91 	.word	0x08018f91

0800da0c <L_shift>:
 800da0c:	f1c2 0208 	rsb	r2, r2, #8
 800da10:	0092      	lsls	r2, r2, #2
 800da12:	b570      	push	{r4, r5, r6, lr}
 800da14:	f1c2 0620 	rsb	r6, r2, #32
 800da18:	6843      	ldr	r3, [r0, #4]
 800da1a:	6804      	ldr	r4, [r0, #0]
 800da1c:	fa03 f506 	lsl.w	r5, r3, r6
 800da20:	432c      	orrs	r4, r5
 800da22:	40d3      	lsrs	r3, r2
 800da24:	6004      	str	r4, [r0, #0]
 800da26:	f840 3f04 	str.w	r3, [r0, #4]!
 800da2a:	4288      	cmp	r0, r1
 800da2c:	d3f4      	bcc.n	800da18 <L_shift+0xc>
 800da2e:	bd70      	pop	{r4, r5, r6, pc}

0800da30 <__match>:
 800da30:	b530      	push	{r4, r5, lr}
 800da32:	6803      	ldr	r3, [r0, #0]
 800da34:	3301      	adds	r3, #1
 800da36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da3a:	b914      	cbnz	r4, 800da42 <__match+0x12>
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	2001      	movs	r0, #1
 800da40:	bd30      	pop	{r4, r5, pc}
 800da42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da4a:	2d19      	cmp	r5, #25
 800da4c:	bf98      	it	ls
 800da4e:	3220      	addls	r2, #32
 800da50:	42a2      	cmp	r2, r4
 800da52:	d0f0      	beq.n	800da36 <__match+0x6>
 800da54:	2000      	movs	r0, #0
 800da56:	e7f3      	b.n	800da40 <__match+0x10>

0800da58 <__hexnan>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	680b      	ldr	r3, [r1, #0]
 800da5e:	6801      	ldr	r1, [r0, #0]
 800da60:	115e      	asrs	r6, r3, #5
 800da62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da66:	f013 031f 	ands.w	r3, r3, #31
 800da6a:	b087      	sub	sp, #28
 800da6c:	bf18      	it	ne
 800da6e:	3604      	addne	r6, #4
 800da70:	2500      	movs	r5, #0
 800da72:	1f37      	subs	r7, r6, #4
 800da74:	4682      	mov	sl, r0
 800da76:	4690      	mov	r8, r2
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800da7e:	46b9      	mov	r9, r7
 800da80:	463c      	mov	r4, r7
 800da82:	9502      	str	r5, [sp, #8]
 800da84:	46ab      	mov	fp, r5
 800da86:	784a      	ldrb	r2, [r1, #1]
 800da88:	1c4b      	adds	r3, r1, #1
 800da8a:	9303      	str	r3, [sp, #12]
 800da8c:	b342      	cbz	r2, 800dae0 <__hexnan+0x88>
 800da8e:	4610      	mov	r0, r2
 800da90:	9105      	str	r1, [sp, #20]
 800da92:	9204      	str	r2, [sp, #16]
 800da94:	f7ff fd76 	bl	800d584 <__hexdig_fun>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d14f      	bne.n	800db3c <__hexnan+0xe4>
 800da9c:	9a04      	ldr	r2, [sp, #16]
 800da9e:	9905      	ldr	r1, [sp, #20]
 800daa0:	2a20      	cmp	r2, #32
 800daa2:	d818      	bhi.n	800dad6 <__hexnan+0x7e>
 800daa4:	9b02      	ldr	r3, [sp, #8]
 800daa6:	459b      	cmp	fp, r3
 800daa8:	dd13      	ble.n	800dad2 <__hexnan+0x7a>
 800daaa:	454c      	cmp	r4, r9
 800daac:	d206      	bcs.n	800dabc <__hexnan+0x64>
 800daae:	2d07      	cmp	r5, #7
 800dab0:	dc04      	bgt.n	800dabc <__hexnan+0x64>
 800dab2:	462a      	mov	r2, r5
 800dab4:	4649      	mov	r1, r9
 800dab6:	4620      	mov	r0, r4
 800dab8:	f7ff ffa8 	bl	800da0c <L_shift>
 800dabc:	4544      	cmp	r4, r8
 800dabe:	d950      	bls.n	800db62 <__hexnan+0x10a>
 800dac0:	2300      	movs	r3, #0
 800dac2:	f1a4 0904 	sub.w	r9, r4, #4
 800dac6:	f844 3c04 	str.w	r3, [r4, #-4]
 800daca:	f8cd b008 	str.w	fp, [sp, #8]
 800dace:	464c      	mov	r4, r9
 800dad0:	461d      	mov	r5, r3
 800dad2:	9903      	ldr	r1, [sp, #12]
 800dad4:	e7d7      	b.n	800da86 <__hexnan+0x2e>
 800dad6:	2a29      	cmp	r2, #41	; 0x29
 800dad8:	d155      	bne.n	800db86 <__hexnan+0x12e>
 800dada:	3102      	adds	r1, #2
 800dadc:	f8ca 1000 	str.w	r1, [sl]
 800dae0:	f1bb 0f00 	cmp.w	fp, #0
 800dae4:	d04f      	beq.n	800db86 <__hexnan+0x12e>
 800dae6:	454c      	cmp	r4, r9
 800dae8:	d206      	bcs.n	800daf8 <__hexnan+0xa0>
 800daea:	2d07      	cmp	r5, #7
 800daec:	dc04      	bgt.n	800daf8 <__hexnan+0xa0>
 800daee:	462a      	mov	r2, r5
 800daf0:	4649      	mov	r1, r9
 800daf2:	4620      	mov	r0, r4
 800daf4:	f7ff ff8a 	bl	800da0c <L_shift>
 800daf8:	4544      	cmp	r4, r8
 800dafa:	d934      	bls.n	800db66 <__hexnan+0x10e>
 800dafc:	f1a8 0204 	sub.w	r2, r8, #4
 800db00:	4623      	mov	r3, r4
 800db02:	f853 1b04 	ldr.w	r1, [r3], #4
 800db06:	f842 1f04 	str.w	r1, [r2, #4]!
 800db0a:	429f      	cmp	r7, r3
 800db0c:	d2f9      	bcs.n	800db02 <__hexnan+0xaa>
 800db0e:	1b3b      	subs	r3, r7, r4
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	3304      	adds	r3, #4
 800db16:	3e03      	subs	r6, #3
 800db18:	3401      	adds	r4, #1
 800db1a:	42a6      	cmp	r6, r4
 800db1c:	bf38      	it	cc
 800db1e:	2304      	movcc	r3, #4
 800db20:	4443      	add	r3, r8
 800db22:	2200      	movs	r2, #0
 800db24:	f843 2b04 	str.w	r2, [r3], #4
 800db28:	429f      	cmp	r7, r3
 800db2a:	d2fb      	bcs.n	800db24 <__hexnan+0xcc>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	b91b      	cbnz	r3, 800db38 <__hexnan+0xe0>
 800db30:	4547      	cmp	r7, r8
 800db32:	d126      	bne.n	800db82 <__hexnan+0x12a>
 800db34:	2301      	movs	r3, #1
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	2005      	movs	r0, #5
 800db3a:	e025      	b.n	800db88 <__hexnan+0x130>
 800db3c:	3501      	adds	r5, #1
 800db3e:	2d08      	cmp	r5, #8
 800db40:	f10b 0b01 	add.w	fp, fp, #1
 800db44:	dd06      	ble.n	800db54 <__hexnan+0xfc>
 800db46:	4544      	cmp	r4, r8
 800db48:	d9c3      	bls.n	800dad2 <__hexnan+0x7a>
 800db4a:	2300      	movs	r3, #0
 800db4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800db50:	2501      	movs	r5, #1
 800db52:	3c04      	subs	r4, #4
 800db54:	6822      	ldr	r2, [r4, #0]
 800db56:	f000 000f 	and.w	r0, r0, #15
 800db5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db5e:	6020      	str	r0, [r4, #0]
 800db60:	e7b7      	b.n	800dad2 <__hexnan+0x7a>
 800db62:	2508      	movs	r5, #8
 800db64:	e7b5      	b.n	800dad2 <__hexnan+0x7a>
 800db66:	9b01      	ldr	r3, [sp, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d0df      	beq.n	800db2c <__hexnan+0xd4>
 800db6c:	f1c3 0320 	rsb	r3, r3, #32
 800db70:	f04f 32ff 	mov.w	r2, #4294967295
 800db74:	40da      	lsrs	r2, r3
 800db76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db7a:	4013      	ands	r3, r2
 800db7c:	f846 3c04 	str.w	r3, [r6, #-4]
 800db80:	e7d4      	b.n	800db2c <__hexnan+0xd4>
 800db82:	3f04      	subs	r7, #4
 800db84:	e7d2      	b.n	800db2c <__hexnan+0xd4>
 800db86:	2004      	movs	r0, #4
 800db88:	b007      	add	sp, #28
 800db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db8e <__ascii_mbtowc>:
 800db8e:	b082      	sub	sp, #8
 800db90:	b901      	cbnz	r1, 800db94 <__ascii_mbtowc+0x6>
 800db92:	a901      	add	r1, sp, #4
 800db94:	b142      	cbz	r2, 800dba8 <__ascii_mbtowc+0x1a>
 800db96:	b14b      	cbz	r3, 800dbac <__ascii_mbtowc+0x1e>
 800db98:	7813      	ldrb	r3, [r2, #0]
 800db9a:	600b      	str	r3, [r1, #0]
 800db9c:	7812      	ldrb	r2, [r2, #0]
 800db9e:	1e10      	subs	r0, r2, #0
 800dba0:	bf18      	it	ne
 800dba2:	2001      	movne	r0, #1
 800dba4:	b002      	add	sp, #8
 800dba6:	4770      	bx	lr
 800dba8:	4610      	mov	r0, r2
 800dbaa:	e7fb      	b.n	800dba4 <__ascii_mbtowc+0x16>
 800dbac:	f06f 0001 	mvn.w	r0, #1
 800dbb0:	e7f8      	b.n	800dba4 <__ascii_mbtowc+0x16>

0800dbb2 <_realloc_r>:
 800dbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb6:	4680      	mov	r8, r0
 800dbb8:	4614      	mov	r4, r2
 800dbba:	460e      	mov	r6, r1
 800dbbc:	b921      	cbnz	r1, 800dbc8 <_realloc_r+0x16>
 800dbbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	f7fd be80 	b.w	800b8c8 <_malloc_r>
 800dbc8:	b92a      	cbnz	r2, 800dbd6 <_realloc_r+0x24>
 800dbca:	f7fd fe09 	bl	800b7e0 <_free_r>
 800dbce:	4625      	mov	r5, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd6:	f000 f842 	bl	800dc5e <_malloc_usable_size_r>
 800dbda:	4284      	cmp	r4, r0
 800dbdc:	4607      	mov	r7, r0
 800dbde:	d802      	bhi.n	800dbe6 <_realloc_r+0x34>
 800dbe0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbe4:	d812      	bhi.n	800dc0c <_realloc_r+0x5a>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4640      	mov	r0, r8
 800dbea:	f7fd fe6d 	bl	800b8c8 <_malloc_r>
 800dbee:	4605      	mov	r5, r0
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d0ed      	beq.n	800dbd0 <_realloc_r+0x1e>
 800dbf4:	42bc      	cmp	r4, r7
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	4631      	mov	r1, r6
 800dbfa:	bf28      	it	cs
 800dbfc:	463a      	movcs	r2, r7
 800dbfe:	f7fc ffe6 	bl	800abce <memcpy>
 800dc02:	4631      	mov	r1, r6
 800dc04:	4640      	mov	r0, r8
 800dc06:	f7fd fdeb 	bl	800b7e0 <_free_r>
 800dc0a:	e7e1      	b.n	800dbd0 <_realloc_r+0x1e>
 800dc0c:	4635      	mov	r5, r6
 800dc0e:	e7df      	b.n	800dbd0 <_realloc_r+0x1e>

0800dc10 <__ascii_wctomb>:
 800dc10:	b149      	cbz	r1, 800dc26 <__ascii_wctomb+0x16>
 800dc12:	2aff      	cmp	r2, #255	; 0xff
 800dc14:	bf85      	ittet	hi
 800dc16:	238a      	movhi	r3, #138	; 0x8a
 800dc18:	6003      	strhi	r3, [r0, #0]
 800dc1a:	700a      	strbls	r2, [r1, #0]
 800dc1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc20:	bf98      	it	ls
 800dc22:	2001      	movls	r0, #1
 800dc24:	4770      	bx	lr
 800dc26:	4608      	mov	r0, r1
 800dc28:	4770      	bx	lr
	...

0800dc2c <fiprintf>:
 800dc2c:	b40e      	push	{r1, r2, r3}
 800dc2e:	b503      	push	{r0, r1, lr}
 800dc30:	4601      	mov	r1, r0
 800dc32:	ab03      	add	r3, sp, #12
 800dc34:	4805      	ldr	r0, [pc, #20]	; (800dc4c <fiprintf+0x20>)
 800dc36:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc3a:	6800      	ldr	r0, [r0, #0]
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	f000 f83f 	bl	800dcc0 <_vfiprintf_r>
 800dc42:	b002      	add	sp, #8
 800dc44:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc48:	b003      	add	sp, #12
 800dc4a:	4770      	bx	lr
 800dc4c:	20000070 	.word	0x20000070

0800dc50 <abort>:
 800dc50:	b508      	push	{r3, lr}
 800dc52:	2006      	movs	r0, #6
 800dc54:	f000 fa0c 	bl	800e070 <raise>
 800dc58:	2001      	movs	r0, #1
 800dc5a:	f7f4 fcf9 	bl	8002650 <_exit>

0800dc5e <_malloc_usable_size_r>:
 800dc5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc62:	1f18      	subs	r0, r3, #4
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	bfbc      	itt	lt
 800dc68:	580b      	ldrlt	r3, [r1, r0]
 800dc6a:	18c0      	addlt	r0, r0, r3
 800dc6c:	4770      	bx	lr

0800dc6e <__sfputc_r>:
 800dc6e:	6893      	ldr	r3, [r2, #8]
 800dc70:	3b01      	subs	r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	b410      	push	{r4}
 800dc76:	6093      	str	r3, [r2, #8]
 800dc78:	da08      	bge.n	800dc8c <__sfputc_r+0x1e>
 800dc7a:	6994      	ldr	r4, [r2, #24]
 800dc7c:	42a3      	cmp	r3, r4
 800dc7e:	db01      	blt.n	800dc84 <__sfputc_r+0x16>
 800dc80:	290a      	cmp	r1, #10
 800dc82:	d103      	bne.n	800dc8c <__sfputc_r+0x1e>
 800dc84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc88:	f000 b934 	b.w	800def4 <__swbuf_r>
 800dc8c:	6813      	ldr	r3, [r2, #0]
 800dc8e:	1c58      	adds	r0, r3, #1
 800dc90:	6010      	str	r0, [r2, #0]
 800dc92:	7019      	strb	r1, [r3, #0]
 800dc94:	4608      	mov	r0, r1
 800dc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <__sfputs_r>:
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	4606      	mov	r6, r0
 800dca0:	460f      	mov	r7, r1
 800dca2:	4614      	mov	r4, r2
 800dca4:	18d5      	adds	r5, r2, r3
 800dca6:	42ac      	cmp	r4, r5
 800dca8:	d101      	bne.n	800dcae <__sfputs_r+0x12>
 800dcaa:	2000      	movs	r0, #0
 800dcac:	e007      	b.n	800dcbe <__sfputs_r+0x22>
 800dcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb2:	463a      	mov	r2, r7
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f7ff ffda 	bl	800dc6e <__sfputc_r>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	d1f3      	bne.n	800dca6 <__sfputs_r+0xa>
 800dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcc0 <_vfiprintf_r>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	b09d      	sub	sp, #116	; 0x74
 800dcc8:	4614      	mov	r4, r2
 800dcca:	4698      	mov	r8, r3
 800dccc:	4606      	mov	r6, r0
 800dcce:	b118      	cbz	r0, 800dcd8 <_vfiprintf_r+0x18>
 800dcd0:	6a03      	ldr	r3, [r0, #32]
 800dcd2:	b90b      	cbnz	r3, 800dcd8 <_vfiprintf_r+0x18>
 800dcd4:	f7fc fe62 	bl	800a99c <__sinit>
 800dcd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcda:	07d9      	lsls	r1, r3, #31
 800dcdc:	d405      	bmi.n	800dcea <_vfiprintf_r+0x2a>
 800dcde:	89ab      	ldrh	r3, [r5, #12]
 800dce0:	059a      	lsls	r2, r3, #22
 800dce2:	d402      	bmi.n	800dcea <_vfiprintf_r+0x2a>
 800dce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dce6:	f7fc ff70 	bl	800abca <__retarget_lock_acquire_recursive>
 800dcea:	89ab      	ldrh	r3, [r5, #12]
 800dcec:	071b      	lsls	r3, r3, #28
 800dcee:	d501      	bpl.n	800dcf4 <_vfiprintf_r+0x34>
 800dcf0:	692b      	ldr	r3, [r5, #16]
 800dcf2:	b99b      	cbnz	r3, 800dd1c <_vfiprintf_r+0x5c>
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f000 f93a 	bl	800df70 <__swsetup_r>
 800dcfc:	b170      	cbz	r0, 800dd1c <_vfiprintf_r+0x5c>
 800dcfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd00:	07dc      	lsls	r4, r3, #31
 800dd02:	d504      	bpl.n	800dd0e <_vfiprintf_r+0x4e>
 800dd04:	f04f 30ff 	mov.w	r0, #4294967295
 800dd08:	b01d      	add	sp, #116	; 0x74
 800dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	89ab      	ldrh	r3, [r5, #12]
 800dd10:	0598      	lsls	r0, r3, #22
 800dd12:	d4f7      	bmi.n	800dd04 <_vfiprintf_r+0x44>
 800dd14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd16:	f7fc ff59 	bl	800abcc <__retarget_lock_release_recursive>
 800dd1a:	e7f3      	b.n	800dd04 <_vfiprintf_r+0x44>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd20:	2320      	movs	r3, #32
 800dd22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd26:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd2a:	2330      	movs	r3, #48	; 0x30
 800dd2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dee0 <_vfiprintf_r+0x220>
 800dd30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd34:	f04f 0901 	mov.w	r9, #1
 800dd38:	4623      	mov	r3, r4
 800dd3a:	469a      	mov	sl, r3
 800dd3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd40:	b10a      	cbz	r2, 800dd46 <_vfiprintf_r+0x86>
 800dd42:	2a25      	cmp	r2, #37	; 0x25
 800dd44:	d1f9      	bne.n	800dd3a <_vfiprintf_r+0x7a>
 800dd46:	ebba 0b04 	subs.w	fp, sl, r4
 800dd4a:	d00b      	beq.n	800dd64 <_vfiprintf_r+0xa4>
 800dd4c:	465b      	mov	r3, fp
 800dd4e:	4622      	mov	r2, r4
 800dd50:	4629      	mov	r1, r5
 800dd52:	4630      	mov	r0, r6
 800dd54:	f7ff ffa2 	bl	800dc9c <__sfputs_r>
 800dd58:	3001      	adds	r0, #1
 800dd5a:	f000 80a9 	beq.w	800deb0 <_vfiprintf_r+0x1f0>
 800dd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd60:	445a      	add	r2, fp
 800dd62:	9209      	str	r2, [sp, #36]	; 0x24
 800dd64:	f89a 3000 	ldrb.w	r3, [sl]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f000 80a1 	beq.w	800deb0 <_vfiprintf_r+0x1f0>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	f04f 32ff 	mov.w	r2, #4294967295
 800dd74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd78:	f10a 0a01 	add.w	sl, sl, #1
 800dd7c:	9304      	str	r3, [sp, #16]
 800dd7e:	9307      	str	r3, [sp, #28]
 800dd80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd84:	931a      	str	r3, [sp, #104]	; 0x68
 800dd86:	4654      	mov	r4, sl
 800dd88:	2205      	movs	r2, #5
 800dd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8e:	4854      	ldr	r0, [pc, #336]	; (800dee0 <_vfiprintf_r+0x220>)
 800dd90:	f7f2 fa56 	bl	8000240 <memchr>
 800dd94:	9a04      	ldr	r2, [sp, #16]
 800dd96:	b9d8      	cbnz	r0, 800ddd0 <_vfiprintf_r+0x110>
 800dd98:	06d1      	lsls	r1, r2, #27
 800dd9a:	bf44      	itt	mi
 800dd9c:	2320      	movmi	r3, #32
 800dd9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dda2:	0713      	lsls	r3, r2, #28
 800dda4:	bf44      	itt	mi
 800dda6:	232b      	movmi	r3, #43	; 0x2b
 800dda8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddac:	f89a 3000 	ldrb.w	r3, [sl]
 800ddb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddb2:	d015      	beq.n	800dde0 <_vfiprintf_r+0x120>
 800ddb4:	9a07      	ldr	r2, [sp, #28]
 800ddb6:	4654      	mov	r4, sl
 800ddb8:	2000      	movs	r0, #0
 800ddba:	f04f 0c0a 	mov.w	ip, #10
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddc4:	3b30      	subs	r3, #48	; 0x30
 800ddc6:	2b09      	cmp	r3, #9
 800ddc8:	d94d      	bls.n	800de66 <_vfiprintf_r+0x1a6>
 800ddca:	b1b0      	cbz	r0, 800ddfa <_vfiprintf_r+0x13a>
 800ddcc:	9207      	str	r2, [sp, #28]
 800ddce:	e014      	b.n	800ddfa <_vfiprintf_r+0x13a>
 800ddd0:	eba0 0308 	sub.w	r3, r0, r8
 800ddd4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	46a2      	mov	sl, r4
 800ddde:	e7d2      	b.n	800dd86 <_vfiprintf_r+0xc6>
 800dde0:	9b03      	ldr	r3, [sp, #12]
 800dde2:	1d19      	adds	r1, r3, #4
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	9103      	str	r1, [sp, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	bfbb      	ittet	lt
 800ddec:	425b      	neglt	r3, r3
 800ddee:	f042 0202 	orrlt.w	r2, r2, #2
 800ddf2:	9307      	strge	r3, [sp, #28]
 800ddf4:	9307      	strlt	r3, [sp, #28]
 800ddf6:	bfb8      	it	lt
 800ddf8:	9204      	strlt	r2, [sp, #16]
 800ddfa:	7823      	ldrb	r3, [r4, #0]
 800ddfc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddfe:	d10c      	bne.n	800de1a <_vfiprintf_r+0x15a>
 800de00:	7863      	ldrb	r3, [r4, #1]
 800de02:	2b2a      	cmp	r3, #42	; 0x2a
 800de04:	d134      	bne.n	800de70 <_vfiprintf_r+0x1b0>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	1d1a      	adds	r2, r3, #4
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	9203      	str	r2, [sp, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	bfb8      	it	lt
 800de12:	f04f 33ff 	movlt.w	r3, #4294967295
 800de16:	3402      	adds	r4, #2
 800de18:	9305      	str	r3, [sp, #20]
 800de1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800def0 <_vfiprintf_r+0x230>
 800de1e:	7821      	ldrb	r1, [r4, #0]
 800de20:	2203      	movs	r2, #3
 800de22:	4650      	mov	r0, sl
 800de24:	f7f2 fa0c 	bl	8000240 <memchr>
 800de28:	b138      	cbz	r0, 800de3a <_vfiprintf_r+0x17a>
 800de2a:	9b04      	ldr	r3, [sp, #16]
 800de2c:	eba0 000a 	sub.w	r0, r0, sl
 800de30:	2240      	movs	r2, #64	; 0x40
 800de32:	4082      	lsls	r2, r0
 800de34:	4313      	orrs	r3, r2
 800de36:	3401      	adds	r4, #1
 800de38:	9304      	str	r3, [sp, #16]
 800de3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de3e:	4829      	ldr	r0, [pc, #164]	; (800dee4 <_vfiprintf_r+0x224>)
 800de40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de44:	2206      	movs	r2, #6
 800de46:	f7f2 f9fb 	bl	8000240 <memchr>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d03f      	beq.n	800dece <_vfiprintf_r+0x20e>
 800de4e:	4b26      	ldr	r3, [pc, #152]	; (800dee8 <_vfiprintf_r+0x228>)
 800de50:	bb1b      	cbnz	r3, 800de9a <_vfiprintf_r+0x1da>
 800de52:	9b03      	ldr	r3, [sp, #12]
 800de54:	3307      	adds	r3, #7
 800de56:	f023 0307 	bic.w	r3, r3, #7
 800de5a:	3308      	adds	r3, #8
 800de5c:	9303      	str	r3, [sp, #12]
 800de5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de60:	443b      	add	r3, r7
 800de62:	9309      	str	r3, [sp, #36]	; 0x24
 800de64:	e768      	b.n	800dd38 <_vfiprintf_r+0x78>
 800de66:	fb0c 3202 	mla	r2, ip, r2, r3
 800de6a:	460c      	mov	r4, r1
 800de6c:	2001      	movs	r0, #1
 800de6e:	e7a6      	b.n	800ddbe <_vfiprintf_r+0xfe>
 800de70:	2300      	movs	r3, #0
 800de72:	3401      	adds	r4, #1
 800de74:	9305      	str	r3, [sp, #20]
 800de76:	4619      	mov	r1, r3
 800de78:	f04f 0c0a 	mov.w	ip, #10
 800de7c:	4620      	mov	r0, r4
 800de7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de82:	3a30      	subs	r2, #48	; 0x30
 800de84:	2a09      	cmp	r2, #9
 800de86:	d903      	bls.n	800de90 <_vfiprintf_r+0x1d0>
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d0c6      	beq.n	800de1a <_vfiprintf_r+0x15a>
 800de8c:	9105      	str	r1, [sp, #20]
 800de8e:	e7c4      	b.n	800de1a <_vfiprintf_r+0x15a>
 800de90:	fb0c 2101 	mla	r1, ip, r1, r2
 800de94:	4604      	mov	r4, r0
 800de96:	2301      	movs	r3, #1
 800de98:	e7f0      	b.n	800de7c <_vfiprintf_r+0x1bc>
 800de9a:	ab03      	add	r3, sp, #12
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	462a      	mov	r2, r5
 800dea0:	4b12      	ldr	r3, [pc, #72]	; (800deec <_vfiprintf_r+0x22c>)
 800dea2:	a904      	add	r1, sp, #16
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7fb ff3f 	bl	8009d28 <_printf_float>
 800deaa:	4607      	mov	r7, r0
 800deac:	1c78      	adds	r0, r7, #1
 800deae:	d1d6      	bne.n	800de5e <_vfiprintf_r+0x19e>
 800deb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deb2:	07d9      	lsls	r1, r3, #31
 800deb4:	d405      	bmi.n	800dec2 <_vfiprintf_r+0x202>
 800deb6:	89ab      	ldrh	r3, [r5, #12]
 800deb8:	059a      	lsls	r2, r3, #22
 800deba:	d402      	bmi.n	800dec2 <_vfiprintf_r+0x202>
 800debc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800debe:	f7fc fe85 	bl	800abcc <__retarget_lock_release_recursive>
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	065b      	lsls	r3, r3, #25
 800dec6:	f53f af1d 	bmi.w	800dd04 <_vfiprintf_r+0x44>
 800deca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800decc:	e71c      	b.n	800dd08 <_vfiprintf_r+0x48>
 800dece:	ab03      	add	r3, sp, #12
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	462a      	mov	r2, r5
 800ded4:	4b05      	ldr	r3, [pc, #20]	; (800deec <_vfiprintf_r+0x22c>)
 800ded6:	a904      	add	r1, sp, #16
 800ded8:	4630      	mov	r0, r6
 800deda:	f7fc f9ad 	bl	800a238 <_printf_i>
 800dede:	e7e4      	b.n	800deaa <_vfiprintf_r+0x1ea>
 800dee0:	08019251 	.word	0x08019251
 800dee4:	0801925b 	.word	0x0801925b
 800dee8:	08009d29 	.word	0x08009d29
 800deec:	0800dc9d 	.word	0x0800dc9d
 800def0:	08019257 	.word	0x08019257

0800def4 <__swbuf_r>:
 800def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def6:	460e      	mov	r6, r1
 800def8:	4614      	mov	r4, r2
 800defa:	4605      	mov	r5, r0
 800defc:	b118      	cbz	r0, 800df06 <__swbuf_r+0x12>
 800defe:	6a03      	ldr	r3, [r0, #32]
 800df00:	b90b      	cbnz	r3, 800df06 <__swbuf_r+0x12>
 800df02:	f7fc fd4b 	bl	800a99c <__sinit>
 800df06:	69a3      	ldr	r3, [r4, #24]
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	071a      	lsls	r2, r3, #28
 800df0e:	d525      	bpl.n	800df5c <__swbuf_r+0x68>
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	b31b      	cbz	r3, 800df5c <__swbuf_r+0x68>
 800df14:	6823      	ldr	r3, [r4, #0]
 800df16:	6922      	ldr	r2, [r4, #16]
 800df18:	1a98      	subs	r0, r3, r2
 800df1a:	6963      	ldr	r3, [r4, #20]
 800df1c:	b2f6      	uxtb	r6, r6
 800df1e:	4283      	cmp	r3, r0
 800df20:	4637      	mov	r7, r6
 800df22:	dc04      	bgt.n	800df2e <__swbuf_r+0x3a>
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f7ff fa38 	bl	800d39c <_fflush_r>
 800df2c:	b9e0      	cbnz	r0, 800df68 <__swbuf_r+0x74>
 800df2e:	68a3      	ldr	r3, [r4, #8]
 800df30:	3b01      	subs	r3, #1
 800df32:	60a3      	str	r3, [r4, #8]
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	6022      	str	r2, [r4, #0]
 800df3a:	701e      	strb	r6, [r3, #0]
 800df3c:	6962      	ldr	r2, [r4, #20]
 800df3e:	1c43      	adds	r3, r0, #1
 800df40:	429a      	cmp	r2, r3
 800df42:	d004      	beq.n	800df4e <__swbuf_r+0x5a>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	07db      	lsls	r3, r3, #31
 800df48:	d506      	bpl.n	800df58 <__swbuf_r+0x64>
 800df4a:	2e0a      	cmp	r6, #10
 800df4c:	d104      	bne.n	800df58 <__swbuf_r+0x64>
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f7ff fa23 	bl	800d39c <_fflush_r>
 800df56:	b938      	cbnz	r0, 800df68 <__swbuf_r+0x74>
 800df58:	4638      	mov	r0, r7
 800df5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df5c:	4621      	mov	r1, r4
 800df5e:	4628      	mov	r0, r5
 800df60:	f000 f806 	bl	800df70 <__swsetup_r>
 800df64:	2800      	cmp	r0, #0
 800df66:	d0d5      	beq.n	800df14 <__swbuf_r+0x20>
 800df68:	f04f 37ff 	mov.w	r7, #4294967295
 800df6c:	e7f4      	b.n	800df58 <__swbuf_r+0x64>
	...

0800df70 <__swsetup_r>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	4b2a      	ldr	r3, [pc, #168]	; (800e01c <__swsetup_r+0xac>)
 800df74:	4605      	mov	r5, r0
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	460c      	mov	r4, r1
 800df7a:	b118      	cbz	r0, 800df84 <__swsetup_r+0x14>
 800df7c:	6a03      	ldr	r3, [r0, #32]
 800df7e:	b90b      	cbnz	r3, 800df84 <__swsetup_r+0x14>
 800df80:	f7fc fd0c 	bl	800a99c <__sinit>
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df8a:	0718      	lsls	r0, r3, #28
 800df8c:	d422      	bmi.n	800dfd4 <__swsetup_r+0x64>
 800df8e:	06d9      	lsls	r1, r3, #27
 800df90:	d407      	bmi.n	800dfa2 <__swsetup_r+0x32>
 800df92:	2309      	movs	r3, #9
 800df94:	602b      	str	r3, [r5, #0]
 800df96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	e034      	b.n	800e00c <__swsetup_r+0x9c>
 800dfa2:	0758      	lsls	r0, r3, #29
 800dfa4:	d512      	bpl.n	800dfcc <__swsetup_r+0x5c>
 800dfa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfa8:	b141      	cbz	r1, 800dfbc <__swsetup_r+0x4c>
 800dfaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfae:	4299      	cmp	r1, r3
 800dfb0:	d002      	beq.n	800dfb8 <__swsetup_r+0x48>
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f7fd fc14 	bl	800b7e0 <_free_r>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	6363      	str	r3, [r4, #52]	; 0x34
 800dfbc:	89a3      	ldrh	r3, [r4, #12]
 800dfbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfc2:	81a3      	strh	r3, [r4, #12]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	6063      	str	r3, [r4, #4]
 800dfc8:	6923      	ldr	r3, [r4, #16]
 800dfca:	6023      	str	r3, [r4, #0]
 800dfcc:	89a3      	ldrh	r3, [r4, #12]
 800dfce:	f043 0308 	orr.w	r3, r3, #8
 800dfd2:	81a3      	strh	r3, [r4, #12]
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	b94b      	cbnz	r3, 800dfec <__swsetup_r+0x7c>
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfe2:	d003      	beq.n	800dfec <__swsetup_r+0x7c>
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f000 f884 	bl	800e0f4 <__smakebuf_r>
 800dfec:	89a0      	ldrh	r0, [r4, #12]
 800dfee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dff2:	f010 0301 	ands.w	r3, r0, #1
 800dff6:	d00a      	beq.n	800e00e <__swsetup_r+0x9e>
 800dff8:	2300      	movs	r3, #0
 800dffa:	60a3      	str	r3, [r4, #8]
 800dffc:	6963      	ldr	r3, [r4, #20]
 800dffe:	425b      	negs	r3, r3
 800e000:	61a3      	str	r3, [r4, #24]
 800e002:	6923      	ldr	r3, [r4, #16]
 800e004:	b943      	cbnz	r3, 800e018 <__swsetup_r+0xa8>
 800e006:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e00a:	d1c4      	bne.n	800df96 <__swsetup_r+0x26>
 800e00c:	bd38      	pop	{r3, r4, r5, pc}
 800e00e:	0781      	lsls	r1, r0, #30
 800e010:	bf58      	it	pl
 800e012:	6963      	ldrpl	r3, [r4, #20]
 800e014:	60a3      	str	r3, [r4, #8]
 800e016:	e7f4      	b.n	800e002 <__swsetup_r+0x92>
 800e018:	2000      	movs	r0, #0
 800e01a:	e7f7      	b.n	800e00c <__swsetup_r+0x9c>
 800e01c:	20000070 	.word	0x20000070

0800e020 <_raise_r>:
 800e020:	291f      	cmp	r1, #31
 800e022:	b538      	push	{r3, r4, r5, lr}
 800e024:	4604      	mov	r4, r0
 800e026:	460d      	mov	r5, r1
 800e028:	d904      	bls.n	800e034 <_raise_r+0x14>
 800e02a:	2316      	movs	r3, #22
 800e02c:	6003      	str	r3, [r0, #0]
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e036:	b112      	cbz	r2, 800e03e <_raise_r+0x1e>
 800e038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e03c:	b94b      	cbnz	r3, 800e052 <_raise_r+0x32>
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 f830 	bl	800e0a4 <_getpid_r>
 800e044:	462a      	mov	r2, r5
 800e046:	4601      	mov	r1, r0
 800e048:	4620      	mov	r0, r4
 800e04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e04e:	f000 b817 	b.w	800e080 <_kill_r>
 800e052:	2b01      	cmp	r3, #1
 800e054:	d00a      	beq.n	800e06c <_raise_r+0x4c>
 800e056:	1c59      	adds	r1, r3, #1
 800e058:	d103      	bne.n	800e062 <_raise_r+0x42>
 800e05a:	2316      	movs	r3, #22
 800e05c:	6003      	str	r3, [r0, #0]
 800e05e:	2001      	movs	r0, #1
 800e060:	e7e7      	b.n	800e032 <_raise_r+0x12>
 800e062:	2400      	movs	r4, #0
 800e064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e068:	4628      	mov	r0, r5
 800e06a:	4798      	blx	r3
 800e06c:	2000      	movs	r0, #0
 800e06e:	e7e0      	b.n	800e032 <_raise_r+0x12>

0800e070 <raise>:
 800e070:	4b02      	ldr	r3, [pc, #8]	; (800e07c <raise+0xc>)
 800e072:	4601      	mov	r1, r0
 800e074:	6818      	ldr	r0, [r3, #0]
 800e076:	f7ff bfd3 	b.w	800e020 <_raise_r>
 800e07a:	bf00      	nop
 800e07c:	20000070 	.word	0x20000070

0800e080 <_kill_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d07      	ldr	r5, [pc, #28]	; (800e0a0 <_kill_r+0x20>)
 800e084:	2300      	movs	r3, #0
 800e086:	4604      	mov	r4, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	4611      	mov	r1, r2
 800e08c:	602b      	str	r3, [r5, #0]
 800e08e:	f7f4 facf 	bl	8002630 <_kill>
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	d102      	bne.n	800e09c <_kill_r+0x1c>
 800e096:	682b      	ldr	r3, [r5, #0]
 800e098:	b103      	cbz	r3, 800e09c <_kill_r+0x1c>
 800e09a:	6023      	str	r3, [r4, #0]
 800e09c:	bd38      	pop	{r3, r4, r5, pc}
 800e09e:	bf00      	nop
 800e0a0:	200005d4 	.word	0x200005d4

0800e0a4 <_getpid_r>:
 800e0a4:	f7f4 babc 	b.w	8002620 <_getpid>

0800e0a8 <__swhatbuf_r>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b0:	2900      	cmp	r1, #0
 800e0b2:	b096      	sub	sp, #88	; 0x58
 800e0b4:	4615      	mov	r5, r2
 800e0b6:	461e      	mov	r6, r3
 800e0b8:	da0d      	bge.n	800e0d6 <__swhatbuf_r+0x2e>
 800e0ba:	89a3      	ldrh	r3, [r4, #12]
 800e0bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e0c0:	f04f 0100 	mov.w	r1, #0
 800e0c4:	bf0c      	ite	eq
 800e0c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e0ca:	2340      	movne	r3, #64	; 0x40
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	6031      	str	r1, [r6, #0]
 800e0d0:	602b      	str	r3, [r5, #0]
 800e0d2:	b016      	add	sp, #88	; 0x58
 800e0d4:	bd70      	pop	{r4, r5, r6, pc}
 800e0d6:	466a      	mov	r2, sp
 800e0d8:	f000 f848 	bl	800e16c <_fstat_r>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	dbec      	blt.n	800e0ba <__swhatbuf_r+0x12>
 800e0e0:	9901      	ldr	r1, [sp, #4]
 800e0e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e0e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e0ea:	4259      	negs	r1, r3
 800e0ec:	4159      	adcs	r1, r3
 800e0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0f2:	e7eb      	b.n	800e0cc <__swhatbuf_r+0x24>

0800e0f4 <__smakebuf_r>:
 800e0f4:	898b      	ldrh	r3, [r1, #12]
 800e0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0f8:	079d      	lsls	r5, r3, #30
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	d507      	bpl.n	800e110 <__smakebuf_r+0x1c>
 800e100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	6123      	str	r3, [r4, #16]
 800e108:	2301      	movs	r3, #1
 800e10a:	6163      	str	r3, [r4, #20]
 800e10c:	b002      	add	sp, #8
 800e10e:	bd70      	pop	{r4, r5, r6, pc}
 800e110:	ab01      	add	r3, sp, #4
 800e112:	466a      	mov	r2, sp
 800e114:	f7ff ffc8 	bl	800e0a8 <__swhatbuf_r>
 800e118:	9900      	ldr	r1, [sp, #0]
 800e11a:	4605      	mov	r5, r0
 800e11c:	4630      	mov	r0, r6
 800e11e:	f7fd fbd3 	bl	800b8c8 <_malloc_r>
 800e122:	b948      	cbnz	r0, 800e138 <__smakebuf_r+0x44>
 800e124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e128:	059a      	lsls	r2, r3, #22
 800e12a:	d4ef      	bmi.n	800e10c <__smakebuf_r+0x18>
 800e12c:	f023 0303 	bic.w	r3, r3, #3
 800e130:	f043 0302 	orr.w	r3, r3, #2
 800e134:	81a3      	strh	r3, [r4, #12]
 800e136:	e7e3      	b.n	800e100 <__smakebuf_r+0xc>
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	6020      	str	r0, [r4, #0]
 800e13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	9b00      	ldr	r3, [sp, #0]
 800e144:	6163      	str	r3, [r4, #20]
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	6120      	str	r0, [r4, #16]
 800e14a:	b15b      	cbz	r3, 800e164 <__smakebuf_r+0x70>
 800e14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e150:	4630      	mov	r0, r6
 800e152:	f000 f81d 	bl	800e190 <_isatty_r>
 800e156:	b128      	cbz	r0, 800e164 <__smakebuf_r+0x70>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	f043 0301 	orr.w	r3, r3, #1
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	431d      	orrs	r5, r3
 800e168:	81a5      	strh	r5, [r4, #12]
 800e16a:	e7cf      	b.n	800e10c <__smakebuf_r+0x18>

0800e16c <_fstat_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d07      	ldr	r5, [pc, #28]	; (800e18c <_fstat_r+0x20>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	4611      	mov	r1, r2
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	f7f4 fab8 	bl	80026ee <_fstat>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d102      	bne.n	800e188 <_fstat_r+0x1c>
 800e182:	682b      	ldr	r3, [r5, #0]
 800e184:	b103      	cbz	r3, 800e188 <_fstat_r+0x1c>
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	bf00      	nop
 800e18c:	200005d4 	.word	0x200005d4

0800e190 <_isatty_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4d06      	ldr	r5, [pc, #24]	; (800e1ac <_isatty_r+0x1c>)
 800e194:	2300      	movs	r3, #0
 800e196:	4604      	mov	r4, r0
 800e198:	4608      	mov	r0, r1
 800e19a:	602b      	str	r3, [r5, #0]
 800e19c:	f7f4 fab7 	bl	800270e <_isatty>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_isatty_r+0x1a>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_isatty_r+0x1a>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	200005d4 	.word	0x200005d4

0800e1b0 <_init>:
 800e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b2:	bf00      	nop
 800e1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b6:	bc08      	pop	{r3}
 800e1b8:	469e      	mov	lr, r3
 800e1ba:	4770      	bx	lr

0800e1bc <_fini>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	bf00      	nop
 800e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c2:	bc08      	pop	{r3}
 800e1c4:	469e      	mov	lr, r3
 800e1c6:	4770      	bx	lr
