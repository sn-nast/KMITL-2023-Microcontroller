
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800a050  0800a050  0001a050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7c8  0800a7c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7d0  0800a7d0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7d0  0800a7d0  0001a7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7d4  0800a7d4  0001a7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d8  0800a9b0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800a9b0  00020490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156cd  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003427  00000000  00000000  00035916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00038d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec1  00000000  00000000  0003a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af96  00000000  00000000  0003af29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a377  00000000  00000000  00065ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100f28  00000000  00000000  00080236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006224  00000000  00000000  00181160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00187384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a038 	.word	0x0800a038

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800a038 	.word	0x0800a038

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <fillScreenColor>:
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

void fillScreenColor(uint16_t color)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fdfb 	bl	80025dc <ILI9341_Fill_Screen>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <setRotation>:

void setRotation(uint8_t rotation)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fbe4 	bl	80021c8 <ILI9341_Set_Rotation>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <drawText>:

void drawText(const char *text, uint8_t x, uint8_t y, uint16_t size)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	4608      	mov	r0, r1
 8000a12:	4611      	mov	r1, r2
 8000a14:	461a      	mov	r2, r3
 8000a16:	4603      	mov	r3, r0
 8000a18:	70fb      	strb	r3, [r7, #3]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	70bb      	strb	r3, [r7, #2]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, BLACK, size, WHITE);
 8000a22:	78ba      	ldrb	r2, [r7, #2]
 8000a24:	78f9      	ldrb	r1, [r7, #3]
 8000a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	883b      	ldrh	r3, [r7, #0]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f001 fac8 	bl	8001fc8 <ILI9341_Draw_Text>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <drawTextByPoint>:

void drawTextByPoint(const char *text, Point position, uint16_t size)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	8139      	strh	r1, [r7, #8]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	80fb      	strh	r3, [r7, #6]
	drawText(text, position.x, position.y, size);
 8000a4e:	7a39      	ldrb	r1, [r7, #8]
 8000a50:	7a7a      	ldrb	r2, [r7, #9]
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff ffd7 	bl	8000a08 <drawText>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <drawFilledRectangleByCoord>:
{
	ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1, y1, color);
}

void drawFilledRectangleByCoord(Rectangle rectangle, uint16_t color)
{
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b087      	sub	sp, #28
 8000a66:	af02      	add	r7, sp, #8
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a70:	4613      	mov	r3, r2
 8000a72:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(rectangle.x0, rectangle.y0, rectangle.x1, rectangle.y1, color);
 8000a74:	8938      	ldrh	r0, [r7, #8]
 8000a76:	8979      	ldrh	r1, [r7, #10]
 8000a78:	89ba      	ldrh	r2, [r7, #12]
 8000a7a:	89fc      	ldrh	r4, [r7, #14]
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	4623      	mov	r3, r4
 8000a82:	f001 f9a8 	bl	8001dd6 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}

08000a8e <drawFilledCircleByCoord>:
{
	ILI9341_Draw_Filled_Circle(x, y, radius, color);
}

void drawFilledCircleByCoord(Circle circle, uint16_t color)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Circle(circle.x, circle.y, circle.radius, color);
 8000aa0:	8938      	ldrh	r0, [r7, #8]
 8000aa2:	8979      	ldrh	r1, [r7, #10]
 8000aa4:	89ba      	ldrh	r2, [r7, #12]
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	f001 f90d 	bl	8001cc6 <ILI9341_Draw_Filled_Circle>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <getCircleEdgeX>:
	ILI9341_Draw_Image(imageArray, orientation);
}


uint16_t getCircleEdgeX(Circle circle)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	463b      	mov	r3, r7
 8000abc:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x + circle.radius;
 8000ac0:	883a      	ldrh	r2, [r7, #0]
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b29b      	uxth	r3, r3
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <getCircleEdgeY>:

uint16_t getCircleEdgeY(Circle circle)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	463b      	mov	r3, r7
 8000adc:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y + circle.radius;
 8000ae0:	887a      	ldrh	r2, [r7, #2]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	b29b      	uxth	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <getCircleEdgeXNegative>:

uint16_t getCircleEdgeXNegative(Circle circle)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	463b      	mov	r3, r7
 8000afc:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x - circle.radius;
 8000b00:	883a      	ldrh	r2, [r7, #0]
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <getCircleEdgeYNegative>:


uint16_t getCircleEdgeYNegative(Circle circle)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y - circle.radius;
 8000b20:	887a      	ldrh	r2, [r7, #2]
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <MX_GPIO_Init>:
 PC5   ------> ETH_RXD1
 PB13   ------> ETH_TXD1
 PG11   ------> ETH_TX_EN
 PG13   ------> ETH_TXD0
 */
void MX_GPIO_Init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	4b8d      	ldr	r3, [pc, #564]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a8c      	ldr	r2, [pc, #560]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b8a      	ldr	r3, [pc, #552]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	623b      	str	r3, [r7, #32]
 8000b60:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a86      	ldr	r2, [pc, #536]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	4b81      	ldr	r3, [pc, #516]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a80      	ldr	r2, [pc, #512]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b7e      	ldr	r3, [pc, #504]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0320 	and.w	r3, r3, #32
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b7b      	ldr	r3, [pc, #492]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a7a      	ldr	r2, [pc, #488]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b78      	ldr	r3, [pc, #480]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b75      	ldr	r3, [pc, #468]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a74      	ldr	r2, [pc, #464]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b72      	ldr	r3, [pc, #456]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a6e      	ldr	r2, [pc, #440]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a68      	ldr	r2, [pc, #416]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b66      	ldr	r3, [pc, #408]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf2:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a62      	ldr	r2, [pc, #392]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, T_CLK_Pin | T_MOSI_Pin | T_CS_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2168      	movs	r1, #104	; 0x68
 8000c0e:	485d      	ldr	r0, [pc, #372]	; (8000d84 <MX_GPIO_Init+0x250>)
 8000c10:	f002 faa8 	bl	8003164 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c1a:	485b      	ldr	r0, [pc, #364]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000c1c:	f002 faa2 	bl	8003164 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4859      	ldr	r0, [pc, #356]	; (8000d8c <MX_GPIO_Init+0x258>)
 8000c26:	f002 fa9d 	bl	8003164 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000c30:	4857      	ldr	r0, [pc, #348]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000c32:	f002 fa97 	bl	8003164 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin */
	GPIO_InitStruct.Pin = T_IRQ_Pin | T_MISO_Pin;
 8000c36:	2314      	movs	r3, #20
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	484e      	ldr	r0, [pc, #312]	; (8000d84 <MX_GPIO_Init+0x250>)
 8000c4a:	f002 f8c7 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = T_CLK_Pin | T_MOSI_Pin | T_CS_Pin;
 8000c4e:	2368      	movs	r3, #104	; 0x68
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4847      	ldr	r0, [pc, #284]	; (8000d84 <MX_GPIO_Init+0x250>)
 8000c66:	f002 f8b9 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4844      	ldr	r0, [pc, #272]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000c80:	f002 f8ac 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	483c      	ldr	r0, [pc, #240]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000ca0:	f002 f89c 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000ca4:	2386      	movs	r3, #134	; 0x86
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4835      	ldr	r0, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x260>)
 8000cc0:	f002 f88c 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4829      	ldr	r0, [pc, #164]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000ce2:	f002 f87b 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8000ce6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4822      	ldr	r0, [pc, #136]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000d00:	f002 f86c 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_GPIO_Init+0x258>)
 8000d1c:	f002 f85e 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <MX_GPIO_Init+0x258>)
 8000d34:	f002 f852 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = CS_Pin | DC_Pin | RST_Pin;
 8000d38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000d52:	f002 f843 	bl	8002ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000d56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_GPIO_Init+0x258>)
 8000d74:	f002 f832 	bl	8002ddc <HAL_GPIO_Init>

}
 8000d78:	bf00      	nop
 8000d7a:	3738      	adds	r7, #56	; 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020000 	.word	0x40020000

08000d98 <SCB_EnableICache>:
	/**
	 \brief   Enable I-Cache
	 \details Turns on I-Cache
	 */
	__STATIC_INLINE void SCB_EnableICache(void)
	{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
 \details Acts as a special kind of Data Memory Barrier.
 It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
	__ASM volatile ("dsb 0xF":::"memory");
 8000d9c:	f3bf 8f4f 	dsb	sy
}
 8000da0:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000da2:	f3bf 8f6f 	isb	sy
}
 8000da6:	bf00      	nop
#if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <SCB_EnableICache+0x48>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8000db0:	f3bf 8f4f 	dsb	sy
}
 8000db4:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000db6:	f3bf 8f6f 	isb	sy
}
 8000dba:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SCB_EnableICache+0x48>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <SCB_EnableICache+0x48>)
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc6:	6153      	str	r3, [r2, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
}
 8000dcc:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000dce:	f3bf 8f6f 	isb	sy
}
 8000dd2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
	}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <SCB_EnableDCache>:
	/**
	 \brief   Enable D-Cache
	 \details Turns on D-Cache
	 */
	__STATIC_INLINE void SCB_EnableDCache(void)
	{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <SCB_EnableDCache+0x84>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	__ASM volatile ("dsb 0xF":::"memory");
 8000df2:	f3bf 8f4f 	dsb	sy
}
 8000df6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <SCB_EnableDCache+0x84>)
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dfe:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0b5b      	lsrs	r3, r3, #13
 8000e04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e08:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e12:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e1c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e22:	4911      	ldr	r1, [pc, #68]	; (8000e68 <SCB_EnableDCache+0x84>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	60ba      	str	r2, [r7, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1ef      	bne.n	8000e14 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	60fa      	str	r2, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1e5      	bne.n	8000e0a <SCB_EnableDCache+0x26>
	__ASM volatile ("dsb 0xF":::"memory");
 8000e3e:	f3bf 8f4f 	dsb	sy
}
 8000e42:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <SCB_EnableDCache+0x84>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <SCB_EnableDCache+0x84>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6153      	str	r3, [r2, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8000e50:	f3bf 8f4f 	dsb	sy
}
 8000e54:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000e56:	f3bf 8f6f 	isb	sy
}
 8000e5a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
	}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <getTemperature>:
	sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
	ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
	HAL_Delay(10000);
}

void getTemperature(double *temperature) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	// In celcius
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <getTemperatureString>:

void getTemperatureString(double temperature, char *temperatureString) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e8a:	6078      	str	r0, [r7, #4]
	sprintf(temperatureString, "%.1f C", temperature);
 8000e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e90:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <getTemperatureString+0x20>)
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f005 fcfc 	bl	8006890 <siprintf>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	0800a0c0 	.word	0x0800a0c0

08000ea4 <getHumidity>:

void getHumidity(double *humidity) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	// In Relative Humidity, %RH
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <getHumidityString>:

void getHumidityString(double humidity, char *humidityString) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ec2:	6078      	str	r0, [r7, #4]
	sprintf(humidityString, "%.1f %%RH", humidity);
 8000ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ec8:	4903      	ldr	r1, [pc, #12]	; (8000ed8 <getHumidityString+0x20>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f005 fce0 	bl	8006890 <siprintf>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	0800a0c8 	.word	0x0800a0c8

08000edc <drawRgbInfo>:
void drawHueCircle(uint16_t color) {
	Circle circle = { SCREEN_WIDTH / 2 - 25, 45, 25 };
	drawFilledCircleByCoord(circle, color);
}

void drawRgbInfo(ColorIntensity redIntensity, ColorIntensity greenIntensity, ColorIntensity blueIntensity) {
 8000edc:	b082      	sub	sp, #8
 8000ede:	b590      	push	{r4, r7, lr}
 8000ee0:	b095      	sub	sp, #84	; 0x54
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	1d3c      	adds	r4, r7, #4
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000eea:	667b      	str	r3, [r7, #100]	; 0x64
	const uint16_t BRIGHT_RED = 0xff3c;
 8000eec:	f64f 733c 	movw	r3, #65340	; 0xff3c
 8000ef0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	const uint16_t BRIGHT_GREEN = 0xcff9;
 8000ef4:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 8000ef8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	const uint16_t BRIGHT_BLUE = 0xe73f;
 8000efc:	f24e 733f 	movw	r3, #59199	; 0xe73f
 8000f00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const uint16_t BOX_WIDTH = 120;
 8000f04:	2378      	movs	r3, #120	; 0x78
 8000f06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	const uint16_t BOX_HEIGHT = 20;
 8000f0a:	2314      	movs	r3, #20
 8000f0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	const uint16_t GAP_Y = 20;
 8000f10:	2314      	movs	r3, #20
 8000f12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	drawFilledCircleByCoord(redIntensity.circle, RED);
 8000f16:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f20:	f7ff fdb5 	bl	8000a8e <drawFilledCircleByCoord>
	drawFilledCircleByCoord(greenIntensity.circle, GREEN);
 8000f24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000f28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f30:	f7ff fdad 	bl	8000a8e <drawFilledCircleByCoord>
	drawFilledCircleByCoord(blueIntensity.circle, BLUE);
 8000f34:	221f      	movs	r2, #31
 8000f36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f3e:	f7ff fda6 	bl	8000a8e <drawFilledCircleByCoord>

	Rectangle redBox =
	{
			getCircleEdgeX(redIntensity.circle) + GAP_Y,
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f48:	f7ff fdb4 	bl	8000ab4 <getCircleEdgeX>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000f54:	4413      	add	r3, r2
 8000f56:	b29b      	uxth	r3, r3
	Rectangle redBox =
 8000f58:	87bb      	strh	r3, [r7, #60]	; 0x3c
			redIntensity.circle.y - (redIntensity.circle.radius / 2),
 8000f5a:	88fa      	ldrh	r2, [r7, #6]
 8000f5c:	893b      	ldrh	r3, [r7, #8]
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b29b      	uxth	r3, r3
	Rectangle redBox =
 8000f66:	87fb      	strh	r3, [r7, #62]	; 0x3e
			getCircleEdgeX(redIntensity.circle) + BOX_WIDTH,
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f6e:	f7ff fda1 	bl	8000ab4 <getCircleEdgeX>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29b      	uxth	r3, r3
	Rectangle redBox =
 8000f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			redIntensity.circle.y + 20
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	3314      	adds	r3, #20
 8000f86:	b29b      	uxth	r3, r3
	Rectangle redBox =
 8000f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	};

	Rectangle greenBox =
	{
			getCircleEdgeX(greenIntensity.circle) + GAP_Y,
 8000f8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f94:	f7ff fd8e 	bl	8000ab4 <getCircleEdgeX>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 8000fa4:	86bb      	strh	r3, [r7, #52]	; 0x34
			greenIntensity.circle.y - (greenIntensity.circle.radius / 2),
 8000fa6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000faa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 8000fb6:	86fb      	strh	r3, [r7, #54]	; 0x36
			getCircleEdgeX(greenIntensity.circle) + BOX_WIDTH,
 8000fb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fc0:	f7ff fd78 	bl	8000ab4 <getCircleEdgeX>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 8000fd0:	873b      	strh	r3, [r7, #56]	; 0x38
			greenIntensity.circle.y + 20};
 8000fd2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000fd6:	3314      	adds	r3, #20
 8000fd8:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 8000fda:	877b      	strh	r3, [r7, #58]	; 0x3a

	Rectangle blueBox =
	{
			getCircleEdgeX(blueIntensity.circle) + GAP_Y,
 8000fdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fe4:	f7ff fd66 	bl	8000ab4 <getCircleEdgeX>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 8000ff4:	85bb      	strh	r3, [r7, #44]	; 0x2c
			blueIntensity.circle.y - (blueIntensity.circle.radius / 2),
 8000ff6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000ffa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	b29b      	uxth	r3, r3
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 8001006:	85fb      	strh	r3, [r7, #46]	; 0x2e
			getCircleEdgeX(blueIntensity.circle) + BOX_WIDTH,
 8001008:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800100c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001010:	f7ff fd50 	bl	8000ab4 <getCircleEdgeX>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800101c:	4413      	add	r3, r2
 800101e:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 8001020:	863b      	strh	r3, [r7, #48]	; 0x30
			blueIntensity.circle.y + 20
 8001022:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001026:	3314      	adds	r3, #20
 8001028:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 800102a:	867b      	strh	r3, [r7, #50]	; 0x32
	};

	Rectangle redIntensityBar =
	{
			redBox.x0, redBox.y0,
 800102c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
	Rectangle redIntensityBar =
 800102e:	84bb      	strh	r3, [r7, #36]	; 0x24
			redBox.x0, redBox.y0,
 8001030:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
	Rectangle redIntensityBar =
 8001032:	84fb      	strh	r3, [r7, #38]	; 0x26
			getCircleEdgeX(redIntensity.circle) + GAP_Y + (redIntensity.intensity*BOX_WIDTH) , redBox.y1
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	e893 0003 	ldmia.w	r3, {r0, r1}
 800103a:	f7ff fd3b 	bl	8000ab4 <getCircleEdgeX>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001046:	4413      	add	r3, r2
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001050:	edd7 6a03 	vldr	s13, [r7, #12]
 8001054:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
	Rectangle redIntensityBar =
 8001068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106c:	ee17 3a90 	vmov	r3, s15
 8001070:	b29b      	uxth	r3, r3
 8001072:	853b      	strh	r3, [r7, #40]	; 0x28
			getCircleEdgeX(redIntensity.circle) + GAP_Y + (redIntensity.intensity*BOX_WIDTH) , redBox.y1
 8001074:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
	Rectangle redIntensityBar =
 8001078:	857b      	strh	r3, [r7, #42]	; 0x2a
	};
	Rectangle greenIntensityBar =
	{
			greenBox.x0, greenBox.y0,
 800107a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
	Rectangle greenIntensityBar =
 800107c:	83bb      	strh	r3, [r7, #28]
			greenBox.x0, greenBox.y0,
 800107e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
	Rectangle greenIntensityBar =
 8001080:	83fb      	strh	r3, [r7, #30]
			getCircleEdgeX(greenIntensity.circle) + GAP_Y + (greenIntensity.intensity*BOX_WIDTH) , greenBox.y1
 8001082:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001086:	e893 0003 	ldmia.w	r3, {r0, r1}
 800108a:	f7ff fd13 	bl	8000ab4 <getCircleEdgeX>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001096:	4413      	add	r3, r2
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80010a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
	Rectangle greenIntensityBar =
 80010b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010bc:	ee17 3a90 	vmov	r3, s15
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	843b      	strh	r3, [r7, #32]
			getCircleEdgeX(greenIntensity.circle) + GAP_Y + (greenIntensity.intensity*BOX_WIDTH) , greenBox.y1
 80010c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
	Rectangle greenIntensityBar =
 80010c6:	847b      	strh	r3, [r7, #34]	; 0x22
	};
	Rectangle blueIntensityBar =
	{
			blueBox.x0, blueBox.y0,
 80010c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
	Rectangle blueIntensityBar =
 80010ca:	82bb      	strh	r3, [r7, #20]
			blueBox.x0, blueBox.y0,
 80010cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
	Rectangle blueIntensityBar =
 80010ce:	82fb      	strh	r3, [r7, #22]
			getCircleEdgeX(blueIntensity.circle) + GAP_Y + (blueIntensity.intensity*BOX_WIDTH) , blueBox.y1
 80010d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010d8:	f7ff fcec 	bl	8000ab4 <getCircleEdgeX>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80010e4:	4413      	add	r3, r2
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ee:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80010f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001102:	ee77 7a27 	vadd.f32	s15, s14, s15
	Rectangle blueIntensityBar =
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 3a90 	vmov	r3, s15
 800110e:	b29b      	uxth	r3, r3
 8001110:	833b      	strh	r3, [r7, #24]
			getCircleEdgeX(blueIntensity.circle) + GAP_Y + (blueIntensity.intensity*BOX_WIDTH) , blueBox.y1
 8001112:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
	Rectangle blueIntensityBar =
 8001114:	837b      	strh	r3, [r7, #26]
	};

	drawFilledRectangleByCoord(redBox, BRIGHT_RED);
 8001116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800111a:	461a      	mov	r2, r3
 800111c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001124:	f7ff fc9d 	bl	8000a62 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(greenBox, BRIGHT_GREEN);
 8001128:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800112c:	461a      	mov	r2, r3
 800112e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001136:	f7ff fc94 	bl	8000a62 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(blueBox, BRIGHT_BLUE);
 800113a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800113e:	461a      	mov	r2, r3
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001148:	f7ff fc8b 	bl	8000a62 <drawFilledRectangleByCoord>

	drawFilledRectangleByCoord(redIntensityBar, RED);
 800114c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001158:	f7ff fc83 	bl	8000a62 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(greenIntensityBar, GREEN);
 800115c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001168:	f7ff fc7b 	bl	8000a62 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(blueIntensityBar, BLUE);
 800116c:	221f      	movs	r2, #31
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001176:	f7ff fc74 	bl	8000a62 <drawFilledRectangleByCoord>

}
 800117a:	bf00      	nop
 800117c:	3754      	adds	r7, #84	; 0x54
 800117e:	46bd      	mov	sp, r7
 8001180:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001184:	b002      	add	sp, #8
 8001186:	4770      	bx	lr

08001188 <checkTouchHueCircle>:

void checkTouchHueCircle(ColorIntensity *redColor, ColorIntensity *greenColor, ColorIntensity *blueColor)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b098      	sub	sp, #96	; 0x60
 800118c:	af06      	add	r7, sp, #24
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	uint16_t xPos = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t yPos = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	while (1) {
		HAL_Delay(20);
 80011a0:	2014      	movs	r0, #20
 80011a2:	f001 fd11 	bl	8002bc8 <HAL_Delay>

		if (TP_Touchpad_Pressed()) {
 80011a6:	f001 fc99 	bl	8002adc <TP_Touchpad_Pressed>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8146 	beq.w	800143e <checkTouchHueCircle+0x2b6>


			char text[20];


			uint16_t redXPositive = getCircleEdgeX(redColor->circle);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011b8:	f7ff fc7c 	bl	8000ab4 <getCircleEdgeX>
 80011bc:	4603      	mov	r3, r0
 80011be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			uint16_t redXNegative = getCircleEdgeXNegative(redColor->circle);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011c8:	f7ff fc94 	bl	8000af4 <getCircleEdgeXNegative>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			uint16_t redYPositive = getCircleEdgeY(redColor->circle);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011d8:	f7ff fc7c 	bl	8000ad4 <getCircleEdgeY>
 80011dc:	4603      	mov	r3, r0
 80011de:	87fb      	strh	r3, [r7, #62]	; 0x3e
			uint16_t redYNegative = getCircleEdgeYNegative(redColor->circle);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011e6:	f7ff fc95 	bl	8000b14 <getCircleEdgeYNegative>
 80011ea:	4603      	mov	r3, r0
 80011ec:	87bb      	strh	r3, [r7, #60]	; 0x3c

			sprintf(text, "R: (%d, %d), (%d, %d)", redXNegative, redXPositive, redYNegative, redYPositive);
 80011ee:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80011f2:	f8b7 4042 	ldrh.w	r4, [r7, #66]	; 0x42
 80011f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80011f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80011fa:	f107 0018 	add.w	r0, r7, #24
 80011fe:	9201      	str	r2, [sp, #4]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4623      	mov	r3, r4
 8001204:	460a      	mov	r2, r1
 8001206:	4994      	ldr	r1, [pc, #592]	; (8001458 <checkTouchHueCircle+0x2d0>)
 8001208:	f005 fb42 	bl	8006890 <siprintf>
			drawText(text, 10, 40, 1);
 800120c:	f107 0018 	add.w	r0, r7, #24
 8001210:	2301      	movs	r3, #1
 8001212:	2228      	movs	r2, #40	; 0x28
 8001214:	210a      	movs	r1, #10
 8001216:	f7ff fbf7 	bl	8000a08 <drawText>

			uint16_t greenXPositive = getCircleEdgeX(greenColor->circle);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001220:	f7ff fc48 	bl	8000ab4 <getCircleEdgeX>
 8001224:	4603      	mov	r3, r0
 8001226:	877b      	strh	r3, [r7, #58]	; 0x3a
			uint16_t greenXNegative = getCircleEdgeXNegative(greenColor->circle);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800122e:	f7ff fc61 	bl	8000af4 <getCircleEdgeXNegative>
 8001232:	4603      	mov	r3, r0
 8001234:	873b      	strh	r3, [r7, #56]	; 0x38
			uint16_t greenYPositive = getCircleEdgeY(greenColor->circle);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	e893 0003 	ldmia.w	r3, {r0, r1}
 800123c:	f7ff fc4a 	bl	8000ad4 <getCircleEdgeY>
 8001240:	4603      	mov	r3, r0
 8001242:	86fb      	strh	r3, [r7, #54]	; 0x36
			uint16_t greenYNegative = getCircleEdgeYNegative(greenColor->circle);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	e893 0003 	ldmia.w	r3, {r0, r1}
 800124a:	f7ff fc63 	bl	8000b14 <getCircleEdgeYNegative>
 800124e:	4603      	mov	r3, r0
 8001250:	86bb      	strh	r3, [r7, #52]	; 0x34

			uint16_t blueXPositive = getCircleEdgeX(blueColor->circle);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001258:	f7ff fc2c 	bl	8000ab4 <getCircleEdgeX>
 800125c:	4603      	mov	r3, r0
 800125e:	867b      	strh	r3, [r7, #50]	; 0x32
			uint16_t blueXNegative = getCircleEdgeXNegative(blueColor->circle);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001266:	f7ff fc45 	bl	8000af4 <getCircleEdgeXNegative>
 800126a:	4603      	mov	r3, r0
 800126c:	863b      	strh	r3, [r7, #48]	; 0x30
			uint16_t blueYPositive = getCircleEdgeY(blueColor->circle);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001274:	f7ff fc2e 	bl	8000ad4 <getCircleEdgeY>
 8001278:	4603      	mov	r3, r0
 800127a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			uint16_t blueYNegative = getCircleEdgeYNegative(blueColor->circle);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001282:	f7ff fc47 	bl	8000b14 <getCircleEdgeYNegative>
 8001286:	4603      	mov	r3, r0
 8001288:	85bb      	strh	r3, [r7, #44]	; 0x2c

			uint16_t position_array[2];

			Point textPos = {10, 30};
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <checkTouchHueCircle+0x2d4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	823b      	strh	r3, [r7, #16]

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fb5f 	bl	8002958 <TP_Read_Coordinates>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <checkTouchHueCircle+0x124>
				xPos = position_array[0];
 80012a0:	8abb      	ldrh	r3, [r7, #20]
 80012a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				yPos = position_array[1];
 80012a6:	8afb      	ldrh	r3, [r7, #22]
 80012a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			}

			sprintf(text, "Touch: (%d, %d)", xPos, yPos);
 80012ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80012b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80012b4:	f107 0018 	add.w	r0, r7, #24
 80012b8:	4969      	ldr	r1, [pc, #420]	; (8001460 <checkTouchHueCircle+0x2d8>)
 80012ba:	f005 fae9 	bl	8006890 <siprintf>
			drawText(text, 10, 10, 2);
 80012be:	f107 0018 	add.w	r0, r7, #24
 80012c2:	2302      	movs	r3, #2
 80012c4:	220a      	movs	r2, #10
 80012c6:	210a      	movs	r1, #10
 80012c8:	f7ff fb9e 	bl	8000a08 <drawText>

			if (xPos > redXNegative && xPos < redXPositive && yPos > redYNegative && yPos < redYPositive)
 80012cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80012d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d932      	bls.n	800133e <checkTouchHueCircle+0x1b6>
 80012d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80012dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d22c      	bcs.n	800133e <checkTouchHueCircle+0x1b6>
 80012e4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80012e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d927      	bls.n	800133e <checkTouchHueCircle+0x1b6>
 80012ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80012f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d222      	bcs.n	800133e <checkTouchHueCircle+0x1b6>
			{
				if (redColor->intensity >= 1.0) {
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	db04      	blt.n	8001316 <checkTouchHueCircle+0x18e>
					redColor->intensity = 0.0;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e00d      	b.n	8001332 <checkTouchHueCircle+0x1aa>
				} else {
					redColor->intensity += 0.2;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	edd3 7a02 	vldr	s15, [r3, #8]
 800131c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001320:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001450 <checkTouchHueCircle+0x2c8>
 8001324:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001328:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				drawTextByPoint("Add Red", textPos, 2);
 8001332:	2202      	movs	r2, #2
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	484b      	ldr	r0, [pc, #300]	; (8001464 <checkTouchHueCircle+0x2dc>)
 8001338:	f7ff fb82 	bl	8000a40 <drawTextByPoint>
 800133c:	e06c      	b.n	8001418 <checkTouchHueCircle+0x290>
			} else if (xPos > greenXNegative && xPos < greenXPositive && yPos > greenYNegative && yPos < greenYPositive)
 800133e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001342:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001344:	429a      	cmp	r2, r3
 8001346:	d931      	bls.n	80013ac <checkTouchHueCircle+0x224>
 8001348:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800134c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800134e:	429a      	cmp	r2, r3
 8001350:	d22c      	bcs.n	80013ac <checkTouchHueCircle+0x224>
 8001352:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001356:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001358:	429a      	cmp	r2, r3
 800135a:	d927      	bls.n	80013ac <checkTouchHueCircle+0x224>
 800135c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001362:	429a      	cmp	r2, r3
 8001364:	d222      	bcs.n	80013ac <checkTouchHueCircle+0x224>
			{
				if (greenColor->intensity >= 1.0) {
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	edd3 7a02 	vldr	s15, [r3, #8]
 800136c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	db04      	blt.n	8001384 <checkTouchHueCircle+0x1fc>
					greenColor->intensity = 0.0;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	e00d      	b.n	80013a0 <checkTouchHueCircle+0x218>
				} else {
					greenColor->intensity += 0.2;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	edd3 7a02 	vldr	s15, [r3, #8]
 800138a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800138e:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001450 <checkTouchHueCircle+0x2c8>
 8001392:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001396:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				drawTextByPoint("Add Green", textPos, 2);
 80013a0:	2202      	movs	r2, #2
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	4830      	ldr	r0, [pc, #192]	; (8001468 <checkTouchHueCircle+0x2e0>)
 80013a6:	f7ff fb4b 	bl	8000a40 <drawTextByPoint>
 80013aa:	e035      	b.n	8001418 <checkTouchHueCircle+0x290>
			} else if (xPos > blueXNegative && xPos < blueXPositive && yPos > blueYNegative && yPos < blueYPositive)
 80013ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80013b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d930      	bls.n	8001418 <checkTouchHueCircle+0x290>
 80013b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80013ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013bc:	429a      	cmp	r2, r3
 80013be:	d22b      	bcs.n	8001418 <checkTouchHueCircle+0x290>
 80013c0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80013c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d926      	bls.n	8001418 <checkTouchHueCircle+0x290>
 80013ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80013ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d221      	bcs.n	8001418 <checkTouchHueCircle+0x290>
			{
				if (blueColor->intensity >= 1.0) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	db04      	blt.n	80013f2 <checkTouchHueCircle+0x26a>
					blueColor->intensity = 0.0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	e00d      	b.n	800140e <checkTouchHueCircle+0x286>
				} else {
					blueColor->intensity += 0.2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001450 <checkTouchHueCircle+0x2c8>
 8001400:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001404:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				drawTextByPoint("Add Blue", textPos, 2);
 800140e:	2202      	movs	r2, #2
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <checkTouchHueCircle+0x2e4>)
 8001414:	f7ff fb14 	bl	8000a40 <drawTextByPoint>
			}
			drawRgbInfo(*redColor, *greenColor, *blueColor);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	68fc      	ldr	r4, [r7, #12]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	ad02      	add	r5, sp, #8
 8001420:	ca07      	ldmia	r2, {r0, r1, r2}
 8001422:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001426:	466d      	mov	r5, sp
 8001428:	1d1a      	adds	r2, r3, #4
 800142a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001438:	f7ff fd50 	bl	8000edc <drawRgbInfo>
 800143c:	e6b0      	b.n	80011a0 <checkTouchHueCircle+0x18>
		} else {
			HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <checkTouchHueCircle+0x2e8>)
 8001446:	f001 fe8d 	bl	8003164 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800144a:	e6a9      	b.n	80011a0 <checkTouchHueCircle+0x18>
 800144c:	f3af 8000 	nop.w
 8001450:	9999999a 	.word	0x9999999a
 8001454:	3fc99999 	.word	0x3fc99999
 8001458:	0800a0dc 	.word	0x0800a0dc
 800145c:	0800a124 	.word	0x0800a124
 8001460:	0800a0f4 	.word	0x0800a0f4
 8001464:	0800a104 	.word	0x0800a104
 8001468:	0800a10c 	.word	0x0800a10c
 800146c:	0800a118 	.word	0x0800a118
 8001470:	40020400 	.word	0x40020400
 8001474:	00000000 	.word	0x00000000

08001478 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b09f      	sub	sp, #124	; 0x7c
 800147c:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800147e:	f7ff fc8b 	bl	8000d98 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8001482:	f7ff fcaf 	bl	8000de4 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001486:	f001 fb39 	bl	8002afc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800148a:	f000 f8ad 	bl	80015e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800148e:	f7ff fb51 	bl	8000b34 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001492:	f000 fb5f 	bl	8001b54 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 8001496:	f000 f965 	bl	8001764 <MX_SPI5_Init>
	MX_TIM1_Init();
 800149a:	f000 fae7 	bl	8001a6c <MX_TIM1_Init>
	MX_RNG_Init();
 800149e:	f000 f919 	bl	80016d4 <MX_RNG_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); // initial driver setup to drive ili9341
 80014a2:	f000 feef 	bl	8002284 <ILI9341_Init>

	double temperature = 25.8;
 80014a6:	a34c      	add	r3, pc, #304	; (adr r3, 80015d8 <main+0x160>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double humidity = 55.6;
 80014b0:	a34b      	add	r3, pc, #300	; (adr r3, 80015e0 <main+0x168>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	char temperatureString[10];
	char humidityString[10];

	uint16_t radius = 20;
 80014ba:	2314      	movs	r3, #20
 80014bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	ColorIntensity redColor = {{ 30, SCREEN_HEIGHT / 4 + 35, radius }, 0};
 80014c0:	231e      	movs	r3, #30
 80014c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014c4:	235f      	movs	r3, #95	; 0x5f
 80014c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80014cc:	853b      	strh	r3, [r7, #40]	; 0x28
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	ColorIntensity greenColor = {{ 30, getCircleEdgeY(redColor.circle) + radius + 15, radius }, 0};
 80014d4:	231e      	movs	r3, #30
 80014d6:	833b      	strh	r3, [r7, #24]
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e0:	f7ff faf8 	bl	8000ad4 <getCircleEdgeY>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80014ec:	4413      	add	r3, r2
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	330f      	adds	r3, #15
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	837b      	strh	r3, [r7, #26]
 80014f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80014fa:	83bb      	strh	r3, [r7, #28]
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
	ColorIntensity blueColor = {{ 30, getCircleEdgeY(greenColor.circle) + radius + 15, radius }, 0};
 8001502:	231e      	movs	r3, #30
 8001504:	81bb      	strh	r3, [r7, #12]
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800150e:	f7ff fae1 	bl	8000ad4 <getCircleEdgeY>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800151a:	4413      	add	r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	330f      	adds	r3, #15
 8001520:	b29b      	uxth	r3, r3
 8001522:	81fb      	strh	r3, [r7, #14]
 8001524:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001528:	823b      	strh	r3, [r7, #16]
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

//	Circle greenCircle = { 30, getCircleEdgeY(redCircle) + radius + 15, radius };
//	Circle blueCircle = { 30, getCircleEdgeY(greenCircle) + radius + 15, radius };

	getTemperature(&temperature);
 8001530:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fc99 	bl	8000e6c <getTemperature>
	getTemperatureString(temperature, temperatureString);
 800153a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800153e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001542:	4618      	mov	r0, r3
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f7ff fc9a 	bl	8000e80 <getTemperatureString>

	getHumidity(&humidity);
 800154c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fca7 	bl	8000ea4 <getHumidity>
	getHumidityString(humidity, humidityString);
 8001556:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800155a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155e:	4618      	mov	r0, r3
 8001560:	eeb0 0b47 	vmov.f64	d0, d7
 8001564:	f7ff fca8 	bl	8000eb8 <getHumidityString>

	Point temperaturePosition = { 25, 30 };
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <main+0x158>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	813b      	strh	r3, [r7, #8]
	Point humidityPosition = { SCREEN_WIDTH / 2 + 10, 30 };
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <main+0x15c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	80bb      	strh	r3, [r7, #4]

	int fontSize = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	65bb      	str	r3, [r7, #88]	; 0x58
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		fillScreenColor(WHITE);
 8001578:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800157c:	f7ff fa2a 	bl	80009d4 <fillScreenColor>
		setRotation(SCREEN_HORIZONTAL_1);
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fa34 	bl	80009ee <setRotation>
//		drawTextByPoint(temperatureString, temperaturePosition, fontSize);
//		drawHueCircle(MAGENTA);
//		drawTextByPoint(humidityString, humidityPosition, fontSize);
		drawRgbInfo(redColor, greenColor, blueColor);
 8001586:	ac02      	add	r4, sp, #8
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001594:	466a      	mov	r2, sp
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800159e:	e882 0003 	stmia.w	r2, {r0, r1}
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015aa:	f7ff fc97 	bl	8000edc <drawRgbInfo>

		checkTouchHueCircle(&redColor, &greenColor, &blueColor);
 80015ae:	f107 020c 	add.w	r2, r7, #12
 80015b2:	f107 0118 	add.w	r1, r7, #24
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fde4 	bl	8001188 <checkTouchHueCircle>
		HAL_Delay(5000);
 80015c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80015c4:	f001 fb00 	bl	8002bc8 <HAL_Delay>
		fillScreenColor(WHITE);
 80015c8:	e7d6      	b.n	8001578 <main+0x100>
 80015ca:	bf00      	nop
 80015cc:	f3af 8000 	nop.w
 80015d0:	0800a140 	.word	0x0800a140
 80015d4:	0800a144 	.word	0x0800a144
 80015d8:	cccccccd 	.word	0xcccccccd
 80015dc:	4039cccc 	.word	0x4039cccc
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	404bcccc 	.word	0x404bcccc

080015e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	; 0x50
 80015ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2234      	movs	r2, #52	; 0x34
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 f9ad 	bl	8006956 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800160c:	f001 fdc4 	bl	8003198 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <SystemClock_Config+0xd8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <SystemClock_Config+0xd8>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <SystemClock_Config+0xd8>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <SystemClock_Config+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <SystemClock_Config+0xdc>)
 800162e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <SystemClock_Config+0xdc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001648:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 200;
 8001658:	23c8      	movs	r3, #200	; 0xc8
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001660:	2309      	movs	r3, #9
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001664:	2302      	movs	r3, #2
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fdf3 	bl	8003258 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x94>
		Error_Handler();
 8001678:	f000 f826 	bl	80016c8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800167c:	f001 fd9c 	bl	80031b8 <HAL_PWREx_EnableOverDrive>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xa2>
		Error_Handler();
 8001686:	f000 f81f 	bl	80016c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800168a:	230f      	movs	r3, #15
 800168c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168e:	2302      	movs	r3, #2
 8001690:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800169a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2106      	movs	r1, #6
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 f883 	bl	80037b4 <HAL_RCC_ClockConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0xd0>
		Error_Handler();
 80016b4:	f000 f808 	bl	80016c8 <Error_Handler>
	}
}
 80016b8:	bf00      	nop
 80016ba:	3750      	adds	r7, #80	; 0x50
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000

080016c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	__ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_RNG_Init+0x20>)
 80016da:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <MX_RNG_Init+0x24>)
 80016dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_RNG_Init+0x20>)
 80016e0:	f002 feb6 	bl	8004450 <HAL_RNG_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80016ea:	f7ff ffed 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200001f4 	.word	0x200001f4
 80016f8:	50060800 	.word	0x50060800

080016fc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0a8      	sub	sp, #160	; 0xa0
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2290      	movs	r2, #144	; 0x90
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f005 f922 	bl	8006956 <memset>
  if(rngHandle->Instance==RNG)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_RNG_MspInit+0x60>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d11b      	bne.n	8001754 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800171c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001720:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fa67 	bl	8003c00 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001738:	f7ff ffc6 	bl	80016c8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_RNG_MspInit+0x64>)
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_RNG_MspInit+0x64>)
 8001742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001746:	6353      	str	r3, [r2, #52]	; 0x34
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RNG_MspInit+0x64>)
 800174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001754:	bf00      	nop
 8001756:	37a0      	adds	r7, #160	; 0xa0
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	50060800 	.word	0x50060800
 8001760:	40023800 	.word	0x40023800

08001764 <MX_SPI5_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	/* USER CODE END SPI5_Init 0 */

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	hspi5.Instance = SPI5;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_SPI5_Init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <MX_SPI5_Init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_SPI5_Init+0x74>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_SPI5_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_SPI5_Init+0x74>)
 800177e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001782:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_SPI5_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_SPI5_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_SPI5_Init+0x74>)
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_SPI5_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017b2:	2207      	movs	r2, #7
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_SPI5_Init+0x74>)
 80017c4:	f002 fe6e 	bl	80044a4 <HAL_SPI_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_SPI5_Init+0x6e>
		Error_Handler();
 80017ce:	f7ff ff7b 	bl	80016c8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000204 	.word	0x20000204
 80017dc:	40015000 	.word	0x40015000

080017e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI5) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x7c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_SPI_MspInit+0x74>
		/* USER CODE BEGIN SPI5_MspInit 0 */

		/* USER CODE END SPI5_MspInit 0 */
		/* SPI5 clock enable */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOF_CLK_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x80>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001820:	f043 0320 	orr.w	r3, r3, #32
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
		/**SPI5 GPIO Configuration
		 PF7     ------> SPI5_SCK
		 PF8     ------> SPI5_MISO
		 PF9     ------> SPI5_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001832:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001836:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001844:	2305      	movs	r3, #5
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_SPI_MspInit+0x84>)
 8001850:	f001 fac4 	bl	8002ddc <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI5_MspInit 1 */

		/* USER CODE END SPI5_MspInit 1 */
	}
}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40015000 	.word	0x40015000
 8001860:	40023800 	.word	0x40023800
 8001864:	40021400 	.word	0x40021400

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_MspInit+0x44>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_MspInit+0x44>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x44>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x44>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x44>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b4:	f001 f968 	bl	8002b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_kill>:

int _kill(int pid, int sig) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80018d6:	f005 f891 	bl	80069fc <__errno>
 80018da:	4603      	mov	r3, r0
 80018dc:	2216      	movs	r2, #22
 80018de:	601a      	str	r2, [r3, #0]
	return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_exit>:

void _exit(int status) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffe7 	bl	80018cc <_kill>
	while (1) {
 80018fe:	e7fe      	b.n	80018fe <_exit+0x12>

08001900 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
		*ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
	}

	return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
		__io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
	}
	return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file) {
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:

int _fstat(int file, struct stat *st) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199a:	605a      	str	r2, [r3, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file) {
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
		errno = ENOMEM;
 8001a0c:	f004 fff6 	bl	80069fc <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20080000 	.word	0x20080000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000268 	.word	0x20000268
 8001a44:	20000490 	.word	0x20000490

08001a48 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <MX_TIM1_Init>:
/* USER CODE END 0 */

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <MX_TIM1_Init+0xa4>)
 8001a8e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000 - 1;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001a92:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a96:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aaa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001aba:	f003 f895 	bl	8004be8 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x5c>
		Error_Handler();
 8001ac4:	f7ff fe00 	bl	80016c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001acc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001ad6:	f003 f8df 	bl	8004c98 <HAL_TIM_ConfigClockSource>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x78>
		Error_Handler();
 8001ae0:	f7ff fdf2 	bl	80016c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001af6:	f003 fad3 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001b00:	f7ff fde2 	bl	80016c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000026c 	.word	0x2000026c
 8001b10:	40010000 	.word	0x40010000

08001b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_TIM_Base_MspInit+0x38>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10b      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x2a>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_TIM_Base_MspInit+0x3c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_TIM_Base_MspInit+0x3c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_TIM_Base_MspInit+0x3c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40023800 	.word	0x40023800

08001b54 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <MX_USART3_UART_Init+0x5c>)
 8001b5c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b98:	f003 fb10 	bl	80051bc <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001ba2:	f7ff fd91 	bl	80016c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002b8 	.word	0x200002b8
 8001bb0:	40004800 	.word	0x40004800

08001bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0ae      	sub	sp, #184	; 0xb8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2290      	movs	r2, #144	; 0x90
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 febe 	bl	8006956 <memset>
	if (uartHandle->Instance == USART3) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d13c      	bne.n	8001c5e <HAL_UART_MspInit+0xaa>

		/* USER CODE END USART3_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be8:	617b      	str	r3, [r7, #20]
		PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 f804 	bl	8003c00 <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_MspInit+0x4e>
			Error_Handler();
 8001bfe:	f7ff fd63 	bl	80016c8 <Error_Handler>
		}

		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	; (8001c70 <HAL_UART_MspInit+0xbc>)
 8001c5a:	f001 f8bf 	bl	8002ddc <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001c5e:	bf00      	nop
 8001c60:	37b8      	adds	r7, #184	; 0xb8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40004800 	.word	0x40004800
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020c00 	.word	0x40020c00

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c7a:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c90:	4c0b      	ldr	r4, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9e:	f7ff fed3 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f004 feb1 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fbe7 	bl	8001478 <main>
  bx  lr    
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001cb8:	0800a7d8 	.word	0x0800a7d8
  ldr r2, =_sbss
 8001cbc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cc0:	20000490 	.word	0x20000490

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>

08001cc6 <ILI9341_Draw_Filled_Circle>:
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour)
{
 8001cc6:	b590      	push	{r4, r7, lr}
 8001cc8:	b08b      	sub	sp, #44	; 0x2c
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4604      	mov	r4, r0
 8001cce:	4608      	mov	r0, r1
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	4603      	mov	r3, r0
 8001cda:	80bb      	strh	r3, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	f1c3 0301 	rsb	r3, r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8001cfe:	e061      	b.n	8001dc4 <ILI9341_Draw_Filled_Circle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e018      	b.n	8001d3c <ILI9341_Draw_Filled_Circle+0x76>
		{
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	883a      	ldrh	r2, [r7, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f000 fc84 	bl	8002628 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	b298      	uxth	r0, r3
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	88ba      	ldrh	r2, [r7, #4]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	883a      	ldrh	r2, [r7, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f000 fc79 	bl	8002628 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dde0      	ble.n	8001d0a <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++)
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e018      	b.n	8001d84 <ILI9341_Draw_Filled_Circle+0xbe>
		{
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b298      	uxth	r0, r3
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	883a      	ldrh	r2, [r7, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	f000 fc60 	bl	8002628 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	b298      	uxth	r0, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	88ba      	ldrh	r2, [r7, #4]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	883a      	ldrh	r2, [r7, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f000 fc55 	bl	8002628 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3301      	adds	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	88fa      	ldrh	r2, [r7, #6]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	4413      	add	r3, r2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dde0      	ble.n	8001d52 <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	3301      	adds	r3, #1
 8001d94:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3302      	adds	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005a      	lsls	r2, r3, #1
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	4413      	add	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	dd09      	ble.n	8001dc4 <ILI9341_Draw_Filled_Circle+0xfe>
		{
			x--;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	3b01      	subs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	da99      	bge.n	8001d00 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	372c      	adds	r7, #44	; 0x2c
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}

08001dd6 <ILI9341_Draw_Filled_Rectangle_Coord>:
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8001dd6:	b590      	push	{r4, r7, lr}
 8001dd8:	b089      	sub	sp, #36	; 0x24
 8001dda:	af02      	add	r7, sp, #8
 8001ddc:	4604      	mov	r4, r0
 8001dde:	4608      	mov	r0, r1
 8001de0:	4611      	mov	r1, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	4623      	mov	r3, r4
 8001de6:	80fb      	strh	r3, [r7, #6]
 8001de8:	4603      	mov	r3, r0
 8001dea:	80bb      	strh	r3, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8001e10:	887a      	ldrh	r2, [r7, #2]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da01      	bge.n	8001e22 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8001e26:	883a      	ldrh	r2, [r7, #0]
 8001e28:	88bb      	ldrh	r3, [r7, #4]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da01      	bge.n	8001e38 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	823b      	strh	r3, [r7, #16]
 8001e4a:	e005      	b.n	8001e58 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8001e58:	7cbb      	ldrb	r3, [r7, #18]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8001e5e:	883a      	ldrh	r2, [r7, #0]
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8001e66:	88bb      	ldrh	r3, [r7, #4]
 8001e68:	81fb      	strh	r3, [r7, #14]
 8001e6a:	e005      	b.n	8001e78 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8001e6c:	88ba      	ldrh	r2, [r7, #4]
 8001e6e:	883b      	ldrh	r3, [r7, #0]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8001e74:	883b      	ldrh	r3, [r7, #0]
 8001e76:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8001e78:	8abc      	ldrh	r4, [r7, #20]
 8001e7a:	8afa      	ldrh	r2, [r7, #22]
 8001e7c:	89f9      	ldrh	r1, [r7, #14]
 8001e7e:	8a38      	ldrh	r0, [r7, #16]
 8001e80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4623      	mov	r3, r4
 8001e86:	f000 fca9 	bl	80027dc <ILI9341_Draw_Rectangle>
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
	...

08001e94 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71bb      	strb	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	717b      	strb	r3, [r7, #5]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	d802      	bhi.n	8001ec2 <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	e002      	b.n	8001ec8 <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	3b20      	subs	r3, #32
 8001ec6:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	753b      	strb	r3, [r7, #20]
 8001ecc:	e012      	b.n	8001ef4 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8001ece:	7dfa      	ldrb	r2, [r7, #23]
 8001ed0:	7d38      	ldrb	r0, [r7, #20]
 8001ed2:	7d39      	ldrb	r1, [r7, #20]
 8001ed4:	4c3b      	ldr	r4, [pc, #236]	; (8001fc4 <ILI9341_Draw_Char+0x130>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4423      	add	r3, r4
 8001ee0:	4403      	add	r3, r0
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	f101 0318 	add.w	r3, r1, #24
 8001ee8:	443b      	add	r3, r7
 8001eea:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8001eee:	7d3b      	ldrb	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	753b      	strb	r3, [r7, #20]
 8001ef4:	7d3b      	ldrb	r3, [r7, #20]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d9e9      	bls.n	8001ece <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8001efa:	79bb      	ldrb	r3, [r7, #6]
 8001efc:	b298      	uxth	r0, r3
 8001efe:	797b      	ldrb	r3, [r7, #5]
 8001f00:	b299      	uxth	r1, r3
 8001f02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f04:	461a      	mov	r2, r3
 8001f06:	0052      	lsls	r2, r2, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	b29c      	uxth	r4, r3
 8001f14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4623      	mov	r3, r4
 8001f1a:	f000 fc5f 	bl	80027dc <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	757b      	strb	r3, [r7, #21]
 8001f22:	e047      	b.n	8001fb4 <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	75bb      	strb	r3, [r7, #22]
 8001f28:	e03e      	b.n	8001fa8 <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 8001f2a:	7d7b      	ldrb	r3, [r7, #21]
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	443b      	add	r3, r7
 8001f30:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001f34:	461a      	mov	r2, r3
 8001f36:	7dbb      	ldrb	r3, [r7, #22]
 8001f38:	fa42 f303 	asr.w	r3, r2, r3
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02e      	beq.n	8001fa2 <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 8001f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d110      	bne.n	8001f6c <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	7d7b      	ldrb	r3, [r7, #21]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b298      	uxth	r0, r3
 8001f56:	797b      	ldrb	r3, [r7, #5]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	7dbb      	ldrb	r3, [r7, #22]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f000 fb5f 	bl	8002628 <ILI9341_Draw_Pixel>
 8001f6a:	e01a      	b.n	8001fa2 <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	7d7b      	ldrb	r3, [r7, #21]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f76:	fb11 f303 	smulbb	r3, r1, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b298      	uxth	r0, r3
 8001f80:	797b      	ldrb	r3, [r7, #5]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	7dbb      	ldrb	r3, [r7, #22]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f8a:	fb11 f303 	smulbb	r3, r1, r3
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b299      	uxth	r1, r3
 8001f94:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001f96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	f000 fc1d 	bl	80027dc <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8001fa2:	7dbb      	ldrb	r3, [r7, #22]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	75bb      	strb	r3, [r7, #22]
 8001fa8:	7dbb      	ldrb	r3, [r7, #22]
 8001faa:	2b07      	cmp	r3, #7
 8001fac:	d9bd      	bls.n	8001f2a <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 8001fae:	7d7b      	ldrb	r3, [r7, #21]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	757b      	strb	r3, [r7, #21]
 8001fb4:	7d7b      	ldrb	r3, [r7, #21]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d9b4      	bls.n	8001f24 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	0800a160 	.word	0x0800a160

08001fc8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	70fb      	strb	r3, [r7, #3]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70bb      	strb	r3, [r7, #2]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	803b      	strh	r3, [r7, #0]
	while (*Text)
 8001fe2:	e017      	b.n	8002014 <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	7818      	ldrb	r0, [r3, #0]
 8001fec:	883c      	ldrh	r4, [r7, #0]
 8001fee:	78ba      	ldrb	r2, [r7, #2]
 8001ff0:	78f9      	ldrb	r1, [r7, #3]
 8001ff2:	8bbb      	ldrh	r3, [r7, #28]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	8b3b      	ldrh	r3, [r7, #24]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7ff ff4a 	bl	8001e94 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8002000:	8b3b      	ldrh	r3, [r7, #24]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	4413      	add	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	4413      	add	r3, r2
 8002012:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e3      	bne.n	8001fe4 <ILI9341_Draw_Text+0x1c>
	}
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
	...

08002028 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 800202c:	f7ff fb9a 	bl	8001764 <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 8002030:	f7fe fd80 	bl	8000b34 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203a:	4802      	ldr	r0, [pc, #8]	; (8002044 <ILI9341_SPI_Init+0x1c>)
 800203c:	f001 f892 	bl	8003164 <HAL_GPIO_WritePin>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40020800 	.word	0x40020800

08002048 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002052:	1df9      	adds	r1, r7, #7
 8002054:	2301      	movs	r3, #1
 8002056:	2201      	movs	r2, #1
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <ILI9341_SPI_Send+0x20>)
 800205a:	f002 face 	bl	80045fa <HAL_SPI_Transmit>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000204 	.word	0x20000204

0800206c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <ILI9341_Write_Command+0x40>)
 800207e:	f001 f871 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <ILI9341_Write_Command+0x40>)
 800208a:	f001 f86b 	bl	8003164 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ffd9 	bl	8002048 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <ILI9341_Write_Command+0x40>)
 800209e:	f001 f861 	bl	8003164 <HAL_GPIO_WritePin>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40020800 	.word	0x40020800

080020b0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <ILI9341_Write_Data+0x40>)
 80020c2:	f001 f84f 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020cc:	4808      	ldr	r0, [pc, #32]	; (80020f0 <ILI9341_Write_Data+0x40>)
 80020ce:	f001 f849 	bl	8003164 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ffb7 	bl	8002048 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <ILI9341_Write_Data+0x40>)
 80020e2:	f001 f83f 	bl	8003164 <HAL_GPIO_WritePin>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40020800 	.word	0x40020800

080020f4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4623      	mov	r3, r4
 8002104:	80fb      	strh	r3, [r7, #6]
 8002106:	4603      	mov	r3, r0
 8002108:	80bb      	strh	r3, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
 800210e:	4613      	mov	r3, r2
 8002110:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8002112:	202a      	movs	r0, #42	; 0x2a
 8002114:	f7ff ffaa 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b29b      	uxth	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ffc5 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffc0 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffb9 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ffb4 	bl	80020b0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8002148:	202b      	movs	r0, #43	; 0x2b
 800214a:	f7ff ff8f 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 800214e:	88bb      	ldrh	r3, [r7, #4]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29b      	uxth	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffaa 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ffa5 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 8002166:	883b      	ldrh	r3, [r7, #0]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	b29b      	uxth	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff9e 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8002174:	883b      	ldrh	r3, [r7, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff99 	bl	80020b0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 800217e:	202c      	movs	r0, #44	; 0x2c
 8002180:	f7ff ff74 	bl	800206c <ILI9341_Write_Command>
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}

0800218c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <ILI9341_Reset+0x38>)
 8002198:	f000 ffe4 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800219c:	20c8      	movs	r0, #200	; 0xc8
 800219e:	f000 fd13 	bl	8002bc8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a8:	4806      	ldr	r0, [pc, #24]	; (80021c4 <ILI9341_Reset+0x38>)
 80021aa:	f000 ffdb 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80021ae:	20c8      	movs	r0, #200	; 0xc8
 80021b0:	f000 fd0a 	bl	8002bc8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ba:	4802      	ldr	r0, [pc, #8]	; (80021c4 <ILI9341_Reset+0x38>)
 80021bc:	f000 ffd2 	bl	8003164 <HAL_GPIO_WritePin>
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40020800 	.word	0x40020800

080021c8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80021d6:	2036      	movs	r0, #54	; 0x36
 80021d8:	f7ff ff48 	bl	800206c <ILI9341_Write_Command>
	HAL_Delay(1);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 fcf3 	bl	8002bc8 <HAL_Delay>

	switch (screen_rotation)
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d837      	bhi.n	8002258 <ILI9341_Set_Rotation+0x90>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <ILI9341_Set_Rotation+0x28>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002217 	.word	0x08002217
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	08002243 	.word	0x08002243
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8002200:	2048      	movs	r0, #72	; 0x48
 8002202:	f7ff ff55 	bl	80020b0 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <ILI9341_Set_Rotation+0x9c>)
 8002208:	22f0      	movs	r2, #240	; 0xf0
 800220a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <ILI9341_Set_Rotation+0xa0>)
 800220e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002212:	801a      	strh	r2, [r3, #0]
		break;
 8002214:	e021      	b.n	800225a <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8002216:	2028      	movs	r0, #40	; 0x28
 8002218:	f7ff ff4a 	bl	80020b0 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <ILI9341_Set_Rotation+0x9c>)
 800221e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002222:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <ILI9341_Set_Rotation+0xa0>)
 8002226:	22f0      	movs	r2, #240	; 0xf0
 8002228:	801a      	strh	r2, [r3, #0]
		break;
 800222a:	e016      	b.n	800225a <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 800222c:	2088      	movs	r0, #136	; 0x88
 800222e:	f7ff ff3f 	bl	80020b0 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <ILI9341_Set_Rotation+0x9c>)
 8002234:	22f0      	movs	r2, #240	; 0xf0
 8002236:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <ILI9341_Set_Rotation+0xa0>)
 800223a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800223e:	801a      	strh	r2, [r3, #0]
		break;
 8002240:	e00b      	b.n	800225a <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8002242:	20e8      	movs	r0, #232	; 0xe8
 8002244:	f7ff ff34 	bl	80020b0 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <ILI9341_Set_Rotation+0x9c>)
 800224a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800224e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <ILI9341_Set_Rotation+0xa0>)
 8002252:	22f0      	movs	r2, #240	; 0xf0
 8002254:	801a      	strh	r2, [r3, #0]
		break;
 8002256:	e000      	b.n	800225a <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8002258:	bf00      	nop
	}
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000006 	.word	0x20000006
 8002268:	20000004 	.word	0x20000004

0800226c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002276:	4802      	ldr	r0, [pc, #8]	; (8002280 <ILI9341_Enable+0x14>)
 8002278:	f000 ff74 	bl	8003164 <HAL_GPIO_WritePin>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40020800 	.word	0x40020800

08002284 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8002288:	f7ff fff0 	bl	800226c <ILI9341_Enable>
	ILI9341_SPI_Init();
 800228c:	f7ff fecc 	bl	8002028 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8002290:	f7ff ff7c 	bl	800218c <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff fee9 	bl	800206c <ILI9341_Write_Command>
	HAL_Delay(1000);
 800229a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800229e:	f000 fc93 	bl	8002bc8 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 80022a2:	20cb      	movs	r0, #203	; 0xcb
 80022a4:	f7ff fee2 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 80022a8:	2039      	movs	r0, #57	; 0x39
 80022aa:	f7ff ff01 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 80022ae:	202c      	movs	r0, #44	; 0x2c
 80022b0:	f7ff fefe 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff fefb 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 80022ba:	2034      	movs	r0, #52	; 0x34
 80022bc:	f7ff fef8 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 80022c0:	2002      	movs	r0, #2
 80022c2:	f7ff fef5 	bl	80020b0 <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80022c6:	20cf      	movs	r0, #207	; 0xcf
 80022c8:	f7ff fed0 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff feef 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80022d2:	20c1      	movs	r0, #193	; 0xc1
 80022d4:	f7ff feec 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 80022d8:	2030      	movs	r0, #48	; 0x30
 80022da:	f7ff fee9 	bl	80020b0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80022de:	20e8      	movs	r0, #232	; 0xe8
 80022e0:	f7ff fec4 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 80022e4:	2085      	movs	r0, #133	; 0x85
 80022e6:	f7ff fee3 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff fee0 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 80022f0:	2078      	movs	r0, #120	; 0x78
 80022f2:	f7ff fedd 	bl	80020b0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80022f6:	20ea      	movs	r0, #234	; 0xea
 80022f8:	f7ff feb8 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff fed7 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002302:	2000      	movs	r0, #0
 8002304:	f7ff fed4 	bl	80020b0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8002308:	20ed      	movs	r0, #237	; 0xed
 800230a:	f7ff feaf 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 800230e:	2064      	movs	r0, #100	; 0x64
 8002310:	f7ff fece 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002314:	2003      	movs	r0, #3
 8002316:	f7ff fecb 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 800231a:	2012      	movs	r0, #18
 800231c:	f7ff fec8 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8002320:	2081      	movs	r0, #129	; 0x81
 8002322:	f7ff fec5 	bl	80020b0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8002326:	20f7      	movs	r0, #247	; 0xf7
 8002328:	f7ff fea0 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 800232c:	2020      	movs	r0, #32
 800232e:	f7ff febf 	bl	80020b0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8002332:	20c0      	movs	r0, #192	; 0xc0
 8002334:	f7ff fe9a 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8002338:	2023      	movs	r0, #35	; 0x23
 800233a:	f7ff feb9 	bl	80020b0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 800233e:	20c1      	movs	r0, #193	; 0xc1
 8002340:	f7ff fe94 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8002344:	2010      	movs	r0, #16
 8002346:	f7ff feb3 	bl	80020b0 <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 800234a:	20c5      	movs	r0, #197	; 0xc5
 800234c:	f7ff fe8e 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8002350:	203e      	movs	r0, #62	; 0x3e
 8002352:	f7ff fead 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8002356:	2028      	movs	r0, #40	; 0x28
 8002358:	f7ff feaa 	bl	80020b0 <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 800235c:	20c7      	movs	r0, #199	; 0xc7
 800235e:	f7ff fe85 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8002362:	2086      	movs	r0, #134	; 0x86
 8002364:	f7ff fea4 	bl	80020b0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8002368:	2036      	movs	r0, #54	; 0x36
 800236a:	f7ff fe7f 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 800236e:	2048      	movs	r0, #72	; 0x48
 8002370:	f7ff fe9e 	bl	80020b0 <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8002374:	203a      	movs	r0, #58	; 0x3a
 8002376:	f7ff fe79 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 800237a:	2055      	movs	r0, #85	; 0x55
 800237c:	f7ff fe98 	bl	80020b0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8002380:	20b1      	movs	r0, #177	; 0xb1
 8002382:	f7ff fe73 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff fe92 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 800238c:	2018      	movs	r0, #24
 800238e:	f7ff fe8f 	bl	80020b0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8002392:	20b6      	movs	r0, #182	; 0xb6
 8002394:	f7ff fe6a 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8002398:	2008      	movs	r0, #8
 800239a:	f7ff fe89 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800239e:	2082      	movs	r0, #130	; 0x82
 80023a0:	f7ff fe86 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 80023a4:	2027      	movs	r0, #39	; 0x27
 80023a6:	f7ff fe83 	bl	80020b0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 80023aa:	20f2      	movs	r0, #242	; 0xf2
 80023ac:	f7ff fe5e 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fe7d 	bl	80020b0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80023b6:	2026      	movs	r0, #38	; 0x26
 80023b8:	f7ff fe58 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7ff fe77 	bl	80020b0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80023c2:	20e0      	movs	r0, #224	; 0xe0
 80023c4:	f7ff fe52 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 80023c8:	200f      	movs	r0, #15
 80023ca:	f7ff fe71 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80023ce:	2031      	movs	r0, #49	; 0x31
 80023d0:	f7ff fe6e 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80023d4:	202b      	movs	r0, #43	; 0x2b
 80023d6:	f7ff fe6b 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80023da:	200c      	movs	r0, #12
 80023dc:	f7ff fe68 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80023e0:	200e      	movs	r0, #14
 80023e2:	f7ff fe65 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80023e6:	2008      	movs	r0, #8
 80023e8:	f7ff fe62 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 80023ec:	204e      	movs	r0, #78	; 0x4e
 80023ee:	f7ff fe5f 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 80023f2:	20f1      	movs	r0, #241	; 0xf1
 80023f4:	f7ff fe5c 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 80023f8:	2037      	movs	r0, #55	; 0x37
 80023fa:	f7ff fe59 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80023fe:	2007      	movs	r0, #7
 8002400:	f7ff fe56 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8002404:	2010      	movs	r0, #16
 8002406:	f7ff fe53 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800240a:	2003      	movs	r0, #3
 800240c:	f7ff fe50 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002410:	200e      	movs	r0, #14
 8002412:	f7ff fe4d 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8002416:	2009      	movs	r0, #9
 8002418:	f7ff fe4a 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800241c:	2000      	movs	r0, #0
 800241e:	f7ff fe47 	bl	80020b0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8002422:	20e1      	movs	r0, #225	; 0xe1
 8002424:	f7ff fe22 	bl	800206c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff fe41 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800242e:	200e      	movs	r0, #14
 8002430:	f7ff fe3e 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8002434:	2014      	movs	r0, #20
 8002436:	f7ff fe3b 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800243a:	2003      	movs	r0, #3
 800243c:	f7ff fe38 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8002440:	2011      	movs	r0, #17
 8002442:	f7ff fe35 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002446:	2007      	movs	r0, #7
 8002448:	f7ff fe32 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800244c:	2031      	movs	r0, #49	; 0x31
 800244e:	f7ff fe2f 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002452:	20c1      	movs	r0, #193	; 0xc1
 8002454:	f7ff fe2c 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8002458:	2048      	movs	r0, #72	; 0x48
 800245a:	f7ff fe29 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800245e:	2008      	movs	r0, #8
 8002460:	f7ff fe26 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002464:	200f      	movs	r0, #15
 8002466:	f7ff fe23 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800246a:	200c      	movs	r0, #12
 800246c:	f7ff fe20 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002470:	2031      	movs	r0, #49	; 0x31
 8002472:	f7ff fe1d 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8002476:	2036      	movs	r0, #54	; 0x36
 8002478:	f7ff fe1a 	bl	80020b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 800247c:	200f      	movs	r0, #15
 800247e:	f7ff fe17 	bl	80020b0 <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8002482:	2011      	movs	r0, #17
 8002484:	f7ff fdf2 	bl	800206c <ILI9341_Write_Command>
	HAL_Delay(120);
 8002488:	2078      	movs	r0, #120	; 0x78
 800248a:	f000 fb9d 	bl	8002bc8 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800248e:	2029      	movs	r0, #41	; 0x29
 8002490:	f7ff fdec 	bl	800206c <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002494:	2000      	movs	r0, #0
 8002496:	f7ff fe97 	bl	80021c8 <ILI9341_Set_Rotation>
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80024a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024a4:	b08d      	sub	sp, #52	; 0x34
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	6039      	str	r1, [r7, #0]
 80024ac:	80fb      	strh	r3, [r7, #6]
 80024ae:	466b      	mov	r3, sp
 80024b0:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024be:	d202      	bcs.n	80024c6 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c4:	e002      	b.n	80024cc <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80024c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d2:	4840      	ldr	r0, [pc, #256]	; (80025d4 <ILI9341_Draw_Colour_Burst+0x134>)
 80024d4:	f000 fe46 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024de:	483d      	ldr	r0, [pc, #244]	; (80025d4 <ILI9341_Draw_Colour_Burst+0x134>)
 80024e0:	f000 fe40 	bl	8003164 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 80024ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024f0:	460b      	mov	r3, r1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	2300      	movs	r3, #0
 80024f8:	4688      	mov	r8, r1
 80024fa:	4699      	mov	r9, r3
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002508:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002510:	2300      	movs	r3, #0
 8002512:	460c      	mov	r4, r1
 8002514:	461d      	mov	r5, r3
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	00eb      	lsls	r3, r5, #3
 8002520:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002524:	00e2      	lsls	r2, r4, #3
 8002526:	1dcb      	adds	r3, r1, #7
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	ebad 0d03 	sub.w	sp, sp, r3
 8002530:	466b      	mov	r3, sp
 8002532:	3300      	adds	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
 800253a:	e00e      	b.n	800255a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	4413      	add	r3, r2
 8002542:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002546:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	3301      	adds	r3, #1
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	b2d1      	uxtb	r1, r2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	3302      	adds	r3, #2
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
 800255a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	429a      	cmp	r2, r3
 8002560:	d3ec      	bcc.n	800253c <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002576:	fbb3 f2f2 	udiv	r2, r3, r2
 800257a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800257c:	fb01 f202 	mul.w	r2, r1, r2
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e009      	b.n	80025a4 <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	b29a      	uxth	r2, r3
 8002594:	230a      	movs	r3, #10
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	480f      	ldr	r0, [pc, #60]	; (80025d8 <ILI9341_Draw_Colour_Burst+0x138>)
 800259a:	f002 f82e 	bl	80045fa <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3f1      	bcc.n	8002590 <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	230a      	movs	r3, #10
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	4808      	ldr	r0, [pc, #32]	; (80025d8 <ILI9341_Draw_Colour_Burst+0x138>)
 80025b6:	f002 f820 	bl	80045fa <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025c0:	4804      	ldr	r0, [pc, #16]	; (80025d4 <ILI9341_Draw_Colour_Burst+0x134>)
 80025c2:	f000 fdcf 	bl	8003164 <HAL_GPIO_WritePin>
 80025c6:	46b5      	mov	sp, r6
}
 80025c8:	bf00      	nop
 80025ca:	3734      	adds	r7, #52	; 0x34
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d2:	bf00      	nop
 80025d4:	40020800 	.word	0x40020800
 80025d8:	20000204 	.word	0x20000204

080025dc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <ILI9341_Fill_Screen+0x44>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <ILI9341_Fill_Screen+0x48>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2100      	movs	r1, #0
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff fd7d 	bl	80020f4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <ILI9341_Fill_Screen+0x44>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <ILI9341_Fill_Screen+0x48>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	461a      	mov	r2, r3
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff44 	bl	80024a0 <ILI9341_Draw_Colour_Burst>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000006 	.word	0x20000006
 8002624:	20000004 	.word	0x20000004

08002628 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
 8002632:	460b      	mov	r3, r1
 8002634:	80bb      	strh	r3, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <ILI9341_Draw_Pixel+0x1a4>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	88fa      	ldrh	r2, [r7, #6]
 8002642:	429a      	cmp	r2, r3
 8002644:	f080 80be 	bcs.w	80027c4 <ILI9341_Draw_Pixel+0x19c>
 8002648:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <ILI9341_Draw_Pixel+0x1a8>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	88ba      	ldrh	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	f080 80b7 	bcs.w	80027c4 <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265c:	485d      	ldr	r0, [pc, #372]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 800265e:	f000 fd81 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002668:	485a      	ldr	r0, [pc, #360]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 800266a:	f000 fd7b 	bl	8003164 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 800266e:	202a      	movs	r0, #42	; 0x2a
 8002670:	f7ff fcea 	bl	8002048 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002674:	2201      	movs	r2, #1
 8002676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800267a:	4856      	ldr	r0, [pc, #344]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 800267c:	f000 fd72 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002686:	4853      	ldr	r0, [pc, #332]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002688:	f000 fd6c 	bl	8003164 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002692:	4850      	ldr	r0, [pc, #320]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002694:	f000 fd66 	bl	8003164 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29b      	uxth	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	753b      	strb	r3, [r7, #20]
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	3301      	adds	r3, #1
 80026ac:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 80026ba:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80026bc:	f107 0114 	add.w	r1, r7, #20
 80026c0:	2301      	movs	r3, #1
 80026c2:	2204      	movs	r2, #4
 80026c4:	4844      	ldr	r0, [pc, #272]	; (80027d8 <ILI9341_Draw_Pixel+0x1b0>)
 80026c6:	f001 ff98 	bl	80045fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026ca:	2201      	movs	r2, #1
 80026cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d0:	4840      	ldr	r0, [pc, #256]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 80026d2:	f000 fd47 	bl	8003164 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026dc:	483d      	ldr	r0, [pc, #244]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 80026de:	f000 fd41 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e8:	483a      	ldr	r0, [pc, #232]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 80026ea:	f000 fd3b 	bl	8003164 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 80026ee:	202b      	movs	r0, #43	; 0x2b
 80026f0:	f7ff fcaa 	bl	8002048 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026fa:	4836      	ldr	r0, [pc, #216]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 80026fc:	f000 fd32 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002706:	4833      	ldr	r0, [pc, #204]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002708:	f000 fd2c 	bl	8003164 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002712:	4830      	ldr	r0, [pc, #192]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002714:	f000 fd26 	bl	8003164 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 8002718:	88bb      	ldrh	r3, [r7, #4]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	b29b      	uxth	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	743b      	strb	r3, [r7, #16]
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8002728:	88bb      	ldrh	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800272e:	b2db      	uxtb	r3, r3
 8002730:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800273a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800273c:	f107 0110 	add.w	r1, r7, #16
 8002740:	2301      	movs	r3, #1
 8002742:	2204      	movs	r2, #4
 8002744:	4824      	ldr	r0, [pc, #144]	; (80027d8 <ILI9341_Draw_Pixel+0x1b0>)
 8002746:	f001 ff58 	bl	80045fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002750:	4820      	ldr	r0, [pc, #128]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002752:	f000 fd07 	bl	8003164 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275c:	481d      	ldr	r0, [pc, #116]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 800275e:	f000 fd01 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 800276a:	f000 fcfb 	bl	8003164 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 800276e:	202c      	movs	r0, #44	; 0x2c
 8002770:	f7ff fc6a 	bl	8002048 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800277a:	4816      	ldr	r0, [pc, #88]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 800277c:	f000 fcf2 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002788:	f000 fcec 	bl	8003164 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002792:	4810      	ldr	r0, [pc, #64]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 8002794:	f000 fce6 	bl	8003164 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	733b      	strb	r3, [r7, #12]
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80027a8:	f107 010c 	add.w	r1, r7, #12
 80027ac:	2301      	movs	r3, #1
 80027ae:	2202      	movs	r2, #2
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <ILI9341_Draw_Pixel+0x1b0>)
 80027b2:	f001 ff22 	bl	80045fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <ILI9341_Draw_Pixel+0x1ac>)
 80027be:	f000 fcd1 	bl	8003164 <HAL_GPIO_WritePin>
 80027c2:	e000      	b.n	80027c6 <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 80027c4:	bf00      	nop

}
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000006 	.word	0x20000006
 80027d0:	20000004 	.word	0x20000004
 80027d4:	40020800 	.word	0x40020800
 80027d8:	20000204 	.word	0x20000204

080027dc <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4604      	mov	r4, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4623      	mov	r3, r4
 80027ec:	80fb      	strh	r3, [r7, #6]
 80027ee:	4603      	mov	r3, r0
 80027f0:	80bb      	strh	r3, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]
 80027f6:	4613      	mov	r3, r2
 80027f8:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <ILI9341_Draw_Rectangle+0xb0>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	429a      	cmp	r2, r3
 8002804:	d23d      	bcs.n	8002882 <ILI9341_Draw_Rectangle+0xa6>
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <ILI9341_Draw_Rectangle+0xb4>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	88ba      	ldrh	r2, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d237      	bcs.n	8002882 <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	4413      	add	r3, r2
 8002818:	4a1c      	ldr	r2, [pc, #112]	; (800288c <ILI9341_Draw_Rectangle+0xb0>)
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	b292      	uxth	r2, r2
 800281e:	4293      	cmp	r3, r2
 8002820:	dd05      	ble.n	800282e <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <ILI9341_Draw_Rectangle+0xb0>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800282e:	88ba      	ldrh	r2, [r7, #4]
 8002830:	883b      	ldrh	r3, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <ILI9341_Draw_Rectangle+0xb4>)
 8002836:	8812      	ldrh	r2, [r2, #0]
 8002838:	b292      	uxth	r2, r2
 800283a:	4293      	cmp	r3, r2
 800283c:	dd05      	ble.n	800284a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <ILI9341_Draw_Rectangle+0xb4>)
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29a      	uxth	r2, r3
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	4413      	add	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29c      	uxth	r4, r3
 8002856:	88ba      	ldrh	r2, [r7, #4]
 8002858:	883b      	ldrh	r3, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29b      	uxth	r3, r3
 8002862:	88b9      	ldrh	r1, [r7, #4]
 8002864:	88f8      	ldrh	r0, [r7, #6]
 8002866:	4622      	mov	r2, r4
 8002868:	f7ff fc44 	bl	80020f4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800286c:	883b      	ldrh	r3, [r7, #0]
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	461a      	mov	r2, r3
 8002876:	8b3b      	ldrh	r3, [r7, #24]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe10 	bl	80024a0 <ILI9341_Draw_Colour_Burst>
 8002880:	e000      	b.n	8002884 <ILI9341_Draw_Rectangle+0xa8>
		return;
 8002882:	bf00      	nop
}
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	20000006 	.word	0x20000006
 8002890:	20000004 	.word	0x20000004

08002894 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 800289a:	2310      	movs	r3, #16
 800289c:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 80028a2:	e019      	b.n	80028d8 <TP_Read+0x44>
	{
		value <<= 1;
 80028a4:	88bb      	ldrh	r3, [r7, #4]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2108      	movs	r1, #8
 80028ae:	480e      	ldr	r0, [pc, #56]	; (80028e8 <TP_Read+0x54>)
 80028b0:	f000 fc58 	bl	8003164 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2108      	movs	r1, #8
 80028b8:	480b      	ldr	r0, [pc, #44]	; (80028e8 <TP_Read+0x54>)
 80028ba:	f000 fc53 	bl	8003164 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80028be:	2110      	movs	r1, #16
 80028c0:	4809      	ldr	r0, [pc, #36]	; (80028e8 <TP_Read+0x54>)
 80028c2:	f000 fc37 	bl	8003134 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <TP_Read+0x3e>
		{
			value++;
 80028cc:	88bb      	ldrh	r3, [r7, #4]
 80028ce:	3301      	adds	r3, #1
 80028d0:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e2      	bne.n	80028a4 <TP_Read+0x10>
	};

	return value;
 80028de:	88bb      	ldrh	r3, [r7, #4]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000

080028ec <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 80028f6:	2308      	movs	r3, #8
 80028f8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2108      	movs	r1, #8
 80028fe:	4815      	ldr	r0, [pc, #84]	; (8002954 <TP_Write+0x68>)
 8002900:	f000 fc30 	bl	8003164 <HAL_GPIO_WritePin>

	while (i > 0)
 8002904:	e01e      	b.n	8002944 <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da05      	bge.n	800291a <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800290e:	2201      	movs	r2, #1
 8002910:	2120      	movs	r1, #32
 8002912:	4810      	ldr	r0, [pc, #64]	; (8002954 <TP_Write+0x68>)
 8002914:	f000 fc26 	bl	8003164 <HAL_GPIO_WritePin>
 8002918:	e004      	b.n	8002924 <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	2120      	movs	r1, #32
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <TP_Write+0x68>)
 8002920:	f000 fc20 	bl	8003164 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800292a:	2201      	movs	r2, #1
 800292c:	2108      	movs	r1, #8
 800292e:	4809      	ldr	r0, [pc, #36]	; (8002954 <TP_Write+0x68>)
 8002930:	f000 fc18 	bl	8003164 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2108      	movs	r1, #8
 8002938:	4806      	ldr	r0, [pc, #24]	; (8002954 <TP_Write+0x68>)
 800293a:	f000 fc13 	bl	8003164 <HAL_GPIO_WritePin>
		i--;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	3b01      	subs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1dd      	bne.n	8002906 <TP_Write+0x1a>
	};
}
 800294a:	bf00      	nop
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2108      	movs	r1, #8
 8002964:	485a      	ldr	r0, [pc, #360]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 8002966:	f000 fbfd 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2120      	movs	r1, #32
 800296e:	4858      	ldr	r0, [pc, #352]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 8002970:	f000 fbf8 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002974:	2201      	movs	r2, #1
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	4855      	ldr	r0, [pc, #340]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 800297a:	f000 fbf3 	bl	8003164 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	2140      	movs	r1, #64	; 0x40
 8002998:	484d      	ldr	r0, [pc, #308]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 800299a:	f000 fbe3 	bl	8003164 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800299e:	e023      	b.n	80029e8 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 80029a0:	2090      	movs	r0, #144	; 0x90
 80029a2:	f7ff ffa3 	bl	80028ec <TP_Write>

		rawy = TP_Read();
 80029a6:	f7ff ff75 	bl	8002894 <TP_Read>
 80029aa:	4603      	mov	r3, r0
 80029ac:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	4413      	add	r3, r2
 80029b4:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 80029be:	20d0      	movs	r0, #208	; 0xd0
 80029c0:	f7ff ff94 	bl	80028ec <TP_Write>
		rawx = TP_Read();
 80029c4:	f7ff ff66 	bl	8002894 <TP_Read>
 80029c8:	4603      	mov	r3, r0
 80029ca:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 80029cc:	89bb      	ldrh	r3, [r7, #12]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	4413      	add	r3, r2
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80029d4:	89bb      	ldrh	r3, [r7, #12]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]
		samples--;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3b01      	subs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3301      	adds	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <TP_Read_Coordinates+0xa4>
 80029ee:	2104      	movs	r1, #4
 80029f0:	4837      	ldr	r0, [pc, #220]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 80029f2:	f000 fb9f 	bl	8003134 <HAL_GPIO_ReadPin>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0d1      	beq.n	80029a0 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80029fc:	2201      	movs	r2, #1
 80029fe:	2140      	movs	r1, #64	; 0x40
 8002a00:	4833      	ldr	r0, [pc, #204]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 8002a02:	f000 fbaf 	bl	8003164 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a0c:	d14d      	bne.n	8002aaa <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002a0e:	2104      	movs	r1, #4
 8002a10:	482f      	ldr	r0, [pc, #188]	; (8002ad0 <TP_Read_Coordinates+0x178>)
 8002a12:	f000 fb8f 	bl	8003134 <HAL_GPIO_ReadPin>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d146      	bne.n	8002aaa <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8002a38:	89bb      	ldrh	r3, [r7, #12]
 8002a3a:	425b      	negs	r3, r3
 8002a3c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	425b      	negs	r3, r3
 8002a42:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8002a44:	89ba      	ldrh	r2, [r7, #12]
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <TP_Read_Coordinates+0x17c>)
 8002a48:	fba3 1302 	umull	r1, r3, r3, r2
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	0852      	lsrs	r2, r2, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a62:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002ac8 <TP_Read_Coordinates+0x170>
 8002a66:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8002a6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a6e:	ee17 3a90 	vmov	r3, s15
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <TP_Read_Coordinates+0x180>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	09db      	lsrs	r3, r3, #7
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b0f      	subs	r3, #15
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a8e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002ac8 <TP_Read_Coordinates+0x170>
 8002a92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a9e:	ee17 2a90 	vmov	r2, s15
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e007      	b.n	8002aba <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 8002ab8:	2300      	movs	r3, #0
	}
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	28f5c28f 	.word	0x28f5c28f
 8002acc:	3ff28f5c 	.word	0x3ff28f5c
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	e01e01e1 	.word	0xe01e01e1
 8002ad8:	a0a0a0a1 	.word	0xa0a0a0a1

08002adc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <TP_Touchpad_Pressed+0x1c>)
 8002ae4:	f000 fb26 	bl	8003134 <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002af2:	2300      	movs	r3, #0
	}
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_Init+0x28>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_Init+0x28>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f000 f931 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f000 f808 	bl	8002b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b18:	f7fe fea6 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023c00 	.word	0x40023c00

08002b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_InitTick+0x54>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x58>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f93b 	bl	8002dc2 <HAL_SYSTICK_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00e      	b.n	8002b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d80a      	bhi.n	8002b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f000 f911 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <HAL_InitTick+0x5c>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	20000008 	.word	0x20000008

08002b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_IncTick+0x20>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_IncTick+0x24>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_IncTick+0x24>)
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	2000000c 	.word	0x2000000c
 8002bac:	20000340 	.word	0x20000340

08002bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_GetTick+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000340 	.word	0x20000340

08002bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff ffee 	bl	8002bb0 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d005      	beq.n	8002bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_Delay+0x44>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bee:	bf00      	nop
 8002bf0:	f7ff ffde 	bl	8002bb0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d8f7      	bhi.n	8002bf0 <HAL_Delay+0x28>
  {
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000000c 	.word	0x2000000c

08002c10 <__NVIC_SetPriorityGrouping>:
	{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
		reg_value = SCB->AIRCR; /* read old register configuration    */
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <__NVIC_SetPriorityGrouping+0x40>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	431a      	orrs	r2, r3
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8002c3e:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <__NVIC_SetPriorityGrouping+0x40>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60d3      	str	r3, [r2, #12]
	}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00
 8002c54:	05fa0000 	.word	0x05fa0000

08002c58 <__NVIC_GetPriorityGrouping>:
	{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
	}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_SetPriority>:
	{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
			SCB->SHPR[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
	}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
	{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
						(uint32_t) 0UL :
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
		SubPriorityBits =
 8002cfa:	617b      	str	r3, [r7, #20]
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
 8002d20:	4313      	orrs	r3, r2
	}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff47 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff5c 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_SYSTICK_Config>:
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ffb0 	bl	8002d30 <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e175      	b.n	80030e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8164 	bne.w	80030e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d005      	beq.n	8002e32 <HAL_GPIO_Init+0x56>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d130      	bne.n	8002e94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d017      	beq.n	8002ed0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d123      	bne.n	8002f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80be 	beq.w	80030e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f7e:	4a61      	ldr	r2, [pc, #388]	; (8003104 <HAL_GPIO_Init+0x328>)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	3302      	adds	r3, #2
 8002f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	220f      	movs	r2, #15
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_GPIO_Init+0x32c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d037      	beq.n	800301a <HAL_GPIO_Init+0x23e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_GPIO_Init+0x330>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d031      	beq.n	8003016 <HAL_GPIO_Init+0x23a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a56      	ldr	r2, [pc, #344]	; (8003110 <HAL_GPIO_Init+0x334>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <HAL_GPIO_Init+0x236>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a55      	ldr	r2, [pc, #340]	; (8003114 <HAL_GPIO_Init+0x338>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d025      	beq.n	800300e <HAL_GPIO_Init+0x232>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_GPIO_Init+0x33c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <HAL_GPIO_Init+0x22e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a53      	ldr	r2, [pc, #332]	; (800311c <HAL_GPIO_Init+0x340>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d019      	beq.n	8003006 <HAL_GPIO_Init+0x22a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_GPIO_Init+0x344>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0x226>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a51      	ldr	r2, [pc, #324]	; (8003124 <HAL_GPIO_Init+0x348>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00d      	beq.n	8002ffe <HAL_GPIO_Init+0x222>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a50      	ldr	r2, [pc, #320]	; (8003128 <HAL_GPIO_Init+0x34c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <HAL_GPIO_Init+0x21e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4f      	ldr	r2, [pc, #316]	; (800312c <HAL_GPIO_Init+0x350>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_GPIO_Init+0x21a>
 8002ff2:	2309      	movs	r3, #9
 8002ff4:	e012      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	e010      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	e00e      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e00c      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003002:	2306      	movs	r3, #6
 8003004:	e00a      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003006:	2305      	movs	r3, #5
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x240>
 800300a:	2304      	movs	r3, #4
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x240>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x240>
 800301a:	2300      	movs	r3, #0
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800302c:	4935      	ldr	r1, [pc, #212]	; (8003104 <HAL_GPIO_Init+0x328>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_GPIO_Init+0x354>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003088:	4a29      	ldr	r2, [pc, #164]	; (8003130 <HAL_GPIO_Init+0x354>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b2:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f67f ae86 	bls.w	8002dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40021400 	.word	0x40021400
 8003120:	40021800 	.word	0x40021800
 8003124:	40021c00 	.word	0x40021c00
 8003128:	40022000 	.word	0x40022000
 800312c:	40022400 	.word	0x40022400
 8003130:	40013c00 	.word	0x40013c00

08003134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e001      	b.n	8003156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003180:	e003      	b.n	800318a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	619a      	str	r2, [r3, #24]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_PWR_EnableBkUpAccess>:
 * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 *         Backup Domain Access should be kept enabled.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	/* Enable access to RTC and backup registers */
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40007000 	.word	0x40007000

080031b8 <HAL_PWREx_EnableOverDrive>:
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
	uint32_t tickstart = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]

	__HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_PWREx_EnableOverDrive+0x98>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a22      	ldr	r2, [pc, #136]	; (8003250 <HAL_PWREx_EnableOverDrive+0x98>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_PWREx_EnableOverDrive+0x98>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 80031e6:	f7ff fce3 	bl	8002bb0 <HAL_GetTick>
 80031ea:	6078      	str	r0, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031ec:	e009      	b.n	8003202 <HAL_PWREx_EnableOverDrive+0x4a>
	{
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031ee:	f7ff fcdf 	bl	8002bb0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031fc:	d901      	bls.n	8003202 <HAL_PWREx_EnableOverDrive+0x4a>
		{
			return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e022      	b.n	8003248 <HAL_PWREx_EnableOverDrive+0x90>
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d1ee      	bne.n	80031ee <HAL_PWREx_EnableOverDrive+0x36>
		}
	}

	/* Enable the Over-drive switch */
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321a:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 800321c:	f7ff fcc8 	bl	8002bb0 <HAL_GetTick>
 8003220:	6078      	str	r0, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003222:	e009      	b.n	8003238 <HAL_PWREx_EnableOverDrive+0x80>
	{
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003224:	f7ff fcc4 	bl	8002bb0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003232:	d901      	bls.n	8003238 <HAL_PWREx_EnableOverDrive+0x80>
		{
			return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e007      	b.n	8003248 <HAL_PWREx_EnableOverDrive+0x90>
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_PWREx_EnableOverDrive+0x9c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003244:	d1ee      	bne.n	8003224 <HAL_PWREx_EnableOverDrive+0x6c>
		}
	}
	return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000

08003258 <HAL_RCC_OscConfig>:
 *         supported by this function. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x16>
	{
		return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e29b      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8087 	beq.w	800338a <HAL_RCC_OscConfig+0x132>
			== RCC_OSCILLATORTYPE_HSE)
	{
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800327c:	4b96      	ldr	r3, [pc, #600]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x4a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8003288:	4b93      	ldr	r3, [pc, #588]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0x62>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8003294:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a0:	d10b      	bne.n	80032ba <HAL_RCC_OscConfig+0x62>
								== RCC_PLLCFGR_PLLSRC_HSE)))
		{
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b8d      	ldr	r3, [pc, #564]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06c      	beq.n	8003388 <HAL_RCC_OscConfig+0x130>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d168      	bne.n	8003388 <HAL_RCC_OscConfig+0x130>
			{
				return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e275      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			}
		}
		else
		{
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x7a>
 80032c4:	4b84      	ldr	r3, [pc, #528]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a83      	ldr	r2, [pc, #524]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e02e      	b.n	8003330 <HAL_RCC_OscConfig+0xd8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x9c>
 80032da:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7e      	ldr	r2, [pc, #504]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7b      	ldr	r2, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xd8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xc0>
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xd8>
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6b      	ldr	r2, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
			{
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003338:	f7ff fc3a 	bl	8002bb0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff fc36 	bl	8002bb0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
					{
						return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e229      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x132>
				}
			}
			else
			{
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003360:	f7ff fc26 	bl	8002bb0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x122>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7ff fc22 	bl	8002bb0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x122>
					{
						return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e215      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x110>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x132>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003388:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d069      	beq.n	800346a <HAL_RCC_OscConfig+0x212>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x162>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80033a2:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x190>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80033ae:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x190>
								== RCC_PLLCFGR_PLLSRC_HSI)))
		{
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x17a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x17a>
			{
				return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1e9      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			}
			/* Otherwise, just the calibration is allowed */
			else
			{
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	493d      	ldr	r1, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	e040      	b.n	800346a <HAL_RCC_OscConfig+0x212>
			}
		}
		else
		{
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <HAL_RCC_OscConfig+0x1e0>
			{
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80033f0:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a38      	ldr	r2, [pc, #224]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80033fc:	f7ff fbd8 	bl	8002bb0 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1be>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7ff fbd4 	bl	8002bb0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1be>
					{
						return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1c7      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x1ac>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8003422:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4929      	ldr	r1, [pc, #164]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
 8003436:	e018      	b.n	800346a <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			}
			else
			{
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003444:	f7ff fbb4 	bl	8002bb0 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x206>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344c:	f7ff fbb0 	bl	8002bb0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x206>
					{
						return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1a3      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1f4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d038      	beq.n	80034e8 <HAL_RCC_OscConfig+0x290>
	{
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d019      	beq.n	80034b2 <HAL_RCC_OscConfig+0x25a>
		{
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800348a:	f7ff fb91 	bl	8002bb0 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7ff fb8d 	bl	8002bb0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
				{
					return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e180      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x23a>
 80034b0:	e01a      	b.n	80034e8 <HAL_RCC_OscConfig+0x290>
			}
		}
		else
		{
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <HAL_RCC_OscConfig+0x280>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80034be:	f7ff fb77 	bl	8002bb0 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x284>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c6:	f7ff fb73 	bl	8002bb0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d903      	bls.n	80034dc <HAL_RCC_OscConfig+0x284>
				{
					return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e166      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
 80034d8:	40023800 	.word	0x40023800
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b92      	ldr	r3, [pc, #584]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_OscConfig+0x26e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a4 	beq.w	800363e <HAL_RCC_OscConfig+0x3e6>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_RCC_OscConfig+0x2c6>
		{
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 8003502:	4b89      	ldr	r3, [pc, #548]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a88      	ldr	r2, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b86      	ldr	r3, [pc, #536]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351e:	4b83      	ldr	r3, [pc, #524]	; (800372c <HAL_RCC_OscConfig+0x4d4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d118      	bne.n	800355c <HAL_RCC_OscConfig+0x304>
		{
			/* Enable write access to Backup domain */
			PWR->CR1 |= PWR_CR1_DBP;
 800352a:	4b80      	ldr	r3, [pc, #512]	; (800372c <HAL_RCC_OscConfig+0x4d4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7f      	ldr	r2, [pc, #508]	; (800372c <HAL_RCC_OscConfig+0x4d4>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8003536:	f7ff fb3b 	bl	8002bb0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x2f8>
			{
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7ff fb37 	bl	8002bb0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	; 0x64
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x2f8>
				{
					return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e12a      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x4d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x2e6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x31a>
 8003564:	4b70      	ldr	r3, [pc, #448]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a6f      	ldr	r2, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	e02d      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x33c>
 800357a:	4b6b      	ldr	r3, [pc, #428]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b68      	ldr	r3, [pc, #416]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a67      	ldr	r2, [pc, #412]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
 8003592:	e01c      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b05      	cmp	r3, #5
 800359a:	d10c      	bne.n	80035b6 <HAL_RCC_OscConfig+0x35e>
 800359c:	4b62      	ldr	r3, [pc, #392]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a61      	ldr	r2, [pc, #388]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a5e      	ldr	r2, [pc, #376]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	e00b      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
 80035b6:	4b5c      	ldr	r3, [pc, #368]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a5b      	ldr	r2, [pc, #364]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d015      	beq.n	8003602 <HAL_RCC_OscConfig+0x3aa>
		{
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80035d6:	f7ff faeb 	bl	8002bb0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x39c>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7ff fae7 	bl	8002bb0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x39c>
				{
					return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0d8      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f4:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ee      	beq.n	80035de <HAL_RCC_OscConfig+0x386>
 8003600:	e014      	b.n	800362c <HAL_RCC_OscConfig+0x3d4>
			}
		}
		else
		{
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8003602:	f7ff fad5 	bl	8002bb0 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x3c8>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7ff fad1 	bl	8002bb0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x3c8>
				{
					return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0c2      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003620:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ee      	bne.n	800360a <HAL_RCC_OscConfig+0x3b2>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET)
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <HAL_RCC_OscConfig+0x3e6>
		{
			__HAL_RCC_PWR_CLK_DISABLE();
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a3c      	ldr	r2, [pc, #240]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80ae 	beq.w	80037a4 <HAL_RCC_OscConfig+0x54c>
	{
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d06d      	beq.n	8003730 <HAL_RCC_OscConfig+0x4d8>
		{
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d14b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800365c:	4b32      	ldr	r3, [pc, #200]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003668:	f7ff faa2 	bl	8002bb0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x42a>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7ff fa9e 	bl	8002bb0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x42a>
					{
						return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e091      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x418>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	3b01      	subs	r3, #1
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	071b      	lsls	r3, r3, #28
 80036ba:	491b      	ldr	r1, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80036cc:	f7ff fa70 	bl	8002bb0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x48e>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7ff fa6c 	bl	8002bb0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x48e>
					{
						return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e05f      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x47c>
 80036f2:	e057      	b.n	80037a4 <HAL_RCC_OscConfig+0x54c>
				}
			}
			else
			{
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003700:	f7ff fa56 	bl	8002bb0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x4c2>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7ff fa52 	bl	8002bb0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x4c2>
					{
						return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e045      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x4b0>
 8003726:	e03d      	b.n	80037a4 <HAL_RCC_OscConfig+0x54c>
 8003728:	40023800 	.word	0x40023800
 800372c:	40007000 	.word	0x40007000
			}
		}
		else
		{
			/* Do not return HAL_ERROR if request repeats the current configuration */
			pll_config = RCC->PLLCFGR;
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <HAL_RCC_OscConfig+0x558>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d030      	beq.n	80037a0 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8003748:	429a      	cmp	r2, r3
 800374a:	d129      	bne.n	80037a0 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8003756:	429a      	cmp	r2, r3
 8003758:	d122      	bne.n	80037a0 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003760:	4013      	ands	r3, r2
							!= (RCC_OscInitStruct->PLL.PLLN
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6a52      	ldr	r2, [r2, #36]	; 0x24
									<< RCC_PLLCFGR_PLLN_Pos))
 8003766:	0192      	lsls	r2, r2, #6
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003768:	4293      	cmp	r3, r2
 800376a:	d119      	bne.n	80037a0 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLP_Pos))
 800377a:	041b      	lsls	r3, r3, #16
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800377c:	429a      	cmp	r2, r3
 800377e:	d10f      	bne.n	80037a0 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
									<< RCC_PLLCFGR_PLLQ_Pos))
 800378a:	061b      	lsls	r3, r3, #24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
									<< RCC_PLLCFGR_PLLR_Pos)))
 800379a:	071b      	lsls	r3, r3, #28
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
			{
				return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x54e>
			}
		}
	}
	return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <HAL_RCC_ClockConfig>:
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x18>
	{
		return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0d0      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037cc:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d910      	bls.n	80037fc <HAL_RCC_ClockConfig+0x48>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 020f 	bic.w	r2, r3, #15
 80037e2:	4965      	ldr	r1, [pc, #404]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x48>
		{
			return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b8      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_ClockConfig+0x96>
			== RCC_CLOCKTYPE_HCLK)
	{
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x6c>
				== RCC_CLOCKTYPE_PCLK1)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003814:	4b59      	ldr	r3, [pc, #356]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a58      	ldr	r2, [pc, #352]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800381e:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x84>
				== RCC_CLOCKTYPE_PCLK2)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003836:	6093      	str	r3, [r2, #8]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	494d      	ldr	r1, [pc, #308]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d040      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x124>
			== RCC_CLOCKTYPE_SYSCLK)
	{
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xba>
		{
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d115      	bne.n	8003896 <HAL_RCC_ClockConfig+0xe2>
			{
				return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0xd2>
		{
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_RCC_ClockConfig+0xe2>
			{
				return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e073      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
		}
		/* HSI is selected as System Clock Source */
		else
		{
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_ClockConfig+0xe2>
			{
				return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06b      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003896:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4936      	ldr	r1, [pc, #216]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80038a8:	f7ff f982 	bl	8002bb0 <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x112>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
		{
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f7ff f97e 	bl	8002bb0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x112>
			{
				return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e053      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80038c6:	4b2d      	ldr	r3, [pc, #180]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1eb      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d210      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x154>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 020f 	bic.w	r2, r3, #15
 80038ee:	4922      	ldr	r1, [pc, #136]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x154>
		{
			return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e032      	b.n	800396e <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCC_ClockConfig+0x172>
			== RCC_CLOCKTYPE_PCLK1)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4916      	ldr	r1, [pc, #88]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_RCC_ClockConfig+0x192>
			== RCC_CLOCKTYPE_PCLK2)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003946:	f000 f821 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800394a:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	490a      	ldr	r1, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x1cc>)
 8003958:	5ccb      	ldrb	r3, [r1, r3]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1d0>)
 8003960:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1d4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f8de 	bl	8002b28 <HAL_InitTick>

	return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023c00 	.word	0x40023c00
 800397c:	40023800 	.word	0x40023800
 8003980:	0800a148 	.word	0x0800a148
 8003984:	20000000 	.word	0x20000000
 8003988:	20000008 	.word	0x20000008

0800398c <HAL_RCC_GetSysClockFreq>:
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003990:	b094      	sub	sp, #80	; 0x50
 8003992:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
 8003998:	2300      	movs	r3, #0
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	2300      	movs	r3, #0
 800399e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sysclockfreq = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a4:	4b79      	ldr	r3, [pc, #484]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d00d      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x40>
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	f200 80e1 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039be:	e0db      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x1ec>
	{
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 80039c0:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80039c2:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 80039c4:	e0db      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 80039c6:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80039c8:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 80039ca:	e0d8      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	647b      	str	r3, [r7, #68]	; 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x11e>
		{
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80039e2:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039e4:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80039e6:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80039e8:	2200      	movs	r2, #0
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039fe:	4622      	mov	r2, r4
 8003a00:	462b      	mov	r3, r5
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	0159      	lsls	r1, r3, #5
 8003a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a10:	0150      	lsls	r0, r2, #5
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4621      	mov	r1, r4
 8003a18:	1a51      	subs	r1, r2, r1
 8003a1a:	6139      	str	r1, [r7, #16]
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a30:	4659      	mov	r1, fp
 8003a32:	018b      	lsls	r3, r1, #6
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	018a      	lsls	r2, r1, #6
 8003a3e:	4651      	mov	r1, sl
 8003a40:	ebb2 0801 	subs.w	r8, r2, r1
 8003a44:	4659      	mov	r1, fp
 8003a46:	eb63 0901 	sbc.w	r9, r3, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5e:	4690      	mov	r8, r2
 8003a60:	4699      	mov	r9, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	eb18 0303 	adds.w	r3, r8, r3
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	eb49 0303 	adc.w	r3, r9, r3
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	024b      	lsls	r3, r1, #9
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a88:	4621      	mov	r1, r4
 8003a8a:	024a      	lsls	r2, r1, #9
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a92:	2200      	movs	r2, #0
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a9c:	f7fc fde4 	bl	8000668 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa8:	e058      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x1d0>
		}
		else
		{
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aac:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003aae:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	f04f 0000 	mov.w	r0, #0
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	0159      	lsls	r1, r3, #5
 8003ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad6:	0150      	lsls	r0, r2, #5
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4641      	mov	r1, r8
 8003ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003afc:	ebb2 040a 	subs.w	r4, r2, sl
 8003b00:	eb63 050b 	sbc.w	r5, r3, fp
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	00eb      	lsls	r3, r5, #3
 8003b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b12:	00e2      	lsls	r2, r4, #3
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	18e3      	adds	r3, r4, r3
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	464b      	mov	r3, r9
 8003b20:	eb45 0303 	adc.w	r3, r5, r3
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b32:	4629      	mov	r1, r5
 8003b34:	028b      	lsls	r3, r1, #10
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	028a      	lsls	r2, r1, #10
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	61fa      	str	r2, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	f7fc fd8a 	bl	8000668 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003b58:	4613      	mov	r3, r2
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
						+ 1) * 2);
 8003b66:	3301      	adds	r3, #1
		pllp =
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40

		sysclockfreq = pllvco / pllp;
 8003b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default:
	{
		sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003b7c:	bf00      	nop
	}
	}
	return sysclockfreq;
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3750      	adds	r7, #80	; 0x50
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800a158 	.word	0x0800a158

08003bd8 <HAL_RCC_GetPCLK2Freq>:
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	0800a158 	.word	0x0800a158

08003c00 <HAL_RCCEx_PeriphCLKConfig>:
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg0 = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg1 = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
	uint32_t plli2sused = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
	uint32_t pllsaiused = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*----------------------------------- I2S configuration ----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d012      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

		/* Configure I2S Clock source */
		__HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c32:	6093      	str	r3, [r2, #8]
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	4964      	ldr	r1, [pc, #400]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]

		/* Enable the PLLI2S when it's used as clock source for I2S */
		if (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
		{
			plli2sused = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
		}
	}

	/*------------------------------------ SAI1 configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d017      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
	{
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

		/* Configure SAI1 Clock source */
		__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	4959      	ldr	r1, [pc, #356]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		/* Enable the PLLI2S when it's used as clock source for SAI */
		if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c78:	d101      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
		{
			plli2sused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
		}
		/* Enable the PLLSAI when it's used as clock source for SAI */
		if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
		{
			pllsaiused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]
		}
	}

	/*------------------------------------ SAI2 configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d017      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
	{
		/* Check the parameters */
		assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

		/* Configure SAI2 Clock source */
		__HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c96:	4b4e      	ldr	r3, [pc, #312]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	494a      	ldr	r1, [pc, #296]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		/* Enable the PLLI2S when it's used as clock source for SAI */
		if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb4:	d101      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xba>
		{
			plli2sused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
		}
		/* Enable the PLLSAI when it's used as clock source for SAI */
		if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
		{
			pllsaiused = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]
		}
	}

	/*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
			== RCC_PERIPHCLK_SPDIFRX)
	{
		plli2sused = 1;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
	}

	/*------------------------------------ RTC configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 808b 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
	{
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	4b3a      	ldr	r3, [pc, #232]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4a39      	ldr	r2, [pc, #228]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]

		/* Enable write access to Backup domain */
		PWR->CR1 |= PWR_CR1_DBP;
 8003cfc:	4b35      	ldr	r3, [pc, #212]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d06:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8003d08:	f7fe ff52 	bl	8002bb0 <HAL_GetTick>
 8003d0c:	6178      	str	r0, [r7, #20]

		/* Wait for Backup domain Write protection disable */
		while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x122>
		{
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d10:	f7fe ff4e 	bl	8002bb0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x122>
			{
				return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e38f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x842>
		while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d22:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified */
		tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	613b      	str	r3, [r7, #16]

		if ((tmpreg0 != 0x00000000U)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d035      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				&& (tmpreg0
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
				&& (tmpreg0
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d02e      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		{
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d54:	613b      	str	r3, [r7, #16]

			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
			__HAL_RCC_BACKUPRESET_RELEASE();
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70

			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg0;
 8003d6e:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d114      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
			{
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003d80:	f7fe ff16 	bl	8002bb0 <HAL_GetTick>
 8003d84:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
				{
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fe ff12 	bl	8002bb0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
					{
						return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e351      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x842>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ee      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x188>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db6:	d111      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	4901      	ldr	r1, [pc, #4]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	0ffffcff 	.word	0x0ffffcff
 8003ddc:	4bac      	ldr	r3, [pc, #688]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4aab      	ldr	r2, [pc, #684]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	4ba9      	ldr	r3, [pc, #676]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	49a6      	ldr	r1, [pc, #664]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	670b      	str	r3, [r1, #112]	; 0x70
	}

	/*------------------------------------ TIM configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d010      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x228>
	{
		/* Check the parameters */
		assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

		/* Configure Timer Prescaler */
		__HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e06:	4ba2      	ldr	r3, [pc, #648]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0c:	4aa0      	ldr	r2, [pc, #640]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e16:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	499b      	ldr	r1, [pc, #620]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}

	/*-------------------------------------- I2C1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e34:	4b96      	ldr	r3, [pc, #600]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e42:	4993      	ldr	r1, [pc, #588]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C2 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e56:	4b8e      	ldr	r3, [pc, #568]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	498a      	ldr	r1, [pc, #552]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C3 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e78:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e86:	4982      	ldr	r1, [pc, #520]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C4 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

		/* Configure the I2C4 clock source */
		__HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e9a:	4b7d      	ldr	r3, [pc, #500]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4979      	ldr	r1, [pc, #484]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ebc:	4b74      	ldr	r3, [pc, #464]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4971      	ldr	r1, [pc, #452]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART2 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ede:	4b6c      	ldr	r3, [pc, #432]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f023 020c 	bic.w	r2, r3, #12
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eec:	4968      	ldr	r1, [pc, #416]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART3 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f00:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	4960      	ldr	r1, [pc, #384]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART4 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x338>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	4957      	ldr	r1, [pc, #348]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART5 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f44:	4b52      	ldr	r3, [pc, #328]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	494f      	ldr	r1, [pc, #316]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART6 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

		/* Configure the USART6 clock source */
		__HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	4946      	ldr	r1, [pc, #280]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART7 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

		/* Configure the UART7 clock source */
		__HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f88:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	493e      	ldr	r1, [pc, #248]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART8 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

		/* Configure the UART8 clock source */
		__HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	4935      	ldr	r1, [pc, #212]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*--------------------------------------- CEC Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
	{
		/* Check the parameters */
		assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fcc:	4b30      	ldr	r3, [pc, #192]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fda:	492d      	ldr	r1, [pc, #180]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- CK48 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d011      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x412>
	{
		/* Check the parameters */
		assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

		/* Configure the CLK48 source */
		__HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffc:	4924      	ldr	r1, [pc, #144]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

		/* Enable the PLLSAI when it's used as clock source for CK48 */
		if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x412>
		{
			pllsaiused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
		}
	}

	/*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x422>
			== RCC_PERIPHCLK_LTDC)
	{
		pllsaiused = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
	}
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

	/*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x444>
	{
		/* Check the parameters */
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

		/* Configure the LTPIM1 clock source */
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402e:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403c:	4914      	ldr	r1, [pc, #80]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*------------------------------------- SDMMC1 Configuration ------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x468>
		/* Check the parameters */
		assert_param(
				IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

		/* Configure the SDMMC1 clock source */
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004060:	490b      	ldr	r1, [pc, #44]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
	/*------------------------------------- SDMMC2 Configuration ------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00f      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x494>
		/* Check the parameters */
		assert_param(
				IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

		/* Configure the SDMMC2 clock source */
		__HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	4902      	ldr	r1, [pc, #8]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
	}

	/*------------------------------------- DFSDM1 Configuration -------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

		/* Configure the DFSDM1 interface clock source */
		__HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040a0:	4b8a      	ldr	r3, [pc, #552]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	4986      	ldr	r1, [pc, #536]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}

	/*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

		/* Configure the DFSDM interface clock source */
		__HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040c4:	4b81      	ldr	r3, [pc, #516]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d4:	497d      	ldr	r1, [pc, #500]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

	/*-------------------------------------- PLLI2S Configuration ---------------------------------*/
	/* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
	if ((plli2sused == 1)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d006      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
			|| ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80d6 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x69c>
					== RCC_PERIPHCLK_PLLI2S))
	{
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 80040f0:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a75      	ldr	r2, [pc, #468]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040fa:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80040fc:	f7fe fd58 	bl	8002bb0 <HAL_GetTick>
 8004100:	6178      	str	r0, [r7, #20]

		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x516>
		{
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004104:	f7fe fd54 	bl	8002bb0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x516>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e195      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x504>

		/* check for common PLLI2S Parameters */
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

		/*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d021      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x572>
				== RCC_PERIPHCLK_I2S)
				&& (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11d      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x572>
		{
			/* check for Parameters */
			assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

			/* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 8004136:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413c:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 8004144:	4b61      	ldr	r3, [pc, #388]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800414a:	0e1b      	lsrs	r3, r3, #24
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
			/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	019a      	lsls	r2, r3, #6
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	071b      	lsls	r3, r3, #28
 800416a:	4958      	ldr	r1, [pc, #352]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
		}

		/*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x588>
				== RCC_PERIPHCLK_SAI1)
				&& (PeriphClkInit->Sai1ClockSelection
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x59e>
						== RCC_SAI1CLKSOURCE_PLLI2S))
				|| ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02e      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
						== RCC_PERIPHCLK_SAI2)
						&& (PeriphClkInit->Sai2ClockSelection
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419c:	d129      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
			assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
			/* Check for PLLI2S/DIVQ parameters */
			assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

			/* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 800419e:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a4:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b2:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	019a      	lsls	r2, r3, #6
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	493e      	ldr	r1, [pc, #248]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);

			/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
			__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041da:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e0:	f023 021f 	bic.w	r2, r3, #31
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	3b01      	subs	r3, #1
 80041ea:	4938      	ldr	r1, [pc, #224]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}

		/*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
		if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01d      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x63a>
		{
			/* check for Parameters */
			assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

			/* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 80041fe:	4b33      	ldr	r3, [pc, #204]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004204:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 800420c:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004212:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
			/* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	019a      	lsls	r2, r3, #6
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	431a      	orrs	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	061b      	lsls	r3, r3, #24
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	4926      	ldr	r1, [pc, #152]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
		}

		/*----------------- In Case of PLLI2S is just selected  -----------------*/
		if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x66a>
			assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
			/* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	061b      	lsls	r3, r3, #24
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	071b      	lsls	r3, r3, #28
 8004262:	491a      	ldr	r1, [pc, #104]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SQ,
					PeriphClkInit->PLLI2S.PLLI2SR);
		}

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004274:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8004276:	f7fe fc9b 	bl	8002bb0 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x690>
		{
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800427e:	f7fe fc97 	bl	8002bb0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b64      	cmp	r3, #100	; 0x64
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x690>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0d8      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x67e>
		}
	}

	/*-------------------------------------- PLLSAI Configuration ---------------------------------*/
	/* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
	if (pllsaiused == 1)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 80ce 	bne.w	8004440 <HAL_RCCEx_PeriphCLKConfig+0x840>
	{
		/* Disable PLLSAI Clock */
		__HAL_RCC_PLLSAI_DISABLE();
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80042b0:	f7fe fc7e 	bl	8002bb0 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

		/* Wait till PLLSAI is disabled */
		while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042b6:	e00b      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
		{
			if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042b8:	f7fe fc7a 	bl	8002bb0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d904      	bls.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0bb      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
		while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d0:	4b5e      	ldr	r3, [pc, #376]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042dc:	d0ec      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

		/* Check the PLLSAI division factors */
		assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

		/*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
				== RCC_PERIPHCLK_SAI1)
				&& (PeriphClkInit->Sai1ClockSelection
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x706>
						== RCC_SAI1CLKSOURCE_PLLSAI))
				|| ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02e      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x75c>
						== RCC_PERIPHCLK_SAI2)
						&& (PeriphClkInit->Sai2ClockSelection
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d12a      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x75c>
			assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
			/* check for PLLSAI/DIVQ Parameter */
			assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

			/* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 8004306:	4b51      	ldr	r3, [pc, #324]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800430c:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR)
 8004314:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431a:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR)
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	60fb      	str	r3, [r7, #12]
			/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
			/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg0,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	019a      	lsls	r2, r3, #6
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	061b      	lsls	r3, r3, #24
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	4944      	ldr	r1, [pc, #272]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);

			/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
			__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004342:	4b42      	ldr	r3, [pc, #264]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	493d      	ldr	r1, [pc, #244]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}

		/*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
		/* In Case of PLLI2S is selected as source clock for CK48 */
		if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d022      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
				== RCC_PERIPHCLK_CLK48)
				&& (PeriphClkInit->Clk48ClockSelection
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004370:	d11d      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
						== RCC_CLK48SOURCE_PLLSAIP))
		{
			/* check for Parameters */
			assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
			/* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004378:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR)
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004386:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR)
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]

			/* Configure the PLLSAI division factors */
			/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
			/* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	019a      	lsls	r2, r3, #6
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	4929      	ldr	r1, [pc, #164]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
		}

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
		/*---------------------------- LTDC configuration -------------------------------*/
		if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d028      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x80c>
		{
			assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
			assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

			/* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c0:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ce:	0c1b      	lsrs	r3, r3, #16
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	60fb      	str	r3, [r7, #12]

			/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
			/* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	019a      	lsls	r2, r3, #6
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	4917      	ldr	r1, [pc, #92]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);

			/* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
			__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4911      	ldr	r1, [pc, #68]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

		/* Enable PLLSAI Clock */
		__HAL_RCC_PLLSAI_ENABLE();
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0e      	ldr	r2, [pc, #56]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8004418:	f7fe fbca 	bl	8002bb0 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

		/* Wait till PLLSAI is ready */
		while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x832>
		{
			if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004420:	f7fe fbc6 	bl	8002bb0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x832>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e007      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443e:	d1ef      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x820>
			}
		}
	}
	return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800

08004450 <HAL_RNG_Init>:
 * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
 *                the configuration information for RNG.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	/* Check the RNG handle allocation */
	if (hrng == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RNG_Init+0x12>
	{
		return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e01c      	b.n	800449c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
	if (hrng->State == HAL_RNG_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	795b      	ldrb	r3, [r3, #5]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_RNG_Init+0x28>
	{
		/* Allocate lock resource and initialize it */
		hrng->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	711a      	strb	r2, [r3, #4]

		/* Init the low level hardware */
		HAL_RNG_MspInit(hrng);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd f942 	bl	80016fc <HAL_RNG_MspInit>
	}
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

	/* Change RNG peripheral state */
	hrng->State = HAL_RNG_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	715a      	strb	r2, [r3, #5]

	/* Enable the RNG Peripheral */
	__HAL_RNG_ENABLE(hrng);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0204 	orr.w	r2, r2, #4
 800448c:	601a      	str	r2, [r3, #0]

	/* Initialize the RNG state */
	hrng->State = HAL_RNG_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	715a      	strb	r2, [r3, #5]

	/* Initialise the error code */
	hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]

	/* Return function status */
	return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_SPI_Init>:
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	uint32_t frxth;

	/* Check the SPI handle allocation */
	if (hspi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Init+0x12>
	{
		return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e09d      	b.n	80045f2 <HAL_SPI_Init+0x14e>
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_SPI_Init+0x2c>
	{
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d009      	beq.n	80044dc <HAL_SPI_Init+0x38>
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		}
		else
		{
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
 80044ce:	e005      	b.n	80044dc <HAL_SPI_Init+0x38>
	else
	{
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_Init+0x58>
	{
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd f972 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	601a      	str	r2, [r3, #0]

	/* Align by default the rs fifo threshold on the data size */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800451c:	d902      	bls.n	8004524 <HAL_SPI_Init+0x80>
	{
		frxth = SPI_RXFIFO_THRESHOLD_HF;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e002      	b.n	800452a <HAL_SPI_Init+0x86>
	}
	else
	{
		frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004528:	60fb      	str	r3, [r7, #12]
	}

	/* CRC calculation is valid only for 16Bit and 8 Bit */
	if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004532:	d007      	beq.n	8004544 <HAL_SPI_Init+0xa0>
			&& (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Init+0xa0>
	{
		/* CRC must be disabled */
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	ea42 0103 	orr.w	r1, r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

	/* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
	WRITE_REG(hspi->Instance->CR2,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 0204 	and.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->State = HAL_SPI_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_SPI_Transmit>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData,
		uint16_t Size, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b088      	sub	sp, #32
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_SPI_Transmit+0x22>
 8004618:	2302      	movs	r3, #2
 800461a:	e158      	b.n	80048ce <HAL_SPI_Transmit+0x2d4>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8004624:	f7fe fac4 	bl	8002bb0 <HAL_GetTick>
 8004628:	61b8      	str	r0, [r7, #24]
	initial_TxXferCount = Size;
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	82fb      	strh	r3, [r7, #22]

	if (hspi->State != HAL_SPI_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d002      	beq.n	8004640 <HAL_SPI_Transmit+0x46>
	{
		errorcode = HAL_BUSY;
 800463a:	2302      	movs	r3, #2
 800463c:	77fb      	strb	r3, [r7, #31]
		goto error;
 800463e:	e13d      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
	}

	if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_Transmit+0x52>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Transmit+0x58>
	{
		errorcode = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
		goto error;
 8004650:	e134      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2203      	movs	r2, #3
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pTxBuffPtr = (uint8_t*) pData;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t*) NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferSize = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->TxISR = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi->RxISR = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d10f      	bne.n	80046be <HAL_SPI_Transmit+0xc4>
	{
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	601a      	str	r2, [r3, #0]
		SPI_1LINE_TX(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d007      	beq.n	80046dc <HAL_SPI_Transmit+0xe2>
	{
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046da:	601a      	str	r2, [r3, #0]
	}

	/* Transmit data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e4:	d94b      	bls.n	800477e <HAL_SPI_Transmit+0x184>
	{
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_SPI_Transmit+0xfa>
				|| (initial_TxXferCount == 0x01U))
 80046ee:	8afb      	ldrh	r3, [r7, #22]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d13e      	bne.n	8004772 <HAL_SPI_Transmit+0x178>
		{
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	881a      	ldrh	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
		/* Transmit data in 16 Bit mode */
		while (hspi->TxXferCount > 0U)
 8004718:	e02b      	b.n	8004772 <HAL_SPI_Transmit+0x178>
		{
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d112      	bne.n	800474e <HAL_SPI_Transmit+0x154>
			{
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800474c:	e011      	b.n	8004772 <HAL_SPI_Transmit+0x178>
			}
			else
			{
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800474e:	f7fe fa2f 	bl	8002bb0 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d803      	bhi.n	8004766 <HAL_SPI_Transmit+0x16c>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d102      	bne.n	800476c <HAL_SPI_Transmit+0x172>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <HAL_SPI_Transmit+0x178>
				{
					errorcode = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	77fb      	strb	r3, [r7, #31]
					goto error;
 8004770:	e0a4      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ce      	bne.n	800471a <HAL_SPI_Transmit+0x120>
 800477c:	e07c      	b.n	8004878 <HAL_SPI_Transmit+0x27e>
		}
	}
	/* Transmit data in 8 Bit mode */
	else
	{
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_Transmit+0x192>
				|| (initial_TxXferCount == 0x01U))
 8004786:	8afb      	ldrh	r3, [r7, #22]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d170      	bne.n	800486e <HAL_SPI_Transmit+0x274>
		{
			if (hspi->TxXferCount > 1U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d912      	bls.n	80047bc <HAL_SPI_Transmit+0x1c2>
			{
				/* write on the data register in packing mode */
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	881a      	ldrh	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	1c9a      	adds	r2, r3, #2
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount -= 2U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b02      	subs	r3, #2
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047ba:	e058      	b.n	800486e <HAL_SPI_Transmit+0x274>
			}
			else
			{
				*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
		}
		while (hspi->TxXferCount > 0U)
 80047e2:	e044      	b.n	800486e <HAL_SPI_Transmit+0x274>
		{
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d12b      	bne.n	800484a <HAL_SPI_Transmit+0x250>
			{
				if (hspi->TxXferCount > 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d912      	bls.n	8004822 <HAL_SPI_Transmit+0x228>
				{
					/* write on the data register in packing mode */
					hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount -= 2U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b02      	subs	r3, #2
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004820:	e025      	b.n	800486e <HAL_SPI_Transmit+0x274>
				}
				else
				{
					*((__IO uint8_t*) &hspi->Instance->DR) =
							(*hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
					*((__IO uint8_t*) &hspi->Instance->DR) =
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
							(*hspi->pTxBuffPtr);
 800482c:	7812      	ldrb	r2, [r2, #0]
					*((__IO uint8_t*) &hspi->Instance->DR) =
 800482e:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004848:	e011      	b.n	800486e <HAL_SPI_Transmit+0x274>
				}
			}
			else
			{
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800484a:	f7fe f9b1 	bl	8002bb0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d803      	bhi.n	8004862 <HAL_SPI_Transmit+0x268>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d102      	bne.n	8004868 <HAL_SPI_Transmit+0x26e>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_SPI_Transmit+0x274>
				{
					errorcode = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	77fb      	strb	r3, [r7, #31]
					goto error;
 800486c:	e026      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1b5      	bne.n	80047e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f949 	bl	8004b14 <SPI_EndRxTxTransaction>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_SPI_Transmit+0x294>
	{
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	661a      	str	r2, [r3, #96]	; 0x60
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <HAL_SPI_Transmit+0x2b2>
	{
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]
	}

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x2c0>
	{
		errorcode = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e000      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 80048ba:	bf00      	nop
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <SPI_WaitFlagStateUntilTimeout>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, FlagStatus State, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048e8:	f7fe f962 	bl	8002bb0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	61fb      	str	r3, [r7, #28]
	tmp_tickstart = HAL_GetTick();
 80048f8:	f7fe f95a 	bl	8002bb0 <HAL_GetTick>
 80048fc:	61b8      	str	r0, [r7, #24]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048fe:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	015b      	lsls	r3, r3, #5
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]

	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	e054      	b.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xe2>
	{
		if (Timeout != HAL_MAX_DELAY)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d050      	beq.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xe2>
		{
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout)
 8004918:	f7fe f94a 	bl	8002bb0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	d902      	bls.n	800492e <SPI_WaitFlagStateUntilTimeout+0x56>
					|| (tmp_timeout == 0U))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d13d      	bne.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xd2>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800493c:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d111      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0x94>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d004      	beq.n	800495c <SPI_WaitFlagStateUntilTimeout+0x84>
								|| (hspi->Init.Direction
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d107      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0x94>
										== SPI_DIRECTION_2LINES_RXONLY)))
				{
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004974:	d10f      	bne.n	8004996 <SPI_WaitFlagStateUntilTimeout+0xbe>
				{
					SPI_RESET_CRC(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004994:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e017      	b.n	80049da <SPI_WaitFlagStateUntilTimeout+0x102>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
			{
				tmp_timeout = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
			}
			count--;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d19b      	bne.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x38>
		}
	}

	return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000000 	.word	0x20000000

080049e8 <SPI_WaitFifoStateUntilTimeout>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Fifo, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;
	__IO uint8_t *ptmpreg8;
	__IO uint8_t tmpreg8 = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049fa:	f7fe f8d9 	bl	8002bb0 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
	tmp_tickstart = HAL_GetTick();
 8004a0a:	f7fe f8d1 	bl	8002bb0 <HAL_GetTick>
 8004a0e:	6238      	str	r0, [r7, #32]

	/* Initialize the 8bit temporary pointer */
	ptmpreg8 = (__IO uint8_t*) &hspi->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	61fb      	str	r3, [r7, #28]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	0d1b      	lsrs	r3, r3, #20
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	61bb      	str	r3, [r7, #24]

	while ((hspi->Instance->SR & Fifo) != State)
 8004a30:	e060      	b.n	8004af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
	{
		if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a38:	d107      	bne.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x62>
		{
			/* Flush Data Register by a blank read */
			tmpreg8 = *ptmpreg8;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	75fb      	strb	r3, [r7, #23]
			/* To avoid GCC warning */
			UNUSED(tmpreg8);
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
		}

		if (Timeout != HAL_MAX_DELAY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d050      	beq.n	8004af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
		{
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout)
 8004a52:	f7fe f8ad 	bl	8002bb0 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d902      	bls.n	8004a68 <SPI_WaitFifoStateUntilTimeout+0x80>
					|| (tmp_timeout == 0U))
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13d      	bne.n	8004ae4 <SPI_WaitFifoStateUntilTimeout+0xfc>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a76:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a80:	d111      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d004      	beq.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0xae>
								|| (hspi->Init.Direction
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d107      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
										== SPI_DIRECTION_2LINES_RXONLY)))
				{
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aae:	d10f      	bne.n	8004ad0 <SPI_WaitFifoStateUntilTimeout+0xe8>
				{
					SPI_RESET_CRC(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ace:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0x11e>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <SPI_WaitFifoStateUntilTimeout+0x106>
			{
				tmp_timeout = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
			}
			count--;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	61bb      	str	r3, [r7, #24]
	while ((hspi->Instance->SR & Fifo) != State)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d196      	bne.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0x4a>
		}
	}

	return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000000 	.word	0x20000000

08004b14 <SPI_EndRxTxTransaction>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
	/* Control if the TX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ff5b 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <SPI_EndRxTxTransaction+0x34>
			Timeout, Tickstart) != HAL_OK)
	{
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e046      	b.n	8004bd6 <SPI_EndRxTxTransaction+0xc2>
	}

	/* Timeout in µs */
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT
			* (SystemCoreClock / 24U / 1000000U);
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <SPI_EndRxTxTransaction+0xcc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <SPI_EndRxTxTransaction+0xd0>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	0d5b      	lsrs	r3, r3, #21
 8004b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT
 8004b5c:	617b      	str	r3, [r7, #20]
	/* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
	if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b66:	d112      	bne.n	8004b8e <SPI_EndRxTxTransaction+0x7a>
	{
		/* Control the BSY flag */
		if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff feb0 	bl	80048d8 <SPI_WaitFlagStateUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <SPI_EndRxTxTransaction+0x98>
				Tickstart) != HAL_OK)
		{
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60
			return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e023      	b.n	8004bd6 <SPI_EndRxTxTransaction+0xc2>
		 * User have to calculate the timeout value to fit with the time of 1 byte transfer.
		 * This time is directly link with the SPI clock from Master device.
		 */
		do
		{
			if (count == 0U)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <SPI_EndRxTxTransaction+0x96>
			{
				break;
			}
			count--;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
		} while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d0f2      	beq.n	8004b8e <SPI_EndRxTxTransaction+0x7a>
 8004ba8:	e000      	b.n	8004bac <SPI_EndRxTxTransaction+0x98>
				break;
 8004baa:	bf00      	nop
	}

	/* Control if the RX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff15 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <SPI_EndRxTxTransaction+0xc0>
			Timeout, Tickstart) != HAL_OK)
	{
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e000      	b.n	8004bd6 <SPI_EndRxTxTransaction+0xc2>
	}

	return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000000 	.word	0x20000000
 8004be4:	165e9f81 	.word	0x165e9f81

08004be8 <HAL_TIM_Base_Init>:
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_Base_Init+0x12>
	{
		return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e049      	b.n	8004c8e <HAL_TIM_Base_Init+0xa6>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_TIM_Base_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc ff80 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f000 f900 	bl	8004e2c <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0b4      	b.n	8004e1e <HAL_TIM_ConfigClockSource+0x186>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <HAL_TIM_ConfigClockSource+0x190>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cda:	60bb      	str	r3, [r7, #8]
	htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cec:	d03e      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0xd4>
 8004cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf2:	f200 8087 	bhi.w	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	f000 8086 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x172>
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d87f      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b70      	cmp	r3, #112	; 0x70
 8004d06:	d01a      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0xa6>
 8004d08:	2b70      	cmp	r3, #112	; 0x70
 8004d0a:	d87b      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b60      	cmp	r3, #96	; 0x60
 8004d0e:	d050      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d10:	2b60      	cmp	r3, #96	; 0x60
 8004d12:	d877      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b50      	cmp	r3, #80	; 0x50
 8004d16:	d03c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0xfa>
 8004d18:	2b50      	cmp	r3, #80	; 0x50
 8004d1a:	d873      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d058      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d86f      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d064      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d86b      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d060      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d867      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d05c      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d05a      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	e062      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004d4e:	f000 f987 	bl	8005060 <TIM_ETR_SetConfig>

		/* Select the External clock mode1 and the ETRF trigger */
		tmpsmcr = htim->Instance->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60bb      	str	r3, [r7, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d60:	60bb      	str	r3, [r7, #8]
		/* Write to TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	609a      	str	r2, [r3, #8]
		break;
 8004d6a:	e04f      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004d7c:	f000 f970 	bl	8005060 <TIM_ETR_SetConfig>
		/* Enable the External clock mode2 */
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d8e:	609a      	str	r2, [r3, #8]
		break;
 8004d90:	e03c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 f8e4 	bl	8004f6c <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2150      	movs	r1, #80	; 0x50
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f93d 	bl	800502a <TIM_ITRx_SetConfig>
		break;
 8004db0:	e02c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI2 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI2_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
		TIM_TI2_ConfigInputStage(htim->Instance,
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 f903 	bl	8004fca <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2160      	movs	r1, #96	; 0x60
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f92d 	bl	800502a <TIM_ITRx_SetConfig>
		break;
 8004dd0:	e01c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 f8c4 	bl	8004f6c <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f91d 	bl	800502a <TIM_ITRx_SetConfig>
		break;
 8004df0:	e00c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
	case TIM_CLOCKSOURCE_ITR3:
	{
		/* Check whether or not the timer instance supports internal trigger input */
		assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f000 f914 	bl	800502a <TIM_ITRx_SetConfig>
		break;
 8004e02:	e003      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
	}

	default:
		status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
		break;
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
		break;
 8004e0a:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	fffeff88 	.word	0xfffeff88

08004e2c <TIM_Base_SetConfig>:
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
		const TIM_Base_InitTypeDef *Structure)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d00f      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <TIM_Base_SetConfig+0x118>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <TIM_Base_SetConfig+0x11c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <TIM_Base_SetConfig+0x120>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <TIM_Base_SetConfig+0x52>
	{
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02b      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d027      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <TIM_Base_SetConfig+0x118>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d023      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <TIM_Base_SetConfig+0x11c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01f      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <TIM_Base_SetConfig+0x120>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01b      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d017      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <TIM_Base_SetConfig+0x128>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	; (8004f58 <TIM_Base_SetConfig+0x12c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <TIM_Base_SetConfig+0x130>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <TIM_Base_SetConfig+0x134>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <TIM_Base_SetConfig+0x138>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <TIM_Base_SetConfig+0x13c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <TIM_Base_SetConfig+0xc4>
	{
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee4:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_Base_SetConfig+0xf8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d103      	bne.n	8004f2c <TIM_Base_SetConfig+0x100>
	{
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	615a      	str	r2, [r3, #20]
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800
 8004f60:	40001800 	.word	0x40001800
 8004f64:	40001c00 	.word	0x40001c00
 8004f68:	40002000 	.word	0x40002000

08004f6c <TIM_TI1_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f96:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 030a 	bic.w	r3, r3, #10
 8004fa8:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <TIM_TI2_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0210 	bic.w	r2, r3, #16
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff4:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005006:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	f043 0307 	orr.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507a:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	431a      	orrs	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e06d      	b.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

	/* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
	if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2f      	ldr	r2, [pc, #188]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
	{
		/* Check the parameters */
		assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

		/* Clear the MMS2 bits */
		tmpcr2 &= ~TIM_CR2_MMS2;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050f2:	60fb      	str	r3, [r7, #12]
		/* Select the TRGO2 source*/
		tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
	}

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005104:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d01d      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10c      	bne.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
	{
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40001800 	.word	0x40001800

080051bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e040      	b.n	8005250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fce8 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f82c 	bl	8005258 <UART_SetConfig>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e022      	b.n	8005250 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa84 	bl	8005720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb0b 	bl	8005864 <UART_CheckIdleState>
 800524e:	4603      	mov	r3, r0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba6      	ldr	r3, [pc, #664]	; (800551c <UART_SetConfig+0x2c4>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6979      	ldr	r1, [r7, #20]
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a94      	ldr	r2, [pc, #592]	; (8005520 <UART_SetConfig+0x2c8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d120      	bne.n	8005316 <UART_SetConfig+0xbe>
 80052d4:	4b93      	ldr	r3, [pc, #588]	; (8005524 <UART_SetConfig+0x2cc>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d816      	bhi.n	8005310 <UART_SetConfig+0xb8>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x90>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	08005305 	.word	0x08005305
 80052f0:	080052ff 	.word	0x080052ff
 80052f4:	0800530b 	.word	0x0800530b
 80052f8:	2301      	movs	r3, #1
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e150      	b.n	80055a0 <UART_SetConfig+0x348>
 80052fe:	2302      	movs	r3, #2
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e14d      	b.n	80055a0 <UART_SetConfig+0x348>
 8005304:	2304      	movs	r3, #4
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e14a      	b.n	80055a0 <UART_SetConfig+0x348>
 800530a:	2308      	movs	r3, #8
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e147      	b.n	80055a0 <UART_SetConfig+0x348>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e144      	b.n	80055a0 <UART_SetConfig+0x348>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a83      	ldr	r2, [pc, #524]	; (8005528 <UART_SetConfig+0x2d0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d132      	bne.n	8005386 <UART_SetConfig+0x12e>
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <UART_SetConfig+0x2cc>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d828      	bhi.n	8005380 <UART_SetConfig+0x128>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0xdc>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005369 	.word	0x08005369
 8005338:	08005381 	.word	0x08005381
 800533c:	08005381 	.word	0x08005381
 8005340:	08005381 	.word	0x08005381
 8005344:	08005375 	.word	0x08005375
 8005348:	08005381 	.word	0x08005381
 800534c:	08005381 	.word	0x08005381
 8005350:	08005381 	.word	0x08005381
 8005354:	0800536f 	.word	0x0800536f
 8005358:	08005381 	.word	0x08005381
 800535c:	08005381 	.word	0x08005381
 8005360:	08005381 	.word	0x08005381
 8005364:	0800537b 	.word	0x0800537b
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e118      	b.n	80055a0 <UART_SetConfig+0x348>
 800536e:	2302      	movs	r3, #2
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e115      	b.n	80055a0 <UART_SetConfig+0x348>
 8005374:	2304      	movs	r3, #4
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e112      	b.n	80055a0 <UART_SetConfig+0x348>
 800537a:	2308      	movs	r3, #8
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e10f      	b.n	80055a0 <UART_SetConfig+0x348>
 8005380:	2310      	movs	r3, #16
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e10c      	b.n	80055a0 <UART_SetConfig+0x348>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a68      	ldr	r2, [pc, #416]	; (800552c <UART_SetConfig+0x2d4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d120      	bne.n	80053d2 <UART_SetConfig+0x17a>
 8005390:	4b64      	ldr	r3, [pc, #400]	; (8005524 <UART_SetConfig+0x2cc>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d013      	beq.n	80053c6 <UART_SetConfig+0x16e>
 800539e:	2b30      	cmp	r3, #48	; 0x30
 80053a0:	d814      	bhi.n	80053cc <UART_SetConfig+0x174>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d009      	beq.n	80053ba <UART_SetConfig+0x162>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d810      	bhi.n	80053cc <UART_SetConfig+0x174>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <UART_SetConfig+0x15c>
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d006      	beq.n	80053c0 <UART_SetConfig+0x168>
 80053b2:	e00b      	b.n	80053cc <UART_SetConfig+0x174>
 80053b4:	2300      	movs	r3, #0
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e0f2      	b.n	80055a0 <UART_SetConfig+0x348>
 80053ba:	2302      	movs	r3, #2
 80053bc:	77fb      	strb	r3, [r7, #31]
 80053be:	e0ef      	b.n	80055a0 <UART_SetConfig+0x348>
 80053c0:	2304      	movs	r3, #4
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e0ec      	b.n	80055a0 <UART_SetConfig+0x348>
 80053c6:	2308      	movs	r3, #8
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e0e9      	b.n	80055a0 <UART_SetConfig+0x348>
 80053cc:	2310      	movs	r3, #16
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e0e6      	b.n	80055a0 <UART_SetConfig+0x348>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <UART_SetConfig+0x2d8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d120      	bne.n	800541e <UART_SetConfig+0x1c6>
 80053dc:	4b51      	ldr	r3, [pc, #324]	; (8005524 <UART_SetConfig+0x2cc>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d013      	beq.n	8005412 <UART_SetConfig+0x1ba>
 80053ea:	2bc0      	cmp	r3, #192	; 0xc0
 80053ec:	d814      	bhi.n	8005418 <UART_SetConfig+0x1c0>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d009      	beq.n	8005406 <UART_SetConfig+0x1ae>
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d810      	bhi.n	8005418 <UART_SetConfig+0x1c0>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <UART_SetConfig+0x1a8>
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d006      	beq.n	800540c <UART_SetConfig+0x1b4>
 80053fe:	e00b      	b.n	8005418 <UART_SetConfig+0x1c0>
 8005400:	2300      	movs	r3, #0
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e0cc      	b.n	80055a0 <UART_SetConfig+0x348>
 8005406:	2302      	movs	r3, #2
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e0c9      	b.n	80055a0 <UART_SetConfig+0x348>
 800540c:	2304      	movs	r3, #4
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e0c6      	b.n	80055a0 <UART_SetConfig+0x348>
 8005412:	2308      	movs	r3, #8
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e0c3      	b.n	80055a0 <UART_SetConfig+0x348>
 8005418:	2310      	movs	r3, #16
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e0c0      	b.n	80055a0 <UART_SetConfig+0x348>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a44      	ldr	r2, [pc, #272]	; (8005534 <UART_SetConfig+0x2dc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d125      	bne.n	8005474 <UART_SetConfig+0x21c>
 8005428:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <UART_SetConfig+0x2cc>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d017      	beq.n	8005468 <UART_SetConfig+0x210>
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d817      	bhi.n	800546e <UART_SetConfig+0x216>
 800543e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005442:	d00b      	beq.n	800545c <UART_SetConfig+0x204>
 8005444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005448:	d811      	bhi.n	800546e <UART_SetConfig+0x216>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <UART_SetConfig+0x1fe>
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	d006      	beq.n	8005462 <UART_SetConfig+0x20a>
 8005454:	e00b      	b.n	800546e <UART_SetConfig+0x216>
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0a1      	b.n	80055a0 <UART_SetConfig+0x348>
 800545c:	2302      	movs	r3, #2
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e09e      	b.n	80055a0 <UART_SetConfig+0x348>
 8005462:	2304      	movs	r3, #4
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e09b      	b.n	80055a0 <UART_SetConfig+0x348>
 8005468:	2308      	movs	r3, #8
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e098      	b.n	80055a0 <UART_SetConfig+0x348>
 800546e:	2310      	movs	r3, #16
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e095      	b.n	80055a0 <UART_SetConfig+0x348>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <UART_SetConfig+0x2e0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d125      	bne.n	80054ca <UART_SetConfig+0x272>
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <UART_SetConfig+0x2cc>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800548c:	d017      	beq.n	80054be <UART_SetConfig+0x266>
 800548e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005492:	d817      	bhi.n	80054c4 <UART_SetConfig+0x26c>
 8005494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005498:	d00b      	beq.n	80054b2 <UART_SetConfig+0x25a>
 800549a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549e:	d811      	bhi.n	80054c4 <UART_SetConfig+0x26c>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <UART_SetConfig+0x254>
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a8:	d006      	beq.n	80054b8 <UART_SetConfig+0x260>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x26c>
 80054ac:	2301      	movs	r3, #1
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e076      	b.n	80055a0 <UART_SetConfig+0x348>
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e073      	b.n	80055a0 <UART_SetConfig+0x348>
 80054b8:	2304      	movs	r3, #4
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e070      	b.n	80055a0 <UART_SetConfig+0x348>
 80054be:	2308      	movs	r3, #8
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e06d      	b.n	80055a0 <UART_SetConfig+0x348>
 80054c4:	2310      	movs	r3, #16
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e06a      	b.n	80055a0 <UART_SetConfig+0x348>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <UART_SetConfig+0x2e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d138      	bne.n	8005546 <UART_SetConfig+0x2ee>
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e2:	d017      	beq.n	8005514 <UART_SetConfig+0x2bc>
 80054e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e8:	d82a      	bhi.n	8005540 <UART_SetConfig+0x2e8>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	d00b      	beq.n	8005508 <UART_SetConfig+0x2b0>
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d824      	bhi.n	8005540 <UART_SetConfig+0x2e8>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <UART_SetConfig+0x2aa>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d006      	beq.n	800550e <UART_SetConfig+0x2b6>
 8005500:	e01e      	b.n	8005540 <UART_SetConfig+0x2e8>
 8005502:	2300      	movs	r3, #0
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e04b      	b.n	80055a0 <UART_SetConfig+0x348>
 8005508:	2302      	movs	r3, #2
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e048      	b.n	80055a0 <UART_SetConfig+0x348>
 800550e:	2304      	movs	r3, #4
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e045      	b.n	80055a0 <UART_SetConfig+0x348>
 8005514:	2308      	movs	r3, #8
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e042      	b.n	80055a0 <UART_SetConfig+0x348>
 800551a:	bf00      	nop
 800551c:	efff69f3 	.word	0xefff69f3
 8005520:	40011000 	.word	0x40011000
 8005524:	40023800 	.word	0x40023800
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40004c00 	.word	0x40004c00
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40007800 	.word	0x40007800
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e02c      	b.n	80055a0 <UART_SetConfig+0x348>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a72      	ldr	r2, [pc, #456]	; (8005714 <UART_SetConfig+0x4bc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d125      	bne.n	800559c <UART_SetConfig+0x344>
 8005550:	4b71      	ldr	r3, [pc, #452]	; (8005718 <UART_SetConfig+0x4c0>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800555a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800555e:	d017      	beq.n	8005590 <UART_SetConfig+0x338>
 8005560:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005564:	d817      	bhi.n	8005596 <UART_SetConfig+0x33e>
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	d00b      	beq.n	8005584 <UART_SetConfig+0x32c>
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d811      	bhi.n	8005596 <UART_SetConfig+0x33e>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <UART_SetConfig+0x326>
 8005576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800557a:	d006      	beq.n	800558a <UART_SetConfig+0x332>
 800557c:	e00b      	b.n	8005596 <UART_SetConfig+0x33e>
 800557e:	2300      	movs	r3, #0
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e00d      	b.n	80055a0 <UART_SetConfig+0x348>
 8005584:	2302      	movs	r3, #2
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e00a      	b.n	80055a0 <UART_SetConfig+0x348>
 800558a:	2304      	movs	r3, #4
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e007      	b.n	80055a0 <UART_SetConfig+0x348>
 8005590:	2308      	movs	r3, #8
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e004      	b.n	80055a0 <UART_SetConfig+0x348>
 8005596:	2310      	movs	r3, #16
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e001      	b.n	80055a0 <UART_SetConfig+0x348>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d15b      	bne.n	8005662 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d828      	bhi.n	8005602 <UART_SetConfig+0x3aa>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x360>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005603 	.word	0x08005603
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	08005603 	.word	0x08005603
 80055d0:	08005603 	.word	0x08005603
 80055d4:	08005603 	.word	0x08005603
 80055d8:	080055fb 	.word	0x080055fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fe fae8 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 80055e0:	61b8      	str	r0, [r7, #24]
        break;
 80055e2:	e013      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fe faf8 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80055e8:	61b8      	str	r0, [r7, #24]
        break;
 80055ea:	e00f      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <UART_SetConfig+0x4c4>)
 80055ee:	61bb      	str	r3, [r7, #24]
        break;
 80055f0:	e00c      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f2:	f7fe f9cb 	bl	800398c <HAL_RCC_GetSysClockFreq>
 80055f6:	61b8      	str	r0, [r7, #24]
        break;
 80055f8:	e008      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	61bb      	str	r3, [r7, #24]
        break;
 8005600:	e004      	b.n	800560c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	77bb      	strb	r3, [r7, #30]
        break;
 800560a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d074      	beq.n	80056fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	005a      	lsls	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	441a      	add	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d916      	bls.n	800565c <UART_SetConfig+0x404>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d212      	bcs.n	800565c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f023 030f 	bic.w	r3, r3, #15
 800563e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	b29a      	uxth	r2, r3
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	4313      	orrs	r3, r2
 8005650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	89fa      	ldrh	r2, [r7, #14]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e04f      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	77bb      	strb	r3, [r7, #30]
 8005660:	e04c      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d828      	bhi.n	80056ba <UART_SetConfig+0x462>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x418>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056ab 	.word	0x080056ab
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056bb 	.word	0x080056bb
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fe fa8c 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8005698:	61b8      	str	r0, [r7, #24]
        break;
 800569a:	e013      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fe fa9c 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80056a0:	61b8      	str	r0, [r7, #24]
        break;
 80056a2:	e00f      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <UART_SetConfig+0x4c4>)
 80056a6:	61bb      	str	r3, [r7, #24]
        break;
 80056a8:	e00c      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fe f96f 	bl	800398c <HAL_RCC_GetSysClockFreq>
 80056ae:	61b8      	str	r0, [r7, #24]
        break;
 80056b0:	e008      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61bb      	str	r3, [r7, #24]
        break;
 80056b8:	e004      	b.n	80056c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	77bb      	strb	r3, [r7, #30]
        break;
 80056c2:	bf00      	nop
    }

    if (pclk != 0U)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	085a      	lsrs	r2, r3, #1
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	441a      	add	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d909      	bls.n	80056f8 <UART_SetConfig+0x4a0>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ea:	d205      	bcs.n	80056f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e001      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005708:	7fbb      	ldrb	r3, [r7, #30]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40007c00 	.word	0x40007c00
 8005718:	40023800 	.word	0x40023800
 800571c:	00f42400 	.word	0x00f42400

08005720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01a      	beq.n	8005836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581e:	d10a      	bne.n	8005836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005874:	f7fd f99c 	bl	8002bb0 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d10e      	bne.n	80058a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f831 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e027      	b.n	80058f6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d10e      	bne.n	80058d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f81b 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e011      	b.n	80058f6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b09c      	sub	sp, #112	; 0x70
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590e:	e0a7      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	f000 80a3 	beq.w	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fd f949 	bl	8002bb0 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <UART_WaitOnFlagUntilTimeout+0x32>
 800592a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800592c:	2b00      	cmp	r3, #0
 800592e:	d13f      	bne.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	64fb      	str	r3, [r7, #76]	; 0x4c
	return (result);
 800593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005944:	667b      	str	r3, [r7, #100]	; 0x64
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005950:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	657b      	str	r3, [r7, #84]	; 0x54
	return (result);
 800595c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e6      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
	return (result);
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	663b      	str	r3, [r7, #96]	; 0x60
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005982:	64ba      	str	r2, [r7, #72]	; 0x48
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
	return (result);
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e5      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e068      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d050      	beq.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059cc:	d148      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	633a      	str	r2, [r7, #48]	; 0x30
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e6      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	613b      	str	r3, [r7, #16]
	return (result);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a2a:	623a      	str	r2, [r7, #32]
 8005a2c:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	69f9      	ldr	r1, [r7, #28]
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	61bb      	str	r3, [r7, #24]
	return (result);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e010      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f43f af48 	beq.w	8005910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3770      	adds	r7, #112	; 0x70
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <__cvt>:
 8005a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8c:	ed2d 8b02 	vpush	{d8}
 8005a90:	eeb0 8b40 	vmov.f64	d8, d0
 8005a94:	b085      	sub	sp, #20
 8005a96:	4617      	mov	r7, r2
 8005a98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005a9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005a9c:	ee18 2a90 	vmov	r2, s17
 8005aa0:	f025 0520 	bic.w	r5, r5, #32
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	bfb6      	itet	lt
 8005aa8:	222d      	movlt	r2, #45	; 0x2d
 8005aaa:	2200      	movge	r2, #0
 8005aac:	eeb1 8b40 	vneglt.f64	d8, d0
 8005ab0:	2d46      	cmp	r5, #70	; 0x46
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	d004      	beq.n	8005ac2 <__cvt+0x38>
 8005ab8:	2d45      	cmp	r5, #69	; 0x45
 8005aba:	d100      	bne.n	8005abe <__cvt+0x34>
 8005abc:	3401      	adds	r4, #1
 8005abe:	2102      	movs	r1, #2
 8005ac0:	e000      	b.n	8005ac4 <__cvt+0x3a>
 8005ac2:	2103      	movs	r1, #3
 8005ac4:	ab03      	add	r3, sp, #12
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	ab02      	add	r3, sp, #8
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4622      	mov	r2, r4
 8005ace:	4633      	mov	r3, r6
 8005ad0:	eeb0 0b48 	vmov.f64	d0, d8
 8005ad4:	f001 f850 	bl	8006b78 <_dtoa_r>
 8005ad8:	2d47      	cmp	r5, #71	; 0x47
 8005ada:	d101      	bne.n	8005ae0 <__cvt+0x56>
 8005adc:	07fb      	lsls	r3, r7, #31
 8005ade:	d51a      	bpl.n	8005b16 <__cvt+0x8c>
 8005ae0:	2d46      	cmp	r5, #70	; 0x46
 8005ae2:	eb00 0204 	add.w	r2, r0, r4
 8005ae6:	d10c      	bne.n	8005b02 <__cvt+0x78>
 8005ae8:	7803      	ldrb	r3, [r0, #0]
 8005aea:	2b30      	cmp	r3, #48	; 0x30
 8005aec:	d107      	bne.n	8005afe <__cvt+0x74>
 8005aee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af6:	bf1c      	itt	ne
 8005af8:	f1c4 0401 	rsbne	r4, r4, #1
 8005afc:	6034      	strne	r4, [r6, #0]
 8005afe:	6833      	ldr	r3, [r6, #0]
 8005b00:	441a      	add	r2, r3
 8005b02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	bf08      	it	eq
 8005b0c:	9203      	streq	r2, [sp, #12]
 8005b0e:	2130      	movs	r1, #48	; 0x30
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d307      	bcc.n	8005b26 <__cvt+0x9c>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b1a:	1a1b      	subs	r3, r3, r0
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	b005      	add	sp, #20
 8005b20:	ecbd 8b02 	vpop	{d8}
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b26:	1c5c      	adds	r4, r3, #1
 8005b28:	9403      	str	r4, [sp, #12]
 8005b2a:	7019      	strb	r1, [r3, #0]
 8005b2c:	e7f0      	b.n	8005b10 <__cvt+0x86>

08005b2e <__exponent>:
 8005b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b30:	4603      	mov	r3, r0
 8005b32:	2900      	cmp	r1, #0
 8005b34:	bfb8      	it	lt
 8005b36:	4249      	neglt	r1, r1
 8005b38:	f803 2b02 	strb.w	r2, [r3], #2
 8005b3c:	bfb4      	ite	lt
 8005b3e:	222d      	movlt	r2, #45	; 0x2d
 8005b40:	222b      	movge	r2, #43	; 0x2b
 8005b42:	2909      	cmp	r1, #9
 8005b44:	7042      	strb	r2, [r0, #1]
 8005b46:	dd2a      	ble.n	8005b9e <__exponent+0x70>
 8005b48:	f10d 0207 	add.w	r2, sp, #7
 8005b4c:	4617      	mov	r7, r2
 8005b4e:	260a      	movs	r6, #10
 8005b50:	4694      	mov	ip, r2
 8005b52:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b56:	fb06 1415 	mls	r4, r6, r5, r1
 8005b5a:	3430      	adds	r4, #48	; 0x30
 8005b5c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b60:	460c      	mov	r4, r1
 8005b62:	2c63      	cmp	r4, #99	; 0x63
 8005b64:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b68:	4629      	mov	r1, r5
 8005b6a:	dcf1      	bgt.n	8005b50 <__exponent+0x22>
 8005b6c:	3130      	adds	r1, #48	; 0x30
 8005b6e:	f1ac 0402 	sub.w	r4, ip, #2
 8005b72:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b76:	1c41      	adds	r1, r0, #1
 8005b78:	4622      	mov	r2, r4
 8005b7a:	42ba      	cmp	r2, r7
 8005b7c:	d30a      	bcc.n	8005b94 <__exponent+0x66>
 8005b7e:	f10d 0209 	add.w	r2, sp, #9
 8005b82:	eba2 020c 	sub.w	r2, r2, ip
 8005b86:	42bc      	cmp	r4, r7
 8005b88:	bf88      	it	hi
 8005b8a:	2200      	movhi	r2, #0
 8005b8c:	4413      	add	r3, r2
 8005b8e:	1a18      	subs	r0, r3, r0
 8005b90:	b003      	add	sp, #12
 8005b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b94:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b98:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b9c:	e7ed      	b.n	8005b7a <__exponent+0x4c>
 8005b9e:	2330      	movs	r3, #48	; 0x30
 8005ba0:	3130      	adds	r1, #48	; 0x30
 8005ba2:	7083      	strb	r3, [r0, #2]
 8005ba4:	70c1      	strb	r1, [r0, #3]
 8005ba6:	1d03      	adds	r3, r0, #4
 8005ba8:	e7f1      	b.n	8005b8e <__exponent+0x60>
 8005baa:	0000      	movs	r0, r0
 8005bac:	0000      	movs	r0, r0
	...

08005bb0 <_printf_float>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	b08b      	sub	sp, #44	; 0x2c
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005bbc:	4616      	mov	r6, r2
 8005bbe:	461f      	mov	r7, r3
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	f000 fed1 	bl	8006968 <_localeconv_r>
 8005bc6:	f8d0 b000 	ldr.w	fp, [r0]
 8005bca:	4658      	mov	r0, fp
 8005bcc:	f7fa fb88 	bl	80002e0 <strlen>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9308      	str	r3, [sp, #32]
 8005bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	3307      	adds	r3, #7
 8005be0:	f023 0307 	bic.w	r3, r3, #7
 8005be4:	f103 0108 	add.w	r1, r3, #8
 8005be8:	f8c8 1000 	str.w	r1, [r8]
 8005bec:	ed93 0b00 	vldr	d0, [r3]
 8005bf0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005e50 <_printf_float+0x2a0>
 8005bf4:	eeb0 7bc0 	vabs.f64	d7, d0
 8005bf8:	eeb4 7b46 	vcmp.f64	d7, d6
 8005bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c00:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005c04:	4682      	mov	sl, r0
 8005c06:	dd24      	ble.n	8005c52 <_printf_float+0xa2>
 8005c08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c10:	d502      	bpl.n	8005c18 <_printf_float+0x68>
 8005c12:	232d      	movs	r3, #45	; 0x2d
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c18:	498f      	ldr	r1, [pc, #572]	; (8005e58 <_printf_float+0x2a8>)
 8005c1a:	4b90      	ldr	r3, [pc, #576]	; (8005e5c <_printf_float+0x2ac>)
 8005c1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c20:	bf94      	ite	ls
 8005c22:	4688      	movls	r8, r1
 8005c24:	4698      	movhi	r8, r3
 8005c26:	2303      	movs	r3, #3
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	f022 0204 	bic.w	r2, r2, #4
 8005c2e:	2300      	movs	r3, #0
 8005c30:	6022      	str	r2, [r4, #0]
 8005c32:	9304      	str	r3, [sp, #16]
 8005c34:	9700      	str	r7, [sp, #0]
 8005c36:	4633      	mov	r3, r6
 8005c38:	aa09      	add	r2, sp, #36	; 0x24
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f9d1 	bl	8005fe4 <_printf_common>
 8005c42:	3001      	adds	r0, #1
 8005c44:	f040 808a 	bne.w	8005d5c <_printf_float+0x1ac>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	b00b      	add	sp, #44	; 0x2c
 8005c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c52:	eeb4 0b40 	vcmp.f64	d0, d0
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	d709      	bvc.n	8005c70 <_printf_float+0xc0>
 8005c5c:	ee10 3a90 	vmov	r3, s1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bfbc      	itt	lt
 8005c64:	232d      	movlt	r3, #45	; 0x2d
 8005c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c6a:	497d      	ldr	r1, [pc, #500]	; (8005e60 <_printf_float+0x2b0>)
 8005c6c:	4b7d      	ldr	r3, [pc, #500]	; (8005e64 <_printf_float+0x2b4>)
 8005c6e:	e7d5      	b.n	8005c1c <_printf_float+0x6c>
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c76:	9104      	str	r1, [sp, #16]
 8005c78:	1c59      	adds	r1, r3, #1
 8005c7a:	d13c      	bne.n	8005cf6 <_printf_float+0x146>
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	ab08      	add	r3, sp, #32
 8005c86:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c8e:	ab07      	add	r3, sp, #28
 8005c90:	6861      	ldr	r1, [r4, #4]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	6022      	str	r2, [r4, #0]
 8005c96:	f10d 031b 	add.w	r3, sp, #27
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f7ff fef5 	bl	8005a8a <__cvt>
 8005ca0:	9b04      	ldr	r3, [sp, #16]
 8005ca2:	9907      	ldr	r1, [sp, #28]
 8005ca4:	2b47      	cmp	r3, #71	; 0x47
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	d108      	bne.n	8005cbc <_printf_float+0x10c>
 8005caa:	1cc8      	adds	r0, r1, #3
 8005cac:	db02      	blt.n	8005cb4 <_printf_float+0x104>
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	dd41      	ble.n	8005d38 <_printf_float+0x188>
 8005cb4:	f1a9 0902 	sub.w	r9, r9, #2
 8005cb8:	fa5f f989 	uxtb.w	r9, r9
 8005cbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cc0:	d820      	bhi.n	8005d04 <_printf_float+0x154>
 8005cc2:	3901      	subs	r1, #1
 8005cc4:	464a      	mov	r2, r9
 8005cc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cca:	9107      	str	r1, [sp, #28]
 8005ccc:	f7ff ff2f 	bl	8005b2e <__exponent>
 8005cd0:	9a08      	ldr	r2, [sp, #32]
 8005cd2:	9004      	str	r0, [sp, #16]
 8005cd4:	1813      	adds	r3, r2, r0
 8005cd6:	2a01      	cmp	r2, #1
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	dc02      	bgt.n	8005ce2 <_printf_float+0x132>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	07d2      	lsls	r2, r2, #31
 8005ce0:	d501      	bpl.n	8005ce6 <_printf_float+0x136>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0a2      	beq.n	8005c34 <_printf_float+0x84>
 8005cee:	232d      	movs	r3, #45	; 0x2d
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	e79e      	b.n	8005c34 <_printf_float+0x84>
 8005cf6:	9904      	ldr	r1, [sp, #16]
 8005cf8:	2947      	cmp	r1, #71	; 0x47
 8005cfa:	d1c1      	bne.n	8005c80 <_printf_float+0xd0>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1bf      	bne.n	8005c80 <_printf_float+0xd0>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e7bc      	b.n	8005c7e <_printf_float+0xce>
 8005d04:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d08:	d118      	bne.n	8005d3c <_printf_float+0x18c>
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	dd0b      	ble.n	8005d28 <_printf_float+0x178>
 8005d10:	6121      	str	r1, [r4, #16]
 8005d12:	b913      	cbnz	r3, 8005d1a <_printf_float+0x16a>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d0      	lsls	r0, r2, #31
 8005d18:	d502      	bpl.n	8005d20 <_printf_float+0x170>
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	440b      	add	r3, r1
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	2300      	movs	r3, #0
 8005d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	e7de      	b.n	8005ce6 <_printf_float+0x136>
 8005d28:	b913      	cbnz	r3, 8005d30 <_printf_float+0x180>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	07d2      	lsls	r2, r2, #31
 8005d2e:	d501      	bpl.n	8005d34 <_printf_float+0x184>
 8005d30:	3302      	adds	r3, #2
 8005d32:	e7f4      	b.n	8005d1e <_printf_float+0x16e>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e7f2      	b.n	8005d1e <_printf_float+0x16e>
 8005d38:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d3c:	9b08      	ldr	r3, [sp, #32]
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	db05      	blt.n	8005d4e <_printf_float+0x19e>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6121      	str	r1, [r4, #16]
 8005d46:	07d8      	lsls	r0, r3, #31
 8005d48:	d5ea      	bpl.n	8005d20 <_printf_float+0x170>
 8005d4a:	1c4b      	adds	r3, r1, #1
 8005d4c:	e7e7      	b.n	8005d1e <_printf_float+0x16e>
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	bfd4      	ite	le
 8005d52:	f1c1 0202 	rsble	r2, r1, #2
 8005d56:	2201      	movgt	r2, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	e7e0      	b.n	8005d1e <_printf_float+0x16e>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	055a      	lsls	r2, r3, #21
 8005d60:	d407      	bmi.n	8005d72 <_printf_float+0x1c2>
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	4642      	mov	r2, r8
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d12a      	bne.n	8005dc6 <_printf_float+0x216>
 8005d70:	e76a      	b.n	8005c48 <_printf_float+0x98>
 8005d72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d76:	f240 80e0 	bls.w	8005f3a <_printf_float+0x38a>
 8005d7a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005d7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	d133      	bne.n	8005df0 <_printf_float+0x240>
 8005d88:	4a37      	ldr	r2, [pc, #220]	; (8005e68 <_printf_float+0x2b8>)
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b8      	blx	r7
 8005d92:	3001      	adds	r0, #1
 8005d94:	f43f af58 	beq.w	8005c48 <_printf_float+0x98>
 8005d98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	db02      	blt.n	8005da6 <_printf_float+0x1f6>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	07d8      	lsls	r0, r3, #31
 8005da4:	d50f      	bpl.n	8005dc6 <_printf_float+0x216>
 8005da6:	4653      	mov	r3, sl
 8005da8:	465a      	mov	r2, fp
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f af49 	beq.w	8005c48 <_printf_float+0x98>
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	f104 091a 	add.w	r9, r4, #26
 8005dbe:	9b08      	ldr	r3, [sp, #32]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	4543      	cmp	r3, r8
 8005dc4:	dc09      	bgt.n	8005dda <_printf_float+0x22a>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	079b      	lsls	r3, r3, #30
 8005dca:	f100 8106 	bmi.w	8005fda <_printf_float+0x42a>
 8005dce:	68e0      	ldr	r0, [r4, #12]
 8005dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd2:	4298      	cmp	r0, r3
 8005dd4:	bfb8      	it	lt
 8005dd6:	4618      	movlt	r0, r3
 8005dd8:	e738      	b.n	8005c4c <_printf_float+0x9c>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	464a      	mov	r2, r9
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f af2f 	beq.w	8005c48 <_printf_float+0x98>
 8005dea:	f108 0801 	add.w	r8, r8, #1
 8005dee:	e7e6      	b.n	8005dbe <_printf_float+0x20e>
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dc3a      	bgt.n	8005e6c <_printf_float+0x2bc>
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <_printf_float+0x2b8>)
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f af21 	beq.w	8005c48 <_printf_float+0x98>
 8005e06:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	d102      	bne.n	8005e14 <_printf_float+0x264>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	07d9      	lsls	r1, r3, #31
 8005e12:	d5d8      	bpl.n	8005dc6 <_printf_float+0x216>
 8005e14:	4653      	mov	r3, sl
 8005e16:	465a      	mov	r2, fp
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af12 	beq.w	8005c48 <_printf_float+0x98>
 8005e24:	f04f 0900 	mov.w	r9, #0
 8005e28:	f104 0a1a 	add.w	sl, r4, #26
 8005e2c:	9b07      	ldr	r3, [sp, #28]
 8005e2e:	425b      	negs	r3, r3
 8005e30:	454b      	cmp	r3, r9
 8005e32:	dc01      	bgt.n	8005e38 <_printf_float+0x288>
 8005e34:	9b08      	ldr	r3, [sp, #32]
 8005e36:	e795      	b.n	8005d64 <_printf_float+0x1b4>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4652      	mov	r2, sl
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f af00 	beq.w	8005c48 <_printf_float+0x98>
 8005e48:	f109 0901 	add.w	r9, r9, #1
 8005e4c:	e7ee      	b.n	8005e2c <_printf_float+0x27c>
 8005e4e:	bf00      	nop
 8005e50:	ffffffff 	.word	0xffffffff
 8005e54:	7fefffff 	.word	0x7fefffff
 8005e58:	0800a3a0 	.word	0x0800a3a0
 8005e5c:	0800a3a4 	.word	0x0800a3a4
 8005e60:	0800a3a8 	.word	0x0800a3a8
 8005e64:	0800a3ac 	.word	0x0800a3ac
 8005e68:	0800a3b0 	.word	0x0800a3b0
 8005e6c:	9a08      	ldr	r2, [sp, #32]
 8005e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e70:	429a      	cmp	r2, r3
 8005e72:	bfa8      	it	ge
 8005e74:	461a      	movge	r2, r3
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	4691      	mov	r9, r2
 8005e7a:	dc38      	bgt.n	8005eee <_printf_float+0x33e>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9305      	str	r3, [sp, #20]
 8005e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e84:	f104 021a 	add.w	r2, r4, #26
 8005e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e8a:	9905      	ldr	r1, [sp, #20]
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	eba3 0309 	sub.w	r3, r3, r9
 8005e92:	428b      	cmp	r3, r1
 8005e94:	dc33      	bgt.n	8005efe <_printf_float+0x34e>
 8005e96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	db3c      	blt.n	8005f18 <_printf_float+0x368>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	07da      	lsls	r2, r3, #31
 8005ea2:	d439      	bmi.n	8005f18 <_printf_float+0x368>
 8005ea4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005ea8:	eba2 0903 	sub.w	r9, r2, r3
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	4591      	cmp	r9, r2
 8005eb2:	bfa8      	it	ge
 8005eb4:	4691      	movge	r9, r2
 8005eb6:	f1b9 0f00 	cmp.w	r9, #0
 8005eba:	dc35      	bgt.n	8005f28 <_printf_float+0x378>
 8005ebc:	f04f 0800 	mov.w	r8, #0
 8005ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec4:	f104 0a1a 	add.w	sl, r4, #26
 8005ec8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	eba3 0309 	sub.w	r3, r3, r9
 8005ed2:	4543      	cmp	r3, r8
 8005ed4:	f77f af77 	ble.w	8005dc6 <_printf_float+0x216>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4652      	mov	r2, sl
 8005edc:	4631      	mov	r1, r6
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f43f aeb0 	beq.w	8005c48 <_printf_float+0x98>
 8005ee8:	f108 0801 	add.w	r8, r8, #1
 8005eec:	e7ec      	b.n	8005ec8 <_printf_float+0x318>
 8005eee:	4613      	mov	r3, r2
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4642      	mov	r2, r8
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d1bf      	bne.n	8005e7c <_printf_float+0x2cc>
 8005efc:	e6a4      	b.n	8005c48 <_printf_float+0x98>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	9204      	str	r2, [sp, #16]
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f ae9d 	beq.w	8005c48 <_printf_float+0x98>
 8005f0e:	9b05      	ldr	r3, [sp, #20]
 8005f10:	9a04      	ldr	r2, [sp, #16]
 8005f12:	3301      	adds	r3, #1
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	e7b7      	b.n	8005e88 <_printf_float+0x2d8>
 8005f18:	4653      	mov	r3, sl
 8005f1a:	465a      	mov	r2, fp
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	d1be      	bne.n	8005ea4 <_printf_float+0x2f4>
 8005f26:	e68f      	b.n	8005c48 <_printf_float+0x98>
 8005f28:	9a04      	ldr	r2, [sp, #16]
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	4442      	add	r2, r8
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	d1c1      	bne.n	8005ebc <_printf_float+0x30c>
 8005f38:	e686      	b.n	8005c48 <_printf_float+0x98>
 8005f3a:	9a08      	ldr	r2, [sp, #32]
 8005f3c:	2a01      	cmp	r2, #1
 8005f3e:	dc01      	bgt.n	8005f44 <_printf_float+0x394>
 8005f40:	07db      	lsls	r3, r3, #31
 8005f42:	d537      	bpl.n	8005fb4 <_printf_float+0x404>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4642      	mov	r2, r8
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f ae7a 	beq.w	8005c48 <_printf_float+0x98>
 8005f54:	4653      	mov	r3, sl
 8005f56:	465a      	mov	r2, fp
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f ae72 	beq.w	8005c48 <_printf_float+0x98>
 8005f64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005f68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	9b08      	ldr	r3, [sp, #32]
 8005f72:	d01a      	beq.n	8005faa <_printf_float+0x3fa>
 8005f74:	3b01      	subs	r3, #1
 8005f76:	f108 0201 	add.w	r2, r8, #1
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	d10e      	bne.n	8005fa2 <_printf_float+0x3f2>
 8005f84:	e660      	b.n	8005c48 <_printf_float+0x98>
 8005f86:	2301      	movs	r3, #1
 8005f88:	464a      	mov	r2, r9
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae59 	beq.w	8005c48 <_printf_float+0x98>
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	9b08      	ldr	r3, [sp, #32]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	4543      	cmp	r3, r8
 8005fa0:	dcf1      	bgt.n	8005f86 <_printf_float+0x3d6>
 8005fa2:	9b04      	ldr	r3, [sp, #16]
 8005fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fa8:	e6dd      	b.n	8005d66 <_printf_float+0x1b6>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	f104 091a 	add.w	r9, r4, #26
 8005fb2:	e7f2      	b.n	8005f9a <_printf_float+0x3ea>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	e7df      	b.n	8005f7a <_printf_float+0x3ca>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	464a      	mov	r2, r9
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae3f 	beq.w	8005c48 <_printf_float+0x98>
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd2:	1a5b      	subs	r3, r3, r1
 8005fd4:	4543      	cmp	r3, r8
 8005fd6:	dcf0      	bgt.n	8005fba <_printf_float+0x40a>
 8005fd8:	e6f9      	b.n	8005dce <_printf_float+0x21e>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	f104 0919 	add.w	r9, r4, #25
 8005fe2:	e7f4      	b.n	8005fce <_printf_float+0x41e>

08005fe4 <_printf_common>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	4616      	mov	r6, r2
 8005fea:	4699      	mov	r9, r3
 8005fec:	688a      	ldr	r2, [r1, #8]
 8005fee:	690b      	ldr	r3, [r1, #16]
 8005ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	bfb8      	it	lt
 8005ff8:	4613      	movlt	r3, r2
 8005ffa:	6033      	str	r3, [r6, #0]
 8005ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006000:	4607      	mov	r7, r0
 8006002:	460c      	mov	r4, r1
 8006004:	b10a      	cbz	r2, 800600a <_printf_common+0x26>
 8006006:	3301      	adds	r3, #1
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	0699      	lsls	r1, r3, #26
 800600e:	bf42      	ittt	mi
 8006010:	6833      	ldrmi	r3, [r6, #0]
 8006012:	3302      	addmi	r3, #2
 8006014:	6033      	strmi	r3, [r6, #0]
 8006016:	6825      	ldr	r5, [r4, #0]
 8006018:	f015 0506 	ands.w	r5, r5, #6
 800601c:	d106      	bne.n	800602c <_printf_common+0x48>
 800601e:	f104 0a19 	add.w	sl, r4, #25
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	6832      	ldr	r2, [r6, #0]
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	42ab      	cmp	r3, r5
 800602a:	dc26      	bgt.n	800607a <_printf_common+0x96>
 800602c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006030:	1e13      	subs	r3, r2, #0
 8006032:	6822      	ldr	r2, [r4, #0]
 8006034:	bf18      	it	ne
 8006036:	2301      	movne	r3, #1
 8006038:	0692      	lsls	r2, r2, #26
 800603a:	d42b      	bmi.n	8006094 <_printf_common+0xb0>
 800603c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006040:	4649      	mov	r1, r9
 8006042:	4638      	mov	r0, r7
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d01e      	beq.n	8006088 <_printf_common+0xa4>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	f003 0306 	and.w	r3, r3, #6
 8006052:	2b04      	cmp	r3, #4
 8006054:	bf02      	ittt	eq
 8006056:	68e5      	ldreq	r5, [r4, #12]
 8006058:	6833      	ldreq	r3, [r6, #0]
 800605a:	1aed      	subeq	r5, r5, r3
 800605c:	68a3      	ldr	r3, [r4, #8]
 800605e:	bf0c      	ite	eq
 8006060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006064:	2500      	movne	r5, #0
 8006066:	4293      	cmp	r3, r2
 8006068:	bfc4      	itt	gt
 800606a:	1a9b      	subgt	r3, r3, r2
 800606c:	18ed      	addgt	r5, r5, r3
 800606e:	2600      	movs	r6, #0
 8006070:	341a      	adds	r4, #26
 8006072:	42b5      	cmp	r5, r6
 8006074:	d11a      	bne.n	80060ac <_printf_common+0xc8>
 8006076:	2000      	movs	r0, #0
 8006078:	e008      	b.n	800608c <_printf_common+0xa8>
 800607a:	2301      	movs	r3, #1
 800607c:	4652      	mov	r2, sl
 800607e:	4649      	mov	r1, r9
 8006080:	4638      	mov	r0, r7
 8006082:	47c0      	blx	r8
 8006084:	3001      	adds	r0, #1
 8006086:	d103      	bne.n	8006090 <_printf_common+0xac>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006090:	3501      	adds	r5, #1
 8006092:	e7c6      	b.n	8006022 <_printf_common+0x3e>
 8006094:	18e1      	adds	r1, r4, r3
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	2030      	movs	r0, #48	; 0x30
 800609a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800609e:	4422      	add	r2, r4
 80060a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060a8:	3302      	adds	r3, #2
 80060aa:	e7c7      	b.n	800603c <_printf_common+0x58>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4622      	mov	r2, r4
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d0e6      	beq.n	8006088 <_printf_common+0xa4>
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7d9      	b.n	8006072 <_printf_common+0x8e>
	...

080060c0 <_printf_i>:
 80060c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	7e0f      	ldrb	r7, [r1, #24]
 80060c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060c8:	2f78      	cmp	r7, #120	; 0x78
 80060ca:	4691      	mov	r9, r2
 80060cc:	4680      	mov	r8, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	469a      	mov	sl, r3
 80060d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060d6:	d807      	bhi.n	80060e8 <_printf_i+0x28>
 80060d8:	2f62      	cmp	r7, #98	; 0x62
 80060da:	d80a      	bhi.n	80060f2 <_printf_i+0x32>
 80060dc:	2f00      	cmp	r7, #0
 80060de:	f000 80d4 	beq.w	800628a <_printf_i+0x1ca>
 80060e2:	2f58      	cmp	r7, #88	; 0x58
 80060e4:	f000 80c0 	beq.w	8006268 <_printf_i+0x1a8>
 80060e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f0:	e03a      	b.n	8006168 <_printf_i+0xa8>
 80060f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060f6:	2b15      	cmp	r3, #21
 80060f8:	d8f6      	bhi.n	80060e8 <_printf_i+0x28>
 80060fa:	a101      	add	r1, pc, #4	; (adr r1, 8006100 <_printf_i+0x40>)
 80060fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006100:	08006159 	.word	0x08006159
 8006104:	0800616d 	.word	0x0800616d
 8006108:	080060e9 	.word	0x080060e9
 800610c:	080060e9 	.word	0x080060e9
 8006110:	080060e9 	.word	0x080060e9
 8006114:	080060e9 	.word	0x080060e9
 8006118:	0800616d 	.word	0x0800616d
 800611c:	080060e9 	.word	0x080060e9
 8006120:	080060e9 	.word	0x080060e9
 8006124:	080060e9 	.word	0x080060e9
 8006128:	080060e9 	.word	0x080060e9
 800612c:	08006271 	.word	0x08006271
 8006130:	08006199 	.word	0x08006199
 8006134:	0800622b 	.word	0x0800622b
 8006138:	080060e9 	.word	0x080060e9
 800613c:	080060e9 	.word	0x080060e9
 8006140:	08006293 	.word	0x08006293
 8006144:	080060e9 	.word	0x080060e9
 8006148:	08006199 	.word	0x08006199
 800614c:	080060e9 	.word	0x080060e9
 8006150:	080060e9 	.word	0x080060e9
 8006154:	08006233 	.word	0x08006233
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	1d1a      	adds	r2, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	602a      	str	r2, [r5, #0]
 8006160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006168:	2301      	movs	r3, #1
 800616a:	e09f      	b.n	80062ac <_printf_i+0x1ec>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	0607      	lsls	r7, r0, #24
 8006172:	f103 0104 	add.w	r1, r3, #4
 8006176:	6029      	str	r1, [r5, #0]
 8006178:	d501      	bpl.n	800617e <_printf_i+0xbe>
 800617a:	681e      	ldr	r6, [r3, #0]
 800617c:	e003      	b.n	8006186 <_printf_i+0xc6>
 800617e:	0646      	lsls	r6, r0, #25
 8006180:	d5fb      	bpl.n	800617a <_printf_i+0xba>
 8006182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006186:	2e00      	cmp	r6, #0
 8006188:	da03      	bge.n	8006192 <_printf_i+0xd2>
 800618a:	232d      	movs	r3, #45	; 0x2d
 800618c:	4276      	negs	r6, r6
 800618e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006192:	485a      	ldr	r0, [pc, #360]	; (80062fc <_printf_i+0x23c>)
 8006194:	230a      	movs	r3, #10
 8006196:	e012      	b.n	80061be <_printf_i+0xfe>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	1d19      	adds	r1, r3, #4
 800619e:	6029      	str	r1, [r5, #0]
 80061a0:	0605      	lsls	r5, r0, #24
 80061a2:	d501      	bpl.n	80061a8 <_printf_i+0xe8>
 80061a4:	681e      	ldr	r6, [r3, #0]
 80061a6:	e002      	b.n	80061ae <_printf_i+0xee>
 80061a8:	0641      	lsls	r1, r0, #25
 80061aa:	d5fb      	bpl.n	80061a4 <_printf_i+0xe4>
 80061ac:	881e      	ldrh	r6, [r3, #0]
 80061ae:	4853      	ldr	r0, [pc, #332]	; (80062fc <_printf_i+0x23c>)
 80061b0:	2f6f      	cmp	r7, #111	; 0x6f
 80061b2:	bf0c      	ite	eq
 80061b4:	2308      	moveq	r3, #8
 80061b6:	230a      	movne	r3, #10
 80061b8:	2100      	movs	r1, #0
 80061ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061be:	6865      	ldr	r5, [r4, #4]
 80061c0:	60a5      	str	r5, [r4, #8]
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	bfa2      	ittt	ge
 80061c6:	6821      	ldrge	r1, [r4, #0]
 80061c8:	f021 0104 	bicge.w	r1, r1, #4
 80061cc:	6021      	strge	r1, [r4, #0]
 80061ce:	b90e      	cbnz	r6, 80061d4 <_printf_i+0x114>
 80061d0:	2d00      	cmp	r5, #0
 80061d2:	d04b      	beq.n	800626c <_printf_i+0x1ac>
 80061d4:	4615      	mov	r5, r2
 80061d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061da:	fb03 6711 	mls	r7, r3, r1, r6
 80061de:	5dc7      	ldrb	r7, [r0, r7]
 80061e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061e4:	4637      	mov	r7, r6
 80061e6:	42bb      	cmp	r3, r7
 80061e8:	460e      	mov	r6, r1
 80061ea:	d9f4      	bls.n	80061d6 <_printf_i+0x116>
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d10b      	bne.n	8006208 <_printf_i+0x148>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	07de      	lsls	r6, r3, #31
 80061f4:	d508      	bpl.n	8006208 <_printf_i+0x148>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4299      	cmp	r1, r3
 80061fc:	bfde      	ittt	le
 80061fe:	2330      	movle	r3, #48	; 0x30
 8006200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006208:	1b52      	subs	r2, r2, r5
 800620a:	6122      	str	r2, [r4, #16]
 800620c:	f8cd a000 	str.w	sl, [sp]
 8006210:	464b      	mov	r3, r9
 8006212:	aa03      	add	r2, sp, #12
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f7ff fee4 	bl	8005fe4 <_printf_common>
 800621c:	3001      	adds	r0, #1
 800621e:	d14a      	bne.n	80062b6 <_printf_i+0x1f6>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	b004      	add	sp, #16
 8006226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f043 0320 	orr.w	r3, r3, #32
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	4833      	ldr	r0, [pc, #204]	; (8006300 <_printf_i+0x240>)
 8006234:	2778      	movs	r7, #120	; 0x78
 8006236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	6829      	ldr	r1, [r5, #0]
 800623e:	061f      	lsls	r7, r3, #24
 8006240:	f851 6b04 	ldr.w	r6, [r1], #4
 8006244:	d402      	bmi.n	800624c <_printf_i+0x18c>
 8006246:	065f      	lsls	r7, r3, #25
 8006248:	bf48      	it	mi
 800624a:	b2b6      	uxthmi	r6, r6
 800624c:	07df      	lsls	r7, r3, #31
 800624e:	bf48      	it	mi
 8006250:	f043 0320 	orrmi.w	r3, r3, #32
 8006254:	6029      	str	r1, [r5, #0]
 8006256:	bf48      	it	mi
 8006258:	6023      	strmi	r3, [r4, #0]
 800625a:	b91e      	cbnz	r6, 8006264 <_printf_i+0x1a4>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f023 0320 	bic.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	2310      	movs	r3, #16
 8006266:	e7a7      	b.n	80061b8 <_printf_i+0xf8>
 8006268:	4824      	ldr	r0, [pc, #144]	; (80062fc <_printf_i+0x23c>)
 800626a:	e7e4      	b.n	8006236 <_printf_i+0x176>
 800626c:	4615      	mov	r5, r2
 800626e:	e7bd      	b.n	80061ec <_printf_i+0x12c>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	6826      	ldr	r6, [r4, #0]
 8006274:	6961      	ldr	r1, [r4, #20]
 8006276:	1d18      	adds	r0, r3, #4
 8006278:	6028      	str	r0, [r5, #0]
 800627a:	0635      	lsls	r5, r6, #24
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	d501      	bpl.n	8006284 <_printf_i+0x1c4>
 8006280:	6019      	str	r1, [r3, #0]
 8006282:	e002      	b.n	800628a <_printf_i+0x1ca>
 8006284:	0670      	lsls	r0, r6, #25
 8006286:	d5fb      	bpl.n	8006280 <_printf_i+0x1c0>
 8006288:	8019      	strh	r1, [r3, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	4615      	mov	r5, r2
 8006290:	e7bc      	b.n	800620c <_printf_i+0x14c>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	1d1a      	adds	r2, r3, #4
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	6862      	ldr	r2, [r4, #4]
 800629c:	2100      	movs	r1, #0
 800629e:	4628      	mov	r0, r5
 80062a0:	f7f9 ffce 	bl	8000240 <memchr>
 80062a4:	b108      	cbz	r0, 80062aa <_printf_i+0x1ea>
 80062a6:	1b40      	subs	r0, r0, r5
 80062a8:	6060      	str	r0, [r4, #4]
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	2300      	movs	r3, #0
 80062b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b4:	e7aa      	b.n	800620c <_printf_i+0x14c>
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	462a      	mov	r2, r5
 80062ba:	4649      	mov	r1, r9
 80062bc:	4640      	mov	r0, r8
 80062be:	47d0      	blx	sl
 80062c0:	3001      	adds	r0, #1
 80062c2:	d0ad      	beq.n	8006220 <_printf_i+0x160>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	079b      	lsls	r3, r3, #30
 80062c8:	d413      	bmi.n	80062f2 <_printf_i+0x232>
 80062ca:	68e0      	ldr	r0, [r4, #12]
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	4298      	cmp	r0, r3
 80062d0:	bfb8      	it	lt
 80062d2:	4618      	movlt	r0, r3
 80062d4:	e7a6      	b.n	8006224 <_printf_i+0x164>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4632      	mov	r2, r6
 80062da:	4649      	mov	r1, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	47d0      	blx	sl
 80062e0:	3001      	adds	r0, #1
 80062e2:	d09d      	beq.n	8006220 <_printf_i+0x160>
 80062e4:	3501      	adds	r5, #1
 80062e6:	68e3      	ldr	r3, [r4, #12]
 80062e8:	9903      	ldr	r1, [sp, #12]
 80062ea:	1a5b      	subs	r3, r3, r1
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	dcf2      	bgt.n	80062d6 <_printf_i+0x216>
 80062f0:	e7eb      	b.n	80062ca <_printf_i+0x20a>
 80062f2:	2500      	movs	r5, #0
 80062f4:	f104 0619 	add.w	r6, r4, #25
 80062f8:	e7f5      	b.n	80062e6 <_printf_i+0x226>
 80062fa:	bf00      	nop
 80062fc:	0800a3b2 	.word	0x0800a3b2
 8006300:	0800a3c3 	.word	0x0800a3c3

08006304 <_scanf_float>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	b087      	sub	sp, #28
 800630a:	4617      	mov	r7, r2
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	688b      	ldr	r3, [r1, #8]
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006316:	bf83      	ittte	hi
 8006318:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800631c:	195b      	addhi	r3, r3, r5
 800631e:	9302      	strhi	r3, [sp, #8]
 8006320:	2300      	movls	r3, #0
 8006322:	bf86      	itte	hi
 8006324:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006328:	608b      	strhi	r3, [r1, #8]
 800632a:	9302      	strls	r3, [sp, #8]
 800632c:	680b      	ldr	r3, [r1, #0]
 800632e:	468b      	mov	fp, r1
 8006330:	2500      	movs	r5, #0
 8006332:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006336:	f84b 3b1c 	str.w	r3, [fp], #28
 800633a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800633e:	4680      	mov	r8, r0
 8006340:	460c      	mov	r4, r1
 8006342:	465e      	mov	r6, fp
 8006344:	46aa      	mov	sl, r5
 8006346:	46a9      	mov	r9, r5
 8006348:	9501      	str	r5, [sp, #4]
 800634a:	68a2      	ldr	r2, [r4, #8]
 800634c:	b152      	cbz	r2, 8006364 <_scanf_float+0x60>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b4e      	cmp	r3, #78	; 0x4e
 8006354:	d864      	bhi.n	8006420 <_scanf_float+0x11c>
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d83c      	bhi.n	80063d4 <_scanf_float+0xd0>
 800635a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800635e:	b2c8      	uxtb	r0, r1
 8006360:	280e      	cmp	r0, #14
 8006362:	d93a      	bls.n	80063da <_scanf_float+0xd6>
 8006364:	f1b9 0f00 	cmp.w	r9, #0
 8006368:	d003      	beq.n	8006372 <_scanf_float+0x6e>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006376:	f1ba 0f01 	cmp.w	sl, #1
 800637a:	f200 8113 	bhi.w	80065a4 <_scanf_float+0x2a0>
 800637e:	455e      	cmp	r6, fp
 8006380:	f200 8105 	bhi.w	800658e <_scanf_float+0x28a>
 8006384:	2501      	movs	r5, #1
 8006386:	4628      	mov	r0, r5
 8006388:	b007      	add	sp, #28
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006392:	2a0d      	cmp	r2, #13
 8006394:	d8e6      	bhi.n	8006364 <_scanf_float+0x60>
 8006396:	a101      	add	r1, pc, #4	; (adr r1, 800639c <_scanf_float+0x98>)
 8006398:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800639c:	080064db 	.word	0x080064db
 80063a0:	08006365 	.word	0x08006365
 80063a4:	08006365 	.word	0x08006365
 80063a8:	08006365 	.word	0x08006365
 80063ac:	0800653b 	.word	0x0800653b
 80063b0:	08006513 	.word	0x08006513
 80063b4:	08006365 	.word	0x08006365
 80063b8:	08006365 	.word	0x08006365
 80063bc:	080064e9 	.word	0x080064e9
 80063c0:	08006365 	.word	0x08006365
 80063c4:	08006365 	.word	0x08006365
 80063c8:	08006365 	.word	0x08006365
 80063cc:	08006365 	.word	0x08006365
 80063d0:	080064a1 	.word	0x080064a1
 80063d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80063d8:	e7db      	b.n	8006392 <_scanf_float+0x8e>
 80063da:	290e      	cmp	r1, #14
 80063dc:	d8c2      	bhi.n	8006364 <_scanf_float+0x60>
 80063de:	a001      	add	r0, pc, #4	; (adr r0, 80063e4 <_scanf_float+0xe0>)
 80063e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063e4:	08006493 	.word	0x08006493
 80063e8:	08006365 	.word	0x08006365
 80063ec:	08006493 	.word	0x08006493
 80063f0:	08006527 	.word	0x08006527
 80063f4:	08006365 	.word	0x08006365
 80063f8:	08006441 	.word	0x08006441
 80063fc:	0800647d 	.word	0x0800647d
 8006400:	0800647d 	.word	0x0800647d
 8006404:	0800647d 	.word	0x0800647d
 8006408:	0800647d 	.word	0x0800647d
 800640c:	0800647d 	.word	0x0800647d
 8006410:	0800647d 	.word	0x0800647d
 8006414:	0800647d 	.word	0x0800647d
 8006418:	0800647d 	.word	0x0800647d
 800641c:	0800647d 	.word	0x0800647d
 8006420:	2b6e      	cmp	r3, #110	; 0x6e
 8006422:	d809      	bhi.n	8006438 <_scanf_float+0x134>
 8006424:	2b60      	cmp	r3, #96	; 0x60
 8006426:	d8b2      	bhi.n	800638e <_scanf_float+0x8a>
 8006428:	2b54      	cmp	r3, #84	; 0x54
 800642a:	d077      	beq.n	800651c <_scanf_float+0x218>
 800642c:	2b59      	cmp	r3, #89	; 0x59
 800642e:	d199      	bne.n	8006364 <_scanf_float+0x60>
 8006430:	2d07      	cmp	r5, #7
 8006432:	d197      	bne.n	8006364 <_scanf_float+0x60>
 8006434:	2508      	movs	r5, #8
 8006436:	e029      	b.n	800648c <_scanf_float+0x188>
 8006438:	2b74      	cmp	r3, #116	; 0x74
 800643a:	d06f      	beq.n	800651c <_scanf_float+0x218>
 800643c:	2b79      	cmp	r3, #121	; 0x79
 800643e:	e7f6      	b.n	800642e <_scanf_float+0x12a>
 8006440:	6821      	ldr	r1, [r4, #0]
 8006442:	05c8      	lsls	r0, r1, #23
 8006444:	d51a      	bpl.n	800647c <_scanf_float+0x178>
 8006446:	9b02      	ldr	r3, [sp, #8]
 8006448:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800644c:	6021      	str	r1, [r4, #0]
 800644e:	f109 0901 	add.w	r9, r9, #1
 8006452:	b11b      	cbz	r3, 800645c <_scanf_float+0x158>
 8006454:	3b01      	subs	r3, #1
 8006456:	3201      	adds	r2, #1
 8006458:	9302      	str	r3, [sp, #8]
 800645a:	60a2      	str	r2, [r4, #8]
 800645c:	68a3      	ldr	r3, [r4, #8]
 800645e:	3b01      	subs	r3, #1
 8006460:	60a3      	str	r3, [r4, #8]
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	3301      	adds	r3, #1
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3b01      	subs	r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	f340 8084 	ble.w	800657c <_scanf_float+0x278>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	e766      	b.n	800634a <_scanf_float+0x46>
 800647c:	eb1a 0f05 	cmn.w	sl, r5
 8006480:	f47f af70 	bne.w	8006364 <_scanf_float+0x60>
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	f806 3b01 	strb.w	r3, [r6], #1
 8006490:	e7e4      	b.n	800645c <_scanf_float+0x158>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	0610      	lsls	r0, r2, #24
 8006496:	f57f af65 	bpl.w	8006364 <_scanf_float+0x60>
 800649a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649e:	e7f4      	b.n	800648a <_scanf_float+0x186>
 80064a0:	f1ba 0f00 	cmp.w	sl, #0
 80064a4:	d10e      	bne.n	80064c4 <_scanf_float+0x1c0>
 80064a6:	f1b9 0f00 	cmp.w	r9, #0
 80064aa:	d10e      	bne.n	80064ca <_scanf_float+0x1c6>
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064b6:	d108      	bne.n	80064ca <_scanf_float+0x1c6>
 80064b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	f04f 0a01 	mov.w	sl, #1
 80064c2:	e7e3      	b.n	800648c <_scanf_float+0x188>
 80064c4:	f1ba 0f02 	cmp.w	sl, #2
 80064c8:	d055      	beq.n	8006576 <_scanf_float+0x272>
 80064ca:	2d01      	cmp	r5, #1
 80064cc:	d002      	beq.n	80064d4 <_scanf_float+0x1d0>
 80064ce:	2d04      	cmp	r5, #4
 80064d0:	f47f af48 	bne.w	8006364 <_scanf_float+0x60>
 80064d4:	3501      	adds	r5, #1
 80064d6:	b2ed      	uxtb	r5, r5
 80064d8:	e7d8      	b.n	800648c <_scanf_float+0x188>
 80064da:	f1ba 0f01 	cmp.w	sl, #1
 80064de:	f47f af41 	bne.w	8006364 <_scanf_float+0x60>
 80064e2:	f04f 0a02 	mov.w	sl, #2
 80064e6:	e7d1      	b.n	800648c <_scanf_float+0x188>
 80064e8:	b97d      	cbnz	r5, 800650a <_scanf_float+0x206>
 80064ea:	f1b9 0f00 	cmp.w	r9, #0
 80064ee:	f47f af3c 	bne.w	800636a <_scanf_float+0x66>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064fc:	f47f af39 	bne.w	8006372 <_scanf_float+0x6e>
 8006500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006504:	6022      	str	r2, [r4, #0]
 8006506:	2501      	movs	r5, #1
 8006508:	e7c0      	b.n	800648c <_scanf_float+0x188>
 800650a:	2d03      	cmp	r5, #3
 800650c:	d0e2      	beq.n	80064d4 <_scanf_float+0x1d0>
 800650e:	2d05      	cmp	r5, #5
 8006510:	e7de      	b.n	80064d0 <_scanf_float+0x1cc>
 8006512:	2d02      	cmp	r5, #2
 8006514:	f47f af26 	bne.w	8006364 <_scanf_float+0x60>
 8006518:	2503      	movs	r5, #3
 800651a:	e7b7      	b.n	800648c <_scanf_float+0x188>
 800651c:	2d06      	cmp	r5, #6
 800651e:	f47f af21 	bne.w	8006364 <_scanf_float+0x60>
 8006522:	2507      	movs	r5, #7
 8006524:	e7b2      	b.n	800648c <_scanf_float+0x188>
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	0591      	lsls	r1, r2, #22
 800652a:	f57f af1b 	bpl.w	8006364 <_scanf_float+0x60>
 800652e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006532:	6022      	str	r2, [r4, #0]
 8006534:	f8cd 9004 	str.w	r9, [sp, #4]
 8006538:	e7a8      	b.n	800648c <_scanf_float+0x188>
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006540:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006544:	d006      	beq.n	8006554 <_scanf_float+0x250>
 8006546:	0550      	lsls	r0, r2, #21
 8006548:	f57f af0c 	bpl.w	8006364 <_scanf_float+0x60>
 800654c:	f1b9 0f00 	cmp.w	r9, #0
 8006550:	f43f af0f 	beq.w	8006372 <_scanf_float+0x6e>
 8006554:	0591      	lsls	r1, r2, #22
 8006556:	bf58      	it	pl
 8006558:	9901      	ldrpl	r1, [sp, #4]
 800655a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800655e:	bf58      	it	pl
 8006560:	eba9 0101 	subpl.w	r1, r9, r1
 8006564:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006568:	bf58      	it	pl
 800656a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800656e:	6022      	str	r2, [r4, #0]
 8006570:	f04f 0900 	mov.w	r9, #0
 8006574:	e78a      	b.n	800648c <_scanf_float+0x188>
 8006576:	f04f 0a03 	mov.w	sl, #3
 800657a:	e787      	b.n	800648c <_scanf_float+0x188>
 800657c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006580:	4639      	mov	r1, r7
 8006582:	4640      	mov	r0, r8
 8006584:	4798      	blx	r3
 8006586:	2800      	cmp	r0, #0
 8006588:	f43f aedf 	beq.w	800634a <_scanf_float+0x46>
 800658c:	e6ea      	b.n	8006364 <_scanf_float+0x60>
 800658e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006596:	463a      	mov	r2, r7
 8006598:	4640      	mov	r0, r8
 800659a:	4798      	blx	r3
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	3b01      	subs	r3, #1
 80065a0:	6123      	str	r3, [r4, #16]
 80065a2:	e6ec      	b.n	800637e <_scanf_float+0x7a>
 80065a4:	1e6b      	subs	r3, r5, #1
 80065a6:	2b06      	cmp	r3, #6
 80065a8:	d825      	bhi.n	80065f6 <_scanf_float+0x2f2>
 80065aa:	2d02      	cmp	r5, #2
 80065ac:	d836      	bhi.n	800661c <_scanf_float+0x318>
 80065ae:	455e      	cmp	r6, fp
 80065b0:	f67f aee8 	bls.w	8006384 <_scanf_float+0x80>
 80065b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065bc:	463a      	mov	r2, r7
 80065be:	4640      	mov	r0, r8
 80065c0:	4798      	blx	r3
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	6123      	str	r3, [r4, #16]
 80065c8:	e7f1      	b.n	80065ae <_scanf_float+0x2aa>
 80065ca:	9802      	ldr	r0, [sp, #8]
 80065cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80065d4:	9002      	str	r0, [sp, #8]
 80065d6:	463a      	mov	r2, r7
 80065d8:	4640      	mov	r0, r8
 80065da:	4798      	blx	r3
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065e6:	fa5f fa8a 	uxtb.w	sl, sl
 80065ea:	f1ba 0f02 	cmp.w	sl, #2
 80065ee:	d1ec      	bne.n	80065ca <_scanf_float+0x2c6>
 80065f0:	3d03      	subs	r5, #3
 80065f2:	b2ed      	uxtb	r5, r5
 80065f4:	1b76      	subs	r6, r6, r5
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	05da      	lsls	r2, r3, #23
 80065fa:	d52f      	bpl.n	800665c <_scanf_float+0x358>
 80065fc:	055b      	lsls	r3, r3, #21
 80065fe:	d510      	bpl.n	8006622 <_scanf_float+0x31e>
 8006600:	455e      	cmp	r6, fp
 8006602:	f67f aebf 	bls.w	8006384 <_scanf_float+0x80>
 8006606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800660a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800660e:	463a      	mov	r2, r7
 8006610:	4640      	mov	r0, r8
 8006612:	4798      	blx	r3
 8006614:	6923      	ldr	r3, [r4, #16]
 8006616:	3b01      	subs	r3, #1
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	e7f1      	b.n	8006600 <_scanf_float+0x2fc>
 800661c:	46aa      	mov	sl, r5
 800661e:	9602      	str	r6, [sp, #8]
 8006620:	e7df      	b.n	80065e2 <_scanf_float+0x2de>
 8006622:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	2965      	cmp	r1, #101	; 0x65
 800662a:	f103 33ff 	add.w	r3, r3, #4294967295
 800662e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	d00c      	beq.n	8006650 <_scanf_float+0x34c>
 8006636:	2945      	cmp	r1, #69	; 0x45
 8006638:	d00a      	beq.n	8006650 <_scanf_float+0x34c>
 800663a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800663e:	463a      	mov	r2, r7
 8006640:	4640      	mov	r0, r8
 8006642:	4798      	blx	r3
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800664a:	3b01      	subs	r3, #1
 800664c:	1eb5      	subs	r5, r6, #2
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006654:	463a      	mov	r2, r7
 8006656:	4640      	mov	r0, r8
 8006658:	4798      	blx	r3
 800665a:	462e      	mov	r6, r5
 800665c:	6825      	ldr	r5, [r4, #0]
 800665e:	f015 0510 	ands.w	r5, r5, #16
 8006662:	d14d      	bne.n	8006700 <_scanf_float+0x3fc>
 8006664:	7035      	strb	r5, [r6, #0]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800666c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006670:	d11a      	bne.n	80066a8 <_scanf_float+0x3a4>
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	454b      	cmp	r3, r9
 8006676:	eba3 0209 	sub.w	r2, r3, r9
 800667a:	d122      	bne.n	80066c2 <_scanf_float+0x3be>
 800667c:	2200      	movs	r2, #0
 800667e:	4659      	mov	r1, fp
 8006680:	4640      	mov	r0, r8
 8006682:	f002 fb5b 	bl	8008d3c <_strtod_r>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f011 0f02 	tst.w	r1, #2
 8006690:	f103 0204 	add.w	r2, r3, #4
 8006694:	d020      	beq.n	80066d8 <_scanf_float+0x3d4>
 8006696:	9903      	ldr	r1, [sp, #12]
 8006698:	600a      	str	r2, [r1, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	ed83 0b00 	vstr	d0, [r3]
 80066a0:	68e3      	ldr	r3, [r4, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60e3      	str	r3, [r4, #12]
 80066a6:	e66e      	b.n	8006386 <_scanf_float+0x82>
 80066a8:	9b04      	ldr	r3, [sp, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0e6      	beq.n	800667c <_scanf_float+0x378>
 80066ae:	9905      	ldr	r1, [sp, #20]
 80066b0:	230a      	movs	r3, #10
 80066b2:	462a      	mov	r2, r5
 80066b4:	3101      	adds	r1, #1
 80066b6:	4640      	mov	r0, r8
 80066b8:	f002 fbc8 	bl	8008e4c <_strtol_r>
 80066bc:	9b04      	ldr	r3, [sp, #16]
 80066be:	9e05      	ldr	r6, [sp, #20]
 80066c0:	1ac2      	subs	r2, r0, r3
 80066c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80066c6:	429e      	cmp	r6, r3
 80066c8:	bf28      	it	cs
 80066ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80066ce:	490d      	ldr	r1, [pc, #52]	; (8006704 <_scanf_float+0x400>)
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 f8dd 	bl	8006890 <siprintf>
 80066d6:	e7d1      	b.n	800667c <_scanf_float+0x378>
 80066d8:	f011 0f04 	tst.w	r1, #4
 80066dc:	9903      	ldr	r1, [sp, #12]
 80066de:	600a      	str	r2, [r1, #0]
 80066e0:	d1db      	bne.n	800669a <_scanf_float+0x396>
 80066e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80066e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ea:	681e      	ldr	r6, [r3, #0]
 80066ec:	d705      	bvc.n	80066fa <_scanf_float+0x3f6>
 80066ee:	4806      	ldr	r0, [pc, #24]	; (8006708 <_scanf_float+0x404>)
 80066f0:	f000 f9b2 	bl	8006a58 <nanf>
 80066f4:	ed86 0a00 	vstr	s0, [r6]
 80066f8:	e7d2      	b.n	80066a0 <_scanf_float+0x39c>
 80066fa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80066fe:	e7f9      	b.n	80066f4 <_scanf_float+0x3f0>
 8006700:	2500      	movs	r5, #0
 8006702:	e640      	b.n	8006386 <_scanf_float+0x82>
 8006704:	0800a3d4 	.word	0x0800a3d4
 8006708:	0800a765 	.word	0x0800a765

0800670c <std>:
 800670c:	2300      	movs	r3, #0
 800670e:	b510      	push	{r4, lr}
 8006710:	4604      	mov	r4, r0
 8006712:	e9c0 3300 	strd	r3, r3, [r0]
 8006716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800671a:	6083      	str	r3, [r0, #8]
 800671c:	8181      	strh	r1, [r0, #12]
 800671e:	6643      	str	r3, [r0, #100]	; 0x64
 8006720:	81c2      	strh	r2, [r0, #14]
 8006722:	6183      	str	r3, [r0, #24]
 8006724:	4619      	mov	r1, r3
 8006726:	2208      	movs	r2, #8
 8006728:	305c      	adds	r0, #92	; 0x5c
 800672a:	f000 f914 	bl	8006956 <memset>
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <std+0x58>)
 8006730:	6263      	str	r3, [r4, #36]	; 0x24
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <std+0x5c>)
 8006734:	62a3      	str	r3, [r4, #40]	; 0x28
 8006736:	4b0d      	ldr	r3, [pc, #52]	; (800676c <std+0x60>)
 8006738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <std+0x64>)
 800673c:	6323      	str	r3, [r4, #48]	; 0x30
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <std+0x68>)
 8006740:	6224      	str	r4, [r4, #32]
 8006742:	429c      	cmp	r4, r3
 8006744:	d006      	beq.n	8006754 <std+0x48>
 8006746:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800674a:	4294      	cmp	r4, r2
 800674c:	d002      	beq.n	8006754 <std+0x48>
 800674e:	33d0      	adds	r3, #208	; 0xd0
 8006750:	429c      	cmp	r4, r3
 8006752:	d105      	bne.n	8006760 <std+0x54>
 8006754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800675c:	f000 b978 	b.w	8006a50 <__retarget_lock_init_recursive>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	080068d1 	.word	0x080068d1
 8006768:	080068f3 	.word	0x080068f3
 800676c:	0800692b 	.word	0x0800692b
 8006770:	0800694f 	.word	0x0800694f
 8006774:	20000344 	.word	0x20000344

08006778 <stdio_exit_handler>:
 8006778:	4a02      	ldr	r2, [pc, #8]	; (8006784 <stdio_exit_handler+0xc>)
 800677a:	4903      	ldr	r1, [pc, #12]	; (8006788 <stdio_exit_handler+0x10>)
 800677c:	4803      	ldr	r0, [pc, #12]	; (800678c <stdio_exit_handler+0x14>)
 800677e:	f000 b869 	b.w	8006854 <_fwalk_sglue>
 8006782:	bf00      	nop
 8006784:	20000010 	.word	0x20000010
 8006788:	0800920d 	.word	0x0800920d
 800678c:	2000001c 	.word	0x2000001c

08006790 <cleanup_stdio>:
 8006790:	6841      	ldr	r1, [r0, #4]
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <cleanup_stdio+0x34>)
 8006794:	4299      	cmp	r1, r3
 8006796:	b510      	push	{r4, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	d001      	beq.n	80067a0 <cleanup_stdio+0x10>
 800679c:	f002 fd36 	bl	800920c <_fflush_r>
 80067a0:	68a1      	ldr	r1, [r4, #8]
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <cleanup_stdio+0x38>)
 80067a4:	4299      	cmp	r1, r3
 80067a6:	d002      	beq.n	80067ae <cleanup_stdio+0x1e>
 80067a8:	4620      	mov	r0, r4
 80067aa:	f002 fd2f 	bl	800920c <_fflush_r>
 80067ae:	68e1      	ldr	r1, [r4, #12]
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <cleanup_stdio+0x3c>)
 80067b2:	4299      	cmp	r1, r3
 80067b4:	d004      	beq.n	80067c0 <cleanup_stdio+0x30>
 80067b6:	4620      	mov	r0, r4
 80067b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067bc:	f002 bd26 	b.w	800920c <_fflush_r>
 80067c0:	bd10      	pop	{r4, pc}
 80067c2:	bf00      	nop
 80067c4:	20000344 	.word	0x20000344
 80067c8:	200003ac 	.word	0x200003ac
 80067cc:	20000414 	.word	0x20000414

080067d0 <global_stdio_init.part.0>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <global_stdio_init.part.0+0x30>)
 80067d4:	4c0b      	ldr	r4, [pc, #44]	; (8006804 <global_stdio_init.part.0+0x34>)
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <global_stdio_init.part.0+0x38>)
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	4620      	mov	r0, r4
 80067dc:	2200      	movs	r2, #0
 80067de:	2104      	movs	r1, #4
 80067e0:	f7ff ff94 	bl	800670c <std>
 80067e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067e8:	2201      	movs	r2, #1
 80067ea:	2109      	movs	r1, #9
 80067ec:	f7ff ff8e 	bl	800670c <std>
 80067f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067f4:	2202      	movs	r2, #2
 80067f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067fa:	2112      	movs	r1, #18
 80067fc:	f7ff bf86 	b.w	800670c <std>
 8006800:	2000047c 	.word	0x2000047c
 8006804:	20000344 	.word	0x20000344
 8006808:	08006779 	.word	0x08006779

0800680c <__sfp_lock_acquire>:
 800680c:	4801      	ldr	r0, [pc, #4]	; (8006814 <__sfp_lock_acquire+0x8>)
 800680e:	f000 b920 	b.w	8006a52 <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	20000485 	.word	0x20000485

08006818 <__sfp_lock_release>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__sfp_lock_release+0x8>)
 800681a:	f000 b91b 	b.w	8006a54 <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	20000485 	.word	0x20000485

08006824 <__sinit>:
 8006824:	b510      	push	{r4, lr}
 8006826:	4604      	mov	r4, r0
 8006828:	f7ff fff0 	bl	800680c <__sfp_lock_acquire>
 800682c:	6a23      	ldr	r3, [r4, #32]
 800682e:	b11b      	cbz	r3, 8006838 <__sinit+0x14>
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	f7ff bff0 	b.w	8006818 <__sfp_lock_release>
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <__sinit+0x28>)
 800683a:	6223      	str	r3, [r4, #32]
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <__sinit+0x2c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1f5      	bne.n	8006830 <__sinit+0xc>
 8006844:	f7ff ffc4 	bl	80067d0 <global_stdio_init.part.0>
 8006848:	e7f2      	b.n	8006830 <__sinit+0xc>
 800684a:	bf00      	nop
 800684c:	08006791 	.word	0x08006791
 8006850:	2000047c 	.word	0x2000047c

08006854 <_fwalk_sglue>:
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	4607      	mov	r7, r0
 800685a:	4688      	mov	r8, r1
 800685c:	4614      	mov	r4, r2
 800685e:	2600      	movs	r6, #0
 8006860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006864:	f1b9 0901 	subs.w	r9, r9, #1
 8006868:	d505      	bpl.n	8006876 <_fwalk_sglue+0x22>
 800686a:	6824      	ldr	r4, [r4, #0]
 800686c:	2c00      	cmp	r4, #0
 800686e:	d1f7      	bne.n	8006860 <_fwalk_sglue+0xc>
 8006870:	4630      	mov	r0, r6
 8006872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d907      	bls.n	800688c <_fwalk_sglue+0x38>
 800687c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006880:	3301      	adds	r3, #1
 8006882:	d003      	beq.n	800688c <_fwalk_sglue+0x38>
 8006884:	4629      	mov	r1, r5
 8006886:	4638      	mov	r0, r7
 8006888:	47c0      	blx	r8
 800688a:	4306      	orrs	r6, r0
 800688c:	3568      	adds	r5, #104	; 0x68
 800688e:	e7e9      	b.n	8006864 <_fwalk_sglue+0x10>

08006890 <siprintf>:
 8006890:	b40e      	push	{r1, r2, r3}
 8006892:	b500      	push	{lr}
 8006894:	b09c      	sub	sp, #112	; 0x70
 8006896:	ab1d      	add	r3, sp, #116	; 0x74
 8006898:	9002      	str	r0, [sp, #8]
 800689a:	9006      	str	r0, [sp, #24]
 800689c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068a0:	4809      	ldr	r0, [pc, #36]	; (80068c8 <siprintf+0x38>)
 80068a2:	9107      	str	r1, [sp, #28]
 80068a4:	9104      	str	r1, [sp, #16]
 80068a6:	4909      	ldr	r1, [pc, #36]	; (80068cc <siprintf+0x3c>)
 80068a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ac:	9105      	str	r1, [sp, #20]
 80068ae:	6800      	ldr	r0, [r0, #0]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	a902      	add	r1, sp, #8
 80068b4:	f002 fb26 	bl	8008f04 <_svfiprintf_r>
 80068b8:	9b02      	ldr	r3, [sp, #8]
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	b01c      	add	sp, #112	; 0x70
 80068c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c4:	b003      	add	sp, #12
 80068c6:	4770      	bx	lr
 80068c8:	20000068 	.word	0x20000068
 80068cc:	ffff0208 	.word	0xffff0208

080068d0 <__sread>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	460c      	mov	r4, r1
 80068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d8:	f000 f86c 	bl	80069b4 <_read_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	bfab      	itete	ge
 80068e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068e2:	89a3      	ldrhlt	r3, [r4, #12]
 80068e4:	181b      	addge	r3, r3, r0
 80068e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ea:	bfac      	ite	ge
 80068ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ee:	81a3      	strhlt	r3, [r4, #12]
 80068f0:	bd10      	pop	{r4, pc}

080068f2 <__swrite>:
 80068f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f6:	461f      	mov	r7, r3
 80068f8:	898b      	ldrh	r3, [r1, #12]
 80068fa:	05db      	lsls	r3, r3, #23
 80068fc:	4605      	mov	r5, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	4616      	mov	r6, r2
 8006902:	d505      	bpl.n	8006910 <__swrite+0x1e>
 8006904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006908:	2302      	movs	r3, #2
 800690a:	2200      	movs	r2, #0
 800690c:	f000 f840 	bl	8006990 <_lseek_r>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	4632      	mov	r2, r6
 800691e:	463b      	mov	r3, r7
 8006920:	4628      	mov	r0, r5
 8006922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006926:	f000 b857 	b.w	80069d8 <_write_r>

0800692a <__sseek>:
 800692a:	b510      	push	{r4, lr}
 800692c:	460c      	mov	r4, r1
 800692e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006932:	f000 f82d 	bl	8006990 <_lseek_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	bf15      	itete	ne
 800693c:	6560      	strne	r0, [r4, #84]	; 0x54
 800693e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006946:	81a3      	strheq	r3, [r4, #12]
 8006948:	bf18      	it	ne
 800694a:	81a3      	strhne	r3, [r4, #12]
 800694c:	bd10      	pop	{r4, pc}

0800694e <__sclose>:
 800694e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006952:	f000 b80d 	b.w	8006970 <_close_r>

08006956 <memset>:
 8006956:	4402      	add	r2, r0
 8006958:	4603      	mov	r3, r0
 800695a:	4293      	cmp	r3, r2
 800695c:	d100      	bne.n	8006960 <memset+0xa>
 800695e:	4770      	bx	lr
 8006960:	f803 1b01 	strb.w	r1, [r3], #1
 8006964:	e7f9      	b.n	800695a <memset+0x4>
	...

08006968 <_localeconv_r>:
 8006968:	4800      	ldr	r0, [pc, #0]	; (800696c <_localeconv_r+0x4>)
 800696a:	4770      	bx	lr
 800696c:	2000015c 	.word	0x2000015c

08006970 <_close_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d06      	ldr	r5, [pc, #24]	; (800698c <_close_r+0x1c>)
 8006974:	2300      	movs	r3, #0
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f7fa fff9 	bl	8001972 <_close>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_close_r+0x1a>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_close_r+0x1a>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	20000480 	.word	0x20000480

08006990 <_lseek_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4d07      	ldr	r5, [pc, #28]	; (80069b0 <_lseek_r+0x20>)
 8006994:	4604      	mov	r4, r0
 8006996:	4608      	mov	r0, r1
 8006998:	4611      	mov	r1, r2
 800699a:	2200      	movs	r2, #0
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f7fb f80e 	bl	80019c0 <_lseek>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_lseek_r+0x1e>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_lseek_r+0x1e>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	20000480 	.word	0x20000480

080069b4 <_read_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d07      	ldr	r5, [pc, #28]	; (80069d4 <_read_r+0x20>)
 80069b8:	4604      	mov	r4, r0
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	2200      	movs	r2, #0
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fa ff9c 	bl	8001900 <_read>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_read_r+0x1e>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_read_r+0x1e>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	20000480 	.word	0x20000480

080069d8 <_write_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <_write_r+0x20>)
 80069dc:	4604      	mov	r4, r0
 80069de:	4608      	mov	r0, r1
 80069e0:	4611      	mov	r1, r2
 80069e2:	2200      	movs	r2, #0
 80069e4:	602a      	str	r2, [r5, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f7fa ffa7 	bl	800193a <_write>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_write_r+0x1e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_write_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000480 	.word	0x20000480

080069fc <__errno>:
 80069fc:	4b01      	ldr	r3, [pc, #4]	; (8006a04 <__errno+0x8>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000068 	.word	0x20000068

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4d0d      	ldr	r5, [pc, #52]	; (8006a40 <__libc_init_array+0x38>)
 8006a0c:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <__libc_init_array+0x3c>)
 8006a0e:	1b64      	subs	r4, r4, r5
 8006a10:	10a4      	asrs	r4, r4, #2
 8006a12:	2600      	movs	r6, #0
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	4d0b      	ldr	r5, [pc, #44]	; (8006a48 <__libc_init_array+0x40>)
 8006a1a:	4c0c      	ldr	r4, [pc, #48]	; (8006a4c <__libc_init_array+0x44>)
 8006a1c:	f003 fb0c 	bl	800a038 <_init>
 8006a20:	1b64      	subs	r4, r4, r5
 8006a22:	10a4      	asrs	r4, r4, #2
 8006a24:	2600      	movs	r6, #0
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a30:	4798      	blx	r3
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3a:	4798      	blx	r3
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	0800a7d0 	.word	0x0800a7d0
 8006a44:	0800a7d0 	.word	0x0800a7d0
 8006a48:	0800a7d0 	.word	0x0800a7d0
 8006a4c:	0800a7d4 	.word	0x0800a7d4

08006a50 <__retarget_lock_init_recursive>:
 8006a50:	4770      	bx	lr

08006a52 <__retarget_lock_acquire_recursive>:
 8006a52:	4770      	bx	lr

08006a54 <__retarget_lock_release_recursive>:
 8006a54:	4770      	bx	lr
	...

08006a58 <nanf>:
 8006a58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a60 <nanf+0x8>
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	7fc00000 	.word	0x7fc00000

08006a64 <quorem>:
 8006a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	6903      	ldr	r3, [r0, #16]
 8006a6a:	690c      	ldr	r4, [r1, #16]
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	4607      	mov	r7, r0
 8006a70:	db7e      	blt.n	8006b70 <quorem+0x10c>
 8006a72:	3c01      	subs	r4, #1
 8006a74:	f101 0814 	add.w	r8, r1, #20
 8006a78:	f100 0514 	add.w	r5, r0, #20
 8006a7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a96:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a9a:	d331      	bcc.n	8006b00 <quorem+0x9c>
 8006a9c:	f04f 0e00 	mov.w	lr, #0
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	46ac      	mov	ip, r5
 8006aa4:	46f2      	mov	sl, lr
 8006aa6:	f850 2b04 	ldr.w	r2, [r0], #4
 8006aaa:	b293      	uxth	r3, r2
 8006aac:	fb06 e303 	mla	r3, r6, r3, lr
 8006ab0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ab4:	0c1a      	lsrs	r2, r3, #16
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	ebaa 0303 	sub.w	r3, sl, r3
 8006abc:	f8dc a000 	ldr.w	sl, [ip]
 8006ac0:	fa13 f38a 	uxtah	r3, r3, sl
 8006ac4:	fb06 220e 	mla	r2, r6, lr, r2
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad0:	b292      	uxth	r2, r2
 8006ad2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ad6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ada:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ade:	4581      	cmp	r9, r0
 8006ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae4:	f84c 3b04 	str.w	r3, [ip], #4
 8006ae8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006aec:	d2db      	bcs.n	8006aa6 <quorem+0x42>
 8006aee:	f855 300b 	ldr.w	r3, [r5, fp]
 8006af2:	b92b      	cbnz	r3, 8006b00 <quorem+0x9c>
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	3b04      	subs	r3, #4
 8006af8:	429d      	cmp	r5, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	d32c      	bcc.n	8006b58 <quorem+0xf4>
 8006afe:	613c      	str	r4, [r7, #16]
 8006b00:	4638      	mov	r0, r7
 8006b02:	f001 f96b 	bl	8007ddc <__mcmp>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	db22      	blt.n	8006b50 <quorem+0xec>
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b14:	f8d1 c000 	ldr.w	ip, [r1]
 8006b18:	b293      	uxth	r3, r2
 8006b1a:	1ac3      	subs	r3, r0, r3
 8006b1c:	0c12      	lsrs	r2, r2, #16
 8006b1e:	fa13 f38c 	uxtah	r3, r3, ip
 8006b22:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b30:	45c1      	cmp	r9, r8
 8006b32:	f841 3b04 	str.w	r3, [r1], #4
 8006b36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b3a:	d2e9      	bcs.n	8006b10 <quorem+0xac>
 8006b3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b44:	b922      	cbnz	r2, 8006b50 <quorem+0xec>
 8006b46:	3b04      	subs	r3, #4
 8006b48:	429d      	cmp	r5, r3
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	d30a      	bcc.n	8006b64 <quorem+0x100>
 8006b4e:	613c      	str	r4, [r7, #16]
 8006b50:	4630      	mov	r0, r6
 8006b52:	b003      	add	sp, #12
 8006b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	3b04      	subs	r3, #4
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	d1ce      	bne.n	8006afe <quorem+0x9a>
 8006b60:	3c01      	subs	r4, #1
 8006b62:	e7c9      	b.n	8006af8 <quorem+0x94>
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	3b04      	subs	r3, #4
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d1f0      	bne.n	8006b4e <quorem+0xea>
 8006b6c:	3c01      	subs	r4, #1
 8006b6e:	e7eb      	b.n	8006b48 <quorem+0xe4>
 8006b70:	2000      	movs	r0, #0
 8006b72:	e7ee      	b.n	8006b52 <quorem+0xee>
 8006b74:	0000      	movs	r0, r0
	...

08006b78 <_dtoa_r>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	ed2d 8b02 	vpush	{d8}
 8006b80:	69c5      	ldr	r5, [r0, #28]
 8006b82:	b091      	sub	sp, #68	; 0x44
 8006b84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b88:	ec59 8b10 	vmov	r8, r9, d0
 8006b8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006b8e:	9106      	str	r1, [sp, #24]
 8006b90:	4606      	mov	r6, r0
 8006b92:	9208      	str	r2, [sp, #32]
 8006b94:	930c      	str	r3, [sp, #48]	; 0x30
 8006b96:	b975      	cbnz	r5, 8006bb6 <_dtoa_r+0x3e>
 8006b98:	2010      	movs	r0, #16
 8006b9a:	f000 fda5 	bl	80076e8 <malloc>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	61f0      	str	r0, [r6, #28]
 8006ba2:	b920      	cbnz	r0, 8006bae <_dtoa_r+0x36>
 8006ba4:	4ba6      	ldr	r3, [pc, #664]	; (8006e40 <_dtoa_r+0x2c8>)
 8006ba6:	21ef      	movs	r1, #239	; 0xef
 8006ba8:	48a6      	ldr	r0, [pc, #664]	; (8006e44 <_dtoa_r+0x2cc>)
 8006baa:	f002 fba9 	bl	8009300 <__assert_func>
 8006bae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bb2:	6005      	str	r5, [r0, #0]
 8006bb4:	60c5      	str	r5, [r0, #12]
 8006bb6:	69f3      	ldr	r3, [r6, #28]
 8006bb8:	6819      	ldr	r1, [r3, #0]
 8006bba:	b151      	cbz	r1, 8006bd2 <_dtoa_r+0x5a>
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	604a      	str	r2, [r1, #4]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4093      	lsls	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f000 fe82 	bl	80078d0 <_Bfree>
 8006bcc:	69f3      	ldr	r3, [r6, #28]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	f1b9 0300 	subs.w	r3, r9, #0
 8006bd6:	bfbb      	ittet	lt
 8006bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bdc:	9303      	strlt	r3, [sp, #12]
 8006bde:	2300      	movge	r3, #0
 8006be0:	2201      	movlt	r2, #1
 8006be2:	bfac      	ite	ge
 8006be4:	6023      	strge	r3, [r4, #0]
 8006be6:	6022      	strlt	r2, [r4, #0]
 8006be8:	4b97      	ldr	r3, [pc, #604]	; (8006e48 <_dtoa_r+0x2d0>)
 8006bea:	9c03      	ldr	r4, [sp, #12]
 8006bec:	43a3      	bics	r3, r4
 8006bee:	d11c      	bne.n	8006c2a <_dtoa_r+0xb2>
 8006bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006bfc:	ea53 0308 	orrs.w	r3, r3, r8
 8006c00:	f000 84fb 	beq.w	80075fa <_dtoa_r+0xa82>
 8006c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c06:	b963      	cbnz	r3, 8006c22 <_dtoa_r+0xaa>
 8006c08:	4b90      	ldr	r3, [pc, #576]	; (8006e4c <_dtoa_r+0x2d4>)
 8006c0a:	e020      	b.n	8006c4e <_dtoa_r+0xd6>
 8006c0c:	4b90      	ldr	r3, [pc, #576]	; (8006e50 <_dtoa_r+0x2d8>)
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	3308      	adds	r3, #8
 8006c12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	9801      	ldr	r0, [sp, #4]
 8006c18:	b011      	add	sp, #68	; 0x44
 8006c1a:	ecbd 8b02 	vpop	{d8}
 8006c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c22:	4b8a      	ldr	r3, [pc, #552]	; (8006e4c <_dtoa_r+0x2d4>)
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	3303      	adds	r3, #3
 8006c28:	e7f3      	b.n	8006c12 <_dtoa_r+0x9a>
 8006c2a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006c2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c36:	d10c      	bne.n	8006c52 <_dtoa_r+0xda>
 8006c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 84d7 	beq.w	80075f4 <_dtoa_r+0xa7c>
 8006c46:	4b83      	ldr	r3, [pc, #524]	; (8006e54 <_dtoa_r+0x2dc>)
 8006c48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	e7e1      	b.n	8006c16 <_dtoa_r+0x9e>
 8006c52:	aa0e      	add	r2, sp, #56	; 0x38
 8006c54:	a90f      	add	r1, sp, #60	; 0x3c
 8006c56:	4630      	mov	r0, r6
 8006c58:	eeb0 0b48 	vmov.f64	d0, d8
 8006c5c:	f001 f9d4 	bl	8008008 <__d2b>
 8006c60:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c66:	4605      	mov	r5, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d046      	beq.n	8006cfa <_dtoa_r+0x182>
 8006c6c:	eeb0 7b48 	vmov.f64	d7, d8
 8006c70:	ee18 1a90 	vmov	r1, s17
 8006c74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006c78:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006c7c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006c80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c84:	2000      	movs	r0, #0
 8006c86:	ee07 1a90 	vmov	s15, r1
 8006c8a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006c8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006e28 <_dtoa_r+0x2b0>
 8006c92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c96:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006e30 <_dtoa_r+0x2b8>
 8006c9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006c9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006e38 <_dtoa_r+0x2c0>
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006caa:	eeb0 7b46 	vmov.f64	d7, d6
 8006cae:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006cb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006cb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbe:	ee16 ba90 	vmov	fp, s13
 8006cc2:	9009      	str	r0, [sp, #36]	; 0x24
 8006cc4:	d508      	bpl.n	8006cd8 <_dtoa_r+0x160>
 8006cc6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006cca:	eeb4 6b47 	vcmp.f64	d6, d7
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	bf18      	it	ne
 8006cd4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006cd8:	f1bb 0f16 	cmp.w	fp, #22
 8006cdc:	d82b      	bhi.n	8006d36 <_dtoa_r+0x1be>
 8006cde:	495e      	ldr	r1, [pc, #376]	; (8006e58 <_dtoa_r+0x2e0>)
 8006ce0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006ce4:	ed91 7b00 	vldr	d7, [r1]
 8006ce8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf0:	d501      	bpl.n	8006cf6 <_dtoa_r+0x17e>
 8006cf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	e01e      	b.n	8006d38 <_dtoa_r+0x1c0>
 8006cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8006d02:	2920      	cmp	r1, #32
 8006d04:	bfc1      	itttt	gt
 8006d06:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8006d0a:	408c      	lslgt	r4, r1
 8006d0c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006d10:	fa28 f101 	lsrgt.w	r1, r8, r1
 8006d14:	bfd6      	itet	le
 8006d16:	f1c1 0120 	rsble	r1, r1, #32
 8006d1a:	4321      	orrgt	r1, r4
 8006d1c:	fa08 f101 	lslle.w	r1, r8, r1
 8006d20:	ee07 1a90 	vmov	s15, r1
 8006d24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	ee17 1a90 	vmov	r1, s15
 8006d2e:	2001      	movs	r0, #1
 8006d30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006d34:	e7a7      	b.n	8006c86 <_dtoa_r+0x10e>
 8006d36:	2101      	movs	r1, #1
 8006d38:	1ad2      	subs	r2, r2, r3
 8006d3a:	1e53      	subs	r3, r2, #1
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	bf45      	ittet	mi
 8006d40:	f1c2 0301 	rsbmi	r3, r2, #1
 8006d44:	9304      	strmi	r3, [sp, #16]
 8006d46:	2300      	movpl	r3, #0
 8006d48:	2300      	movmi	r3, #0
 8006d4a:	bf4c      	ite	mi
 8006d4c:	9305      	strmi	r3, [sp, #20]
 8006d4e:	9304      	strpl	r3, [sp, #16]
 8006d50:	f1bb 0f00 	cmp.w	fp, #0
 8006d54:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d56:	db18      	blt.n	8006d8a <_dtoa_r+0x212>
 8006d58:	9b05      	ldr	r3, [sp, #20]
 8006d5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006d5e:	445b      	add	r3, fp
 8006d60:	9305      	str	r3, [sp, #20]
 8006d62:	2300      	movs	r3, #0
 8006d64:	9a06      	ldr	r2, [sp, #24]
 8006d66:	2a09      	cmp	r2, #9
 8006d68:	d848      	bhi.n	8006dfc <_dtoa_r+0x284>
 8006d6a:	2a05      	cmp	r2, #5
 8006d6c:	bfc4      	itt	gt
 8006d6e:	3a04      	subgt	r2, #4
 8006d70:	9206      	strgt	r2, [sp, #24]
 8006d72:	9a06      	ldr	r2, [sp, #24]
 8006d74:	f1a2 0202 	sub.w	r2, r2, #2
 8006d78:	bfcc      	ite	gt
 8006d7a:	2400      	movgt	r4, #0
 8006d7c:	2401      	movle	r4, #1
 8006d7e:	2a03      	cmp	r2, #3
 8006d80:	d847      	bhi.n	8006e12 <_dtoa_r+0x29a>
 8006d82:	e8df f002 	tbb	[pc, r2]
 8006d86:	2d0b      	.short	0x2d0b
 8006d88:	392b      	.short	0x392b
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	eba3 030b 	sub.w	r3, r3, fp
 8006d92:	9304      	str	r3, [sp, #16]
 8006d94:	920a      	str	r2, [sp, #40]	; 0x28
 8006d96:	f1cb 0300 	rsb	r3, fp, #0
 8006d9a:	e7e3      	b.n	8006d64 <_dtoa_r+0x1ec>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	9207      	str	r2, [sp, #28]
 8006da0:	9a08      	ldr	r2, [sp, #32]
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	dc38      	bgt.n	8006e18 <_dtoa_r+0x2a0>
 8006da6:	f04f 0a01 	mov.w	sl, #1
 8006daa:	46d1      	mov	r9, sl
 8006dac:	4652      	mov	r2, sl
 8006dae:	f8cd a020 	str.w	sl, [sp, #32]
 8006db2:	69f7      	ldr	r7, [r6, #28]
 8006db4:	2100      	movs	r1, #0
 8006db6:	2004      	movs	r0, #4
 8006db8:	f100 0c14 	add.w	ip, r0, #20
 8006dbc:	4594      	cmp	ip, r2
 8006dbe:	d930      	bls.n	8006e22 <_dtoa_r+0x2aa>
 8006dc0:	6079      	str	r1, [r7, #4]
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8006dc6:	f000 fd43 	bl	8007850 <_Balloc>
 8006dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dcc:	9001      	str	r0, [sp, #4]
 8006dce:	4602      	mov	r2, r0
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d145      	bne.n	8006e60 <_dtoa_r+0x2e8>
 8006dd4:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <_dtoa_r+0x2e4>)
 8006dd6:	f240 11af 	movw	r1, #431	; 0x1af
 8006dda:	e6e5      	b.n	8006ba8 <_dtoa_r+0x30>
 8006ddc:	2201      	movs	r2, #1
 8006dde:	e7de      	b.n	8006d9e <_dtoa_r+0x226>
 8006de0:	2200      	movs	r2, #0
 8006de2:	9207      	str	r2, [sp, #28]
 8006de4:	9a08      	ldr	r2, [sp, #32]
 8006de6:	eb0b 0a02 	add.w	sl, fp, r2
 8006dea:	f10a 0901 	add.w	r9, sl, #1
 8006dee:	464a      	mov	r2, r9
 8006df0:	2a01      	cmp	r2, #1
 8006df2:	bfb8      	it	lt
 8006df4:	2201      	movlt	r2, #1
 8006df6:	e7dc      	b.n	8006db2 <_dtoa_r+0x23a>
 8006df8:	2201      	movs	r2, #1
 8006dfa:	e7f2      	b.n	8006de2 <_dtoa_r+0x26a>
 8006dfc:	2401      	movs	r4, #1
 8006dfe:	2200      	movs	r2, #0
 8006e00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006e04:	f04f 3aff 	mov.w	sl, #4294967295
 8006e08:	2100      	movs	r1, #0
 8006e0a:	46d1      	mov	r9, sl
 8006e0c:	2212      	movs	r2, #18
 8006e0e:	9108      	str	r1, [sp, #32]
 8006e10:	e7cf      	b.n	8006db2 <_dtoa_r+0x23a>
 8006e12:	2201      	movs	r2, #1
 8006e14:	9207      	str	r2, [sp, #28]
 8006e16:	e7f5      	b.n	8006e04 <_dtoa_r+0x28c>
 8006e18:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006e1c:	46d1      	mov	r9, sl
 8006e1e:	4652      	mov	r2, sl
 8006e20:	e7c7      	b.n	8006db2 <_dtoa_r+0x23a>
 8006e22:	3101      	adds	r1, #1
 8006e24:	0040      	lsls	r0, r0, #1
 8006e26:	e7c7      	b.n	8006db8 <_dtoa_r+0x240>
 8006e28:	636f4361 	.word	0x636f4361
 8006e2c:	3fd287a7 	.word	0x3fd287a7
 8006e30:	8b60c8b3 	.word	0x8b60c8b3
 8006e34:	3fc68a28 	.word	0x3fc68a28
 8006e38:	509f79fb 	.word	0x509f79fb
 8006e3c:	3fd34413 	.word	0x3fd34413
 8006e40:	0800a3e6 	.word	0x0800a3e6
 8006e44:	0800a3fd 	.word	0x0800a3fd
 8006e48:	7ff00000 	.word	0x7ff00000
 8006e4c:	0800a3e2 	.word	0x0800a3e2
 8006e50:	0800a3d9 	.word	0x0800a3d9
 8006e54:	0800a3b1 	.word	0x0800a3b1
 8006e58:	0800a4e8 	.word	0x0800a4e8
 8006e5c:	0800a455 	.word	0x0800a455
 8006e60:	69f2      	ldr	r2, [r6, #28]
 8006e62:	9901      	ldr	r1, [sp, #4]
 8006e64:	6011      	str	r1, [r2, #0]
 8006e66:	f1b9 0f0e 	cmp.w	r9, #14
 8006e6a:	d86c      	bhi.n	8006f46 <_dtoa_r+0x3ce>
 8006e6c:	2c00      	cmp	r4, #0
 8006e6e:	d06a      	beq.n	8006f46 <_dtoa_r+0x3ce>
 8006e70:	f1bb 0f00 	cmp.w	fp, #0
 8006e74:	f340 80a0 	ble.w	8006fb8 <_dtoa_r+0x440>
 8006e78:	4ac1      	ldr	r2, [pc, #772]	; (8007180 <_dtoa_r+0x608>)
 8006e7a:	f00b 010f 	and.w	r1, fp, #15
 8006e7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006e82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e86:	ed92 7b00 	vldr	d7, [r2]
 8006e8a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006e8e:	f000 8087 	beq.w	8006fa0 <_dtoa_r+0x428>
 8006e92:	49bc      	ldr	r1, [pc, #752]	; (8007184 <_dtoa_r+0x60c>)
 8006e94:	ed91 6b08 	vldr	d6, [r1, #32]
 8006e98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006e9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006ea0:	f002 020f 	and.w	r2, r2, #15
 8006ea4:	2103      	movs	r1, #3
 8006ea6:	48b7      	ldr	r0, [pc, #732]	; (8007184 <_dtoa_r+0x60c>)
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	d17b      	bne.n	8006fa4 <_dtoa_r+0x42c>
 8006eac:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006eb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006eb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	f000 80a0 	beq.w	8007004 <_dtoa_r+0x48c>
 8006ec4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006ec8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	f140 8098 	bpl.w	8007004 <_dtoa_r+0x48c>
 8006ed4:	f1b9 0f00 	cmp.w	r9, #0
 8006ed8:	f000 8094 	beq.w	8007004 <_dtoa_r+0x48c>
 8006edc:	f1ba 0f00 	cmp.w	sl, #0
 8006ee0:	dd2f      	ble.n	8006f42 <_dtoa_r+0x3ca>
 8006ee2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006ee6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eee:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006ef2:	3101      	adds	r1, #1
 8006ef4:	4654      	mov	r4, sl
 8006ef6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006efa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006efe:	ee07 1a90 	vmov	s15, r1
 8006f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006f0a:	ee15 7a90 	vmov	r7, s11
 8006f0e:	ec51 0b15 	vmov	r0, r1, d5
 8006f12:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	d177      	bne.n	800700a <_dtoa_r+0x492>
 8006f1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006f1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f22:	ec41 0b17 	vmov	d7, r0, r1
 8006f26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2e:	f300 826a 	bgt.w	8007406 <_dtoa_r+0x88e>
 8006f32:	eeb1 7b47 	vneg.f64	d7, d7
 8006f36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3e:	f100 8260 	bmi.w	8007402 <_dtoa_r+0x88a>
 8006f42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	f2c0 811d 	blt.w	8007188 <_dtoa_r+0x610>
 8006f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f52:	f300 8119 	bgt.w	8007188 <_dtoa_r+0x610>
 8006f56:	4b8a      	ldr	r3, [pc, #552]	; (8007180 <_dtoa_r+0x608>)
 8006f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f5c:	ed93 6b00 	vldr	d6, [r3]
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f280 80b7 	bge.w	80070d6 <_dtoa_r+0x55e>
 8006f68:	f1b9 0f00 	cmp.w	r9, #0
 8006f6c:	f300 80b3 	bgt.w	80070d6 <_dtoa_r+0x55e>
 8006f70:	f040 8246 	bne.w	8007400 <_dtoa_r+0x888>
 8006f74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006f78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006f7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f88:	464c      	mov	r4, r9
 8006f8a:	464f      	mov	r7, r9
 8006f8c:	f280 821c 	bge.w	80073c8 <_dtoa_r+0x850>
 8006f90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f94:	2331      	movs	r3, #49	; 0x31
 8006f96:	f808 3b01 	strb.w	r3, [r8], #1
 8006f9a:	f10b 0b01 	add.w	fp, fp, #1
 8006f9e:	e218      	b.n	80073d2 <_dtoa_r+0x85a>
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	e780      	b.n	8006ea6 <_dtoa_r+0x32e>
 8006fa4:	07d4      	lsls	r4, r2, #31
 8006fa6:	d504      	bpl.n	8006fb2 <_dtoa_r+0x43a>
 8006fa8:	ed90 6b00 	vldr	d6, [r0]
 8006fac:	3101      	adds	r1, #1
 8006fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fb2:	1052      	asrs	r2, r2, #1
 8006fb4:	3008      	adds	r0, #8
 8006fb6:	e777      	b.n	8006ea8 <_dtoa_r+0x330>
 8006fb8:	d022      	beq.n	8007000 <_dtoa_r+0x488>
 8006fba:	f1cb 0200 	rsb	r2, fp, #0
 8006fbe:	4970      	ldr	r1, [pc, #448]	; (8007180 <_dtoa_r+0x608>)
 8006fc0:	f002 000f 	and.w	r0, r2, #15
 8006fc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006fc8:	ed91 7b00 	vldr	d7, [r1]
 8006fcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006fd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fd4:	486b      	ldr	r0, [pc, #428]	; (8007184 <_dtoa_r+0x60c>)
 8006fd6:	1112      	asrs	r2, r2, #4
 8006fd8:	2400      	movs	r4, #0
 8006fda:	2102      	movs	r1, #2
 8006fdc:	b92a      	cbnz	r2, 8006fea <_dtoa_r+0x472>
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	f43f af6a 	beq.w	8006eb8 <_dtoa_r+0x340>
 8006fe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fe8:	e766      	b.n	8006eb8 <_dtoa_r+0x340>
 8006fea:	07d7      	lsls	r7, r2, #31
 8006fec:	d505      	bpl.n	8006ffa <_dtoa_r+0x482>
 8006fee:	ed90 6b00 	vldr	d6, [r0]
 8006ff2:	3101      	adds	r1, #1
 8006ff4:	2401      	movs	r4, #1
 8006ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ffa:	1052      	asrs	r2, r2, #1
 8006ffc:	3008      	adds	r0, #8
 8006ffe:	e7ed      	b.n	8006fdc <_dtoa_r+0x464>
 8007000:	2102      	movs	r1, #2
 8007002:	e759      	b.n	8006eb8 <_dtoa_r+0x340>
 8007004:	465a      	mov	r2, fp
 8007006:	464c      	mov	r4, r9
 8007008:	e775      	b.n	8006ef6 <_dtoa_r+0x37e>
 800700a:	ec41 0b17 	vmov	d7, r0, r1
 800700e:	495c      	ldr	r1, [pc, #368]	; (8007180 <_dtoa_r+0x608>)
 8007010:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007014:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007018:	9901      	ldr	r1, [sp, #4]
 800701a:	440c      	add	r4, r1
 800701c:	9907      	ldr	r1, [sp, #28]
 800701e:	b351      	cbz	r1, 8007076 <_dtoa_r+0x4fe>
 8007020:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007024:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007028:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800702c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007030:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007034:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007038:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800703c:	ee14 1a90 	vmov	r1, s9
 8007040:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007044:	3130      	adds	r1, #48	; 0x30
 8007046:	ee36 6b45 	vsub.f64	d6, d6, d5
 800704a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007052:	f808 1b01 	strb.w	r1, [r8], #1
 8007056:	d439      	bmi.n	80070cc <_dtoa_r+0x554>
 8007058:	ee32 5b46 	vsub.f64	d5, d2, d6
 800705c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007064:	d472      	bmi.n	800714c <_dtoa_r+0x5d4>
 8007066:	45a0      	cmp	r8, r4
 8007068:	f43f af6b 	beq.w	8006f42 <_dtoa_r+0x3ca>
 800706c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007070:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007074:	e7e0      	b.n	8007038 <_dtoa_r+0x4c0>
 8007076:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800707a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800707e:	4620      	mov	r0, r4
 8007080:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007084:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007088:	ee14 1a90 	vmov	r1, s9
 800708c:	3130      	adds	r1, #48	; 0x30
 800708e:	f808 1b01 	strb.w	r1, [r8], #1
 8007092:	45a0      	cmp	r8, r4
 8007094:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007098:	ee36 6b45 	vsub.f64	d6, d6, d5
 800709c:	d118      	bne.n	80070d0 <_dtoa_r+0x558>
 800709e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80070a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80070a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80070aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ae:	dc4d      	bgt.n	800714c <_dtoa_r+0x5d4>
 80070b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80070b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80070b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070bc:	f57f af41 	bpl.w	8006f42 <_dtoa_r+0x3ca>
 80070c0:	4680      	mov	r8, r0
 80070c2:	3801      	subs	r0, #1
 80070c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80070c8:	2b30      	cmp	r3, #48	; 0x30
 80070ca:	d0f9      	beq.n	80070c0 <_dtoa_r+0x548>
 80070cc:	4693      	mov	fp, r2
 80070ce:	e02a      	b.n	8007126 <_dtoa_r+0x5ae>
 80070d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80070d4:	e7d6      	b.n	8007084 <_dtoa_r+0x50c>
 80070d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80070de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80070e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80070e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80070ea:	ee15 3a10 	vmov	r3, s10
 80070ee:	3330      	adds	r3, #48	; 0x30
 80070f0:	f808 3b01 	strb.w	r3, [r8], #1
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	eba8 0303 	sub.w	r3, r8, r3
 80070fa:	4599      	cmp	r9, r3
 80070fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007100:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007104:	d133      	bne.n	800716e <_dtoa_r+0x5f6>
 8007106:	ee37 7b07 	vadd.f64	d7, d7, d7
 800710a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800710e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007112:	dc1a      	bgt.n	800714a <_dtoa_r+0x5d2>
 8007114:	eeb4 7b46 	vcmp.f64	d7, d6
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	d103      	bne.n	8007126 <_dtoa_r+0x5ae>
 800711e:	ee15 3a10 	vmov	r3, s10
 8007122:	07d9      	lsls	r1, r3, #31
 8007124:	d411      	bmi.n	800714a <_dtoa_r+0x5d2>
 8007126:	4629      	mov	r1, r5
 8007128:	4630      	mov	r0, r6
 800712a:	f000 fbd1 	bl	80078d0 <_Bfree>
 800712e:	2300      	movs	r3, #0
 8007130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007132:	f888 3000 	strb.w	r3, [r8]
 8007136:	f10b 0301 	add.w	r3, fp, #1
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800713e:	2b00      	cmp	r3, #0
 8007140:	f43f ad69 	beq.w	8006c16 <_dtoa_r+0x9e>
 8007144:	f8c3 8000 	str.w	r8, [r3]
 8007148:	e565      	b.n	8006c16 <_dtoa_r+0x9e>
 800714a:	465a      	mov	r2, fp
 800714c:	4643      	mov	r3, r8
 800714e:	4698      	mov	r8, r3
 8007150:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007154:	2939      	cmp	r1, #57	; 0x39
 8007156:	d106      	bne.n	8007166 <_dtoa_r+0x5ee>
 8007158:	9901      	ldr	r1, [sp, #4]
 800715a:	4299      	cmp	r1, r3
 800715c:	d1f7      	bne.n	800714e <_dtoa_r+0x5d6>
 800715e:	9801      	ldr	r0, [sp, #4]
 8007160:	2130      	movs	r1, #48	; 0x30
 8007162:	3201      	adds	r2, #1
 8007164:	7001      	strb	r1, [r0, #0]
 8007166:	7819      	ldrb	r1, [r3, #0]
 8007168:	3101      	adds	r1, #1
 800716a:	7019      	strb	r1, [r3, #0]
 800716c:	e7ae      	b.n	80070cc <_dtoa_r+0x554>
 800716e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007172:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717a:	d1b2      	bne.n	80070e2 <_dtoa_r+0x56a>
 800717c:	e7d3      	b.n	8007126 <_dtoa_r+0x5ae>
 800717e:	bf00      	nop
 8007180:	0800a4e8 	.word	0x0800a4e8
 8007184:	0800a4c0 	.word	0x0800a4c0
 8007188:	9907      	ldr	r1, [sp, #28]
 800718a:	2900      	cmp	r1, #0
 800718c:	f000 80d0 	beq.w	8007330 <_dtoa_r+0x7b8>
 8007190:	9906      	ldr	r1, [sp, #24]
 8007192:	2901      	cmp	r1, #1
 8007194:	f300 80b4 	bgt.w	8007300 <_dtoa_r+0x788>
 8007198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800719a:	2900      	cmp	r1, #0
 800719c:	f000 80ac 	beq.w	80072f8 <_dtoa_r+0x780>
 80071a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80071a8:	461c      	mov	r4, r3
 80071aa:	9309      	str	r3, [sp, #36]	; 0x24
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	4413      	add	r3, r2
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	9b05      	ldr	r3, [sp, #20]
 80071b4:	2101      	movs	r1, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	4630      	mov	r0, r6
 80071ba:	9305      	str	r3, [sp, #20]
 80071bc:	f000 fc88 	bl	8007ad0 <__i2b>
 80071c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c2:	4607      	mov	r7, r0
 80071c4:	f1b8 0f00 	cmp.w	r8, #0
 80071c8:	d00d      	beq.n	80071e6 <_dtoa_r+0x66e>
 80071ca:	9a05      	ldr	r2, [sp, #20]
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	dd0a      	ble.n	80071e6 <_dtoa_r+0x66e>
 80071d0:	4542      	cmp	r2, r8
 80071d2:	9904      	ldr	r1, [sp, #16]
 80071d4:	bfa8      	it	ge
 80071d6:	4642      	movge	r2, r8
 80071d8:	1a89      	subs	r1, r1, r2
 80071da:	9104      	str	r1, [sp, #16]
 80071dc:	9905      	ldr	r1, [sp, #20]
 80071de:	eba8 0802 	sub.w	r8, r8, r2
 80071e2:	1a8a      	subs	r2, r1, r2
 80071e4:	9205      	str	r2, [sp, #20]
 80071e6:	b303      	cbz	r3, 800722a <_dtoa_r+0x6b2>
 80071e8:	9a07      	ldr	r2, [sp, #28]
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	f000 80a5 	beq.w	800733a <_dtoa_r+0x7c2>
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	dd13      	ble.n	800721c <_dtoa_r+0x6a4>
 80071f4:	4639      	mov	r1, r7
 80071f6:	4622      	mov	r2, r4
 80071f8:	4630      	mov	r0, r6
 80071fa:	930d      	str	r3, [sp, #52]	; 0x34
 80071fc:	f000 fd28 	bl	8007c50 <__pow5mult>
 8007200:	462a      	mov	r2, r5
 8007202:	4601      	mov	r1, r0
 8007204:	4607      	mov	r7, r0
 8007206:	4630      	mov	r0, r6
 8007208:	f000 fc78 	bl	8007afc <__multiply>
 800720c:	4629      	mov	r1, r5
 800720e:	9009      	str	r0, [sp, #36]	; 0x24
 8007210:	4630      	mov	r0, r6
 8007212:	f000 fb5d 	bl	80078d0 <_Bfree>
 8007216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721a:	4615      	mov	r5, r2
 800721c:	1b1a      	subs	r2, r3, r4
 800721e:	d004      	beq.n	800722a <_dtoa_r+0x6b2>
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f000 fd14 	bl	8007c50 <__pow5mult>
 8007228:	4605      	mov	r5, r0
 800722a:	2101      	movs	r1, #1
 800722c:	4630      	mov	r0, r6
 800722e:	f000 fc4f 	bl	8007ad0 <__i2b>
 8007232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007234:	2b00      	cmp	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	f340 8081 	ble.w	800733e <_dtoa_r+0x7c6>
 800723c:	461a      	mov	r2, r3
 800723e:	4601      	mov	r1, r0
 8007240:	4630      	mov	r0, r6
 8007242:	f000 fd05 	bl	8007c50 <__pow5mult>
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	2b01      	cmp	r3, #1
 800724a:	4604      	mov	r4, r0
 800724c:	dd7a      	ble.n	8007344 <_dtoa_r+0x7cc>
 800724e:	2300      	movs	r3, #0
 8007250:	9309      	str	r3, [sp, #36]	; 0x24
 8007252:	6922      	ldr	r2, [r4, #16]
 8007254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007258:	6910      	ldr	r0, [r2, #16]
 800725a:	f000 fbeb 	bl	8007a34 <__hi0bits>
 800725e:	f1c0 0020 	rsb	r0, r0, #32
 8007262:	9b05      	ldr	r3, [sp, #20]
 8007264:	4418      	add	r0, r3
 8007266:	f010 001f 	ands.w	r0, r0, #31
 800726a:	f000 8093 	beq.w	8007394 <_dtoa_r+0x81c>
 800726e:	f1c0 0220 	rsb	r2, r0, #32
 8007272:	2a04      	cmp	r2, #4
 8007274:	f340 8085 	ble.w	8007382 <_dtoa_r+0x80a>
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	f1c0 001c 	rsb	r0, r0, #28
 800727e:	4403      	add	r3, r0
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	9b05      	ldr	r3, [sp, #20]
 8007284:	4480      	add	r8, r0
 8007286:	4403      	add	r3, r0
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	9b04      	ldr	r3, [sp, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	dd05      	ble.n	800729c <_dtoa_r+0x724>
 8007290:	4629      	mov	r1, r5
 8007292:	461a      	mov	r2, r3
 8007294:	4630      	mov	r0, r6
 8007296:	f000 fd35 	bl	8007d04 <__lshift>
 800729a:	4605      	mov	r5, r0
 800729c:	9b05      	ldr	r3, [sp, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dd05      	ble.n	80072ae <_dtoa_r+0x736>
 80072a2:	4621      	mov	r1, r4
 80072a4:	461a      	mov	r2, r3
 80072a6:	4630      	mov	r0, r6
 80072a8:	f000 fd2c 	bl	8007d04 <__lshift>
 80072ac:	4604      	mov	r4, r0
 80072ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d071      	beq.n	8007398 <_dtoa_r+0x820>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 fd90 	bl	8007ddc <__mcmp>
 80072bc:	2800      	cmp	r0, #0
 80072be:	da6b      	bge.n	8007398 <_dtoa_r+0x820>
 80072c0:	2300      	movs	r3, #0
 80072c2:	4629      	mov	r1, r5
 80072c4:	220a      	movs	r2, #10
 80072c6:	4630      	mov	r0, r6
 80072c8:	f000 fb24 	bl	8007914 <__multadd>
 80072cc:	9b07      	ldr	r3, [sp, #28]
 80072ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072d2:	4605      	mov	r5, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8197 	beq.w	8007608 <_dtoa_r+0xa90>
 80072da:	4639      	mov	r1, r7
 80072dc:	2300      	movs	r3, #0
 80072de:	220a      	movs	r2, #10
 80072e0:	4630      	mov	r0, r6
 80072e2:	f000 fb17 	bl	8007914 <__multadd>
 80072e6:	f1ba 0f00 	cmp.w	sl, #0
 80072ea:	4607      	mov	r7, r0
 80072ec:	f300 8093 	bgt.w	8007416 <_dtoa_r+0x89e>
 80072f0:	9b06      	ldr	r3, [sp, #24]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	dc57      	bgt.n	80073a6 <_dtoa_r+0x82e>
 80072f6:	e08e      	b.n	8007416 <_dtoa_r+0x89e>
 80072f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072fe:	e751      	b.n	80071a4 <_dtoa_r+0x62c>
 8007300:	f109 34ff 	add.w	r4, r9, #4294967295
 8007304:	42a3      	cmp	r3, r4
 8007306:	bfbf      	itttt	lt
 8007308:	1ae2      	sublt	r2, r4, r3
 800730a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800730c:	189b      	addlt	r3, r3, r2
 800730e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007310:	bfae      	itee	ge
 8007312:	1b1c      	subge	r4, r3, r4
 8007314:	4623      	movlt	r3, r4
 8007316:	2400      	movlt	r4, #0
 8007318:	f1b9 0f00 	cmp.w	r9, #0
 800731c:	bfb5      	itete	lt
 800731e:	9a04      	ldrlt	r2, [sp, #16]
 8007320:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007324:	eba2 0809 	sublt.w	r8, r2, r9
 8007328:	464a      	movge	r2, r9
 800732a:	bfb8      	it	lt
 800732c:	2200      	movlt	r2, #0
 800732e:	e73c      	b.n	80071aa <_dtoa_r+0x632>
 8007330:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007334:	9f07      	ldr	r7, [sp, #28]
 8007336:	461c      	mov	r4, r3
 8007338:	e744      	b.n	80071c4 <_dtoa_r+0x64c>
 800733a:	461a      	mov	r2, r3
 800733c:	e770      	b.n	8007220 <_dtoa_r+0x6a8>
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	2b01      	cmp	r3, #1
 8007342:	dc18      	bgt.n	8007376 <_dtoa_r+0x7fe>
 8007344:	9b02      	ldr	r3, [sp, #8]
 8007346:	b9b3      	cbnz	r3, 8007376 <_dtoa_r+0x7fe>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800734e:	b9a2      	cbnz	r2, 800737a <_dtoa_r+0x802>
 8007350:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007354:	0d12      	lsrs	r2, r2, #20
 8007356:	0512      	lsls	r2, r2, #20
 8007358:	b18a      	cbz	r2, 800737e <_dtoa_r+0x806>
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	3301      	adds	r3, #1
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	9b05      	ldr	r3, [sp, #20]
 8007362:	3301      	adds	r3, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	2301      	movs	r3, #1
 8007368:	9309      	str	r3, [sp, #36]	; 0x24
 800736a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736c:	2b00      	cmp	r3, #0
 800736e:	f47f af70 	bne.w	8007252 <_dtoa_r+0x6da>
 8007372:	2001      	movs	r0, #1
 8007374:	e775      	b.n	8007262 <_dtoa_r+0x6ea>
 8007376:	2300      	movs	r3, #0
 8007378:	e7f6      	b.n	8007368 <_dtoa_r+0x7f0>
 800737a:	9b02      	ldr	r3, [sp, #8]
 800737c:	e7f4      	b.n	8007368 <_dtoa_r+0x7f0>
 800737e:	9209      	str	r2, [sp, #36]	; 0x24
 8007380:	e7f3      	b.n	800736a <_dtoa_r+0x7f2>
 8007382:	d082      	beq.n	800728a <_dtoa_r+0x712>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	321c      	adds	r2, #28
 8007388:	4413      	add	r3, r2
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	4490      	add	r8, r2
 8007390:	4413      	add	r3, r2
 8007392:	e779      	b.n	8007288 <_dtoa_r+0x710>
 8007394:	4602      	mov	r2, r0
 8007396:	e7f5      	b.n	8007384 <_dtoa_r+0x80c>
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	dc36      	bgt.n	800740c <_dtoa_r+0x894>
 800739e:	9b06      	ldr	r3, [sp, #24]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	dd33      	ble.n	800740c <_dtoa_r+0x894>
 80073a4:	46ca      	mov	sl, r9
 80073a6:	f1ba 0f00 	cmp.w	sl, #0
 80073aa:	d10d      	bne.n	80073c8 <_dtoa_r+0x850>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4653      	mov	r3, sl
 80073b0:	2205      	movs	r2, #5
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 faae 	bl	8007914 <__multadd>
 80073b8:	4601      	mov	r1, r0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 fd0d 	bl	8007ddc <__mcmp>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f73f ade4 	bgt.w	8006f90 <_dtoa_r+0x418>
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073ce:	ea6f 0b03 	mvn.w	fp, r3
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	4621      	mov	r1, r4
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 fa79 	bl	80078d0 <_Bfree>
 80073de:	2f00      	cmp	r7, #0
 80073e0:	f43f aea1 	beq.w	8007126 <_dtoa_r+0x5ae>
 80073e4:	f1b9 0f00 	cmp.w	r9, #0
 80073e8:	d005      	beq.n	80073f6 <_dtoa_r+0x87e>
 80073ea:	45b9      	cmp	r9, r7
 80073ec:	d003      	beq.n	80073f6 <_dtoa_r+0x87e>
 80073ee:	4649      	mov	r1, r9
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 fa6d 	bl	80078d0 <_Bfree>
 80073f6:	4639      	mov	r1, r7
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 fa69 	bl	80078d0 <_Bfree>
 80073fe:	e692      	b.n	8007126 <_dtoa_r+0x5ae>
 8007400:	2400      	movs	r4, #0
 8007402:	4627      	mov	r7, r4
 8007404:	e7e0      	b.n	80073c8 <_dtoa_r+0x850>
 8007406:	4693      	mov	fp, r2
 8007408:	4627      	mov	r7, r4
 800740a:	e5c1      	b.n	8006f90 <_dtoa_r+0x418>
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	46ca      	mov	sl, r9
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8100 	beq.w	8007616 <_dtoa_r+0xa9e>
 8007416:	f1b8 0f00 	cmp.w	r8, #0
 800741a:	dd05      	ble.n	8007428 <_dtoa_r+0x8b0>
 800741c:	4639      	mov	r1, r7
 800741e:	4642      	mov	r2, r8
 8007420:	4630      	mov	r0, r6
 8007422:	f000 fc6f 	bl	8007d04 <__lshift>
 8007426:	4607      	mov	r7, r0
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d05d      	beq.n	80074ea <_dtoa_r+0x972>
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4630      	mov	r0, r6
 8007432:	f000 fa0d 	bl	8007850 <_Balloc>
 8007436:	4680      	mov	r8, r0
 8007438:	b928      	cbnz	r0, 8007446 <_dtoa_r+0x8ce>
 800743a:	4b82      	ldr	r3, [pc, #520]	; (8007644 <_dtoa_r+0xacc>)
 800743c:	4602      	mov	r2, r0
 800743e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007442:	f7ff bbb1 	b.w	8006ba8 <_dtoa_r+0x30>
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	3202      	adds	r2, #2
 800744a:	0092      	lsls	r2, r2, #2
 800744c:	f107 010c 	add.w	r1, r7, #12
 8007450:	300c      	adds	r0, #12
 8007452:	f001 ff3f 	bl	80092d4 <memcpy>
 8007456:	2201      	movs	r2, #1
 8007458:	4641      	mov	r1, r8
 800745a:	4630      	mov	r0, r6
 800745c:	f000 fc52 	bl	8007d04 <__lshift>
 8007460:	9b01      	ldr	r3, [sp, #4]
 8007462:	3301      	adds	r3, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	4453      	add	r3, sl
 800746a:	9308      	str	r3, [sp, #32]
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	46b9      	mov	r9, r7
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	4607      	mov	r7, r0
 8007478:	9b04      	ldr	r3, [sp, #16]
 800747a:	4621      	mov	r1, r4
 800747c:	3b01      	subs	r3, #1
 800747e:	4628      	mov	r0, r5
 8007480:	9302      	str	r3, [sp, #8]
 8007482:	f7ff faef 	bl	8006a64 <quorem>
 8007486:	4603      	mov	r3, r0
 8007488:	3330      	adds	r3, #48	; 0x30
 800748a:	9005      	str	r0, [sp, #20]
 800748c:	4649      	mov	r1, r9
 800748e:	4628      	mov	r0, r5
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	f000 fca3 	bl	8007ddc <__mcmp>
 8007496:	463a      	mov	r2, r7
 8007498:	4682      	mov	sl, r0
 800749a:	4621      	mov	r1, r4
 800749c:	4630      	mov	r0, r6
 800749e:	f000 fcb9 	bl	8007e14 <__mdiff>
 80074a2:	68c2      	ldr	r2, [r0, #12]
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	4680      	mov	r8, r0
 80074a8:	bb0a      	cbnz	r2, 80074ee <_dtoa_r+0x976>
 80074aa:	4601      	mov	r1, r0
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 fc95 	bl	8007ddc <__mcmp>
 80074b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b4:	4602      	mov	r2, r0
 80074b6:	4641      	mov	r1, r8
 80074b8:	4630      	mov	r0, r6
 80074ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80074be:	f000 fa07 	bl	80078d0 <_Bfree>
 80074c2:	9b06      	ldr	r3, [sp, #24]
 80074c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80074ca:	ea43 0102 	orr.w	r1, r3, r2
 80074ce:	9b07      	ldr	r3, [sp, #28]
 80074d0:	4319      	orrs	r1, r3
 80074d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d4:	d10d      	bne.n	80074f2 <_dtoa_r+0x97a>
 80074d6:	2b39      	cmp	r3, #57	; 0x39
 80074d8:	d029      	beq.n	800752e <_dtoa_r+0x9b6>
 80074da:	f1ba 0f00 	cmp.w	sl, #0
 80074de:	dd01      	ble.n	80074e4 <_dtoa_r+0x96c>
 80074e0:	9b05      	ldr	r3, [sp, #20]
 80074e2:	3331      	adds	r3, #49	; 0x31
 80074e4:	9a02      	ldr	r2, [sp, #8]
 80074e6:	7013      	strb	r3, [r2, #0]
 80074e8:	e775      	b.n	80073d6 <_dtoa_r+0x85e>
 80074ea:	4638      	mov	r0, r7
 80074ec:	e7b8      	b.n	8007460 <_dtoa_r+0x8e8>
 80074ee:	2201      	movs	r2, #1
 80074f0:	e7e1      	b.n	80074b6 <_dtoa_r+0x93e>
 80074f2:	f1ba 0f00 	cmp.w	sl, #0
 80074f6:	db06      	blt.n	8007506 <_dtoa_r+0x98e>
 80074f8:	9906      	ldr	r1, [sp, #24]
 80074fa:	ea41 0a0a 	orr.w	sl, r1, sl
 80074fe:	9907      	ldr	r1, [sp, #28]
 8007500:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007504:	d120      	bne.n	8007548 <_dtoa_r+0x9d0>
 8007506:	2a00      	cmp	r2, #0
 8007508:	ddec      	ble.n	80074e4 <_dtoa_r+0x96c>
 800750a:	4629      	mov	r1, r5
 800750c:	2201      	movs	r2, #1
 800750e:	4630      	mov	r0, r6
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	f000 fbf7 	bl	8007d04 <__lshift>
 8007516:	4621      	mov	r1, r4
 8007518:	4605      	mov	r5, r0
 800751a:	f000 fc5f 	bl	8007ddc <__mcmp>
 800751e:	2800      	cmp	r0, #0
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	dc02      	bgt.n	800752a <_dtoa_r+0x9b2>
 8007524:	d1de      	bne.n	80074e4 <_dtoa_r+0x96c>
 8007526:	07da      	lsls	r2, r3, #31
 8007528:	d5dc      	bpl.n	80074e4 <_dtoa_r+0x96c>
 800752a:	2b39      	cmp	r3, #57	; 0x39
 800752c:	d1d8      	bne.n	80074e0 <_dtoa_r+0x968>
 800752e:	9a02      	ldr	r2, [sp, #8]
 8007530:	2339      	movs	r3, #57	; 0x39
 8007532:	7013      	strb	r3, [r2, #0]
 8007534:	4643      	mov	r3, r8
 8007536:	4698      	mov	r8, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800753e:	2a39      	cmp	r2, #57	; 0x39
 8007540:	d051      	beq.n	80075e6 <_dtoa_r+0xa6e>
 8007542:	3201      	adds	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e746      	b.n	80073d6 <_dtoa_r+0x85e>
 8007548:	2a00      	cmp	r2, #0
 800754a:	dd03      	ble.n	8007554 <_dtoa_r+0x9dc>
 800754c:	2b39      	cmp	r3, #57	; 0x39
 800754e:	d0ee      	beq.n	800752e <_dtoa_r+0x9b6>
 8007550:	3301      	adds	r3, #1
 8007552:	e7c7      	b.n	80074e4 <_dtoa_r+0x96c>
 8007554:	9a04      	ldr	r2, [sp, #16]
 8007556:	9908      	ldr	r1, [sp, #32]
 8007558:	f802 3c01 	strb.w	r3, [r2, #-1]
 800755c:	428a      	cmp	r2, r1
 800755e:	d02b      	beq.n	80075b8 <_dtoa_r+0xa40>
 8007560:	4629      	mov	r1, r5
 8007562:	2300      	movs	r3, #0
 8007564:	220a      	movs	r2, #10
 8007566:	4630      	mov	r0, r6
 8007568:	f000 f9d4 	bl	8007914 <__multadd>
 800756c:	45b9      	cmp	r9, r7
 800756e:	4605      	mov	r5, r0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	f04f 020a 	mov.w	r2, #10
 8007578:	4649      	mov	r1, r9
 800757a:	4630      	mov	r0, r6
 800757c:	d107      	bne.n	800758e <_dtoa_r+0xa16>
 800757e:	f000 f9c9 	bl	8007914 <__multadd>
 8007582:	4681      	mov	r9, r0
 8007584:	4607      	mov	r7, r0
 8007586:	9b04      	ldr	r3, [sp, #16]
 8007588:	3301      	adds	r3, #1
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	e774      	b.n	8007478 <_dtoa_r+0x900>
 800758e:	f000 f9c1 	bl	8007914 <__multadd>
 8007592:	4639      	mov	r1, r7
 8007594:	4681      	mov	r9, r0
 8007596:	2300      	movs	r3, #0
 8007598:	220a      	movs	r2, #10
 800759a:	4630      	mov	r0, r6
 800759c:	f000 f9ba 	bl	8007914 <__multadd>
 80075a0:	4607      	mov	r7, r0
 80075a2:	e7f0      	b.n	8007586 <_dtoa_r+0xa0e>
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	9a01      	ldr	r2, [sp, #4]
 80075aa:	bfcc      	ite	gt
 80075ac:	46d0      	movgt	r8, sl
 80075ae:	f04f 0801 	movle.w	r8, #1
 80075b2:	4490      	add	r8, r2
 80075b4:	f04f 0900 	mov.w	r9, #0
 80075b8:	4629      	mov	r1, r5
 80075ba:	2201      	movs	r2, #1
 80075bc:	4630      	mov	r0, r6
 80075be:	9302      	str	r3, [sp, #8]
 80075c0:	f000 fba0 	bl	8007d04 <__lshift>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4605      	mov	r5, r0
 80075c8:	f000 fc08 	bl	8007ddc <__mcmp>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	dcb1      	bgt.n	8007534 <_dtoa_r+0x9bc>
 80075d0:	d102      	bne.n	80075d8 <_dtoa_r+0xa60>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	07db      	lsls	r3, r3, #31
 80075d6:	d4ad      	bmi.n	8007534 <_dtoa_r+0x9bc>
 80075d8:	4643      	mov	r3, r8
 80075da:	4698      	mov	r8, r3
 80075dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e0:	2a30      	cmp	r2, #48	; 0x30
 80075e2:	d0fa      	beq.n	80075da <_dtoa_r+0xa62>
 80075e4:	e6f7      	b.n	80073d6 <_dtoa_r+0x85e>
 80075e6:	9a01      	ldr	r2, [sp, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d1a4      	bne.n	8007536 <_dtoa_r+0x9be>
 80075ec:	f10b 0b01 	add.w	fp, fp, #1
 80075f0:	2331      	movs	r3, #49	; 0x31
 80075f2:	e778      	b.n	80074e6 <_dtoa_r+0x96e>
 80075f4:	4b14      	ldr	r3, [pc, #80]	; (8007648 <_dtoa_r+0xad0>)
 80075f6:	f7ff bb2a 	b.w	8006c4e <_dtoa_r+0xd6>
 80075fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f47f ab05 	bne.w	8006c0c <_dtoa_r+0x94>
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <_dtoa_r+0xad4>)
 8007604:	f7ff bb23 	b.w	8006c4e <_dtoa_r+0xd6>
 8007608:	f1ba 0f00 	cmp.w	sl, #0
 800760c:	dc03      	bgt.n	8007616 <_dtoa_r+0xa9e>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	2b02      	cmp	r3, #2
 8007612:	f73f aec8 	bgt.w	80073a6 <_dtoa_r+0x82e>
 8007616:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800761a:	4621      	mov	r1, r4
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff fa21 	bl	8006a64 <quorem>
 8007622:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007626:	f808 3b01 	strb.w	r3, [r8], #1
 800762a:	9a01      	ldr	r2, [sp, #4]
 800762c:	eba8 0202 	sub.w	r2, r8, r2
 8007630:	4592      	cmp	sl, r2
 8007632:	ddb7      	ble.n	80075a4 <_dtoa_r+0xa2c>
 8007634:	4629      	mov	r1, r5
 8007636:	2300      	movs	r3, #0
 8007638:	220a      	movs	r2, #10
 800763a:	4630      	mov	r0, r6
 800763c:	f000 f96a 	bl	8007914 <__multadd>
 8007640:	4605      	mov	r5, r0
 8007642:	e7ea      	b.n	800761a <_dtoa_r+0xaa2>
 8007644:	0800a455 	.word	0x0800a455
 8007648:	0800a3b0 	.word	0x0800a3b0
 800764c:	0800a3d9 	.word	0x0800a3d9

08007650 <_free_r>:
 8007650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007652:	2900      	cmp	r1, #0
 8007654:	d044      	beq.n	80076e0 <_free_r+0x90>
 8007656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765a:	9001      	str	r0, [sp, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f1a1 0404 	sub.w	r4, r1, #4
 8007662:	bfb8      	it	lt
 8007664:	18e4      	addlt	r4, r4, r3
 8007666:	f000 f8e7 	bl	8007838 <__malloc_lock>
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <_free_r+0x94>)
 800766c:	9801      	ldr	r0, [sp, #4]
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	b933      	cbnz	r3, 8007680 <_free_r+0x30>
 8007672:	6063      	str	r3, [r4, #4]
 8007674:	6014      	str	r4, [r2, #0]
 8007676:	b003      	add	sp, #12
 8007678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800767c:	f000 b8e2 	b.w	8007844 <__malloc_unlock>
 8007680:	42a3      	cmp	r3, r4
 8007682:	d908      	bls.n	8007696 <_free_r+0x46>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf01      	itttt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	1949      	addeq	r1, r1, r5
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	e7ed      	b.n	8007672 <_free_r+0x22>
 8007696:	461a      	mov	r2, r3
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b10b      	cbz	r3, 80076a0 <_free_r+0x50>
 800769c:	42a3      	cmp	r3, r4
 800769e:	d9fa      	bls.n	8007696 <_free_r+0x46>
 80076a0:	6811      	ldr	r1, [r2, #0]
 80076a2:	1855      	adds	r5, r2, r1
 80076a4:	42a5      	cmp	r5, r4
 80076a6:	d10b      	bne.n	80076c0 <_free_r+0x70>
 80076a8:	6824      	ldr	r4, [r4, #0]
 80076aa:	4421      	add	r1, r4
 80076ac:	1854      	adds	r4, r2, r1
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	6011      	str	r1, [r2, #0]
 80076b2:	d1e0      	bne.n	8007676 <_free_r+0x26>
 80076b4:	681c      	ldr	r4, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	6053      	str	r3, [r2, #4]
 80076ba:	440c      	add	r4, r1
 80076bc:	6014      	str	r4, [r2, #0]
 80076be:	e7da      	b.n	8007676 <_free_r+0x26>
 80076c0:	d902      	bls.n	80076c8 <_free_r+0x78>
 80076c2:	230c      	movs	r3, #12
 80076c4:	6003      	str	r3, [r0, #0]
 80076c6:	e7d6      	b.n	8007676 <_free_r+0x26>
 80076c8:	6825      	ldr	r5, [r4, #0]
 80076ca:	1961      	adds	r1, r4, r5
 80076cc:	428b      	cmp	r3, r1
 80076ce:	bf04      	itt	eq
 80076d0:	6819      	ldreq	r1, [r3, #0]
 80076d2:	685b      	ldreq	r3, [r3, #4]
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	bf04      	itt	eq
 80076d8:	1949      	addeq	r1, r1, r5
 80076da:	6021      	streq	r1, [r4, #0]
 80076dc:	6054      	str	r4, [r2, #4]
 80076de:	e7ca      	b.n	8007676 <_free_r+0x26>
 80076e0:	b003      	add	sp, #12
 80076e2:	bd30      	pop	{r4, r5, pc}
 80076e4:	20000488 	.word	0x20000488

080076e8 <malloc>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <malloc+0xc>)
 80076ea:	4601      	mov	r1, r0
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f000 b823 	b.w	8007738 <_malloc_r>
 80076f2:	bf00      	nop
 80076f4:	20000068 	.word	0x20000068

080076f8 <sbrk_aligned>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4e0e      	ldr	r6, [pc, #56]	; (8007734 <sbrk_aligned+0x3c>)
 80076fc:	460c      	mov	r4, r1
 80076fe:	6831      	ldr	r1, [r6, #0]
 8007700:	4605      	mov	r5, r0
 8007702:	b911      	cbnz	r1, 800770a <sbrk_aligned+0x12>
 8007704:	f001 fdd6 	bl	80092b4 <_sbrk_r>
 8007708:	6030      	str	r0, [r6, #0]
 800770a:	4621      	mov	r1, r4
 800770c:	4628      	mov	r0, r5
 800770e:	f001 fdd1 	bl	80092b4 <_sbrk_r>
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	d00a      	beq.n	800772c <sbrk_aligned+0x34>
 8007716:	1cc4      	adds	r4, r0, #3
 8007718:	f024 0403 	bic.w	r4, r4, #3
 800771c:	42a0      	cmp	r0, r4
 800771e:	d007      	beq.n	8007730 <sbrk_aligned+0x38>
 8007720:	1a21      	subs	r1, r4, r0
 8007722:	4628      	mov	r0, r5
 8007724:	f001 fdc6 	bl	80092b4 <_sbrk_r>
 8007728:	3001      	adds	r0, #1
 800772a:	d101      	bne.n	8007730 <sbrk_aligned+0x38>
 800772c:	f04f 34ff 	mov.w	r4, #4294967295
 8007730:	4620      	mov	r0, r4
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	2000048c 	.word	0x2000048c

08007738 <_malloc_r>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	1ccd      	adds	r5, r1, #3
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	2d00      	cmp	r5, #0
 800774c:	4607      	mov	r7, r0
 800774e:	db01      	blt.n	8007754 <_malloc_r+0x1c>
 8007750:	42a9      	cmp	r1, r5
 8007752:	d905      	bls.n	8007760 <_malloc_r+0x28>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	2600      	movs	r6, #0
 800775a:	4630      	mov	r0, r6
 800775c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007760:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007834 <_malloc_r+0xfc>
 8007764:	f000 f868 	bl	8007838 <__malloc_lock>
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	461c      	mov	r4, r3
 800776e:	bb5c      	cbnz	r4, 80077c8 <_malloc_r+0x90>
 8007770:	4629      	mov	r1, r5
 8007772:	4638      	mov	r0, r7
 8007774:	f7ff ffc0 	bl	80076f8 <sbrk_aligned>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	4604      	mov	r4, r0
 800777c:	d155      	bne.n	800782a <_malloc_r+0xf2>
 800777e:	f8d8 4000 	ldr.w	r4, [r8]
 8007782:	4626      	mov	r6, r4
 8007784:	2e00      	cmp	r6, #0
 8007786:	d145      	bne.n	8007814 <_malloc_r+0xdc>
 8007788:	2c00      	cmp	r4, #0
 800778a:	d048      	beq.n	800781e <_malloc_r+0xe6>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	4631      	mov	r1, r6
 8007790:	4638      	mov	r0, r7
 8007792:	eb04 0903 	add.w	r9, r4, r3
 8007796:	f001 fd8d 	bl	80092b4 <_sbrk_r>
 800779a:	4581      	cmp	r9, r0
 800779c:	d13f      	bne.n	800781e <_malloc_r+0xe6>
 800779e:	6821      	ldr	r1, [r4, #0]
 80077a0:	1a6d      	subs	r5, r5, r1
 80077a2:	4629      	mov	r1, r5
 80077a4:	4638      	mov	r0, r7
 80077a6:	f7ff ffa7 	bl	80076f8 <sbrk_aligned>
 80077aa:	3001      	adds	r0, #1
 80077ac:	d037      	beq.n	800781e <_malloc_r+0xe6>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	442b      	add	r3, r5
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	f8d8 3000 	ldr.w	r3, [r8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d038      	beq.n	800782e <_malloc_r+0xf6>
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	42a2      	cmp	r2, r4
 80077c0:	d12b      	bne.n	800781a <_malloc_r+0xe2>
 80077c2:	2200      	movs	r2, #0
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	e00f      	b.n	80077e8 <_malloc_r+0xb0>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	1b52      	subs	r2, r2, r5
 80077cc:	d41f      	bmi.n	800780e <_malloc_r+0xd6>
 80077ce:	2a0b      	cmp	r2, #11
 80077d0:	d917      	bls.n	8007802 <_malloc_r+0xca>
 80077d2:	1961      	adds	r1, r4, r5
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	6025      	str	r5, [r4, #0]
 80077d8:	bf18      	it	ne
 80077da:	6059      	strne	r1, [r3, #4]
 80077dc:	6863      	ldr	r3, [r4, #4]
 80077de:	bf08      	it	eq
 80077e0:	f8c8 1000 	streq.w	r1, [r8]
 80077e4:	5162      	str	r2, [r4, r5]
 80077e6:	604b      	str	r3, [r1, #4]
 80077e8:	4638      	mov	r0, r7
 80077ea:	f104 060b 	add.w	r6, r4, #11
 80077ee:	f000 f829 	bl	8007844 <__malloc_unlock>
 80077f2:	f026 0607 	bic.w	r6, r6, #7
 80077f6:	1d23      	adds	r3, r4, #4
 80077f8:	1af2      	subs	r2, r6, r3
 80077fa:	d0ae      	beq.n	800775a <_malloc_r+0x22>
 80077fc:	1b9b      	subs	r3, r3, r6
 80077fe:	50a3      	str	r3, [r4, r2]
 8007800:	e7ab      	b.n	800775a <_malloc_r+0x22>
 8007802:	42a3      	cmp	r3, r4
 8007804:	6862      	ldr	r2, [r4, #4]
 8007806:	d1dd      	bne.n	80077c4 <_malloc_r+0x8c>
 8007808:	f8c8 2000 	str.w	r2, [r8]
 800780c:	e7ec      	b.n	80077e8 <_malloc_r+0xb0>
 800780e:	4623      	mov	r3, r4
 8007810:	6864      	ldr	r4, [r4, #4]
 8007812:	e7ac      	b.n	800776e <_malloc_r+0x36>
 8007814:	4634      	mov	r4, r6
 8007816:	6876      	ldr	r6, [r6, #4]
 8007818:	e7b4      	b.n	8007784 <_malloc_r+0x4c>
 800781a:	4613      	mov	r3, r2
 800781c:	e7cc      	b.n	80077b8 <_malloc_r+0x80>
 800781e:	230c      	movs	r3, #12
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4638      	mov	r0, r7
 8007824:	f000 f80e 	bl	8007844 <__malloc_unlock>
 8007828:	e797      	b.n	800775a <_malloc_r+0x22>
 800782a:	6025      	str	r5, [r4, #0]
 800782c:	e7dc      	b.n	80077e8 <_malloc_r+0xb0>
 800782e:	605b      	str	r3, [r3, #4]
 8007830:	deff      	udf	#255	; 0xff
 8007832:	bf00      	nop
 8007834:	20000488 	.word	0x20000488

08007838 <__malloc_lock>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__malloc_lock+0x8>)
 800783a:	f7ff b90a 	b.w	8006a52 <__retarget_lock_acquire_recursive>
 800783e:	bf00      	nop
 8007840:	20000484 	.word	0x20000484

08007844 <__malloc_unlock>:
 8007844:	4801      	ldr	r0, [pc, #4]	; (800784c <__malloc_unlock+0x8>)
 8007846:	f7ff b905 	b.w	8006a54 <__retarget_lock_release_recursive>
 800784a:	bf00      	nop
 800784c:	20000484 	.word	0x20000484

08007850 <_Balloc>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	69c6      	ldr	r6, [r0, #28]
 8007854:	4604      	mov	r4, r0
 8007856:	460d      	mov	r5, r1
 8007858:	b976      	cbnz	r6, 8007878 <_Balloc+0x28>
 800785a:	2010      	movs	r0, #16
 800785c:	f7ff ff44 	bl	80076e8 <malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	61e0      	str	r0, [r4, #28]
 8007864:	b920      	cbnz	r0, 8007870 <_Balloc+0x20>
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <_Balloc+0x78>)
 8007868:	4818      	ldr	r0, [pc, #96]	; (80078cc <_Balloc+0x7c>)
 800786a:	216b      	movs	r1, #107	; 0x6b
 800786c:	f001 fd48 	bl	8009300 <__assert_func>
 8007870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007874:	6006      	str	r6, [r0, #0]
 8007876:	60c6      	str	r6, [r0, #12]
 8007878:	69e6      	ldr	r6, [r4, #28]
 800787a:	68f3      	ldr	r3, [r6, #12]
 800787c:	b183      	cbz	r3, 80078a0 <_Balloc+0x50>
 800787e:	69e3      	ldr	r3, [r4, #28]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007886:	b9b8      	cbnz	r0, 80078b8 <_Balloc+0x68>
 8007888:	2101      	movs	r1, #1
 800788a:	fa01 f605 	lsl.w	r6, r1, r5
 800788e:	1d72      	adds	r2, r6, #5
 8007890:	0092      	lsls	r2, r2, #2
 8007892:	4620      	mov	r0, r4
 8007894:	f001 fd52 	bl	800933c <_calloc_r>
 8007898:	b160      	cbz	r0, 80078b4 <_Balloc+0x64>
 800789a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800789e:	e00e      	b.n	80078be <_Balloc+0x6e>
 80078a0:	2221      	movs	r2, #33	; 0x21
 80078a2:	2104      	movs	r1, #4
 80078a4:	4620      	mov	r0, r4
 80078a6:	f001 fd49 	bl	800933c <_calloc_r>
 80078aa:	69e3      	ldr	r3, [r4, #28]
 80078ac:	60f0      	str	r0, [r6, #12]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e4      	bne.n	800787e <_Balloc+0x2e>
 80078b4:	2000      	movs	r0, #0
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	6802      	ldr	r2, [r0, #0]
 80078ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078be:	2300      	movs	r3, #0
 80078c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078c4:	e7f7      	b.n	80078b6 <_Balloc+0x66>
 80078c6:	bf00      	nop
 80078c8:	0800a3e6 	.word	0x0800a3e6
 80078cc:	0800a466 	.word	0x0800a466

080078d0 <_Bfree>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	69c6      	ldr	r6, [r0, #28]
 80078d4:	4605      	mov	r5, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	b976      	cbnz	r6, 80078f8 <_Bfree+0x28>
 80078da:	2010      	movs	r0, #16
 80078dc:	f7ff ff04 	bl	80076e8 <malloc>
 80078e0:	4602      	mov	r2, r0
 80078e2:	61e8      	str	r0, [r5, #28]
 80078e4:	b920      	cbnz	r0, 80078f0 <_Bfree+0x20>
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <_Bfree+0x3c>)
 80078e8:	4809      	ldr	r0, [pc, #36]	; (8007910 <_Bfree+0x40>)
 80078ea:	218f      	movs	r1, #143	; 0x8f
 80078ec:	f001 fd08 	bl	8009300 <__assert_func>
 80078f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f4:	6006      	str	r6, [r0, #0]
 80078f6:	60c6      	str	r6, [r0, #12]
 80078f8:	b13c      	cbz	r4, 800790a <_Bfree+0x3a>
 80078fa:	69eb      	ldr	r3, [r5, #28]
 80078fc:	6862      	ldr	r2, [r4, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007904:	6021      	str	r1, [r4, #0]
 8007906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	0800a3e6 	.word	0x0800a3e6
 8007910:	0800a466 	.word	0x0800a466

08007914 <__multadd>:
 8007914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	690d      	ldr	r5, [r1, #16]
 800791a:	4607      	mov	r7, r0
 800791c:	460c      	mov	r4, r1
 800791e:	461e      	mov	r6, r3
 8007920:	f101 0c14 	add.w	ip, r1, #20
 8007924:	2000      	movs	r0, #0
 8007926:	f8dc 3000 	ldr.w	r3, [ip]
 800792a:	b299      	uxth	r1, r3
 800792c:	fb02 6101 	mla	r1, r2, r1, r6
 8007930:	0c1e      	lsrs	r6, r3, #16
 8007932:	0c0b      	lsrs	r3, r1, #16
 8007934:	fb02 3306 	mla	r3, r2, r6, r3
 8007938:	b289      	uxth	r1, r1
 800793a:	3001      	adds	r0, #1
 800793c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007940:	4285      	cmp	r5, r0
 8007942:	f84c 1b04 	str.w	r1, [ip], #4
 8007946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800794a:	dcec      	bgt.n	8007926 <__multadd+0x12>
 800794c:	b30e      	cbz	r6, 8007992 <__multadd+0x7e>
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc19      	bgt.n	8007988 <__multadd+0x74>
 8007954:	6861      	ldr	r1, [r4, #4]
 8007956:	4638      	mov	r0, r7
 8007958:	3101      	adds	r1, #1
 800795a:	f7ff ff79 	bl	8007850 <_Balloc>
 800795e:	4680      	mov	r8, r0
 8007960:	b928      	cbnz	r0, 800796e <__multadd+0x5a>
 8007962:	4602      	mov	r2, r0
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <__multadd+0x84>)
 8007966:	480d      	ldr	r0, [pc, #52]	; (800799c <__multadd+0x88>)
 8007968:	21ba      	movs	r1, #186	; 0xba
 800796a:	f001 fcc9 	bl	8009300 <__assert_func>
 800796e:	6922      	ldr	r2, [r4, #16]
 8007970:	3202      	adds	r2, #2
 8007972:	f104 010c 	add.w	r1, r4, #12
 8007976:	0092      	lsls	r2, r2, #2
 8007978:	300c      	adds	r0, #12
 800797a:	f001 fcab 	bl	80092d4 <memcpy>
 800797e:	4621      	mov	r1, r4
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ffa5 	bl	80078d0 <_Bfree>
 8007986:	4644      	mov	r4, r8
 8007988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800798c:	3501      	adds	r5, #1
 800798e:	615e      	str	r6, [r3, #20]
 8007990:	6125      	str	r5, [r4, #16]
 8007992:	4620      	mov	r0, r4
 8007994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007998:	0800a455 	.word	0x0800a455
 800799c:	0800a466 	.word	0x0800a466

080079a0 <__s2b>:
 80079a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a4:	460c      	mov	r4, r1
 80079a6:	4615      	mov	r5, r2
 80079a8:	461f      	mov	r7, r3
 80079aa:	2209      	movs	r2, #9
 80079ac:	3308      	adds	r3, #8
 80079ae:	4606      	mov	r6, r0
 80079b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80079b4:	2100      	movs	r1, #0
 80079b6:	2201      	movs	r2, #1
 80079b8:	429a      	cmp	r2, r3
 80079ba:	db09      	blt.n	80079d0 <__s2b+0x30>
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff ff47 	bl	8007850 <_Balloc>
 80079c2:	b940      	cbnz	r0, 80079d6 <__s2b+0x36>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <__s2b+0x8c>)
 80079c8:	4819      	ldr	r0, [pc, #100]	; (8007a30 <__s2b+0x90>)
 80079ca:	21d3      	movs	r1, #211	; 0xd3
 80079cc:	f001 fc98 	bl	8009300 <__assert_func>
 80079d0:	0052      	lsls	r2, r2, #1
 80079d2:	3101      	adds	r1, #1
 80079d4:	e7f0      	b.n	80079b8 <__s2b+0x18>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	6143      	str	r3, [r0, #20]
 80079da:	2d09      	cmp	r5, #9
 80079dc:	f04f 0301 	mov.w	r3, #1
 80079e0:	6103      	str	r3, [r0, #16]
 80079e2:	dd16      	ble.n	8007a12 <__s2b+0x72>
 80079e4:	f104 0909 	add.w	r9, r4, #9
 80079e8:	46c8      	mov	r8, r9
 80079ea:	442c      	add	r4, r5
 80079ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079f0:	4601      	mov	r1, r0
 80079f2:	3b30      	subs	r3, #48	; 0x30
 80079f4:	220a      	movs	r2, #10
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff ff8c 	bl	8007914 <__multadd>
 80079fc:	45a0      	cmp	r8, r4
 80079fe:	d1f5      	bne.n	80079ec <__s2b+0x4c>
 8007a00:	f1a5 0408 	sub.w	r4, r5, #8
 8007a04:	444c      	add	r4, r9
 8007a06:	1b2d      	subs	r5, r5, r4
 8007a08:	1963      	adds	r3, r4, r5
 8007a0a:	42bb      	cmp	r3, r7
 8007a0c:	db04      	blt.n	8007a18 <__s2b+0x78>
 8007a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a12:	340a      	adds	r4, #10
 8007a14:	2509      	movs	r5, #9
 8007a16:	e7f6      	b.n	8007a06 <__s2b+0x66>
 8007a18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	3b30      	subs	r3, #48	; 0x30
 8007a20:	220a      	movs	r2, #10
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff ff76 	bl	8007914 <__multadd>
 8007a28:	e7ee      	b.n	8007a08 <__s2b+0x68>
 8007a2a:	bf00      	nop
 8007a2c:	0800a455 	.word	0x0800a455
 8007a30:	0800a466 	.word	0x0800a466

08007a34 <__hi0bits>:
 8007a34:	0c03      	lsrs	r3, r0, #16
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	b9d3      	cbnz	r3, 8007a70 <__hi0bits+0x3c>
 8007a3a:	0400      	lsls	r0, r0, #16
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a42:	bf04      	itt	eq
 8007a44:	0200      	lsleq	r0, r0, #8
 8007a46:	3308      	addeq	r3, #8
 8007a48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a4c:	bf04      	itt	eq
 8007a4e:	0100      	lsleq	r0, r0, #4
 8007a50:	3304      	addeq	r3, #4
 8007a52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a56:	bf04      	itt	eq
 8007a58:	0080      	lsleq	r0, r0, #2
 8007a5a:	3302      	addeq	r3, #2
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	db05      	blt.n	8007a6c <__hi0bits+0x38>
 8007a60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a64:	f103 0301 	add.w	r3, r3, #1
 8007a68:	bf08      	it	eq
 8007a6a:	2320      	moveq	r3, #32
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	4770      	bx	lr
 8007a70:	2300      	movs	r3, #0
 8007a72:	e7e4      	b.n	8007a3e <__hi0bits+0xa>

08007a74 <__lo0bits>:
 8007a74:	6803      	ldr	r3, [r0, #0]
 8007a76:	f013 0207 	ands.w	r2, r3, #7
 8007a7a:	d00c      	beq.n	8007a96 <__lo0bits+0x22>
 8007a7c:	07d9      	lsls	r1, r3, #31
 8007a7e:	d422      	bmi.n	8007ac6 <__lo0bits+0x52>
 8007a80:	079a      	lsls	r2, r3, #30
 8007a82:	bf49      	itett	mi
 8007a84:	085b      	lsrmi	r3, r3, #1
 8007a86:	089b      	lsrpl	r3, r3, #2
 8007a88:	6003      	strmi	r3, [r0, #0]
 8007a8a:	2201      	movmi	r2, #1
 8007a8c:	bf5c      	itt	pl
 8007a8e:	6003      	strpl	r3, [r0, #0]
 8007a90:	2202      	movpl	r2, #2
 8007a92:	4610      	mov	r0, r2
 8007a94:	4770      	bx	lr
 8007a96:	b299      	uxth	r1, r3
 8007a98:	b909      	cbnz	r1, 8007a9e <__lo0bits+0x2a>
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	2210      	movs	r2, #16
 8007a9e:	b2d9      	uxtb	r1, r3
 8007aa0:	b909      	cbnz	r1, 8007aa6 <__lo0bits+0x32>
 8007aa2:	3208      	adds	r2, #8
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	0719      	lsls	r1, r3, #28
 8007aa8:	bf04      	itt	eq
 8007aaa:	091b      	lsreq	r3, r3, #4
 8007aac:	3204      	addeq	r2, #4
 8007aae:	0799      	lsls	r1, r3, #30
 8007ab0:	bf04      	itt	eq
 8007ab2:	089b      	lsreq	r3, r3, #2
 8007ab4:	3202      	addeq	r2, #2
 8007ab6:	07d9      	lsls	r1, r3, #31
 8007ab8:	d403      	bmi.n	8007ac2 <__lo0bits+0x4e>
 8007aba:	085b      	lsrs	r3, r3, #1
 8007abc:	f102 0201 	add.w	r2, r2, #1
 8007ac0:	d003      	beq.n	8007aca <__lo0bits+0x56>
 8007ac2:	6003      	str	r3, [r0, #0]
 8007ac4:	e7e5      	b.n	8007a92 <__lo0bits+0x1e>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	e7e3      	b.n	8007a92 <__lo0bits+0x1e>
 8007aca:	2220      	movs	r2, #32
 8007acc:	e7e1      	b.n	8007a92 <__lo0bits+0x1e>
	...

08007ad0 <__i2b>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	f7ff febb 	bl	8007850 <_Balloc>
 8007ada:	4602      	mov	r2, r0
 8007adc:	b928      	cbnz	r0, 8007aea <__i2b+0x1a>
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <__i2b+0x24>)
 8007ae0:	4805      	ldr	r0, [pc, #20]	; (8007af8 <__i2b+0x28>)
 8007ae2:	f240 1145 	movw	r1, #325	; 0x145
 8007ae6:	f001 fc0b 	bl	8009300 <__assert_func>
 8007aea:	2301      	movs	r3, #1
 8007aec:	6144      	str	r4, [r0, #20]
 8007aee:	6103      	str	r3, [r0, #16]
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	bf00      	nop
 8007af4:	0800a455 	.word	0x0800a455
 8007af8:	0800a466 	.word	0x0800a466

08007afc <__multiply>:
 8007afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b00:	4691      	mov	r9, r2
 8007b02:	690a      	ldr	r2, [r1, #16]
 8007b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	460b      	movlt	r3, r1
 8007b0e:	460c      	mov	r4, r1
 8007b10:	bfbc      	itt	lt
 8007b12:	464c      	movlt	r4, r9
 8007b14:	4699      	movlt	r9, r3
 8007b16:	6927      	ldr	r7, [r4, #16]
 8007b18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	6861      	ldr	r1, [r4, #4]
 8007b20:	eb07 060a 	add.w	r6, r7, sl
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	b085      	sub	sp, #20
 8007b28:	bfb8      	it	lt
 8007b2a:	3101      	addlt	r1, #1
 8007b2c:	f7ff fe90 	bl	8007850 <_Balloc>
 8007b30:	b930      	cbnz	r0, 8007b40 <__multiply+0x44>
 8007b32:	4602      	mov	r2, r0
 8007b34:	4b44      	ldr	r3, [pc, #272]	; (8007c48 <__multiply+0x14c>)
 8007b36:	4845      	ldr	r0, [pc, #276]	; (8007c4c <__multiply+0x150>)
 8007b38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007b3c:	f001 fbe0 	bl	8009300 <__assert_func>
 8007b40:	f100 0514 	add.w	r5, r0, #20
 8007b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b48:	462b      	mov	r3, r5
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4543      	cmp	r3, r8
 8007b4e:	d321      	bcc.n	8007b94 <__multiply+0x98>
 8007b50:	f104 0314 	add.w	r3, r4, #20
 8007b54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b58:	f109 0314 	add.w	r3, r9, #20
 8007b5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	1b3a      	subs	r2, r7, r4
 8007b64:	3a15      	subs	r2, #21
 8007b66:	f022 0203 	bic.w	r2, r2, #3
 8007b6a:	3204      	adds	r2, #4
 8007b6c:	f104 0115 	add.w	r1, r4, #21
 8007b70:	428f      	cmp	r7, r1
 8007b72:	bf38      	it	cc
 8007b74:	2204      	movcc	r2, #4
 8007b76:	9201      	str	r2, [sp, #4]
 8007b78:	9a02      	ldr	r2, [sp, #8]
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d80c      	bhi.n	8007b9a <__multiply+0x9e>
 8007b80:	2e00      	cmp	r6, #0
 8007b82:	dd03      	ble.n	8007b8c <__multiply+0x90>
 8007b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d05b      	beq.n	8007c44 <__multiply+0x148>
 8007b8c:	6106      	str	r6, [r0, #16]
 8007b8e:	b005      	add	sp, #20
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	f843 2b04 	str.w	r2, [r3], #4
 8007b98:	e7d8      	b.n	8007b4c <__multiply+0x50>
 8007b9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ba2:	d024      	beq.n	8007bee <__multiply+0xf2>
 8007ba4:	f104 0e14 	add.w	lr, r4, #20
 8007ba8:	46a9      	mov	r9, r5
 8007baa:	f04f 0c00 	mov.w	ip, #0
 8007bae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bb2:	f8d9 1000 	ldr.w	r1, [r9]
 8007bb6:	fa1f fb82 	uxth.w	fp, r2
 8007bba:	b289      	uxth	r1, r1
 8007bbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc8:	4461      	add	r1, ip
 8007bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bce:	fb0a c20b 	mla	r2, sl, fp, ip
 8007bd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bd6:	b289      	uxth	r1, r1
 8007bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bdc:	4577      	cmp	r7, lr
 8007bde:	f849 1b04 	str.w	r1, [r9], #4
 8007be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007be6:	d8e2      	bhi.n	8007bae <__multiply+0xb2>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	f845 c002 	str.w	ip, [r5, r2]
 8007bee:	9a03      	ldr	r2, [sp, #12]
 8007bf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	f1b9 0f00 	cmp.w	r9, #0
 8007bfa:	d021      	beq.n	8007c40 <__multiply+0x144>
 8007bfc:	6829      	ldr	r1, [r5, #0]
 8007bfe:	f104 0c14 	add.w	ip, r4, #20
 8007c02:	46ae      	mov	lr, r5
 8007c04:	f04f 0a00 	mov.w	sl, #0
 8007c08:	f8bc b000 	ldrh.w	fp, [ip]
 8007c0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c10:	fb09 220b 	mla	r2, r9, fp, r2
 8007c14:	4452      	add	r2, sl
 8007c16:	b289      	uxth	r1, r1
 8007c18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c1c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c28:	f8be 1000 	ldrh.w	r1, [lr]
 8007c2c:	fb09 110a 	mla	r1, r9, sl, r1
 8007c30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007c34:	4567      	cmp	r7, ip
 8007c36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c3a:	d8e5      	bhi.n	8007c08 <__multiply+0x10c>
 8007c3c:	9a01      	ldr	r2, [sp, #4]
 8007c3e:	50a9      	str	r1, [r5, r2]
 8007c40:	3504      	adds	r5, #4
 8007c42:	e799      	b.n	8007b78 <__multiply+0x7c>
 8007c44:	3e01      	subs	r6, #1
 8007c46:	e79b      	b.n	8007b80 <__multiply+0x84>
 8007c48:	0800a455 	.word	0x0800a455
 8007c4c:	0800a466 	.word	0x0800a466

08007c50 <__pow5mult>:
 8007c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c54:	4615      	mov	r5, r2
 8007c56:	f012 0203 	ands.w	r2, r2, #3
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	d007      	beq.n	8007c70 <__pow5mult+0x20>
 8007c60:	4c25      	ldr	r4, [pc, #148]	; (8007cf8 <__pow5mult+0xa8>)
 8007c62:	3a01      	subs	r2, #1
 8007c64:	2300      	movs	r3, #0
 8007c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c6a:	f7ff fe53 	bl	8007914 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	10ad      	asrs	r5, r5, #2
 8007c72:	d03d      	beq.n	8007cf0 <__pow5mult+0xa0>
 8007c74:	69f4      	ldr	r4, [r6, #28]
 8007c76:	b97c      	cbnz	r4, 8007c98 <__pow5mult+0x48>
 8007c78:	2010      	movs	r0, #16
 8007c7a:	f7ff fd35 	bl	80076e8 <malloc>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	61f0      	str	r0, [r6, #28]
 8007c82:	b928      	cbnz	r0, 8007c90 <__pow5mult+0x40>
 8007c84:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <__pow5mult+0xac>)
 8007c86:	481e      	ldr	r0, [pc, #120]	; (8007d00 <__pow5mult+0xb0>)
 8007c88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c8c:	f001 fb38 	bl	8009300 <__assert_func>
 8007c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c94:	6004      	str	r4, [r0, #0]
 8007c96:	60c4      	str	r4, [r0, #12]
 8007c98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ca0:	b94c      	cbnz	r4, 8007cb6 <__pow5mult+0x66>
 8007ca2:	f240 2171 	movw	r1, #625	; 0x271
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff ff12 	bl	8007ad0 <__i2b>
 8007cac:	2300      	movs	r3, #0
 8007cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	f04f 0900 	mov.w	r9, #0
 8007cba:	07eb      	lsls	r3, r5, #31
 8007cbc:	d50a      	bpl.n	8007cd4 <__pow5mult+0x84>
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ff1a 	bl	8007afc <__multiply>
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fdff 	bl	80078d0 <_Bfree>
 8007cd2:	4647      	mov	r7, r8
 8007cd4:	106d      	asrs	r5, r5, #1
 8007cd6:	d00b      	beq.n	8007cf0 <__pow5mult+0xa0>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	b938      	cbnz	r0, 8007cec <__pow5mult+0x9c>
 8007cdc:	4622      	mov	r2, r4
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ff0b 	bl	8007afc <__multiply>
 8007ce6:	6020      	str	r0, [r4, #0]
 8007ce8:	f8c0 9000 	str.w	r9, [r0]
 8007cec:	4604      	mov	r4, r0
 8007cee:	e7e4      	b.n	8007cba <__pow5mult+0x6a>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf6:	bf00      	nop
 8007cf8:	0800a5b0 	.word	0x0800a5b0
 8007cfc:	0800a3e6 	.word	0x0800a3e6
 8007d00:	0800a466 	.word	0x0800a466

08007d04 <__lshift>:
 8007d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d08:	460c      	mov	r4, r1
 8007d0a:	6849      	ldr	r1, [r1, #4]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	4607      	mov	r7, r0
 8007d16:	4691      	mov	r9, r2
 8007d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d1c:	f108 0601 	add.w	r6, r8, #1
 8007d20:	42b3      	cmp	r3, r6
 8007d22:	db0b      	blt.n	8007d3c <__lshift+0x38>
 8007d24:	4638      	mov	r0, r7
 8007d26:	f7ff fd93 	bl	8007850 <_Balloc>
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	b948      	cbnz	r0, 8007d42 <__lshift+0x3e>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <__lshift+0xd0>)
 8007d32:	4829      	ldr	r0, [pc, #164]	; (8007dd8 <__lshift+0xd4>)
 8007d34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007d38:	f001 fae2 	bl	8009300 <__assert_func>
 8007d3c:	3101      	adds	r1, #1
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	e7ee      	b.n	8007d20 <__lshift+0x1c>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f100 0114 	add.w	r1, r0, #20
 8007d48:	f100 0210 	add.w	r2, r0, #16
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	4553      	cmp	r3, sl
 8007d50:	db33      	blt.n	8007dba <__lshift+0xb6>
 8007d52:	6920      	ldr	r0, [r4, #16]
 8007d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d58:	f104 0314 	add.w	r3, r4, #20
 8007d5c:	f019 091f 	ands.w	r9, r9, #31
 8007d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d68:	d02b      	beq.n	8007dc2 <__lshift+0xbe>
 8007d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d6e:	468a      	mov	sl, r1
 8007d70:	2200      	movs	r2, #0
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	fa00 f009 	lsl.w	r0, r0, r9
 8007d78:	4310      	orrs	r0, r2
 8007d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d82:	459c      	cmp	ip, r3
 8007d84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d88:	d8f3      	bhi.n	8007d72 <__lshift+0x6e>
 8007d8a:	ebac 0304 	sub.w	r3, ip, r4
 8007d8e:	3b15      	subs	r3, #21
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	3304      	adds	r3, #4
 8007d96:	f104 0015 	add.w	r0, r4, #21
 8007d9a:	4584      	cmp	ip, r0
 8007d9c:	bf38      	it	cc
 8007d9e:	2304      	movcc	r3, #4
 8007da0:	50ca      	str	r2, [r1, r3]
 8007da2:	b10a      	cbz	r2, 8007da8 <__lshift+0xa4>
 8007da4:	f108 0602 	add.w	r6, r8, #2
 8007da8:	3e01      	subs	r6, #1
 8007daa:	4638      	mov	r0, r7
 8007dac:	612e      	str	r6, [r5, #16]
 8007dae:	4621      	mov	r1, r4
 8007db0:	f7ff fd8e 	bl	80078d0 <_Bfree>
 8007db4:	4628      	mov	r0, r5
 8007db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	e7c5      	b.n	8007d4e <__lshift+0x4a>
 8007dc2:	3904      	subs	r1, #4
 8007dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dcc:	459c      	cmp	ip, r3
 8007dce:	d8f9      	bhi.n	8007dc4 <__lshift+0xc0>
 8007dd0:	e7ea      	b.n	8007da8 <__lshift+0xa4>
 8007dd2:	bf00      	nop
 8007dd4:	0800a455 	.word	0x0800a455
 8007dd8:	0800a466 	.word	0x0800a466

08007ddc <__mcmp>:
 8007ddc:	b530      	push	{r4, r5, lr}
 8007dde:	6902      	ldr	r2, [r0, #16]
 8007de0:	690c      	ldr	r4, [r1, #16]
 8007de2:	1b12      	subs	r2, r2, r4
 8007de4:	d10e      	bne.n	8007e04 <__mcmp+0x28>
 8007de6:	f100 0314 	add.w	r3, r0, #20
 8007dea:	3114      	adds	r1, #20
 8007dec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007df0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007df4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007df8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007dfc:	42a5      	cmp	r5, r4
 8007dfe:	d003      	beq.n	8007e08 <__mcmp+0x2c>
 8007e00:	d305      	bcc.n	8007e0e <__mcmp+0x32>
 8007e02:	2201      	movs	r2, #1
 8007e04:	4610      	mov	r0, r2
 8007e06:	bd30      	pop	{r4, r5, pc}
 8007e08:	4283      	cmp	r3, r0
 8007e0a:	d3f3      	bcc.n	8007df4 <__mcmp+0x18>
 8007e0c:	e7fa      	b.n	8007e04 <__mcmp+0x28>
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e12:	e7f7      	b.n	8007e04 <__mcmp+0x28>

08007e14 <__mdiff>:
 8007e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	460c      	mov	r4, r1
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4690      	mov	r8, r2
 8007e22:	f7ff ffdb 	bl	8007ddc <__mcmp>
 8007e26:	1e05      	subs	r5, r0, #0
 8007e28:	d110      	bne.n	8007e4c <__mdiff+0x38>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff fd0f 	bl	8007850 <_Balloc>
 8007e32:	b930      	cbnz	r0, 8007e42 <__mdiff+0x2e>
 8007e34:	4b3a      	ldr	r3, [pc, #232]	; (8007f20 <__mdiff+0x10c>)
 8007e36:	4602      	mov	r2, r0
 8007e38:	f240 2137 	movw	r1, #567	; 0x237
 8007e3c:	4839      	ldr	r0, [pc, #228]	; (8007f24 <__mdiff+0x110>)
 8007e3e:	f001 fa5f 	bl	8009300 <__assert_func>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	bfa4      	itt	ge
 8007e4e:	4643      	movge	r3, r8
 8007e50:	46a0      	movge	r8, r4
 8007e52:	4630      	mov	r0, r6
 8007e54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e58:	bfa6      	itte	ge
 8007e5a:	461c      	movge	r4, r3
 8007e5c:	2500      	movge	r5, #0
 8007e5e:	2501      	movlt	r5, #1
 8007e60:	f7ff fcf6 	bl	8007850 <_Balloc>
 8007e64:	b920      	cbnz	r0, 8007e70 <__mdiff+0x5c>
 8007e66:	4b2e      	ldr	r3, [pc, #184]	; (8007f20 <__mdiff+0x10c>)
 8007e68:	4602      	mov	r2, r0
 8007e6a:	f240 2145 	movw	r1, #581	; 0x245
 8007e6e:	e7e5      	b.n	8007e3c <__mdiff+0x28>
 8007e70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e74:	6926      	ldr	r6, [r4, #16]
 8007e76:	60c5      	str	r5, [r0, #12]
 8007e78:	f104 0914 	add.w	r9, r4, #20
 8007e7c:	f108 0514 	add.w	r5, r8, #20
 8007e80:	f100 0e14 	add.w	lr, r0, #20
 8007e84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e8c:	f108 0210 	add.w	r2, r8, #16
 8007e90:	46f2      	mov	sl, lr
 8007e92:	2100      	movs	r1, #0
 8007e94:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e9c:	fa11 f88b 	uxtah	r8, r1, fp
 8007ea0:	b299      	uxth	r1, r3
 8007ea2:	0c1b      	lsrs	r3, r3, #16
 8007ea4:	eba8 0801 	sub.w	r8, r8, r1
 8007ea8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007eac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007eb0:	fa1f f888 	uxth.w	r8, r8
 8007eb4:	1419      	asrs	r1, r3, #16
 8007eb6:	454e      	cmp	r6, r9
 8007eb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ebc:	f84a 3b04 	str.w	r3, [sl], #4
 8007ec0:	d8e8      	bhi.n	8007e94 <__mdiff+0x80>
 8007ec2:	1b33      	subs	r3, r6, r4
 8007ec4:	3b15      	subs	r3, #21
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	3304      	adds	r3, #4
 8007ecc:	3415      	adds	r4, #21
 8007ece:	42a6      	cmp	r6, r4
 8007ed0:	bf38      	it	cc
 8007ed2:	2304      	movcc	r3, #4
 8007ed4:	441d      	add	r5, r3
 8007ed6:	4473      	add	r3, lr
 8007ed8:	469e      	mov	lr, r3
 8007eda:	462e      	mov	r6, r5
 8007edc:	4566      	cmp	r6, ip
 8007ede:	d30e      	bcc.n	8007efe <__mdiff+0xea>
 8007ee0:	f10c 0203 	add.w	r2, ip, #3
 8007ee4:	1b52      	subs	r2, r2, r5
 8007ee6:	f022 0203 	bic.w	r2, r2, #3
 8007eea:	3d03      	subs	r5, #3
 8007eec:	45ac      	cmp	ip, r5
 8007eee:	bf38      	it	cc
 8007ef0:	2200      	movcc	r2, #0
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ef8:	b17a      	cbz	r2, 8007f1a <__mdiff+0x106>
 8007efa:	6107      	str	r7, [r0, #16]
 8007efc:	e7a4      	b.n	8007e48 <__mdiff+0x34>
 8007efe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f02:	fa11 f288 	uxtah	r2, r1, r8
 8007f06:	1414      	asrs	r4, r2, #16
 8007f08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f0c:	b292      	uxth	r2, r2
 8007f0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f12:	f84e 2b04 	str.w	r2, [lr], #4
 8007f16:	1421      	asrs	r1, r4, #16
 8007f18:	e7e0      	b.n	8007edc <__mdiff+0xc8>
 8007f1a:	3f01      	subs	r7, #1
 8007f1c:	e7ea      	b.n	8007ef4 <__mdiff+0xe0>
 8007f1e:	bf00      	nop
 8007f20:	0800a455 	.word	0x0800a455
 8007f24:	0800a466 	.word	0x0800a466

08007f28 <__ulp>:
 8007f28:	b082      	sub	sp, #8
 8007f2a:	ed8d 0b00 	vstr	d0, [sp]
 8007f2e:	9a01      	ldr	r2, [sp, #4]
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <__ulp+0x48>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dc08      	bgt.n	8007f4e <__ulp+0x26>
 8007f3c:	425b      	negs	r3, r3
 8007f3e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007f42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f46:	da04      	bge.n	8007f52 <__ulp+0x2a>
 8007f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f4c:	4113      	asrs	r3, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	e008      	b.n	8007f64 <__ulp+0x3c>
 8007f52:	f1a2 0314 	sub.w	r3, r2, #20
 8007f56:	2b1e      	cmp	r3, #30
 8007f58:	bfda      	itte	le
 8007f5a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007f5e:	40da      	lsrle	r2, r3
 8007f60:	2201      	movgt	r2, #1
 8007f62:	2300      	movs	r3, #0
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	ec41 0b10 	vmov	d0, r0, r1
 8007f6c:	b002      	add	sp, #8
 8007f6e:	4770      	bx	lr
 8007f70:	7ff00000 	.word	0x7ff00000

08007f74 <__b2d>:
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	6906      	ldr	r6, [r0, #16]
 8007f7a:	f100 0814 	add.w	r8, r0, #20
 8007f7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f82:	1f37      	subs	r7, r6, #4
 8007f84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7ff fd53 	bl	8007a34 <__hi0bits>
 8007f8e:	f1c0 0320 	rsb	r3, r0, #32
 8007f92:	280a      	cmp	r0, #10
 8007f94:	600b      	str	r3, [r1, #0]
 8007f96:	491b      	ldr	r1, [pc, #108]	; (8008004 <__b2d+0x90>)
 8007f98:	dc15      	bgt.n	8007fc6 <__b2d+0x52>
 8007f9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007fa2:	45b8      	cmp	r8, r7
 8007fa4:	ea43 0501 	orr.w	r5, r3, r1
 8007fa8:	bf34      	ite	cc
 8007faa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007fae:	2300      	movcs	r3, #0
 8007fb0:	3015      	adds	r0, #21
 8007fb2:	fa02 f000 	lsl.w	r0, r2, r0
 8007fb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007fba:	4303      	orrs	r3, r0
 8007fbc:	461c      	mov	r4, r3
 8007fbe:	ec45 4b10 	vmov	d0, r4, r5
 8007fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc6:	45b8      	cmp	r8, r7
 8007fc8:	bf3a      	itte	cc
 8007fca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007fce:	f1a6 0708 	subcc.w	r7, r6, #8
 8007fd2:	2300      	movcs	r3, #0
 8007fd4:	380b      	subs	r0, #11
 8007fd6:	d012      	beq.n	8007ffe <__b2d+0x8a>
 8007fd8:	f1c0 0120 	rsb	r1, r0, #32
 8007fdc:	fa23 f401 	lsr.w	r4, r3, r1
 8007fe0:	4082      	lsls	r2, r0
 8007fe2:	4322      	orrs	r2, r4
 8007fe4:	4547      	cmp	r7, r8
 8007fe6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007fea:	bf8c      	ite	hi
 8007fec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007ff0:	2200      	movls	r2, #0
 8007ff2:	4083      	lsls	r3, r0
 8007ff4:	40ca      	lsrs	r2, r1
 8007ff6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	e7de      	b.n	8007fbc <__b2d+0x48>
 8007ffe:	ea42 0501 	orr.w	r5, r2, r1
 8008002:	e7db      	b.n	8007fbc <__b2d+0x48>
 8008004:	3ff00000 	.word	0x3ff00000

08008008 <__d2b>:
 8008008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800800c:	460f      	mov	r7, r1
 800800e:	2101      	movs	r1, #1
 8008010:	ec59 8b10 	vmov	r8, r9, d0
 8008014:	4616      	mov	r6, r2
 8008016:	f7ff fc1b 	bl	8007850 <_Balloc>
 800801a:	4604      	mov	r4, r0
 800801c:	b930      	cbnz	r0, 800802c <__d2b+0x24>
 800801e:	4602      	mov	r2, r0
 8008020:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <__d2b+0xac>)
 8008022:	4825      	ldr	r0, [pc, #148]	; (80080b8 <__d2b+0xb0>)
 8008024:	f240 310f 	movw	r1, #783	; 0x30f
 8008028:	f001 f96a 	bl	8009300 <__assert_func>
 800802c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008034:	bb2d      	cbnz	r5, 8008082 <__d2b+0x7a>
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f1b8 0300 	subs.w	r3, r8, #0
 800803c:	d026      	beq.n	800808c <__d2b+0x84>
 800803e:	4668      	mov	r0, sp
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	f7ff fd17 	bl	8007a74 <__lo0bits>
 8008046:	e9dd 1200 	ldrd	r1, r2, [sp]
 800804a:	b1e8      	cbz	r0, 8008088 <__d2b+0x80>
 800804c:	f1c0 0320 	rsb	r3, r0, #32
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	430b      	orrs	r3, r1
 8008056:	40c2      	lsrs	r2, r0
 8008058:	6163      	str	r3, [r4, #20]
 800805a:	9201      	str	r2, [sp, #4]
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	61a3      	str	r3, [r4, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf14      	ite	ne
 8008064:	2202      	movne	r2, #2
 8008066:	2201      	moveq	r2, #1
 8008068:	6122      	str	r2, [r4, #16]
 800806a:	b1bd      	cbz	r5, 800809c <__d2b+0x94>
 800806c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008070:	4405      	add	r5, r0
 8008072:	603d      	str	r5, [r7, #0]
 8008074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008078:	6030      	str	r0, [r6, #0]
 800807a:	4620      	mov	r0, r4
 800807c:	b003      	add	sp, #12
 800807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008086:	e7d6      	b.n	8008036 <__d2b+0x2e>
 8008088:	6161      	str	r1, [r4, #20]
 800808a:	e7e7      	b.n	800805c <__d2b+0x54>
 800808c:	a801      	add	r0, sp, #4
 800808e:	f7ff fcf1 	bl	8007a74 <__lo0bits>
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	6163      	str	r3, [r4, #20]
 8008096:	3020      	adds	r0, #32
 8008098:	2201      	movs	r2, #1
 800809a:	e7e5      	b.n	8008068 <__d2b+0x60>
 800809c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080a4:	6038      	str	r0, [r7, #0]
 80080a6:	6918      	ldr	r0, [r3, #16]
 80080a8:	f7ff fcc4 	bl	8007a34 <__hi0bits>
 80080ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080b0:	e7e2      	b.n	8008078 <__d2b+0x70>
 80080b2:	bf00      	nop
 80080b4:	0800a455 	.word	0x0800a455
 80080b8:	0800a466 	.word	0x0800a466

080080bc <__ratio>:
 80080bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	4688      	mov	r8, r1
 80080c2:	4669      	mov	r1, sp
 80080c4:	4681      	mov	r9, r0
 80080c6:	f7ff ff55 	bl	8007f74 <__b2d>
 80080ca:	a901      	add	r1, sp, #4
 80080cc:	4640      	mov	r0, r8
 80080ce:	ec55 4b10 	vmov	r4, r5, d0
 80080d2:	ee10 aa10 	vmov	sl, s0
 80080d6:	f7ff ff4d 	bl	8007f74 <__b2d>
 80080da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80080de:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80080e8:	1a5b      	subs	r3, r3, r1
 80080ea:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80080ee:	ec57 6b10 	vmov	r6, r7, d0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfd6      	itet	le
 80080f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080fa:	462a      	movgt	r2, r5
 80080fc:	463a      	movle	r2, r7
 80080fe:	46ab      	mov	fp, r5
 8008100:	bfd6      	itet	le
 8008102:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008106:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800810a:	ee00 3a90 	vmovle	s1, r3
 800810e:	ec4b ab17 	vmov	d7, sl, fp
 8008112:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008116:	b003      	add	sp, #12
 8008118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800811c <__copybits>:
 800811c:	3901      	subs	r1, #1
 800811e:	b570      	push	{r4, r5, r6, lr}
 8008120:	1149      	asrs	r1, r1, #5
 8008122:	6914      	ldr	r4, [r2, #16]
 8008124:	3101      	adds	r1, #1
 8008126:	f102 0314 	add.w	r3, r2, #20
 800812a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800812e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008132:	1f05      	subs	r5, r0, #4
 8008134:	42a3      	cmp	r3, r4
 8008136:	d30c      	bcc.n	8008152 <__copybits+0x36>
 8008138:	1aa3      	subs	r3, r4, r2
 800813a:	3b11      	subs	r3, #17
 800813c:	f023 0303 	bic.w	r3, r3, #3
 8008140:	3211      	adds	r2, #17
 8008142:	42a2      	cmp	r2, r4
 8008144:	bf88      	it	hi
 8008146:	2300      	movhi	r3, #0
 8008148:	4418      	add	r0, r3
 800814a:	2300      	movs	r3, #0
 800814c:	4288      	cmp	r0, r1
 800814e:	d305      	bcc.n	800815c <__copybits+0x40>
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	f853 6b04 	ldr.w	r6, [r3], #4
 8008156:	f845 6f04 	str.w	r6, [r5, #4]!
 800815a:	e7eb      	b.n	8008134 <__copybits+0x18>
 800815c:	f840 3b04 	str.w	r3, [r0], #4
 8008160:	e7f4      	b.n	800814c <__copybits+0x30>

08008162 <__any_on>:
 8008162:	f100 0214 	add.w	r2, r0, #20
 8008166:	6900      	ldr	r0, [r0, #16]
 8008168:	114b      	asrs	r3, r1, #5
 800816a:	4298      	cmp	r0, r3
 800816c:	b510      	push	{r4, lr}
 800816e:	db11      	blt.n	8008194 <__any_on+0x32>
 8008170:	dd0a      	ble.n	8008188 <__any_on+0x26>
 8008172:	f011 011f 	ands.w	r1, r1, #31
 8008176:	d007      	beq.n	8008188 <__any_on+0x26>
 8008178:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800817c:	fa24 f001 	lsr.w	r0, r4, r1
 8008180:	fa00 f101 	lsl.w	r1, r0, r1
 8008184:	428c      	cmp	r4, r1
 8008186:	d10b      	bne.n	80081a0 <__any_on+0x3e>
 8008188:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800818c:	4293      	cmp	r3, r2
 800818e:	d803      	bhi.n	8008198 <__any_on+0x36>
 8008190:	2000      	movs	r0, #0
 8008192:	bd10      	pop	{r4, pc}
 8008194:	4603      	mov	r3, r0
 8008196:	e7f7      	b.n	8008188 <__any_on+0x26>
 8008198:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800819c:	2900      	cmp	r1, #0
 800819e:	d0f5      	beq.n	800818c <__any_on+0x2a>
 80081a0:	2001      	movs	r0, #1
 80081a2:	e7f6      	b.n	8008192 <__any_on+0x30>

080081a4 <sulp>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	4616      	mov	r6, r2
 80081ac:	ec45 4b10 	vmov	d0, r4, r5
 80081b0:	f7ff feba 	bl	8007f28 <__ulp>
 80081b4:	b17e      	cbz	r6, 80081d6 <sulp+0x32>
 80081b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081be:	2b00      	cmp	r3, #0
 80081c0:	dd09      	ble.n	80081d6 <sulp+0x32>
 80081c2:	051b      	lsls	r3, r3, #20
 80081c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80081c8:	2000      	movs	r0, #0
 80081ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80081ce:	ec41 0b17 	vmov	d7, r0, r1
 80081d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80081d6:	bd70      	pop	{r4, r5, r6, pc}

080081d8 <_strtod_l>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	ed2d 8b0e 	vpush	{d8-d14}
 80081e0:	b097      	sub	sp, #92	; 0x5c
 80081e2:	4604      	mov	r4, r0
 80081e4:	920d      	str	r2, [sp, #52]	; 0x34
 80081e6:	2200      	movs	r2, #0
 80081e8:	9212      	str	r2, [sp, #72]	; 0x48
 80081ea:	468a      	mov	sl, r1
 80081ec:	f04f 0800 	mov.w	r8, #0
 80081f0:	f04f 0900 	mov.w	r9, #0
 80081f4:	460a      	mov	r2, r1
 80081f6:	9211      	str	r2, [sp, #68]	; 0x44
 80081f8:	7811      	ldrb	r1, [r2, #0]
 80081fa:	292b      	cmp	r1, #43	; 0x2b
 80081fc:	d04c      	beq.n	8008298 <_strtod_l+0xc0>
 80081fe:	d839      	bhi.n	8008274 <_strtod_l+0x9c>
 8008200:	290d      	cmp	r1, #13
 8008202:	d833      	bhi.n	800826c <_strtod_l+0x94>
 8008204:	2908      	cmp	r1, #8
 8008206:	d833      	bhi.n	8008270 <_strtod_l+0x98>
 8008208:	2900      	cmp	r1, #0
 800820a:	d03c      	beq.n	8008286 <_strtod_l+0xae>
 800820c:	2200      	movs	r2, #0
 800820e:	9208      	str	r2, [sp, #32]
 8008210:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008212:	7832      	ldrb	r2, [r6, #0]
 8008214:	2a30      	cmp	r2, #48	; 0x30
 8008216:	f040 80b8 	bne.w	800838a <_strtod_l+0x1b2>
 800821a:	7872      	ldrb	r2, [r6, #1]
 800821c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008220:	2a58      	cmp	r2, #88	; 0x58
 8008222:	d170      	bne.n	8008306 <_strtod_l+0x12e>
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	9b08      	ldr	r3, [sp, #32]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	ab12      	add	r3, sp, #72	; 0x48
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	4a91      	ldr	r2, [pc, #580]	; (8008474 <_strtod_l+0x29c>)
 8008230:	ab13      	add	r3, sp, #76	; 0x4c
 8008232:	a911      	add	r1, sp, #68	; 0x44
 8008234:	4620      	mov	r0, r4
 8008236:	f001 f8ff 	bl	8009438 <__gethex>
 800823a:	f010 070f 	ands.w	r7, r0, #15
 800823e:	4605      	mov	r5, r0
 8008240:	d005      	beq.n	800824e <_strtod_l+0x76>
 8008242:	2f06      	cmp	r7, #6
 8008244:	d12a      	bne.n	800829c <_strtod_l+0xc4>
 8008246:	3601      	adds	r6, #1
 8008248:	2300      	movs	r3, #0
 800824a:	9611      	str	r6, [sp, #68]	; 0x44
 800824c:	9308      	str	r3, [sp, #32]
 800824e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 8555 	bne.w	8008d00 <_strtod_l+0xb28>
 8008256:	9b08      	ldr	r3, [sp, #32]
 8008258:	ec49 8b10 	vmov	d0, r8, r9
 800825c:	b1cb      	cbz	r3, 8008292 <_strtod_l+0xba>
 800825e:	eeb1 0b40 	vneg.f64	d0, d0
 8008262:	b017      	add	sp, #92	; 0x5c
 8008264:	ecbd 8b0e 	vpop	{d8-d14}
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	2920      	cmp	r1, #32
 800826e:	d1cd      	bne.n	800820c <_strtod_l+0x34>
 8008270:	3201      	adds	r2, #1
 8008272:	e7c0      	b.n	80081f6 <_strtod_l+0x1e>
 8008274:	292d      	cmp	r1, #45	; 0x2d
 8008276:	d1c9      	bne.n	800820c <_strtod_l+0x34>
 8008278:	2101      	movs	r1, #1
 800827a:	9108      	str	r1, [sp, #32]
 800827c:	1c51      	adds	r1, r2, #1
 800827e:	9111      	str	r1, [sp, #68]	; 0x44
 8008280:	7852      	ldrb	r2, [r2, #1]
 8008282:	2a00      	cmp	r2, #0
 8008284:	d1c4      	bne.n	8008210 <_strtod_l+0x38>
 8008286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008288:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 8535 	bne.w	8008cfc <_strtod_l+0xb24>
 8008292:	ec49 8b10 	vmov	d0, r8, r9
 8008296:	e7e4      	b.n	8008262 <_strtod_l+0x8a>
 8008298:	2100      	movs	r1, #0
 800829a:	e7ee      	b.n	800827a <_strtod_l+0xa2>
 800829c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800829e:	b13a      	cbz	r2, 80082b0 <_strtod_l+0xd8>
 80082a0:	2135      	movs	r1, #53	; 0x35
 80082a2:	a814      	add	r0, sp, #80	; 0x50
 80082a4:	f7ff ff3a 	bl	800811c <__copybits>
 80082a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082aa:	4620      	mov	r0, r4
 80082ac:	f7ff fb10 	bl	80078d0 <_Bfree>
 80082b0:	1e7b      	subs	r3, r7, #1
 80082b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d806      	bhi.n	80082c6 <_strtod_l+0xee>
 80082b8:	e8df f003 	tbb	[pc, r3]
 80082bc:	201d0314 	.word	0x201d0314
 80082c0:	14          	.byte	0x14
 80082c1:	00          	.byte	0x00
 80082c2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80082c6:	05eb      	lsls	r3, r5, #23
 80082c8:	bf48      	it	mi
 80082ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80082ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082d2:	0d1b      	lsrs	r3, r3, #20
 80082d4:	051b      	lsls	r3, r3, #20
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1b9      	bne.n	800824e <_strtod_l+0x76>
 80082da:	f7fe fb8f 	bl	80069fc <__errno>
 80082de:	2322      	movs	r3, #34	; 0x22
 80082e0:	6003      	str	r3, [r0, #0]
 80082e2:	e7b4      	b.n	800824e <_strtod_l+0x76>
 80082e4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80082e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80082f4:	e7e7      	b.n	80082c6 <_strtod_l+0xee>
 80082f6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800847c <_strtod_l+0x2a4>
 80082fa:	e7e4      	b.n	80082c6 <_strtod_l+0xee>
 80082fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008300:	f04f 38ff 	mov.w	r8, #4294967295
 8008304:	e7df      	b.n	80082c6 <_strtod_l+0xee>
 8008306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	9211      	str	r2, [sp, #68]	; 0x44
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	2b30      	cmp	r3, #48	; 0x30
 8008310:	d0f9      	beq.n	8008306 <_strtod_l+0x12e>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d09b      	beq.n	800824e <_strtod_l+0x76>
 8008316:	2301      	movs	r3, #1
 8008318:	9306      	str	r3, [sp, #24]
 800831a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800831c:	9309      	str	r3, [sp, #36]	; 0x24
 800831e:	2300      	movs	r3, #0
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	9307      	str	r3, [sp, #28]
 8008324:	461e      	mov	r6, r3
 8008326:	220a      	movs	r2, #10
 8008328:	9811      	ldr	r0, [sp, #68]	; 0x44
 800832a:	7805      	ldrb	r5, [r0, #0]
 800832c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008330:	b2d9      	uxtb	r1, r3
 8008332:	2909      	cmp	r1, #9
 8008334:	d92b      	bls.n	800838e <_strtod_l+0x1b6>
 8008336:	4950      	ldr	r1, [pc, #320]	; (8008478 <_strtod_l+0x2a0>)
 8008338:	2201      	movs	r2, #1
 800833a:	f000 ffa9 	bl	8009290 <strncmp>
 800833e:	2800      	cmp	r0, #0
 8008340:	d035      	beq.n	80083ae <_strtod_l+0x1d6>
 8008342:	2000      	movs	r0, #0
 8008344:	462a      	mov	r2, r5
 8008346:	4633      	mov	r3, r6
 8008348:	4683      	mov	fp, r0
 800834a:	4601      	mov	r1, r0
 800834c:	2a65      	cmp	r2, #101	; 0x65
 800834e:	d001      	beq.n	8008354 <_strtod_l+0x17c>
 8008350:	2a45      	cmp	r2, #69	; 0x45
 8008352:	d118      	bne.n	8008386 <_strtod_l+0x1ae>
 8008354:	b91b      	cbnz	r3, 800835e <_strtod_l+0x186>
 8008356:	9b06      	ldr	r3, [sp, #24]
 8008358:	4303      	orrs	r3, r0
 800835a:	d094      	beq.n	8008286 <_strtod_l+0xae>
 800835c:	2300      	movs	r3, #0
 800835e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8008362:	f10a 0201 	add.w	r2, sl, #1
 8008366:	9211      	str	r2, [sp, #68]	; 0x44
 8008368:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800836c:	2a2b      	cmp	r2, #43	; 0x2b
 800836e:	d075      	beq.n	800845c <_strtod_l+0x284>
 8008370:	2a2d      	cmp	r2, #45	; 0x2d
 8008372:	d07b      	beq.n	800846c <_strtod_l+0x294>
 8008374:	f04f 0e00 	mov.w	lr, #0
 8008378:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800837c:	2d09      	cmp	r5, #9
 800837e:	f240 8083 	bls.w	8008488 <_strtod_l+0x2b0>
 8008382:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8008386:	2500      	movs	r5, #0
 8008388:	e09e      	b.n	80084c8 <_strtod_l+0x2f0>
 800838a:	2300      	movs	r3, #0
 800838c:	e7c4      	b.n	8008318 <_strtod_l+0x140>
 800838e:	2e08      	cmp	r6, #8
 8008390:	bfd5      	itete	le
 8008392:	9907      	ldrle	r1, [sp, #28]
 8008394:	9905      	ldrgt	r1, [sp, #20]
 8008396:	fb02 3301 	mlale	r3, r2, r1, r3
 800839a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800839e:	f100 0001 	add.w	r0, r0, #1
 80083a2:	bfd4      	ite	le
 80083a4:	9307      	strle	r3, [sp, #28]
 80083a6:	9305      	strgt	r3, [sp, #20]
 80083a8:	3601      	adds	r6, #1
 80083aa:	9011      	str	r0, [sp, #68]	; 0x44
 80083ac:	e7bc      	b.n	8008328 <_strtod_l+0x150>
 80083ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	9211      	str	r2, [sp, #68]	; 0x44
 80083b4:	785a      	ldrb	r2, [r3, #1]
 80083b6:	b3ae      	cbz	r6, 8008424 <_strtod_l+0x24c>
 80083b8:	4683      	mov	fp, r0
 80083ba:	4633      	mov	r3, r6
 80083bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80083c0:	2909      	cmp	r1, #9
 80083c2:	d912      	bls.n	80083ea <_strtod_l+0x212>
 80083c4:	2101      	movs	r1, #1
 80083c6:	e7c1      	b.n	800834c <_strtod_l+0x174>
 80083c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	9211      	str	r2, [sp, #68]	; 0x44
 80083ce:	785a      	ldrb	r2, [r3, #1]
 80083d0:	3001      	adds	r0, #1
 80083d2:	2a30      	cmp	r2, #48	; 0x30
 80083d4:	d0f8      	beq.n	80083c8 <_strtod_l+0x1f0>
 80083d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80083da:	2b08      	cmp	r3, #8
 80083dc:	f200 8495 	bhi.w	8008d0a <_strtod_l+0xb32>
 80083e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e2:	9309      	str	r3, [sp, #36]	; 0x24
 80083e4:	4683      	mov	fp, r0
 80083e6:	2000      	movs	r0, #0
 80083e8:	4603      	mov	r3, r0
 80083ea:	3a30      	subs	r2, #48	; 0x30
 80083ec:	f100 0101 	add.w	r1, r0, #1
 80083f0:	d012      	beq.n	8008418 <_strtod_l+0x240>
 80083f2:	448b      	add	fp, r1
 80083f4:	eb00 0c03 	add.w	ip, r0, r3
 80083f8:	4619      	mov	r1, r3
 80083fa:	250a      	movs	r5, #10
 80083fc:	4561      	cmp	r1, ip
 80083fe:	d113      	bne.n	8008428 <_strtod_l+0x250>
 8008400:	1819      	adds	r1, r3, r0
 8008402:	2908      	cmp	r1, #8
 8008404:	f103 0301 	add.w	r3, r3, #1
 8008408:	4403      	add	r3, r0
 800840a:	dc1b      	bgt.n	8008444 <_strtod_l+0x26c>
 800840c:	9807      	ldr	r0, [sp, #28]
 800840e:	210a      	movs	r1, #10
 8008410:	fb01 2200 	mla	r2, r1, r0, r2
 8008414:	9207      	str	r2, [sp, #28]
 8008416:	2100      	movs	r1, #0
 8008418:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800841a:	1c50      	adds	r0, r2, #1
 800841c:	9011      	str	r0, [sp, #68]	; 0x44
 800841e:	7852      	ldrb	r2, [r2, #1]
 8008420:	4608      	mov	r0, r1
 8008422:	e7cb      	b.n	80083bc <_strtod_l+0x1e4>
 8008424:	4630      	mov	r0, r6
 8008426:	e7d4      	b.n	80083d2 <_strtod_l+0x1fa>
 8008428:	2908      	cmp	r1, #8
 800842a:	f101 0101 	add.w	r1, r1, #1
 800842e:	dc03      	bgt.n	8008438 <_strtod_l+0x260>
 8008430:	9f07      	ldr	r7, [sp, #28]
 8008432:	436f      	muls	r7, r5
 8008434:	9707      	str	r7, [sp, #28]
 8008436:	e7e1      	b.n	80083fc <_strtod_l+0x224>
 8008438:	2910      	cmp	r1, #16
 800843a:	bfde      	ittt	le
 800843c:	9f05      	ldrle	r7, [sp, #20]
 800843e:	436f      	mulle	r7, r5
 8008440:	9705      	strle	r7, [sp, #20]
 8008442:	e7db      	b.n	80083fc <_strtod_l+0x224>
 8008444:	2b10      	cmp	r3, #16
 8008446:	bfdf      	itttt	le
 8008448:	9805      	ldrle	r0, [sp, #20]
 800844a:	210a      	movle	r1, #10
 800844c:	fb01 2200 	mlale	r2, r1, r0, r2
 8008450:	9205      	strle	r2, [sp, #20]
 8008452:	e7e0      	b.n	8008416 <_strtod_l+0x23e>
 8008454:	f04f 0b00 	mov.w	fp, #0
 8008458:	2101      	movs	r1, #1
 800845a:	e77c      	b.n	8008356 <_strtod_l+0x17e>
 800845c:	f04f 0e00 	mov.w	lr, #0
 8008460:	f10a 0202 	add.w	r2, sl, #2
 8008464:	9211      	str	r2, [sp, #68]	; 0x44
 8008466:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800846a:	e785      	b.n	8008378 <_strtod_l+0x1a0>
 800846c:	f04f 0e01 	mov.w	lr, #1
 8008470:	e7f6      	b.n	8008460 <_strtod_l+0x288>
 8008472:	bf00      	nop
 8008474:	0800a5c0 	.word	0x0800a5c0
 8008478:	0800a5bc 	.word	0x0800a5bc
 800847c:	7ff00000 	.word	0x7ff00000
 8008480:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008482:	1c55      	adds	r5, r2, #1
 8008484:	9511      	str	r5, [sp, #68]	; 0x44
 8008486:	7852      	ldrb	r2, [r2, #1]
 8008488:	2a30      	cmp	r2, #48	; 0x30
 800848a:	d0f9      	beq.n	8008480 <_strtod_l+0x2a8>
 800848c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008490:	2d08      	cmp	r5, #8
 8008492:	f63f af78 	bhi.w	8008386 <_strtod_l+0x1ae>
 8008496:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800849a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800849c:	920a      	str	r2, [sp, #40]	; 0x28
 800849e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084a0:	1c55      	adds	r5, r2, #1
 80084a2:	9511      	str	r5, [sp, #68]	; 0x44
 80084a4:	7852      	ldrb	r2, [r2, #1]
 80084a6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80084aa:	2f09      	cmp	r7, #9
 80084ac:	d937      	bls.n	800851e <_strtod_l+0x346>
 80084ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80084b0:	1bed      	subs	r5, r5, r7
 80084b2:	2d08      	cmp	r5, #8
 80084b4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80084b8:	dc02      	bgt.n	80084c0 <_strtod_l+0x2e8>
 80084ba:	4565      	cmp	r5, ip
 80084bc:	bfa8      	it	ge
 80084be:	4665      	movge	r5, ip
 80084c0:	f1be 0f00 	cmp.w	lr, #0
 80084c4:	d000      	beq.n	80084c8 <_strtod_l+0x2f0>
 80084c6:	426d      	negs	r5, r5
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d14d      	bne.n	8008568 <_strtod_l+0x390>
 80084cc:	9b06      	ldr	r3, [sp, #24]
 80084ce:	4303      	orrs	r3, r0
 80084d0:	f47f aebd 	bne.w	800824e <_strtod_l+0x76>
 80084d4:	2900      	cmp	r1, #0
 80084d6:	f47f aed6 	bne.w	8008286 <_strtod_l+0xae>
 80084da:	2a69      	cmp	r2, #105	; 0x69
 80084dc:	d027      	beq.n	800852e <_strtod_l+0x356>
 80084de:	dc24      	bgt.n	800852a <_strtod_l+0x352>
 80084e0:	2a49      	cmp	r2, #73	; 0x49
 80084e2:	d024      	beq.n	800852e <_strtod_l+0x356>
 80084e4:	2a4e      	cmp	r2, #78	; 0x4e
 80084e6:	f47f aece 	bne.w	8008286 <_strtod_l+0xae>
 80084ea:	4995      	ldr	r1, [pc, #596]	; (8008740 <_strtod_l+0x568>)
 80084ec:	a811      	add	r0, sp, #68	; 0x44
 80084ee:	f001 f9e3 	bl	80098b8 <__match>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f43f aec7 	beq.w	8008286 <_strtod_l+0xae>
 80084f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b28      	cmp	r3, #40	; 0x28
 80084fe:	d12d      	bne.n	800855c <_strtod_l+0x384>
 8008500:	4990      	ldr	r1, [pc, #576]	; (8008744 <_strtod_l+0x56c>)
 8008502:	aa14      	add	r2, sp, #80	; 0x50
 8008504:	a811      	add	r0, sp, #68	; 0x44
 8008506:	f001 f9eb 	bl	80098e0 <__hexnan>
 800850a:	2805      	cmp	r0, #5
 800850c:	d126      	bne.n	800855c <_strtod_l+0x384>
 800850e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008510:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008514:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008518:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800851c:	e697      	b.n	800824e <_strtod_l+0x76>
 800851e:	250a      	movs	r5, #10
 8008520:	fb05 2c0c 	mla	ip, r5, ip, r2
 8008524:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008528:	e7b9      	b.n	800849e <_strtod_l+0x2c6>
 800852a:	2a6e      	cmp	r2, #110	; 0x6e
 800852c:	e7db      	b.n	80084e6 <_strtod_l+0x30e>
 800852e:	4986      	ldr	r1, [pc, #536]	; (8008748 <_strtod_l+0x570>)
 8008530:	a811      	add	r0, sp, #68	; 0x44
 8008532:	f001 f9c1 	bl	80098b8 <__match>
 8008536:	2800      	cmp	r0, #0
 8008538:	f43f aea5 	beq.w	8008286 <_strtod_l+0xae>
 800853c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800853e:	4983      	ldr	r1, [pc, #524]	; (800874c <_strtod_l+0x574>)
 8008540:	3b01      	subs	r3, #1
 8008542:	a811      	add	r0, sp, #68	; 0x44
 8008544:	9311      	str	r3, [sp, #68]	; 0x44
 8008546:	f001 f9b7 	bl	80098b8 <__match>
 800854a:	b910      	cbnz	r0, 8008552 <_strtod_l+0x37a>
 800854c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800854e:	3301      	adds	r3, #1
 8008550:	9311      	str	r3, [sp, #68]	; 0x44
 8008552:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8008760 <_strtod_l+0x588>
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	e678      	b.n	800824e <_strtod_l+0x76>
 800855c:	487c      	ldr	r0, [pc, #496]	; (8008750 <_strtod_l+0x578>)
 800855e:	f000 fec7 	bl	80092f0 <nan>
 8008562:	ec59 8b10 	vmov	r8, r9, d0
 8008566:	e672      	b.n	800824e <_strtod_l+0x76>
 8008568:	eddd 7a07 	vldr	s15, [sp, #28]
 800856c:	eba5 020b 	sub.w	r2, r5, fp
 8008570:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008574:	2e00      	cmp	r6, #0
 8008576:	bf08      	it	eq
 8008578:	461e      	moveq	r6, r3
 800857a:	2b10      	cmp	r3, #16
 800857c:	9206      	str	r2, [sp, #24]
 800857e:	461a      	mov	r2, r3
 8008580:	bfa8      	it	ge
 8008582:	2210      	movge	r2, #16
 8008584:	2b09      	cmp	r3, #9
 8008586:	ec59 8b17 	vmov	r8, r9, d7
 800858a:	dd0c      	ble.n	80085a6 <_strtod_l+0x3ce>
 800858c:	4971      	ldr	r1, [pc, #452]	; (8008754 <_strtod_l+0x57c>)
 800858e:	eddd 6a05 	vldr	s13, [sp, #20]
 8008592:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008596:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800859a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800859e:	eea7 6b05 	vfma.f64	d6, d7, d5
 80085a2:	ec59 8b16 	vmov	r8, r9, d6
 80085a6:	2b0f      	cmp	r3, #15
 80085a8:	dc37      	bgt.n	800861a <_strtod_l+0x442>
 80085aa:	9906      	ldr	r1, [sp, #24]
 80085ac:	2900      	cmp	r1, #0
 80085ae:	f43f ae4e 	beq.w	800824e <_strtod_l+0x76>
 80085b2:	dd23      	ble.n	80085fc <_strtod_l+0x424>
 80085b4:	2916      	cmp	r1, #22
 80085b6:	dc0b      	bgt.n	80085d0 <_strtod_l+0x3f8>
 80085b8:	4b66      	ldr	r3, [pc, #408]	; (8008754 <_strtod_l+0x57c>)
 80085ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80085be:	ed93 7b00 	vldr	d7, [r3]
 80085c2:	ec49 8b16 	vmov	d6, r8, r9
 80085c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085ca:	ec59 8b17 	vmov	r8, r9, d7
 80085ce:	e63e      	b.n	800824e <_strtod_l+0x76>
 80085d0:	9806      	ldr	r0, [sp, #24]
 80085d2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80085d6:	4281      	cmp	r1, r0
 80085d8:	db1f      	blt.n	800861a <_strtod_l+0x442>
 80085da:	4a5e      	ldr	r2, [pc, #376]	; (8008754 <_strtod_l+0x57c>)
 80085dc:	f1c3 030f 	rsb	r3, r3, #15
 80085e0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80085e4:	ed91 7b00 	vldr	d7, [r1]
 80085e8:	ec49 8b16 	vmov	d6, r8, r9
 80085ec:	1ac3      	subs	r3, r0, r3
 80085ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80085f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085f6:	ed92 6b00 	vldr	d6, [r2]
 80085fa:	e7e4      	b.n	80085c6 <_strtod_l+0x3ee>
 80085fc:	9906      	ldr	r1, [sp, #24]
 80085fe:	3116      	adds	r1, #22
 8008600:	db0b      	blt.n	800861a <_strtod_l+0x442>
 8008602:	4b54      	ldr	r3, [pc, #336]	; (8008754 <_strtod_l+0x57c>)
 8008604:	ebab 0505 	sub.w	r5, fp, r5
 8008608:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800860c:	ed95 7b00 	vldr	d7, [r5]
 8008610:	ec49 8b16 	vmov	d6, r8, r9
 8008614:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008618:	e7d7      	b.n	80085ca <_strtod_l+0x3f2>
 800861a:	9906      	ldr	r1, [sp, #24]
 800861c:	1a9a      	subs	r2, r3, r2
 800861e:	440a      	add	r2, r1
 8008620:	2a00      	cmp	r2, #0
 8008622:	dd6e      	ble.n	8008702 <_strtod_l+0x52a>
 8008624:	f012 000f 	ands.w	r0, r2, #15
 8008628:	d00a      	beq.n	8008640 <_strtod_l+0x468>
 800862a:	494a      	ldr	r1, [pc, #296]	; (8008754 <_strtod_l+0x57c>)
 800862c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008630:	ed91 7b00 	vldr	d7, [r1]
 8008634:	ec49 8b16 	vmov	d6, r8, r9
 8008638:	ee27 7b06 	vmul.f64	d7, d7, d6
 800863c:	ec59 8b17 	vmov	r8, r9, d7
 8008640:	f032 020f 	bics.w	r2, r2, #15
 8008644:	d04e      	beq.n	80086e4 <_strtod_l+0x50c>
 8008646:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800864a:	dd22      	ble.n	8008692 <_strtod_l+0x4ba>
 800864c:	2500      	movs	r5, #0
 800864e:	462e      	mov	r6, r5
 8008650:	9507      	str	r5, [sp, #28]
 8008652:	462f      	mov	r7, r5
 8008654:	2322      	movs	r3, #34	; 0x22
 8008656:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008760 <_strtod_l+0x588>
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	f04f 0800 	mov.w	r8, #0
 8008660:	9b07      	ldr	r3, [sp, #28]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f43f adf3 	beq.w	800824e <_strtod_l+0x76>
 8008668:	9912      	ldr	r1, [sp, #72]	; 0x48
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff f930 	bl	80078d0 <_Bfree>
 8008670:	4639      	mov	r1, r7
 8008672:	4620      	mov	r0, r4
 8008674:	f7ff f92c 	bl	80078d0 <_Bfree>
 8008678:	4631      	mov	r1, r6
 800867a:	4620      	mov	r0, r4
 800867c:	f7ff f928 	bl	80078d0 <_Bfree>
 8008680:	9907      	ldr	r1, [sp, #28]
 8008682:	4620      	mov	r0, r4
 8008684:	f7ff f924 	bl	80078d0 <_Bfree>
 8008688:	4629      	mov	r1, r5
 800868a:	4620      	mov	r0, r4
 800868c:	f7ff f920 	bl	80078d0 <_Bfree>
 8008690:	e5dd      	b.n	800824e <_strtod_l+0x76>
 8008692:	2000      	movs	r0, #0
 8008694:	ec49 8b17 	vmov	d7, r8, r9
 8008698:	4f2f      	ldr	r7, [pc, #188]	; (8008758 <_strtod_l+0x580>)
 800869a:	1112      	asrs	r2, r2, #4
 800869c:	4601      	mov	r1, r0
 800869e:	2a01      	cmp	r2, #1
 80086a0:	dc23      	bgt.n	80086ea <_strtod_l+0x512>
 80086a2:	b108      	cbz	r0, 80086a8 <_strtod_l+0x4d0>
 80086a4:	ec59 8b17 	vmov	r8, r9, d7
 80086a8:	4a2b      	ldr	r2, [pc, #172]	; (8008758 <_strtod_l+0x580>)
 80086aa:	482c      	ldr	r0, [pc, #176]	; (800875c <_strtod_l+0x584>)
 80086ac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80086b0:	ed92 7b00 	vldr	d7, [r2]
 80086b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80086b8:	ec49 8b16 	vmov	d6, r8, r9
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <_strtod_l+0x588>)
 80086be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086c2:	ee17 1a90 	vmov	r1, s15
 80086c6:	400a      	ands	r2, r1
 80086c8:	4282      	cmp	r2, r0
 80086ca:	ec59 8b17 	vmov	r8, r9, d7
 80086ce:	d8bd      	bhi.n	800864c <_strtod_l+0x474>
 80086d0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80086d4:	4282      	cmp	r2, r0
 80086d6:	bf86      	itte	hi
 80086d8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8008764 <_strtod_l+0x58c>
 80086dc:	f04f 38ff 	movhi.w	r8, #4294967295
 80086e0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80086e4:	2200      	movs	r2, #0
 80086e6:	9205      	str	r2, [sp, #20]
 80086e8:	e076      	b.n	80087d8 <_strtod_l+0x600>
 80086ea:	f012 0f01 	tst.w	r2, #1
 80086ee:	d004      	beq.n	80086fa <_strtod_l+0x522>
 80086f0:	ed97 6b00 	vldr	d6, [r7]
 80086f4:	2001      	movs	r0, #1
 80086f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086fa:	3101      	adds	r1, #1
 80086fc:	1052      	asrs	r2, r2, #1
 80086fe:	3708      	adds	r7, #8
 8008700:	e7cd      	b.n	800869e <_strtod_l+0x4c6>
 8008702:	d0ef      	beq.n	80086e4 <_strtod_l+0x50c>
 8008704:	4252      	negs	r2, r2
 8008706:	f012 000f 	ands.w	r0, r2, #15
 800870a:	d00a      	beq.n	8008722 <_strtod_l+0x54a>
 800870c:	4911      	ldr	r1, [pc, #68]	; (8008754 <_strtod_l+0x57c>)
 800870e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008712:	ed91 7b00 	vldr	d7, [r1]
 8008716:	ec49 8b16 	vmov	d6, r8, r9
 800871a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800871e:	ec59 8b17 	vmov	r8, r9, d7
 8008722:	1112      	asrs	r2, r2, #4
 8008724:	d0de      	beq.n	80086e4 <_strtod_l+0x50c>
 8008726:	2a1f      	cmp	r2, #31
 8008728:	dd1e      	ble.n	8008768 <_strtod_l+0x590>
 800872a:	2500      	movs	r5, #0
 800872c:	462e      	mov	r6, r5
 800872e:	9507      	str	r5, [sp, #28]
 8008730:	462f      	mov	r7, r5
 8008732:	2322      	movs	r3, #34	; 0x22
 8008734:	f04f 0800 	mov.w	r8, #0
 8008738:	f04f 0900 	mov.w	r9, #0
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	e78f      	b.n	8008660 <_strtod_l+0x488>
 8008740:	0800a3ad 	.word	0x0800a3ad
 8008744:	0800a5d4 	.word	0x0800a5d4
 8008748:	0800a3a5 	.word	0x0800a3a5
 800874c:	0800a3dc 	.word	0x0800a3dc
 8008750:	0800a765 	.word	0x0800a765
 8008754:	0800a4e8 	.word	0x0800a4e8
 8008758:	0800a4c0 	.word	0x0800a4c0
 800875c:	7ca00000 	.word	0x7ca00000
 8008760:	7ff00000 	.word	0x7ff00000
 8008764:	7fefffff 	.word	0x7fefffff
 8008768:	f012 0110 	ands.w	r1, r2, #16
 800876c:	bf18      	it	ne
 800876e:	216a      	movne	r1, #106	; 0x6a
 8008770:	9105      	str	r1, [sp, #20]
 8008772:	ec49 8b17 	vmov	d7, r8, r9
 8008776:	49be      	ldr	r1, [pc, #760]	; (8008a70 <_strtod_l+0x898>)
 8008778:	2000      	movs	r0, #0
 800877a:	07d7      	lsls	r7, r2, #31
 800877c:	d504      	bpl.n	8008788 <_strtod_l+0x5b0>
 800877e:	ed91 6b00 	vldr	d6, [r1]
 8008782:	2001      	movs	r0, #1
 8008784:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008788:	1052      	asrs	r2, r2, #1
 800878a:	f101 0108 	add.w	r1, r1, #8
 800878e:	d1f4      	bne.n	800877a <_strtod_l+0x5a2>
 8008790:	b108      	cbz	r0, 8008796 <_strtod_l+0x5be>
 8008792:	ec59 8b17 	vmov	r8, r9, d7
 8008796:	9a05      	ldr	r2, [sp, #20]
 8008798:	b1ba      	cbz	r2, 80087ca <_strtod_l+0x5f2>
 800879a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800879e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	4648      	mov	r0, r9
 80087a6:	dd10      	ble.n	80087ca <_strtod_l+0x5f2>
 80087a8:	2a1f      	cmp	r2, #31
 80087aa:	f340 812c 	ble.w	8008a06 <_strtod_l+0x82e>
 80087ae:	2a34      	cmp	r2, #52	; 0x34
 80087b0:	bfde      	ittt	le
 80087b2:	f04f 32ff 	movle.w	r2, #4294967295
 80087b6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80087ba:	408a      	lslle	r2, r1
 80087bc:	f04f 0800 	mov.w	r8, #0
 80087c0:	bfcc      	ite	gt
 80087c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80087c6:	ea02 0900 	andle.w	r9, r2, r0
 80087ca:	ec49 8b17 	vmov	d7, r8, r9
 80087ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d6:	d0a8      	beq.n	800872a <_strtod_l+0x552>
 80087d8:	9a07      	ldr	r2, [sp, #28]
 80087da:	9200      	str	r2, [sp, #0]
 80087dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087de:	4632      	mov	r2, r6
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff f8dd 	bl	80079a0 <__s2b>
 80087e6:	9007      	str	r0, [sp, #28]
 80087e8:	2800      	cmp	r0, #0
 80087ea:	f43f af2f 	beq.w	800864c <_strtod_l+0x474>
 80087ee:	9a06      	ldr	r2, [sp, #24]
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	ebab 0305 	sub.w	r3, fp, r5
 80087f6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8008a50 <_strtod_l+0x878>
 80087fa:	bfa8      	it	ge
 80087fc:	2300      	movge	r3, #0
 80087fe:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008a58 <_strtod_l+0x880>
 8008802:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008a60 <_strtod_l+0x888>
 8008806:	9309      	str	r3, [sp, #36]	; 0x24
 8008808:	2500      	movs	r5, #0
 800880a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800880e:	930c      	str	r3, [sp, #48]	; 0x30
 8008810:	462e      	mov	r6, r5
 8008812:	9b07      	ldr	r3, [sp, #28]
 8008814:	4620      	mov	r0, r4
 8008816:	6859      	ldr	r1, [r3, #4]
 8008818:	f7ff f81a 	bl	8007850 <_Balloc>
 800881c:	4607      	mov	r7, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f af18 	beq.w	8008654 <_strtod_l+0x47c>
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	3202      	adds	r2, #2
 800882a:	f103 010c 	add.w	r1, r3, #12
 800882e:	0092      	lsls	r2, r2, #2
 8008830:	300c      	adds	r0, #12
 8008832:	f000 fd4f 	bl	80092d4 <memcpy>
 8008836:	ec49 8b10 	vmov	d0, r8, r9
 800883a:	aa14      	add	r2, sp, #80	; 0x50
 800883c:	a913      	add	r1, sp, #76	; 0x4c
 800883e:	4620      	mov	r0, r4
 8008840:	f7ff fbe2 	bl	8008008 <__d2b>
 8008844:	ec49 8b18 	vmov	d8, r8, r9
 8008848:	9012      	str	r0, [sp, #72]	; 0x48
 800884a:	2800      	cmp	r0, #0
 800884c:	f43f af02 	beq.w	8008654 <_strtod_l+0x47c>
 8008850:	2101      	movs	r1, #1
 8008852:	4620      	mov	r0, r4
 8008854:	f7ff f93c 	bl	8007ad0 <__i2b>
 8008858:	4606      	mov	r6, r0
 800885a:	2800      	cmp	r0, #0
 800885c:	f43f aefa 	beq.w	8008654 <_strtod_l+0x47c>
 8008860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008862:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008864:	2b00      	cmp	r3, #0
 8008866:	bfab      	itete	ge
 8008868:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800886a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800886c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008870:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008874:	bfac      	ite	ge
 8008876:	eb03 0b02 	addge.w	fp, r3, r2
 800887a:	eba2 0a03 	sublt.w	sl, r2, r3
 800887e:	9a05      	ldr	r2, [sp, #20]
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	440b      	add	r3, r1
 8008884:	4a7b      	ldr	r2, [pc, #492]	; (8008a74 <_strtod_l+0x89c>)
 8008886:	3b01      	subs	r3, #1
 8008888:	4293      	cmp	r3, r2
 800888a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800888e:	f280 80cd 	bge.w	8008a2c <_strtod_l+0x854>
 8008892:	1ad2      	subs	r2, r2, r3
 8008894:	2a1f      	cmp	r2, #31
 8008896:	eba1 0102 	sub.w	r1, r1, r2
 800889a:	f04f 0001 	mov.w	r0, #1
 800889e:	f300 80b9 	bgt.w	8008a14 <_strtod_l+0x83c>
 80088a2:	fa00 f302 	lsl.w	r3, r0, r2
 80088a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a8:	2300      	movs	r3, #0
 80088aa:	930a      	str	r3, [sp, #40]	; 0x28
 80088ac:	eb0b 0301 	add.w	r3, fp, r1
 80088b0:	9a05      	ldr	r2, [sp, #20]
 80088b2:	459b      	cmp	fp, r3
 80088b4:	448a      	add	sl, r1
 80088b6:	4492      	add	sl, r2
 80088b8:	465a      	mov	r2, fp
 80088ba:	bfa8      	it	ge
 80088bc:	461a      	movge	r2, r3
 80088be:	4552      	cmp	r2, sl
 80088c0:	bfa8      	it	ge
 80088c2:	4652      	movge	r2, sl
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	bfc2      	ittt	gt
 80088c8:	1a9b      	subgt	r3, r3, r2
 80088ca:	ebaa 0a02 	subgt.w	sl, sl, r2
 80088ce:	ebab 0b02 	subgt.w	fp, fp, r2
 80088d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	dd18      	ble.n	800890a <_strtod_l+0x732>
 80088d8:	4631      	mov	r1, r6
 80088da:	4620      	mov	r0, r4
 80088dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80088de:	f7ff f9b7 	bl	8007c50 <__pow5mult>
 80088e2:	4606      	mov	r6, r0
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f43f aeb5 	beq.w	8008654 <_strtod_l+0x47c>
 80088ea:	4601      	mov	r1, r0
 80088ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7ff f904 	bl	8007afc <__multiply>
 80088f4:	900e      	str	r0, [sp, #56]	; 0x38
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f aeac 	beq.w	8008654 <_strtod_l+0x47c>
 80088fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80088fe:	4620      	mov	r0, r4
 8008900:	f7fe ffe6 	bl	80078d0 <_Bfree>
 8008904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008908:	9212      	str	r2, [sp, #72]	; 0x48
 800890a:	2b00      	cmp	r3, #0
 800890c:	f300 8093 	bgt.w	8008a36 <_strtod_l+0x85e>
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd08      	ble.n	8008928 <_strtod_l+0x750>
 8008916:	4639      	mov	r1, r7
 8008918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800891a:	4620      	mov	r0, r4
 800891c:	f7ff f998 	bl	8007c50 <__pow5mult>
 8008920:	4607      	mov	r7, r0
 8008922:	2800      	cmp	r0, #0
 8008924:	f43f ae96 	beq.w	8008654 <_strtod_l+0x47c>
 8008928:	f1ba 0f00 	cmp.w	sl, #0
 800892c:	dd08      	ble.n	8008940 <_strtod_l+0x768>
 800892e:	4639      	mov	r1, r7
 8008930:	4652      	mov	r2, sl
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff f9e6 	bl	8007d04 <__lshift>
 8008938:	4607      	mov	r7, r0
 800893a:	2800      	cmp	r0, #0
 800893c:	f43f ae8a 	beq.w	8008654 <_strtod_l+0x47c>
 8008940:	f1bb 0f00 	cmp.w	fp, #0
 8008944:	dd08      	ble.n	8008958 <_strtod_l+0x780>
 8008946:	4631      	mov	r1, r6
 8008948:	465a      	mov	r2, fp
 800894a:	4620      	mov	r0, r4
 800894c:	f7ff f9da 	bl	8007d04 <__lshift>
 8008950:	4606      	mov	r6, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	f43f ae7e 	beq.w	8008654 <_strtod_l+0x47c>
 8008958:	9912      	ldr	r1, [sp, #72]	; 0x48
 800895a:	463a      	mov	r2, r7
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff fa59 	bl	8007e14 <__mdiff>
 8008962:	4605      	mov	r5, r0
 8008964:	2800      	cmp	r0, #0
 8008966:	f43f ae75 	beq.w	8008654 <_strtod_l+0x47c>
 800896a:	2300      	movs	r3, #0
 800896c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008970:	60c3      	str	r3, [r0, #12]
 8008972:	4631      	mov	r1, r6
 8008974:	f7ff fa32 	bl	8007ddc <__mcmp>
 8008978:	2800      	cmp	r0, #0
 800897a:	da7f      	bge.n	8008a7c <_strtod_l+0x8a4>
 800897c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8008980:	f040 80a5 	bne.w	8008ace <_strtod_l+0x8f6>
 8008984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008988:	2b00      	cmp	r3, #0
 800898a:	f040 80a0 	bne.w	8008ace <_strtod_l+0x8f6>
 800898e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008992:	0d1b      	lsrs	r3, r3, #20
 8008994:	051b      	lsls	r3, r3, #20
 8008996:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800899a:	f240 8098 	bls.w	8008ace <_strtod_l+0x8f6>
 800899e:	696b      	ldr	r3, [r5, #20]
 80089a0:	b91b      	cbnz	r3, 80089aa <_strtod_l+0x7d2>
 80089a2:	692b      	ldr	r3, [r5, #16]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	f340 8092 	ble.w	8008ace <_strtod_l+0x8f6>
 80089aa:	4629      	mov	r1, r5
 80089ac:	2201      	movs	r2, #1
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7ff f9a8 	bl	8007d04 <__lshift>
 80089b4:	4631      	mov	r1, r6
 80089b6:	4605      	mov	r5, r0
 80089b8:	f7ff fa10 	bl	8007ddc <__mcmp>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f340 8086 	ble.w	8008ace <_strtod_l+0x8f6>
 80089c2:	9905      	ldr	r1, [sp, #20]
 80089c4:	4a2c      	ldr	r2, [pc, #176]	; (8008a78 <_strtod_l+0x8a0>)
 80089c6:	464b      	mov	r3, r9
 80089c8:	2900      	cmp	r1, #0
 80089ca:	f000 809f 	beq.w	8008b0c <_strtod_l+0x934>
 80089ce:	ea02 0109 	and.w	r1, r2, r9
 80089d2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089d6:	f300 8099 	bgt.w	8008b0c <_strtod_l+0x934>
 80089da:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089de:	f77f aea8 	ble.w	8008732 <_strtod_l+0x55a>
 80089e2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008a68 <_strtod_l+0x890>
 80089e6:	ec49 8b16 	vmov	d6, r8, r9
 80089ea:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <_strtod_l+0x8a0>)
 80089ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80089f0:	ee17 2a90 	vmov	r2, s15
 80089f4:	4013      	ands	r3, r2
 80089f6:	ec59 8b17 	vmov	r8, r9, d7
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f47f ae34 	bne.w	8008668 <_strtod_l+0x490>
 8008a00:	2322      	movs	r3, #34	; 0x22
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	e630      	b.n	8008668 <_strtod_l+0x490>
 8008a06:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a0e:	ea02 0808 	and.w	r8, r2, r8
 8008a12:	e6da      	b.n	80087ca <_strtod_l+0x5f2>
 8008a14:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008a18:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008a1c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008a20:	33e2      	adds	r3, #226	; 0xe2
 8008a22:	fa00 f303 	lsl.w	r3, r0, r3
 8008a26:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008a2a:	e73f      	b.n	80088ac <_strtod_l+0x6d4>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a34:	e73a      	b.n	80088ac <_strtod_l+0x6d4>
 8008a36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff f962 	bl	8007d04 <__lshift>
 8008a40:	9012      	str	r0, [sp, #72]	; 0x48
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f47f af64 	bne.w	8008910 <_strtod_l+0x738>
 8008a48:	e604      	b.n	8008654 <_strtod_l+0x47c>
 8008a4a:	bf00      	nop
 8008a4c:	f3af 8000 	nop.w
 8008a50:	94a03595 	.word	0x94a03595
 8008a54:	3fcfffff 	.word	0x3fcfffff
 8008a58:	94a03595 	.word	0x94a03595
 8008a5c:	3fdfffff 	.word	0x3fdfffff
 8008a60:	35afe535 	.word	0x35afe535
 8008a64:	3fe00000 	.word	0x3fe00000
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	39500000 	.word	0x39500000
 8008a70:	0800a5e8 	.word	0x0800a5e8
 8008a74:	fffffc02 	.word	0xfffffc02
 8008a78:	7ff00000 	.word	0x7ff00000
 8008a7c:	46cb      	mov	fp, r9
 8008a7e:	d15f      	bne.n	8008b40 <_strtod_l+0x968>
 8008a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a84:	f1ba 0f00 	cmp.w	sl, #0
 8008a88:	d02a      	beq.n	8008ae0 <_strtod_l+0x908>
 8008a8a:	4aa7      	ldr	r2, [pc, #668]	; (8008d28 <_strtod_l+0xb50>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d12b      	bne.n	8008ae8 <_strtod_l+0x910>
 8008a90:	9b05      	ldr	r3, [sp, #20]
 8008a92:	4642      	mov	r2, r8
 8008a94:	b1fb      	cbz	r3, 8008ad6 <_strtod_l+0x8fe>
 8008a96:	4ba5      	ldr	r3, [pc, #660]	; (8008d2c <_strtod_l+0xb54>)
 8008a98:	ea09 0303 	and.w	r3, r9, r3
 8008a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8008aa4:	d81a      	bhi.n	8008adc <_strtod_l+0x904>
 8008aa6:	0d1b      	lsrs	r3, r3, #20
 8008aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008aac:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d119      	bne.n	8008ae8 <_strtod_l+0x910>
 8008ab4:	4b9e      	ldr	r3, [pc, #632]	; (8008d30 <_strtod_l+0xb58>)
 8008ab6:	459b      	cmp	fp, r3
 8008ab8:	d102      	bne.n	8008ac0 <_strtod_l+0x8e8>
 8008aba:	3201      	adds	r2, #1
 8008abc:	f43f adca 	beq.w	8008654 <_strtod_l+0x47c>
 8008ac0:	4b9a      	ldr	r3, [pc, #616]	; (8008d2c <_strtod_l+0xb54>)
 8008ac2:	ea0b 0303 	and.w	r3, fp, r3
 8008ac6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008aca:	f04f 0800 	mov.w	r8, #0
 8008ace:	9b05      	ldr	r3, [sp, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d186      	bne.n	80089e2 <_strtod_l+0x80a>
 8008ad4:	e5c8      	b.n	8008668 <_strtod_l+0x490>
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	e7e9      	b.n	8008ab0 <_strtod_l+0x8d8>
 8008adc:	460b      	mov	r3, r1
 8008ade:	e7e7      	b.n	8008ab0 <_strtod_l+0x8d8>
 8008ae0:	ea53 0308 	orrs.w	r3, r3, r8
 8008ae4:	f43f af6d 	beq.w	80089c2 <_strtod_l+0x7ea>
 8008ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aea:	b1cb      	cbz	r3, 8008b20 <_strtod_l+0x948>
 8008aec:	ea13 0f0b 	tst.w	r3, fp
 8008af0:	d0ed      	beq.n	8008ace <_strtod_l+0x8f6>
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	4640      	mov	r0, r8
 8008af6:	4649      	mov	r1, r9
 8008af8:	f1ba 0f00 	cmp.w	sl, #0
 8008afc:	d014      	beq.n	8008b28 <_strtod_l+0x950>
 8008afe:	f7ff fb51 	bl	80081a4 <sulp>
 8008b02:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008b06:	ec59 8b17 	vmov	r8, r9, d7
 8008b0a:	e7e0      	b.n	8008ace <_strtod_l+0x8f6>
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008b1a:	f04f 38ff 	mov.w	r8, #4294967295
 8008b1e:	e7d6      	b.n	8008ace <_strtod_l+0x8f6>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	ea13 0f08 	tst.w	r3, r8
 8008b26:	e7e3      	b.n	8008af0 <_strtod_l+0x918>
 8008b28:	f7ff fb3c 	bl	80081a4 <sulp>
 8008b2c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008b30:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b38:	ec59 8b10 	vmov	r8, r9, d0
 8008b3c:	d1c7      	bne.n	8008ace <_strtod_l+0x8f6>
 8008b3e:	e5f8      	b.n	8008732 <_strtod_l+0x55a>
 8008b40:	4631      	mov	r1, r6
 8008b42:	4628      	mov	r0, r5
 8008b44:	f7ff faba 	bl	80080bc <__ratio>
 8008b48:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008b4c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b54:	d85f      	bhi.n	8008c16 <_strtod_l+0xa3e>
 8008b56:	f1ba 0f00 	cmp.w	sl, #0
 8008b5a:	d166      	bne.n	8008c2a <_strtod_l+0xa52>
 8008b5c:	f1b8 0f00 	cmp.w	r8, #0
 8008b60:	d14d      	bne.n	8008bfe <_strtod_l+0xa26>
 8008b62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b66:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d162      	bne.n	8008c34 <_strtod_l+0xa5c>
 8008b6e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8008b72:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7a:	d401      	bmi.n	8008b80 <_strtod_l+0x9a8>
 8008b7c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008b80:	eeb1 cb4d 	vneg.f64	d12, d13
 8008b84:	4869      	ldr	r0, [pc, #420]	; (8008d2c <_strtod_l+0xb54>)
 8008b86:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8008d38 <_strtod_l+0xb60>
 8008b8a:	ea0b 0100 	and.w	r1, fp, r0
 8008b8e:	4561      	cmp	r1, ip
 8008b90:	ec53 2b1c 	vmov	r2, r3, d12
 8008b94:	d17a      	bne.n	8008c8c <_strtod_l+0xab4>
 8008b96:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008b9a:	ec49 8b10 	vmov	d0, r8, r9
 8008b9e:	910a      	str	r1, [sp, #40]	; 0x28
 8008ba0:	f7ff f9c2 	bl	8007f28 <__ulp>
 8008ba4:	ec49 8b1e 	vmov	d14, r8, r9
 8008ba8:	4860      	ldr	r0, [pc, #384]	; (8008d2c <_strtod_l+0xb54>)
 8008baa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8008bae:	ee1e 3a90 	vmov	r3, s29
 8008bb2:	4a60      	ldr	r2, [pc, #384]	; (8008d34 <_strtod_l+0xb5c>)
 8008bb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bb6:	4018      	ands	r0, r3
 8008bb8:	4290      	cmp	r0, r2
 8008bba:	ec59 8b1e 	vmov	r8, r9, d14
 8008bbe:	d93c      	bls.n	8008c3a <_strtod_l+0xa62>
 8008bc0:	ee18 2a90 	vmov	r2, s17
 8008bc4:	4b5a      	ldr	r3, [pc, #360]	; (8008d30 <_strtod_l+0xb58>)
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d104      	bne.n	8008bd4 <_strtod_l+0x9fc>
 8008bca:	ee18 3a10 	vmov	r3, s16
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f43f ad40 	beq.w	8008654 <_strtod_l+0x47c>
 8008bd4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8008d30 <_strtod_l+0xb58>
 8008bd8:	f04f 38ff 	mov.w	r8, #4294967295
 8008bdc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7fe fe76 	bl	80078d0 <_Bfree>
 8008be4:	4639      	mov	r1, r7
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7fe fe72 	bl	80078d0 <_Bfree>
 8008bec:	4631      	mov	r1, r6
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f7fe fe6e 	bl	80078d0 <_Bfree>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7fe fe6a 	bl	80078d0 <_Bfree>
 8008bfc:	e609      	b.n	8008812 <_strtod_l+0x63a>
 8008bfe:	f1b8 0f01 	cmp.w	r8, #1
 8008c02:	d103      	bne.n	8008c0c <_strtod_l+0xa34>
 8008c04:	f1b9 0f00 	cmp.w	r9, #0
 8008c08:	f43f ad93 	beq.w	8008732 <_strtod_l+0x55a>
 8008c0c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8008c10:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008c14:	e7b6      	b.n	8008b84 <_strtod_l+0x9ac>
 8008c16:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008c1a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008c1e:	f1ba 0f00 	cmp.w	sl, #0
 8008c22:	d0ad      	beq.n	8008b80 <_strtod_l+0x9a8>
 8008c24:	eeb0 cb4d 	vmov.f64	d12, d13
 8008c28:	e7ac      	b.n	8008b84 <_strtod_l+0x9ac>
 8008c2a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8008c2e:	eeb0 db4c 	vmov.f64	d13, d12
 8008c32:	e7a7      	b.n	8008b84 <_strtod_l+0x9ac>
 8008c34:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8008c38:	e7a4      	b.n	8008b84 <_strtod_l+0x9ac>
 8008c3a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008c3e:	9b05      	ldr	r3, [sp, #20]
 8008c40:	46cb      	mov	fp, r9
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1ca      	bne.n	8008bdc <_strtod_l+0xa04>
 8008c46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c4a:	0d1b      	lsrs	r3, r3, #20
 8008c4c:	051b      	lsls	r3, r3, #20
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	d1c4      	bne.n	8008bdc <_strtod_l+0xa04>
 8008c52:	ec51 0b1d 	vmov	r0, r1, d13
 8008c56:	f7f7 fd1f 	bl	8000698 <__aeabi_d2lz>
 8008c5a:	f7f7 fcd7 	bl	800060c <__aeabi_l2d>
 8008c5e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8008c62:	ec41 0b17 	vmov	d7, r0, r1
 8008c66:	ea4b 0b08 	orr.w	fp, fp, r8
 8008c6a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8008c6e:	ee3d db47 	vsub.f64	d13, d13, d7
 8008c72:	d03c      	beq.n	8008cee <_strtod_l+0xb16>
 8008c74:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7c:	f53f acf4 	bmi.w	8008668 <_strtod_l+0x490>
 8008c80:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c88:	dda8      	ble.n	8008bdc <_strtod_l+0xa04>
 8008c8a:	e4ed      	b.n	8008668 <_strtod_l+0x490>
 8008c8c:	9805      	ldr	r0, [sp, #20]
 8008c8e:	b1f0      	cbz	r0, 8008cce <_strtod_l+0xaf6>
 8008c90:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008c94:	d81b      	bhi.n	8008cce <_strtod_l+0xaf6>
 8008c96:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8008d20 <_strtod_l+0xb48>
 8008c9a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca2:	d811      	bhi.n	8008cc8 <_strtod_l+0xaf0>
 8008ca4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008ca8:	ee1d 3a10 	vmov	r3, s26
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	bf38      	it	cc
 8008cb0:	2301      	movcc	r3, #1
 8008cb2:	ee0d 3a10 	vmov	s26, r3
 8008cb6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008cba:	f1ba 0f00 	cmp.w	sl, #0
 8008cbe:	d113      	bne.n	8008ce8 <_strtod_l+0xb10>
 8008cc0:	eeb1 7b4d 	vneg.f64	d7, d13
 8008cc4:	ec53 2b17 	vmov	r2, r3, d7
 8008cc8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008ccc:	1a43      	subs	r3, r0, r1
 8008cce:	eeb0 0b48 	vmov.f64	d0, d8
 8008cd2:	ec43 2b1c 	vmov	d12, r2, r3
 8008cd6:	910a      	str	r1, [sp, #40]	; 0x28
 8008cd8:	f7ff f926 	bl	8007f28 <__ulp>
 8008cdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cde:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008ce2:	ec59 8b18 	vmov	r8, r9, d8
 8008ce6:	e7aa      	b.n	8008c3e <_strtod_l+0xa66>
 8008ce8:	eeb0 7b4d 	vmov.f64	d7, d13
 8008cec:	e7ea      	b.n	8008cc4 <_strtod_l+0xaec>
 8008cee:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf6:	f57f af71 	bpl.w	8008bdc <_strtod_l+0xa04>
 8008cfa:	e4b5      	b.n	8008668 <_strtod_l+0x490>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9308      	str	r3, [sp, #32]
 8008d00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	f7ff baa6 	b.w	8008256 <_strtod_l+0x7e>
 8008d0a:	2a65      	cmp	r2, #101	; 0x65
 8008d0c:	f43f aba2 	beq.w	8008454 <_strtod_l+0x27c>
 8008d10:	2a45      	cmp	r2, #69	; 0x45
 8008d12:	f43f ab9f 	beq.w	8008454 <_strtod_l+0x27c>
 8008d16:	2101      	movs	r1, #1
 8008d18:	f7ff bbd8 	b.w	80084cc <_strtod_l+0x2f4>
 8008d1c:	f3af 8000 	nop.w
 8008d20:	ffc00000 	.word	0xffc00000
 8008d24:	41dfffff 	.word	0x41dfffff
 8008d28:	000fffff 	.word	0x000fffff
 8008d2c:	7ff00000 	.word	0x7ff00000
 8008d30:	7fefffff 	.word	0x7fefffff
 8008d34:	7c9fffff 	.word	0x7c9fffff
 8008d38:	7fe00000 	.word	0x7fe00000

08008d3c <_strtod_r>:
 8008d3c:	4b01      	ldr	r3, [pc, #4]	; (8008d44 <_strtod_r+0x8>)
 8008d3e:	f7ff ba4b 	b.w	80081d8 <_strtod_l>
 8008d42:	bf00      	nop
 8008d44:	2000006c 	.word	0x2000006c

08008d48 <_strtol_l.constprop.0>:
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4e:	d001      	beq.n	8008d54 <_strtol_l.constprop.0+0xc>
 8008d50:	2b24      	cmp	r3, #36	; 0x24
 8008d52:	d906      	bls.n	8008d62 <_strtol_l.constprop.0+0x1a>
 8008d54:	f7fd fe52 	bl	80069fc <__errno>
 8008d58:	2316      	movs	r3, #22
 8008d5a:	6003      	str	r3, [r0, #0]
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e48 <_strtol_l.constprop.0+0x100>
 8008d66:	460d      	mov	r5, r1
 8008d68:	462e      	mov	r6, r5
 8008d6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008d72:	f017 0708 	ands.w	r7, r7, #8
 8008d76:	d1f7      	bne.n	8008d68 <_strtol_l.constprop.0+0x20>
 8008d78:	2c2d      	cmp	r4, #45	; 0x2d
 8008d7a:	d132      	bne.n	8008de2 <_strtol_l.constprop.0+0x9a>
 8008d7c:	782c      	ldrb	r4, [r5, #0]
 8008d7e:	2701      	movs	r7, #1
 8008d80:	1cb5      	adds	r5, r6, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d05b      	beq.n	8008e3e <_strtol_l.constprop.0+0xf6>
 8008d86:	2b10      	cmp	r3, #16
 8008d88:	d109      	bne.n	8008d9e <_strtol_l.constprop.0+0x56>
 8008d8a:	2c30      	cmp	r4, #48	; 0x30
 8008d8c:	d107      	bne.n	8008d9e <_strtol_l.constprop.0+0x56>
 8008d8e:	782c      	ldrb	r4, [r5, #0]
 8008d90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d94:	2c58      	cmp	r4, #88	; 0x58
 8008d96:	d14d      	bne.n	8008e34 <_strtol_l.constprop.0+0xec>
 8008d98:	786c      	ldrb	r4, [r5, #1]
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	3502      	adds	r5, #2
 8008d9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008da2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008da6:	f04f 0e00 	mov.w	lr, #0
 8008daa:	fbb8 f9f3 	udiv	r9, r8, r3
 8008dae:	4676      	mov	r6, lr
 8008db0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008db4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008db8:	f1bc 0f09 	cmp.w	ip, #9
 8008dbc:	d816      	bhi.n	8008dec <_strtol_l.constprop.0+0xa4>
 8008dbe:	4664      	mov	r4, ip
 8008dc0:	42a3      	cmp	r3, r4
 8008dc2:	dd24      	ble.n	8008e0e <_strtol_l.constprop.0+0xc6>
 8008dc4:	f1be 3fff 	cmp.w	lr, #4294967295
 8008dc8:	d008      	beq.n	8008ddc <_strtol_l.constprop.0+0x94>
 8008dca:	45b1      	cmp	r9, r6
 8008dcc:	d31c      	bcc.n	8008e08 <_strtol_l.constprop.0+0xc0>
 8008dce:	d101      	bne.n	8008dd4 <_strtol_l.constprop.0+0x8c>
 8008dd0:	45a2      	cmp	sl, r4
 8008dd2:	db19      	blt.n	8008e08 <_strtol_l.constprop.0+0xc0>
 8008dd4:	fb06 4603 	mla	r6, r6, r3, r4
 8008dd8:	f04f 0e01 	mov.w	lr, #1
 8008ddc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008de0:	e7e8      	b.n	8008db4 <_strtol_l.constprop.0+0x6c>
 8008de2:	2c2b      	cmp	r4, #43	; 0x2b
 8008de4:	bf04      	itt	eq
 8008de6:	782c      	ldrbeq	r4, [r5, #0]
 8008de8:	1cb5      	addeq	r5, r6, #2
 8008dea:	e7ca      	b.n	8008d82 <_strtol_l.constprop.0+0x3a>
 8008dec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008df0:	f1bc 0f19 	cmp.w	ip, #25
 8008df4:	d801      	bhi.n	8008dfa <_strtol_l.constprop.0+0xb2>
 8008df6:	3c37      	subs	r4, #55	; 0x37
 8008df8:	e7e2      	b.n	8008dc0 <_strtol_l.constprop.0+0x78>
 8008dfa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008dfe:	f1bc 0f19 	cmp.w	ip, #25
 8008e02:	d804      	bhi.n	8008e0e <_strtol_l.constprop.0+0xc6>
 8008e04:	3c57      	subs	r4, #87	; 0x57
 8008e06:	e7db      	b.n	8008dc0 <_strtol_l.constprop.0+0x78>
 8008e08:	f04f 3eff 	mov.w	lr, #4294967295
 8008e0c:	e7e6      	b.n	8008ddc <_strtol_l.constprop.0+0x94>
 8008e0e:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e12:	d105      	bne.n	8008e20 <_strtol_l.constprop.0+0xd8>
 8008e14:	2322      	movs	r3, #34	; 0x22
 8008e16:	6003      	str	r3, [r0, #0]
 8008e18:	4646      	mov	r6, r8
 8008e1a:	b942      	cbnz	r2, 8008e2e <_strtol_l.constprop.0+0xe6>
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	e79e      	b.n	8008d5e <_strtol_l.constprop.0+0x16>
 8008e20:	b107      	cbz	r7, 8008e24 <_strtol_l.constprop.0+0xdc>
 8008e22:	4276      	negs	r6, r6
 8008e24:	2a00      	cmp	r2, #0
 8008e26:	d0f9      	beq.n	8008e1c <_strtol_l.constprop.0+0xd4>
 8008e28:	f1be 0f00 	cmp.w	lr, #0
 8008e2c:	d000      	beq.n	8008e30 <_strtol_l.constprop.0+0xe8>
 8008e2e:	1e69      	subs	r1, r5, #1
 8008e30:	6011      	str	r1, [r2, #0]
 8008e32:	e7f3      	b.n	8008e1c <_strtol_l.constprop.0+0xd4>
 8008e34:	2430      	movs	r4, #48	; 0x30
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1b1      	bne.n	8008d9e <_strtol_l.constprop.0+0x56>
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	e7af      	b.n	8008d9e <_strtol_l.constprop.0+0x56>
 8008e3e:	2c30      	cmp	r4, #48	; 0x30
 8008e40:	d0a5      	beq.n	8008d8e <_strtol_l.constprop.0+0x46>
 8008e42:	230a      	movs	r3, #10
 8008e44:	e7ab      	b.n	8008d9e <_strtol_l.constprop.0+0x56>
 8008e46:	bf00      	nop
 8008e48:	0800a611 	.word	0x0800a611

08008e4c <_strtol_r>:
 8008e4c:	f7ff bf7c 	b.w	8008d48 <_strtol_l.constprop.0>

08008e50 <__ssputs_r>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	688e      	ldr	r6, [r1, #8]
 8008e56:	461f      	mov	r7, r3
 8008e58:	42be      	cmp	r6, r7
 8008e5a:	680b      	ldr	r3, [r1, #0]
 8008e5c:	4682      	mov	sl, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	4690      	mov	r8, r2
 8008e62:	d82c      	bhi.n	8008ebe <__ssputs_r+0x6e>
 8008e64:	898a      	ldrh	r2, [r1, #12]
 8008e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e6a:	d026      	beq.n	8008eba <__ssputs_r+0x6a>
 8008e6c:	6965      	ldr	r5, [r4, #20]
 8008e6e:	6909      	ldr	r1, [r1, #16]
 8008e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e74:	eba3 0901 	sub.w	r9, r3, r1
 8008e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e7c:	1c7b      	adds	r3, r7, #1
 8008e7e:	444b      	add	r3, r9
 8008e80:	106d      	asrs	r5, r5, #1
 8008e82:	429d      	cmp	r5, r3
 8008e84:	bf38      	it	cc
 8008e86:	461d      	movcc	r5, r3
 8008e88:	0553      	lsls	r3, r2, #21
 8008e8a:	d527      	bpl.n	8008edc <__ssputs_r+0x8c>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7fe fc53 	bl	8007738 <_malloc_r>
 8008e92:	4606      	mov	r6, r0
 8008e94:	b360      	cbz	r0, 8008ef0 <__ssputs_r+0xa0>
 8008e96:	6921      	ldr	r1, [r4, #16]
 8008e98:	464a      	mov	r2, r9
 8008e9a:	f000 fa1b 	bl	80092d4 <memcpy>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	6126      	str	r6, [r4, #16]
 8008eac:	6165      	str	r5, [r4, #20]
 8008eae:	444e      	add	r6, r9
 8008eb0:	eba5 0509 	sub.w	r5, r5, r9
 8008eb4:	6026      	str	r6, [r4, #0]
 8008eb6:	60a5      	str	r5, [r4, #8]
 8008eb8:	463e      	mov	r6, r7
 8008eba:	42be      	cmp	r6, r7
 8008ebc:	d900      	bls.n	8008ec0 <__ssputs_r+0x70>
 8008ebe:	463e      	mov	r6, r7
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	f000 f9c9 	bl	800925c <memmove>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	4433      	add	r3, r6
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	462a      	mov	r2, r5
 8008ede:	f000 fdac 	bl	8009a3a <_realloc_r>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1e0      	bne.n	8008eaa <__ssputs_r+0x5a>
 8008ee8:	6921      	ldr	r1, [r4, #16]
 8008eea:	4650      	mov	r0, sl
 8008eec:	f7fe fbb0 	bl	8007650 <_free_r>
 8008ef0:	230c      	movs	r3, #12
 8008ef2:	f8ca 3000 	str.w	r3, [sl]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	e7e9      	b.n	8008ed8 <__ssputs_r+0x88>

08008f04 <_svfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4698      	mov	r8, r3
 8008f0a:	898b      	ldrh	r3, [r1, #12]
 8008f0c:	061b      	lsls	r3, r3, #24
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	4607      	mov	r7, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	d50e      	bpl.n	8008f36 <_svfiprintf_r+0x32>
 8008f18:	690b      	ldr	r3, [r1, #16]
 8008f1a:	b963      	cbnz	r3, 8008f36 <_svfiprintf_r+0x32>
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	f7fe fc0b 	bl	8007738 <_malloc_r>
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	6128      	str	r0, [r5, #16]
 8008f26:	b920      	cbnz	r0, 8008f32 <_svfiprintf_r+0x2e>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e0d0      	b.n	80090d4 <_svfiprintf_r+0x1d0>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	616b      	str	r3, [r5, #20]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f44:	2330      	movs	r3, #48	; 0x30
 8008f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090ec <_svfiprintf_r+0x1e8>
 8008f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f4e:	f04f 0901 	mov.w	r9, #1
 8008f52:	4623      	mov	r3, r4
 8008f54:	469a      	mov	sl, r3
 8008f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5a:	b10a      	cbz	r2, 8008f60 <_svfiprintf_r+0x5c>
 8008f5c:	2a25      	cmp	r2, #37	; 0x25
 8008f5e:	d1f9      	bne.n	8008f54 <_svfiprintf_r+0x50>
 8008f60:	ebba 0b04 	subs.w	fp, sl, r4
 8008f64:	d00b      	beq.n	8008f7e <_svfiprintf_r+0x7a>
 8008f66:	465b      	mov	r3, fp
 8008f68:	4622      	mov	r2, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ff6f 	bl	8008e50 <__ssputs_r>
 8008f72:	3001      	adds	r0, #1
 8008f74:	f000 80a9 	beq.w	80090ca <_svfiprintf_r+0x1c6>
 8008f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f7a:	445a      	add	r2, fp
 8008f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80a1 	beq.w	80090ca <_svfiprintf_r+0x1c6>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f92:	f10a 0a01 	add.w	sl, sl, #1
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa0:	4654      	mov	r4, sl
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	4850      	ldr	r0, [pc, #320]	; (80090ec <_svfiprintf_r+0x1e8>)
 8008faa:	f7f7 f949 	bl	8000240 <memchr>
 8008fae:	9a04      	ldr	r2, [sp, #16]
 8008fb0:	b9d8      	cbnz	r0, 8008fea <_svfiprintf_r+0xe6>
 8008fb2:	06d0      	lsls	r0, r2, #27
 8008fb4:	bf44      	itt	mi
 8008fb6:	2320      	movmi	r3, #32
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	0711      	lsls	r1, r2, #28
 8008fbe:	bf44      	itt	mi
 8008fc0:	232b      	movmi	r3, #43	; 0x2b
 8008fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fca:	2b2a      	cmp	r3, #42	; 0x2a
 8008fcc:	d015      	beq.n	8008ffa <_svfiprintf_r+0xf6>
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	4654      	mov	r4, sl
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f04f 0c0a 	mov.w	ip, #10
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d94d      	bls.n	8009080 <_svfiprintf_r+0x17c>
 8008fe4:	b1b0      	cbz	r0, 8009014 <_svfiprintf_r+0x110>
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	e014      	b.n	8009014 <_svfiprintf_r+0x110>
 8008fea:	eba0 0308 	sub.w	r3, r0, r8
 8008fee:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	46a2      	mov	sl, r4
 8008ff8:	e7d2      	b.n	8008fa0 <_svfiprintf_r+0x9c>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1d19      	adds	r1, r3, #4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	9103      	str	r1, [sp, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbb      	ittet	lt
 8009006:	425b      	neglt	r3, r3
 8009008:	f042 0202 	orrlt.w	r2, r2, #2
 800900c:	9307      	strge	r3, [sp, #28]
 800900e:	9307      	strlt	r3, [sp, #28]
 8009010:	bfb8      	it	lt
 8009012:	9204      	strlt	r2, [sp, #16]
 8009014:	7823      	ldrb	r3, [r4, #0]
 8009016:	2b2e      	cmp	r3, #46	; 0x2e
 8009018:	d10c      	bne.n	8009034 <_svfiprintf_r+0x130>
 800901a:	7863      	ldrb	r3, [r4, #1]
 800901c:	2b2a      	cmp	r3, #42	; 0x2a
 800901e:	d134      	bne.n	800908a <_svfiprintf_r+0x186>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9203      	str	r2, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfb8      	it	lt
 800902c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009030:	3402      	adds	r4, #2
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090fc <_svfiprintf_r+0x1f8>
 8009038:	7821      	ldrb	r1, [r4, #0]
 800903a:	2203      	movs	r2, #3
 800903c:	4650      	mov	r0, sl
 800903e:	f7f7 f8ff 	bl	8000240 <memchr>
 8009042:	b138      	cbz	r0, 8009054 <_svfiprintf_r+0x150>
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	eba0 000a 	sub.w	r0, r0, sl
 800904a:	2240      	movs	r2, #64	; 0x40
 800904c:	4082      	lsls	r2, r0
 800904e:	4313      	orrs	r3, r2
 8009050:	3401      	adds	r4, #1
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009058:	4825      	ldr	r0, [pc, #148]	; (80090f0 <_svfiprintf_r+0x1ec>)
 800905a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905e:	2206      	movs	r2, #6
 8009060:	f7f7 f8ee 	bl	8000240 <memchr>
 8009064:	2800      	cmp	r0, #0
 8009066:	d038      	beq.n	80090da <_svfiprintf_r+0x1d6>
 8009068:	4b22      	ldr	r3, [pc, #136]	; (80090f4 <_svfiprintf_r+0x1f0>)
 800906a:	bb1b      	cbnz	r3, 80090b4 <_svfiprintf_r+0x1b0>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	3307      	adds	r3, #7
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	3308      	adds	r3, #8
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907a:	4433      	add	r3, r6
 800907c:	9309      	str	r3, [sp, #36]	; 0x24
 800907e:	e768      	b.n	8008f52 <_svfiprintf_r+0x4e>
 8009080:	fb0c 3202 	mla	r2, ip, r2, r3
 8009084:	460c      	mov	r4, r1
 8009086:	2001      	movs	r0, #1
 8009088:	e7a6      	b.n	8008fd8 <_svfiprintf_r+0xd4>
 800908a:	2300      	movs	r3, #0
 800908c:	3401      	adds	r4, #1
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	4619      	mov	r1, r3
 8009092:	f04f 0c0a 	mov.w	ip, #10
 8009096:	4620      	mov	r0, r4
 8009098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909c:	3a30      	subs	r2, #48	; 0x30
 800909e:	2a09      	cmp	r2, #9
 80090a0:	d903      	bls.n	80090aa <_svfiprintf_r+0x1a6>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0c6      	beq.n	8009034 <_svfiprintf_r+0x130>
 80090a6:	9105      	str	r1, [sp, #20]
 80090a8:	e7c4      	b.n	8009034 <_svfiprintf_r+0x130>
 80090aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ae:	4604      	mov	r4, r0
 80090b0:	2301      	movs	r3, #1
 80090b2:	e7f0      	b.n	8009096 <_svfiprintf_r+0x192>
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <_svfiprintf_r+0x1f4>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4638      	mov	r0, r7
 80090c0:	f7fc fd76 	bl	8005bb0 <_printf_float>
 80090c4:	1c42      	adds	r2, r0, #1
 80090c6:	4606      	mov	r6, r0
 80090c8:	d1d6      	bne.n	8009078 <_svfiprintf_r+0x174>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	065b      	lsls	r3, r3, #25
 80090ce:	f53f af2d 	bmi.w	8008f2c <_svfiprintf_r+0x28>
 80090d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d4:	b01d      	add	sp, #116	; 0x74
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	462a      	mov	r2, r5
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <_svfiprintf_r+0x1f4>)
 80090e2:	a904      	add	r1, sp, #16
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7fc ffeb 	bl	80060c0 <_printf_i>
 80090ea:	e7eb      	b.n	80090c4 <_svfiprintf_r+0x1c0>
 80090ec:	0800a711 	.word	0x0800a711
 80090f0:	0800a71b 	.word	0x0800a71b
 80090f4:	08005bb1 	.word	0x08005bb1
 80090f8:	08008e51 	.word	0x08008e51
 80090fc:	0800a717 	.word	0x0800a717

08009100 <__sflush_r>:
 8009100:	898a      	ldrh	r2, [r1, #12]
 8009102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009106:	4605      	mov	r5, r0
 8009108:	0710      	lsls	r0, r2, #28
 800910a:	460c      	mov	r4, r1
 800910c:	d458      	bmi.n	80091c0 <__sflush_r+0xc0>
 800910e:	684b      	ldr	r3, [r1, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc05      	bgt.n	8009120 <__sflush_r+0x20>
 8009114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	dc02      	bgt.n	8009120 <__sflush_r+0x20>
 800911a:	2000      	movs	r0, #0
 800911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009122:	2e00      	cmp	r6, #0
 8009124:	d0f9      	beq.n	800911a <__sflush_r+0x1a>
 8009126:	2300      	movs	r3, #0
 8009128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800912c:	682f      	ldr	r7, [r5, #0]
 800912e:	6a21      	ldr	r1, [r4, #32]
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	d032      	beq.n	800919a <__sflush_r+0x9a>
 8009134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	075a      	lsls	r2, r3, #29
 800913a:	d505      	bpl.n	8009148 <__sflush_r+0x48>
 800913c:	6863      	ldr	r3, [r4, #4]
 800913e:	1ac0      	subs	r0, r0, r3
 8009140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009142:	b10b      	cbz	r3, 8009148 <__sflush_r+0x48>
 8009144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009146:	1ac0      	subs	r0, r0, r3
 8009148:	2300      	movs	r3, #0
 800914a:	4602      	mov	r2, r0
 800914c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800914e:	6a21      	ldr	r1, [r4, #32]
 8009150:	4628      	mov	r0, r5
 8009152:	47b0      	blx	r6
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	d106      	bne.n	8009168 <__sflush_r+0x68>
 800915a:	6829      	ldr	r1, [r5, #0]
 800915c:	291d      	cmp	r1, #29
 800915e:	d82b      	bhi.n	80091b8 <__sflush_r+0xb8>
 8009160:	4a29      	ldr	r2, [pc, #164]	; (8009208 <__sflush_r+0x108>)
 8009162:	410a      	asrs	r2, r1
 8009164:	07d6      	lsls	r6, r2, #31
 8009166:	d427      	bmi.n	80091b8 <__sflush_r+0xb8>
 8009168:	2200      	movs	r2, #0
 800916a:	6062      	str	r2, [r4, #4]
 800916c:	04d9      	lsls	r1, r3, #19
 800916e:	6922      	ldr	r2, [r4, #16]
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	d504      	bpl.n	800917e <__sflush_r+0x7e>
 8009174:	1c42      	adds	r2, r0, #1
 8009176:	d101      	bne.n	800917c <__sflush_r+0x7c>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	b903      	cbnz	r3, 800917e <__sflush_r+0x7e>
 800917c:	6560      	str	r0, [r4, #84]	; 0x54
 800917e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009180:	602f      	str	r7, [r5, #0]
 8009182:	2900      	cmp	r1, #0
 8009184:	d0c9      	beq.n	800911a <__sflush_r+0x1a>
 8009186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800918a:	4299      	cmp	r1, r3
 800918c:	d002      	beq.n	8009194 <__sflush_r+0x94>
 800918e:	4628      	mov	r0, r5
 8009190:	f7fe fa5e 	bl	8007650 <_free_r>
 8009194:	2000      	movs	r0, #0
 8009196:	6360      	str	r0, [r4, #52]	; 0x34
 8009198:	e7c0      	b.n	800911c <__sflush_r+0x1c>
 800919a:	2301      	movs	r3, #1
 800919c:	4628      	mov	r0, r5
 800919e:	47b0      	blx	r6
 80091a0:	1c41      	adds	r1, r0, #1
 80091a2:	d1c8      	bne.n	8009136 <__sflush_r+0x36>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0c5      	beq.n	8009136 <__sflush_r+0x36>
 80091aa:	2b1d      	cmp	r3, #29
 80091ac:	d001      	beq.n	80091b2 <__sflush_r+0xb2>
 80091ae:	2b16      	cmp	r3, #22
 80091b0:	d101      	bne.n	80091b6 <__sflush_r+0xb6>
 80091b2:	602f      	str	r7, [r5, #0]
 80091b4:	e7b1      	b.n	800911a <__sflush_r+0x1a>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	e7ad      	b.n	800911c <__sflush_r+0x1c>
 80091c0:	690f      	ldr	r7, [r1, #16]
 80091c2:	2f00      	cmp	r7, #0
 80091c4:	d0a9      	beq.n	800911a <__sflush_r+0x1a>
 80091c6:	0793      	lsls	r3, r2, #30
 80091c8:	680e      	ldr	r6, [r1, #0]
 80091ca:	bf08      	it	eq
 80091cc:	694b      	ldreq	r3, [r1, #20]
 80091ce:	600f      	str	r7, [r1, #0]
 80091d0:	bf18      	it	ne
 80091d2:	2300      	movne	r3, #0
 80091d4:	eba6 0807 	sub.w	r8, r6, r7
 80091d8:	608b      	str	r3, [r1, #8]
 80091da:	f1b8 0f00 	cmp.w	r8, #0
 80091de:	dd9c      	ble.n	800911a <__sflush_r+0x1a>
 80091e0:	6a21      	ldr	r1, [r4, #32]
 80091e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091e4:	4643      	mov	r3, r8
 80091e6:	463a      	mov	r2, r7
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b0      	blx	r6
 80091ec:	2800      	cmp	r0, #0
 80091ee:	dc06      	bgt.n	80091fe <__sflush_r+0xfe>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e78e      	b.n	800911c <__sflush_r+0x1c>
 80091fe:	4407      	add	r7, r0
 8009200:	eba8 0800 	sub.w	r8, r8, r0
 8009204:	e7e9      	b.n	80091da <__sflush_r+0xda>
 8009206:	bf00      	nop
 8009208:	dfbffffe 	.word	0xdfbffffe

0800920c <_fflush_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	690b      	ldr	r3, [r1, #16]
 8009210:	4605      	mov	r5, r0
 8009212:	460c      	mov	r4, r1
 8009214:	b913      	cbnz	r3, 800921c <_fflush_r+0x10>
 8009216:	2500      	movs	r5, #0
 8009218:	4628      	mov	r0, r5
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	b118      	cbz	r0, 8009226 <_fflush_r+0x1a>
 800921e:	6a03      	ldr	r3, [r0, #32]
 8009220:	b90b      	cbnz	r3, 8009226 <_fflush_r+0x1a>
 8009222:	f7fd faff 	bl	8006824 <__sinit>
 8009226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0f3      	beq.n	8009216 <_fflush_r+0xa>
 800922e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009230:	07d0      	lsls	r0, r2, #31
 8009232:	d404      	bmi.n	800923e <_fflush_r+0x32>
 8009234:	0599      	lsls	r1, r3, #22
 8009236:	d402      	bmi.n	800923e <_fflush_r+0x32>
 8009238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800923a:	f7fd fc0a 	bl	8006a52 <__retarget_lock_acquire_recursive>
 800923e:	4628      	mov	r0, r5
 8009240:	4621      	mov	r1, r4
 8009242:	f7ff ff5d 	bl	8009100 <__sflush_r>
 8009246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009248:	07da      	lsls	r2, r3, #31
 800924a:	4605      	mov	r5, r0
 800924c:	d4e4      	bmi.n	8009218 <_fflush_r+0xc>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	059b      	lsls	r3, r3, #22
 8009252:	d4e1      	bmi.n	8009218 <_fflush_r+0xc>
 8009254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009256:	f7fd fbfd 	bl	8006a54 <__retarget_lock_release_recursive>
 800925a:	e7dd      	b.n	8009218 <_fflush_r+0xc>

0800925c <memmove>:
 800925c:	4288      	cmp	r0, r1
 800925e:	b510      	push	{r4, lr}
 8009260:	eb01 0402 	add.w	r4, r1, r2
 8009264:	d902      	bls.n	800926c <memmove+0x10>
 8009266:	4284      	cmp	r4, r0
 8009268:	4623      	mov	r3, r4
 800926a:	d807      	bhi.n	800927c <memmove+0x20>
 800926c:	1e43      	subs	r3, r0, #1
 800926e:	42a1      	cmp	r1, r4
 8009270:	d008      	beq.n	8009284 <memmove+0x28>
 8009272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800927a:	e7f8      	b.n	800926e <memmove+0x12>
 800927c:	4402      	add	r2, r0
 800927e:	4601      	mov	r1, r0
 8009280:	428a      	cmp	r2, r1
 8009282:	d100      	bne.n	8009286 <memmove+0x2a>
 8009284:	bd10      	pop	{r4, pc}
 8009286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928e:	e7f7      	b.n	8009280 <memmove+0x24>

08009290 <strncmp>:
 8009290:	b510      	push	{r4, lr}
 8009292:	b16a      	cbz	r2, 80092b0 <strncmp+0x20>
 8009294:	3901      	subs	r1, #1
 8009296:	1884      	adds	r4, r0, r2
 8009298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800929c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d103      	bne.n	80092ac <strncmp+0x1c>
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d001      	beq.n	80092ac <strncmp+0x1c>
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d1f5      	bne.n	8009298 <strncmp+0x8>
 80092ac:	1ad0      	subs	r0, r2, r3
 80092ae:	bd10      	pop	{r4, pc}
 80092b0:	4610      	mov	r0, r2
 80092b2:	e7fc      	b.n	80092ae <strncmp+0x1e>

080092b4 <_sbrk_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d06      	ldr	r5, [pc, #24]	; (80092d0 <_sbrk_r+0x1c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	f7f8 fb8c 	bl	80019dc <_sbrk>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_sbrk_r+0x1a>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_sbrk_r+0x1a>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20000480 	.word	0x20000480

080092d4 <memcpy>:
 80092d4:	440a      	add	r2, r1
 80092d6:	4291      	cmp	r1, r2
 80092d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092dc:	d100      	bne.n	80092e0 <memcpy+0xc>
 80092de:	4770      	bx	lr
 80092e0:	b510      	push	{r4, lr}
 80092e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ea:	4291      	cmp	r1, r2
 80092ec:	d1f9      	bne.n	80092e2 <memcpy+0xe>
 80092ee:	bd10      	pop	{r4, pc}

080092f0 <nan>:
 80092f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092f8 <nan+0x8>
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	00000000 	.word	0x00000000
 80092fc:	7ff80000 	.word	0x7ff80000

08009300 <__assert_func>:
 8009300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009302:	4614      	mov	r4, r2
 8009304:	461a      	mov	r2, r3
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <__assert_func+0x2c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4605      	mov	r5, r0
 800930c:	68d8      	ldr	r0, [r3, #12]
 800930e:	b14c      	cbz	r4, 8009324 <__assert_func+0x24>
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <__assert_func+0x30>)
 8009312:	9100      	str	r1, [sp, #0]
 8009314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009318:	4906      	ldr	r1, [pc, #24]	; (8009334 <__assert_func+0x34>)
 800931a:	462b      	mov	r3, r5
 800931c:	f000 fbca 	bl	8009ab4 <fiprintf>
 8009320:	f000 fbda 	bl	8009ad8 <abort>
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <__assert_func+0x38>)
 8009326:	461c      	mov	r4, r3
 8009328:	e7f3      	b.n	8009312 <__assert_func+0x12>
 800932a:	bf00      	nop
 800932c:	20000068 	.word	0x20000068
 8009330:	0800a72a 	.word	0x0800a72a
 8009334:	0800a737 	.word	0x0800a737
 8009338:	0800a765 	.word	0x0800a765

0800933c <_calloc_r>:
 800933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800933e:	fba1 2402 	umull	r2, r4, r1, r2
 8009342:	b94c      	cbnz	r4, 8009358 <_calloc_r+0x1c>
 8009344:	4611      	mov	r1, r2
 8009346:	9201      	str	r2, [sp, #4]
 8009348:	f7fe f9f6 	bl	8007738 <_malloc_r>
 800934c:	9a01      	ldr	r2, [sp, #4]
 800934e:	4605      	mov	r5, r0
 8009350:	b930      	cbnz	r0, 8009360 <_calloc_r+0x24>
 8009352:	4628      	mov	r0, r5
 8009354:	b003      	add	sp, #12
 8009356:	bd30      	pop	{r4, r5, pc}
 8009358:	220c      	movs	r2, #12
 800935a:	6002      	str	r2, [r0, #0]
 800935c:	2500      	movs	r5, #0
 800935e:	e7f8      	b.n	8009352 <_calloc_r+0x16>
 8009360:	4621      	mov	r1, r4
 8009362:	f7fd faf8 	bl	8006956 <memset>
 8009366:	e7f4      	b.n	8009352 <_calloc_r+0x16>

08009368 <rshift>:
 8009368:	6903      	ldr	r3, [r0, #16]
 800936a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800936e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009372:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009376:	f100 0414 	add.w	r4, r0, #20
 800937a:	dd45      	ble.n	8009408 <rshift+0xa0>
 800937c:	f011 011f 	ands.w	r1, r1, #31
 8009380:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009384:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009388:	d10c      	bne.n	80093a4 <rshift+0x3c>
 800938a:	f100 0710 	add.w	r7, r0, #16
 800938e:	4629      	mov	r1, r5
 8009390:	42b1      	cmp	r1, r6
 8009392:	d334      	bcc.n	80093fe <rshift+0x96>
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	1eea      	subs	r2, r5, #3
 800939a:	4296      	cmp	r6, r2
 800939c:	bf38      	it	cc
 800939e:	2300      	movcc	r3, #0
 80093a0:	4423      	add	r3, r4
 80093a2:	e015      	b.n	80093d0 <rshift+0x68>
 80093a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093a8:	f1c1 0820 	rsb	r8, r1, #32
 80093ac:	40cf      	lsrs	r7, r1
 80093ae:	f105 0e04 	add.w	lr, r5, #4
 80093b2:	46a1      	mov	r9, r4
 80093b4:	4576      	cmp	r6, lr
 80093b6:	46f4      	mov	ip, lr
 80093b8:	d815      	bhi.n	80093e6 <rshift+0x7e>
 80093ba:	1a9a      	subs	r2, r3, r2
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	3a04      	subs	r2, #4
 80093c0:	3501      	adds	r5, #1
 80093c2:	42ae      	cmp	r6, r5
 80093c4:	bf38      	it	cc
 80093c6:	2200      	movcc	r2, #0
 80093c8:	18a3      	adds	r3, r4, r2
 80093ca:	50a7      	str	r7, [r4, r2]
 80093cc:	b107      	cbz	r7, 80093d0 <rshift+0x68>
 80093ce:	3304      	adds	r3, #4
 80093d0:	1b1a      	subs	r2, r3, r4
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093d8:	bf08      	it	eq
 80093da:	2300      	moveq	r3, #0
 80093dc:	6102      	str	r2, [r0, #16]
 80093de:	bf08      	it	eq
 80093e0:	6143      	streq	r3, [r0, #20]
 80093e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e6:	f8dc c000 	ldr.w	ip, [ip]
 80093ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80093ee:	ea4c 0707 	orr.w	r7, ip, r7
 80093f2:	f849 7b04 	str.w	r7, [r9], #4
 80093f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093fa:	40cf      	lsrs	r7, r1
 80093fc:	e7da      	b.n	80093b4 <rshift+0x4c>
 80093fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8009402:	f847 cf04 	str.w	ip, [r7, #4]!
 8009406:	e7c3      	b.n	8009390 <rshift+0x28>
 8009408:	4623      	mov	r3, r4
 800940a:	e7e1      	b.n	80093d0 <rshift+0x68>

0800940c <__hexdig_fun>:
 800940c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009410:	2b09      	cmp	r3, #9
 8009412:	d802      	bhi.n	800941a <__hexdig_fun+0xe>
 8009414:	3820      	subs	r0, #32
 8009416:	b2c0      	uxtb	r0, r0
 8009418:	4770      	bx	lr
 800941a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800941e:	2b05      	cmp	r3, #5
 8009420:	d801      	bhi.n	8009426 <__hexdig_fun+0x1a>
 8009422:	3847      	subs	r0, #71	; 0x47
 8009424:	e7f7      	b.n	8009416 <__hexdig_fun+0xa>
 8009426:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800942a:	2b05      	cmp	r3, #5
 800942c:	d801      	bhi.n	8009432 <__hexdig_fun+0x26>
 800942e:	3827      	subs	r0, #39	; 0x27
 8009430:	e7f1      	b.n	8009416 <__hexdig_fun+0xa>
 8009432:	2000      	movs	r0, #0
 8009434:	4770      	bx	lr
	...

08009438 <__gethex>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	4617      	mov	r7, r2
 800943e:	680a      	ldr	r2, [r1, #0]
 8009440:	b085      	sub	sp, #20
 8009442:	f102 0b02 	add.w	fp, r2, #2
 8009446:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800944a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800944e:	4681      	mov	r9, r0
 8009450:	468a      	mov	sl, r1
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	32fe      	adds	r2, #254	; 0xfe
 8009456:	eb02 030b 	add.w	r3, r2, fp
 800945a:	46d8      	mov	r8, fp
 800945c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	2830      	cmp	r0, #48	; 0x30
 8009464:	d0f7      	beq.n	8009456 <__gethex+0x1e>
 8009466:	f7ff ffd1 	bl	800940c <__hexdig_fun>
 800946a:	4604      	mov	r4, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	d138      	bne.n	80094e2 <__gethex+0xaa>
 8009470:	49a7      	ldr	r1, [pc, #668]	; (8009710 <__gethex+0x2d8>)
 8009472:	2201      	movs	r2, #1
 8009474:	4640      	mov	r0, r8
 8009476:	f7ff ff0b 	bl	8009290 <strncmp>
 800947a:	4606      	mov	r6, r0
 800947c:	2800      	cmp	r0, #0
 800947e:	d169      	bne.n	8009554 <__gethex+0x11c>
 8009480:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009484:	465d      	mov	r5, fp
 8009486:	f7ff ffc1 	bl	800940c <__hexdig_fun>
 800948a:	2800      	cmp	r0, #0
 800948c:	d064      	beq.n	8009558 <__gethex+0x120>
 800948e:	465a      	mov	r2, fp
 8009490:	7810      	ldrb	r0, [r2, #0]
 8009492:	2830      	cmp	r0, #48	; 0x30
 8009494:	4690      	mov	r8, r2
 8009496:	f102 0201 	add.w	r2, r2, #1
 800949a:	d0f9      	beq.n	8009490 <__gethex+0x58>
 800949c:	f7ff ffb6 	bl	800940c <__hexdig_fun>
 80094a0:	2301      	movs	r3, #1
 80094a2:	fab0 f480 	clz	r4, r0
 80094a6:	0964      	lsrs	r4, r4, #5
 80094a8:	465e      	mov	r6, fp
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	4642      	mov	r2, r8
 80094ae:	4615      	mov	r5, r2
 80094b0:	3201      	adds	r2, #1
 80094b2:	7828      	ldrb	r0, [r5, #0]
 80094b4:	f7ff ffaa 	bl	800940c <__hexdig_fun>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1f8      	bne.n	80094ae <__gethex+0x76>
 80094bc:	4994      	ldr	r1, [pc, #592]	; (8009710 <__gethex+0x2d8>)
 80094be:	2201      	movs	r2, #1
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff fee5 	bl	8009290 <strncmp>
 80094c6:	b978      	cbnz	r0, 80094e8 <__gethex+0xb0>
 80094c8:	b946      	cbnz	r6, 80094dc <__gethex+0xa4>
 80094ca:	1c6e      	adds	r6, r5, #1
 80094cc:	4632      	mov	r2, r6
 80094ce:	4615      	mov	r5, r2
 80094d0:	3201      	adds	r2, #1
 80094d2:	7828      	ldrb	r0, [r5, #0]
 80094d4:	f7ff ff9a 	bl	800940c <__hexdig_fun>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1f8      	bne.n	80094ce <__gethex+0x96>
 80094dc:	1b73      	subs	r3, r6, r5
 80094de:	009e      	lsls	r6, r3, #2
 80094e0:	e004      	b.n	80094ec <__gethex+0xb4>
 80094e2:	2400      	movs	r4, #0
 80094e4:	4626      	mov	r6, r4
 80094e6:	e7e1      	b.n	80094ac <__gethex+0x74>
 80094e8:	2e00      	cmp	r6, #0
 80094ea:	d1f7      	bne.n	80094dc <__gethex+0xa4>
 80094ec:	782b      	ldrb	r3, [r5, #0]
 80094ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094f2:	2b50      	cmp	r3, #80	; 0x50
 80094f4:	d13d      	bne.n	8009572 <__gethex+0x13a>
 80094f6:	786b      	ldrb	r3, [r5, #1]
 80094f8:	2b2b      	cmp	r3, #43	; 0x2b
 80094fa:	d02f      	beq.n	800955c <__gethex+0x124>
 80094fc:	2b2d      	cmp	r3, #45	; 0x2d
 80094fe:	d031      	beq.n	8009564 <__gethex+0x12c>
 8009500:	1c69      	adds	r1, r5, #1
 8009502:	f04f 0b00 	mov.w	fp, #0
 8009506:	7808      	ldrb	r0, [r1, #0]
 8009508:	f7ff ff80 	bl	800940c <__hexdig_fun>
 800950c:	1e42      	subs	r2, r0, #1
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	2a18      	cmp	r2, #24
 8009512:	d82e      	bhi.n	8009572 <__gethex+0x13a>
 8009514:	f1a0 0210 	sub.w	r2, r0, #16
 8009518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800951c:	f7ff ff76 	bl	800940c <__hexdig_fun>
 8009520:	f100 3cff 	add.w	ip, r0, #4294967295
 8009524:	fa5f fc8c 	uxtb.w	ip, ip
 8009528:	f1bc 0f18 	cmp.w	ip, #24
 800952c:	d91d      	bls.n	800956a <__gethex+0x132>
 800952e:	f1bb 0f00 	cmp.w	fp, #0
 8009532:	d000      	beq.n	8009536 <__gethex+0xfe>
 8009534:	4252      	negs	r2, r2
 8009536:	4416      	add	r6, r2
 8009538:	f8ca 1000 	str.w	r1, [sl]
 800953c:	b1dc      	cbz	r4, 8009576 <__gethex+0x13e>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	bf14      	ite	ne
 8009544:	f04f 0800 	movne.w	r8, #0
 8009548:	f04f 0806 	moveq.w	r8, #6
 800954c:	4640      	mov	r0, r8
 800954e:	b005      	add	sp, #20
 8009550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009554:	4645      	mov	r5, r8
 8009556:	4626      	mov	r6, r4
 8009558:	2401      	movs	r4, #1
 800955a:	e7c7      	b.n	80094ec <__gethex+0xb4>
 800955c:	f04f 0b00 	mov.w	fp, #0
 8009560:	1ca9      	adds	r1, r5, #2
 8009562:	e7d0      	b.n	8009506 <__gethex+0xce>
 8009564:	f04f 0b01 	mov.w	fp, #1
 8009568:	e7fa      	b.n	8009560 <__gethex+0x128>
 800956a:	230a      	movs	r3, #10
 800956c:	fb03 0002 	mla	r0, r3, r2, r0
 8009570:	e7d0      	b.n	8009514 <__gethex+0xdc>
 8009572:	4629      	mov	r1, r5
 8009574:	e7e0      	b.n	8009538 <__gethex+0x100>
 8009576:	eba5 0308 	sub.w	r3, r5, r8
 800957a:	3b01      	subs	r3, #1
 800957c:	4621      	mov	r1, r4
 800957e:	2b07      	cmp	r3, #7
 8009580:	dc0a      	bgt.n	8009598 <__gethex+0x160>
 8009582:	4648      	mov	r0, r9
 8009584:	f7fe f964 	bl	8007850 <_Balloc>
 8009588:	4604      	mov	r4, r0
 800958a:	b940      	cbnz	r0, 800959e <__gethex+0x166>
 800958c:	4b61      	ldr	r3, [pc, #388]	; (8009714 <__gethex+0x2dc>)
 800958e:	4602      	mov	r2, r0
 8009590:	21e4      	movs	r1, #228	; 0xe4
 8009592:	4861      	ldr	r0, [pc, #388]	; (8009718 <__gethex+0x2e0>)
 8009594:	f7ff feb4 	bl	8009300 <__assert_func>
 8009598:	3101      	adds	r1, #1
 800959a:	105b      	asrs	r3, r3, #1
 800959c:	e7ef      	b.n	800957e <__gethex+0x146>
 800959e:	f100 0a14 	add.w	sl, r0, #20
 80095a2:	2300      	movs	r3, #0
 80095a4:	495a      	ldr	r1, [pc, #360]	; (8009710 <__gethex+0x2d8>)
 80095a6:	f8cd a004 	str.w	sl, [sp, #4]
 80095aa:	469b      	mov	fp, r3
 80095ac:	45a8      	cmp	r8, r5
 80095ae:	d342      	bcc.n	8009636 <__gethex+0x1fe>
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	f840 bb04 	str.w	fp, [r0], #4
 80095b6:	eba0 000a 	sub.w	r0, r0, sl
 80095ba:	1080      	asrs	r0, r0, #2
 80095bc:	6120      	str	r0, [r4, #16]
 80095be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80095c2:	4658      	mov	r0, fp
 80095c4:	f7fe fa36 	bl	8007a34 <__hi0bits>
 80095c8:	683d      	ldr	r5, [r7, #0]
 80095ca:	eba8 0000 	sub.w	r0, r8, r0
 80095ce:	42a8      	cmp	r0, r5
 80095d0:	dd59      	ble.n	8009686 <__gethex+0x24e>
 80095d2:	eba0 0805 	sub.w	r8, r0, r5
 80095d6:	4641      	mov	r1, r8
 80095d8:	4620      	mov	r0, r4
 80095da:	f7fe fdc2 	bl	8008162 <__any_on>
 80095de:	4683      	mov	fp, r0
 80095e0:	b1b8      	cbz	r0, 8009612 <__gethex+0x1da>
 80095e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80095e6:	1159      	asrs	r1, r3, #5
 80095e8:	f003 021f 	and.w	r2, r3, #31
 80095ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80095f0:	f04f 0b01 	mov.w	fp, #1
 80095f4:	fa0b f202 	lsl.w	r2, fp, r2
 80095f8:	420a      	tst	r2, r1
 80095fa:	d00a      	beq.n	8009612 <__gethex+0x1da>
 80095fc:	455b      	cmp	r3, fp
 80095fe:	dd06      	ble.n	800960e <__gethex+0x1d6>
 8009600:	f1a8 0102 	sub.w	r1, r8, #2
 8009604:	4620      	mov	r0, r4
 8009606:	f7fe fdac 	bl	8008162 <__any_on>
 800960a:	2800      	cmp	r0, #0
 800960c:	d138      	bne.n	8009680 <__gethex+0x248>
 800960e:	f04f 0b02 	mov.w	fp, #2
 8009612:	4641      	mov	r1, r8
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff fea7 	bl	8009368 <rshift>
 800961a:	4446      	add	r6, r8
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	42b3      	cmp	r3, r6
 8009620:	da41      	bge.n	80096a6 <__gethex+0x26e>
 8009622:	4621      	mov	r1, r4
 8009624:	4648      	mov	r0, r9
 8009626:	f7fe f953 	bl	80078d0 <_Bfree>
 800962a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800962c:	2300      	movs	r3, #0
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009634:	e78a      	b.n	800954c <__gethex+0x114>
 8009636:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800963a:	2a2e      	cmp	r2, #46	; 0x2e
 800963c:	d014      	beq.n	8009668 <__gethex+0x230>
 800963e:	2b20      	cmp	r3, #32
 8009640:	d106      	bne.n	8009650 <__gethex+0x218>
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	f843 bb04 	str.w	fp, [r3], #4
 8009648:	f04f 0b00 	mov.w	fp, #0
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	465b      	mov	r3, fp
 8009650:	7828      	ldrb	r0, [r5, #0]
 8009652:	9303      	str	r3, [sp, #12]
 8009654:	f7ff feda 	bl	800940c <__hexdig_fun>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	f000 000f 	and.w	r0, r0, #15
 800965e:	4098      	lsls	r0, r3
 8009660:	ea4b 0b00 	orr.w	fp, fp, r0
 8009664:	3304      	adds	r3, #4
 8009666:	e7a1      	b.n	80095ac <__gethex+0x174>
 8009668:	45a8      	cmp	r8, r5
 800966a:	d8e8      	bhi.n	800963e <__gethex+0x206>
 800966c:	2201      	movs	r2, #1
 800966e:	4628      	mov	r0, r5
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	f7ff fe0d 	bl	8009290 <strncmp>
 8009676:	4926      	ldr	r1, [pc, #152]	; (8009710 <__gethex+0x2d8>)
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	2800      	cmp	r0, #0
 800967c:	d1df      	bne.n	800963e <__gethex+0x206>
 800967e:	e795      	b.n	80095ac <__gethex+0x174>
 8009680:	f04f 0b03 	mov.w	fp, #3
 8009684:	e7c5      	b.n	8009612 <__gethex+0x1da>
 8009686:	da0b      	bge.n	80096a0 <__gethex+0x268>
 8009688:	eba5 0800 	sub.w	r8, r5, r0
 800968c:	4621      	mov	r1, r4
 800968e:	4642      	mov	r2, r8
 8009690:	4648      	mov	r0, r9
 8009692:	f7fe fb37 	bl	8007d04 <__lshift>
 8009696:	eba6 0608 	sub.w	r6, r6, r8
 800969a:	4604      	mov	r4, r0
 800969c:	f100 0a14 	add.w	sl, r0, #20
 80096a0:	f04f 0b00 	mov.w	fp, #0
 80096a4:	e7ba      	b.n	800961c <__gethex+0x1e4>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	42b3      	cmp	r3, r6
 80096aa:	dd73      	ble.n	8009794 <__gethex+0x35c>
 80096ac:	1b9e      	subs	r6, r3, r6
 80096ae:	42b5      	cmp	r5, r6
 80096b0:	dc34      	bgt.n	800971c <__gethex+0x2e4>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d023      	beq.n	8009700 <__gethex+0x2c8>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d025      	beq.n	8009708 <__gethex+0x2d0>
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d115      	bne.n	80096ec <__gethex+0x2b4>
 80096c0:	42b5      	cmp	r5, r6
 80096c2:	d113      	bne.n	80096ec <__gethex+0x2b4>
 80096c4:	2d01      	cmp	r5, #1
 80096c6:	d10b      	bne.n	80096e0 <__gethex+0x2a8>
 80096c8:	9a02      	ldr	r2, [sp, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	2301      	movs	r3, #1
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	f8ca 3000 	str.w	r3, [sl]
 80096d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80096dc:	601c      	str	r4, [r3, #0]
 80096de:	e735      	b.n	800954c <__gethex+0x114>
 80096e0:	1e69      	subs	r1, r5, #1
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7fe fd3d 	bl	8008162 <__any_on>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d1ed      	bne.n	80096c8 <__gethex+0x290>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4648      	mov	r0, r9
 80096f0:	f7fe f8ee 	bl	80078d0 <_Bfree>
 80096f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f6:	2300      	movs	r3, #0
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 80096fe:	e725      	b.n	800954c <__gethex+0x114>
 8009700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f2      	bne.n	80096ec <__gethex+0x2b4>
 8009706:	e7df      	b.n	80096c8 <__gethex+0x290>
 8009708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1dc      	bne.n	80096c8 <__gethex+0x290>
 800970e:	e7ed      	b.n	80096ec <__gethex+0x2b4>
 8009710:	0800a5bc 	.word	0x0800a5bc
 8009714:	0800a455 	.word	0x0800a455
 8009718:	0800a766 	.word	0x0800a766
 800971c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009720:	f1bb 0f00 	cmp.w	fp, #0
 8009724:	d133      	bne.n	800978e <__gethex+0x356>
 8009726:	f1b8 0f00 	cmp.w	r8, #0
 800972a:	d004      	beq.n	8009736 <__gethex+0x2fe>
 800972c:	4641      	mov	r1, r8
 800972e:	4620      	mov	r0, r4
 8009730:	f7fe fd17 	bl	8008162 <__any_on>
 8009734:	4683      	mov	fp, r0
 8009736:	ea4f 1268 	mov.w	r2, r8, asr #5
 800973a:	2301      	movs	r3, #1
 800973c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009740:	f008 081f 	and.w	r8, r8, #31
 8009744:	fa03 f308 	lsl.w	r3, r3, r8
 8009748:	4213      	tst	r3, r2
 800974a:	4631      	mov	r1, r6
 800974c:	4620      	mov	r0, r4
 800974e:	bf18      	it	ne
 8009750:	f04b 0b02 	orrne.w	fp, fp, #2
 8009754:	1bad      	subs	r5, r5, r6
 8009756:	f7ff fe07 	bl	8009368 <rshift>
 800975a:	687e      	ldr	r6, [r7, #4]
 800975c:	f04f 0802 	mov.w	r8, #2
 8009760:	f1bb 0f00 	cmp.w	fp, #0
 8009764:	d04a      	beq.n	80097fc <__gethex+0x3c4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d016      	beq.n	800979a <__gethex+0x362>
 800976c:	2b03      	cmp	r3, #3
 800976e:	d018      	beq.n	80097a2 <__gethex+0x36a>
 8009770:	2b01      	cmp	r3, #1
 8009772:	d109      	bne.n	8009788 <__gethex+0x350>
 8009774:	f01b 0f02 	tst.w	fp, #2
 8009778:	d006      	beq.n	8009788 <__gethex+0x350>
 800977a:	f8da 3000 	ldr.w	r3, [sl]
 800977e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009782:	f01b 0f01 	tst.w	fp, #1
 8009786:	d10f      	bne.n	80097a8 <__gethex+0x370>
 8009788:	f048 0810 	orr.w	r8, r8, #16
 800978c:	e036      	b.n	80097fc <__gethex+0x3c4>
 800978e:	f04f 0b01 	mov.w	fp, #1
 8009792:	e7d0      	b.n	8009736 <__gethex+0x2fe>
 8009794:	f04f 0801 	mov.w	r8, #1
 8009798:	e7e2      	b.n	8009760 <__gethex+0x328>
 800979a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979c:	f1c3 0301 	rsb	r3, r3, #1
 80097a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80097a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0ef      	beq.n	8009788 <__gethex+0x350>
 80097a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097ac:	f104 0214 	add.w	r2, r4, #20
 80097b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80097ba:	2300      	movs	r3, #0
 80097bc:	4694      	mov	ip, r2
 80097be:	f852 1b04 	ldr.w	r1, [r2], #4
 80097c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80097c6:	d01e      	beq.n	8009806 <__gethex+0x3ce>
 80097c8:	3101      	adds	r1, #1
 80097ca:	f8cc 1000 	str.w	r1, [ip]
 80097ce:	f1b8 0f02 	cmp.w	r8, #2
 80097d2:	f104 0214 	add.w	r2, r4, #20
 80097d6:	d13d      	bne.n	8009854 <__gethex+0x41c>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	42ab      	cmp	r3, r5
 80097de:	d10b      	bne.n	80097f8 <__gethex+0x3c0>
 80097e0:	1169      	asrs	r1, r5, #5
 80097e2:	2301      	movs	r3, #1
 80097e4:	f005 051f 	and.w	r5, r5, #31
 80097e8:	fa03 f505 	lsl.w	r5, r3, r5
 80097ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097f0:	421d      	tst	r5, r3
 80097f2:	bf18      	it	ne
 80097f4:	f04f 0801 	movne.w	r8, #1
 80097f8:	f048 0820 	orr.w	r8, r8, #32
 80097fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097fe:	601c      	str	r4, [r3, #0]
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	601e      	str	r6, [r3, #0]
 8009804:	e6a2      	b.n	800954c <__gethex+0x114>
 8009806:	4290      	cmp	r0, r2
 8009808:	f842 3c04 	str.w	r3, [r2, #-4]
 800980c:	d8d6      	bhi.n	80097bc <__gethex+0x384>
 800980e:	68a2      	ldr	r2, [r4, #8]
 8009810:	4593      	cmp	fp, r2
 8009812:	db17      	blt.n	8009844 <__gethex+0x40c>
 8009814:	6861      	ldr	r1, [r4, #4]
 8009816:	4648      	mov	r0, r9
 8009818:	3101      	adds	r1, #1
 800981a:	f7fe f819 	bl	8007850 <_Balloc>
 800981e:	4682      	mov	sl, r0
 8009820:	b918      	cbnz	r0, 800982a <__gethex+0x3f2>
 8009822:	4b1b      	ldr	r3, [pc, #108]	; (8009890 <__gethex+0x458>)
 8009824:	4602      	mov	r2, r0
 8009826:	2184      	movs	r1, #132	; 0x84
 8009828:	e6b3      	b.n	8009592 <__gethex+0x15a>
 800982a:	6922      	ldr	r2, [r4, #16]
 800982c:	3202      	adds	r2, #2
 800982e:	f104 010c 	add.w	r1, r4, #12
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	300c      	adds	r0, #12
 8009836:	f7ff fd4d 	bl	80092d4 <memcpy>
 800983a:	4621      	mov	r1, r4
 800983c:	4648      	mov	r0, r9
 800983e:	f7fe f847 	bl	80078d0 <_Bfree>
 8009842:	4654      	mov	r4, sl
 8009844:	6922      	ldr	r2, [r4, #16]
 8009846:	1c51      	adds	r1, r2, #1
 8009848:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800984c:	6121      	str	r1, [r4, #16]
 800984e:	2101      	movs	r1, #1
 8009850:	6151      	str	r1, [r2, #20]
 8009852:	e7bc      	b.n	80097ce <__gethex+0x396>
 8009854:	6921      	ldr	r1, [r4, #16]
 8009856:	4559      	cmp	r1, fp
 8009858:	dd0b      	ble.n	8009872 <__gethex+0x43a>
 800985a:	2101      	movs	r1, #1
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff fd83 	bl	8009368 <rshift>
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3601      	adds	r6, #1
 8009866:	42b3      	cmp	r3, r6
 8009868:	f6ff aedb 	blt.w	8009622 <__gethex+0x1ea>
 800986c:	f04f 0801 	mov.w	r8, #1
 8009870:	e7c2      	b.n	80097f8 <__gethex+0x3c0>
 8009872:	f015 051f 	ands.w	r5, r5, #31
 8009876:	d0f9      	beq.n	800986c <__gethex+0x434>
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	441a      	add	r2, r3
 800987c:	f1c5 0520 	rsb	r5, r5, #32
 8009880:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009884:	f7fe f8d6 	bl	8007a34 <__hi0bits>
 8009888:	42a8      	cmp	r0, r5
 800988a:	dbe6      	blt.n	800985a <__gethex+0x422>
 800988c:	e7ee      	b.n	800986c <__gethex+0x434>
 800988e:	bf00      	nop
 8009890:	0800a455 	.word	0x0800a455

08009894 <L_shift>:
 8009894:	f1c2 0208 	rsb	r2, r2, #8
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	f1c2 0620 	rsb	r6, r2, #32
 80098a0:	6843      	ldr	r3, [r0, #4]
 80098a2:	6804      	ldr	r4, [r0, #0]
 80098a4:	fa03 f506 	lsl.w	r5, r3, r6
 80098a8:	432c      	orrs	r4, r5
 80098aa:	40d3      	lsrs	r3, r2
 80098ac:	6004      	str	r4, [r0, #0]
 80098ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80098b2:	4288      	cmp	r0, r1
 80098b4:	d3f4      	bcc.n	80098a0 <L_shift+0xc>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}

080098b8 <__match>:
 80098b8:	b530      	push	{r4, r5, lr}
 80098ba:	6803      	ldr	r3, [r0, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c2:	b914      	cbnz	r4, 80098ca <__match+0x12>
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	2001      	movs	r0, #1
 80098c8:	bd30      	pop	{r4, r5, pc}
 80098ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098d2:	2d19      	cmp	r5, #25
 80098d4:	bf98      	it	ls
 80098d6:	3220      	addls	r2, #32
 80098d8:	42a2      	cmp	r2, r4
 80098da:	d0f0      	beq.n	80098be <__match+0x6>
 80098dc:	2000      	movs	r0, #0
 80098de:	e7f3      	b.n	80098c8 <__match+0x10>

080098e0 <__hexnan>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	680b      	ldr	r3, [r1, #0]
 80098e6:	6801      	ldr	r1, [r0, #0]
 80098e8:	115e      	asrs	r6, r3, #5
 80098ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098ee:	f013 031f 	ands.w	r3, r3, #31
 80098f2:	b087      	sub	sp, #28
 80098f4:	bf18      	it	ne
 80098f6:	3604      	addne	r6, #4
 80098f8:	2500      	movs	r5, #0
 80098fa:	1f37      	subs	r7, r6, #4
 80098fc:	4682      	mov	sl, r0
 80098fe:	4690      	mov	r8, r2
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	f846 5c04 	str.w	r5, [r6, #-4]
 8009906:	46b9      	mov	r9, r7
 8009908:	463c      	mov	r4, r7
 800990a:	9502      	str	r5, [sp, #8]
 800990c:	46ab      	mov	fp, r5
 800990e:	784a      	ldrb	r2, [r1, #1]
 8009910:	1c4b      	adds	r3, r1, #1
 8009912:	9303      	str	r3, [sp, #12]
 8009914:	b342      	cbz	r2, 8009968 <__hexnan+0x88>
 8009916:	4610      	mov	r0, r2
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	9204      	str	r2, [sp, #16]
 800991c:	f7ff fd76 	bl	800940c <__hexdig_fun>
 8009920:	2800      	cmp	r0, #0
 8009922:	d14f      	bne.n	80099c4 <__hexnan+0xe4>
 8009924:	9a04      	ldr	r2, [sp, #16]
 8009926:	9905      	ldr	r1, [sp, #20]
 8009928:	2a20      	cmp	r2, #32
 800992a:	d818      	bhi.n	800995e <__hexnan+0x7e>
 800992c:	9b02      	ldr	r3, [sp, #8]
 800992e:	459b      	cmp	fp, r3
 8009930:	dd13      	ble.n	800995a <__hexnan+0x7a>
 8009932:	454c      	cmp	r4, r9
 8009934:	d206      	bcs.n	8009944 <__hexnan+0x64>
 8009936:	2d07      	cmp	r5, #7
 8009938:	dc04      	bgt.n	8009944 <__hexnan+0x64>
 800993a:	462a      	mov	r2, r5
 800993c:	4649      	mov	r1, r9
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff ffa8 	bl	8009894 <L_shift>
 8009944:	4544      	cmp	r4, r8
 8009946:	d950      	bls.n	80099ea <__hexnan+0x10a>
 8009948:	2300      	movs	r3, #0
 800994a:	f1a4 0904 	sub.w	r9, r4, #4
 800994e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009952:	f8cd b008 	str.w	fp, [sp, #8]
 8009956:	464c      	mov	r4, r9
 8009958:	461d      	mov	r5, r3
 800995a:	9903      	ldr	r1, [sp, #12]
 800995c:	e7d7      	b.n	800990e <__hexnan+0x2e>
 800995e:	2a29      	cmp	r2, #41	; 0x29
 8009960:	d155      	bne.n	8009a0e <__hexnan+0x12e>
 8009962:	3102      	adds	r1, #2
 8009964:	f8ca 1000 	str.w	r1, [sl]
 8009968:	f1bb 0f00 	cmp.w	fp, #0
 800996c:	d04f      	beq.n	8009a0e <__hexnan+0x12e>
 800996e:	454c      	cmp	r4, r9
 8009970:	d206      	bcs.n	8009980 <__hexnan+0xa0>
 8009972:	2d07      	cmp	r5, #7
 8009974:	dc04      	bgt.n	8009980 <__hexnan+0xa0>
 8009976:	462a      	mov	r2, r5
 8009978:	4649      	mov	r1, r9
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff ff8a 	bl	8009894 <L_shift>
 8009980:	4544      	cmp	r4, r8
 8009982:	d934      	bls.n	80099ee <__hexnan+0x10e>
 8009984:	f1a8 0204 	sub.w	r2, r8, #4
 8009988:	4623      	mov	r3, r4
 800998a:	f853 1b04 	ldr.w	r1, [r3], #4
 800998e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009992:	429f      	cmp	r7, r3
 8009994:	d2f9      	bcs.n	800998a <__hexnan+0xaa>
 8009996:	1b3b      	subs	r3, r7, r4
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	3304      	adds	r3, #4
 800999e:	3e03      	subs	r6, #3
 80099a0:	3401      	adds	r4, #1
 80099a2:	42a6      	cmp	r6, r4
 80099a4:	bf38      	it	cc
 80099a6:	2304      	movcc	r3, #4
 80099a8:	4443      	add	r3, r8
 80099aa:	2200      	movs	r2, #0
 80099ac:	f843 2b04 	str.w	r2, [r3], #4
 80099b0:	429f      	cmp	r7, r3
 80099b2:	d2fb      	bcs.n	80099ac <__hexnan+0xcc>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	b91b      	cbnz	r3, 80099c0 <__hexnan+0xe0>
 80099b8:	4547      	cmp	r7, r8
 80099ba:	d126      	bne.n	8009a0a <__hexnan+0x12a>
 80099bc:	2301      	movs	r3, #1
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	2005      	movs	r0, #5
 80099c2:	e025      	b.n	8009a10 <__hexnan+0x130>
 80099c4:	3501      	adds	r5, #1
 80099c6:	2d08      	cmp	r5, #8
 80099c8:	f10b 0b01 	add.w	fp, fp, #1
 80099cc:	dd06      	ble.n	80099dc <__hexnan+0xfc>
 80099ce:	4544      	cmp	r4, r8
 80099d0:	d9c3      	bls.n	800995a <__hexnan+0x7a>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80099d8:	2501      	movs	r5, #1
 80099da:	3c04      	subs	r4, #4
 80099dc:	6822      	ldr	r2, [r4, #0]
 80099de:	f000 000f 	and.w	r0, r0, #15
 80099e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099e6:	6020      	str	r0, [r4, #0]
 80099e8:	e7b7      	b.n	800995a <__hexnan+0x7a>
 80099ea:	2508      	movs	r5, #8
 80099ec:	e7b5      	b.n	800995a <__hexnan+0x7a>
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0df      	beq.n	80099b4 <__hexnan+0xd4>
 80099f4:	f1c3 0320 	rsb	r3, r3, #32
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	40da      	lsrs	r2, r3
 80099fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a02:	4013      	ands	r3, r2
 8009a04:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a08:	e7d4      	b.n	80099b4 <__hexnan+0xd4>
 8009a0a:	3f04      	subs	r7, #4
 8009a0c:	e7d2      	b.n	80099b4 <__hexnan+0xd4>
 8009a0e:	2004      	movs	r0, #4
 8009a10:	b007      	add	sp, #28
 8009a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a16 <__ascii_mbtowc>:
 8009a16:	b082      	sub	sp, #8
 8009a18:	b901      	cbnz	r1, 8009a1c <__ascii_mbtowc+0x6>
 8009a1a:	a901      	add	r1, sp, #4
 8009a1c:	b142      	cbz	r2, 8009a30 <__ascii_mbtowc+0x1a>
 8009a1e:	b14b      	cbz	r3, 8009a34 <__ascii_mbtowc+0x1e>
 8009a20:	7813      	ldrb	r3, [r2, #0]
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	1e10      	subs	r0, r2, #0
 8009a28:	bf18      	it	ne
 8009a2a:	2001      	movne	r0, #1
 8009a2c:	b002      	add	sp, #8
 8009a2e:	4770      	bx	lr
 8009a30:	4610      	mov	r0, r2
 8009a32:	e7fb      	b.n	8009a2c <__ascii_mbtowc+0x16>
 8009a34:	f06f 0001 	mvn.w	r0, #1
 8009a38:	e7f8      	b.n	8009a2c <__ascii_mbtowc+0x16>

08009a3a <_realloc_r>:
 8009a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3e:	4680      	mov	r8, r0
 8009a40:	4614      	mov	r4, r2
 8009a42:	460e      	mov	r6, r1
 8009a44:	b921      	cbnz	r1, 8009a50 <_realloc_r+0x16>
 8009a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	f7fd be74 	b.w	8007738 <_malloc_r>
 8009a50:	b92a      	cbnz	r2, 8009a5e <_realloc_r+0x24>
 8009a52:	f7fd fdfd 	bl	8007650 <_free_r>
 8009a56:	4625      	mov	r5, r4
 8009a58:	4628      	mov	r0, r5
 8009a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a5e:	f000 f842 	bl	8009ae6 <_malloc_usable_size_r>
 8009a62:	4284      	cmp	r4, r0
 8009a64:	4607      	mov	r7, r0
 8009a66:	d802      	bhi.n	8009a6e <_realloc_r+0x34>
 8009a68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a6c:	d812      	bhi.n	8009a94 <_realloc_r+0x5a>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4640      	mov	r0, r8
 8009a72:	f7fd fe61 	bl	8007738 <_malloc_r>
 8009a76:	4605      	mov	r5, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0ed      	beq.n	8009a58 <_realloc_r+0x1e>
 8009a7c:	42bc      	cmp	r4, r7
 8009a7e:	4622      	mov	r2, r4
 8009a80:	4631      	mov	r1, r6
 8009a82:	bf28      	it	cs
 8009a84:	463a      	movcs	r2, r7
 8009a86:	f7ff fc25 	bl	80092d4 <memcpy>
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f7fd fddf 	bl	8007650 <_free_r>
 8009a92:	e7e1      	b.n	8009a58 <_realloc_r+0x1e>
 8009a94:	4635      	mov	r5, r6
 8009a96:	e7df      	b.n	8009a58 <_realloc_r+0x1e>

08009a98 <__ascii_wctomb>:
 8009a98:	b149      	cbz	r1, 8009aae <__ascii_wctomb+0x16>
 8009a9a:	2aff      	cmp	r2, #255	; 0xff
 8009a9c:	bf85      	ittet	hi
 8009a9e:	238a      	movhi	r3, #138	; 0x8a
 8009aa0:	6003      	strhi	r3, [r0, #0]
 8009aa2:	700a      	strbls	r2, [r1, #0]
 8009aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aa8:	bf98      	it	ls
 8009aaa:	2001      	movls	r0, #1
 8009aac:	4770      	bx	lr
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4770      	bx	lr
	...

08009ab4 <fiprintf>:
 8009ab4:	b40e      	push	{r1, r2, r3}
 8009ab6:	b503      	push	{r0, r1, lr}
 8009ab8:	4601      	mov	r1, r0
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <fiprintf+0x20>)
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	6800      	ldr	r0, [r0, #0]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f000 f83f 	bl	8009b48 <_vfiprintf_r>
 8009aca:	b002      	add	sp, #8
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	20000068 	.word	0x20000068

08009ad8 <abort>:
 8009ad8:	b508      	push	{r3, lr}
 8009ada:	2006      	movs	r0, #6
 8009adc:	f000 fa0c 	bl	8009ef8 <raise>
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	f7f7 ff03 	bl	80018ec <_exit>

08009ae6 <_malloc_usable_size_r>:
 8009ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aea:	1f18      	subs	r0, r3, #4
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bfbc      	itt	lt
 8009af0:	580b      	ldrlt	r3, [r1, r0]
 8009af2:	18c0      	addlt	r0, r0, r3
 8009af4:	4770      	bx	lr

08009af6 <__sfputc_r>:
 8009af6:	6893      	ldr	r3, [r2, #8]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	b410      	push	{r4}
 8009afe:	6093      	str	r3, [r2, #8]
 8009b00:	da08      	bge.n	8009b14 <__sfputc_r+0x1e>
 8009b02:	6994      	ldr	r4, [r2, #24]
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	db01      	blt.n	8009b0c <__sfputc_r+0x16>
 8009b08:	290a      	cmp	r1, #10
 8009b0a:	d103      	bne.n	8009b14 <__sfputc_r+0x1e>
 8009b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b10:	f000 b934 	b.w	8009d7c <__swbuf_r>
 8009b14:	6813      	ldr	r3, [r2, #0]
 8009b16:	1c58      	adds	r0, r3, #1
 8009b18:	6010      	str	r0, [r2, #0]
 8009b1a:	7019      	strb	r1, [r3, #0]
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <__sfputs_r>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	4606      	mov	r6, r0
 8009b28:	460f      	mov	r7, r1
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	18d5      	adds	r5, r2, r3
 8009b2e:	42ac      	cmp	r4, r5
 8009b30:	d101      	bne.n	8009b36 <__sfputs_r+0x12>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e007      	b.n	8009b46 <__sfputs_r+0x22>
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	463a      	mov	r2, r7
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7ff ffda 	bl	8009af6 <__sfputc_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d1f3      	bne.n	8009b2e <__sfputs_r+0xa>
 8009b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b48 <_vfiprintf_r>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	b09d      	sub	sp, #116	; 0x74
 8009b50:	4614      	mov	r4, r2
 8009b52:	4698      	mov	r8, r3
 8009b54:	4606      	mov	r6, r0
 8009b56:	b118      	cbz	r0, 8009b60 <_vfiprintf_r+0x18>
 8009b58:	6a03      	ldr	r3, [r0, #32]
 8009b5a:	b90b      	cbnz	r3, 8009b60 <_vfiprintf_r+0x18>
 8009b5c:	f7fc fe62 	bl	8006824 <__sinit>
 8009b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b62:	07d9      	lsls	r1, r3, #31
 8009b64:	d405      	bmi.n	8009b72 <_vfiprintf_r+0x2a>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	059a      	lsls	r2, r3, #22
 8009b6a:	d402      	bmi.n	8009b72 <_vfiprintf_r+0x2a>
 8009b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b6e:	f7fc ff70 	bl	8006a52 <__retarget_lock_acquire_recursive>
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	071b      	lsls	r3, r3, #28
 8009b76:	d501      	bpl.n	8009b7c <_vfiprintf_r+0x34>
 8009b78:	692b      	ldr	r3, [r5, #16]
 8009b7a:	b99b      	cbnz	r3, 8009ba4 <_vfiprintf_r+0x5c>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f000 f93a 	bl	8009df8 <__swsetup_r>
 8009b84:	b170      	cbz	r0, 8009ba4 <_vfiprintf_r+0x5c>
 8009b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b88:	07dc      	lsls	r4, r3, #31
 8009b8a:	d504      	bpl.n	8009b96 <_vfiprintf_r+0x4e>
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	b01d      	add	sp, #116	; 0x74
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	0598      	lsls	r0, r3, #22
 8009b9a:	d4f7      	bmi.n	8009b8c <_vfiprintf_r+0x44>
 8009b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b9e:	f7fc ff59 	bl	8006a54 <__retarget_lock_release_recursive>
 8009ba2:	e7f3      	b.n	8009b8c <_vfiprintf_r+0x44>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bb2:	2330      	movs	r3, #48	; 0x30
 8009bb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d68 <_vfiprintf_r+0x220>
 8009bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bbc:	f04f 0901 	mov.w	r9, #1
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	469a      	mov	sl, r3
 8009bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bc8:	b10a      	cbz	r2, 8009bce <_vfiprintf_r+0x86>
 8009bca:	2a25      	cmp	r2, #37	; 0x25
 8009bcc:	d1f9      	bne.n	8009bc2 <_vfiprintf_r+0x7a>
 8009bce:	ebba 0b04 	subs.w	fp, sl, r4
 8009bd2:	d00b      	beq.n	8009bec <_vfiprintf_r+0xa4>
 8009bd4:	465b      	mov	r3, fp
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7ff ffa2 	bl	8009b24 <__sfputs_r>
 8009be0:	3001      	adds	r0, #1
 8009be2:	f000 80a9 	beq.w	8009d38 <_vfiprintf_r+0x1f0>
 8009be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be8:	445a      	add	r2, fp
 8009bea:	9209      	str	r2, [sp, #36]	; 0x24
 8009bec:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80a1 	beq.w	8009d38 <_vfiprintf_r+0x1f0>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c00:	f10a 0a01 	add.w	sl, sl, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c0e:	4654      	mov	r4, sl
 8009c10:	2205      	movs	r2, #5
 8009c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c16:	4854      	ldr	r0, [pc, #336]	; (8009d68 <_vfiprintf_r+0x220>)
 8009c18:	f7f6 fb12 	bl	8000240 <memchr>
 8009c1c:	9a04      	ldr	r2, [sp, #16]
 8009c1e:	b9d8      	cbnz	r0, 8009c58 <_vfiprintf_r+0x110>
 8009c20:	06d1      	lsls	r1, r2, #27
 8009c22:	bf44      	itt	mi
 8009c24:	2320      	movmi	r3, #32
 8009c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c2a:	0713      	lsls	r3, r2, #28
 8009c2c:	bf44      	itt	mi
 8009c2e:	232b      	movmi	r3, #43	; 0x2b
 8009c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c34:	f89a 3000 	ldrb.w	r3, [sl]
 8009c38:	2b2a      	cmp	r3, #42	; 0x2a
 8009c3a:	d015      	beq.n	8009c68 <_vfiprintf_r+0x120>
 8009c3c:	9a07      	ldr	r2, [sp, #28]
 8009c3e:	4654      	mov	r4, sl
 8009c40:	2000      	movs	r0, #0
 8009c42:	f04f 0c0a 	mov.w	ip, #10
 8009c46:	4621      	mov	r1, r4
 8009c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c4c:	3b30      	subs	r3, #48	; 0x30
 8009c4e:	2b09      	cmp	r3, #9
 8009c50:	d94d      	bls.n	8009cee <_vfiprintf_r+0x1a6>
 8009c52:	b1b0      	cbz	r0, 8009c82 <_vfiprintf_r+0x13a>
 8009c54:	9207      	str	r2, [sp, #28]
 8009c56:	e014      	b.n	8009c82 <_vfiprintf_r+0x13a>
 8009c58:	eba0 0308 	sub.w	r3, r0, r8
 8009c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c60:	4313      	orrs	r3, r2
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	46a2      	mov	sl, r4
 8009c66:	e7d2      	b.n	8009c0e <_vfiprintf_r+0xc6>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	1d19      	adds	r1, r3, #4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	9103      	str	r1, [sp, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bfbb      	ittet	lt
 8009c74:	425b      	neglt	r3, r3
 8009c76:	f042 0202 	orrlt.w	r2, r2, #2
 8009c7a:	9307      	strge	r3, [sp, #28]
 8009c7c:	9307      	strlt	r3, [sp, #28]
 8009c7e:	bfb8      	it	lt
 8009c80:	9204      	strlt	r2, [sp, #16]
 8009c82:	7823      	ldrb	r3, [r4, #0]
 8009c84:	2b2e      	cmp	r3, #46	; 0x2e
 8009c86:	d10c      	bne.n	8009ca2 <_vfiprintf_r+0x15a>
 8009c88:	7863      	ldrb	r3, [r4, #1]
 8009c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c8c:	d134      	bne.n	8009cf8 <_vfiprintf_r+0x1b0>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	1d1a      	adds	r2, r3, #4
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	9203      	str	r2, [sp, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfb8      	it	lt
 8009c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c9e:	3402      	adds	r4, #2
 8009ca0:	9305      	str	r3, [sp, #20]
 8009ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d78 <_vfiprintf_r+0x230>
 8009ca6:	7821      	ldrb	r1, [r4, #0]
 8009ca8:	2203      	movs	r2, #3
 8009caa:	4650      	mov	r0, sl
 8009cac:	f7f6 fac8 	bl	8000240 <memchr>
 8009cb0:	b138      	cbz	r0, 8009cc2 <_vfiprintf_r+0x17a>
 8009cb2:	9b04      	ldr	r3, [sp, #16]
 8009cb4:	eba0 000a 	sub.w	r0, r0, sl
 8009cb8:	2240      	movs	r2, #64	; 0x40
 8009cba:	4082      	lsls	r2, r0
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	3401      	adds	r4, #1
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4829      	ldr	r0, [pc, #164]	; (8009d6c <_vfiprintf_r+0x224>)
 8009cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ccc:	2206      	movs	r2, #6
 8009cce:	f7f6 fab7 	bl	8000240 <memchr>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d03f      	beq.n	8009d56 <_vfiprintf_r+0x20e>
 8009cd6:	4b26      	ldr	r3, [pc, #152]	; (8009d70 <_vfiprintf_r+0x228>)
 8009cd8:	bb1b      	cbnz	r3, 8009d22 <_vfiprintf_r+0x1da>
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	3307      	adds	r3, #7
 8009cde:	f023 0307 	bic.w	r3, r3, #7
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	443b      	add	r3, r7
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	e768      	b.n	8009bc0 <_vfiprintf_r+0x78>
 8009cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	e7a6      	b.n	8009c46 <_vfiprintf_r+0xfe>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	3401      	adds	r4, #1
 8009cfc:	9305      	str	r3, [sp, #20]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f04f 0c0a 	mov.w	ip, #10
 8009d04:	4620      	mov	r0, r4
 8009d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d0a:	3a30      	subs	r2, #48	; 0x30
 8009d0c:	2a09      	cmp	r2, #9
 8009d0e:	d903      	bls.n	8009d18 <_vfiprintf_r+0x1d0>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0c6      	beq.n	8009ca2 <_vfiprintf_r+0x15a>
 8009d14:	9105      	str	r1, [sp, #20]
 8009d16:	e7c4      	b.n	8009ca2 <_vfiprintf_r+0x15a>
 8009d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e7f0      	b.n	8009d04 <_vfiprintf_r+0x1bc>
 8009d22:	ab03      	add	r3, sp, #12
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	462a      	mov	r2, r5
 8009d28:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <_vfiprintf_r+0x22c>)
 8009d2a:	a904      	add	r1, sp, #16
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7fb ff3f 	bl	8005bb0 <_printf_float>
 8009d32:	4607      	mov	r7, r0
 8009d34:	1c78      	adds	r0, r7, #1
 8009d36:	d1d6      	bne.n	8009ce6 <_vfiprintf_r+0x19e>
 8009d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d3a:	07d9      	lsls	r1, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_vfiprintf_r+0x202>
 8009d3e:	89ab      	ldrh	r3, [r5, #12]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_vfiprintf_r+0x202>
 8009d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d46:	f7fc fe85 	bl	8006a54 <__retarget_lock_release_recursive>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	065b      	lsls	r3, r3, #25
 8009d4e:	f53f af1d 	bmi.w	8009b8c <_vfiprintf_r+0x44>
 8009d52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d54:	e71c      	b.n	8009b90 <_vfiprintf_r+0x48>
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <_vfiprintf_r+0x22c>)
 8009d5e:	a904      	add	r1, sp, #16
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7fc f9ad 	bl	80060c0 <_printf_i>
 8009d66:	e7e4      	b.n	8009d32 <_vfiprintf_r+0x1ea>
 8009d68:	0800a711 	.word	0x0800a711
 8009d6c:	0800a71b 	.word	0x0800a71b
 8009d70:	08005bb1 	.word	0x08005bb1
 8009d74:	08009b25 	.word	0x08009b25
 8009d78:	0800a717 	.word	0x0800a717

08009d7c <__swbuf_r>:
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	460e      	mov	r6, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	4605      	mov	r5, r0
 8009d84:	b118      	cbz	r0, 8009d8e <__swbuf_r+0x12>
 8009d86:	6a03      	ldr	r3, [r0, #32]
 8009d88:	b90b      	cbnz	r3, 8009d8e <__swbuf_r+0x12>
 8009d8a:	f7fc fd4b 	bl	8006824 <__sinit>
 8009d8e:	69a3      	ldr	r3, [r4, #24]
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	071a      	lsls	r2, r3, #28
 8009d96:	d525      	bpl.n	8009de4 <__swbuf_r+0x68>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	b31b      	cbz	r3, 8009de4 <__swbuf_r+0x68>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	6922      	ldr	r2, [r4, #16]
 8009da0:	1a98      	subs	r0, r3, r2
 8009da2:	6963      	ldr	r3, [r4, #20]
 8009da4:	b2f6      	uxtb	r6, r6
 8009da6:	4283      	cmp	r3, r0
 8009da8:	4637      	mov	r7, r6
 8009daa:	dc04      	bgt.n	8009db6 <__swbuf_r+0x3a>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f7ff fa2c 	bl	800920c <_fflush_r>
 8009db4:	b9e0      	cbnz	r0, 8009df0 <__swbuf_r+0x74>
 8009db6:	68a3      	ldr	r3, [r4, #8]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	60a3      	str	r3, [r4, #8]
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	6022      	str	r2, [r4, #0]
 8009dc2:	701e      	strb	r6, [r3, #0]
 8009dc4:	6962      	ldr	r2, [r4, #20]
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d004      	beq.n	8009dd6 <__swbuf_r+0x5a>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	07db      	lsls	r3, r3, #31
 8009dd0:	d506      	bpl.n	8009de0 <__swbuf_r+0x64>
 8009dd2:	2e0a      	cmp	r6, #10
 8009dd4:	d104      	bne.n	8009de0 <__swbuf_r+0x64>
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7ff fa17 	bl	800920c <_fflush_r>
 8009dde:	b938      	cbnz	r0, 8009df0 <__swbuf_r+0x74>
 8009de0:	4638      	mov	r0, r7
 8009de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de4:	4621      	mov	r1, r4
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f806 	bl	8009df8 <__swsetup_r>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d0d5      	beq.n	8009d9c <__swbuf_r+0x20>
 8009df0:	f04f 37ff 	mov.w	r7, #4294967295
 8009df4:	e7f4      	b.n	8009de0 <__swbuf_r+0x64>
	...

08009df8 <__swsetup_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <__swsetup_r+0xac>)
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	460c      	mov	r4, r1
 8009e02:	b118      	cbz	r0, 8009e0c <__swsetup_r+0x14>
 8009e04:	6a03      	ldr	r3, [r0, #32]
 8009e06:	b90b      	cbnz	r3, 8009e0c <__swsetup_r+0x14>
 8009e08:	f7fc fd0c 	bl	8006824 <__sinit>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e12:	0718      	lsls	r0, r3, #28
 8009e14:	d422      	bmi.n	8009e5c <__swsetup_r+0x64>
 8009e16:	06d9      	lsls	r1, r3, #27
 8009e18:	d407      	bmi.n	8009e2a <__swsetup_r+0x32>
 8009e1a:	2309      	movs	r3, #9
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e034      	b.n	8009e94 <__swsetup_r+0x9c>
 8009e2a:	0758      	lsls	r0, r3, #29
 8009e2c:	d512      	bpl.n	8009e54 <__swsetup_r+0x5c>
 8009e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e30:	b141      	cbz	r1, 8009e44 <__swsetup_r+0x4c>
 8009e32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e36:	4299      	cmp	r1, r3
 8009e38:	d002      	beq.n	8009e40 <__swsetup_r+0x48>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f7fd fc08 	bl	8007650 <_free_r>
 8009e40:	2300      	movs	r3, #0
 8009e42:	6363      	str	r3, [r4, #52]	; 0x34
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6063      	str	r3, [r4, #4]
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f043 0308 	orr.w	r3, r3, #8
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	b94b      	cbnz	r3, 8009e74 <__swsetup_r+0x7c>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e6a:	d003      	beq.n	8009e74 <__swsetup_r+0x7c>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f884 	bl	8009f7c <__smakebuf_r>
 8009e74:	89a0      	ldrh	r0, [r4, #12]
 8009e76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e7a:	f010 0301 	ands.w	r3, r0, #1
 8009e7e:	d00a      	beq.n	8009e96 <__swsetup_r+0x9e>
 8009e80:	2300      	movs	r3, #0
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	425b      	negs	r3, r3
 8009e88:	61a3      	str	r3, [r4, #24]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	b943      	cbnz	r3, 8009ea0 <__swsetup_r+0xa8>
 8009e8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e92:	d1c4      	bne.n	8009e1e <__swsetup_r+0x26>
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	0781      	lsls	r1, r0, #30
 8009e98:	bf58      	it	pl
 8009e9a:	6963      	ldrpl	r3, [r4, #20]
 8009e9c:	60a3      	str	r3, [r4, #8]
 8009e9e:	e7f4      	b.n	8009e8a <__swsetup_r+0x92>
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e7f7      	b.n	8009e94 <__swsetup_r+0x9c>
 8009ea4:	20000068 	.word	0x20000068

08009ea8 <_raise_r>:
 8009ea8:	291f      	cmp	r1, #31
 8009eaa:	b538      	push	{r3, r4, r5, lr}
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	d904      	bls.n	8009ebc <_raise_r+0x14>
 8009eb2:	2316      	movs	r3, #22
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ebe:	b112      	cbz	r2, 8009ec6 <_raise_r+0x1e>
 8009ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ec4:	b94b      	cbnz	r3, 8009eda <_raise_r+0x32>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 f830 	bl	8009f2c <_getpid_r>
 8009ecc:	462a      	mov	r2, r5
 8009ece:	4601      	mov	r1, r0
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed6:	f000 b817 	b.w	8009f08 <_kill_r>
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d00a      	beq.n	8009ef4 <_raise_r+0x4c>
 8009ede:	1c59      	adds	r1, r3, #1
 8009ee0:	d103      	bne.n	8009eea <_raise_r+0x42>
 8009ee2:	2316      	movs	r3, #22
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	e7e7      	b.n	8009eba <_raise_r+0x12>
 8009eea:	2400      	movs	r4, #0
 8009eec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	4798      	blx	r3
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e7e0      	b.n	8009eba <_raise_r+0x12>

08009ef8 <raise>:
 8009ef8:	4b02      	ldr	r3, [pc, #8]	; (8009f04 <raise+0xc>)
 8009efa:	4601      	mov	r1, r0
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	f7ff bfd3 	b.w	8009ea8 <_raise_r>
 8009f02:	bf00      	nop
 8009f04:	20000068 	.word	0x20000068

08009f08 <_kill_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_kill_r+0x20>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	f7f7 fcd9 	bl	80018cc <_kill>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d102      	bne.n	8009f24 <_kill_r+0x1c>
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	b103      	cbz	r3, 8009f24 <_kill_r+0x1c>
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	bd38      	pop	{r3, r4, r5, pc}
 8009f26:	bf00      	nop
 8009f28:	20000480 	.word	0x20000480

08009f2c <_getpid_r>:
 8009f2c:	f7f7 bcc6 	b.w	80018bc <_getpid>

08009f30 <__swhatbuf_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	2900      	cmp	r1, #0
 8009f3a:	b096      	sub	sp, #88	; 0x58
 8009f3c:	4615      	mov	r5, r2
 8009f3e:	461e      	mov	r6, r3
 8009f40:	da0d      	bge.n	8009f5e <__swhatbuf_r+0x2e>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f48:	f04f 0100 	mov.w	r1, #0
 8009f4c:	bf0c      	ite	eq
 8009f4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f52:	2340      	movne	r3, #64	; 0x40
 8009f54:	2000      	movs	r0, #0
 8009f56:	6031      	str	r1, [r6, #0]
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	b016      	add	sp, #88	; 0x58
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	466a      	mov	r2, sp
 8009f60:	f000 f848 	bl	8009ff4 <_fstat_r>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	dbec      	blt.n	8009f42 <__swhatbuf_r+0x12>
 8009f68:	9901      	ldr	r1, [sp, #4]
 8009f6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f72:	4259      	negs	r1, r3
 8009f74:	4159      	adcs	r1, r3
 8009f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7a:	e7eb      	b.n	8009f54 <__swhatbuf_r+0x24>

08009f7c <__smakebuf_r>:
 8009f7c:	898b      	ldrh	r3, [r1, #12]
 8009f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f80:	079d      	lsls	r5, r3, #30
 8009f82:	4606      	mov	r6, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	d507      	bpl.n	8009f98 <__smakebuf_r+0x1c>
 8009f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	6123      	str	r3, [r4, #16]
 8009f90:	2301      	movs	r3, #1
 8009f92:	6163      	str	r3, [r4, #20]
 8009f94:	b002      	add	sp, #8
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	ab01      	add	r3, sp, #4
 8009f9a:	466a      	mov	r2, sp
 8009f9c:	f7ff ffc8 	bl	8009f30 <__swhatbuf_r>
 8009fa0:	9900      	ldr	r1, [sp, #0]
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7fd fbc7 	bl	8007738 <_malloc_r>
 8009faa:	b948      	cbnz	r0, 8009fc0 <__smakebuf_r+0x44>
 8009fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb0:	059a      	lsls	r2, r3, #22
 8009fb2:	d4ef      	bmi.n	8009f94 <__smakebuf_r+0x18>
 8009fb4:	f023 0303 	bic.w	r3, r3, #3
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	e7e3      	b.n	8009f88 <__smakebuf_r+0xc>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	9b00      	ldr	r3, [sp, #0]
 8009fcc:	6163      	str	r3, [r4, #20]
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	6120      	str	r0, [r4, #16]
 8009fd2:	b15b      	cbz	r3, 8009fec <__smakebuf_r+0x70>
 8009fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 f81d 	bl	800a018 <_isatty_r>
 8009fde:	b128      	cbz	r0, 8009fec <__smakebuf_r+0x70>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f023 0303 	bic.w	r3, r3, #3
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	431d      	orrs	r5, r3
 8009ff0:	81a5      	strh	r5, [r4, #12]
 8009ff2:	e7cf      	b.n	8009f94 <__smakebuf_r+0x18>

08009ff4 <_fstat_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d07      	ldr	r5, [pc, #28]	; (800a014 <_fstat_r+0x20>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	f7f7 fcc2 	bl	800198a <_fstat>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d102      	bne.n	800a010 <_fstat_r+0x1c>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	b103      	cbz	r3, 800a010 <_fstat_r+0x1c>
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	bd38      	pop	{r3, r4, r5, pc}
 800a012:	bf00      	nop
 800a014:	20000480 	.word	0x20000480

0800a018 <_isatty_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d06      	ldr	r5, [pc, #24]	; (800a034 <_isatty_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f7 fcc1 	bl	80019aa <_isatty>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_isatty_r+0x1a>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_isatty_r+0x1a>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20000480 	.word	0x20000480

0800a038 <_init>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr

0800a044 <_fini>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr
