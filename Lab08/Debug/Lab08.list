
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca98  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014708  0800cc98  0800cc98  0001cc98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080213a0  080213a0  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  080213a0  080213a0  000313a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080213a8  080213a8  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080213a8  080213a8  000313a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080213ac  080213ac  000313ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080213b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200001e0  08021590  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08021590  00040620  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0004020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd91  00000000  00000000  00040251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004671  00000000  00000000  0005dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00062658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001377  00000000  00000000  00063f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca7f  00000000  00000000  000652f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000233cf  00000000  00000000  00091d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107d85  00000000  00000000  000b5145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c10  00000000  00000000  001bcecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001c4adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cc80 	.word	0x0800cc80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800cc80 	.word	0x0800cc80

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <printOut>:
#include "Utilities/my_basic.h"

void printOut(const char *text)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET)
 80009dc:	bf00      	nop
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <printOut+0x34>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b40      	cmp	r3, #64	; 0x40
 80009ea:	d1f8      	bne.n	80009de <printOut+0xa>
	{
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fc77 	bl	80002e0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <printOut+0x34>)
 80009fc:	f007 f9ce 	bl	8007d9c <HAL_UART_Transmit>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000448 	.word	0x20000448

08000a0c <printOutLine>:

void printOutLine(const char *text)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	printOut(text);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffdd 	bl	80009d4 <printOut>
	printOut("\r\n");
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <printOutLine+0x1c>)
 8000a1c:	f7ff ffda 	bl	80009d4 <printOut>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800cc98 	.word	0x0800cc98

08000a2c <delay>:

	printOutLine(rxData);
}

void delay(uint32_t delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f003 f853 	bl	8003ae0 <HAL_Delay>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <fillScreenColor>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "spi.h"

void fillScreenColor(uint16_t color)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fd4e 	bl	80034f0 <ILI9341_Fill_Screen>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <clearScreenArea>:

void clearScreenArea(Rectangle area, uint16_t color)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
 8000a6e:	8938      	ldrh	r0, [r7, #8]
 8000a70:	8979      	ldrh	r1, [r7, #10]
 8000a72:	89ba      	ldrh	r2, [r7, #12]
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	f002 fac7 	bl	8003008 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	893b      	ldrh	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	89fa      	ldrh	r2, [r7, #14]
 8000a84:	4611      	mov	r1, r2
 8000a86:	897a      	ldrh	r2, [r7, #10]
 8000a88:	1a8a      	subs	r2, r1, r2
 8000a8a:	fb02 f303 	mul.w	r3, r2, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fc8d 	bl	80033b4 <ILI9341_Draw_Colour_Burst>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <setRotation>:

void setRotation(uint8_t rotation)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fb14 	bl	80030dc <ILI9341_Set_Rotation>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <drawText>:

void drawText(const char *text, uint8_t x, uint8_t y, uint16_t size)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4603      	mov	r3, r0
 8000acc:	70fb      	strb	r3, [r7, #3]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70bb      	strb	r3, [r7, #2]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, BLACK, size, WHITE);
 8000ad6:	78ba      	ldrb	r2, [r7, #2]
 8000ad8:	78f9      	ldrb	r1, [r7, #3]
 8000ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f002 f9f8 	bl	8002edc <ILI9341_Draw_Text>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <drawTextAtPoint>:

void drawTextAtPoint(const char *text, Point position, uint16_t size)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	8139      	strh	r1, [r7, #8]
 8000afe:	4613      	mov	r3, r2
 8000b00:	80fb      	strh	r3, [r7, #6]
	drawText(text, position.x, position.y, size);
 8000b02:	7a39      	ldrb	r1, [r7, #8]
 8000b04:	7a7a      	ldrb	r2, [r7, #9]
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff ffd7 	bl	8000abc <drawText>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <drawTextWithColor>:

void drawTextWithColor(const char *text, uint8_t x, uint8_t y, uint16_t color,
		uint16_t size, uint16_t backgroundColor)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af02      	add	r7, sp, #8
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	4608      	mov	r0, r1
 8000b20:	4611      	mov	r1, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	4603      	mov	r3, r0
 8000b26:	70fb      	strb	r3, [r7, #3]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70bb      	strb	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, color, size, backgroundColor);
 8000b30:	8838      	ldrh	r0, [r7, #0]
 8000b32:	78ba      	ldrb	r2, [r7, #2]
 8000b34:	78f9      	ldrb	r1, [r7, #3]
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	8a3b      	ldrh	r3, [r7, #16]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f002 f9cb 	bl	8002edc <ILI9341_Draw_Text>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <drawFilledRectangleAtCoord>:
{
	ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1, y1, color);
}

void drawFilledRectangleAtCoord(Rectangle rectangle, uint16_t color)
{
 8000b4e:	b590      	push	{r4, r7, lr}
 8000b50:	b087      	sub	sp, #28
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(rectangle.x0, rectangle.y0, rectangle.x1, rectangle.y1, color);
 8000b60:	8938      	ldrh	r0, [r7, #8]
 8000b62:	8979      	ldrh	r1, [r7, #10]
 8000b64:	89ba      	ldrh	r2, [r7, #12]
 8000b66:	89fc      	ldrh	r4, [r7, #14]
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	f002 f8bc 	bl	8002cea <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}

08000b7a <drawFilledCircleAtCoord>:
{
	ILI9341_Draw_Filled_Circle(x, y, radius, color);
}

void drawFilledCircleAtCoord(Circle circle, uint16_t color)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b88:	4613      	mov	r3, r2
 8000b8a:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Circle(circle.x, circle.y, circle.radius, color);
 8000b8c:	8938      	ldrh	r0, [r7, #8]
 8000b8e:	8979      	ldrh	r1, [r7, #10]
 8000b90:	89ba      	ldrh	r2, [r7, #12]
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	f002 f821 	bl	8002bda <ILI9341_Draw_Filled_Circle>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <drawImageAtPoint>:
{
	ILI9341_Draw_Image(imageArray, orientation);
}

void drawImageAtPoint(Image image, uint8_t rotation)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8000bac:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8000bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000bba:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000bbe:	701a      	strb	r2, [r3, #0]
	setRotation(rotation);
 8000bc0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000bc4:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff69 	bl	8000aa2 <setRotation>

	Point startPoint = image.drawPoint;
 8000bd0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000bd4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000bd8:	889b      	ldrh	r3, [r3, #4]
 8000bda:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
	Point endPoint = { 0, 0};
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

	switch (rotation)
 8000bea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000bee:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d844      	bhi.n	8000c82 <drawImageAtPoint+0xe2>
 8000bf8:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <drawImageAtPoint+0x60>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c4b 	.word	0x08000c4b
 8000c04:	08000c11 	.word	0x08000c11
 8000c08:	08000c4b 	.word	0x08000c4b
 8000c0c:	08000c11 	.word	0x08000c11
	{
	case SCREEN_HORIZONTAL_1:
	case SCREEN_HORIZONTAL_2:
		endPoint.x = startPoint.x + image.width - 1;
 8000c10:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8000c14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000c18:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000c1c:	88db      	ldrh	r3, [r3, #6]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3b01      	subs	r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.y + image.height - 1;
 8000c2c:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8000c30:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000c34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000c38:	891b      	ldrh	r3, [r3, #8]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8000c48:	e01b      	b.n	8000c82 <drawImageAtPoint+0xe2>
	case SCREEN_VERTICAL_1:
	case SCREEN_VERTICAL_2:
		endPoint.x = startPoint.y + image.height - 1;
 8000c4a:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8000c4e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000c52:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000c56:	891b      	ldrh	r3, [r3, #8]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.x + image.width - 1;
 8000c66:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8000c6a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000c6e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000c72:	88db      	ldrh	r3, [r3, #6]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
	}

	ILI9341_Set_Address(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
 8000c82:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8000c86:	b298      	uxth	r0, r3
 8000c88:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	f897 3204 	ldrb.w	r3, [r7, #516]	; 0x204
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f002 f9b5 	bl	8003008 <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	4834      	ldr	r0, [pc, #208]	; (8000d78 <drawImageAtPoint+0x1d8>)
 8000ca6:	f004 f82b 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	4831      	ldr	r0, [pc, #196]	; (8000d78 <drawImageAtPoint+0x1d8>)
 8000cb2:	f004 f825 	bl	8004d00 <HAL_GPIO_WritePin>

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];
	uint32_t counter = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000cc2:	e035      	b.n	8000d30 <drawImageAtPoint+0x190>
	{
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000cca:	e019      	b.n	8000d00 <drawImageAtPoint+0x160>
		{
			Temp_small_buffer[k] = image.imageArray[counter + k];
 8000ccc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cd0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000cda:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000cde:	440b      	add	r3, r1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	7819      	ldrb	r1, [r3, #0]
 8000ce4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ce8:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8000cec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000cf0:	4413      	add	r3, r2
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000cf6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d00:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d08:	d3e0      	bcc.n	8000ccc <drawImageAtPoint+0x12c>
		}
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000d0a:	f107 0110 	add.w	r1, r7, #16
 8000d0e:	230a      	movs	r3, #10
 8000d10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d14:	4819      	ldr	r0, [pc, #100]	; (8000d7c <drawImageAtPoint+0x1dc>)
 8000d16:	f005 fb66 	bl	80063e6 <HAL_SPI_Transmit>
		counter += BURST_MAX_SIZE;
 8000d1a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000d1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d22:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8000d26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000d30:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d38:	88db      	ldrh	r3, [r3, #6]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d40:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d44:	891b      	ldrh	r3, [r3, #8]
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <drawImageAtPoint+0x1e0>)
 8000d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d50:	1112      	asrs	r2, r2, #4
 8000d52:	17db      	asrs	r3, r3, #31
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d3b1      	bcc.n	8000cc4 <drawImageAtPoint+0x124>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d66:	4804      	ldr	r0, [pc, #16]	; (8000d78 <drawImageAtPoint+0x1d8>)
 8000d68:	f003 ffca 	bl	8004d00 <HAL_GPIO_WritePin>
}
 8000d6c:	bf00      	nop
 8000d6e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	200002b0 	.word	0x200002b0
 8000d80:	10624dd3 	.word	0x10624dd3

08000d84 <getImageArea>:

Rectangle getImageArea(Image image)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Rectangle imageArea =
	{
			image.drawPoint.x,
 8000d92:	793b      	ldrb	r3, [r7, #4]
 8000d94:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000d96:	823b      	strh	r3, [r7, #16]
			image.drawPoint.y,
 8000d98:	797b      	ldrb	r3, [r7, #5]
 8000d9a:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000d9c:	827b      	strh	r3, [r7, #18]
			image.drawPoint.x + image.width,
 8000d9e:	793b      	ldrb	r3, [r7, #4]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4413      	add	r3, r2
 8000da6:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000da8:	82bb      	strh	r3, [r7, #20]
			image.drawPoint.y + image.height
 8000daa:	797b      	ldrb	r3, [r7, #5]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	893b      	ldrh	r3, [r7, #8]
 8000db0:	4413      	add	r3, r2
 8000db2:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000db4:	82fb      	strh	r3, [r7, #22]
	};
	return imageArea;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	461a      	mov	r2, r3
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	cb03      	ldmia	r3!, {r0, r1}
 8000dc0:	6010      	str	r0, [r2, #0]
 8000dc2:	6051      	str	r1, [r2, #4]
}
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	371c      	adds	r7, #28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <getCircleEdgeX>:

uint16_t getCircleEdgeX(Circle circle)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x + circle.radius;
 8000ddc:	883a      	ldrh	r2, [r7, #0]
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <getCircleEdgeY>:

uint16_t getCircleEdgeY(Circle circle)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	463b      	mov	r3, r7
 8000df8:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y + circle.radius;
 8000dfc:	887a      	ldrh	r2, [r7, #2]
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <getCircleEdgeXNegative>:

uint16_t getCircleEdgeXNegative(Circle circle)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	463b      	mov	r3, r7
 8000e18:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x - circle.radius;
 8000e1c:	883a      	ldrh	r2, [r7, #0]
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b29b      	uxth	r3, r3
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <getCircleEdgeYNegative>:

uint16_t getCircleEdgeYNegative(Circle circle)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	463b      	mov	r3, r7
 8000e38:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y - circle.radius;
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	b29b      	uxth	r3, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <MX_ADC1_Init+0xa0>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e94:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000eb6:	f002 fe37 	bl	8003b28 <HAL_ADC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ec0:	f001 f92a 	bl	8002118 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000ed6:	f003 f8a5 	bl	8004024 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f001 f91a 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200001fc 	.word	0x200001fc
 8000ef0:	40012000 	.word	0x40012000

08000ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_ADC_MspInit+0x84>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12b      	bne.n	8000f6e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_ADC_MspInit+0x88>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0x88>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_ADC_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_ADC_MspInit+0x88>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_ADC_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f46:	2308      	movs	r3, #8
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <HAL_ADC_MspInit+0x8c>)
 8000f5a:	f003 fc01 	bl	8004760 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	2012      	movs	r0, #18
 8000f64:	f003 fbb7 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f68:	2012      	movs	r0, #18
 8000f6a:	f003 fbd0 	bl	800470e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b8d      	ldr	r3, [pc, #564]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a8c      	ldr	r2, [pc, #560]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b8a      	ldr	r3, [pc, #552]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b87      	ldr	r3, [pc, #540]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a86      	ldr	r2, [pc, #536]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b84      	ldr	r3, [pc, #528]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	4b81      	ldr	r3, [pc, #516]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a80      	ldr	r2, [pc, #512]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b7e      	ldr	r3, [pc, #504]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b78      	ldr	r3, [pc, #480]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a74      	ldr	r2, [pc, #464]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b72      	ldr	r3, [pc, #456]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b69      	ldr	r3, [pc, #420]	; (80011d0 <MX_GPIO_Init+0x24c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a68      	ldr	r2, [pc, #416]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b66      	ldr	r3, [pc, #408]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a62      	ldr	r2, [pc, #392]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <MX_GPIO_Init+0x24c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2168      	movs	r1, #104	; 0x68
 800105e:	485d      	ldr	r0, [pc, #372]	; (80011d4 <MX_GPIO_Init+0x250>)
 8001060:	f003 fe4e 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f244 0181 	movw	r1, #16513	; 0x4081
 800106a:	485b      	ldr	r0, [pc, #364]	; (80011d8 <MX_GPIO_Init+0x254>)
 800106c:	f003 fe48 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4859      	ldr	r0, [pc, #356]	; (80011dc <MX_GPIO_Init+0x258>)
 8001076:	f003 fe43 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001080:	4857      	ldr	r0, [pc, #348]	; (80011e0 <MX_GPIO_Init+0x25c>)
 8001082:	f003 fe3d 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001086:	2314      	movs	r3, #20
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	484e      	ldr	r0, [pc, #312]	; (80011d4 <MX_GPIO_Init+0x250>)
 800109a:	f003 fb61 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800109e:	2368      	movs	r3, #104	; 0x68
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4847      	ldr	r0, [pc, #284]	; (80011d4 <MX_GPIO_Init+0x250>)
 80010b6:	f003 fb53 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4844      	ldr	r0, [pc, #272]	; (80011e0 <MX_GPIO_Init+0x25c>)
 80010d0:	f003 fb46 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e4:	230b      	movs	r3, #11
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	483c      	ldr	r0, [pc, #240]	; (80011e0 <MX_GPIO_Init+0x25c>)
 80010f0:	f003 fb36 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010f4:	2386      	movs	r3, #134	; 0x86
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001104:	230b      	movs	r3, #11
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4835      	ldr	r0, [pc, #212]	; (80011e4 <MX_GPIO_Init+0x260>)
 8001110:	f003 fb26 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LD3_Pin|LD2_Pin;
 8001114:	f244 0381 	movw	r3, #16513	; 0x4081
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	482a      	ldr	r0, [pc, #168]	; (80011d8 <MX_GPIO_Init+0x254>)
 800112e:	f003 fb17 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001144:	230b      	movs	r3, #11
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <MX_GPIO_Init+0x254>)
 8001150:	f003 fb06 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001154:	2340      	movs	r3, #64	; 0x40
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_GPIO_Init+0x258>)
 800116c:	f003 faf8 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4816      	ldr	r0, [pc, #88]	; (80011dc <MX_GPIO_Init+0x258>)
 8001184:	f003 faec 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001188:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <MX_GPIO_Init+0x25c>)
 80011a2:	f003 fadd 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b8:	230b      	movs	r3, #11
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_GPIO_Init+0x258>)
 80011c4:	f003 facc 	bl	8004760 <HAL_GPIO_Init>

}
 80011c8:	bf00      	nop
 80011ca:	3738      	adds	r7, #56	; 0x38
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020000 	.word	0x40020000

080011e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_I2C1_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_I2C1_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_I2C1_Init+0x74>)
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <MX_I2C1_Init+0x7c>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_I2C1_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_I2C1_Init+0x74>)
 8001224:	f003 fd86 	bl	8004d34 <HAL_I2C_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800122e:	f000 ff73 	bl	8002118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <MX_I2C1_Init+0x74>)
 8001236:	f003 fe0d 	bl	8004e54 <HAL_I2CEx_ConfigAnalogFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001240:	f000 ff6a 	bl	8002118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_I2C1_Init+0x74>)
 8001248:	f003 fe4f 	bl	8004eea <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 ff61 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000244 	.word	0x20000244
 8001260:	40005400 	.word	0x40005400
 8001264:	20404768 	.word	0x20404768

08001268 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0ae      	sub	sp, #184	; 0xb8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2290      	movs	r2, #144	; 0x90
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f008 f988 	bl	800959e <memset>
  if(i2cHandle->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_I2C_MspInit+0xb4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d13c      	bne.n	8001312 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800129e:	2300      	movs	r3, #0
 80012a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fba0 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012b2:	f000 ff31 	bl	8002118 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_I2C_MspInit+0xb8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_I2C_MspInit+0xb8>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_I2C_MspInit+0xb8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AM2320_SCL_Pin|AM2320_SDA_Pin;
 80012ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f2:	4619      	mov	r1, r3
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <HAL_I2C_MspInit+0xbc>)
 80012f6:	f003 fa33 	bl	8004760 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_I2C_MspInit+0xb8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0xb8>)
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_I2C_MspInit+0xb8>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	37b8      	adds	r7, #184	; 0xb8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40005400 	.word	0x40005400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800132c:	f3bf 8f4f 	dsb	sy
}
 8001330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001332:	f3bf 8f6f 	isb	sy
}
 8001336:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <SCB_EnableICache+0x48>)
 800133a:	2200      	movs	r2, #0
 800133c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001340:	f3bf 8f4f 	dsb	sy
}
 8001344:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001346:	f3bf 8f6f 	isb	sy
}
 800134a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SCB_EnableICache+0x48>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <SCB_EnableICache+0x48>)
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001356:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001358:	f3bf 8f4f 	dsb	sy
}
 800135c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135e:	f3bf 8f6f 	isb	sy
}
 8001362:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <SCB_EnableDCache+0x84>)
 800137c:	2200      	movs	r2, #0
 800137e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001382:	f3bf 8f4f 	dsb	sy
}
 8001386:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <SCB_EnableDCache+0x84>)
 800138a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800138e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0b5b      	lsrs	r3, r3, #13
 8001394:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001398:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80013ac:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013b2:	4911      	ldr	r1, [pc, #68]	; (80013f8 <SCB_EnableDCache+0x84>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1e5a      	subs	r2, r3, #1
 80013be:	60ba      	str	r2, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ef      	bne.n	80013a4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	60fa      	str	r2, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e5      	bne.n	800139a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80013ce:	f3bf 8f4f 	dsb	sy
}
 80013d2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SCB_EnableDCache+0x84>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <SCB_EnableDCache+0x84>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013e0:	f3bf 8f4f 	dsb	sy
}
 80013e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013e6:	f3bf 8f6f 	isb	sy
}
 80013ea:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <getTemperature>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTemperature(float *temperature) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	// In celcius
	if (*temperature > 100.0)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001444 <getTemperature+0x48>
 800140e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	dd04      	ble.n	8001422 <getTemperature+0x26>
	{
		*temperature = 0.5;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800141e:	601a      	str	r2, [r3, #0]
	} else
	{
		*temperature += 20.0;
	}
}
 8001420:	e009      	b.n	8001436 <getTemperature+0x3a>
		*temperature += 20.0;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800142c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edc3 7a00 	vstr	s15, [r3]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	42c80000 	.word	0x42c80000

08001448 <getTemperatureText>:

void getTemperatureText(float temperature, char *temperatureString) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001452:	6038      	str	r0, [r7, #0]
	sprintf(temperatureString, "%.1f C", temperature);
 8001454:	edd7 7a01 	vldr	s15, [r7, #4]
 8001458:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145c:	ec53 2b17 	vmov	r2, r3, d7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <getTemperatureText+0x28>)
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f008 f838 	bl	80094d8 <siprintf>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	0800cce0 	.word	0x0800cce0

08001474 <getHumidity>:

void getHumidity(float *humidity) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	// In Relative Humidity, %RH
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <getHumidityText>:

void getHumidityText(float humidity, char *humidityString) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001492:	6038      	str	r0, [r7, #0]
	sprintf(humidityString, "%.1f %%RH", humidity);
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800149c:	ec53 2b17 	vmov	r2, r3, d7
 80014a0:	4903      	ldr	r1, [pc, #12]	; (80014b0 <getHumidityText+0x28>)
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f008 f818 	bl	80094d8 <siprintf>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800cce8 	.word	0x0800cce8
 80014b4:	00000000 	.word	0x00000000

080014b8 <convertColorToRgb565>:

uint16_t convertColorToRgb565(float redIntensity, float greenIntensity, float blueIntensity) {
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0a03 	vstr	s0, [r7, #12]
 80014c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80014c6:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t red = (uint16_t)(redIntensity * 31.0 + 0.5);
 80014ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d2:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 80014d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80014de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014e6:	ee17 3a90 	vmov	r3, s15
 80014ea:	82fb      	strh	r3, [r7, #22]
  uint16_t green = (uint16_t)(greenIntensity * 63.0 + 0.5);
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001558 <convertColorToRgb565+0xa0>
 80014f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014fc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001500:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001504:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001508:	ee17 3a90 	vmov	r3, s15
 800150c:	82bb      	strh	r3, [r7, #20]
  uint16_t blue = (uint16_t)(blueIntensity * 31.0 + 0.5);
 800150e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001512:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001516:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 800151a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800151e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001522:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001526:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800152a:	ee17 3a90 	vmov	r3, s15
 800152e:	827b      	strh	r3, [r7, #18]

  uint16_t color = (red << 11) | (green << 5) | blue;
 8001530:	8afb      	ldrh	r3, [r7, #22]
 8001532:	02db      	lsls	r3, r3, #11
 8001534:	b21a      	sxth	r2, r3
 8001536:	8abb      	ldrh	r3, [r7, #20]
 8001538:	015b      	lsls	r3, r3, #5
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21a      	sxth	r2, r3
 8001540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	823b      	strh	r3, [r7, #16]

  return color;
 800154a:	8a3b      	ldrh	r3, [r7, #16]
}
 800154c:	4618      	mov	r0, r3
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	00000000 	.word	0x00000000
 800155c:	404f8000 	.word	0x404f8000

08001560 <createColorBox>:

Rectangle createColorBox(Circle circle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	e883 0006 	stmia.w	r3, {r1, r2}
	const uint16_t BOX_WIDTH = 150;
 800156e:	2396      	movs	r3, #150	; 0x96
 8001570:	83fb      	strh	r3, [r7, #30]
	const uint16_t BOX_HEIGHT = 20;
 8001572:	2314      	movs	r3, #20
 8001574:	83bb      	strh	r3, [r7, #28]
	const uint16_t GAP_X_CIRCLE_AND_BOX = 15;
 8001576:	230f      	movs	r3, #15
 8001578:	837b      	strh	r3, [r7, #26]

	Rectangle rectangle = {
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX,
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001580:	f7ff fc26 	bl	8000dd0 <getCircleEdgeX>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	8b7b      	ldrh	r3, [r7, #26]
 800158a:	4413      	add	r3, r2
 800158c:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800158e:	823b      	strh	r3, [r7, #16]
			circle.y - (circle.radius / 2),
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	893b      	ldrh	r3, [r7, #8]
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800159c:	827b      	strh	r3, [r7, #18]
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a4:	f7ff fc14 	bl	8000dd0 <getCircleEdgeX>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	8b7b      	ldrh	r3, [r7, #26]
 80015ae:	4413      	add	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	4413      	add	r3, r2
 80015b6:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 80015b8:	82bb      	strh	r3, [r7, #20]
			circle.y + BOX_HEIGHT
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	8bbb      	ldrh	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 80015c2:	82fb      	strh	r3, [r7, #22]
	};
	return rectangle;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	cb03      	ldmia	r3!, {r0, r1}
 80015ce:	6010      	str	r0, [r2, #0]
 80015d0:	6051      	str	r1, [r2, #4]
}
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <createColorIntensityBar>:

Rectangle createColorIntensityBar(Rectangle refRectangle, float colorIntensity)
{
 80015da:	b480      	push	{r7}
 80015dc:	b089      	sub	sp, #36	; 0x24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	e883 0006 	stmia.w	r3, {r1, r2}
 80015e8:	ed87 0a00 	vstr	s0, [r7]
	const uint16_t BOX_WIDTH = 150;
 80015ec:	2396      	movs	r3, #150	; 0x96
 80015ee:	83fb      	strh	r3, [r7, #30]

	Rectangle intensityBar = {
			refRectangle.x0,
 80015f0:	88bb      	ldrh	r3, [r7, #4]
	Rectangle intensityBar = {
 80015f2:	82bb      	strh	r3, [r7, #20]
			refRectangle.y0,
 80015f4:	88fb      	ldrh	r3, [r7, #6]
	Rectangle intensityBar = {
 80015f6:	82fb      	strh	r3, [r7, #22]
			refRectangle.x0 + (int) (colorIntensity * BOX_WIDTH),
 80015f8:	88ba      	ldrh	r2, [r7, #4]
 80015fa:	8bfb      	ldrh	r3, [r7, #30]
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001604:	edd7 7a00 	vldr	s15, [r7]
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001610:	ee17 3a90 	vmov	r3, s15
 8001614:	b29b      	uxth	r3, r3
 8001616:	4413      	add	r3, r2
 8001618:	b29b      	uxth	r3, r3
	Rectangle intensityBar = {
 800161a:	833b      	strh	r3, [r7, #24]
			refRectangle.y1
 800161c:	897b      	ldrh	r3, [r7, #10]
	Rectangle intensityBar = {
 800161e:	837b      	strh	r3, [r7, #26]
	};
	return intensityBar;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	461a      	mov	r2, r3
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	cb03      	ldmia	r3!, {r0, r1}
 800162a:	6010      	str	r0, [r2, #0]
 800162c:	6051      	str	r1, [r2, #4]
}
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <drawColorIntensityBar>:

void drawColorIntensityBar(Rectangle colorBox, ColorInfo colorInfo, uint16_t brightColor)
{
 800163a:	b082      	sub	sp, #8
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	463c      	mov	r4, r7
 8001644:	e884 0003 	stmia.w	r4, {r0, r1}
 8001648:	f107 0120 	add.w	r1, r7, #32
 800164c:	e881 000c 	stmia.w	r1, {r2, r3}

	Rectangle colorIntensityBar = createColorIntensityBar(colorBox, colorInfo.intensity);
 8001650:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	463b      	mov	r3, r7
 800165e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001662:	f7ff ffba 	bl	80015da <createColorIntensityBar>

	drawFilledRectangleAtCoord(colorBox, brightColor);
 8001666:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001668:	461a      	mov	r2, r3
 800166a:	463b      	mov	r3, r7
 800166c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001670:	f7ff fa6d 	bl	8000b4e <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(colorIntensityBar, colorInfo.color);
 8001674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001676:	461a      	mov	r2, r3
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001680:	f7ff fa65 	bl	8000b4e <drawFilledRectangleAtCoord>
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800168e:	b002      	add	sp, #8
 8001690:	4770      	bx	lr
	...

08001694 <drawColorIntensityPercentageText>:

void drawColorIntensityPercentageText(Rectangle colorBox, ColorInfo colorInfo)
{
 8001694:	b082      	sub	sp, #8
 8001696:	b590      	push	{r4, r7, lr}
 8001698:	b089      	sub	sp, #36	; 0x24
 800169a:	af00      	add	r7, sp, #0
 800169c:	463c      	mov	r4, r7
 800169e:	e884 0003 	stmia.w	r4, {r0, r1}
 80016a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80016a6:	e881 000c 	stmia.w	r1, {r2, r3}
	char text[10];
	const uint8_t GAP_X_BOX_AND_PERCENTAGE = 10;
 80016aa:	230a      	movs	r3, #10
 80016ac:	77fb      	strb	r3, [r7, #31]
	const uint8_t COLOR_PERCENTAGE_FONT_SIZE = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	77bb      	strb	r3, [r7, #30]

	Point percentagePoint = {colorBox.x1 + GAP_X_BOX_AND_PERCENTAGE, colorBox.y0};
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	7ffb      	ldrb	r3, [r7, #31]
 80016b8:	4413      	add	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	743b      	strb	r3, [r7, #16]
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	747b      	strb	r3, [r7, #17]
	Rectangle clearArea = {percentagePoint.x, percentagePoint.y, percentagePoint.x + 50, percentagePoint.y + 20};
 80016c4:	7c3b      	ldrb	r3, [r7, #16]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	813b      	strh	r3, [r7, #8]
 80016ca:	7c7b      	ldrb	r3, [r7, #17]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	817b      	strh	r3, [r7, #10]
 80016d0:	7c3b      	ldrb	r3, [r7, #16]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3332      	adds	r3, #50	; 0x32
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	81bb      	strh	r3, [r7, #12]
 80016da:	7c7b      	ldrb	r3, [r7, #17]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	3314      	adds	r3, #20
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	81fb      	strh	r3, [r7, #14]

	sprintf(text, "%d#", (int) (colorInfo.intensity * 100));
 80016e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001734 <drawColorIntensityPercentageText+0xa0>
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	ee17 2a90 	vmov	r2, s15
 80016fc:	490e      	ldr	r1, [pc, #56]	; (8001738 <drawColorIntensityPercentageText+0xa4>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 feea 	bl	80094d8 <siprintf>

	clearScreenArea(clearArea, WHITE);
 8001704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001710:	f7ff f9a4 	bl	8000a5c <clearScreenArea>
	drawTextAtPoint(text, percentagePoint, COLOR_PERCENTAGE_FONT_SIZE);
 8001714:	7fbb      	ldrb	r3, [r7, #30]
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f9e8 	bl	8000af4 <drawTextAtPoint>
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	; 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800172e:	b002      	add	sp, #8
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	42c80000 	.word	0x42c80000
 8001738:	0800ccf4 	.word	0x0800ccf4

0800173c <drawHueCircle>:

void drawHueCircle(ColorInfo mixedColorInfo)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	drawFilledCircleAtCoord(mixedColorInfo.circle, mixedColorInfo.color);
 8001748:	897b      	ldrh	r3, [r7, #10]
 800174a:	461a      	mov	r2, r3
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001752:	f7ff fa12 	bl	8000b7a <drawFilledCircleAtCoord>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <drawColorInfo>:

void drawColorInfo(ColorInfo colorInfo, uint16_t brightColor)
{
 800175e:	b590      	push	{r4, r7, lr}
 8001760:	b089      	sub	sp, #36	; 0x24
 8001762:	af02      	add	r7, sp, #8
 8001764:	1d3c      	adds	r4, r7, #4
 8001766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800176a:	807b      	strh	r3, [r7, #2]
	Rectangle boxArea = createColorBox(colorInfo.circle);
 800176c:	f107 0010 	add.w	r0, r7, #16
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001776:	f7ff fef3 	bl	8001560 <createColorBox>
	drawFilledCircleAtCoord(colorInfo.circle, colorInfo.color);
 800177a:	897b      	ldrh	r3, [r7, #10]
 800177c:	461a      	mov	r2, r3
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001784:	f7ff f9f9 	bl	8000b7a <drawFilledCircleAtCoord>
	drawColorIntensityBar(boxArea, colorInfo, brightColor);
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	cb0c      	ldmia	r3, {r2, r3}
 8001794:	f107 0110 	add.w	r1, r7, #16
 8001798:	c903      	ldmia	r1, {r0, r1}
 800179a:	f7ff ff4e 	bl	800163a <drawColorIntensityBar>
	drawColorIntensityPercentageText(boxArea, colorInfo);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	cb0c      	ldmia	r3, {r2, r3}
 80017a6:	f107 0110 	add.w	r1, r7, #16
 80017aa:	c903      	ldmia	r1, {r0, r1}
 80017ac:	f7ff ff72 	bl	8001694 <drawColorIntensityPercentageText>
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}

080017b8 <drawRgbInfo>:

void drawRgbInfo(ColorInfo redColor, ColorInfo greenColor, ColorInfo blueColor, ColorInfo mixedColor)
{
 80017b8:	b082      	sub	sp, #8
 80017ba:	b590      	push	{r4, r7, lr}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	1d3c      	adds	r4, r7, #4
 80017c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
	drawHueCircle(mixedColor);
 80017c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d0:	f7ff ffb4 	bl	800173c <drawHueCircle>
	drawColorInfo(redColor, BRIGHT_RED);
 80017d4:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80017d8:	1d3a      	adds	r2, r7, #4
 80017da:	ca07      	ldmia	r2, {r0, r1, r2}
 80017dc:	f7ff ffbf 	bl	800175e <drawColorInfo>
	drawColorInfo(greenColor, BRIGHT_GREEN);
 80017e0:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 80017e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80017e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ea:	f7ff ffb8 	bl	800175e <drawColorInfo>
	drawColorInfo(blueColor, BRIGHT_BLUE);
 80017ee:	f24e 733f 	movw	r3, #59199	; 0xe73f
 80017f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f8:	f7ff ffb1 	bl	800175e <drawColorInfo>
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001806:	b002      	add	sp, #8
 8001808:	4770      	bx	lr

0800180a <isTouchWithinCircle>:

uint8_t isTouchWithinCircle(Circle circle, uint16_t xPos, uint16_t yPos)
{
 800180a:	b590      	push	{r4, r7, lr}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	f107 0408 	add.w	r4, r7, #8
 8001814:	e884 0003 	stmia.w	r4, {r0, r1}
 8001818:	4611      	mov	r1, r2
 800181a:	461a      	mov	r2, r3
 800181c:	460b      	mov	r3, r1
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	4613      	mov	r3, r2
 8001822:	80bb      	strh	r3, [r7, #4]
	uint16_t xPositive = getCircleEdgeX(circle);
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800182c:	f7ff fad0 	bl	8000dd0 <getCircleEdgeX>
 8001830:	4603      	mov	r3, r0
 8001832:	82fb      	strh	r3, [r7, #22]
	uint16_t xNegative = getCircleEdgeXNegative(circle);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	e893 0003 	ldmia.w	r3, {r0, r1}
 800183c:	f7ff fae8 	bl	8000e10 <getCircleEdgeXNegative>
 8001840:	4603      	mov	r3, r0
 8001842:	82bb      	strh	r3, [r7, #20]
	uint16_t yPositive = getCircleEdgeY(circle);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	e893 0003 	ldmia.w	r3, {r0, r1}
 800184c:	f7ff fad0 	bl	8000df0 <getCircleEdgeY>
 8001850:	4603      	mov	r3, r0
 8001852:	827b      	strh	r3, [r7, #18]
	uint16_t yNegative = getCircleEdgeYNegative(circle);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800185c:	f7ff fae8 	bl	8000e30 <getCircleEdgeYNegative>
 8001860:	4603      	mov	r3, r0
 8001862:	823b      	strh	r3, [r7, #16]

	if (xPos > xNegative && xPos < xPositive && yPos > yNegative && yPos < yPositive)
 8001864:	88fa      	ldrh	r2, [r7, #6]
 8001866:	8abb      	ldrh	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	d90d      	bls.n	8001888 <isTouchWithinCircle+0x7e>
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	8afb      	ldrh	r3, [r7, #22]
 8001870:	429a      	cmp	r2, r3
 8001872:	d209      	bcs.n	8001888 <isTouchWithinCircle+0x7e>
 8001874:	88ba      	ldrh	r2, [r7, #4]
 8001876:	8a3b      	ldrh	r3, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d905      	bls.n	8001888 <isTouchWithinCircle+0x7e>
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	8a7b      	ldrh	r3, [r7, #18]
 8001880:	429a      	cmp	r2, r3
 8001882:	d201      	bcs.n	8001888 <isTouchWithinCircle+0x7e>
	{
		return 1;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <isTouchWithinCircle+0x80>
	} else
	{
		return 0;
 8001888:	2300      	movs	r3, #0
	}
}
 800188a:	4618      	mov	r0, r3
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}

08001892 <isTouchWithinRectangle>:

uint8_t isTouchWithinRectangle(Rectangle rectangle, uint16_t xPos, uint16_t yPos)
{
 8001892:	b490      	push	{r4, r7}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	f107 0408 	add.w	r4, r7, #8
 800189c:	e884 0003 	stmia.w	r4, {r0, r1}
 80018a0:	4611      	mov	r1, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	460b      	mov	r3, r1
 80018a6:	80fb      	strh	r3, [r7, #6]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80bb      	strh	r3, [r7, #4]
	if (xPos >= rectangle.x0 && xPos <= rectangle.x1 && yPos <= rectangle.y1 && yPos >= rectangle.y0)
 80018ac:	893b      	ldrh	r3, [r7, #8]
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d30d      	bcc.n	80018d0 <isTouchWithinRectangle+0x3e>
 80018b4:	89bb      	ldrh	r3, [r7, #12]
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d809      	bhi.n	80018d0 <isTouchWithinRectangle+0x3e>
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	88ba      	ldrh	r2, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d805      	bhi.n	80018d0 <isTouchWithinRectangle+0x3e>
 80018c4:	897b      	ldrh	r3, [r7, #10]
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d301      	bcc.n	80018d0 <isTouchWithinRectangle+0x3e>
	{
		return 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <isTouchWithinRectangle+0x40>
	} else
	{
		return 0;
 80018d0:	2300      	movs	r3, #0
	}

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc90      	pop	{r4, r7}
 80018da:	4770      	bx	lr

080018dc <addColorIntensity>:

void addColorIntensity(ColorInfo *colorInfo)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	const float MAX_INTENSITY = 1.0;
 80018e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018e8:	60fb      	str	r3, [r7, #12]
	const float STEP_INTENSITY = 0.1;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <addColorIntensity+0x50>)
 80018ec:	60bb      	str	r3, [r7, #8]

	if (colorInfo->intensity >= MAX_INTENSITY) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	d804      	bhi.n	800190c <addColorIntensity+0x30>
		colorInfo->intensity = 0.0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
	} else
	{
		colorInfo->intensity += STEP_INTENSITY;
	}
}
 800190a:	e009      	b.n	8001920 <addColorIntensity+0x44>
		colorInfo->intensity += STEP_INTENSITY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001912:	edd7 7a02 	vldr	s15, [r7, #8]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	3dcccccd 	.word	0x3dcccccd

08001930 <checkTouchHueCircle>:
	sprintf(text, "T: (%d,%d)", xPos, yPos);
	drawText(text, 50, 180, 3);
}

void checkTouchHueCircle(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
	uint16_t xPos = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	83fb      	strh	r3, [r7, #30]
	uint16_t yPos = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	83bb      	strh	r3, [r7, #28]

	int isDisplaying = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]

	while (isDisplaying) {
 800194a:	e080      	b.n	8001a4e <checkTouchHueCircle+0x11e>
		HAL_Delay(10);
 800194c:	200a      	movs	r0, #10
 800194e:	f002 f8c7 	bl	8003ae0 <HAL_Delay>

		if (TP_Touchpad_Pressed())
 8001952:	f002 f84f 	bl	80039f4 <TP_Touchpad_Pressed>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d078      	beq.n	8001a4e <checkTouchHueCircle+0x11e>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f001 ff85 	bl	8003870 <TP_Read_Coordinates>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	d112      	bne.n	8001992 <checkTouchHueCircle+0x62>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 800196c:	2301      	movs	r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d106      	bne.n	8001980 <checkTouchHueCircle+0x50>
				{
					xPos = position_array[1];
 8001972:	8afb      	ldrh	r3, [r7, #22]
 8001974:	83fb      	strh	r3, [r7, #30]
					yPos = SCREEN_HEIGHT - position_array[0];
 8001976:	8abb      	ldrh	r3, [r7, #20]
 8001978:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800197c:	83bb      	strh	r3, [r7, #28]
 800197e:	e008      	b.n	8001992 <checkTouchHueCircle+0x62>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001980:	2301      	movs	r3, #1
 8001982:	2b03      	cmp	r3, #3
 8001984:	d105      	bne.n	8001992 <checkTouchHueCircle+0x62>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 8001986:	8afb      	ldrh	r3, [r7, #22]
 8001988:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800198c:	83fb      	strh	r3, [r7, #30]
					yPos = position_array[0];
 800198e:	8abb      	ldrh	r3, [r7, #20]
 8001990:	83bb      	strh	r3, [r7, #28]
				}
			}

			if (isTouchWithinCircle(redColor->circle, xPos, yPos))
 8001992:	8bbb      	ldrh	r3, [r7, #28]
 8001994:	8bfa      	ldrh	r2, [r7, #30]
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	c903      	ldmia	r1, {r0, r1}
 800199a:	f7ff ff36 	bl	800180a <isTouchWithinCircle>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <checkTouchHueCircle+0x88>
			{
				addColorIntensity(redColor);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff99 	bl	80018dc <addColorIntensity>
				drawColorInfo(*redColor, BRIGHT_RED);
 80019aa:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b2:	f7ff fed4 	bl	800175e <drawColorInfo>
 80019b6:	e030      	b.n	8001a1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(greenColor->circle, xPos, yPos))
 80019b8:	8bbb      	ldrh	r3, [r7, #28]
 80019ba:	8bfa      	ldrh	r2, [r7, #30]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	c903      	ldmia	r1, {r0, r1}
 80019c0:	f7ff ff23 	bl	800180a <isTouchWithinCircle>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <checkTouchHueCircle+0xae>
			{
				addColorIntensity(greenColor);
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f7ff ff86 	bl	80018dc <addColorIntensity>
				drawColorInfo(*greenColor, BRIGHT_GREEN);
 80019d0:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d8:	f7ff fec1 	bl	800175e <drawColorInfo>
 80019dc:	e01d      	b.n	8001a1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(blueColor->circle, xPos, yPos))
 80019de:	8bbb      	ldrh	r3, [r7, #28]
 80019e0:	8bfa      	ldrh	r2, [r7, #30]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	c903      	ldmia	r1, {r0, r1}
 80019e6:	f7ff ff10 	bl	800180a <isTouchWithinCircle>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <checkTouchHueCircle+0xd4>
			{
				addColorIntensity(blueColor);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff73 	bl	80018dc <addColorIntensity>
				drawColorInfo(*blueColor, BRIGHT_BLUE);
 80019f6:	f24e 733f 	movw	r3, #59199	; 0xe73f
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fe:	f7ff feae 	bl	800175e <drawColorInfo>
 8001a02:	e00a      	b.n	8001a1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(mixedColor->circle, xPos, yPos))
 8001a04:	8bbb      	ldrh	r3, [r7, #28]
 8001a06:	8bfa      	ldrh	r2, [r7, #30]
 8001a08:	6839      	ldr	r1, [r7, #0]
 8001a0a:	c903      	ldmia	r1, {r0, r1}
 8001a0c:	f7ff fefd 	bl	800180a <isTouchWithinCircle>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <checkTouchHueCircle+0xea>
			{
				isDisplaying = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
			}

			mixedColor->color = convertColorToRgb565(redColor->intensity, greenColor->intensity, blueColor->intensity);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a2c:	eeb0 1a66 	vmov.f32	s2, s13
 8001a30:	eef0 0a47 	vmov.f32	s1, s14
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	f7ff fd3e 	bl	80014b8 <convertColorToRgb565>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	80da      	strh	r2, [r3, #6]
			drawHueCircle(*mixedColor);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a4a:	f7ff fe77 	bl	800173c <drawHueCircle>
	while (isDisplaying) {
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f af7b 	bne.w	800194c <checkTouchHueCircle+0x1c>
		}
	}
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <startTimerInStudentInfoPage>:

void startTimerInStudentInfoPage()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	count = 0;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <startTimerInStudentInfoPage+0x20>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Init(&htim2);
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <startTimerInStudentInfoPage+0x24>)
 8001a6c:	f004 ffb2 	bl	80069d4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <startTimerInStudentInfoPage+0x24>)
 8001a72:	f005 f863 	bl	8006b3c <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <startTimerInStudentInfoPage+0x28>)
 8001a78:	f002 f89a 	bl	8003bb0 <HAL_ADC_Start_IT>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000298 	.word	0x20000298
 8001a84:	20000364 	.word	0x20000364
 8001a88:	200001fc 	.word	0x200001fc

08001a8c <stopTimerInStudentInfoPage>:

void stopTimerInStudentInfoPage()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <stopTimerInStudentInfoPage+0x14>)
 8001a92:	f004 fff6 	bl	8006a82 <HAL_TIM_Base_DeInit>
	HAL_ADC_Stop_IT(&hadc1);
 8001a96:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <stopTimerInStudentInfoPage+0x18>)
 8001a98:	f002 f962 	bl	8003d60 <HAL_ADC_Stop_IT>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000364 	.word	0x20000364
 8001aa4:	200001fc 	.word	0x200001fc

08001aa8 <startTimerOnSensor>:

void startTimerOnSensor()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <startTimerOnSensor+0x10>)
 8001aae:	f005 f8b5 	bl	8006c1c <HAL_TIM_Base_Start_IT>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200003b0 	.word	0x200003b0

08001abc <stopTimerOnSensor>:

void stopTimerOnSensor()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <stopTimerOnSensor+0x10>)
 8001ac2:	f005 f923 	bl	8006d0c <HAL_TIM_Base_Stop_IT>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003b0 	.word	0x200003b0

08001ad0 <drawColorInfoPage>:

void drawColorInfoPage(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b08c      	sub	sp, #48	; 0x30
 8001ad4:	af08      	add	r7, sp, #32
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
	fillScreenColor(WHITE);
 8001ade:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ae2:	f7fe ffae 	bl	8000a42 <fillScreenColor>
	setRotation(SCREEN_ROTATION);
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe ffda 	bl	8000aa2 <setRotation>

	startTimerOnSensor();
 8001aee:	f7ff ffdb 	bl	8001aa8 <startTimerOnSensor>
	drawRgbInfo(*redColor, *greenColor, *blueColor, *mixedColor);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	68fc      	ldr	r4, [r7, #12]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	ad05      	add	r5, sp, #20
 8001afa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001afc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	ad02      	add	r5, sp, #8
 8001b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b0a:	466d      	mov	r5, sp
 8001b0c:	1d1a      	adds	r2, r3, #4
 8001b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b1c:	f7ff fe4c 	bl	80017b8 <drawRgbInfo>
	checkTouchHueCircle(redColor, greenColor, blueColor, mixedColor);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ff02 	bl	8001930 <checkTouchHueCircle>
	stopTimerOnSensor();
 8001b2c:	f7ff ffc6 	bl	8001abc <stopTimerOnSensor>
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdb0      	pop	{r4, r5, r7, pc}

08001b38 <drawStudentInfoText>:

void drawStudentInfoText(Point endImagePoint, uint16_t textColor)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b08d      	sub	sp, #52	; 0x34
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	80b8      	strh	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
	const int LINE_SPACEING_SIZE = 20;
 8001b44:	2314      	movs	r3, #20
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
	const int FONT_SIZE = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]

	char *group = "Group No.3";
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <drawStudentInfoText+0xc4>)
 8001b4e:	61fb      	str	r3, [r7, #28]
	char *firstName = "Natchanon";
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <drawStudentInfoText+0xc8>)
 8001b52:	61bb      	str	r3, [r7, #24]
	char *lastName = "Bunyachawaset";
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <drawStudentInfoText+0xcc>)
 8001b56:	617b      	str	r3, [r7, #20]
	char *myId = "64011113";
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <drawStudentInfoText+0xd0>)
 8001b5a:	613b      	str	r3, [r7, #16]

	Point infoPos =
	{
			endImagePoint.x + 10,
 8001b5c:	793b      	ldrb	r3, [r7, #4]
 8001b5e:	330a      	adds	r3, #10
 8001b60:	b2db      	uxtb	r3, r3
	Point infoPos =
 8001b62:	733b      	strb	r3, [r7, #12]
 8001b64:	2332      	movs	r3, #50	; 0x32
 8001b66:	737b      	strb	r3, [r7, #13]
			50
	};

	drawTextWithColor(group, infoPos.x, infoPos.y, textColor, FONT_SIZE, WHITE);
 8001b68:	7b39      	ldrb	r1, [r7, #12]
 8001b6a:	7b7a      	ldrb	r2, [r7, #13]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8878      	ldrh	r0, [r7, #2]
 8001b72:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001b76:	9401      	str	r4, [sp, #4]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	69f8      	ldr	r0, [r7, #28]
 8001b7e:	f7fe ffca 	bl	8000b16 <drawTextWithColor>
	drawTextWithColor(firstName, infoPos.x, infoPos.y + LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001b82:	7b39      	ldrb	r1, [r7, #12]
 8001b84:	7b7a      	ldrb	r2, [r7, #13]
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	8878      	ldrh	r0, [r7, #2]
 8001b94:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001b98:	9401      	str	r4, [sp, #4]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	69b8      	ldr	r0, [r7, #24]
 8001ba0:	f7fe ffb9 	bl	8000b16 <drawTextWithColor>
	drawTextWithColor(lastName, infoPos.x, infoPos.y + 2 *LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001ba4:	7b39      	ldrb	r1, [r7, #12]
 8001ba6:	7b7a      	ldrb	r2, [r7, #13]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	8878      	ldrh	r0, [r7, #2]
 8001bba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001bbe:	9401      	str	r4, [sp, #4]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6978      	ldr	r0, [r7, #20]
 8001bc6:	f7fe ffa6 	bl	8000b16 <drawTextWithColor>
	drawTextWithColor(myId, infoPos.x, infoPos.y + 3*LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001bca:	7b39      	ldrb	r1, [r7, #12]
 8001bcc:	7b7a      	ldrb	r2, [r7, #13]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	0040      	lsls	r0, r0, #1
 8001bd6:	4403      	add	r3, r0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	8878      	ldrh	r0, [r7, #2]
 8001be4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001be8:	9401      	str	r4, [sp, #4]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	4603      	mov	r3, r0
 8001bee:	6938      	ldr	r0, [r7, #16]
 8001bf0:	f7fe ff91 	bl	8000b16 <drawTextWithColor>
}
 8001bf4:	bf00      	nop
 8001bf6:	372c      	adds	r7, #44	; 0x2c
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	0800cd04 	.word	0x0800cd04
 8001c00:	0800cd10 	.word	0x0800cd10
 8001c04:	0800cd1c 	.word	0x0800cd1c
 8001c08:	0800cd2c 	.word	0x0800cd2c

08001c0c <drawStudentInfoPage>:

void drawStudentInfoPage(ColorInfo colorInfo, Image image)
{
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	b590      	push	{r4, r7, lr}
 8001c10:	b091      	sub	sp, #68	; 0x44
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	1d3c      	adds	r4, r7, #4
 8001c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c1a:	657b      	str	r3, [r7, #84]	; 0x54

	fillScreenColor(WHITE);
 8001c1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c20:	f7fe ff0f 	bl	8000a42 <fillScreenColor>
	setRotation(SCREEN_ROTATION);
 8001c24:	2301      	movs	r3, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe ff3b 	bl	8000aa2 <setRotation>

	Point endImagePoint = {
			image.drawPoint.x + image.width,
 8001c2c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001c30:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	b2db      	uxtb	r3, r3
	Point endImagePoint = {
 8001c3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			image.drawPoint.y + image.height
 8001c3e:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8001c42:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
	Point endImagePoint = {
 8001c4c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	};
	Rectangle imageArea = getImageArea(image);
 8001c50:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001c54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5a:	f7ff f893 	bl	8000d84 <getImageArea>

	drawImageAtPoint(image, SCREEN_ROTATION);
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c66:	f7fe ff9b 	bl	8000ba0 <drawImageAtPoint>
	drawStudentInfoText(endImagePoint, colorInfo.color);
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c70:	f7ff ff62 	bl	8001b38 <drawStudentInfoText>

	uint16_t xPos = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t yPos = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	87bb      	strh	r3, [r7, #60]	; 0x3c

	startTimerInStudentInfoPage();
 8001c7c:	f7ff fef0 	bl	8001a60 <startTimerInStudentInfoPage>

	int isDisplaying = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
	while (isDisplaying) {
 8001c84:	e042      	b.n	8001d0c <drawStudentInfoPage+0x100>
		char txt[20];
		sprintf(txt, "Count: %d", (int) count);
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <drawStudentInfoPage+0x118>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	4925      	ldr	r1, [pc, #148]	; (8001d28 <drawStudentInfoPage+0x11c>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 fc20 	bl	80094d8 <siprintf>
		drawText(txt, 10, 200, 3);
 8001c98:	f107 0018 	add.w	r0, r7, #24
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	22c8      	movs	r2, #200	; 0xc8
 8001ca0:	210a      	movs	r1, #10
 8001ca2:	f7fe ff0b 	bl	8000abc <drawText>
		if (count > 4)
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <drawStudentInfoPage+0x118>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d902      	bls.n	8001cb4 <drawStudentInfoPage+0xa8>
		{
			isDisplaying = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb2:	e02b      	b.n	8001d0c <drawStudentInfoPage+0x100>
		} else if (TP_Touchpad_Pressed())
 8001cb4:	f001 fe9e 	bl	80039f4 <TP_Touchpad_Pressed>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d026      	beq.n	8001d0c <drawStudentInfoPage+0x100>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fdd4 	bl	8003870 <TP_Read_Coordinates>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d112      	bne.n	8001cf4 <drawStudentInfoPage+0xe8>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d106      	bne.n	8001ce2 <drawStudentInfoPage+0xd6>
				{
					xPos = position_array[1];
 8001cd4:	8afb      	ldrh	r3, [r7, #22]
 8001cd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
					yPos = SCREEN_HEIGHT - position_array[0];
 8001cd8:	8abb      	ldrh	r3, [r7, #20]
 8001cda:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001cde:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ce0:	e008      	b.n	8001cf4 <drawStudentInfoPage+0xe8>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d105      	bne.n	8001cf4 <drawStudentInfoPage+0xe8>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 8001ce8:	8afb      	ldrh	r3, [r7, #22]
 8001cea:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001cee:	87fb      	strh	r3, [r7, #62]	; 0x3e
					yPos = position_array[0];
 8001cf0:	8abb      	ldrh	r3, [r7, #20]
 8001cf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
				}
			}

			if (isTouchWithinRectangle(imageArea, xPos, yPos))
 8001cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001cf6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001cf8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001cfc:	c903      	ldmia	r1, {r0, r1}
 8001cfe:	f7ff fdc8 	bl	8001892 <isTouchWithinRectangle>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <drawStudentInfoPage+0x100>
			{
				isDisplaying = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
	while (isDisplaying) {
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1b9      	bne.n	8001c86 <drawStudentInfoPage+0x7a>
			}
		}
	}

	stopTimerInStudentInfoPage();
 8001d12:	f7ff febb 	bl	8001a8c <stopTimerInStudentInfoPage>
}
 8001d16:	bf00      	nop
 8001d18:	3744      	adds	r7, #68	; 0x44
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d20:	b002      	add	sp, #8
 8001d22:	4770      	bx	lr
 8001d24:	20000298 	.word	0x20000298
 8001d28:	0800cd38 	.word	0x0800cd38

08001d2c <drawTemperatureTextAtPoint>:

void drawTemperatureTextAtPoint(float temperature, Point temperaturePosition)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d36:	8038      	strh	r0, [r7, #0]
	char temperatureText[10];
	Rectangle temperatureArea = { temperaturePosition.x, temperaturePosition.y, temperaturePosition.x + 82, temperaturePosition.y + 20};
 8001d38:	783b      	ldrb	r3, [r7, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	81bb      	strh	r3, [r7, #12]
 8001d3e:	787b      	ldrb	r3, [r7, #1]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	81fb      	strh	r3, [r7, #14]
 8001d44:	783b      	ldrb	r3, [r7, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3352      	adds	r3, #82	; 0x52
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	823b      	strh	r3, [r7, #16]
 8001d4e:	787b      	ldrb	r3, [r7, #1]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3314      	adds	r3, #20
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	827b      	strh	r3, [r7, #18]

	clearScreenArea(temperatureArea, WHITE);
 8001d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d64:	f7fe fe7a 	bl	8000a5c <clearScreenArea>
	getTemperatureText(temperature, temperatureText);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d72:	f7ff fb69 	bl	8001448 <getTemperatureText>
	drawTextAtPoint(temperatureText, temperaturePosition, 2);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe feb8 	bl	8000af4 <drawTextAtPoint>
}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <drawHumidityTextAtPoint>:

void drawHumidityTextAtPoint(float humidity, Point humidityPosition)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d96:	8038      	strh	r0, [r7, #0]
	char temperatureText[10];
	Rectangle temperatureArea = { humidityPosition.x, humidityPosition.y, humidityPosition.x + 82, humidityPosition.y + 20};
 8001d98:	783b      	ldrb	r3, [r7, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	81bb      	strh	r3, [r7, #12]
 8001d9e:	787b      	ldrb	r3, [r7, #1]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	81fb      	strh	r3, [r7, #14]
 8001da4:	783b      	ldrb	r3, [r7, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3352      	adds	r3, #82	; 0x52
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	823b      	strh	r3, [r7, #16]
 8001dae:	787b      	ldrb	r3, [r7, #1]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3314      	adds	r3, #20
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	827b      	strh	r3, [r7, #18]

	clearScreenArea(temperatureArea, WHITE);
 8001db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001dc4:	f7fe fe4a 	bl	8000a5c <clearScreenArea>
	getHumidityText(humidity, temperatureText);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4618      	mov	r0, r3
 8001dce:	ed97 0a01 	vldr	s0, [r7, #4]
 8001dd2:	f7ff fb59 	bl	8001488 <getHumidityText>
	drawTextAtPoint(temperatureText, humidityPosition, 2);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2202      	movs	r2, #2
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fe88 	bl	8000af4 <drawTextAtPoint>
}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_ADC_ConvCpltCallback>:
	ledBacklight->timer->Instance->CCMR3 = (10000-1) * dutyCycle;
	HAL_TIM_PWM_Start(ledBacklight->timer, ledBacklight->timerChannel);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_ADC_ConvCpltCallback+0x28>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d104      	bne.n	8001e06 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		count++;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001e04:	6013      	str	r3, [r2, #0]
	};
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200001fc 	.word	0x200001fc
 8001e18:	20000298 	.word	0x20000298

08001e1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	static int countTimer = 0;
	static float temperature = 10.5;
	static float humidity = 20.5;

	if (htim == &htim3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d120      	bne.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		countTimer++;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e34:	6013      	str	r3, [r2, #0]

		Point temperaturePosition = { 25, 30 };
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	81bb      	strh	r3, [r7, #12]
		Point humidityPosition = { SCREEN_WIDTH / 2 + 10, 30 };
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	813b      	strh	r3, [r7, #8]

		getTemperature(&temperature);
 8001e42:	4811      	ldr	r0, [pc, #68]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e44:	f7ff fada 	bl	80013fc <getTemperature>
		drawTemperatureTextAtPoint(temperature, temperaturePosition);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	eeb0 0a67 	vmov.f32	s0, s15
 8001e54:	f7ff ff6a 	bl	8001d2c <drawTemperatureTextAtPoint>

		getHumidity(&humidity);
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e5a:	f7ff fb0b 	bl	8001474 <getHumidity>
		drawHumidityTextAtPoint(humidity, humidityPosition);
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f7ff ff8f 	bl	8001d8c <drawHumidityTextAtPoint>
	}
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003b0 	.word	0x200003b0
 8001e7c:	2000029c 	.word	0x2000029c
 8001e80:	0800cd44 	.word	0x0800cd44
 8001e84:	0800cd48 	.word	0x0800cd48
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a8      	sub	sp, #160	; 0xa0
 8001e94:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001e96:	f7ff fa47 	bl	8001328 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001e9a:	f7ff fa6b 	bl	8001374 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e9e:	f001 fdb9 	bl	8003a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea2:	f000 f8c9 	bl	8002038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea6:	f7ff f86d 	bl	8000f84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001eaa:	f000 fddd 	bl	8002a68 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001eae:	f000 f981 	bl	80021b4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001eb2:	f000 fb17 	bl	80024e4 <MX_TIM1_Init>
  MX_RNG_Init();
 8001eb6:	f000 f935 	bl	8002124 <MX_RNG_Init>
  MX_I2C1_Init();
 8001eba:	f7ff f995 	bl	80011e8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ebe:	f000 fb65 	bl	800258c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ec2:	f7fe ffc5 	bl	8000e50 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001ec6:	f000 fbaf 	bl	8002628 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001eca:	f000 fc27 	bl	800271c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); // initial driver setup to drive ili9341
 8001ece:	f001 f963 	bl	8003198 <ILI9341_Init>

	const uint16_t COLOR_CIRCLE_RADIUS = 22;
 8001ed2:	2316      	movs	r3, #22
 8001ed4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	ColorInfo redColor = {
 8001ed8:	231e      	movs	r3, #30
 8001eda:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001ede:	235f      	movs	r3, #95	; 0x5f
 8001ee0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001ee4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001ee8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001eec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ef0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			{ 30, SCREEN_HEIGHT / 4 + 35, COLOR_CIRCLE_RADIUS },
			RED, 0
	};
	ColorInfo greenColor = {
 8001efc:	231e      	movs	r3, #30
 8001efe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			{ 30, getCircleEdgeY(redColor.circle) + COLOR_CIRCLE_RADIUS + 15, COLOR_CIRCLE_RADIUS },
 8001f02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f0a:	f7fe ff71 	bl	8000df0 <getCircleEdgeY>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	330f      	adds	r3, #15
 8001f1c:	b29b      	uxth	r3, r3
	ColorInfo greenColor = {
 8001f1e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001f22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f26:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001f2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f2e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			GREEN, 0
	};
	ColorInfo blueColor = {
 8001f3a:	231e      	movs	r3, #30
 8001f3c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
			{ 30, getCircleEdgeY(greenColor.circle) + COLOR_CIRCLE_RADIUS + 15, COLOR_CIRCLE_RADIUS },
 8001f40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f48:	f7fe ff52 	bl	8000df0 <getCircleEdgeY>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f54:	4413      	add	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	330f      	adds	r3, #15
 8001f5a:	b29b      	uxth	r3, r3
	ColorInfo blueColor = {
 8001f5c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8001f60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f64:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001f68:	231f      	movs	r3, #31
 8001f6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	67bb      	str	r3, [r7, #120]	; 0x78
			BLUE, 0
	};
	ColorInfo mixedColor = {
 8001f74:	2387      	movs	r3, #135	; 0x87
 8001f76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001f7a:	232d      	movs	r3, #45	; 0x2d
 8001f7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001f80:	2319      	movs	r3, #25
 8001f82:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			{ SCREEN_WIDTH / 2 - 25, 45, 25 },
			convertColorToRgb565(redColor.intensity, greenColor.intensity, blueColor.intensity),
 8001f86:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001f8a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001f8e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001f92:	eeb0 1a66 	vmov.f32	s2, s13
 8001f96:	eef0 0a47 	vmov.f32	s1, s14
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	f7ff fa8b 	bl	80014b8 <convertColorToRgb565>
 8001fa2:	4603      	mov	r3, r0
	ColorInfo mixedColor = {
 8001fa4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	66fb      	str	r3, [r7, #108]	; 0x6c

	char str[50];
	uint8_t cmdBuffer[3];
	uint8_t dataBuffer[8];

	Point pandaPicuturePoint = { 30, 30 };
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <main+0x198>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	843b      	strh	r3, [r7, #32]
	Image pandaPicture = {
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <main+0x19c>)
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	8c3b      	ldrh	r3, [r7, #32]
 8001fba:	833b      	strh	r3, [r7, #24]
 8001fbc:	2378      	movs	r3, #120	; 0x78
 8001fbe:	837b      	strh	r3, [r7, #26]
 8001fc0:	23b5      	movs	r3, #181	; 0xb5
 8001fc2:	83bb      	strh	r3, [r7, #28]
			pandaPicuturePoint,
			120,
			181
	};

	Point sunPicturePoint = {30, 30};
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <main+0x198>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	823b      	strh	r3, [r7, #16]
	Image sunPicture = {
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <main+0x1a0>)
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	8a3b      	ldrh	r3, [r7, #16]
 8001fd0:	813b      	strh	r3, [r7, #8]
 8001fd2:	2378      	movs	r3, #120	; 0x78
 8001fd4:	817b      	strh	r3, [r7, #10]
 8001fd6:	23a0      	movs	r3, #160	; 0xa0
 8001fd8:	81bb      	strh	r3, [r7, #12]
			sunPicturePoint,
			120,
			160
	};

	sprintf(str, "\n\rAM2320 I2C DEMO Starting ...");
 8001fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fde:	4915      	ldr	r1, [pc, #84]	; (8002034 <main+0x1a4>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f007 fa79 	bl	80094d8 <siprintf>
	printOutLine(str);
 8001fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fd0e 	bl	8000a0c <printOutLine>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
//
//		AM2320_startSensor(&hi2c1, cmdBuffer, dataBuffer);
//		AM2320_calculateValue(&temperature, &humidity, dataBuffer);

		drawColorInfoPage(&redColor, &greenColor, &blueColor, &mixedColor);
 8001ff0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ff4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001ff8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001ffc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002000:	f7ff fd66 	bl	8001ad0 <drawColorInfoPage>
		drawStudentInfoPage(mixedColor, sunPicture);
 8002004:	466a      	mov	r2, sp
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800200e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002018:	ca07      	ldmia	r2, {r0, r1, r2}
 800201a:	f7ff fdf7 	bl	8001c0c <drawStudentInfoPage>
		delay(10);
 800201e:	200a      	movs	r0, #10
 8002020:	f7fe fd04 	bl	8000a2c <delay>
		drawColorInfoPage(&redColor, &greenColor, &blueColor, &mixedColor);
 8002024:	e7e4      	b.n	8001ff0 <main+0x160>
 8002026:	bf00      	nop
 8002028:	0800cd6c 	.word	0x0800cd6c
 800202c:	08016370 	.word	0x08016370
 8002030:	0800cd70 	.word	0x0800cd70
 8002034:	0800cd4c 	.word	0x0800cd4c

08002038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b094      	sub	sp, #80	; 0x50
 800203c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	2234      	movs	r2, #52	; 0x34
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f007 faa9 	bl	800959e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800205c:	f002 ff92 	bl	8004f84 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <SystemClock_Config+0xd8>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <SystemClock_Config+0xd8>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <SystemClock_Config+0xd8>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <SystemClock_Config+0xdc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <SystemClock_Config+0xdc>)
 800207e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b23      	ldr	r3, [pc, #140]	; (8002114 <SystemClock_Config+0xdc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002090:	2301      	movs	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002094:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002098:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209a:	2302      	movs	r3, #2
 800209c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800209e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020a4:	2304      	movs	r3, #4
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80020a8:	23d8      	movs	r3, #216	; 0xd8
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80020b0:	2309      	movs	r3, #9
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 ffc1 	bl	8005044 <HAL_RCC_OscConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020c8:	f000 f826 	bl	8002118 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020cc:	f002 ff6a 	bl	8004fa4 <HAL_PWREx_EnableOverDrive>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80020d6:	f000 f81f 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020da:	230f      	movs	r3, #15
 80020dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2302      	movs	r3, #2
 80020e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	2107      	movs	r1, #7
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fa51 	bl	80055a0 <HAL_RCC_ClockConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002104:	f000 f808 	bl	8002118 <Error_Handler>
  }
}
 8002108:	bf00      	nop
 800210a:	3750      	adds	r7, #80	; 0x50
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002120:	e7fe      	b.n	8002120 <Error_Handler+0x8>
	...

08002124 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_RNG_Init+0x20>)
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <MX_RNG_Init+0x24>)
 800212c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_RNG_Init+0x20>)
 8002130:	f004 f884 	bl	800623c <HAL_RNG_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800213a:	f7ff ffed 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200002a0 	.word	0x200002a0
 8002148:	50060800 	.word	0x50060800

0800214c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0a8      	sub	sp, #160	; 0xa0
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2290      	movs	r2, #144	; 0x90
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f007 fa1e 	bl	800959e <memset>
  if(rngHandle->Instance==RNG)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_RNG_MspInit+0x60>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d11b      	bne.n	80021a4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fc35 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002188:	f7ff ffc6 	bl	8002118 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RNG_MspInit+0x64>)
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_RNG_MspInit+0x64>)
 8002192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002196:	6353      	str	r3, [r2, #52]	; 0x34
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RNG_MspInit+0x64>)
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80021a4:	bf00      	nop
 80021a6:	37a0      	adds	r7, #160	; 0xa0
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	50060800 	.word	0x50060800
 80021b0:	40023800 	.word	0x40023800

080021b4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <MX_SPI5_Init+0x74>)
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <MX_SPI5_Init+0x78>)
 80021bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_SPI5_Init+0x74>)
 80021c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <MX_SPI5_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_SPI5_Init+0x74>)
 80021ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021d2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_SPI5_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <MX_SPI5_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_SPI5_Init+0x74>)
 80021e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_SPI5_Init+0x74>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_SPI5_Init+0x74>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SPI5_Init+0x74>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_SPI5_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SPI5_Init+0x74>)
 8002202:	2207      	movs	r2, #7
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_SPI5_Init+0x74>)
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_SPI5_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_SPI5_Init+0x74>)
 8002214:	f004 f83c 	bl	8006290 <HAL_SPI_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800221e:	f7ff ff7b 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002b0 	.word	0x200002b0
 800222c:	40015000 	.word	0x40015000

08002230 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_SPI_MspInit+0x7c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d128      	bne.n	80022a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_SPI_MspInit+0x80>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_SPI_MspInit+0x80>)
 8002258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_SPI_MspInit+0x80>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_SPI_MspInit+0x80>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_SPI_MspInit+0x80>)
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_SPI_MspInit+0x80>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002282:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002294:	2305      	movs	r3, #5
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_SPI_MspInit+0x84>)
 80022a0:	f002 fa5e 	bl	8004760 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40015000 	.word	0x40015000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40021400 	.word	0x40021400

080022b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_MspInit+0x44>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_MspInit+0x44>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_MspInit+0x44>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_MspInit+0x44>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_MspInit+0x44>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_MspInit+0x44>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f001 fbcc 	bl	8003aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <ADC_IRQHandler+0x10>)
 8002312:	f001 fd63 	bl	8003ddc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200001fc 	.word	0x200001fc

08002320 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM3_IRQHandler+0x10>)
 8002326:	f004 fd81 	bl	8006e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200003b0 	.word	0x200003b0

08002334 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_kill>:

int _kill(int pid, int sig) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800234e:	f007 f979 	bl	8009644 <__errno>
 8002352:	4603      	mov	r3, r0
 8002354:	2216      	movs	r2, #22
 8002356:	601a      	str	r2, [r3, #0]
	return -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_exit>:

void _exit(int status) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ffe7 	bl	8002344 <_kill>
	while (1) {
 8002376:	e7fe      	b.n	8002376 <_exit+0x12>

08002378 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
		*ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
	}

	return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
		__io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
	}
	return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file) {
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002412:	605a      	str	r2, [r3, #4]
	return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:

int _isatty(int file) {
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
		errno = ENOMEM;
 8002484:	f007 f8de 	bl	8009644 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20080000 	.word	0x20080000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	20000314 	.word	0x20000314
 80024bc:	20000620 	.word	0x20000620

080024c0 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <SystemInit+0x20>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <SystemInit+0x20>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002504:	4a20      	ldr	r2, [pc, #128]	; (8002588 <MX_TIM1_Init+0xa4>)
 8002506:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <MX_TIM1_Init+0xa0>)
 800250a:	f242 720f 	movw	r2, #9999	; 0x270f
 800250e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_TIM1_Init+0xa0>)
 800251e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_TIM1_Init+0xa0>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002530:	4814      	ldr	r0, [pc, #80]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002532:	f004 fa4f 	bl	80069d4 <HAL_TIM_Base_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800253c:	f7ff fdec 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	4619      	mov	r1, r3
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_TIM1_Init+0xa0>)
 800254e:	f004 fea1 	bl	8007294 <HAL_TIM_ConfigClockSource>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002558:	f7ff fdde 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_TIM1_Init+0xa0>)
 800256e:	f005 fb1b 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002578:	f7ff fdce 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000318 	.word	0x20000318
 8002588:	40010000 	.word	0x40010000

0800258c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <MX_TIM2_Init+0x98>)
 80025ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <MX_TIM2_Init+0x98>)
 80025b4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80025b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_TIM2_Init+0x98>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_TIM2_Init+0x98>)
 80025c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80025c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_TIM2_Init+0x98>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM2_Init+0x98>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025d4:	4813      	ldr	r0, [pc, #76]	; (8002624 <MX_TIM2_Init+0x98>)
 80025d6:	f004 f9fd 	bl	80069d4 <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80025e0:	f7ff fd9a 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4619      	mov	r1, r3
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_TIM2_Init+0x98>)
 80025f2:	f004 fe4f 	bl	8007294 <HAL_TIM_ConfigClockSource>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80025fc:	f7ff fd8c 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002600:	2320      	movs	r3, #32
 8002602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM2_Init+0x98>)
 800260e:	f005 facb 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002618:	f7ff fd7e 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000364 	.word	0x20000364

08002628 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002648:	463b      	mov	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <MX_TIM3_Init+0xec>)
 800265c:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <MX_TIM3_Init+0xf0>)
 800265e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <MX_TIM3_Init+0xec>)
 8002662:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002666:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <MX_TIM3_Init+0xec>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <MX_TIM3_Init+0xec>)
 8002670:	f242 720f 	movw	r2, #9999	; 0x270f
 8002674:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b27      	ldr	r3, [pc, #156]	; (8002714 <MX_TIM3_Init+0xec>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <MX_TIM3_Init+0xec>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002682:	4824      	ldr	r0, [pc, #144]	; (8002714 <MX_TIM3_Init+0xec>)
 8002684:	f004 f9a6 	bl	80069d4 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800268e:	f7ff fd43 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269c:	4619      	mov	r1, r3
 800269e:	481d      	ldr	r0, [pc, #116]	; (8002714 <MX_TIM3_Init+0xec>)
 80026a0:	f004 fdf8 	bl	8007294 <HAL_TIM_ConfigClockSource>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80026aa:	f7ff fd35 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026ae:	4819      	ldr	r0, [pc, #100]	; (8002714 <MX_TIM3_Init+0xec>)
 80026b0:	f004 fb5b 	bl	8006d6a <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80026ba:	f7ff fd2d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4811      	ldr	r0, [pc, #68]	; (8002714 <MX_TIM3_Init+0xec>)
 80026ce:	f005 fa6b 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80026d8:	f7ff fd1e 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026dc:	2360      	movs	r3, #96	; 0x60
 80026de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80026e0:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80026e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ee:	463b      	mov	r3, r7
 80026f0:	2200      	movs	r2, #0
 80026f2:	4619      	mov	r1, r3
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <MX_TIM3_Init+0xec>)
 80026f6:	f004 fcb9 	bl	800706c <HAL_TIM_PWM_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002700:	f7ff fd0a 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <MX_TIM3_Init+0xec>)
 8002706:	f000 f909 	bl	800291c <HAL_TIM_MspPostInit>

}
 800270a:	bf00      	nop
 800270c:	3738      	adds	r7, #56	; 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200003b0 	.word	0x200003b0
 8002718:	40000400 	.word	0x40000400

0800271c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	; 0x38
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]
 800274a:	615a      	str	r2, [r3, #20]
 800274c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <MX_TIM4_Init+0xec>)
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <MX_TIM4_Init+0xf0>)
 8002752:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1080-1;
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <MX_TIM4_Init+0xec>)
 8002756:	f240 4237 	movw	r2, #1079	; 0x437
 800275a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <MX_TIM4_Init+0xec>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <MX_TIM4_Init+0xec>)
 8002764:	f242 720f 	movw	r2, #9999	; 0x270f
 8002768:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <MX_TIM4_Init+0xec>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <MX_TIM4_Init+0xec>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002776:	4824      	ldr	r0, [pc, #144]	; (8002808 <MX_TIM4_Init+0xec>)
 8002778:	f004 f92c 	bl	80069d4 <HAL_TIM_Base_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8002782:	f7ff fcc9 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800278c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002790:	4619      	mov	r1, r3
 8002792:	481d      	ldr	r0, [pc, #116]	; (8002808 <MX_TIM4_Init+0xec>)
 8002794:	f004 fd7e 	bl	8007294 <HAL_TIM_ConfigClockSource>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800279e:	f7ff fcbb 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027a2:	4819      	ldr	r0, [pc, #100]	; (8002808 <MX_TIM4_Init+0xec>)
 80027a4:	f004 fae1 	bl	8006d6a <HAL_TIM_PWM_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80027ae:	f7ff fcb3 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	4619      	mov	r1, r3
 80027c0:	4811      	ldr	r0, [pc, #68]	; (8002808 <MX_TIM4_Init+0xec>)
 80027c2:	f005 f9f1 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80027cc:	f7ff fca4 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d0:	2360      	movs	r3, #96	; 0x60
 80027d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80027d4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80027d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	; (8002808 <MX_TIM4_Init+0xec>)
 80027ea:	f004 fc3f 	bl	800706c <HAL_TIM_PWM_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80027f4:	f7ff fc90 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <MX_TIM4_Init+0xec>)
 80027fa:	f000 f88f 	bl	800291c <HAL_TIM_MspPostInit>

}
 80027fe:	bf00      	nop
 8002800:	3738      	adds	r7, #56	; 0x38
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200003fc 	.word	0x200003fc
 800280c:	40000800 	.word	0x40000800

08002810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a36      	ldr	r2, [pc, #216]	; (8002908 <HAL_TIM_Base_MspInit+0xf8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10c      	bne.n	800284c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002832:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a35      	ldr	r2, [pc, #212]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800284a:	e058      	b.n	80028fe <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d128      	bne.n	80028a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a2c      	ldr	r2, [pc, #176]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a26      	ldr	r2, [pc, #152]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002886:	2320      	movs	r3, #32
 8002888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002896:	2301      	movs	r3, #1
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	481b      	ldr	r0, [pc, #108]	; (8002910 <HAL_TIM_Base_MspInit+0x100>)
 80028a2:	f001 ff5d 	bl	8004760 <HAL_GPIO_Init>
}
 80028a6:	e02a      	b.n	80028fe <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_TIM_Base_MspInit+0x104>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d114      	bne.n	80028dc <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a15      	ldr	r2, [pc, #84]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2101      	movs	r1, #1
 80028ce:	201d      	movs	r0, #29
 80028d0:	f001 ff01 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d4:	201d      	movs	r0, #29
 80028d6:	f001 ff1a 	bl	800470e <HAL_NVIC_EnableIRQ>
}
 80028da:	e010      	b.n	80028fe <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <HAL_TIM_Base_MspInit+0x108>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10b      	bne.n	80028fe <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_TIM_Base_MspInit+0xfc>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
}
 80028fe:	bf00      	nop
 8002900:	3730      	adds	r7, #48	; 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800

0800291c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_TIM_MspPostInit+0xa8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d11c      	bne.n	8002978 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_TIM_MspPostInit+0xac>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_TIM_MspPostInit+0xac>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <HAL_TIM_MspPostInit+0xac>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Temperature_and_Humidity_TIMER_Pin;
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002966:	2302      	movs	r3, #2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Temperature_and_Humidity_TIMER_GPIO_Port, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4816      	ldr	r0, [pc, #88]	; (80029cc <HAL_TIM_MspPostInit+0xb0>)
 8002972:	f001 fef5 	bl	8004760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002976:	e020      	b.n	80029ba <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM4)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_TIM_MspPostInit+0xb4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d11b      	bne.n	80029ba <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_TIM_MspPostInit+0xac>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_TIM_MspPostInit+0xac>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_TIM_MspPostInit+0xac>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_LED_BACKLIGHT_Pin;
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029aa:	2302      	movs	r3, #2
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4807      	ldr	r0, [pc, #28]	; (80029d4 <HAL_TIM_MspPostInit+0xb8>)
 80029b6:	f001 fed3 	bl	8004760 <HAL_GPIO_Init>
}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40020400 	.word	0x40020400

080029d8 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_TIM_Base_MspDeInit+0x7c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
    __HAL_RCC_TIM4_CLK_DISABLE();
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }
}
 80029f6:	e029      	b.n	8002a4c <HAL_TIM_Base_MspDeInit+0x74>
  else if(tim_baseHandle->Instance==TIM2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d10a      	bne.n	8002a18 <HAL_TIM_Base_MspDeInit+0x40>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 8002a0e:	2120      	movs	r1, #32
 8002a10:	4812      	ldr	r0, [pc, #72]	; (8002a5c <HAL_TIM_Base_MspDeInit+0x84>)
 8002a12:	f002 f851 	bl	8004ab8 <HAL_GPIO_DeInit>
}
 8002a16:	e019      	b.n	8002a4c <HAL_TIM_Base_MspDeInit+0x74>
  else if(tim_baseHandle->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <HAL_TIM_Base_MspDeInit+0x88>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d109      	bne.n	8002a36 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 8002a28:	f023 0302 	bic.w	r3, r3, #2
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8002a2e:	201d      	movs	r0, #29
 8002a30:	f001 fe7b 	bl	800472a <HAL_NVIC_DisableIRQ>
}
 8002a34:	e00a      	b.n	8002a4c <HAL_TIM_Base_MspDeInit+0x74>
  else if(tim_baseHandle->Instance==TIM4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_TIM_Base_MspDeInit+0x8c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d105      	bne.n	8002a4c <HAL_TIM_Base_MspDeInit+0x74>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_TIM_Base_MspDeInit+0x80>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800

08002a68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <MX_USART3_UART_Init+0x5c>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002aaa:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002aac:	f005 f928 	bl	8007d00 <HAL_UART_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ab6:	f7ff fb2f 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000448 	.word	0x20000448
 8002ac4:	40004800 	.word	0x40004800

08002ac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0ae      	sub	sp, #184	; 0xb8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	2290      	movs	r2, #144	; 0x90
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f006 fd58 	bl	800959e <memset>
  if(uartHandle->Instance==USART3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_UART_MspInit+0xb4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d13c      	bne.n	8002b72 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002afe:	2300      	movs	r3, #0
 8002b00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 ff70 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b12:	f7ff fb01 	bl	8002118 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_UART_MspInit+0xb8>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_UART_MspInit+0xb8>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0xb8>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_UART_MspInit+0xb8>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_UART_MspInit+0xb8>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_UART_MspInit+0xb8>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b60:	2307      	movs	r3, #7
 8002b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_UART_MspInit+0xbc>)
 8002b6e:	f001 fdf7 	bl	8004760 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b72:	bf00      	nop
 8002b74:	37b8      	adds	r7, #184	; 0xb8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40004800 	.word	0x40004800
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020c00 	.word	0x40020c00

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b94:	e002      	b.n	8002b9c <LoopCopyDataInit>

08002b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9a:	3304      	adds	r3, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba0:	d3f9      	bcc.n	8002b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba4:	4c0b      	ldr	r4, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba8:	e001      	b.n	8002bae <LoopFillZerobss>

08002baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bac:	3204      	adds	r2, #4

08002bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb0:	d3fb      	bcc.n	8002baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb2:	f7ff fc85 	bl	80024c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f006 fd4b 	bl	8009650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7ff f969 	bl	8001e90 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bcc:	080213b0 	.word	0x080213b0
  ldr r2, =_sbss
 8002bd0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bd4:	20000620 	.word	0x20000620

08002bd8 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <BusFault_Handler>

08002bda <ILI9341_Draw_Filled_Circle>:
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour)
{
 8002bda:	b590      	push	{r4, r7, lr}
 8002bdc:	b08b      	sub	sp, #44	; 0x2c
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4604      	mov	r4, r0
 8002be2:	4608      	mov	r0, r1
 8002be4:	4611      	mov	r1, r2
 8002be6:	461a      	mov	r2, r3
 8002be8:	4623      	mov	r3, r4
 8002bea:	80fb      	strh	r3, [r7, #6]
 8002bec:	4603      	mov	r3, r0
 8002bee:	80bb      	strh	r3, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	f1c3 0301 	rsb	r3, r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8002c12:	e061      	b.n	8002cd8 <ILI9341_Draw_Filled_Circle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	e018      	b.n	8002c50 <ILI9341_Draw_Filled_Circle+0x76>
		{
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	b298      	uxth	r0, r3
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	883a      	ldrh	r2, [r7, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f000 fc84 	bl	800353c <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	b298      	uxth	r0, r3
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	88ba      	ldrh	r2, [r7, #4]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	883a      	ldrh	r2, [r7, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f000 fc79 	bl	800353c <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	4413      	add	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dde0      	ble.n	8002c1e <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++)
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e018      	b.n	8002c98 <ILI9341_Draw_Filled_Circle+0xbe>
		{
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	b298      	uxth	r0, r3
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	88bb      	ldrh	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	883a      	ldrh	r2, [r7, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	f000 fc60 	bl	800353c <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	88ba      	ldrh	r2, [r7, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	883a      	ldrh	r2, [r7, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f000 fc55 	bl	800353c <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dde0      	ble.n	8002c66 <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005a      	lsls	r2, r3, #1
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dd09      	ble.n	8002cd8 <ILI9341_Draw_Filled_Circle+0xfe>
		{
			x--;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	da99      	bge.n	8002c14 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	372c      	adds	r7, #44	; 0x2c
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}

08002cea <ILI9341_Draw_Filled_Rectangle_Coord>:
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8002cea:	b590      	push	{r4, r7, lr}
 8002cec:	b089      	sub	sp, #36	; 0x24
 8002cee:	af02      	add	r7, sp, #8
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	4608      	mov	r0, r1
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	80fb      	strh	r3, [r7, #6]
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	80bb      	strh	r3, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8002d24:	887a      	ldrh	r2, [r7, #2]
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da01      	bge.n	8002d36 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8002d3a:	883a      	ldrh	r2, [r7, #0]
 8002d3c:	88bb      	ldrh	r3, [r7, #4]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da01      	bge.n	8002d4c <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	823b      	strh	r3, [r7, #16]
 8002d5e:	e005      	b.n	8002d6c <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002d6c:	7cbb      	ldrb	r3, [r7, #18]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002d72:	883a      	ldrh	r2, [r7, #0]
 8002d74:	88bb      	ldrh	r3, [r7, #4]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	81fb      	strh	r3, [r7, #14]
 8002d7e:	e005      	b.n	8002d8c <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002d80:	88ba      	ldrh	r2, [r7, #4]
 8002d82:	883b      	ldrh	r3, [r7, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8002d88:	883b      	ldrh	r3, [r7, #0]
 8002d8a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8002d8c:	8abc      	ldrh	r4, [r7, #20]
 8002d8e:	8afa      	ldrh	r2, [r7, #22]
 8002d90:	89f9      	ldrh	r1, [r7, #14]
 8002d92:	8a38      	ldrh	r0, [r7, #16]
 8002d94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4623      	mov	r3, r4
 8002d9a:	f000 fca9 	bl	80036f0 <ILI9341_Draw_Rectangle>
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
	...

08002da8 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	4604      	mov	r4, r0
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4623      	mov	r3, r4
 8002db8:	71fb      	strb	r3, [r7, #7]
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71bb      	strb	r3, [r7, #6]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	717b      	strb	r3, [r7, #5]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b1f      	cmp	r3, #31
 8002dce:	d802      	bhi.n	8002dd6 <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	e002      	b.n	8002ddc <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	3b20      	subs	r3, #32
 8002dda:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	753b      	strb	r3, [r7, #20]
 8002de0:	e012      	b.n	8002e08 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8002de2:	7dfa      	ldrb	r2, [r7, #23]
 8002de4:	7d38      	ldrb	r0, [r7, #20]
 8002de6:	7d39      	ldrb	r1, [r7, #20]
 8002de8:	4c3b      	ldr	r4, [pc, #236]	; (8002ed8 <ILI9341_Draw_Char+0x130>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4423      	add	r3, r4
 8002df4:	4403      	add	r3, r0
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	f101 0318 	add.w	r3, r1, #24
 8002dfc:	443b      	add	r3, r7
 8002dfe:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002e02:	7d3b      	ldrb	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	753b      	strb	r3, [r7, #20]
 8002e08:	7d3b      	ldrb	r3, [r7, #20]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d9e9      	bls.n	8002de2 <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	b298      	uxth	r0, r3
 8002e12:	797b      	ldrb	r3, [r7, #5]
 8002e14:	b299      	uxth	r1, r3
 8002e16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e18:	461a      	mov	r2, r3
 8002e1a:	0052      	lsls	r2, r2, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	b29c      	uxth	r4, r3
 8002e28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	f000 fc5f 	bl	80036f0 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	757b      	strb	r3, [r7, #21]
 8002e36:	e047      	b.n	8002ec8 <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75bb      	strb	r3, [r7, #22]
 8002e3c:	e03e      	b.n	8002ebc <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 8002e3e:	7d7b      	ldrb	r3, [r7, #21]
 8002e40:	3318      	adds	r3, #24
 8002e42:	443b      	add	r3, r7
 8002e44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	7dbb      	ldrb	r3, [r7, #22]
 8002e4c:	fa42 f303 	asr.w	r3, r2, r3
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d02e      	beq.n	8002eb6 <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 8002e58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d110      	bne.n	8002e80 <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8002e5e:	79bb      	ldrb	r3, [r7, #6]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	7d7b      	ldrb	r3, [r7, #21]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	b298      	uxth	r0, r3
 8002e6a:	797b      	ldrb	r3, [r7, #5]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	7dbb      	ldrb	r3, [r7, #22]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f000 fb5f 	bl	800353c <ILI9341_Draw_Pixel>
 8002e7e:	e01a      	b.n	8002eb6 <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	7d7b      	ldrb	r3, [r7, #21]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002e8a:	fb11 f303 	smulbb	r3, r1, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	b298      	uxth	r0, r3
 8002e94:	797b      	ldrb	r3, [r7, #5]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	7dbb      	ldrb	r3, [r7, #22]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002e9e:	fb11 f303 	smulbb	r3, r1, r3
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b299      	uxth	r1, r3
 8002ea8:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002eaa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	f000 fc1d 	bl	80036f0 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8002eb6:	7dbb      	ldrb	r3, [r7, #22]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	75bb      	strb	r3, [r7, #22]
 8002ebc:	7dbb      	ldrb	r3, [r7, #22]
 8002ebe:	2b07      	cmp	r3, #7
 8002ec0:	d9bd      	bls.n	8002e3e <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 8002ec2:	7d7b      	ldrb	r3, [r7, #21]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	757b      	strb	r3, [r7, #21]
 8002ec8:	7d7b      	ldrb	r3, [r7, #21]
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d9b4      	bls.n	8002e38 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	08020d38 	.word	0x08020d38

08002edc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	70fb      	strb	r3, [r7, #3]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70bb      	strb	r3, [r7, #2]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	803b      	strh	r3, [r7, #0]
	while (*Text)
 8002ef6:	e017      	b.n	8002f28 <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	7818      	ldrb	r0, [r3, #0]
 8002f00:	883c      	ldrh	r4, [r7, #0]
 8002f02:	78ba      	ldrb	r2, [r7, #2]
 8002f04:	78f9      	ldrb	r1, [r7, #3]
 8002f06:	8bbb      	ldrh	r3, [r7, #28]
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	8b3b      	ldrh	r3, [r7, #24]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	4623      	mov	r3, r4
 8002f10:	f7ff ff4a 	bl	8002da8 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8002f14:	8b3b      	ldrh	r3, [r7, #24]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	0052      	lsls	r2, r2, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	4413      	add	r3, r2
 8002f26:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e3      	bne.n	8002ef8 <ILI9341_Draw_Text+0x1c>
	}
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}
	...

08002f3c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 8002f40:	f7ff f938 	bl	80021b4 <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 8002f44:	f7fe f81e 	bl	8000f84 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <ILI9341_SPI_Init+0x1c>)
 8002f50:	f001 fed6 	bl	8004d00 <HAL_GPIO_WritePin>
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40020800 	.word	0x40020800

08002f5c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002f66:	1df9      	adds	r1, r7, #7
 8002f68:	2301      	movs	r3, #1
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4803      	ldr	r0, [pc, #12]	; (8002f7c <ILI9341_SPI_Send+0x20>)
 8002f6e:	f003 fa3a 	bl	80063e6 <HAL_SPI_Transmit>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200002b0 	.word	0x200002b0

08002f80 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f90:	480b      	ldr	r0, [pc, #44]	; (8002fc0 <ILI9341_Write_Command+0x40>)
 8002f92:	f001 feb5 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f9c:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <ILI9341_Write_Command+0x40>)
 8002f9e:	f001 feaf 	bl	8004d00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ffd9 	bl	8002f5c <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002faa:	2201      	movs	r2, #1
 8002fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <ILI9341_Write_Command+0x40>)
 8002fb2:	f001 fea5 	bl	8004d00 <HAL_GPIO_WritePin>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40020800 	.word	0x40020800

08002fc4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd4:	480b      	ldr	r0, [pc, #44]	; (8003004 <ILI9341_Write_Data+0x40>)
 8002fd6:	f001 fe93 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fe0:	4808      	ldr	r0, [pc, #32]	; (8003004 <ILI9341_Write_Data+0x40>)
 8002fe2:	f001 fe8d 	bl	8004d00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ffb7 	bl	8002f5c <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff4:	4803      	ldr	r0, [pc, #12]	; (8003004 <ILI9341_Write_Data+0x40>)
 8002ff6:	f001 fe83 	bl	8004d00 <HAL_GPIO_WritePin>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40020800 	.word	0x40020800

08003008 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4623      	mov	r3, r4
 8003018:	80fb      	strh	r3, [r7, #6]
 800301a:	4603      	mov	r3, r0
 800301c:	80bb      	strh	r3, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
 8003022:	4613      	mov	r3, r2
 8003024:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8003026:	202a      	movs	r0, #42	; 0x2a
 8003028:	f7ff ffaa 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ffc5 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ffc0 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	b29b      	uxth	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ffb9 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ffb4 	bl	8002fc4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 800305c:	202b      	movs	r0, #43	; 0x2b
 800305e:	f7ff ff8f 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 8003062:	88bb      	ldrh	r3, [r7, #4]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	b29b      	uxth	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ffaa 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ffa5 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 800307a:	883b      	ldrh	r3, [r7, #0]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	b29b      	uxth	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff9e 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8003088:	883b      	ldrh	r3, [r7, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff99 	bl	8002fc4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8003092:	202c      	movs	r0, #44	; 0x2c
 8003094:	f7ff ff74 	bl	8002f80 <ILI9341_Write_Command>
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}

080030a0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80030a4:	2201      	movs	r2, #1
 80030a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030aa:	480b      	ldr	r0, [pc, #44]	; (80030d8 <ILI9341_Reset+0x38>)
 80030ac:	f001 fe28 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80030b0:	20c8      	movs	r0, #200	; 0xc8
 80030b2:	f000 fd15 	bl	8003ae0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030bc:	4806      	ldr	r0, [pc, #24]	; (80030d8 <ILI9341_Reset+0x38>)
 80030be:	f001 fe1f 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80030c2:	20c8      	movs	r0, #200	; 0xc8
 80030c4:	f000 fd0c 	bl	8003ae0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80030c8:	2201      	movs	r2, #1
 80030ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030ce:	4802      	ldr	r0, [pc, #8]	; (80030d8 <ILI9341_Reset+0x38>)
 80030d0:	f001 fe16 	bl	8004d00 <HAL_GPIO_WritePin>
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40020800 	.word	0x40020800

080030dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80030ea:	2036      	movs	r0, #54	; 0x36
 80030ec:	f7ff ff48 	bl	8002f80 <ILI9341_Write_Command>
	HAL_Delay(1);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f000 fcf5 	bl	8003ae0 <HAL_Delay>

	switch (screen_rotation)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d837      	bhi.n	800316c <ILI9341_Set_Rotation+0x90>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <ILI9341_Set_Rotation+0x28>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003115 	.word	0x08003115
 8003108:	0800312b 	.word	0x0800312b
 800310c:	08003141 	.word	0x08003141
 8003110:	08003157 	.word	0x08003157
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8003114:	2048      	movs	r0, #72	; 0x48
 8003116:	f7ff ff55 	bl	8002fc4 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <ILI9341_Set_Rotation+0x9c>)
 800311c:	22f0      	movs	r2, #240	; 0xf0
 800311e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003120:	4b16      	ldr	r3, [pc, #88]	; (800317c <ILI9341_Set_Rotation+0xa0>)
 8003122:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003126:	801a      	strh	r2, [r3, #0]
		break;
 8003128:	e021      	b.n	800316e <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 800312a:	2028      	movs	r0, #40	; 0x28
 800312c:	f7ff ff4a 	bl	8002fc4 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <ILI9341_Set_Rotation+0x9c>)
 8003132:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003136:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <ILI9341_Set_Rotation+0xa0>)
 800313a:	22f0      	movs	r2, #240	; 0xf0
 800313c:	801a      	strh	r2, [r3, #0]
		break;
 800313e:	e016      	b.n	800316e <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8003140:	2088      	movs	r0, #136	; 0x88
 8003142:	f7ff ff3f 	bl	8002fc4 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <ILI9341_Set_Rotation+0x9c>)
 8003148:	22f0      	movs	r2, #240	; 0xf0
 800314a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <ILI9341_Set_Rotation+0xa0>)
 800314e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003152:	801a      	strh	r2, [r3, #0]
		break;
 8003154:	e00b      	b.n	800316e <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8003156:	20e8      	movs	r0, #232	; 0xe8
 8003158:	f7ff ff34 	bl	8002fc4 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <ILI9341_Set_Rotation+0x9c>)
 800315e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003162:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <ILI9341_Set_Rotation+0xa0>)
 8003166:	22f0      	movs	r2, #240	; 0xf0
 8003168:	801a      	strh	r2, [r3, #0]
		break;
 800316a:	e000      	b.n	800316e <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 800316c:	bf00      	nop
	}
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000000e 	.word	0x2000000e
 800317c:	2000000c 	.word	0x2000000c

08003180 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003184:	2201      	movs	r2, #1
 8003186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318a:	4802      	ldr	r0, [pc, #8]	; (8003194 <ILI9341_Enable+0x14>)
 800318c:	f001 fdb8 	bl	8004d00 <HAL_GPIO_WritePin>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40020800 	.word	0x40020800

08003198 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 800319c:	f7ff fff0 	bl	8003180 <ILI9341_Enable>
	ILI9341_SPI_Init();
 80031a0:	f7ff fecc 	bl	8002f3c <ILI9341_SPI_Init>
	ILI9341_Reset();
 80031a4:	f7ff ff7c 	bl	80030a0 <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7ff fee9 	bl	8002f80 <ILI9341_Write_Command>
	HAL_Delay(1000);
 80031ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031b2:	f000 fc95 	bl	8003ae0 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 80031b6:	20cb      	movs	r0, #203	; 0xcb
 80031b8:	f7ff fee2 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 80031bc:	2039      	movs	r0, #57	; 0x39
 80031be:	f7ff ff01 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 80031c2:	202c      	movs	r0, #44	; 0x2c
 80031c4:	f7ff fefe 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7ff fefb 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 80031ce:	2034      	movs	r0, #52	; 0x34
 80031d0:	f7ff fef8 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7ff fef5 	bl	8002fc4 <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80031da:	20cf      	movs	r0, #207	; 0xcf
 80031dc:	f7ff fed0 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7ff feef 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80031e6:	20c1      	movs	r0, #193	; 0xc1
 80031e8:	f7ff feec 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 80031ec:	2030      	movs	r0, #48	; 0x30
 80031ee:	f7ff fee9 	bl	8002fc4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80031f2:	20e8      	movs	r0, #232	; 0xe8
 80031f4:	f7ff fec4 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 80031f8:	2085      	movs	r0, #133	; 0x85
 80031fa:	f7ff fee3 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80031fe:	2000      	movs	r0, #0
 8003200:	f7ff fee0 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8003204:	2078      	movs	r0, #120	; 0x78
 8003206:	f7ff fedd 	bl	8002fc4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800320a:	20ea      	movs	r0, #234	; 0xea
 800320c:	f7ff feb8 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff fed7 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7ff fed4 	bl	8002fc4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 800321c:	20ed      	movs	r0, #237	; 0xed
 800321e:	f7ff feaf 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8003222:	2064      	movs	r0, #100	; 0x64
 8003224:	f7ff fece 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8003228:	2003      	movs	r0, #3
 800322a:	f7ff fecb 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 800322e:	2012      	movs	r0, #18
 8003230:	f7ff fec8 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8003234:	2081      	movs	r0, #129	; 0x81
 8003236:	f7ff fec5 	bl	8002fc4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800323a:	20f7      	movs	r0, #247	; 0xf7
 800323c:	f7ff fea0 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8003240:	2020      	movs	r0, #32
 8003242:	f7ff febf 	bl	8002fc4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8003246:	20c0      	movs	r0, #192	; 0xc0
 8003248:	f7ff fe9a 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 800324c:	2023      	movs	r0, #35	; 0x23
 800324e:	f7ff feb9 	bl	8002fc4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8003252:	20c1      	movs	r0, #193	; 0xc1
 8003254:	f7ff fe94 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8003258:	2010      	movs	r0, #16
 800325a:	f7ff feb3 	bl	8002fc4 <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 800325e:	20c5      	movs	r0, #197	; 0xc5
 8003260:	f7ff fe8e 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8003264:	203e      	movs	r0, #62	; 0x3e
 8003266:	f7ff fead 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 800326a:	2028      	movs	r0, #40	; 0x28
 800326c:	f7ff feaa 	bl	8002fc4 <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8003270:	20c7      	movs	r0, #199	; 0xc7
 8003272:	f7ff fe85 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8003276:	2086      	movs	r0, #134	; 0x86
 8003278:	f7ff fea4 	bl	8002fc4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 800327c:	2036      	movs	r0, #54	; 0x36
 800327e:	f7ff fe7f 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8003282:	2048      	movs	r0, #72	; 0x48
 8003284:	f7ff fe9e 	bl	8002fc4 <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8003288:	203a      	movs	r0, #58	; 0x3a
 800328a:	f7ff fe79 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 800328e:	2055      	movs	r0, #85	; 0x55
 8003290:	f7ff fe98 	bl	8002fc4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8003294:	20b1      	movs	r0, #177	; 0xb1
 8003296:	f7ff fe73 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff fe92 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 80032a0:	2018      	movs	r0, #24
 80032a2:	f7ff fe8f 	bl	8002fc4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 80032a6:	20b6      	movs	r0, #182	; 0xb6
 80032a8:	f7ff fe6a 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 80032ac:	2008      	movs	r0, #8
 80032ae:	f7ff fe89 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 80032b2:	2082      	movs	r0, #130	; 0x82
 80032b4:	f7ff fe86 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 80032b8:	2027      	movs	r0, #39	; 0x27
 80032ba:	f7ff fe83 	bl	8002fc4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 80032be:	20f2      	movs	r0, #242	; 0xf2
 80032c0:	f7ff fe5e 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7ff fe7d 	bl	8002fc4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80032ca:	2026      	movs	r0, #38	; 0x26
 80032cc:	f7ff fe58 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f7ff fe77 	bl	8002fc4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80032d6:	20e0      	movs	r0, #224	; 0xe0
 80032d8:	f7ff fe52 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 80032dc:	200f      	movs	r0, #15
 80032de:	f7ff fe71 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80032e2:	2031      	movs	r0, #49	; 0x31
 80032e4:	f7ff fe6e 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80032e8:	202b      	movs	r0, #43	; 0x2b
 80032ea:	f7ff fe6b 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80032ee:	200c      	movs	r0, #12
 80032f0:	f7ff fe68 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80032f4:	200e      	movs	r0, #14
 80032f6:	f7ff fe65 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80032fa:	2008      	movs	r0, #8
 80032fc:	f7ff fe62 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8003300:	204e      	movs	r0, #78	; 0x4e
 8003302:	f7ff fe5f 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8003306:	20f1      	movs	r0, #241	; 0xf1
 8003308:	f7ff fe5c 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 800330c:	2037      	movs	r0, #55	; 0x37
 800330e:	f7ff fe59 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8003312:	2007      	movs	r0, #7
 8003314:	f7ff fe56 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8003318:	2010      	movs	r0, #16
 800331a:	f7ff fe53 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800331e:	2003      	movs	r0, #3
 8003320:	f7ff fe50 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8003324:	200e      	movs	r0, #14
 8003326:	f7ff fe4d 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 800332a:	2009      	movs	r0, #9
 800332c:	f7ff fe4a 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7ff fe47 	bl	8002fc4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8003336:	20e1      	movs	r0, #225	; 0xe1
 8003338:	f7ff fe22 	bl	8002f80 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7ff fe41 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8003342:	200e      	movs	r0, #14
 8003344:	f7ff fe3e 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8003348:	2014      	movs	r0, #20
 800334a:	f7ff fe3b 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800334e:	2003      	movs	r0, #3
 8003350:	f7ff fe38 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8003354:	2011      	movs	r0, #17
 8003356:	f7ff fe35 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800335a:	2007      	movs	r0, #7
 800335c:	f7ff fe32 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8003360:	2031      	movs	r0, #49	; 0x31
 8003362:	f7ff fe2f 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8003366:	20c1      	movs	r0, #193	; 0xc1
 8003368:	f7ff fe2c 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 800336c:	2048      	movs	r0, #72	; 0x48
 800336e:	f7ff fe29 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8003372:	2008      	movs	r0, #8
 8003374:	f7ff fe26 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8003378:	200f      	movs	r0, #15
 800337a:	f7ff fe23 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800337e:	200c      	movs	r0, #12
 8003380:	f7ff fe20 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8003384:	2031      	movs	r0, #49	; 0x31
 8003386:	f7ff fe1d 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 800338a:	2036      	movs	r0, #54	; 0x36
 800338c:	f7ff fe1a 	bl	8002fc4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8003390:	200f      	movs	r0, #15
 8003392:	f7ff fe17 	bl	8002fc4 <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8003396:	2011      	movs	r0, #17
 8003398:	f7ff fdf2 	bl	8002f80 <ILI9341_Write_Command>
	HAL_Delay(120);
 800339c:	2078      	movs	r0, #120	; 0x78
 800339e:	f000 fb9f 	bl	8003ae0 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80033a2:	2029      	movs	r0, #41	; 0x29
 80033a4:	f7ff fdec 	bl	8002f80 <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7ff fe97 	bl	80030dc <ILI9341_Set_Rotation>
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80033b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b8:	b08d      	sub	sp, #52	; 0x34
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	6039      	str	r1, [r7, #0]
 80033c0:	80fb      	strh	r3, [r7, #6]
 80033c2:	466b      	mov	r3, sp
 80033c4:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033d2:	d202      	bcs.n	80033da <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d8:	e002      	b.n	80033e0 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80033da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80033e0:	2201      	movs	r2, #1
 80033e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e6:	4840      	ldr	r0, [pc, #256]	; (80034e8 <ILI9341_Draw_Colour_Burst+0x134>)
 80033e8:	f001 fc8a 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033f2:	483d      	ldr	r0, [pc, #244]	; (80034e8 <ILI9341_Draw_Colour_Burst+0x134>)
 80033f4:	f001 fc84 	bl	8004d00 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 8003402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003404:	460b      	mov	r3, r1
 8003406:	3b01      	subs	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2300      	movs	r3, #0
 800340c:	4688      	mov	r8, r1
 800340e:	4699      	mov	r9, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003420:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003424:	2300      	movs	r3, #0
 8003426:	460c      	mov	r4, r1
 8003428:	461d      	mov	r5, r3
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	00eb      	lsls	r3, r5, #3
 8003434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003438:	00e2      	lsls	r2, r4, #3
 800343a:	1dcb      	adds	r3, r1, #7
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	ebad 0d03 	sub.w	sp, sp, r3
 8003444:	466b      	mov	r3, sp
 8003446:	3300      	adds	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 800344a:	2300      	movs	r3, #0
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
 800344e:	e00e      	b.n	800346e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	4413      	add	r3, r2
 8003456:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800345a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	3301      	adds	r3, #1
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	b2d1      	uxtb	r1, r2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	3302      	adds	r3, #2
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	429a      	cmp	r2, r3
 8003474:	d3ec      	bcc.n	8003450 <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	fbb3 f2f2 	udiv	r2, r3, r2
 800348e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003490:	fb01 f202 	mul.w	r2, r1, r2
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800349e:	2300      	movs	r3, #0
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e009      	b.n	80034b8 <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	230a      	movs	r3, #10
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	480f      	ldr	r0, [pc, #60]	; (80034ec <ILI9341_Draw_Colour_Burst+0x138>)
 80034ae:	f002 ff9a 	bl	80063e6 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	3301      	adds	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d3f1      	bcc.n	80034a4 <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	230a      	movs	r3, #10
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	4808      	ldr	r0, [pc, #32]	; (80034ec <ILI9341_Draw_Colour_Burst+0x138>)
 80034ca:	f002 ff8c 	bl	80063e6 <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80034ce:	2201      	movs	r2, #1
 80034d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034d4:	4804      	ldr	r0, [pc, #16]	; (80034e8 <ILI9341_Draw_Colour_Burst+0x134>)
 80034d6:	f001 fc13 	bl	8004d00 <HAL_GPIO_WritePin>
 80034da:	46b5      	mov	sp, r6
}
 80034dc:	bf00      	nop
 80034de:	3734      	adds	r7, #52	; 0x34
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034e6:	bf00      	nop
 80034e8:	40020800 	.word	0x40020800
 80034ec:	200002b0 	.word	0x200002b0

080034f0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <ILI9341_Fill_Screen+0x44>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <ILI9341_Fill_Screen+0x48>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	2100      	movs	r1, #0
 8003508:	2000      	movs	r0, #0
 800350a:	f7ff fd7d 	bl	8003008 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <ILI9341_Fill_Screen+0x44>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <ILI9341_Fill_Screen+0x48>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	461a      	mov	r2, r3
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff44 	bl	80033b4 <ILI9341_Draw_Colour_Burst>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000000e 	.word	0x2000000e
 8003538:	2000000c 	.word	0x2000000c

0800353c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
 8003546:	460b      	mov	r3, r1
 8003548:	80bb      	strh	r3, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800354e:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <ILI9341_Draw_Pixel+0x1a4>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	429a      	cmp	r2, r3
 8003558:	f080 80be 	bcs.w	80036d8 <ILI9341_Draw_Pixel+0x19c>
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <ILI9341_Draw_Pixel+0x1a8>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	88ba      	ldrh	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	f080 80b7 	bcs.w	80036d8 <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800356a:	2200      	movs	r2, #0
 800356c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003570:	485d      	ldr	r0, [pc, #372]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003572:	f001 fbc5 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357c:	485a      	ldr	r0, [pc, #360]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 800357e:	f001 fbbf 	bl	8004d00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8003582:	202a      	movs	r0, #42	; 0x2a
 8003584:	f7ff fcea 	bl	8002f5c <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003588:	2201      	movs	r2, #1
 800358a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800358e:	4856      	ldr	r0, [pc, #344]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003590:	f001 fbb6 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003594:	2201      	movs	r2, #1
 8003596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800359a:	4853      	ldr	r0, [pc, #332]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 800359c:	f001 fbb0 	bl	8004d00 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80035a0:	2200      	movs	r2, #0
 80035a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035a6:	4850      	ldr	r0, [pc, #320]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 80035a8:	f001 fbaa 	bl	8004d00 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	753b      	strb	r3, [r7, #20]
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	3301      	adds	r3, #1
 80035c0:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 80035ce:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80035d0:	f107 0114 	add.w	r1, r7, #20
 80035d4:	2301      	movs	r3, #1
 80035d6:	2204      	movs	r2, #4
 80035d8:	4844      	ldr	r0, [pc, #272]	; (80036ec <ILI9341_Draw_Pixel+0x1b0>)
 80035da:	f002 ff04 	bl	80063e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80035de:	2201      	movs	r2, #1
 80035e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035e4:	4840      	ldr	r0, [pc, #256]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 80035e6:	f001 fb8b 	bl	8004d00 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035f0:	483d      	ldr	r0, [pc, #244]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 80035f2:	f001 fb85 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80035f6:	2200      	movs	r2, #0
 80035f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035fc:	483a      	ldr	r0, [pc, #232]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 80035fe:	f001 fb7f 	bl	8004d00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8003602:	202b      	movs	r0, #43	; 0x2b
 8003604:	f7ff fcaa 	bl	8002f5c <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003608:	2201      	movs	r2, #1
 800360a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800360e:	4836      	ldr	r0, [pc, #216]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003610:	f001 fb76 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003614:	2201      	movs	r2, #1
 8003616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800361a:	4833      	ldr	r0, [pc, #204]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 800361c:	f001 fb70 	bl	8004d00 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003626:	4830      	ldr	r0, [pc, #192]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003628:	f001 fb6a 	bl	8004d00 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 800362c:	88bb      	ldrh	r3, [r7, #4]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	743b      	strb	r3, [r7, #16]
 8003636:	88bb      	ldrh	r3, [r7, #4]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 800363c:	88bb      	ldrh	r3, [r7, #4]
 800363e:	3301      	adds	r3, #1
 8003640:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 8003642:	b2db      	uxtb	r3, r3
 8003644:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3301      	adds	r3, #1
 800364c:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800364e:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003650:	f107 0110 	add.w	r1, r7, #16
 8003654:	2301      	movs	r3, #1
 8003656:	2204      	movs	r2, #4
 8003658:	4824      	ldr	r0, [pc, #144]	; (80036ec <ILI9341_Draw_Pixel+0x1b0>)
 800365a:	f002 fec4 	bl	80063e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800365e:	2201      	movs	r2, #1
 8003660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003664:	4820      	ldr	r0, [pc, #128]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003666:	f001 fb4b 	bl	8004d00 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800366a:	2200      	movs	r2, #0
 800366c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003670:	481d      	ldr	r0, [pc, #116]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003672:	f001 fb45 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003676:	2200      	movs	r2, #0
 8003678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800367c:	481a      	ldr	r0, [pc, #104]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 800367e:	f001 fb3f 	bl	8004d00 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8003682:	202c      	movs	r0, #44	; 0x2c
 8003684:	f7ff fc6a 	bl	8002f5c <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003688:	2201      	movs	r2, #1
 800368a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800368e:	4816      	ldr	r0, [pc, #88]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 8003690:	f001 fb36 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003694:	2201      	movs	r2, #1
 8003696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800369a:	4813      	ldr	r0, [pc, #76]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 800369c:	f001 fb30 	bl	8004d00 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036a6:	4810      	ldr	r0, [pc, #64]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 80036a8:	f001 fb2a 	bl	8004d00 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	733b      	strb	r3, [r7, #12]
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80036bc:	f107 010c 	add.w	r1, r7, #12
 80036c0:	2301      	movs	r3, #1
 80036c2:	2202      	movs	r2, #2
 80036c4:	4809      	ldr	r0, [pc, #36]	; (80036ec <ILI9341_Draw_Pixel+0x1b0>)
 80036c6:	f002 fe8e 	bl	80063e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80036ca:	2201      	movs	r2, #1
 80036cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036d0:	4805      	ldr	r0, [pc, #20]	; (80036e8 <ILI9341_Draw_Pixel+0x1ac>)
 80036d2:	f001 fb15 	bl	8004d00 <HAL_GPIO_WritePin>
 80036d6:	e000      	b.n	80036da <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 80036d8:	bf00      	nop

}
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	2000000e 	.word	0x2000000e
 80036e4:	2000000c 	.word	0x2000000c
 80036e8:	40020800 	.word	0x40020800
 80036ec:	200002b0 	.word	0x200002b0

080036f0 <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4604      	mov	r4, r0
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	80fb      	strh	r3, [r7, #6]
 8003702:	4603      	mov	r3, r0
 8003704:	80bb      	strh	r3, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	807b      	strh	r3, [r7, #2]
 800370a:	4613      	mov	r3, r2
 800370c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <ILI9341_Draw_Rectangle+0xb0>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	88fa      	ldrh	r2, [r7, #6]
 8003716:	429a      	cmp	r2, r3
 8003718:	d23d      	bcs.n	8003796 <ILI9341_Draw_Rectangle+0xa6>
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <ILI9341_Draw_Rectangle+0xb4>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	88ba      	ldrh	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d237      	bcs.n	8003796 <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	4413      	add	r3, r2
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <ILI9341_Draw_Rectangle+0xb0>)
 800372e:	8812      	ldrh	r2, [r2, #0]
 8003730:	b292      	uxth	r2, r2
 8003732:	4293      	cmp	r3, r2
 8003734:	dd05      	ble.n	8003742 <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <ILI9341_Draw_Rectangle+0xb0>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29a      	uxth	r2, r3
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8003742:	88ba      	ldrh	r2, [r7, #4]
 8003744:	883b      	ldrh	r3, [r7, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <ILI9341_Draw_Rectangle+0xb4>)
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	b292      	uxth	r2, r2
 800374e:	4293      	cmp	r3, r2
 8003750:	dd05      	ble.n	800375e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <ILI9341_Draw_Rectangle+0xb4>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29a      	uxth	r2, r3
 8003758:	88bb      	ldrh	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	4413      	add	r3, r2
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29c      	uxth	r4, r3
 800376a:	88ba      	ldrh	r2, [r7, #4]
 800376c:	883b      	ldrh	r3, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	88b9      	ldrh	r1, [r7, #4]
 8003778:	88f8      	ldrh	r0, [r7, #6]
 800377a:	4622      	mov	r2, r4
 800377c:	f7ff fc44 	bl	8003008 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8003780:	883b      	ldrh	r3, [r7, #0]
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	461a      	mov	r2, r3
 800378a:	8b3b      	ldrh	r3, [r7, #24]
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fe10 	bl	80033b4 <ILI9341_Draw_Colour_Burst>
 8003794:	e000      	b.n	8003798 <ILI9341_Draw_Rectangle+0xa8>
		return;
 8003796:	bf00      	nop
}
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000000e 	.word	0x2000000e
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 80037ae:	2310      	movs	r3, #16
 80037b0:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 80037b6:	e019      	b.n	80037ec <TP_Read+0x44>
	{
		value <<= 1;
 80037b8:	88bb      	ldrh	r3, [r7, #4]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80037be:	2201      	movs	r2, #1
 80037c0:	2108      	movs	r1, #8
 80037c2:	480e      	ldr	r0, [pc, #56]	; (80037fc <TP_Read+0x54>)
 80037c4:	f001 fa9c 	bl	8004d00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2108      	movs	r1, #8
 80037cc:	480b      	ldr	r0, [pc, #44]	; (80037fc <TP_Read+0x54>)
 80037ce:	f001 fa97 	bl	8004d00 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80037d2:	2110      	movs	r1, #16
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <TP_Read+0x54>)
 80037d6:	f001 fa7b 	bl	8004cd0 <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <TP_Read+0x3e>
		{
			value++;
 80037e0:	88bb      	ldrh	r3, [r7, #4]
 80037e2:	3301      	adds	r3, #1
 80037e4:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e2      	bne.n	80037b8 <TP_Read+0x10>
	};

	return value;
 80037f2:	88bb      	ldrh	r3, [r7, #4]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 800380a:	2308      	movs	r3, #8
 800380c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800380e:	2200      	movs	r2, #0
 8003810:	2108      	movs	r1, #8
 8003812:	4815      	ldr	r0, [pc, #84]	; (8003868 <TP_Write+0x68>)
 8003814:	f001 fa74 	bl	8004d00 <HAL_GPIO_WritePin>

	while (i > 0)
 8003818:	e01e      	b.n	8003858 <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	da05      	bge.n	800382e <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003822:	2201      	movs	r2, #1
 8003824:	2120      	movs	r1, #32
 8003826:	4810      	ldr	r0, [pc, #64]	; (8003868 <TP_Write+0x68>)
 8003828:	f001 fa6a 	bl	8004d00 <HAL_GPIO_WritePin>
 800382c:	e004      	b.n	8003838 <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800382e:	2200      	movs	r2, #0
 8003830:	2120      	movs	r1, #32
 8003832:	480d      	ldr	r0, [pc, #52]	; (8003868 <TP_Write+0x68>)
 8003834:	f001 fa64 	bl	8004d00 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800383e:	2201      	movs	r2, #1
 8003840:	2108      	movs	r1, #8
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <TP_Write+0x68>)
 8003844:	f001 fa5c 	bl	8004d00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	2108      	movs	r1, #8
 800384c:	4806      	ldr	r0, [pc, #24]	; (8003868 <TP_Write+0x68>)
 800384e:	f001 fa57 	bl	8004d00 <HAL_GPIO_WritePin>
		i--;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3b01      	subs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1dd      	bne.n	800381a <TP_Write+0x1a>
	};
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	00000000 	.word	0x00000000

08003870 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003878:	2201      	movs	r2, #1
 800387a:	2108      	movs	r1, #8
 800387c:	485a      	ldr	r0, [pc, #360]	; (80039e8 <TP_Read_Coordinates+0x178>)
 800387e:	f001 fa3f 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003882:	2201      	movs	r2, #1
 8003884:	2120      	movs	r1, #32
 8003886:	4858      	ldr	r0, [pc, #352]	; (80039e8 <TP_Read_Coordinates+0x178>)
 8003888:	f001 fa3a 	bl	8004d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800388c:	2201      	movs	r2, #1
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	4855      	ldr	r0, [pc, #340]	; (80039e8 <TP_Read_Coordinates+0x178>)
 8003892:	f001 fa35 	bl	8004d00 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 80038a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a6:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80038ac:	2200      	movs	r2, #0
 80038ae:	2140      	movs	r1, #64	; 0x40
 80038b0:	484d      	ldr	r0, [pc, #308]	; (80039e8 <TP_Read_Coordinates+0x178>)
 80038b2:	f001 fa25 	bl	8004d00 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80038b6:	e023      	b.n	8003900 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 80038b8:	2090      	movs	r0, #144	; 0x90
 80038ba:	f7ff ffa1 	bl	8003800 <TP_Write>

		rawy = TP_Read();
 80038be:	f7ff ff73 	bl	80037a8 <TP_Read>
 80038c2:	4603      	mov	r3, r0
 80038c4:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	4413      	add	r3, r2
 80038cc:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 80038d6:	20d0      	movs	r0, #208	; 0xd0
 80038d8:	f7ff ff92 	bl	8003800 <TP_Write>
		rawx = TP_Read();
 80038dc:	f7ff ff64 	bl	80037a8 <TP_Read>
 80038e0:	4603      	mov	r3, r0
 80038e2:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 80038e4:	89bb      	ldrh	r3, [r7, #12]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	4413      	add	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80038ec:	89bb      	ldrh	r3, [r7, #12]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	4413      	add	r3, r2
 80038f2:	61fb      	str	r3, [r7, #28]
		samples--;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3301      	adds	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <TP_Read_Coordinates+0xa4>
 8003906:	2104      	movs	r1, #4
 8003908:	4837      	ldr	r0, [pc, #220]	; (80039e8 <TP_Read_Coordinates+0x178>)
 800390a:	f001 f9e1 	bl	8004cd0 <HAL_GPIO_ReadPin>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0d1      	beq.n	80038b8 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003914:	2201      	movs	r2, #1
 8003916:	2140      	movs	r1, #64	; 0x40
 8003918:	4833      	ldr	r0, [pc, #204]	; (80039e8 <TP_Read_Coordinates+0x178>)
 800391a:	f001 f9f1 	bl	8004d00 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003924:	d14d      	bne.n	80039c2 <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003926:	2104      	movs	r1, #4
 8003928:	482f      	ldr	r0, [pc, #188]	; (80039e8 <TP_Read_Coordinates+0x178>)
 800392a:	f001 f9d1 	bl	8004cd0 <HAL_GPIO_ReadPin>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d146      	bne.n	80039c2 <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8003950:	89bb      	ldrh	r3, [r7, #12]
 8003952:	425b      	negs	r3, r3
 8003954:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003956:	89fb      	ldrh	r3, [r7, #14]
 8003958:	425b      	negs	r3, r3
 800395a:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 800395c:	89ba      	ldrh	r2, [r7, #12]
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <TP_Read_Coordinates+0x17c>)
 8003960:	fba3 1302 	umull	r1, r3, r3, r2
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	0852      	lsrs	r2, r2, #1
 8003968:	4413      	add	r3, r2
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	b29b      	uxth	r3, r3
 800396e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800397a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80039e0 <TP_Read_Coordinates+0x170>
 800397e:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003982:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003986:	ee17 3a90 	vmov	r3, s15
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8003990:	89fb      	ldrh	r3, [r7, #14]
 8003992:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <TP_Read_Coordinates+0x180>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	09db      	lsrs	r3, r3, #7
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b0f      	subs	r3, #15
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039a6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80039e0 <TP_Read_Coordinates+0x170>
 80039aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3302      	adds	r3, #2
 80039b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039b6:	ee17 2a90 	vmov	r2, s15
 80039ba:	b292      	uxth	r2, r2
 80039bc:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 80039be:	2301      	movs	r3, #1
 80039c0:	e007      	b.n	80039d2 <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3302      	adds	r3, #2
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 80039d0:	2300      	movs	r3, #0
	}
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3728      	adds	r7, #40	; 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	f3af 8000 	nop.w
 80039e0:	28f5c28f 	.word	0x28f5c28f
 80039e4:	3ff28f5c 	.word	0x3ff28f5c
 80039e8:	40021000 	.word	0x40021000
 80039ec:	e01e01e1 	.word	0xe01e01e1
 80039f0:	a0a0a0a1 	.word	0xa0a0a0a1

080039f4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80039f8:	2104      	movs	r1, #4
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <TP_Touchpad_Pressed+0x1c>)
 80039fc:	f001 f968 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003a0a:	2300      	movs	r3, #0
	}
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_Init+0x28>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_Init+0x28>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a24:	2003      	movs	r0, #3
 8003a26:	f000 fe4b 	bl	80046c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f000 f808 	bl	8003a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a30:	f7fe fc42 	bl	80022b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_InitTick+0x54>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_InitTick+0x58>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fe71 	bl	8004746 <HAL_SYSTICK_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00e      	b.n	8003a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d80a      	bhi.n	8003a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a74:	2200      	movs	r2, #0
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f000 fe2b 	bl	80046d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a80:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <HAL_InitTick+0x5c>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000008 	.word	0x20000008
 8003a98:	20000014 	.word	0x20000014
 8003a9c:	20000010 	.word	0x20000010

08003aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_IncTick+0x20>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_IncTick+0x24>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_IncTick+0x24>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000014 	.word	0x20000014
 8003ac4:	200004d0 	.word	0x200004d0

08003ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return uwTick;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_GetTick+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	200004d0 	.word	0x200004d0

08003ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7ff ffee 	bl	8003ac8 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d005      	beq.n	8003b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_Delay+0x44>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b06:	bf00      	nop
 8003b08:	f7ff ffde 	bl	8003ac8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d8f7      	bhi.n	8003b08 <HAL_Delay+0x28>
  {
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000014 	.word	0x20000014

08003b28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e031      	b.n	8003ba2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd f9d4 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <HAL_ADC_Init+0x84>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fbaa 	bl	80042d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
 8003b92:	e001      	b.n	8003b98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	ffffeefd 	.word	0xffffeefd

08003bb0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Start_IT+0x1a>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0b5      	b.n	8003d36 <HAL_ADC_Start_IT+0x186>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d018      	beq.n	8003c12 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003bf0:	4b54      	ldr	r3, [pc, #336]	; (8003d44 <HAL_ADC_Start_IT+0x194>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a54      	ldr	r2, [pc, #336]	; (8003d48 <HAL_ADC_Start_IT+0x198>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9a      	lsrs	r2, r3, #18
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f9      	bne.n	8003c06 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d17d      	bne.n	8003d1c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_ADC_Start_IT+0x19c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5a:	d106      	bne.n	8003c6a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	f023 0206 	bic.w	r2, r3, #6
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
 8003c68:	e002      	b.n	8003c70 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c80:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_ADC_Start_IT+0x1a0>)
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_ADC_Start_IT+0x1a4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d143      	bne.n	8003d34 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e03a      	b.n	8003d34 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <HAL_ADC_Start_IT+0x1a8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_ADC_Start_IT+0x136>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d107      	bne.n	8003ce6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ce4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_ADC_Start_IT+0x1a4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d120      	bne.n	8003d34 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_ADC_Start_IT+0x1ac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d11b      	bne.n	8003d34 <HAL_ADC_Start_IT+0x184>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d114      	bne.n	8003d34 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	e00b      	b.n	8003d34 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0210 	orr.w	r2, r3, #16
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	f043 0201 	orr.w	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000008 	.word	0x20000008
 8003d48:	431bde83 	.word	0x431bde83
 8003d4c:	fffff8fe 	.word	0xfffff8fe
 8003d50:	04000020 	.word	0x04000020
 8003d54:	40012300 	.word	0x40012300
 8003d58:	40012000 	.word	0x40012000
 8003d5c:	40012200 	.word	0x40012200

08003d60 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_ADC_Stop_IT+0x16>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e027      	b.n	8003dc6 <HAL_ADC_Stop_IT+0x66>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_ADC_Stop_IT+0x74>)
 8003da8:	400b      	ands	r3, r1
 8003daa:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_ADC_Stop_IT+0x78>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	fbffffdf 	.word	0xfbffffdf
 8003dd8:	ffffeefe 	.word	0xffffeefe

08003ddc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d049      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0xca>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d046      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d12b      	bne.n	8003e96 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d127      	bne.n	8003e96 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0220 	bic.w	r2, r2, #32
 8003e70:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd ffa8 	bl	8001dec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0212 	mvn.w	r2, #18
 8003ea4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d057      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x190>
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d054      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d139      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d12b      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d124      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11d      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d119      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fab1 	bl	80044c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 020c 	mvn.w	r2, #12
 8003f6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d017      	beq.n	8003fb2 <HAL_ADC_IRQHandler+0x1d6>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d014      	beq.n	8003fb2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10d      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f82a 	bl	8003ffc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0201 	mvn.w	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d015      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x218>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d012      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f06f 0220 	mvn.w	r2, #32
 8003fe2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f813 	bl	8004010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0220 	mvn.w	r2, #32
 8003ff2:	601a      	str	r2, [r3, #0]
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x1c>
 800403c:	2302      	movs	r3, #2
 800403e:	e136      	b.n	80042ae <HAL_ADC_ConfigChannel+0x28a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b09      	cmp	r3, #9
 800404e:	d93a      	bls.n	80040c6 <HAL_ADC_ConfigChannel+0xa2>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004058:	d035      	beq.n	80040c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	3b1e      	subs	r3, #30
 8004070:	2207      	movs	r2, #7
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a8d      	ldr	r2, [pc, #564]	; (80042bc <HAL_ADC_ConfigChannel+0x298>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68d9      	ldr	r1, [r3, #12]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	061a      	lsls	r2, r3, #24
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409e:	e035      	b.n	800410c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4403      	add	r3, r0
 80040b8:	3b1e      	subs	r3, #30
 80040ba:	409a      	lsls	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040c4:	e022      	b.n	800410c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6919      	ldr	r1, [r3, #16]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	2207      	movs	r2, #7
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43da      	mvns	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	400a      	ands	r2, r1
 80040e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6919      	ldr	r1, [r3, #16]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4618      	mov	r0, r3
 80040fc:	4603      	mov	r3, r0
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4403      	add	r3, r0
 8004102:	409a      	lsls	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d824      	bhi.n	800415e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	3b05      	subs	r3, #5
 8004126:	221f      	movs	r2, #31
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43da      	mvns	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	400a      	ands	r2, r1
 8004134:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	4618      	mov	r0, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	3b05      	subs	r3, #5
 8004150:	fa00 f203 	lsl.w	r2, r0, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	635a      	str	r2, [r3, #52]	; 0x34
 800415c:	e04c      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d824      	bhi.n	80041b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	3b23      	subs	r3, #35	; 0x23
 8004178:	221f      	movs	r2, #31
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	400a      	ands	r2, r1
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	4618      	mov	r0, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	3b23      	subs	r3, #35	; 0x23
 80041a2:	fa00 f203 	lsl.w	r2, r0, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
 80041ae:	e023      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	3b41      	subs	r3, #65	; 0x41
 80041c2:	221f      	movs	r2, #31
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43da      	mvns	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	400a      	ands	r2, r1
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	4618      	mov	r0, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	3b41      	subs	r3, #65	; 0x41
 80041ec:	fa00 f203 	lsl.w	r2, r0, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <HAL_ADC_ConfigChannel+0x29c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10a      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1f4>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420a:	d105      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800420c:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8004212:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004216:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a28      	ldr	r2, [pc, #160]	; (80042c0 <HAL_ADC_ConfigChannel+0x29c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10f      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x21e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b12      	cmp	r3, #18
 8004228:	d10b      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8004230:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004234:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800423c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004240:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_ADC_ConfigChannel+0x29c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d12b      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x280>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <HAL_ADC_ConfigChannel+0x298>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <HAL_ADC_ConfigChannel+0x23a>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b11      	cmp	r3, #17
 800425c:	d122      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8004264:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004268:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8004270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004274:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a10      	ldr	r2, [pc, #64]	; (80042bc <HAL_ADC_ConfigChannel+0x298>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d111      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a11      	ldr	r2, [pc, #68]	; (80042cc <HAL_ADC_ConfigChannel+0x2a8>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0c9a      	lsrs	r2, r3, #18
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004296:	e002      	b.n	800429e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3b01      	subs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f9      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	10000012 	.word	0x10000012
 80042c0:	40012000 	.word	0x40012000
 80042c4:	40012300 	.word	0x40012300
 80042c8:	20000008 	.word	0x20000008
 80042cc:	431bde83 	.word	0x431bde83

080042d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042d8:	4b78      	ldr	r3, [pc, #480]	; (80044bc <ADC_Init+0x1ec>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a77      	ldr	r2, [pc, #476]	; (80044bc <ADC_Init+0x1ec>)
 80042de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042e4:	4b75      	ldr	r3, [pc, #468]	; (80044bc <ADC_Init+0x1ec>)
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4973      	ldr	r1, [pc, #460]	; (80044bc <ADC_Init+0x1ec>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	021a      	lsls	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <ADC_Init+0x1f0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004372:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	e00f      	b.n	80043ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0202 	bic.w	r2, r2, #2
 80043d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6899      	ldr	r1, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	005a      	lsls	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004406:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004416:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	3b01      	subs	r3, #1
 8004424:	035a      	lsls	r2, r3, #13
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	e007      	b.n	8004440 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	3b01      	subs	r3, #1
 800445c:	051a      	lsls	r2, r3, #20
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004482:	025a      	lsls	r2, r3, #9
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6899      	ldr	r1, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	029a      	lsls	r2, r3, #10
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40012300 	.word	0x40012300
 80044c0:	0f000001 	.word	0x0f000001

080044c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <__NVIC_SetPriorityGrouping>:
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <__NVIC_SetPriorityGrouping+0x40>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	4313      	orrs	r3, r2
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <__NVIC_SetPriorityGrouping+0x40>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00
 800451c:	05fa0000 	.word	0x05fa0000

08004520 <__NVIC_GetPriorityGrouping>:
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_DisableIRQ>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db12      	blt.n	80045b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	490a      	ldr	r1, [pc, #40]	; (80045bc <__NVIC_DisableIRQ+0x44>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2001      	movs	r0, #1
 800459a:	fa00 f202 	lsl.w	r2, r0, r2
 800459e:	3320      	adds	r3, #32
 80045a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80045a4:	f3bf 8f4f 	dsb	sy
}
 80045a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045aa:	f3bf 8f6f 	isb	sy
}
 80045ae:	bf00      	nop
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_SetPriority>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0a      	blt.n	80045ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	490c      	ldr	r1, [pc, #48]	; (800460c <__NVIC_SetPriority+0x4c>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	440b      	add	r3, r1
 80045e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045e8:	e00a      	b.n	8004600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4908      	ldr	r1, [pc, #32]	; (8004610 <__NVIC_SetPriority+0x50>)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3b04      	subs	r3, #4
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	440b      	add	r3, r1
 80045fe:	761a      	strb	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000e100 	.word	0xe000e100
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <NVIC_EncodePriority>:
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f1c3 0307 	rsb	r3, r3, #7
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf28      	it	cs
 8004632:	2304      	movcs	r3, #4
 8004634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3304      	adds	r3, #4
 800463a:	2b06      	cmp	r3, #6
 800463c:	d902      	bls.n	8004644 <NVIC_EncodePriority+0x30>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3b03      	subs	r3, #3
 8004642:	e000      	b.n	8004646 <NVIC_EncodePriority+0x32>
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	401a      	ands	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800465c:	f04f 31ff 	mov.w	r1, #4294967295
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa01 f303 	lsl.w	r3, r1, r3
 8004666:	43d9      	mvns	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	4313      	orrs	r3, r2
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800468c:	d301      	bcc.n	8004692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800468e:	2301      	movs	r3, #1
 8004690:	e00f      	b.n	80046b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <SysTick_Config+0x40>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800469a:	210f      	movs	r1, #15
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f7ff ff8e 	bl	80045c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <SysTick_Config+0x40>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <SysTick_Config+0x40>)
 80046ac:	2207      	movs	r2, #7
 80046ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000e010 	.word	0xe000e010

080046c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff05 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e8:	f7ff ff1a 	bl	8004520 <__NVIC_GetPriorityGrouping>
 80046ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff8e 	bl	8004614 <NVIC_EncodePriority>
 80046f8:	4602      	mov	r2, r0
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff5d 	bl	80045c0 <__NVIC_SetPriority>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff0d 	bl	800453c <__NVIC_EnableIRQ>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff1d 	bl	8004578 <__NVIC_DisableIRQ>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff94 	bl	800467c <SysTick_Config>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e175      	b.n	8004a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	f040 8164 	bne.w	8004a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d005      	beq.n	80047b6 <HAL_GPIO_Init+0x56>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d130      	bne.n	8004818 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	2203      	movs	r2, #3
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047ec:	2201      	movs	r2, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 0201 	and.w	r2, r3, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d017      	beq.n	8004854 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d123      	bne.n	80048a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	08da      	lsrs	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3208      	adds	r2, #8
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	220f      	movs	r2, #15
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	08da      	lsrs	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3208      	adds	r2, #8
 80048a2:	69b9      	ldr	r1, [r7, #24]
 80048a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0203 	and.w	r2, r3, #3
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80be 	beq.w	8004a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <HAL_GPIO_Init+0x324>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	4a65      	ldr	r2, [pc, #404]	; (8004a84 <HAL_GPIO_Init+0x324>)
 80048f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f4:	6453      	str	r3, [r2, #68]	; 0x44
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_GPIO_Init+0x324>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004902:	4a61      	ldr	r2, [pc, #388]	; (8004a88 <HAL_GPIO_Init+0x328>)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	089b      	lsrs	r3, r3, #2
 8004908:	3302      	adds	r3, #2
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	220f      	movs	r2, #15
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a58      	ldr	r2, [pc, #352]	; (8004a8c <HAL_GPIO_Init+0x32c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d037      	beq.n	800499e <HAL_GPIO_Init+0x23e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a57      	ldr	r2, [pc, #348]	; (8004a90 <HAL_GPIO_Init+0x330>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_GPIO_Init+0x23a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a56      	ldr	r2, [pc, #344]	; (8004a94 <HAL_GPIO_Init+0x334>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <HAL_GPIO_Init+0x236>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a55      	ldr	r2, [pc, #340]	; (8004a98 <HAL_GPIO_Init+0x338>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d025      	beq.n	8004992 <HAL_GPIO_Init+0x232>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a54      	ldr	r2, [pc, #336]	; (8004a9c <HAL_GPIO_Init+0x33c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01f      	beq.n	800498e <HAL_GPIO_Init+0x22e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a53      	ldr	r2, [pc, #332]	; (8004aa0 <HAL_GPIO_Init+0x340>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d019      	beq.n	800498a <HAL_GPIO_Init+0x22a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a52      	ldr	r2, [pc, #328]	; (8004aa4 <HAL_GPIO_Init+0x344>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_GPIO_Init+0x226>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <HAL_GPIO_Init+0x348>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00d      	beq.n	8004982 <HAL_GPIO_Init+0x222>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a50      	ldr	r2, [pc, #320]	; (8004aac <HAL_GPIO_Init+0x34c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <HAL_GPIO_Init+0x21e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a4f      	ldr	r2, [pc, #316]	; (8004ab0 <HAL_GPIO_Init+0x350>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_GPIO_Init+0x21a>
 8004976:	2309      	movs	r3, #9
 8004978:	e012      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800497a:	230a      	movs	r3, #10
 800497c:	e010      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800497e:	2308      	movs	r3, #8
 8004980:	e00e      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004982:	2307      	movs	r3, #7
 8004984:	e00c      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004986:	2306      	movs	r3, #6
 8004988:	e00a      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800498a:	2305      	movs	r3, #5
 800498c:	e008      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800498e:	2304      	movs	r3, #4
 8004990:	e006      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004992:	2303      	movs	r3, #3
 8004994:	e004      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004996:	2302      	movs	r3, #2
 8004998:	e002      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800499e:	2300      	movs	r3, #0
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	f002 0203 	and.w	r2, r2, #3
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	4093      	lsls	r3, r2
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049b0:	4935      	ldr	r1, [pc, #212]	; (8004a88 <HAL_GPIO_Init+0x328>)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3302      	adds	r3, #2
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049e2:	4a34      	ldr	r2, [pc, #208]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e8:	4b32      	ldr	r3, [pc, #200]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a0c:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a12:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a60:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	f67f ae86 	bls.w	8004780 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3724      	adds	r7, #36	; 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40013800 	.word	0x40013800
 8004a8c:	40020000 	.word	0x40020000
 8004a90:	40020400 	.word	0x40020400
 8004a94:	40020800 	.word	0x40020800
 8004a98:	40020c00 	.word	0x40020c00
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40021400 	.word	0x40021400
 8004aa4:	40021800 	.word	0x40021800
 8004aa8:	40021c00 	.word	0x40021c00
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40022400 	.word	0x40022400
 8004ab4:	40013c00 	.word	0x40013c00

08004ab8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e0d9      	b.n	8004c88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f040 80c9 	bne.w	8004c82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004af0:	4a6b      	ldr	r2, [pc, #428]	; (8004ca0 <HAL_GPIO_DeInit+0x1e8>)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	089b      	lsrs	r3, r3, #2
 8004af6:	3302      	adds	r3, #2
 8004af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	220f      	movs	r2, #15
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a63      	ldr	r2, [pc, #396]	; (8004ca4 <HAL_GPIO_DeInit+0x1ec>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d037      	beq.n	8004b8a <HAL_GPIO_DeInit+0xd2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a62      	ldr	r2, [pc, #392]	; (8004ca8 <HAL_GPIO_DeInit+0x1f0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d031      	beq.n	8004b86 <HAL_GPIO_DeInit+0xce>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a61      	ldr	r2, [pc, #388]	; (8004cac <HAL_GPIO_DeInit+0x1f4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02b      	beq.n	8004b82 <HAL_GPIO_DeInit+0xca>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a60      	ldr	r2, [pc, #384]	; (8004cb0 <HAL_GPIO_DeInit+0x1f8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d025      	beq.n	8004b7e <HAL_GPIO_DeInit+0xc6>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a5f      	ldr	r2, [pc, #380]	; (8004cb4 <HAL_GPIO_DeInit+0x1fc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01f      	beq.n	8004b7a <HAL_GPIO_DeInit+0xc2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a5e      	ldr	r2, [pc, #376]	; (8004cb8 <HAL_GPIO_DeInit+0x200>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d019      	beq.n	8004b76 <HAL_GPIO_DeInit+0xbe>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_GPIO_DeInit+0x204>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_GPIO_DeInit+0xba>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a5c      	ldr	r2, [pc, #368]	; (8004cc0 <HAL_GPIO_DeInit+0x208>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00d      	beq.n	8004b6e <HAL_GPIO_DeInit+0xb6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a5b      	ldr	r2, [pc, #364]	; (8004cc4 <HAL_GPIO_DeInit+0x20c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d007      	beq.n	8004b6a <HAL_GPIO_DeInit+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a5a      	ldr	r2, [pc, #360]	; (8004cc8 <HAL_GPIO_DeInit+0x210>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <HAL_GPIO_DeInit+0xae>
 8004b62:	2309      	movs	r3, #9
 8004b64:	e012      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b66:	230a      	movs	r3, #10
 8004b68:	e010      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	e00e      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b6e:	2307      	movs	r3, #7
 8004b70:	e00c      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b72:	2306      	movs	r3, #6
 8004b74:	e00a      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b76:	2305      	movs	r3, #5
 8004b78:	e008      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	e006      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e004      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e002      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_GPIO_DeInit+0xd4>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	f002 0203 	and.w	r2, r2, #3
 8004b92:	0092      	lsls	r2, r2, #2
 8004b94:	4093      	lsls	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d132      	bne.n	8004c02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	4949      	ldr	r1, [pc, #292]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004baa:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	4946      	ldr	r1, [pc, #280]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004bb8:	4b44      	ldr	r3, [pc, #272]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	4942      	ldr	r1, [pc, #264]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bc6:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	493f      	ldr	r1, [pc, #252]	; (8004ccc <HAL_GPIO_DeInit+0x214>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	220f      	movs	r2, #15
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004be4:	4a2e      	ldr	r2, [pc, #184]	; (8004ca0 <HAL_GPIO_DeInit+0x1e8>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	3302      	adds	r3, #2
 8004bec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	482a      	ldr	r0, [pc, #168]	; (8004ca0 <HAL_GPIO_DeInit+0x1e8>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	400a      	ands	r2, r1
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2103      	movs	r1, #3
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	08da      	lsrs	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3208      	adds	r2, #8
 8004c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	08d2      	lsrs	r2, r2, #3
 8004c38:	4019      	ands	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3208      	adds	r2, #8
 8004c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	401a      	ands	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	2103      	movs	r1, #3
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	3301      	adds	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b0f      	cmp	r3, #15
 8004c8c:	f67f af22 	bls.w	8004ad4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40020c00 	.word	0x40020c00
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40021400 	.word	0x40021400
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	40021c00 	.word	0x40021c00
 8004cc4:	40022000 	.word	0x40022000
 8004cc8:	40022400 	.word	0x40022400
 8004ccc:	40013c00 	.word	0x40013c00

08004cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	e001      	b.n	8004cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d10:	787b      	ldrb	r3, [r7, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d16:	887a      	ldrh	r2, [r7, #2]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d1c:	e003      	b.n	8004d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d1e:	887b      	ldrh	r3, [r7, #2]
 8004d20:	041a      	lsls	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	619a      	str	r2, [r3, #24]
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fa84 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d107      	bne.n	8004dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	e006      	b.n	8004dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d104      	bne.n	8004dce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_I2C_Init+0x11c>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69d9      	ldr	r1, [r3, #28]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	02008000 	.word	0x02008000

08004e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d138      	bne.n	8004edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e032      	b.n	8004ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6819      	ldr	r1, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d139      	bne.n	8004f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e033      	b.n	8004f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2224      	movs	r2, #36	; 0x24
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40007000 	.word	0x40007000

08004fa4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fd2:	f7fe fd79 	bl	8003ac8 <HAL_GetTick>
 8004fd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fd8:	e009      	b.n	8004fee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fda:	f7fe fd75 	bl	8003ac8 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe8:	d901      	bls.n	8004fee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e022      	b.n	8005034 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffa:	d1ee      	bne.n	8004fda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005006:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005008:	f7fe fd5e 	bl	8003ac8 <HAL_GetTick>
 800500c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800500e:	e009      	b.n	8005024 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005010:	f7fe fd5a 	bl	8003ac8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800501e:	d901      	bls.n	8005024 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e007      	b.n	8005034 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005030:	d1ee      	bne.n	8005010 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	40007000 	.word	0x40007000

08005044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800504c:	2300      	movs	r3, #0
 800504e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e29b      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8087 	beq.w	8005176 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005068:	4b96      	ldr	r3, [pc, #600]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b04      	cmp	r3, #4
 8005072:	d00c      	beq.n	800508e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005074:	4b93      	ldr	r3, [pc, #588]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b08      	cmp	r3, #8
 800507e:	d112      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62>
 8005080:	4b90      	ldr	r3, [pc, #576]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800508c:	d10b      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800508e:	4b8d      	ldr	r3, [pc, #564]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d06c      	beq.n	8005174 <HAL_RCC_OscConfig+0x130>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d168      	bne.n	8005174 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e275      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	d106      	bne.n	80050be <HAL_RCC_OscConfig+0x7a>
 80050b0:	4b84      	ldr	r3, [pc, #528]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a83      	ldr	r2, [pc, #524]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e02e      	b.n	800511c <HAL_RCC_OscConfig+0xd8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x9c>
 80050c6:	4b7f      	ldr	r3, [pc, #508]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7e      	ldr	r2, [pc, #504]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b7c      	ldr	r3, [pc, #496]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7b      	ldr	r2, [pc, #492]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e01d      	b.n	800511c <HAL_RCC_OscConfig+0xd8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0xc0>
 80050ea:	4b76      	ldr	r3, [pc, #472]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4b73      	ldr	r3, [pc, #460]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a72      	ldr	r2, [pc, #456]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e00b      	b.n	800511c <HAL_RCC_OscConfig+0xd8>
 8005104:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a6e      	ldr	r2, [pc, #440]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800510a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b6c      	ldr	r3, [pc, #432]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6b      	ldr	r2, [pc, #428]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d013      	beq.n	800514c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fe fcd0 	bl	8003ac8 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800512c:	f7fe fccc 	bl	8003ac8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b64      	cmp	r3, #100	; 0x64
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e229      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0xe8>
 800514a:	e014      	b.n	8005176 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fe fcbc 	bl	8003ac8 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fe fcb8 	bl	8003ac8 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e215      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005166:	4b57      	ldr	r3, [pc, #348]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x110>
 8005172:	e000      	b.n	8005176 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d069      	beq.n	8005256 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005182:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 030c 	and.w	r3, r3, #12
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518e:	4b4d      	ldr	r3, [pc, #308]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b08      	cmp	r3, #8
 8005198:	d11c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x190>
 800519a:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a6:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_RCC_OscConfig+0x17a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d001      	beq.n	80051be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e1e9      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051be:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	493d      	ldr	r1, [pc, #244]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d2:	e040      	b.n	8005256 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d023      	beq.n	8005224 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051dc:	4b39      	ldr	r3, [pc, #228]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fe fc6e 	bl	8003ac8 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f0:	f7fe fc6a 	bl	8003ac8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e1c7      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005202:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520e:	4b2d      	ldr	r3, [pc, #180]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4929      	ldr	r1, [pc, #164]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]
 8005222:	e018      	b.n	8005256 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fe fc4a 	bl	8003ac8 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005238:	f7fe fc46 	bl	8003ac8 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e1a3      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d038      	beq.n	80052d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 800526c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fe fc27 	bl	8003ac8 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800527e:	f7fe fc23 	bl	8003ac8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e180      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 8005292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x23a>
 800529c:	e01a      	b.n	80052d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a2:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <HAL_RCC_OscConfig+0x280>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fe fc0d 	bl	8003ac8 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fe fc09 	bl	8003ac8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d903      	bls.n	80052c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e166      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
 80052c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	4b92      	ldr	r3, [pc, #584]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80052ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ee      	bne.n	80052b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a4 	beq.w	800542a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4b8c      	ldr	r3, [pc, #560]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10d      	bne.n	800530a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4b89      	ldr	r3, [pc, #548]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	4a88      	ldr	r2, [pc, #544]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6413      	str	r3, [r2, #64]	; 0x40
 80052fa:	4b86      	ldr	r3, [pc, #536]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530a:	4b83      	ldr	r3, [pc, #524]	; (8005518 <HAL_RCC_OscConfig+0x4d4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d118      	bne.n	8005348 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005316:	4b80      	ldr	r3, [pc, #512]	; (8005518 <HAL_RCC_OscConfig+0x4d4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7f      	ldr	r2, [pc, #508]	; (8005518 <HAL_RCC_OscConfig+0x4d4>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005322:	f7fe fbd1 	bl	8003ac8 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532a:	f7fe fbcd 	bl	8003ac8 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b64      	cmp	r3, #100	; 0x64
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e12a      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533c:	4b76      	ldr	r3, [pc, #472]	; (8005518 <HAL_RCC_OscConfig+0x4d4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <HAL_RCC_OscConfig+0x31a>
 8005350:	4b70      	ldr	r3, [pc, #448]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a6f      	ldr	r2, [pc, #444]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
 800535c:	e02d      	b.n	80053ba <HAL_RCC_OscConfig+0x376>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0x33c>
 8005366:	4b6b      	ldr	r3, [pc, #428]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	4a6a      	ldr	r2, [pc, #424]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	6713      	str	r3, [r2, #112]	; 0x70
 8005372:	4b68      	ldr	r3, [pc, #416]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	4a67      	ldr	r2, [pc, #412]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005378:	f023 0304 	bic.w	r3, r3, #4
 800537c:	6713      	str	r3, [r2, #112]	; 0x70
 800537e:	e01c      	b.n	80053ba <HAL_RCC_OscConfig+0x376>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b05      	cmp	r3, #5
 8005386:	d10c      	bne.n	80053a2 <HAL_RCC_OscConfig+0x35e>
 8005388:	4b62      	ldr	r3, [pc, #392]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	4a61      	ldr	r2, [pc, #388]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800538e:	f043 0304 	orr.w	r3, r3, #4
 8005392:	6713      	str	r3, [r2, #112]	; 0x70
 8005394:	4b5f      	ldr	r3, [pc, #380]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a5e      	ldr	r2, [pc, #376]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	e00b      	b.n	80053ba <HAL_RCC_OscConfig+0x376>
 80053a2:	4b5c      	ldr	r3, [pc, #368]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a5b      	ldr	r2, [pc, #364]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70
 80053ae:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a58      	ldr	r2, [pc, #352]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80053b4:	f023 0304 	bic.w	r3, r3, #4
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d015      	beq.n	80053ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c2:	f7fe fb81 	bl	8003ac8 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fe fb7d 	bl	8003ac8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e0d8      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e0:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0ee      	beq.n	80053ca <HAL_RCC_OscConfig+0x386>
 80053ec:	e014      	b.n	8005418 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fe fb6b 	bl	8003ac8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7fe fb67 	bl	8003ac8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0c2      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540c:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ee      	bne.n	80053f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	4a3c      	ldr	r2, [pc, #240]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005428:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80ae 	beq.w	8005590 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005434:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b08      	cmp	r3, #8
 800543e:	d06d      	beq.n	800551c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d14b      	bne.n	80054e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005448:	4b32      	ldr	r3, [pc, #200]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a31      	ldr	r2, [pc, #196]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fe fb38 	bl	8003ac8 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fe fb34 	bl	8003ac8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e091      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b29      	ldr	r3, [pc, #164]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	3b01      	subs	r3, #1
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	491b      	ldr	r1, [pc, #108]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80054b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fe fb06 	bl	8003ac8 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c0:	f7fe fb02 	bl	8003ac8 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e05f      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	4b10      	ldr	r3, [pc, #64]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x47c>
 80054de:	e057      	b.n	8005590 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 80054e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fe faec 	bl	8003ac8 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f4:	f7fe fae8 	bl	8003ac8 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e045      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_RCC_OscConfig+0x4d0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4b0>
 8005512:	e03d      	b.n	8005590 <HAL_RCC_OscConfig+0x54c>
 8005514:	40023800 	.word	0x40023800
 8005518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800551c:	4b1f      	ldr	r3, [pc, #124]	; (800559c <HAL_RCC_OscConfig+0x558>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d030      	beq.n	800558c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d129      	bne.n	800558c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d122      	bne.n	800558c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005552:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005554:	4293      	cmp	r3, r2
 8005556:	d119      	bne.n	800558c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	3b01      	subs	r3, #1
 8005566:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d10f      	bne.n	800558c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800

080055a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0d0      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055b8:	4b6a      	ldr	r3, [pc, #424]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d910      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b67      	ldr	r3, [pc, #412]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 020f 	bic.w	r2, r3, #15
 80055ce:	4965      	ldr	r1, [pc, #404]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b63      	ldr	r3, [pc, #396]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0b8      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800560a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005618:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a52      	ldr	r2, [pc, #328]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 800561e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	494d      	ldr	r1, [pc, #308]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d040      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564a:	4b47      	ldr	r3, [pc, #284]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d115      	bne.n	8005682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e07f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005662:	4b41      	ldr	r3, [pc, #260]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e073      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005672:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06b      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005682:	4b39      	ldr	r3, [pc, #228]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 0203 	bic.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4936      	ldr	r1, [pc, #216]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005694:	f7fe fa18 	bl	8003ac8 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fe fa14 	bl	8003ac8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e053      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 020c 	and.w	r2, r3, #12
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1eb      	bne.n	800569c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056c4:	4b27      	ldr	r3, [pc, #156]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d210      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 020f 	bic.w	r2, r3, #15
 80056da:	4922      	ldr	r1, [pc, #136]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e032      	b.n	800575a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4916      	ldr	r1, [pc, #88]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	490e      	ldr	r1, [pc, #56]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005732:	f000 f821 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8005736:	4602      	mov	r2, r0
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	490a      	ldr	r1, [pc, #40]	; (800576c <HAL_RCC_ClockConfig+0x1cc>)
 8005744:	5ccb      	ldrb	r3, [r1, r3]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x1d0>)
 800574c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_ClockConfig+0x1d4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe f974 	bl	8003a40 <HAL_InitTick>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023c00 	.word	0x40023c00
 8005768:	40023800 	.word	0x40023800
 800576c:	08020d20 	.word	0x08020d20
 8005770:	20000008 	.word	0x20000008
 8005774:	20000010 	.word	0x20000010

08005778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800577c:	b094      	sub	sp, #80	; 0x50
 800577e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	647b      	str	r3, [r7, #68]	; 0x44
 8005784:	2300      	movs	r3, #0
 8005786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005788:	2300      	movs	r3, #0
 800578a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005790:	4b79      	ldr	r3, [pc, #484]	; (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d00d      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x40>
 800579c:	2b08      	cmp	r3, #8
 800579e:	f200 80e1 	bhi.w	8005964 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x34>
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057aa:	e0db      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b73      	ldr	r3, [pc, #460]	; (800597c <HAL_RCC_GetSysClockFreq+0x204>)
 80057ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b0:	e0db      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057b2:	4b73      	ldr	r3, [pc, #460]	; (8005980 <HAL_RCC_GetSysClockFreq+0x208>)
 80057b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b6:	e0d8      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b8:	4b6f      	ldr	r3, [pc, #444]	; (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057c2:	4b6d      	ldr	r3, [pc, #436]	; (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d063      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ce:	4b6a      	ldr	r3, [pc, #424]	; (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	2200      	movs	r2, #0
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
 80057e2:	2300      	movs	r3, #0
 80057e4:	637b      	str	r3, [r7, #52]	; 0x34
 80057e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	f04f 0000 	mov.w	r0, #0
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	0159      	lsls	r1, r3, #5
 80057f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057fc:	0150      	lsls	r0, r2, #5
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4621      	mov	r1, r4
 8005804:	1a51      	subs	r1, r2, r1
 8005806:	6139      	str	r1, [r7, #16]
 8005808:	4629      	mov	r1, r5
 800580a:	eb63 0301 	sbc.w	r3, r3, r1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800581c:	4659      	mov	r1, fp
 800581e:	018b      	lsls	r3, r1, #6
 8005820:	4651      	mov	r1, sl
 8005822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005826:	4651      	mov	r1, sl
 8005828:	018a      	lsls	r2, r1, #6
 800582a:	4651      	mov	r1, sl
 800582c:	ebb2 0801 	subs.w	r8, r2, r1
 8005830:	4659      	mov	r1, fp
 8005832:	eb63 0901 	sbc.w	r9, r3, r1
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800584a:	4690      	mov	r8, r2
 800584c:	4699      	mov	r9, r3
 800584e:	4623      	mov	r3, r4
 8005850:	eb18 0303 	adds.w	r3, r8, r3
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	462b      	mov	r3, r5
 8005858:	eb49 0303 	adc.w	r3, r9, r3
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800586a:	4629      	mov	r1, r5
 800586c:	024b      	lsls	r3, r1, #9
 800586e:	4621      	mov	r1, r4
 8005870:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005874:	4621      	mov	r1, r4
 8005876:	024a      	lsls	r2, r1, #9
 8005878:	4610      	mov	r0, r2
 800587a:	4619      	mov	r1, r3
 800587c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587e:	2200      	movs	r2, #0
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
 8005882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005884:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005888:	f7fa feee 	bl	8000668 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005894:	e058      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005896:	4b38      	ldr	r3, [pc, #224]	; (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	2200      	movs	r2, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	4611      	mov	r1, r2
 80058a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058a6:	623b      	str	r3, [r7, #32]
 80058a8:	2300      	movs	r3, #0
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	f04f 0000 	mov.w	r0, #0
 80058b8:	f04f 0100 	mov.w	r1, #0
 80058bc:	0159      	lsls	r1, r3, #5
 80058be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c2:	0150      	lsls	r0, r2, #5
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4641      	mov	r1, r8
 80058ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80058ce:	4649      	mov	r1, r9
 80058d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058e8:	ebb2 040a 	subs.w	r4, r2, sl
 80058ec:	eb63 050b 	sbc.w	r5, r3, fp
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	00eb      	lsls	r3, r5, #3
 80058fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058fe:	00e2      	lsls	r2, r4, #3
 8005900:	4614      	mov	r4, r2
 8005902:	461d      	mov	r5, r3
 8005904:	4643      	mov	r3, r8
 8005906:	18e3      	adds	r3, r4, r3
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	464b      	mov	r3, r9
 800590c:	eb45 0303 	adc.w	r3, r5, r3
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800591e:	4629      	mov	r1, r5
 8005920:	028b      	lsls	r3, r1, #10
 8005922:	4621      	mov	r1, r4
 8005924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005928:	4621      	mov	r1, r4
 800592a:	028a      	lsls	r2, r1, #10
 800592c:	4610      	mov	r0, r2
 800592e:	4619      	mov	r1, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005932:	2200      	movs	r2, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	61fa      	str	r2, [r7, #28]
 8005938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800593c:	f7fa fe94 	bl	8000668 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4613      	mov	r3, r2
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	3301      	adds	r3, #1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800595a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005962:	e002      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetSysClockFreq+0x204>)
 8005966:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800596a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800596c:	4618      	mov	r0, r3
 800596e:	3750      	adds	r7, #80	; 0x50
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	00f42400 	.word	0x00f42400
 8005980:	007a1200 	.word	0x007a1200

08005984 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <HAL_RCC_GetHCLKFreq+0x14>)
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000008 	.word	0x20000008

0800599c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a0:	f7ff fff0 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0a9b      	lsrs	r3, r3, #10
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	4903      	ldr	r1, [pc, #12]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40023800 	.word	0x40023800
 80059c0:	08020d30 	.word	0x08020d30

080059c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059c8:	f7ff ffdc 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0b5b      	lsrs	r3, r3, #13
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	08020d30 	.word	0x08020d30

080059ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d012      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a14:	4b69      	ldr	r3, [pc, #420]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4a68      	ldr	r2, [pc, #416]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a1e:	6093      	str	r3, [r2, #8]
 8005a20:	4b66      	ldr	r3, [pc, #408]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	4964      	ldr	r1, [pc, #400]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d017      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a46:	4b5d      	ldr	r3, [pc, #372]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	4959      	ldr	r1, [pc, #356]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a64:	d101      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a66:	2301      	movs	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d017      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a82:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	494a      	ldr	r1, [pc, #296]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 808b 	beq.w	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ad0:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	4a39      	ldr	r2, [pc, #228]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	6413      	str	r3, [r2, #64]	; 0x40
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae8:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af4:	f7fd ffe8 	bl	8003ac8 <HAL_GetTick>
 8005af8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fd ffe4 	bl	8003ac8 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e38f      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b0e:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b1a:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d035      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d02e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d114      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fd ffac 	bl	8003ac8 <HAL_GetTick>
 8005b70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b72:	e00a      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b74:	f7fd ffa8 	bl	8003ac8 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e351      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ee      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba2:	d111      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	4901      	ldr	r1, [pc, #4]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40007000 	.word	0x40007000
 8005bc4:	0ffffcff 	.word	0x0ffffcff
 8005bc8:	4bac      	ldr	r3, [pc, #688]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4aab      	ldr	r2, [pc, #684]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bd2:	6093      	str	r3, [r2, #8]
 8005bd4:	4ba9      	ldr	r3, [pc, #676]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be0:	49a6      	ldr	r1, [pc, #664]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d010      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bf2:	4ba2      	ldr	r3, [pc, #648]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf8:	4aa0      	ldr	r2, [pc, #640]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c02:	4b9e      	ldr	r3, [pc, #632]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	499b      	ldr	r1, [pc, #620]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c20:	4b96      	ldr	r3, [pc, #600]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	4993      	ldr	r1, [pc, #588]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c42:	4b8e      	ldr	r3, [pc, #568]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c50:	498a      	ldr	r1, [pc, #552]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c64:	4b85      	ldr	r3, [pc, #532]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c72:	4982      	ldr	r1, [pc, #520]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c86:	4b7d      	ldr	r3, [pc, #500]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4979      	ldr	r1, [pc, #484]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca8:	4b74      	ldr	r3, [pc, #464]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f023 0203 	bic.w	r2, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	4971      	ldr	r1, [pc, #452]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cca:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f023 020c 	bic.w	r2, r3, #12
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd8:	4968      	ldr	r1, [pc, #416]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cec:	4b63      	ldr	r3, [pc, #396]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	4960      	ldr	r1, [pc, #384]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d0e:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	4957      	ldr	r1, [pc, #348]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d30:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	494f      	ldr	r1, [pc, #316]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	4946      	ldr	r1, [pc, #280]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d74:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d82:	493e      	ldr	r1, [pc, #248]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	4935      	ldr	r1, [pc, #212]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db8:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc6:	492d      	ldr	r1, [pc, #180]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d011      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dda:	4b28      	ldr	r3, [pc, #160]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de8:	4924      	ldr	r1, [pc, #144]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df8:	d101      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e1a:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e28:	4914      	ldr	r1, [pc, #80]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e4c:	490b      	ldr	r1, [pc, #44]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00f      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e70:	4902      	ldr	r1, [pc, #8]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e78:	e002      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e8c:	4b8a      	ldr	r3, [pc, #552]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	4986      	ldr	r1, [pc, #536]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005eb0:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec0:	497d      	ldr	r1, [pc, #500]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d006      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80d6 	beq.w	8006088 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005edc:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a75      	ldr	r2, [pc, #468]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fd fdee 	bl	8003ac8 <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ef0:	f7fd fdea 	bl	8003ac8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e195      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f02:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d021      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11d      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f22:	4b65      	ldr	r3, [pc, #404]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f30:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f36:	0e1b      	lsrs	r3, r3, #24
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	019a      	lsls	r2, r3, #6
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	041b      	lsls	r3, r3, #16
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	071b      	lsls	r3, r3, #28
 8005f56:	4958      	ldr	r1, [pc, #352]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f72:	d00a      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02e      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f88:	d129      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f8a:	4b4b      	ldr	r3, [pc, #300]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f98:	4b47      	ldr	r3, [pc, #284]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	0f1b      	lsrs	r3, r3, #28
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	019a      	lsls	r2, r3, #6
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	493e      	ldr	r1, [pc, #248]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fc6:	4b3c      	ldr	r3, [pc, #240]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fcc:	f023 021f 	bic.w	r2, r3, #31
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4938      	ldr	r1, [pc, #224]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01d      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fea:	4b33      	ldr	r3, [pc, #204]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff0:	0e1b      	lsrs	r3, r3, #24
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffe:	0f1b      	lsrs	r3, r3, #28
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	019a      	lsls	r2, r3, #6
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	431a      	orrs	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	071b      	lsls	r3, r3, #28
 800601e:	4926      	ldr	r1, [pc, #152]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d011      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	019a      	lsls	r2, r3, #6
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	041b      	lsls	r3, r3, #16
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	071b      	lsls	r3, r3, #28
 800604e:	491a      	ldr	r1, [pc, #104]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a17      	ldr	r2, [pc, #92]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800605c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006062:	f7fd fd31 	bl	8003ac8 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006068:	e008      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800606a:	f7fd fd2d 	bl	8003ac8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b64      	cmp	r3, #100	; 0x64
 8006076:	d901      	bls.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e0d8      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800607c:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b01      	cmp	r3, #1
 800608c:	f040 80ce 	bne.w	800622c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609c:	f7fd fd14 	bl	8003ac8 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060a2:	e00b      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060a4:	f7fd fd10 	bl	8003ac8 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d904      	bls.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0bb      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060bc:	4b5e      	ldr	r3, [pc, #376]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c8:	d0ec      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02e      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d12a      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060f2:	4b51      	ldr	r3, [pc, #324]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006100:	4b4d      	ldr	r3, [pc, #308]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	0f1b      	lsrs	r3, r3, #28
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	019a      	lsls	r2, r3, #6
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	041b      	lsls	r3, r3, #16
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	061b      	lsls	r3, r3, #24
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	071b      	lsls	r3, r3, #28
 8006126:	4944      	ldr	r1, [pc, #272]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800612e:	4b42      	ldr	r3, [pc, #264]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006134:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	3b01      	subs	r3, #1
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	493d      	ldr	r1, [pc, #244]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d022      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615c:	d11d      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	0e1b      	lsrs	r3, r3, #24
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800616c:	4b32      	ldr	r3, [pc, #200]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	0f1b      	lsrs	r3, r3, #28
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	019a      	lsls	r2, r3, #6
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	431a      	orrs	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	431a      	orrs	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	071b      	lsls	r3, r3, #28
 8006192:	4929      	ldr	r1, [pc, #164]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006194:	4313      	orrs	r3, r2
 8006196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d028      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061a6:	4b24      	ldr	r3, [pc, #144]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	0e1b      	lsrs	r3, r3, #24
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061b4:	4b20      	ldr	r3, [pc, #128]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	019a      	lsls	r2, r3, #6
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	431a      	orrs	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	4917      	ldr	r1, [pc, #92]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	4911      	ldr	r1, [pc, #68]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061f8:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006204:	f7fd fc60 	bl	8003ac8 <HAL_GetTick>
 8006208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800620a:	e008      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800620c:	f7fd fc5c 	bl	8003ac8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b64      	cmp	r3, #100	; 0x64
 8006218:	d901      	bls.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e007      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622a:	d1ef      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40023800 	.word	0x40023800

0800623c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e01c      	b.n	8006288 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	795b      	ldrb	r3, [r3, #5]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fb ff74 	bl	800214c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0204 	orr.w	r2, r2, #4
 8006278:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e09d      	b.n	80063de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d108      	bne.n	80062bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b2:	d009      	beq.n	80062c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	61da      	str	r2, [r3, #28]
 80062ba:	e005      	b.n	80062c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb ffa4 	bl	8002230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006308:	d902      	bls.n	8006310 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e002      	b.n	8006316 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006314:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800631e:	d007      	beq.n	8006330 <HAL_SPI_Init+0xa0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006328:	d002      	beq.n	8006330 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	ea42 0103 	orr.w	r1, r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	f003 0204 	and.w	r2, r3, #4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063ac:	ea42 0103 	orr.w	r1, r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b088      	sub	sp, #32
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	603b      	str	r3, [r7, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_SPI_Transmit+0x22>
 8006404:	2302      	movs	r3, #2
 8006406:	e158      	b.n	80066ba <HAL_SPI_Transmit+0x2d4>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006410:	f7fd fb5a 	bl	8003ac8 <HAL_GetTick>
 8006414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d002      	beq.n	800642c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006426:	2302      	movs	r3, #2
 8006428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800642a:	e13d      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Transmit+0x52>
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800643c:	e134      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d10f      	bne.n	80064aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d007      	beq.n	80064c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d0:	d94b      	bls.n	800656a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit+0xfa>
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d13e      	bne.n	800655e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006504:	e02b      	b.n	800655e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d112      	bne.n	800653a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	1c9a      	adds	r2, r3, #2
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006538:	e011      	b.n	800655e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800653a:	f7fd fac5 	bl	8003ac8 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d803      	bhi.n	8006552 <HAL_SPI_Transmit+0x16c>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d102      	bne.n	8006558 <HAL_SPI_Transmit+0x172>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800655c:	e0a4      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ce      	bne.n	8006506 <HAL_SPI_Transmit+0x120>
 8006568:	e07c      	b.n	8006664 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x192>
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d170      	bne.n	800665a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d912      	bls.n	80065a8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b02      	subs	r3, #2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065a6:	e058      	b.n	800665a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065ce:	e044      	b.n	800665a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d12b      	bne.n	8006636 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d912      	bls.n	800660e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b02      	subs	r3, #2
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800660c:	e025      	b.n	800665a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006634:	e011      	b.n	800665a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006636:	f7fd fa47 	bl	8003ac8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d803      	bhi.n	800664e <HAL_SPI_Transmit+0x268>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d102      	bne.n	8006654 <HAL_SPI_Transmit+0x26e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006658:	e026      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1b5      	bne.n	80065d0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f949 	bl	8006900 <SPI_EndRxTxTransaction>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e000      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80066a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066d4:	f7fd f9f8 	bl	8003ac8 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4413      	add	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066e4:	f7fd f9f0 	bl	8003ac8 <HAL_GetTick>
 80066e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066ea:	4b39      	ldr	r3, [pc, #228]	; (80067d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	015b      	lsls	r3, r3, #5
 80066f0:	0d1b      	lsrs	r3, r3, #20
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	fb02 f303 	mul.w	r3, r2, r3
 80066f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066fa:	e054      	b.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d050      	beq.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006704:	f7fd f9e0 	bl	8003ac8 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	429a      	cmp	r2, r3
 8006712:	d902      	bls.n	800671a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d13d      	bne.n	8006796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006732:	d111      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673c:	d004      	beq.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d107      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006760:	d10f      	bne.n	8006782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e017      	b.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d19b      	bne.n	80066fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000008 	.word	0x20000008

080067d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067e6:	f7fd f96f 	bl	8003ac8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	4413      	add	r3, r2
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80067f6:	f7fd f967 	bl	8003ac8 <HAL_GetTick>
 80067fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006804:	4b3d      	ldr	r3, [pc, #244]	; (80068fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	00da      	lsls	r2, r3, #3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	0d1b      	lsrs	r3, r3, #20
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800681c:	e060      	b.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006824:	d107      	bne.n	8006836 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d050      	beq.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800683e:	f7fd f943 	bl	8003ac8 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	429a      	cmp	r2, r3
 800684c:	d902      	bls.n	8006854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d13d      	bne.n	80068d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686c:	d111      	bne.n	8006892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006876:	d004      	beq.n	8006882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d107      	bne.n	8006892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689a:	d10f      	bne.n	80068bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e010      	b.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	3b01      	subs	r3, #1
 80068de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d196      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000008 	.word	0x20000008

08006900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff5b 	bl	80067d4 <SPI_WaitFifoStateUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e046      	b.n	80069c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006934:	4b25      	ldr	r3, [pc, #148]	; (80069cc <SPI_EndRxTxTransaction+0xcc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <SPI_EndRxTxTransaction+0xd0>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	0d5b      	lsrs	r3, r3, #21
 8006940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006952:	d112      	bne.n	800697a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff feb0 	bl	80066c4 <SPI_WaitFlagStateUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e023      	b.n	80069c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3b01      	subs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006990:	2b80      	cmp	r3, #128	; 0x80
 8006992:	d0f2      	beq.n	800697a <SPI_EndRxTxTransaction+0x7a>
 8006994:	e000      	b.n	8006998 <SPI_EndRxTxTransaction+0x98>
        break;
 8006996:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff ff15 	bl	80067d4 <SPI_WaitFifoStateUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b4:	f043 0220 	orr.w	r2, r3, #32
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e000      	b.n	80069c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000008 	.word	0x20000008
 80069d0:	165e9f81 	.word	0x165e9f81

080069d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e049      	b.n	8006a7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fb ff08 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f000 fd30 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a1a      	ldr	r2, [r3, #32]
 8006a98:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <HAL_TIM_Base_DeInit+0x40>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	f240 4344 	movw	r3, #1092	; 0x444
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d107      	bne.n	8006ac2 <HAL_TIM_Base_DeInit+0x40>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb ff88 	bl	80029d8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d001      	beq.n	8006b54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e04c      	b.n	8006bee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a26      	ldr	r2, [pc, #152]	; (8006bfc <HAL_TIM_Base_Start+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d01d      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a22      	ldr	r2, [pc, #136]	; (8006c00 <HAL_TIM_Base_Start+0xc4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <HAL_TIM_Base_Start+0xc8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1f      	ldr	r2, [pc, #124]	; (8006c08 <HAL_TIM_Base_Start+0xcc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_TIM_Base_Start+0xd0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1c      	ldr	r2, [pc, #112]	; (8006c10 <HAL_TIM_Base_Start+0xd4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_TIM_Base_Start+0x70>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <HAL_TIM_Base_Start+0xd8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d115      	bne.n	8006bd8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	4b19      	ldr	r3, [pc, #100]	; (8006c18 <HAL_TIM_Base_Start+0xdc>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	d015      	beq.n	8006bea <HAL_TIM_Base_Start+0xae>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d011      	beq.n	8006bea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0201 	orr.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd6:	e008      	b.n	8006bea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e000      	b.n	8006bec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40001800 	.word	0x40001800
 8006c18:	00010007 	.word	0x00010007

08006c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d001      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e054      	b.n	8006cde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a26      	ldr	r2, [pc, #152]	; (8006cec <HAL_TIM_Base_Start_IT+0xd0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d022      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5e:	d01d      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a21      	ldr	r2, [pc, #132]	; (8006cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1e      	ldr	r2, [pc, #120]	; (8006cfc <HAL_TIM_Base_Start_IT+0xe0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1c      	ldr	r2, [pc, #112]	; (8006d00 <HAL_TIM_Base_Start_IT+0xe4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x80>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1b      	ldr	r2, [pc, #108]	; (8006d04 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d115      	bne.n	8006cc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <HAL_TIM_Base_Start_IT+0xec>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	d015      	beq.n	8006cda <HAL_TIM_Base_Start_IT+0xbe>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb4:	d011      	beq.n	8006cda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	e008      	b.n	8006cda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e000      	b.n	8006cdc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40001800 	.word	0x40001800
 8006d08:	00010007 	.word	0x00010007

08006d0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a1a      	ldr	r2, [r3, #32]
 8006d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10f      	bne.n	8006d54 <HAL_TIM_Base_Stop_IT+0x48>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <HAL_TIM_Base_Stop_IT+0x48>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e049      	b.n	8006e10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f841 	bl	8006e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f000 fb65 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d122      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d11b      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0202 	mvn.w	r2, #2
 8006e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fae4 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fad6 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fae7 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d122      	bne.n	8006edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d11b      	bne.n	8006edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0204 	mvn.w	r2, #4
 8006eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 faba 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006ec8:	e005      	b.n	8006ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 faac 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fabd 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d122      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d11b      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0208 	mvn.w	r2, #8
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa90 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa82 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa93 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b10      	cmp	r3, #16
 8006f3c:	d122      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d11b      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0210 	mvn.w	r2, #16
 8006f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa66 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa58 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa69 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d10e      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d107      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0201 	mvn.w	r2, #1
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa ff36 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d10e      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc8:	2b80      	cmp	r3, #128	; 0x80
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fe7e 	bl	8007cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fea:	d10e      	bne.n	800700a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b80      	cmp	r3, #128	; 0x80
 8006ff8:	d107      	bne.n	800700a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fe71 	bl	8007cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007014:	2b40      	cmp	r3, #64	; 0x40
 8007016:	d10e      	bne.n	8007036 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b40      	cmp	r3, #64	; 0x40
 8007024:	d107      	bne.n	8007036 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa17 	bl	8007464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b20      	cmp	r3, #32
 8007042:	d10e      	bne.n	8007062 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b20      	cmp	r3, #32
 8007050:	d107      	bne.n	8007062 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f06f 0220 	mvn.w	r2, #32
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fe31 	bl	8007cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007086:	2302      	movs	r3, #2
 8007088:	e0ff      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b14      	cmp	r3, #20
 8007096:	f200 80f0 	bhi.w	800727a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	0800727b 	.word	0x0800727b
 80070a8:	0800727b 	.word	0x0800727b
 80070ac:	0800727b 	.word	0x0800727b
 80070b0:	08007135 	.word	0x08007135
 80070b4:	0800727b 	.word	0x0800727b
 80070b8:	0800727b 	.word	0x0800727b
 80070bc:	0800727b 	.word	0x0800727b
 80070c0:	08007177 	.word	0x08007177
 80070c4:	0800727b 	.word	0x0800727b
 80070c8:	0800727b 	.word	0x0800727b
 80070cc:	0800727b 	.word	0x0800727b
 80070d0:	080071b7 	.word	0x080071b7
 80070d4:	0800727b 	.word	0x0800727b
 80070d8:	0800727b 	.word	0x0800727b
 80070dc:	0800727b 	.word	0x0800727b
 80070e0:	080071f9 	.word	0x080071f9
 80070e4:	0800727b 	.word	0x0800727b
 80070e8:	0800727b 	.word	0x0800727b
 80070ec:	0800727b 	.word	0x0800727b
 80070f0:	08007239 	.word	0x08007239
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fa5c 	bl	80075b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0208 	orr.w	r2, r2, #8
 800710e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0204 	bic.w	r2, r2, #4
 800711e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6999      	ldr	r1, [r3, #24]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	619a      	str	r2, [r3, #24]
      break;
 8007132:	e0a5      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 faae 	bl	800769c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800714e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6999      	ldr	r1, [r3, #24]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	021a      	lsls	r2, r3, #8
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	619a      	str	r2, [r3, #24]
      break;
 8007174:	e084      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fb05 	bl	800778c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0208 	orr.w	r2, r2, #8
 8007190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0204 	bic.w	r2, r2, #4
 80071a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69d9      	ldr	r1, [r3, #28]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	61da      	str	r2, [r3, #28]
      break;
 80071b4:	e064      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fb5b 	bl	8007878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69d9      	ldr	r1, [r3, #28]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	021a      	lsls	r2, r3, #8
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	61da      	str	r2, [r3, #28]
      break;
 80071f6:	e043      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fb92 	bl	8007928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007236:	e023      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fbc4 	bl	80079cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	021a      	lsls	r2, r3, #8
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007278:	e002      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
      break;
 800727e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop

08007294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIM_ConfigClockSource+0x1c>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e0b4      	b.n	800741a <HAL_TIM_ConfigClockSource+0x186>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	4b56      	ldr	r3, [pc, #344]	; (8007424 <HAL_TIM_ConfigClockSource+0x190>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e8:	d03e      	beq.n	8007368 <HAL_TIM_ConfigClockSource+0xd4>
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ee:	f200 8087 	bhi.w	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	f000 8086 	beq.w	8007406 <HAL_TIM_ConfigClockSource+0x172>
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d87f      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b70      	cmp	r3, #112	; 0x70
 8007302:	d01a      	beq.n	800733a <HAL_TIM_ConfigClockSource+0xa6>
 8007304:	2b70      	cmp	r3, #112	; 0x70
 8007306:	d87b      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b60      	cmp	r3, #96	; 0x60
 800730a:	d050      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x11a>
 800730c:	2b60      	cmp	r3, #96	; 0x60
 800730e:	d877      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b50      	cmp	r3, #80	; 0x50
 8007312:	d03c      	beq.n	800738e <HAL_TIM_ConfigClockSource+0xfa>
 8007314:	2b50      	cmp	r3, #80	; 0x50
 8007316:	d873      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d058      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x13a>
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d86f      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b30      	cmp	r3, #48	; 0x30
 8007322:	d064      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d86b      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d060      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d867      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05c      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	2b10      	cmp	r3, #16
 8007336:	d05a      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007338:	e062      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800734a:	f000 fc0d 	bl	8007b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800735c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	609a      	str	r2, [r3, #8]
      break;
 8007366:	e04f      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007378:	f000 fbf6 	bl	8007b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800738a:	609a      	str	r2, [r3, #8]
      break;
 800738c:	e03c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800739a:	461a      	mov	r2, r3
 800739c:	f000 fb6a 	bl	8007a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2150      	movs	r1, #80	; 0x50
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fbc3 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 80073ac:	e02c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 fb89 	bl	8007ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2160      	movs	r1, #96	; 0x60
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fbb3 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 80073cc:	e01c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	461a      	mov	r2, r3
 80073dc:	f000 fb4a 	bl	8007a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2140      	movs	r1, #64	; 0x40
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fba3 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 80073ec:	e00c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f000 fb9a 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 80073fe:	e003      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
      break;
 8007404:	e000      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	fffeff88 	.word	0xfffeff88

08007428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a40      	ldr	r2, [pc, #256]	; (800758c <TIM_Base_SetConfig+0x114>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a3d      	ldr	r2, [pc, #244]	; (8007590 <TIM_Base_SetConfig+0x118>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a3c      	ldr	r2, [pc, #240]	; (8007594 <TIM_Base_SetConfig+0x11c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a3b      	ldr	r2, [pc, #236]	; (8007598 <TIM_Base_SetConfig+0x120>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a3a      	ldr	r2, [pc, #232]	; (800759c <TIM_Base_SetConfig+0x124>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2f      	ldr	r2, [pc, #188]	; (800758c <TIM_Base_SetConfig+0x114>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d8:	d027      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2c      	ldr	r2, [pc, #176]	; (8007590 <TIM_Base_SetConfig+0x118>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d023      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2b      	ldr	r2, [pc, #172]	; (8007594 <TIM_Base_SetConfig+0x11c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01f      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2a      	ldr	r2, [pc, #168]	; (8007598 <TIM_Base_SetConfig+0x120>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a29      	ldr	r2, [pc, #164]	; (800759c <TIM_Base_SetConfig+0x124>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d017      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a28      	ldr	r2, [pc, #160]	; (80075a0 <TIM_Base_SetConfig+0x128>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a27      	ldr	r2, [pc, #156]	; (80075a4 <TIM_Base_SetConfig+0x12c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00f      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <TIM_Base_SetConfig+0x130>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a25      	ldr	r2, [pc, #148]	; (80075ac <TIM_Base_SetConfig+0x134>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a24      	ldr	r2, [pc, #144]	; (80075b0 <TIM_Base_SetConfig+0x138>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a23      	ldr	r2, [pc, #140]	; (80075b4 <TIM_Base_SetConfig+0x13c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d108      	bne.n	800753c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a0a      	ldr	r2, [pc, #40]	; (800758c <TIM_Base_SetConfig+0x114>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_Base_SetConfig+0xf8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a0c      	ldr	r2, [pc, #48]	; (800759c <TIM_Base_SetConfig+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d103      	bne.n	8007578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	615a      	str	r2, [r3, #20]
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40000c00 	.word	0x40000c00
 800759c:	40010400 	.word	0x40010400
 80075a0:	40014000 	.word	0x40014000
 80075a4:	40014400 	.word	0x40014400
 80075a8:	40014800 	.word	0x40014800
 80075ac:	40001800 	.word	0x40001800
 80075b0:	40001c00 	.word	0x40001c00
 80075b4:	40002000 	.word	0x40002000

080075b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <TIM_OC1_SetConfig+0xd8>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f023 0302 	bic.w	r3, r3, #2
 8007600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a21      	ldr	r2, [pc, #132]	; (8007694 <TIM_OC1_SetConfig+0xdc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_OC1_SetConfig+0x64>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a20      	ldr	r2, [pc, #128]	; (8007698 <TIM_OC1_SetConfig+0xe0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d10c      	bne.n	8007636 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0308 	bic.w	r3, r3, #8
 8007622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0304 	bic.w	r3, r3, #4
 8007634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a16      	ldr	r2, [pc, #88]	; (8007694 <TIM_OC1_SetConfig+0xdc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d003      	beq.n	8007646 <TIM_OC1_SetConfig+0x8e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a15      	ldr	r2, [pc, #84]	; (8007698 <TIM_OC1_SetConfig+0xe0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d111      	bne.n	800766a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800764c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	621a      	str	r2, [r3, #32]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	fffeff8f 	.word	0xfffeff8f
 8007694:	40010000 	.word	0x40010000
 8007698:	40010400 	.word	0x40010400

0800769c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0210 	bic.w	r2, r3, #16
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4b2e      	ldr	r3, [pc, #184]	; (8007780 <TIM_OC2_SetConfig+0xe4>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f023 0320 	bic.w	r3, r3, #32
 80076e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a23      	ldr	r2, [pc, #140]	; (8007784 <TIM_OC2_SetConfig+0xe8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC2_SetConfig+0x68>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a22      	ldr	r2, [pc, #136]	; (8007788 <TIM_OC2_SetConfig+0xec>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d10d      	bne.n	8007720 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800770a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <TIM_OC2_SetConfig+0xe8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_OC2_SetConfig+0x94>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <TIM_OC2_SetConfig+0xec>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d113      	bne.n	8007758 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800773e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	feff8fff 	.word	0xfeff8fff
 8007784:	40010000 	.word	0x40010000
 8007788:	40010400 	.word	0x40010400

0800778c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4b2d      	ldr	r3, [pc, #180]	; (800786c <TIM_OC3_SetConfig+0xe0>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a22      	ldr	r2, [pc, #136]	; (8007870 <TIM_OC3_SetConfig+0xe4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_OC3_SetConfig+0x66>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a21      	ldr	r2, [pc, #132]	; (8007874 <TIM_OC3_SetConfig+0xe8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d10d      	bne.n	800780e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a17      	ldr	r2, [pc, #92]	; (8007870 <TIM_OC3_SetConfig+0xe4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d003      	beq.n	800781e <TIM_OC3_SetConfig+0x92>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a16      	ldr	r2, [pc, #88]	; (8007874 <TIM_OC3_SetConfig+0xe8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d113      	bne.n	8007846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800782c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	621a      	str	r2, [r3, #32]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	fffeff8f 	.word	0xfffeff8f
 8007870:	40010000 	.word	0x40010000
 8007874:	40010400 	.word	0x40010400

08007878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <TIM_OC4_SetConfig+0xa4>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a13      	ldr	r2, [pc, #76]	; (8007920 <TIM_OC4_SetConfig+0xa8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC4_SetConfig+0x68>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <TIM_OC4_SetConfig+0xac>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d109      	bne.n	80078f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	feff8fff 	.word	0xfeff8fff
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400

08007928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <TIM_OC5_SetConfig+0x98>)
 8007954:	4013      	ands	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007968:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4313      	orrs	r3, r2
 8007974:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a12      	ldr	r2, [pc, #72]	; (80079c4 <TIM_OC5_SetConfig+0x9c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_OC5_SetConfig+0x5e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <TIM_OC5_SetConfig+0xa0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d109      	bne.n	800799a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	fffeff8f 	.word	0xfffeff8f
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400

080079cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <TIM_OC6_SetConfig+0x9c>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	051b      	lsls	r3, r3, #20
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <TIM_OC6_SetConfig+0xa0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_OC6_SetConfig+0x60>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a12      	ldr	r2, [pc, #72]	; (8007a70 <TIM_OC6_SetConfig+0xa4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d109      	bne.n	8007a40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	029b      	lsls	r3, r3, #10
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	feff8fff 	.word	0xfeff8fff
 8007a6c:	40010000 	.word	0x40010000
 8007a70:	40010400 	.word	0x40010400

08007a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0201 	bic.w	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f023 030a 	bic.w	r3, r3, #10
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0210 	bic.w	r2, r3, #16
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	031b      	lsls	r3, r3, #12
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f043 0307 	orr.w	r3, r3, #7
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	021a      	lsls	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e06d      	b.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a30      	ldr	r2, [pc, #192]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2f      	ldr	r2, [pc, #188]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d022      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c32:	d01d      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a15      	ldr	r2, [pc, #84]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40010400 	.word	0x40010400
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40001800 	.word	0x40001800

08007cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e040      	b.n	8007d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fa fed0 	bl	8002ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	; 0x24
 8007d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f8b0 	bl	8007ea4 <UART_SetConfig>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e022      	b.n	8007d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fb08 	bl	800836c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fb8f 	bl	80084b0 <UART_CheckIdleState>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	; 0x28
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d171      	bne.n	8007e98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_UART_Transmit+0x24>
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e06a      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2221      	movs	r2, #33	; 0x21
 8007dd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dd2:	f7fb fe79 	bl	8003ac8 <HAL_GetTick>
 8007dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	88fa      	ldrh	r2, [r7, #6]
 8007de4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d108      	bne.n	8007e04 <HAL_UART_Transmit+0x68>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	e003      	b.n	8007e0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e0c:	e02c      	b.n	8007e68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2200      	movs	r2, #0
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fb96 	bl	800854a <UART_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e038      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10b      	bne.n	8007e46 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	3302      	adds	r3, #2
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	e007      	b.n	8007e56 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1cc      	bne.n	8007e0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fb63 	bl	800854a <UART_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e005      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e000      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007e98:	2302      	movs	r3, #2
  }
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	4ba6      	ldr	r3, [pc, #664]	; (8008168 <UART_SetConfig+0x2c4>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	6979      	ldr	r1, [r7, #20]
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a94      	ldr	r2, [pc, #592]	; (800816c <UART_SetConfig+0x2c8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d120      	bne.n	8007f62 <UART_SetConfig+0xbe>
 8007f20:	4b93      	ldr	r3, [pc, #588]	; (8008170 <UART_SetConfig+0x2cc>)
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d816      	bhi.n	8007f5c <UART_SetConfig+0xb8>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <UART_SetConfig+0x90>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f51 	.word	0x08007f51
 8007f3c:	08007f4b 	.word	0x08007f4b
 8007f40:	08007f57 	.word	0x08007f57
 8007f44:	2301      	movs	r3, #1
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	e150      	b.n	80081ec <UART_SetConfig+0x348>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	77fb      	strb	r3, [r7, #31]
 8007f4e:	e14d      	b.n	80081ec <UART_SetConfig+0x348>
 8007f50:	2304      	movs	r3, #4
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e14a      	b.n	80081ec <UART_SetConfig+0x348>
 8007f56:	2308      	movs	r3, #8
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e147      	b.n	80081ec <UART_SetConfig+0x348>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e144      	b.n	80081ec <UART_SetConfig+0x348>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a83      	ldr	r2, [pc, #524]	; (8008174 <UART_SetConfig+0x2d0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d132      	bne.n	8007fd2 <UART_SetConfig+0x12e>
 8007f6c:	4b80      	ldr	r3, [pc, #512]	; (8008170 <UART_SetConfig+0x2cc>)
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f72:	f003 030c 	and.w	r3, r3, #12
 8007f76:	2b0c      	cmp	r3, #12
 8007f78:	d828      	bhi.n	8007fcc <UART_SetConfig+0x128>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <UART_SetConfig+0xdc>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007fb5 	.word	0x08007fb5
 8007f84:	08007fcd 	.word	0x08007fcd
 8007f88:	08007fcd 	.word	0x08007fcd
 8007f8c:	08007fcd 	.word	0x08007fcd
 8007f90:	08007fc1 	.word	0x08007fc1
 8007f94:	08007fcd 	.word	0x08007fcd
 8007f98:	08007fcd 	.word	0x08007fcd
 8007f9c:	08007fcd 	.word	0x08007fcd
 8007fa0:	08007fbb 	.word	0x08007fbb
 8007fa4:	08007fcd 	.word	0x08007fcd
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fcd 	.word	0x08007fcd
 8007fb0:	08007fc7 	.word	0x08007fc7
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e118      	b.n	80081ec <UART_SetConfig+0x348>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e115      	b.n	80081ec <UART_SetConfig+0x348>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e112      	b.n	80081ec <UART_SetConfig+0x348>
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e10f      	b.n	80081ec <UART_SetConfig+0x348>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	e10c      	b.n	80081ec <UART_SetConfig+0x348>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a68      	ldr	r2, [pc, #416]	; (8008178 <UART_SetConfig+0x2d4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d120      	bne.n	800801e <UART_SetConfig+0x17a>
 8007fdc:	4b64      	ldr	r3, [pc, #400]	; (8008170 <UART_SetConfig+0x2cc>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fe6:	2b30      	cmp	r3, #48	; 0x30
 8007fe8:	d013      	beq.n	8008012 <UART_SetConfig+0x16e>
 8007fea:	2b30      	cmp	r3, #48	; 0x30
 8007fec:	d814      	bhi.n	8008018 <UART_SetConfig+0x174>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d009      	beq.n	8008006 <UART_SetConfig+0x162>
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d810      	bhi.n	8008018 <UART_SetConfig+0x174>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <UART_SetConfig+0x15c>
 8007ffa:	2b10      	cmp	r3, #16
 8007ffc:	d006      	beq.n	800800c <UART_SetConfig+0x168>
 8007ffe:	e00b      	b.n	8008018 <UART_SetConfig+0x174>
 8008000:	2300      	movs	r3, #0
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e0f2      	b.n	80081ec <UART_SetConfig+0x348>
 8008006:	2302      	movs	r3, #2
 8008008:	77fb      	strb	r3, [r7, #31]
 800800a:	e0ef      	b.n	80081ec <UART_SetConfig+0x348>
 800800c:	2304      	movs	r3, #4
 800800e:	77fb      	strb	r3, [r7, #31]
 8008010:	e0ec      	b.n	80081ec <UART_SetConfig+0x348>
 8008012:	2308      	movs	r3, #8
 8008014:	77fb      	strb	r3, [r7, #31]
 8008016:	e0e9      	b.n	80081ec <UART_SetConfig+0x348>
 8008018:	2310      	movs	r3, #16
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e0e6      	b.n	80081ec <UART_SetConfig+0x348>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a56      	ldr	r2, [pc, #344]	; (800817c <UART_SetConfig+0x2d8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d120      	bne.n	800806a <UART_SetConfig+0x1c6>
 8008028:	4b51      	ldr	r3, [pc, #324]	; (8008170 <UART_SetConfig+0x2cc>)
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008032:	2bc0      	cmp	r3, #192	; 0xc0
 8008034:	d013      	beq.n	800805e <UART_SetConfig+0x1ba>
 8008036:	2bc0      	cmp	r3, #192	; 0xc0
 8008038:	d814      	bhi.n	8008064 <UART_SetConfig+0x1c0>
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	d009      	beq.n	8008052 <UART_SetConfig+0x1ae>
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d810      	bhi.n	8008064 <UART_SetConfig+0x1c0>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <UART_SetConfig+0x1a8>
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d006      	beq.n	8008058 <UART_SetConfig+0x1b4>
 800804a:	e00b      	b.n	8008064 <UART_SetConfig+0x1c0>
 800804c:	2300      	movs	r3, #0
 800804e:	77fb      	strb	r3, [r7, #31]
 8008050:	e0cc      	b.n	80081ec <UART_SetConfig+0x348>
 8008052:	2302      	movs	r3, #2
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e0c9      	b.n	80081ec <UART_SetConfig+0x348>
 8008058:	2304      	movs	r3, #4
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e0c6      	b.n	80081ec <UART_SetConfig+0x348>
 800805e:	2308      	movs	r3, #8
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e0c3      	b.n	80081ec <UART_SetConfig+0x348>
 8008064:	2310      	movs	r3, #16
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e0c0      	b.n	80081ec <UART_SetConfig+0x348>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a44      	ldr	r2, [pc, #272]	; (8008180 <UART_SetConfig+0x2dc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d125      	bne.n	80080c0 <UART_SetConfig+0x21c>
 8008074:	4b3e      	ldr	r3, [pc, #248]	; (8008170 <UART_SetConfig+0x2cc>)
 8008076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008082:	d017      	beq.n	80080b4 <UART_SetConfig+0x210>
 8008084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008088:	d817      	bhi.n	80080ba <UART_SetConfig+0x216>
 800808a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800808e:	d00b      	beq.n	80080a8 <UART_SetConfig+0x204>
 8008090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008094:	d811      	bhi.n	80080ba <UART_SetConfig+0x216>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <UART_SetConfig+0x1fe>
 800809a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809e:	d006      	beq.n	80080ae <UART_SetConfig+0x20a>
 80080a0:	e00b      	b.n	80080ba <UART_SetConfig+0x216>
 80080a2:	2300      	movs	r3, #0
 80080a4:	77fb      	strb	r3, [r7, #31]
 80080a6:	e0a1      	b.n	80081ec <UART_SetConfig+0x348>
 80080a8:	2302      	movs	r3, #2
 80080aa:	77fb      	strb	r3, [r7, #31]
 80080ac:	e09e      	b.n	80081ec <UART_SetConfig+0x348>
 80080ae:	2304      	movs	r3, #4
 80080b0:	77fb      	strb	r3, [r7, #31]
 80080b2:	e09b      	b.n	80081ec <UART_SetConfig+0x348>
 80080b4:	2308      	movs	r3, #8
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e098      	b.n	80081ec <UART_SetConfig+0x348>
 80080ba:	2310      	movs	r3, #16
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e095      	b.n	80081ec <UART_SetConfig+0x348>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a2f      	ldr	r2, [pc, #188]	; (8008184 <UART_SetConfig+0x2e0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d125      	bne.n	8008116 <UART_SetConfig+0x272>
 80080ca:	4b29      	ldr	r3, [pc, #164]	; (8008170 <UART_SetConfig+0x2cc>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080d8:	d017      	beq.n	800810a <UART_SetConfig+0x266>
 80080da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080de:	d817      	bhi.n	8008110 <UART_SetConfig+0x26c>
 80080e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e4:	d00b      	beq.n	80080fe <UART_SetConfig+0x25a>
 80080e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ea:	d811      	bhi.n	8008110 <UART_SetConfig+0x26c>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <UART_SetConfig+0x254>
 80080f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f4:	d006      	beq.n	8008104 <UART_SetConfig+0x260>
 80080f6:	e00b      	b.n	8008110 <UART_SetConfig+0x26c>
 80080f8:	2301      	movs	r3, #1
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e076      	b.n	80081ec <UART_SetConfig+0x348>
 80080fe:	2302      	movs	r3, #2
 8008100:	77fb      	strb	r3, [r7, #31]
 8008102:	e073      	b.n	80081ec <UART_SetConfig+0x348>
 8008104:	2304      	movs	r3, #4
 8008106:	77fb      	strb	r3, [r7, #31]
 8008108:	e070      	b.n	80081ec <UART_SetConfig+0x348>
 800810a:	2308      	movs	r3, #8
 800810c:	77fb      	strb	r3, [r7, #31]
 800810e:	e06d      	b.n	80081ec <UART_SetConfig+0x348>
 8008110:	2310      	movs	r3, #16
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e06a      	b.n	80081ec <UART_SetConfig+0x348>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1b      	ldr	r2, [pc, #108]	; (8008188 <UART_SetConfig+0x2e4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d138      	bne.n	8008192 <UART_SetConfig+0x2ee>
 8008120:	4b13      	ldr	r3, [pc, #76]	; (8008170 <UART_SetConfig+0x2cc>)
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008126:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800812a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800812e:	d017      	beq.n	8008160 <UART_SetConfig+0x2bc>
 8008130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008134:	d82a      	bhi.n	800818c <UART_SetConfig+0x2e8>
 8008136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800813a:	d00b      	beq.n	8008154 <UART_SetConfig+0x2b0>
 800813c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008140:	d824      	bhi.n	800818c <UART_SetConfig+0x2e8>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <UART_SetConfig+0x2aa>
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814a:	d006      	beq.n	800815a <UART_SetConfig+0x2b6>
 800814c:	e01e      	b.n	800818c <UART_SetConfig+0x2e8>
 800814e:	2300      	movs	r3, #0
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e04b      	b.n	80081ec <UART_SetConfig+0x348>
 8008154:	2302      	movs	r3, #2
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e048      	b.n	80081ec <UART_SetConfig+0x348>
 800815a:	2304      	movs	r3, #4
 800815c:	77fb      	strb	r3, [r7, #31]
 800815e:	e045      	b.n	80081ec <UART_SetConfig+0x348>
 8008160:	2308      	movs	r3, #8
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	e042      	b.n	80081ec <UART_SetConfig+0x348>
 8008166:	bf00      	nop
 8008168:	efff69f3 	.word	0xefff69f3
 800816c:	40011000 	.word	0x40011000
 8008170:	40023800 	.word	0x40023800
 8008174:	40004400 	.word	0x40004400
 8008178:	40004800 	.word	0x40004800
 800817c:	40004c00 	.word	0x40004c00
 8008180:	40005000 	.word	0x40005000
 8008184:	40011400 	.word	0x40011400
 8008188:	40007800 	.word	0x40007800
 800818c:	2310      	movs	r3, #16
 800818e:	77fb      	strb	r3, [r7, #31]
 8008190:	e02c      	b.n	80081ec <UART_SetConfig+0x348>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a72      	ldr	r2, [pc, #456]	; (8008360 <UART_SetConfig+0x4bc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d125      	bne.n	80081e8 <UART_SetConfig+0x344>
 800819c:	4b71      	ldr	r3, [pc, #452]	; (8008364 <UART_SetConfig+0x4c0>)
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081aa:	d017      	beq.n	80081dc <UART_SetConfig+0x338>
 80081ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081b0:	d817      	bhi.n	80081e2 <UART_SetConfig+0x33e>
 80081b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b6:	d00b      	beq.n	80081d0 <UART_SetConfig+0x32c>
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081bc:	d811      	bhi.n	80081e2 <UART_SetConfig+0x33e>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <UART_SetConfig+0x326>
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c6:	d006      	beq.n	80081d6 <UART_SetConfig+0x332>
 80081c8:	e00b      	b.n	80081e2 <UART_SetConfig+0x33e>
 80081ca:	2300      	movs	r3, #0
 80081cc:	77fb      	strb	r3, [r7, #31]
 80081ce:	e00d      	b.n	80081ec <UART_SetConfig+0x348>
 80081d0:	2302      	movs	r3, #2
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e00a      	b.n	80081ec <UART_SetConfig+0x348>
 80081d6:	2304      	movs	r3, #4
 80081d8:	77fb      	strb	r3, [r7, #31]
 80081da:	e007      	b.n	80081ec <UART_SetConfig+0x348>
 80081dc:	2308      	movs	r3, #8
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e004      	b.n	80081ec <UART_SetConfig+0x348>
 80081e2:	2310      	movs	r3, #16
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e001      	b.n	80081ec <UART_SetConfig+0x348>
 80081e8:	2310      	movs	r3, #16
 80081ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f4:	d15b      	bne.n	80082ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80081f6:	7ffb      	ldrb	r3, [r7, #31]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d828      	bhi.n	800824e <UART_SetConfig+0x3aa>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <UART_SetConfig+0x360>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008229 	.word	0x08008229
 8008208:	08008231 	.word	0x08008231
 800820c:	08008239 	.word	0x08008239
 8008210:	0800824f 	.word	0x0800824f
 8008214:	0800823f 	.word	0x0800823f
 8008218:	0800824f 	.word	0x0800824f
 800821c:	0800824f 	.word	0x0800824f
 8008220:	0800824f 	.word	0x0800824f
 8008224:	08008247 	.word	0x08008247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008228:	f7fd fbb8 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 800822c:	61b8      	str	r0, [r7, #24]
        break;
 800822e:	e013      	b.n	8008258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008230:	f7fd fbc8 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8008234:	61b8      	str	r0, [r7, #24]
        break;
 8008236:	e00f      	b.n	8008258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <UART_SetConfig+0x4c4>)
 800823a:	61bb      	str	r3, [r7, #24]
        break;
 800823c:	e00c      	b.n	8008258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800823e:	f7fd fa9b 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8008242:	61b8      	str	r0, [r7, #24]
        break;
 8008244:	e008      	b.n	8008258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824a:	61bb      	str	r3, [r7, #24]
        break;
 800824c:	e004      	b.n	8008258 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	77bb      	strb	r3, [r7, #30]
        break;
 8008256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d074      	beq.n	8008348 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	005a      	lsls	r2, r3, #1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	085b      	lsrs	r3, r3, #1
 8008268:	441a      	add	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d916      	bls.n	80082a8 <UART_SetConfig+0x404>
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008280:	d212      	bcs.n	80082a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	b29b      	uxth	r3, r3
 8008286:	f023 030f 	bic.w	r3, r3, #15
 800828a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	085b      	lsrs	r3, r3, #1
 8008290:	b29b      	uxth	r3, r3
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	b29a      	uxth	r2, r3
 8008298:	89fb      	ldrh	r3, [r7, #14]
 800829a:	4313      	orrs	r3, r2
 800829c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	89fa      	ldrh	r2, [r7, #14]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	e04f      	b.n	8008348 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	77bb      	strb	r3, [r7, #30]
 80082ac:	e04c      	b.n	8008348 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082ae:	7ffb      	ldrb	r3, [r7, #31]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d828      	bhi.n	8008306 <UART_SetConfig+0x462>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x418>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082e1 	.word	0x080082e1
 80082c0:	080082e9 	.word	0x080082e9
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	08008307 	.word	0x08008307
 80082cc:	080082f7 	.word	0x080082f7
 80082d0:	08008307 	.word	0x08008307
 80082d4:	08008307 	.word	0x08008307
 80082d8:	08008307 	.word	0x08008307
 80082dc:	080082ff 	.word	0x080082ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e0:	f7fd fb5c 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 80082e4:	61b8      	str	r0, [r7, #24]
        break;
 80082e6:	e013      	b.n	8008310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7fd fb6c 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 80082ec:	61b8      	str	r0, [r7, #24]
        break;
 80082ee:	e00f      	b.n	8008310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <UART_SetConfig+0x4c4>)
 80082f2:	61bb      	str	r3, [r7, #24]
        break;
 80082f4:	e00c      	b.n	8008310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f6:	f7fd fa3f 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 80082fa:	61b8      	str	r0, [r7, #24]
        break;
 80082fc:	e008      	b.n	8008310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008302:	61bb      	str	r3, [r7, #24]
        break;
 8008304:	e004      	b.n	8008310 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	77bb      	strb	r3, [r7, #30]
        break;
 800830e:	bf00      	nop
    }

    if (pclk != 0U)
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d018      	beq.n	8008348 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	085a      	lsrs	r2, r3, #1
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	441a      	add	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	fbb2 f3f3 	udiv	r3, r2, r3
 8008328:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b0f      	cmp	r3, #15
 800832e:	d909      	bls.n	8008344 <UART_SetConfig+0x4a0>
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008336:	d205      	bcs.n	8008344 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	e001      	b.n	8008348 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008354:	7fbb      	ldrb	r3, [r7, #30]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40007c00 	.word	0x40007c00
 8008364:	40023800 	.word	0x40023800
 8008368:	00f42400 	.word	0x00f42400

0800836c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01a      	beq.n	8008482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846a:	d10a      	bne.n	8008482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	605a      	str	r2, [r3, #4]
  }
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084c0:	f7fb fb02 	bl	8003ac8 <HAL_GetTick>
 80084c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d10e      	bne.n	80084f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f831 	bl	800854a <UART_WaitOnFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e027      	b.n	8008542 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d10e      	bne.n	800851e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f81b 	bl	800854a <UART_WaitOnFlagUntilTimeout>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e011      	b.n	8008542 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b09c      	sub	sp, #112	; 0x70
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800855a:	e0a7      	b.n	80086ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	f000 80a3 	beq.w	80086ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008566:	f7fb faaf 	bl	8003ac8 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008572:	429a      	cmp	r2, r3
 8008574:	d302      	bcc.n	800857c <UART_WaitOnFlagUntilTimeout+0x32>
 8008576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008578:	2b00      	cmp	r3, #0
 800857a:	d13f      	bne.n	80085fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800858a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800858c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008590:	667b      	str	r3, [r7, #100]	; 0x64
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800859a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800859c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e6      	bne.n	800857c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3308      	adds	r3, #8
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	663b      	str	r3, [r7, #96]	; 0x60
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80085d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e5      	bne.n	80085ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2220      	movs	r2, #32
 80085e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e068      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d050      	beq.n	80086ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008618:	d148      	bne.n	80086ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008622:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008642:	637b      	str	r3, [r7, #52]	; 0x34
 8008644:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e6      	bne.n	8008624 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	613b      	str	r3, [r7, #16]
   return(result);
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	66bb      	str	r3, [r7, #104]	; 0x68
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008676:	623a      	str	r2, [r7, #32]
 8008678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	69f9      	ldr	r1, [r7, #28]
 800867c:	6a3a      	ldr	r2, [r7, #32]
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	61bb      	str	r3, [r7, #24]
   return(result);
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2220      	movs	r2, #32
 800868e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2220      	movs	r2, #32
 800869c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e010      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69da      	ldr	r2, [r3, #28]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4013      	ands	r3, r2
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	bf0c      	ite	eq
 80086bc:	2301      	moveq	r3, #1
 80086be:	2300      	movne	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f43f af48 	beq.w	800855c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3770      	adds	r7, #112	; 0x70
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <__cvt>:
 80086d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086d8:	ed2d 8b02 	vpush	{d8}
 80086dc:	eeb0 8b40 	vmov.f64	d8, d0
 80086e0:	b085      	sub	sp, #20
 80086e2:	4617      	mov	r7, r2
 80086e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80086e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80086e8:	ee18 2a90 	vmov	r2, s17
 80086ec:	f025 0520 	bic.w	r5, r5, #32
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	bfb6      	itet	lt
 80086f4:	222d      	movlt	r2, #45	; 0x2d
 80086f6:	2200      	movge	r2, #0
 80086f8:	eeb1 8b40 	vneglt.f64	d8, d0
 80086fc:	2d46      	cmp	r5, #70	; 0x46
 80086fe:	460c      	mov	r4, r1
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	d004      	beq.n	800870e <__cvt+0x38>
 8008704:	2d45      	cmp	r5, #69	; 0x45
 8008706:	d100      	bne.n	800870a <__cvt+0x34>
 8008708:	3401      	adds	r4, #1
 800870a:	2102      	movs	r1, #2
 800870c:	e000      	b.n	8008710 <__cvt+0x3a>
 800870e:	2103      	movs	r1, #3
 8008710:	ab03      	add	r3, sp, #12
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	ab02      	add	r3, sp, #8
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4622      	mov	r2, r4
 800871a:	4633      	mov	r3, r6
 800871c:	eeb0 0b48 	vmov.f64	d0, d8
 8008720:	f001 f84e 	bl	80097c0 <_dtoa_r>
 8008724:	2d47      	cmp	r5, #71	; 0x47
 8008726:	d101      	bne.n	800872c <__cvt+0x56>
 8008728:	07fb      	lsls	r3, r7, #31
 800872a:	d51a      	bpl.n	8008762 <__cvt+0x8c>
 800872c:	2d46      	cmp	r5, #70	; 0x46
 800872e:	eb00 0204 	add.w	r2, r0, r4
 8008732:	d10c      	bne.n	800874e <__cvt+0x78>
 8008734:	7803      	ldrb	r3, [r0, #0]
 8008736:	2b30      	cmp	r3, #48	; 0x30
 8008738:	d107      	bne.n	800874a <__cvt+0x74>
 800873a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008742:	bf1c      	itt	ne
 8008744:	f1c4 0401 	rsbne	r4, r4, #1
 8008748:	6034      	strne	r4, [r6, #0]
 800874a:	6833      	ldr	r3, [r6, #0]
 800874c:	441a      	add	r2, r3
 800874e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008756:	bf08      	it	eq
 8008758:	9203      	streq	r2, [sp, #12]
 800875a:	2130      	movs	r1, #48	; 0x30
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	4293      	cmp	r3, r2
 8008760:	d307      	bcc.n	8008772 <__cvt+0x9c>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008766:	1a1b      	subs	r3, r3, r0
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	b005      	add	sp, #20
 800876c:	ecbd 8b02 	vpop	{d8}
 8008770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008772:	1c5c      	adds	r4, r3, #1
 8008774:	9403      	str	r4, [sp, #12]
 8008776:	7019      	strb	r1, [r3, #0]
 8008778:	e7f0      	b.n	800875c <__cvt+0x86>

0800877a <__exponent>:
 800877a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800877c:	4603      	mov	r3, r0
 800877e:	2900      	cmp	r1, #0
 8008780:	bfb8      	it	lt
 8008782:	4249      	neglt	r1, r1
 8008784:	f803 2b02 	strb.w	r2, [r3], #2
 8008788:	bfb4      	ite	lt
 800878a:	222d      	movlt	r2, #45	; 0x2d
 800878c:	222b      	movge	r2, #43	; 0x2b
 800878e:	2909      	cmp	r1, #9
 8008790:	7042      	strb	r2, [r0, #1]
 8008792:	dd2a      	ble.n	80087ea <__exponent+0x70>
 8008794:	f10d 0207 	add.w	r2, sp, #7
 8008798:	4617      	mov	r7, r2
 800879a:	260a      	movs	r6, #10
 800879c:	4694      	mov	ip, r2
 800879e:	fb91 f5f6 	sdiv	r5, r1, r6
 80087a2:	fb06 1415 	mls	r4, r6, r5, r1
 80087a6:	3430      	adds	r4, #48	; 0x30
 80087a8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80087ac:	460c      	mov	r4, r1
 80087ae:	2c63      	cmp	r4, #99	; 0x63
 80087b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80087b4:	4629      	mov	r1, r5
 80087b6:	dcf1      	bgt.n	800879c <__exponent+0x22>
 80087b8:	3130      	adds	r1, #48	; 0x30
 80087ba:	f1ac 0402 	sub.w	r4, ip, #2
 80087be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087c2:	1c41      	adds	r1, r0, #1
 80087c4:	4622      	mov	r2, r4
 80087c6:	42ba      	cmp	r2, r7
 80087c8:	d30a      	bcc.n	80087e0 <__exponent+0x66>
 80087ca:	f10d 0209 	add.w	r2, sp, #9
 80087ce:	eba2 020c 	sub.w	r2, r2, ip
 80087d2:	42bc      	cmp	r4, r7
 80087d4:	bf88      	it	hi
 80087d6:	2200      	movhi	r2, #0
 80087d8:	4413      	add	r3, r2
 80087da:	1a18      	subs	r0, r3, r0
 80087dc:	b003      	add	sp, #12
 80087de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087e4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80087e8:	e7ed      	b.n	80087c6 <__exponent+0x4c>
 80087ea:	2330      	movs	r3, #48	; 0x30
 80087ec:	3130      	adds	r1, #48	; 0x30
 80087ee:	7083      	strb	r3, [r0, #2]
 80087f0:	70c1      	strb	r1, [r0, #3]
 80087f2:	1d03      	adds	r3, r0, #4
 80087f4:	e7f1      	b.n	80087da <__exponent+0x60>
	...

080087f8 <_printf_float>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	b08b      	sub	sp, #44	; 0x2c
 80087fe:	460c      	mov	r4, r1
 8008800:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008804:	4616      	mov	r6, r2
 8008806:	461f      	mov	r7, r3
 8008808:	4605      	mov	r5, r0
 800880a:	f000 fed1 	bl	80095b0 <_localeconv_r>
 800880e:	f8d0 b000 	ldr.w	fp, [r0]
 8008812:	4658      	mov	r0, fp
 8008814:	f7f7 fd64 	bl	80002e0 <strlen>
 8008818:	2300      	movs	r3, #0
 800881a:	9308      	str	r3, [sp, #32]
 800881c:	f8d8 3000 	ldr.w	r3, [r8]
 8008820:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	3307      	adds	r3, #7
 8008828:	f023 0307 	bic.w	r3, r3, #7
 800882c:	f103 0108 	add.w	r1, r3, #8
 8008830:	f8c8 1000 	str.w	r1, [r8]
 8008834:	ed93 0b00 	vldr	d0, [r3]
 8008838:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008a98 <_printf_float+0x2a0>
 800883c:	eeb0 7bc0 	vabs.f64	d7, d0
 8008840:	eeb4 7b46 	vcmp.f64	d7, d6
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800884c:	4682      	mov	sl, r0
 800884e:	dd24      	ble.n	800889a <_printf_float+0xa2>
 8008850:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008858:	d502      	bpl.n	8008860 <_printf_float+0x68>
 800885a:	232d      	movs	r3, #45	; 0x2d
 800885c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008860:	498f      	ldr	r1, [pc, #572]	; (8008aa0 <_printf_float+0x2a8>)
 8008862:	4b90      	ldr	r3, [pc, #576]	; (8008aa4 <_printf_float+0x2ac>)
 8008864:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008868:	bf94      	ite	ls
 800886a:	4688      	movls	r8, r1
 800886c:	4698      	movhi	r8, r3
 800886e:	2303      	movs	r3, #3
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	f022 0204 	bic.w	r2, r2, #4
 8008876:	2300      	movs	r3, #0
 8008878:	6022      	str	r2, [r4, #0]
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	9700      	str	r7, [sp, #0]
 800887e:	4633      	mov	r3, r6
 8008880:	aa09      	add	r2, sp, #36	; 0x24
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 f9d1 	bl	8008c2c <_printf_common>
 800888a:	3001      	adds	r0, #1
 800888c:	f040 808a 	bne.w	80089a4 <_printf_float+0x1ac>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	b00b      	add	sp, #44	; 0x2c
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889a:	eeb4 0b40 	vcmp.f64	d0, d0
 800889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a2:	d709      	bvc.n	80088b8 <_printf_float+0xc0>
 80088a4:	ee10 3a90 	vmov	r3, s1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfbc      	itt	lt
 80088ac:	232d      	movlt	r3, #45	; 0x2d
 80088ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088b2:	497d      	ldr	r1, [pc, #500]	; (8008aa8 <_printf_float+0x2b0>)
 80088b4:	4b7d      	ldr	r3, [pc, #500]	; (8008aac <_printf_float+0x2b4>)
 80088b6:	e7d5      	b.n	8008864 <_printf_float+0x6c>
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80088be:	9104      	str	r1, [sp, #16]
 80088c0:	1c59      	adds	r1, r3, #1
 80088c2:	d13c      	bne.n	800893e <_printf_float+0x146>
 80088c4:	2306      	movs	r3, #6
 80088c6:	6063      	str	r3, [r4, #4]
 80088c8:	2300      	movs	r3, #0
 80088ca:	9303      	str	r3, [sp, #12]
 80088cc:	ab08      	add	r3, sp, #32
 80088ce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80088d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088d6:	ab07      	add	r3, sp, #28
 80088d8:	6861      	ldr	r1, [r4, #4]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	6022      	str	r2, [r4, #0]
 80088de:	f10d 031b 	add.w	r3, sp, #27
 80088e2:	4628      	mov	r0, r5
 80088e4:	f7ff fef7 	bl	80086d6 <__cvt>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	9907      	ldr	r1, [sp, #28]
 80088ec:	2b47      	cmp	r3, #71	; 0x47
 80088ee:	4680      	mov	r8, r0
 80088f0:	d108      	bne.n	8008904 <_printf_float+0x10c>
 80088f2:	1cc8      	adds	r0, r1, #3
 80088f4:	db02      	blt.n	80088fc <_printf_float+0x104>
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	4299      	cmp	r1, r3
 80088fa:	dd41      	ble.n	8008980 <_printf_float+0x188>
 80088fc:	f1a9 0902 	sub.w	r9, r9, #2
 8008900:	fa5f f989 	uxtb.w	r9, r9
 8008904:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008908:	d820      	bhi.n	800894c <_printf_float+0x154>
 800890a:	3901      	subs	r1, #1
 800890c:	464a      	mov	r2, r9
 800890e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008912:	9107      	str	r1, [sp, #28]
 8008914:	f7ff ff31 	bl	800877a <__exponent>
 8008918:	9a08      	ldr	r2, [sp, #32]
 800891a:	9004      	str	r0, [sp, #16]
 800891c:	1813      	adds	r3, r2, r0
 800891e:	2a01      	cmp	r2, #1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	dc02      	bgt.n	800892a <_printf_float+0x132>
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	07d2      	lsls	r2, r2, #31
 8008928:	d501      	bpl.n	800892e <_printf_float+0x136>
 800892a:	3301      	adds	r3, #1
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0a2      	beq.n	800887c <_printf_float+0x84>
 8008936:	232d      	movs	r3, #45	; 0x2d
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893c:	e79e      	b.n	800887c <_printf_float+0x84>
 800893e:	9904      	ldr	r1, [sp, #16]
 8008940:	2947      	cmp	r1, #71	; 0x47
 8008942:	d1c1      	bne.n	80088c8 <_printf_float+0xd0>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1bf      	bne.n	80088c8 <_printf_float+0xd0>
 8008948:	2301      	movs	r3, #1
 800894a:	e7bc      	b.n	80088c6 <_printf_float+0xce>
 800894c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008950:	d118      	bne.n	8008984 <_printf_float+0x18c>
 8008952:	2900      	cmp	r1, #0
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	dd0b      	ble.n	8008970 <_printf_float+0x178>
 8008958:	6121      	str	r1, [r4, #16]
 800895a:	b913      	cbnz	r3, 8008962 <_printf_float+0x16a>
 800895c:	6822      	ldr	r2, [r4, #0]
 800895e:	07d0      	lsls	r0, r2, #31
 8008960:	d502      	bpl.n	8008968 <_printf_float+0x170>
 8008962:	3301      	adds	r3, #1
 8008964:	440b      	add	r3, r1
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	2300      	movs	r3, #0
 800896a:	65a1      	str	r1, [r4, #88]	; 0x58
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	e7de      	b.n	800892e <_printf_float+0x136>
 8008970:	b913      	cbnz	r3, 8008978 <_printf_float+0x180>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	07d2      	lsls	r2, r2, #31
 8008976:	d501      	bpl.n	800897c <_printf_float+0x184>
 8008978:	3302      	adds	r3, #2
 800897a:	e7f4      	b.n	8008966 <_printf_float+0x16e>
 800897c:	2301      	movs	r3, #1
 800897e:	e7f2      	b.n	8008966 <_printf_float+0x16e>
 8008980:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008984:	9b08      	ldr	r3, [sp, #32]
 8008986:	4299      	cmp	r1, r3
 8008988:	db05      	blt.n	8008996 <_printf_float+0x19e>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	6121      	str	r1, [r4, #16]
 800898e:	07d8      	lsls	r0, r3, #31
 8008990:	d5ea      	bpl.n	8008968 <_printf_float+0x170>
 8008992:	1c4b      	adds	r3, r1, #1
 8008994:	e7e7      	b.n	8008966 <_printf_float+0x16e>
 8008996:	2900      	cmp	r1, #0
 8008998:	bfd4      	ite	le
 800899a:	f1c1 0202 	rsble	r2, r1, #2
 800899e:	2201      	movgt	r2, #1
 80089a0:	4413      	add	r3, r2
 80089a2:	e7e0      	b.n	8008966 <_printf_float+0x16e>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	055a      	lsls	r2, r3, #21
 80089a8:	d407      	bmi.n	80089ba <_printf_float+0x1c2>
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	4642      	mov	r2, r8
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	d12a      	bne.n	8008a0e <_printf_float+0x216>
 80089b8:	e76a      	b.n	8008890 <_printf_float+0x98>
 80089ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80089be:	f240 80e0 	bls.w	8008b82 <_printf_float+0x38a>
 80089c2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80089c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ce:	d133      	bne.n	8008a38 <_printf_float+0x240>
 80089d0:	4a37      	ldr	r2, [pc, #220]	; (8008ab0 <_printf_float+0x2b8>)
 80089d2:	2301      	movs	r3, #1
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f af58 	beq.w	8008890 <_printf_float+0x98>
 80089e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	db02      	blt.n	80089ee <_printf_float+0x1f6>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	07d8      	lsls	r0, r3, #31
 80089ec:	d50f      	bpl.n	8008a0e <_printf_float+0x216>
 80089ee:	4653      	mov	r3, sl
 80089f0:	465a      	mov	r2, fp
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f af49 	beq.w	8008890 <_printf_float+0x98>
 80089fe:	f04f 0800 	mov.w	r8, #0
 8008a02:	f104 091a 	add.w	r9, r4, #26
 8008a06:	9b08      	ldr	r3, [sp, #32]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	4543      	cmp	r3, r8
 8008a0c:	dc09      	bgt.n	8008a22 <_printf_float+0x22a>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	079b      	lsls	r3, r3, #30
 8008a12:	f100 8106 	bmi.w	8008c22 <_printf_float+0x42a>
 8008a16:	68e0      	ldr	r0, [r4, #12]
 8008a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1a:	4298      	cmp	r0, r3
 8008a1c:	bfb8      	it	lt
 8008a1e:	4618      	movlt	r0, r3
 8008a20:	e738      	b.n	8008894 <_printf_float+0x9c>
 8008a22:	2301      	movs	r3, #1
 8008a24:	464a      	mov	r2, r9
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f af2f 	beq.w	8008890 <_printf_float+0x98>
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	e7e6      	b.n	8008a06 <_printf_float+0x20e>
 8008a38:	9b07      	ldr	r3, [sp, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dc3a      	bgt.n	8008ab4 <_printf_float+0x2bc>
 8008a3e:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <_printf_float+0x2b8>)
 8008a40:	2301      	movs	r3, #1
 8008a42:	4631      	mov	r1, r6
 8008a44:	4628      	mov	r0, r5
 8008a46:	47b8      	blx	r7
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f43f af21 	beq.w	8008890 <_printf_float+0x98>
 8008a4e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	d102      	bne.n	8008a5c <_printf_float+0x264>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	07d9      	lsls	r1, r3, #31
 8008a5a:	d5d8      	bpl.n	8008a0e <_printf_float+0x216>
 8008a5c:	4653      	mov	r3, sl
 8008a5e:	465a      	mov	r2, fp
 8008a60:	4631      	mov	r1, r6
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	f43f af12 	beq.w	8008890 <_printf_float+0x98>
 8008a6c:	f04f 0900 	mov.w	r9, #0
 8008a70:	f104 0a1a 	add.w	sl, r4, #26
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	425b      	negs	r3, r3
 8008a78:	454b      	cmp	r3, r9
 8008a7a:	dc01      	bgt.n	8008a80 <_printf_float+0x288>
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	e795      	b.n	80089ac <_printf_float+0x1b4>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4652      	mov	r2, sl
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f af00 	beq.w	8008890 <_printf_float+0x98>
 8008a90:	f109 0901 	add.w	r9, r9, #1
 8008a94:	e7ee      	b.n	8008a74 <_printf_float+0x27c>
 8008a96:	bf00      	nop
 8008a98:	ffffffff 	.word	0xffffffff
 8008a9c:	7fefffff 	.word	0x7fefffff
 8008aa0:	08020f78 	.word	0x08020f78
 8008aa4:	08020f7c 	.word	0x08020f7c
 8008aa8:	08020f80 	.word	0x08020f80
 8008aac:	08020f84 	.word	0x08020f84
 8008ab0:	08020f88 	.word	0x08020f88
 8008ab4:	9a08      	ldr	r2, [sp, #32]
 8008ab6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	bfa8      	it	ge
 8008abc:	461a      	movge	r2, r3
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	4691      	mov	r9, r2
 8008ac2:	dc38      	bgt.n	8008b36 <_printf_float+0x33e>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9305      	str	r3, [sp, #20]
 8008ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008acc:	f104 021a 	add.w	r2, r4, #26
 8008ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ad2:	9905      	ldr	r1, [sp, #20]
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	eba3 0309 	sub.w	r3, r3, r9
 8008ada:	428b      	cmp	r3, r1
 8008adc:	dc33      	bgt.n	8008b46 <_printf_float+0x34e>
 8008ade:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	db3c      	blt.n	8008b60 <_printf_float+0x368>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	07da      	lsls	r2, r3, #31
 8008aea:	d439      	bmi.n	8008b60 <_printf_float+0x368>
 8008aec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008af0:	eba2 0903 	sub.w	r9, r2, r3
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	4591      	cmp	r9, r2
 8008afa:	bfa8      	it	ge
 8008afc:	4691      	movge	r9, r2
 8008afe:	f1b9 0f00 	cmp.w	r9, #0
 8008b02:	dc35      	bgt.n	8008b70 <_printf_float+0x378>
 8008b04:	f04f 0800 	mov.w	r8, #0
 8008b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b0c:	f104 0a1a 	add.w	sl, r4, #26
 8008b10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	eba3 0309 	sub.w	r3, r3, r9
 8008b1a:	4543      	cmp	r3, r8
 8008b1c:	f77f af77 	ble.w	8008a0e <_printf_float+0x216>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4652      	mov	r2, sl
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f aeb0 	beq.w	8008890 <_printf_float+0x98>
 8008b30:	f108 0801 	add.w	r8, r8, #1
 8008b34:	e7ec      	b.n	8008b10 <_printf_float+0x318>
 8008b36:	4613      	mov	r3, r2
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4642      	mov	r2, r8
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	d1bf      	bne.n	8008ac4 <_printf_float+0x2cc>
 8008b44:	e6a4      	b.n	8008890 <_printf_float+0x98>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	9204      	str	r2, [sp, #16]
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f ae9d 	beq.w	8008890 <_printf_float+0x98>
 8008b56:	9b05      	ldr	r3, [sp, #20]
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	e7b7      	b.n	8008ad0 <_printf_float+0x2d8>
 8008b60:	4653      	mov	r3, sl
 8008b62:	465a      	mov	r2, fp
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b8      	blx	r7
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d1be      	bne.n	8008aec <_printf_float+0x2f4>
 8008b6e:	e68f      	b.n	8008890 <_printf_float+0x98>
 8008b70:	9a04      	ldr	r2, [sp, #16]
 8008b72:	464b      	mov	r3, r9
 8008b74:	4442      	add	r2, r8
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d1c1      	bne.n	8008b04 <_printf_float+0x30c>
 8008b80:	e686      	b.n	8008890 <_printf_float+0x98>
 8008b82:	9a08      	ldr	r2, [sp, #32]
 8008b84:	2a01      	cmp	r2, #1
 8008b86:	dc01      	bgt.n	8008b8c <_printf_float+0x394>
 8008b88:	07db      	lsls	r3, r3, #31
 8008b8a:	d537      	bpl.n	8008bfc <_printf_float+0x404>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4642      	mov	r2, r8
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f ae7a 	beq.w	8008890 <_printf_float+0x98>
 8008b9c:	4653      	mov	r3, sl
 8008b9e:	465a      	mov	r2, fp
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	47b8      	blx	r7
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	f43f ae72 	beq.w	8008890 <_printf_float+0x98>
 8008bac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008bb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb8:	9b08      	ldr	r3, [sp, #32]
 8008bba:	d01a      	beq.n	8008bf2 <_printf_float+0x3fa>
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	f108 0201 	add.w	r2, r8, #1
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d10e      	bne.n	8008bea <_printf_float+0x3f2>
 8008bcc:	e660      	b.n	8008890 <_printf_float+0x98>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	464a      	mov	r2, r9
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f ae59 	beq.w	8008890 <_printf_float+0x98>
 8008bde:	f108 0801 	add.w	r8, r8, #1
 8008be2:	9b08      	ldr	r3, [sp, #32]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	4543      	cmp	r3, r8
 8008be8:	dcf1      	bgt.n	8008bce <_printf_float+0x3d6>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bf0:	e6dd      	b.n	80089ae <_printf_float+0x1b6>
 8008bf2:	f04f 0800 	mov.w	r8, #0
 8008bf6:	f104 091a 	add.w	r9, r4, #26
 8008bfa:	e7f2      	b.n	8008be2 <_printf_float+0x3ea>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4642      	mov	r2, r8
 8008c00:	e7df      	b.n	8008bc2 <_printf_float+0x3ca>
 8008c02:	2301      	movs	r3, #1
 8008c04:	464a      	mov	r2, r9
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f43f ae3f 	beq.w	8008890 <_printf_float+0x98>
 8008c12:	f108 0801 	add.w	r8, r8, #1
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c1a:	1a5b      	subs	r3, r3, r1
 8008c1c:	4543      	cmp	r3, r8
 8008c1e:	dcf0      	bgt.n	8008c02 <_printf_float+0x40a>
 8008c20:	e6f9      	b.n	8008a16 <_printf_float+0x21e>
 8008c22:	f04f 0800 	mov.w	r8, #0
 8008c26:	f104 0919 	add.w	r9, r4, #25
 8008c2a:	e7f4      	b.n	8008c16 <_printf_float+0x41e>

08008c2c <_printf_common>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	4616      	mov	r6, r2
 8008c32:	4699      	mov	r9, r3
 8008c34:	688a      	ldr	r2, [r1, #8]
 8008c36:	690b      	ldr	r3, [r1, #16]
 8008c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	bfb8      	it	lt
 8008c40:	4613      	movlt	r3, r2
 8008c42:	6033      	str	r3, [r6, #0]
 8008c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c48:	4607      	mov	r7, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	b10a      	cbz	r2, 8008c52 <_printf_common+0x26>
 8008c4e:	3301      	adds	r3, #1
 8008c50:	6033      	str	r3, [r6, #0]
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	0699      	lsls	r1, r3, #26
 8008c56:	bf42      	ittt	mi
 8008c58:	6833      	ldrmi	r3, [r6, #0]
 8008c5a:	3302      	addmi	r3, #2
 8008c5c:	6033      	strmi	r3, [r6, #0]
 8008c5e:	6825      	ldr	r5, [r4, #0]
 8008c60:	f015 0506 	ands.w	r5, r5, #6
 8008c64:	d106      	bne.n	8008c74 <_printf_common+0x48>
 8008c66:	f104 0a19 	add.w	sl, r4, #25
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	6832      	ldr	r2, [r6, #0]
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	42ab      	cmp	r3, r5
 8008c72:	dc26      	bgt.n	8008cc2 <_printf_common+0x96>
 8008c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c78:	1e13      	subs	r3, r2, #0
 8008c7a:	6822      	ldr	r2, [r4, #0]
 8008c7c:	bf18      	it	ne
 8008c7e:	2301      	movne	r3, #1
 8008c80:	0692      	lsls	r2, r2, #26
 8008c82:	d42b      	bmi.n	8008cdc <_printf_common+0xb0>
 8008c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c88:	4649      	mov	r1, r9
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	47c0      	blx	r8
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d01e      	beq.n	8008cd0 <_printf_common+0xa4>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	6922      	ldr	r2, [r4, #16]
 8008c96:	f003 0306 	and.w	r3, r3, #6
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	bf02      	ittt	eq
 8008c9e:	68e5      	ldreq	r5, [r4, #12]
 8008ca0:	6833      	ldreq	r3, [r6, #0]
 8008ca2:	1aed      	subeq	r5, r5, r3
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	bf0c      	ite	eq
 8008ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cac:	2500      	movne	r5, #0
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	bfc4      	itt	gt
 8008cb2:	1a9b      	subgt	r3, r3, r2
 8008cb4:	18ed      	addgt	r5, r5, r3
 8008cb6:	2600      	movs	r6, #0
 8008cb8:	341a      	adds	r4, #26
 8008cba:	42b5      	cmp	r5, r6
 8008cbc:	d11a      	bne.n	8008cf4 <_printf_common+0xc8>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	e008      	b.n	8008cd4 <_printf_common+0xa8>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4652      	mov	r2, sl
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	4638      	mov	r0, r7
 8008cca:	47c0      	blx	r8
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d103      	bne.n	8008cd8 <_printf_common+0xac>
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd8:	3501      	adds	r5, #1
 8008cda:	e7c6      	b.n	8008c6a <_printf_common+0x3e>
 8008cdc:	18e1      	adds	r1, r4, r3
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	2030      	movs	r0, #48	; 0x30
 8008ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ce6:	4422      	add	r2, r4
 8008ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cf0:	3302      	adds	r3, #2
 8008cf2:	e7c7      	b.n	8008c84 <_printf_common+0x58>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	47c0      	blx	r8
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d0e6      	beq.n	8008cd0 <_printf_common+0xa4>
 8008d02:	3601      	adds	r6, #1
 8008d04:	e7d9      	b.n	8008cba <_printf_common+0x8e>
	...

08008d08 <_printf_i>:
 8008d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0c:	7e0f      	ldrb	r7, [r1, #24]
 8008d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d10:	2f78      	cmp	r7, #120	; 0x78
 8008d12:	4691      	mov	r9, r2
 8008d14:	4680      	mov	r8, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	469a      	mov	sl, r3
 8008d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d1e:	d807      	bhi.n	8008d30 <_printf_i+0x28>
 8008d20:	2f62      	cmp	r7, #98	; 0x62
 8008d22:	d80a      	bhi.n	8008d3a <_printf_i+0x32>
 8008d24:	2f00      	cmp	r7, #0
 8008d26:	f000 80d4 	beq.w	8008ed2 <_printf_i+0x1ca>
 8008d2a:	2f58      	cmp	r7, #88	; 0x58
 8008d2c:	f000 80c0 	beq.w	8008eb0 <_printf_i+0x1a8>
 8008d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d38:	e03a      	b.n	8008db0 <_printf_i+0xa8>
 8008d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d3e:	2b15      	cmp	r3, #21
 8008d40:	d8f6      	bhi.n	8008d30 <_printf_i+0x28>
 8008d42:	a101      	add	r1, pc, #4	; (adr r1, 8008d48 <_printf_i+0x40>)
 8008d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d48:	08008da1 	.word	0x08008da1
 8008d4c:	08008db5 	.word	0x08008db5
 8008d50:	08008d31 	.word	0x08008d31
 8008d54:	08008d31 	.word	0x08008d31
 8008d58:	08008d31 	.word	0x08008d31
 8008d5c:	08008d31 	.word	0x08008d31
 8008d60:	08008db5 	.word	0x08008db5
 8008d64:	08008d31 	.word	0x08008d31
 8008d68:	08008d31 	.word	0x08008d31
 8008d6c:	08008d31 	.word	0x08008d31
 8008d70:	08008d31 	.word	0x08008d31
 8008d74:	08008eb9 	.word	0x08008eb9
 8008d78:	08008de1 	.word	0x08008de1
 8008d7c:	08008e73 	.word	0x08008e73
 8008d80:	08008d31 	.word	0x08008d31
 8008d84:	08008d31 	.word	0x08008d31
 8008d88:	08008edb 	.word	0x08008edb
 8008d8c:	08008d31 	.word	0x08008d31
 8008d90:	08008de1 	.word	0x08008de1
 8008d94:	08008d31 	.word	0x08008d31
 8008d98:	08008d31 	.word	0x08008d31
 8008d9c:	08008e7b 	.word	0x08008e7b
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	602a      	str	r2, [r5, #0]
 8008da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008db0:	2301      	movs	r3, #1
 8008db2:	e09f      	b.n	8008ef4 <_printf_i+0x1ec>
 8008db4:	6820      	ldr	r0, [r4, #0]
 8008db6:	682b      	ldr	r3, [r5, #0]
 8008db8:	0607      	lsls	r7, r0, #24
 8008dba:	f103 0104 	add.w	r1, r3, #4
 8008dbe:	6029      	str	r1, [r5, #0]
 8008dc0:	d501      	bpl.n	8008dc6 <_printf_i+0xbe>
 8008dc2:	681e      	ldr	r6, [r3, #0]
 8008dc4:	e003      	b.n	8008dce <_printf_i+0xc6>
 8008dc6:	0646      	lsls	r6, r0, #25
 8008dc8:	d5fb      	bpl.n	8008dc2 <_printf_i+0xba>
 8008dca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	da03      	bge.n	8008dda <_printf_i+0xd2>
 8008dd2:	232d      	movs	r3, #45	; 0x2d
 8008dd4:	4276      	negs	r6, r6
 8008dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dda:	485a      	ldr	r0, [pc, #360]	; (8008f44 <_printf_i+0x23c>)
 8008ddc:	230a      	movs	r3, #10
 8008dde:	e012      	b.n	8008e06 <_printf_i+0xfe>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	6820      	ldr	r0, [r4, #0]
 8008de4:	1d19      	adds	r1, r3, #4
 8008de6:	6029      	str	r1, [r5, #0]
 8008de8:	0605      	lsls	r5, r0, #24
 8008dea:	d501      	bpl.n	8008df0 <_printf_i+0xe8>
 8008dec:	681e      	ldr	r6, [r3, #0]
 8008dee:	e002      	b.n	8008df6 <_printf_i+0xee>
 8008df0:	0641      	lsls	r1, r0, #25
 8008df2:	d5fb      	bpl.n	8008dec <_printf_i+0xe4>
 8008df4:	881e      	ldrh	r6, [r3, #0]
 8008df6:	4853      	ldr	r0, [pc, #332]	; (8008f44 <_printf_i+0x23c>)
 8008df8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dfa:	bf0c      	ite	eq
 8008dfc:	2308      	moveq	r3, #8
 8008dfe:	230a      	movne	r3, #10
 8008e00:	2100      	movs	r1, #0
 8008e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e06:	6865      	ldr	r5, [r4, #4]
 8008e08:	60a5      	str	r5, [r4, #8]
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	bfa2      	ittt	ge
 8008e0e:	6821      	ldrge	r1, [r4, #0]
 8008e10:	f021 0104 	bicge.w	r1, r1, #4
 8008e14:	6021      	strge	r1, [r4, #0]
 8008e16:	b90e      	cbnz	r6, 8008e1c <_printf_i+0x114>
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	d04b      	beq.n	8008eb4 <_printf_i+0x1ac>
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e22:	fb03 6711 	mls	r7, r3, r1, r6
 8008e26:	5dc7      	ldrb	r7, [r0, r7]
 8008e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e2c:	4637      	mov	r7, r6
 8008e2e:	42bb      	cmp	r3, r7
 8008e30:	460e      	mov	r6, r1
 8008e32:	d9f4      	bls.n	8008e1e <_printf_i+0x116>
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d10b      	bne.n	8008e50 <_printf_i+0x148>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	07de      	lsls	r6, r3, #31
 8008e3c:	d508      	bpl.n	8008e50 <_printf_i+0x148>
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	6861      	ldr	r1, [r4, #4]
 8008e42:	4299      	cmp	r1, r3
 8008e44:	bfde      	ittt	le
 8008e46:	2330      	movle	r3, #48	; 0x30
 8008e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e50:	1b52      	subs	r2, r2, r5
 8008e52:	6122      	str	r2, [r4, #16]
 8008e54:	f8cd a000 	str.w	sl, [sp]
 8008e58:	464b      	mov	r3, r9
 8008e5a:	aa03      	add	r2, sp, #12
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4640      	mov	r0, r8
 8008e60:	f7ff fee4 	bl	8008c2c <_printf_common>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d14a      	bne.n	8008efe <_printf_i+0x1f6>
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	b004      	add	sp, #16
 8008e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	f043 0320 	orr.w	r3, r3, #32
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	4833      	ldr	r0, [pc, #204]	; (8008f48 <_printf_i+0x240>)
 8008e7c:	2778      	movs	r7, #120	; 0x78
 8008e7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	6829      	ldr	r1, [r5, #0]
 8008e86:	061f      	lsls	r7, r3, #24
 8008e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e8c:	d402      	bmi.n	8008e94 <_printf_i+0x18c>
 8008e8e:	065f      	lsls	r7, r3, #25
 8008e90:	bf48      	it	mi
 8008e92:	b2b6      	uxthmi	r6, r6
 8008e94:	07df      	lsls	r7, r3, #31
 8008e96:	bf48      	it	mi
 8008e98:	f043 0320 	orrmi.w	r3, r3, #32
 8008e9c:	6029      	str	r1, [r5, #0]
 8008e9e:	bf48      	it	mi
 8008ea0:	6023      	strmi	r3, [r4, #0]
 8008ea2:	b91e      	cbnz	r6, 8008eac <_printf_i+0x1a4>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	f023 0320 	bic.w	r3, r3, #32
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	2310      	movs	r3, #16
 8008eae:	e7a7      	b.n	8008e00 <_printf_i+0xf8>
 8008eb0:	4824      	ldr	r0, [pc, #144]	; (8008f44 <_printf_i+0x23c>)
 8008eb2:	e7e4      	b.n	8008e7e <_printf_i+0x176>
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	e7bd      	b.n	8008e34 <_printf_i+0x12c>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	6826      	ldr	r6, [r4, #0]
 8008ebc:	6961      	ldr	r1, [r4, #20]
 8008ebe:	1d18      	adds	r0, r3, #4
 8008ec0:	6028      	str	r0, [r5, #0]
 8008ec2:	0635      	lsls	r5, r6, #24
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	d501      	bpl.n	8008ecc <_printf_i+0x1c4>
 8008ec8:	6019      	str	r1, [r3, #0]
 8008eca:	e002      	b.n	8008ed2 <_printf_i+0x1ca>
 8008ecc:	0670      	lsls	r0, r6, #25
 8008ece:	d5fb      	bpl.n	8008ec8 <_printf_i+0x1c0>
 8008ed0:	8019      	strh	r1, [r3, #0]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	4615      	mov	r5, r2
 8008ed8:	e7bc      	b.n	8008e54 <_printf_i+0x14c>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	1d1a      	adds	r2, r3, #4
 8008ede:	602a      	str	r2, [r5, #0]
 8008ee0:	681d      	ldr	r5, [r3, #0]
 8008ee2:	6862      	ldr	r2, [r4, #4]
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7f7 f9aa 	bl	8000240 <memchr>
 8008eec:	b108      	cbz	r0, 8008ef2 <_printf_i+0x1ea>
 8008eee:	1b40      	subs	r0, r0, r5
 8008ef0:	6060      	str	r0, [r4, #4]
 8008ef2:	6863      	ldr	r3, [r4, #4]
 8008ef4:	6123      	str	r3, [r4, #16]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efc:	e7aa      	b.n	8008e54 <_printf_i+0x14c>
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	462a      	mov	r2, r5
 8008f02:	4649      	mov	r1, r9
 8008f04:	4640      	mov	r0, r8
 8008f06:	47d0      	blx	sl
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d0ad      	beq.n	8008e68 <_printf_i+0x160>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	079b      	lsls	r3, r3, #30
 8008f10:	d413      	bmi.n	8008f3a <_printf_i+0x232>
 8008f12:	68e0      	ldr	r0, [r4, #12]
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	4298      	cmp	r0, r3
 8008f18:	bfb8      	it	lt
 8008f1a:	4618      	movlt	r0, r3
 8008f1c:	e7a6      	b.n	8008e6c <_printf_i+0x164>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4632      	mov	r2, r6
 8008f22:	4649      	mov	r1, r9
 8008f24:	4640      	mov	r0, r8
 8008f26:	47d0      	blx	sl
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d09d      	beq.n	8008e68 <_printf_i+0x160>
 8008f2c:	3501      	adds	r5, #1
 8008f2e:	68e3      	ldr	r3, [r4, #12]
 8008f30:	9903      	ldr	r1, [sp, #12]
 8008f32:	1a5b      	subs	r3, r3, r1
 8008f34:	42ab      	cmp	r3, r5
 8008f36:	dcf2      	bgt.n	8008f1e <_printf_i+0x216>
 8008f38:	e7eb      	b.n	8008f12 <_printf_i+0x20a>
 8008f3a:	2500      	movs	r5, #0
 8008f3c:	f104 0619 	add.w	r6, r4, #25
 8008f40:	e7f5      	b.n	8008f2e <_printf_i+0x226>
 8008f42:	bf00      	nop
 8008f44:	08020f8a 	.word	0x08020f8a
 8008f48:	08020f9b 	.word	0x08020f9b

08008f4c <_scanf_float>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	b087      	sub	sp, #28
 8008f52:	4617      	mov	r7, r2
 8008f54:	9303      	str	r3, [sp, #12]
 8008f56:	688b      	ldr	r3, [r1, #8]
 8008f58:	1e5a      	subs	r2, r3, #1
 8008f5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f5e:	bf83      	ittte	hi
 8008f60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f64:	195b      	addhi	r3, r3, r5
 8008f66:	9302      	strhi	r3, [sp, #8]
 8008f68:	2300      	movls	r3, #0
 8008f6a:	bf86      	itte	hi
 8008f6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f70:	608b      	strhi	r3, [r1, #8]
 8008f72:	9302      	strls	r3, [sp, #8]
 8008f74:	680b      	ldr	r3, [r1, #0]
 8008f76:	468b      	mov	fp, r1
 8008f78:	2500      	movs	r5, #0
 8008f7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f86:	4680      	mov	r8, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	465e      	mov	r6, fp
 8008f8c:	46aa      	mov	sl, r5
 8008f8e:	46a9      	mov	r9, r5
 8008f90:	9501      	str	r5, [sp, #4]
 8008f92:	68a2      	ldr	r2, [r4, #8]
 8008f94:	b152      	cbz	r2, 8008fac <_scanf_float+0x60>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b4e      	cmp	r3, #78	; 0x4e
 8008f9c:	d864      	bhi.n	8009068 <_scanf_float+0x11c>
 8008f9e:	2b40      	cmp	r3, #64	; 0x40
 8008fa0:	d83c      	bhi.n	800901c <_scanf_float+0xd0>
 8008fa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008fa6:	b2c8      	uxtb	r0, r1
 8008fa8:	280e      	cmp	r0, #14
 8008faa:	d93a      	bls.n	8009022 <_scanf_float+0xd6>
 8008fac:	f1b9 0f00 	cmp.w	r9, #0
 8008fb0:	d003      	beq.n	8008fba <_scanf_float+0x6e>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fbe:	f1ba 0f01 	cmp.w	sl, #1
 8008fc2:	f200 8113 	bhi.w	80091ec <_scanf_float+0x2a0>
 8008fc6:	455e      	cmp	r6, fp
 8008fc8:	f200 8105 	bhi.w	80091d6 <_scanf_float+0x28a>
 8008fcc:	2501      	movs	r5, #1
 8008fce:	4628      	mov	r0, r5
 8008fd0:	b007      	add	sp, #28
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fda:	2a0d      	cmp	r2, #13
 8008fdc:	d8e6      	bhi.n	8008fac <_scanf_float+0x60>
 8008fde:	a101      	add	r1, pc, #4	; (adr r1, 8008fe4 <_scanf_float+0x98>)
 8008fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fe4:	08009123 	.word	0x08009123
 8008fe8:	08008fad 	.word	0x08008fad
 8008fec:	08008fad 	.word	0x08008fad
 8008ff0:	08008fad 	.word	0x08008fad
 8008ff4:	08009183 	.word	0x08009183
 8008ff8:	0800915b 	.word	0x0800915b
 8008ffc:	08008fad 	.word	0x08008fad
 8009000:	08008fad 	.word	0x08008fad
 8009004:	08009131 	.word	0x08009131
 8009008:	08008fad 	.word	0x08008fad
 800900c:	08008fad 	.word	0x08008fad
 8009010:	08008fad 	.word	0x08008fad
 8009014:	08008fad 	.word	0x08008fad
 8009018:	080090e9 	.word	0x080090e9
 800901c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009020:	e7db      	b.n	8008fda <_scanf_float+0x8e>
 8009022:	290e      	cmp	r1, #14
 8009024:	d8c2      	bhi.n	8008fac <_scanf_float+0x60>
 8009026:	a001      	add	r0, pc, #4	; (adr r0, 800902c <_scanf_float+0xe0>)
 8009028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800902c:	080090db 	.word	0x080090db
 8009030:	08008fad 	.word	0x08008fad
 8009034:	080090db 	.word	0x080090db
 8009038:	0800916f 	.word	0x0800916f
 800903c:	08008fad 	.word	0x08008fad
 8009040:	08009089 	.word	0x08009089
 8009044:	080090c5 	.word	0x080090c5
 8009048:	080090c5 	.word	0x080090c5
 800904c:	080090c5 	.word	0x080090c5
 8009050:	080090c5 	.word	0x080090c5
 8009054:	080090c5 	.word	0x080090c5
 8009058:	080090c5 	.word	0x080090c5
 800905c:	080090c5 	.word	0x080090c5
 8009060:	080090c5 	.word	0x080090c5
 8009064:	080090c5 	.word	0x080090c5
 8009068:	2b6e      	cmp	r3, #110	; 0x6e
 800906a:	d809      	bhi.n	8009080 <_scanf_float+0x134>
 800906c:	2b60      	cmp	r3, #96	; 0x60
 800906e:	d8b2      	bhi.n	8008fd6 <_scanf_float+0x8a>
 8009070:	2b54      	cmp	r3, #84	; 0x54
 8009072:	d077      	beq.n	8009164 <_scanf_float+0x218>
 8009074:	2b59      	cmp	r3, #89	; 0x59
 8009076:	d199      	bne.n	8008fac <_scanf_float+0x60>
 8009078:	2d07      	cmp	r5, #7
 800907a:	d197      	bne.n	8008fac <_scanf_float+0x60>
 800907c:	2508      	movs	r5, #8
 800907e:	e029      	b.n	80090d4 <_scanf_float+0x188>
 8009080:	2b74      	cmp	r3, #116	; 0x74
 8009082:	d06f      	beq.n	8009164 <_scanf_float+0x218>
 8009084:	2b79      	cmp	r3, #121	; 0x79
 8009086:	e7f6      	b.n	8009076 <_scanf_float+0x12a>
 8009088:	6821      	ldr	r1, [r4, #0]
 800908a:	05c8      	lsls	r0, r1, #23
 800908c:	d51a      	bpl.n	80090c4 <_scanf_float+0x178>
 800908e:	9b02      	ldr	r3, [sp, #8]
 8009090:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009094:	6021      	str	r1, [r4, #0]
 8009096:	f109 0901 	add.w	r9, r9, #1
 800909a:	b11b      	cbz	r3, 80090a4 <_scanf_float+0x158>
 800909c:	3b01      	subs	r3, #1
 800909e:	3201      	adds	r2, #1
 80090a0:	9302      	str	r3, [sp, #8]
 80090a2:	60a2      	str	r2, [r4, #8]
 80090a4:	68a3      	ldr	r3, [r4, #8]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	60a3      	str	r3, [r4, #8]
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	3301      	adds	r3, #1
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	607b      	str	r3, [r7, #4]
 80090b8:	f340 8084 	ble.w	80091c4 <_scanf_float+0x278>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	603b      	str	r3, [r7, #0]
 80090c2:	e766      	b.n	8008f92 <_scanf_float+0x46>
 80090c4:	eb1a 0f05 	cmn.w	sl, r5
 80090c8:	f47f af70 	bne.w	8008fac <_scanf_float+0x60>
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090d2:	6022      	str	r2, [r4, #0]
 80090d4:	f806 3b01 	strb.w	r3, [r6], #1
 80090d8:	e7e4      	b.n	80090a4 <_scanf_float+0x158>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	0610      	lsls	r0, r2, #24
 80090de:	f57f af65 	bpl.w	8008fac <_scanf_float+0x60>
 80090e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090e6:	e7f4      	b.n	80090d2 <_scanf_float+0x186>
 80090e8:	f1ba 0f00 	cmp.w	sl, #0
 80090ec:	d10e      	bne.n	800910c <_scanf_float+0x1c0>
 80090ee:	f1b9 0f00 	cmp.w	r9, #0
 80090f2:	d10e      	bne.n	8009112 <_scanf_float+0x1c6>
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090fe:	d108      	bne.n	8009112 <_scanf_float+0x1c6>
 8009100:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	f04f 0a01 	mov.w	sl, #1
 800910a:	e7e3      	b.n	80090d4 <_scanf_float+0x188>
 800910c:	f1ba 0f02 	cmp.w	sl, #2
 8009110:	d055      	beq.n	80091be <_scanf_float+0x272>
 8009112:	2d01      	cmp	r5, #1
 8009114:	d002      	beq.n	800911c <_scanf_float+0x1d0>
 8009116:	2d04      	cmp	r5, #4
 8009118:	f47f af48 	bne.w	8008fac <_scanf_float+0x60>
 800911c:	3501      	adds	r5, #1
 800911e:	b2ed      	uxtb	r5, r5
 8009120:	e7d8      	b.n	80090d4 <_scanf_float+0x188>
 8009122:	f1ba 0f01 	cmp.w	sl, #1
 8009126:	f47f af41 	bne.w	8008fac <_scanf_float+0x60>
 800912a:	f04f 0a02 	mov.w	sl, #2
 800912e:	e7d1      	b.n	80090d4 <_scanf_float+0x188>
 8009130:	b97d      	cbnz	r5, 8009152 <_scanf_float+0x206>
 8009132:	f1b9 0f00 	cmp.w	r9, #0
 8009136:	f47f af3c 	bne.w	8008fb2 <_scanf_float+0x66>
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009140:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009144:	f47f af39 	bne.w	8008fba <_scanf_float+0x6e>
 8009148:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800914c:	6022      	str	r2, [r4, #0]
 800914e:	2501      	movs	r5, #1
 8009150:	e7c0      	b.n	80090d4 <_scanf_float+0x188>
 8009152:	2d03      	cmp	r5, #3
 8009154:	d0e2      	beq.n	800911c <_scanf_float+0x1d0>
 8009156:	2d05      	cmp	r5, #5
 8009158:	e7de      	b.n	8009118 <_scanf_float+0x1cc>
 800915a:	2d02      	cmp	r5, #2
 800915c:	f47f af26 	bne.w	8008fac <_scanf_float+0x60>
 8009160:	2503      	movs	r5, #3
 8009162:	e7b7      	b.n	80090d4 <_scanf_float+0x188>
 8009164:	2d06      	cmp	r5, #6
 8009166:	f47f af21 	bne.w	8008fac <_scanf_float+0x60>
 800916a:	2507      	movs	r5, #7
 800916c:	e7b2      	b.n	80090d4 <_scanf_float+0x188>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	0591      	lsls	r1, r2, #22
 8009172:	f57f af1b 	bpl.w	8008fac <_scanf_float+0x60>
 8009176:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800917a:	6022      	str	r2, [r4, #0]
 800917c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009180:	e7a8      	b.n	80090d4 <_scanf_float+0x188>
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009188:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800918c:	d006      	beq.n	800919c <_scanf_float+0x250>
 800918e:	0550      	lsls	r0, r2, #21
 8009190:	f57f af0c 	bpl.w	8008fac <_scanf_float+0x60>
 8009194:	f1b9 0f00 	cmp.w	r9, #0
 8009198:	f43f af0f 	beq.w	8008fba <_scanf_float+0x6e>
 800919c:	0591      	lsls	r1, r2, #22
 800919e:	bf58      	it	pl
 80091a0:	9901      	ldrpl	r1, [sp, #4]
 80091a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091a6:	bf58      	it	pl
 80091a8:	eba9 0101 	subpl.w	r1, r9, r1
 80091ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80091b0:	bf58      	it	pl
 80091b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	f04f 0900 	mov.w	r9, #0
 80091bc:	e78a      	b.n	80090d4 <_scanf_float+0x188>
 80091be:	f04f 0a03 	mov.w	sl, #3
 80091c2:	e787      	b.n	80090d4 <_scanf_float+0x188>
 80091c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091c8:	4639      	mov	r1, r7
 80091ca:	4640      	mov	r0, r8
 80091cc:	4798      	blx	r3
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f43f aedf 	beq.w	8008f92 <_scanf_float+0x46>
 80091d4:	e6ea      	b.n	8008fac <_scanf_float+0x60>
 80091d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091de:	463a      	mov	r2, r7
 80091e0:	4640      	mov	r0, r8
 80091e2:	4798      	blx	r3
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	e6ec      	b.n	8008fc6 <_scanf_float+0x7a>
 80091ec:	1e6b      	subs	r3, r5, #1
 80091ee:	2b06      	cmp	r3, #6
 80091f0:	d825      	bhi.n	800923e <_scanf_float+0x2f2>
 80091f2:	2d02      	cmp	r5, #2
 80091f4:	d836      	bhi.n	8009264 <_scanf_float+0x318>
 80091f6:	455e      	cmp	r6, fp
 80091f8:	f67f aee8 	bls.w	8008fcc <_scanf_float+0x80>
 80091fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009200:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009204:	463a      	mov	r2, r7
 8009206:	4640      	mov	r0, r8
 8009208:	4798      	blx	r3
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	3b01      	subs	r3, #1
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	e7f1      	b.n	80091f6 <_scanf_float+0x2aa>
 8009212:	9802      	ldr	r0, [sp, #8]
 8009214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009218:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800921c:	9002      	str	r0, [sp, #8]
 800921e:	463a      	mov	r2, r7
 8009220:	4640      	mov	r0, r8
 8009222:	4798      	blx	r3
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	3b01      	subs	r3, #1
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800922e:	fa5f fa8a 	uxtb.w	sl, sl
 8009232:	f1ba 0f02 	cmp.w	sl, #2
 8009236:	d1ec      	bne.n	8009212 <_scanf_float+0x2c6>
 8009238:	3d03      	subs	r5, #3
 800923a:	b2ed      	uxtb	r5, r5
 800923c:	1b76      	subs	r6, r6, r5
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	05da      	lsls	r2, r3, #23
 8009242:	d52f      	bpl.n	80092a4 <_scanf_float+0x358>
 8009244:	055b      	lsls	r3, r3, #21
 8009246:	d510      	bpl.n	800926a <_scanf_float+0x31e>
 8009248:	455e      	cmp	r6, fp
 800924a:	f67f aebf 	bls.w	8008fcc <_scanf_float+0x80>
 800924e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009256:	463a      	mov	r2, r7
 8009258:	4640      	mov	r0, r8
 800925a:	4798      	blx	r3
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	3b01      	subs	r3, #1
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	e7f1      	b.n	8009248 <_scanf_float+0x2fc>
 8009264:	46aa      	mov	sl, r5
 8009266:	9602      	str	r6, [sp, #8]
 8009268:	e7df      	b.n	800922a <_scanf_float+0x2de>
 800926a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	2965      	cmp	r1, #101	; 0x65
 8009272:	f103 33ff 	add.w	r3, r3, #4294967295
 8009276:	f106 35ff 	add.w	r5, r6, #4294967295
 800927a:	6123      	str	r3, [r4, #16]
 800927c:	d00c      	beq.n	8009298 <_scanf_float+0x34c>
 800927e:	2945      	cmp	r1, #69	; 0x45
 8009280:	d00a      	beq.n	8009298 <_scanf_float+0x34c>
 8009282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009286:	463a      	mov	r2, r7
 8009288:	4640      	mov	r0, r8
 800928a:	4798      	blx	r3
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009292:	3b01      	subs	r3, #1
 8009294:	1eb5      	subs	r5, r6, #2
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800929c:	463a      	mov	r2, r7
 800929e:	4640      	mov	r0, r8
 80092a0:	4798      	blx	r3
 80092a2:	462e      	mov	r6, r5
 80092a4:	6825      	ldr	r5, [r4, #0]
 80092a6:	f015 0510 	ands.w	r5, r5, #16
 80092aa:	d14d      	bne.n	8009348 <_scanf_float+0x3fc>
 80092ac:	7035      	strb	r5, [r6, #0]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b8:	d11a      	bne.n	80092f0 <_scanf_float+0x3a4>
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	454b      	cmp	r3, r9
 80092be:	eba3 0209 	sub.w	r2, r3, r9
 80092c2:	d122      	bne.n	800930a <_scanf_float+0x3be>
 80092c4:	2200      	movs	r2, #0
 80092c6:	4659      	mov	r1, fp
 80092c8:	4640      	mov	r0, r8
 80092ca:	f002 fb5b 	bl	800b984 <_strtod_r>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f011 0f02 	tst.w	r1, #2
 80092d8:	f103 0204 	add.w	r2, r3, #4
 80092dc:	d020      	beq.n	8009320 <_scanf_float+0x3d4>
 80092de:	9903      	ldr	r1, [sp, #12]
 80092e0:	600a      	str	r2, [r1, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	ed83 0b00 	vstr	d0, [r3]
 80092e8:	68e3      	ldr	r3, [r4, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60e3      	str	r3, [r4, #12]
 80092ee:	e66e      	b.n	8008fce <_scanf_float+0x82>
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0e6      	beq.n	80092c4 <_scanf_float+0x378>
 80092f6:	9905      	ldr	r1, [sp, #20]
 80092f8:	230a      	movs	r3, #10
 80092fa:	462a      	mov	r2, r5
 80092fc:	3101      	adds	r1, #1
 80092fe:	4640      	mov	r0, r8
 8009300:	f002 fbc8 	bl	800ba94 <_strtol_r>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	9e05      	ldr	r6, [sp, #20]
 8009308:	1ac2      	subs	r2, r0, r3
 800930a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800930e:	429e      	cmp	r6, r3
 8009310:	bf28      	it	cs
 8009312:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009316:	490d      	ldr	r1, [pc, #52]	; (800934c <_scanf_float+0x400>)
 8009318:	4630      	mov	r0, r6
 800931a:	f000 f8dd 	bl	80094d8 <siprintf>
 800931e:	e7d1      	b.n	80092c4 <_scanf_float+0x378>
 8009320:	f011 0f04 	tst.w	r1, #4
 8009324:	9903      	ldr	r1, [sp, #12]
 8009326:	600a      	str	r2, [r1, #0]
 8009328:	d1db      	bne.n	80092e2 <_scanf_float+0x396>
 800932a:	eeb4 0b40 	vcmp.f64	d0, d0
 800932e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009332:	681e      	ldr	r6, [r3, #0]
 8009334:	d705      	bvc.n	8009342 <_scanf_float+0x3f6>
 8009336:	4806      	ldr	r0, [pc, #24]	; (8009350 <_scanf_float+0x404>)
 8009338:	f000 f9b2 	bl	80096a0 <nanf>
 800933c:	ed86 0a00 	vstr	s0, [r6]
 8009340:	e7d2      	b.n	80092e8 <_scanf_float+0x39c>
 8009342:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009346:	e7f9      	b.n	800933c <_scanf_float+0x3f0>
 8009348:	2500      	movs	r5, #0
 800934a:	e640      	b.n	8008fce <_scanf_float+0x82>
 800934c:	08020fac 	.word	0x08020fac
 8009350:	0802133d 	.word	0x0802133d

08009354 <std>:
 8009354:	2300      	movs	r3, #0
 8009356:	b510      	push	{r4, lr}
 8009358:	4604      	mov	r4, r0
 800935a:	e9c0 3300 	strd	r3, r3, [r0]
 800935e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009362:	6083      	str	r3, [r0, #8]
 8009364:	8181      	strh	r1, [r0, #12]
 8009366:	6643      	str	r3, [r0, #100]	; 0x64
 8009368:	81c2      	strh	r2, [r0, #14]
 800936a:	6183      	str	r3, [r0, #24]
 800936c:	4619      	mov	r1, r3
 800936e:	2208      	movs	r2, #8
 8009370:	305c      	adds	r0, #92	; 0x5c
 8009372:	f000 f914 	bl	800959e <memset>
 8009376:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <std+0x58>)
 8009378:	6263      	str	r3, [r4, #36]	; 0x24
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <std+0x5c>)
 800937c:	62a3      	str	r3, [r4, #40]	; 0x28
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <std+0x60>)
 8009380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009382:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <std+0x64>)
 8009384:	6323      	str	r3, [r4, #48]	; 0x30
 8009386:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <std+0x68>)
 8009388:	6224      	str	r4, [r4, #32]
 800938a:	429c      	cmp	r4, r3
 800938c:	d006      	beq.n	800939c <std+0x48>
 800938e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009392:	4294      	cmp	r4, r2
 8009394:	d002      	beq.n	800939c <std+0x48>
 8009396:	33d0      	adds	r3, #208	; 0xd0
 8009398:	429c      	cmp	r4, r3
 800939a:	d105      	bne.n	80093a8 <std+0x54>
 800939c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a4:	f000 b978 	b.w	8009698 <__retarget_lock_init_recursive>
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	bf00      	nop
 80093ac:	08009519 	.word	0x08009519
 80093b0:	0800953b 	.word	0x0800953b
 80093b4:	08009573 	.word	0x08009573
 80093b8:	08009597 	.word	0x08009597
 80093bc:	200004d4 	.word	0x200004d4

080093c0 <stdio_exit_handler>:
 80093c0:	4a02      	ldr	r2, [pc, #8]	; (80093cc <stdio_exit_handler+0xc>)
 80093c2:	4903      	ldr	r1, [pc, #12]	; (80093d0 <stdio_exit_handler+0x10>)
 80093c4:	4803      	ldr	r0, [pc, #12]	; (80093d4 <stdio_exit_handler+0x14>)
 80093c6:	f000 b869 	b.w	800949c <_fwalk_sglue>
 80093ca:	bf00      	nop
 80093cc:	20000018 	.word	0x20000018
 80093d0:	0800be55 	.word	0x0800be55
 80093d4:	20000024 	.word	0x20000024

080093d8 <cleanup_stdio>:
 80093d8:	6841      	ldr	r1, [r0, #4]
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <cleanup_stdio+0x34>)
 80093dc:	4299      	cmp	r1, r3
 80093de:	b510      	push	{r4, lr}
 80093e0:	4604      	mov	r4, r0
 80093e2:	d001      	beq.n	80093e8 <cleanup_stdio+0x10>
 80093e4:	f002 fd36 	bl	800be54 <_fflush_r>
 80093e8:	68a1      	ldr	r1, [r4, #8]
 80093ea:	4b09      	ldr	r3, [pc, #36]	; (8009410 <cleanup_stdio+0x38>)
 80093ec:	4299      	cmp	r1, r3
 80093ee:	d002      	beq.n	80093f6 <cleanup_stdio+0x1e>
 80093f0:	4620      	mov	r0, r4
 80093f2:	f002 fd2f 	bl	800be54 <_fflush_r>
 80093f6:	68e1      	ldr	r1, [r4, #12]
 80093f8:	4b06      	ldr	r3, [pc, #24]	; (8009414 <cleanup_stdio+0x3c>)
 80093fa:	4299      	cmp	r1, r3
 80093fc:	d004      	beq.n	8009408 <cleanup_stdio+0x30>
 80093fe:	4620      	mov	r0, r4
 8009400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009404:	f002 bd26 	b.w	800be54 <_fflush_r>
 8009408:	bd10      	pop	{r4, pc}
 800940a:	bf00      	nop
 800940c:	200004d4 	.word	0x200004d4
 8009410:	2000053c 	.word	0x2000053c
 8009414:	200005a4 	.word	0x200005a4

08009418 <global_stdio_init.part.0>:
 8009418:	b510      	push	{r4, lr}
 800941a:	4b0b      	ldr	r3, [pc, #44]	; (8009448 <global_stdio_init.part.0+0x30>)
 800941c:	4c0b      	ldr	r4, [pc, #44]	; (800944c <global_stdio_init.part.0+0x34>)
 800941e:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <global_stdio_init.part.0+0x38>)
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	4620      	mov	r0, r4
 8009424:	2200      	movs	r2, #0
 8009426:	2104      	movs	r1, #4
 8009428:	f7ff ff94 	bl	8009354 <std>
 800942c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009430:	2201      	movs	r2, #1
 8009432:	2109      	movs	r1, #9
 8009434:	f7ff ff8e 	bl	8009354 <std>
 8009438:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800943c:	2202      	movs	r2, #2
 800943e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009442:	2112      	movs	r1, #18
 8009444:	f7ff bf86 	b.w	8009354 <std>
 8009448:	2000060c 	.word	0x2000060c
 800944c:	200004d4 	.word	0x200004d4
 8009450:	080093c1 	.word	0x080093c1

08009454 <__sfp_lock_acquire>:
 8009454:	4801      	ldr	r0, [pc, #4]	; (800945c <__sfp_lock_acquire+0x8>)
 8009456:	f000 b920 	b.w	800969a <__retarget_lock_acquire_recursive>
 800945a:	bf00      	nop
 800945c:	20000615 	.word	0x20000615

08009460 <__sfp_lock_release>:
 8009460:	4801      	ldr	r0, [pc, #4]	; (8009468 <__sfp_lock_release+0x8>)
 8009462:	f000 b91b 	b.w	800969c <__retarget_lock_release_recursive>
 8009466:	bf00      	nop
 8009468:	20000615 	.word	0x20000615

0800946c <__sinit>:
 800946c:	b510      	push	{r4, lr}
 800946e:	4604      	mov	r4, r0
 8009470:	f7ff fff0 	bl	8009454 <__sfp_lock_acquire>
 8009474:	6a23      	ldr	r3, [r4, #32]
 8009476:	b11b      	cbz	r3, 8009480 <__sinit+0x14>
 8009478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800947c:	f7ff bff0 	b.w	8009460 <__sfp_lock_release>
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <__sinit+0x28>)
 8009482:	6223      	str	r3, [r4, #32]
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <__sinit+0x2c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1f5      	bne.n	8009478 <__sinit+0xc>
 800948c:	f7ff ffc4 	bl	8009418 <global_stdio_init.part.0>
 8009490:	e7f2      	b.n	8009478 <__sinit+0xc>
 8009492:	bf00      	nop
 8009494:	080093d9 	.word	0x080093d9
 8009498:	2000060c 	.word	0x2000060c

0800949c <_fwalk_sglue>:
 800949c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a0:	4607      	mov	r7, r0
 80094a2:	4688      	mov	r8, r1
 80094a4:	4614      	mov	r4, r2
 80094a6:	2600      	movs	r6, #0
 80094a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094ac:	f1b9 0901 	subs.w	r9, r9, #1
 80094b0:	d505      	bpl.n	80094be <_fwalk_sglue+0x22>
 80094b2:	6824      	ldr	r4, [r4, #0]
 80094b4:	2c00      	cmp	r4, #0
 80094b6:	d1f7      	bne.n	80094a8 <_fwalk_sglue+0xc>
 80094b8:	4630      	mov	r0, r6
 80094ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d907      	bls.n	80094d4 <_fwalk_sglue+0x38>
 80094c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094c8:	3301      	adds	r3, #1
 80094ca:	d003      	beq.n	80094d4 <_fwalk_sglue+0x38>
 80094cc:	4629      	mov	r1, r5
 80094ce:	4638      	mov	r0, r7
 80094d0:	47c0      	blx	r8
 80094d2:	4306      	orrs	r6, r0
 80094d4:	3568      	adds	r5, #104	; 0x68
 80094d6:	e7e9      	b.n	80094ac <_fwalk_sglue+0x10>

080094d8 <siprintf>:
 80094d8:	b40e      	push	{r1, r2, r3}
 80094da:	b500      	push	{lr}
 80094dc:	b09c      	sub	sp, #112	; 0x70
 80094de:	ab1d      	add	r3, sp, #116	; 0x74
 80094e0:	9002      	str	r0, [sp, #8]
 80094e2:	9006      	str	r0, [sp, #24]
 80094e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e8:	4809      	ldr	r0, [pc, #36]	; (8009510 <siprintf+0x38>)
 80094ea:	9107      	str	r1, [sp, #28]
 80094ec:	9104      	str	r1, [sp, #16]
 80094ee:	4909      	ldr	r1, [pc, #36]	; (8009514 <siprintf+0x3c>)
 80094f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	6800      	ldr	r0, [r0, #0]
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	a902      	add	r1, sp, #8
 80094fc:	f002 fb26 	bl	800bb4c <_svfiprintf_r>
 8009500:	9b02      	ldr	r3, [sp, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	b01c      	add	sp, #112	; 0x70
 8009508:	f85d eb04 	ldr.w	lr, [sp], #4
 800950c:	b003      	add	sp, #12
 800950e:	4770      	bx	lr
 8009510:	20000070 	.word	0x20000070
 8009514:	ffff0208 	.word	0xffff0208

08009518 <__sread>:
 8009518:	b510      	push	{r4, lr}
 800951a:	460c      	mov	r4, r1
 800951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009520:	f000 f86c 	bl	80095fc <_read_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	bfab      	itete	ge
 8009528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800952a:	89a3      	ldrhlt	r3, [r4, #12]
 800952c:	181b      	addge	r3, r3, r0
 800952e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009532:	bfac      	ite	ge
 8009534:	6563      	strge	r3, [r4, #84]	; 0x54
 8009536:	81a3      	strhlt	r3, [r4, #12]
 8009538:	bd10      	pop	{r4, pc}

0800953a <__swrite>:
 800953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	461f      	mov	r7, r3
 8009540:	898b      	ldrh	r3, [r1, #12]
 8009542:	05db      	lsls	r3, r3, #23
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	4616      	mov	r6, r2
 800954a:	d505      	bpl.n	8009558 <__swrite+0x1e>
 800954c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009550:	2302      	movs	r3, #2
 8009552:	2200      	movs	r2, #0
 8009554:	f000 f840 	bl	80095d8 <_lseek_r>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	4632      	mov	r2, r6
 8009566:	463b      	mov	r3, r7
 8009568:	4628      	mov	r0, r5
 800956a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800956e:	f000 b857 	b.w	8009620 <_write_r>

08009572 <__sseek>:
 8009572:	b510      	push	{r4, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800957a:	f000 f82d 	bl	80095d8 <_lseek_r>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	bf15      	itete	ne
 8009584:	6560      	strne	r0, [r4, #84]	; 0x54
 8009586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800958a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800958e:	81a3      	strheq	r3, [r4, #12]
 8009590:	bf18      	it	ne
 8009592:	81a3      	strhne	r3, [r4, #12]
 8009594:	bd10      	pop	{r4, pc}

08009596 <__sclose>:
 8009596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959a:	f000 b80d 	b.w	80095b8 <_close_r>

0800959e <memset>:
 800959e:	4402      	add	r2, r0
 80095a0:	4603      	mov	r3, r0
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d100      	bne.n	80095a8 <memset+0xa>
 80095a6:	4770      	bx	lr
 80095a8:	f803 1b01 	strb.w	r1, [r3], #1
 80095ac:	e7f9      	b.n	80095a2 <memset+0x4>
	...

080095b0 <_localeconv_r>:
 80095b0:	4800      	ldr	r0, [pc, #0]	; (80095b4 <_localeconv_r+0x4>)
 80095b2:	4770      	bx	lr
 80095b4:	20000164 	.word	0x20000164

080095b8 <_close_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d06      	ldr	r5, [pc, #24]	; (80095d4 <_close_r+0x1c>)
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	f7f8 ff11 	bl	80023ea <_close>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_close_r+0x1a>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_close_r+0x1a>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000610 	.word	0x20000610

080095d8 <_lseek_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	; (80095f8 <_lseek_r+0x20>)
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f7f8 ff26 	bl	8002438 <_lseek>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_lseek_r+0x1e>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_lseek_r+0x1e>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	20000610 	.word	0x20000610

080095fc <_read_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d07      	ldr	r5, [pc, #28]	; (800961c <_read_r+0x20>)
 8009600:	4604      	mov	r4, r0
 8009602:	4608      	mov	r0, r1
 8009604:	4611      	mov	r1, r2
 8009606:	2200      	movs	r2, #0
 8009608:	602a      	str	r2, [r5, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	f7f8 feb4 	bl	8002378 <_read>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_read_r+0x1e>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_read_r+0x1e>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	20000610 	.word	0x20000610

08009620 <_write_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	; (8009640 <_write_r+0x20>)
 8009624:	4604      	mov	r4, r0
 8009626:	4608      	mov	r0, r1
 8009628:	4611      	mov	r1, r2
 800962a:	2200      	movs	r2, #0
 800962c:	602a      	str	r2, [r5, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	f7f8 febf 	bl	80023b2 <_write>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_write_r+0x1e>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_write_r+0x1e>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	20000610 	.word	0x20000610

08009644 <__errno>:
 8009644:	4b01      	ldr	r3, [pc, #4]	; (800964c <__errno+0x8>)
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	20000070 	.word	0x20000070

08009650 <__libc_init_array>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	4d0d      	ldr	r5, [pc, #52]	; (8009688 <__libc_init_array+0x38>)
 8009654:	4c0d      	ldr	r4, [pc, #52]	; (800968c <__libc_init_array+0x3c>)
 8009656:	1b64      	subs	r4, r4, r5
 8009658:	10a4      	asrs	r4, r4, #2
 800965a:	2600      	movs	r6, #0
 800965c:	42a6      	cmp	r6, r4
 800965e:	d109      	bne.n	8009674 <__libc_init_array+0x24>
 8009660:	4d0b      	ldr	r5, [pc, #44]	; (8009690 <__libc_init_array+0x40>)
 8009662:	4c0c      	ldr	r4, [pc, #48]	; (8009694 <__libc_init_array+0x44>)
 8009664:	f003 fb0c 	bl	800cc80 <_init>
 8009668:	1b64      	subs	r4, r4, r5
 800966a:	10a4      	asrs	r4, r4, #2
 800966c:	2600      	movs	r6, #0
 800966e:	42a6      	cmp	r6, r4
 8009670:	d105      	bne.n	800967e <__libc_init_array+0x2e>
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	f855 3b04 	ldr.w	r3, [r5], #4
 8009678:	4798      	blx	r3
 800967a:	3601      	adds	r6, #1
 800967c:	e7ee      	b.n	800965c <__libc_init_array+0xc>
 800967e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009682:	4798      	blx	r3
 8009684:	3601      	adds	r6, #1
 8009686:	e7f2      	b.n	800966e <__libc_init_array+0x1e>
 8009688:	080213a8 	.word	0x080213a8
 800968c:	080213a8 	.word	0x080213a8
 8009690:	080213a8 	.word	0x080213a8
 8009694:	080213ac 	.word	0x080213ac

08009698 <__retarget_lock_init_recursive>:
 8009698:	4770      	bx	lr

0800969a <__retarget_lock_acquire_recursive>:
 800969a:	4770      	bx	lr

0800969c <__retarget_lock_release_recursive>:
 800969c:	4770      	bx	lr
	...

080096a0 <nanf>:
 80096a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096a8 <nanf+0x8>
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	7fc00000 	.word	0x7fc00000

080096ac <quorem>:
 80096ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	6903      	ldr	r3, [r0, #16]
 80096b2:	690c      	ldr	r4, [r1, #16]
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	4607      	mov	r7, r0
 80096b8:	db7e      	blt.n	80097b8 <quorem+0x10c>
 80096ba:	3c01      	subs	r4, #1
 80096bc:	f101 0814 	add.w	r8, r1, #20
 80096c0:	f100 0514 	add.w	r5, r0, #20
 80096c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096d2:	3301      	adds	r3, #1
 80096d4:	429a      	cmp	r2, r3
 80096d6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096de:	fbb2 f6f3 	udiv	r6, r2, r3
 80096e2:	d331      	bcc.n	8009748 <quorem+0x9c>
 80096e4:	f04f 0e00 	mov.w	lr, #0
 80096e8:	4640      	mov	r0, r8
 80096ea:	46ac      	mov	ip, r5
 80096ec:	46f2      	mov	sl, lr
 80096ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80096f2:	b293      	uxth	r3, r2
 80096f4:	fb06 e303 	mla	r3, r6, r3, lr
 80096f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096fc:	0c1a      	lsrs	r2, r3, #16
 80096fe:	b29b      	uxth	r3, r3
 8009700:	ebaa 0303 	sub.w	r3, sl, r3
 8009704:	f8dc a000 	ldr.w	sl, [ip]
 8009708:	fa13 f38a 	uxtah	r3, r3, sl
 800970c:	fb06 220e 	mla	r2, r6, lr, r2
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	9b00      	ldr	r3, [sp, #0]
 8009714:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009718:	b292      	uxth	r2, r2
 800971a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800971e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009722:	f8bd 3000 	ldrh.w	r3, [sp]
 8009726:	4581      	cmp	r9, r0
 8009728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800972c:	f84c 3b04 	str.w	r3, [ip], #4
 8009730:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009734:	d2db      	bcs.n	80096ee <quorem+0x42>
 8009736:	f855 300b 	ldr.w	r3, [r5, fp]
 800973a:	b92b      	cbnz	r3, 8009748 <quorem+0x9c>
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	3b04      	subs	r3, #4
 8009740:	429d      	cmp	r5, r3
 8009742:	461a      	mov	r2, r3
 8009744:	d32c      	bcc.n	80097a0 <quorem+0xf4>
 8009746:	613c      	str	r4, [r7, #16]
 8009748:	4638      	mov	r0, r7
 800974a:	f001 f96b 	bl	800aa24 <__mcmp>
 800974e:	2800      	cmp	r0, #0
 8009750:	db22      	blt.n	8009798 <quorem+0xec>
 8009752:	3601      	adds	r6, #1
 8009754:	4629      	mov	r1, r5
 8009756:	2000      	movs	r0, #0
 8009758:	f858 2b04 	ldr.w	r2, [r8], #4
 800975c:	f8d1 c000 	ldr.w	ip, [r1]
 8009760:	b293      	uxth	r3, r2
 8009762:	1ac3      	subs	r3, r0, r3
 8009764:	0c12      	lsrs	r2, r2, #16
 8009766:	fa13 f38c 	uxtah	r3, r3, ip
 800976a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800976e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009772:	b29b      	uxth	r3, r3
 8009774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009778:	45c1      	cmp	r9, r8
 800977a:	f841 3b04 	str.w	r3, [r1], #4
 800977e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009782:	d2e9      	bcs.n	8009758 <quorem+0xac>
 8009784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800978c:	b922      	cbnz	r2, 8009798 <quorem+0xec>
 800978e:	3b04      	subs	r3, #4
 8009790:	429d      	cmp	r5, r3
 8009792:	461a      	mov	r2, r3
 8009794:	d30a      	bcc.n	80097ac <quorem+0x100>
 8009796:	613c      	str	r4, [r7, #16]
 8009798:	4630      	mov	r0, r6
 800979a:	b003      	add	sp, #12
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	3b04      	subs	r3, #4
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d1ce      	bne.n	8009746 <quorem+0x9a>
 80097a8:	3c01      	subs	r4, #1
 80097aa:	e7c9      	b.n	8009740 <quorem+0x94>
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	3b04      	subs	r3, #4
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	d1f0      	bne.n	8009796 <quorem+0xea>
 80097b4:	3c01      	subs	r4, #1
 80097b6:	e7eb      	b.n	8009790 <quorem+0xe4>
 80097b8:	2000      	movs	r0, #0
 80097ba:	e7ee      	b.n	800979a <quorem+0xee>
 80097bc:	0000      	movs	r0, r0
	...

080097c0 <_dtoa_r>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	ed2d 8b02 	vpush	{d8}
 80097c8:	69c5      	ldr	r5, [r0, #28]
 80097ca:	b091      	sub	sp, #68	; 0x44
 80097cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80097d0:	ec59 8b10 	vmov	r8, r9, d0
 80097d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80097d6:	9106      	str	r1, [sp, #24]
 80097d8:	4606      	mov	r6, r0
 80097da:	9208      	str	r2, [sp, #32]
 80097dc:	930c      	str	r3, [sp, #48]	; 0x30
 80097de:	b975      	cbnz	r5, 80097fe <_dtoa_r+0x3e>
 80097e0:	2010      	movs	r0, #16
 80097e2:	f000 fda5 	bl	800a330 <malloc>
 80097e6:	4602      	mov	r2, r0
 80097e8:	61f0      	str	r0, [r6, #28]
 80097ea:	b920      	cbnz	r0, 80097f6 <_dtoa_r+0x36>
 80097ec:	4ba6      	ldr	r3, [pc, #664]	; (8009a88 <_dtoa_r+0x2c8>)
 80097ee:	21ef      	movs	r1, #239	; 0xef
 80097f0:	48a6      	ldr	r0, [pc, #664]	; (8009a8c <_dtoa_r+0x2cc>)
 80097f2:	f002 fba9 	bl	800bf48 <__assert_func>
 80097f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097fa:	6005      	str	r5, [r0, #0]
 80097fc:	60c5      	str	r5, [r0, #12]
 80097fe:	69f3      	ldr	r3, [r6, #28]
 8009800:	6819      	ldr	r1, [r3, #0]
 8009802:	b151      	cbz	r1, 800981a <_dtoa_r+0x5a>
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	604a      	str	r2, [r1, #4]
 8009808:	2301      	movs	r3, #1
 800980a:	4093      	lsls	r3, r2
 800980c:	608b      	str	r3, [r1, #8]
 800980e:	4630      	mov	r0, r6
 8009810:	f000 fe82 	bl	800a518 <_Bfree>
 8009814:	69f3      	ldr	r3, [r6, #28]
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f1b9 0300 	subs.w	r3, r9, #0
 800981e:	bfbb      	ittet	lt
 8009820:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009824:	9303      	strlt	r3, [sp, #12]
 8009826:	2300      	movge	r3, #0
 8009828:	2201      	movlt	r2, #1
 800982a:	bfac      	ite	ge
 800982c:	6023      	strge	r3, [r4, #0]
 800982e:	6022      	strlt	r2, [r4, #0]
 8009830:	4b97      	ldr	r3, [pc, #604]	; (8009a90 <_dtoa_r+0x2d0>)
 8009832:	9c03      	ldr	r4, [sp, #12]
 8009834:	43a3      	bics	r3, r4
 8009836:	d11c      	bne.n	8009872 <_dtoa_r+0xb2>
 8009838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800983a:	f242 730f 	movw	r3, #9999	; 0x270f
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009844:	ea53 0308 	orrs.w	r3, r3, r8
 8009848:	f000 84fb 	beq.w	800a242 <_dtoa_r+0xa82>
 800984c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800984e:	b963      	cbnz	r3, 800986a <_dtoa_r+0xaa>
 8009850:	4b90      	ldr	r3, [pc, #576]	; (8009a94 <_dtoa_r+0x2d4>)
 8009852:	e020      	b.n	8009896 <_dtoa_r+0xd6>
 8009854:	4b90      	ldr	r3, [pc, #576]	; (8009a98 <_dtoa_r+0x2d8>)
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	3308      	adds	r3, #8
 800985a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	9801      	ldr	r0, [sp, #4]
 8009860:	b011      	add	sp, #68	; 0x44
 8009862:	ecbd 8b02 	vpop	{d8}
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	4b8a      	ldr	r3, [pc, #552]	; (8009a94 <_dtoa_r+0x2d4>)
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	3303      	adds	r3, #3
 8009870:	e7f3      	b.n	800985a <_dtoa_r+0x9a>
 8009872:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009876:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	d10c      	bne.n	800989a <_dtoa_r+0xda>
 8009880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009882:	2301      	movs	r3, #1
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 84d7 	beq.w	800a23c <_dtoa_r+0xa7c>
 800988e:	4b83      	ldr	r3, [pc, #524]	; (8009a9c <_dtoa_r+0x2dc>)
 8009890:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	3b01      	subs	r3, #1
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	e7e1      	b.n	800985e <_dtoa_r+0x9e>
 800989a:	aa0e      	add	r2, sp, #56	; 0x38
 800989c:	a90f      	add	r1, sp, #60	; 0x3c
 800989e:	4630      	mov	r0, r6
 80098a0:	eeb0 0b48 	vmov.f64	d0, d8
 80098a4:	f001 f9d4 	bl	800ac50 <__d2b>
 80098a8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80098ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098ae:	4605      	mov	r5, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d046      	beq.n	8009942 <_dtoa_r+0x182>
 80098b4:	eeb0 7b48 	vmov.f64	d7, d8
 80098b8:	ee18 1a90 	vmov	r1, s17
 80098bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80098c0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80098c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098cc:	2000      	movs	r0, #0
 80098ce:	ee07 1a90 	vmov	s15, r1
 80098d2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80098d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009a70 <_dtoa_r+0x2b0>
 80098da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098de:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009a78 <_dtoa_r+0x2b8>
 80098e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80098e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009a80 <_dtoa_r+0x2c0>
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80098f2:	eeb0 7b46 	vmov.f64	d7, d6
 80098f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80098fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80098fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009906:	ee16 ba90 	vmov	fp, s13
 800990a:	9009      	str	r0, [sp, #36]	; 0x24
 800990c:	d508      	bpl.n	8009920 <_dtoa_r+0x160>
 800990e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009912:	eeb4 6b47 	vcmp.f64	d6, d7
 8009916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991a:	bf18      	it	ne
 800991c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009920:	f1bb 0f16 	cmp.w	fp, #22
 8009924:	d82b      	bhi.n	800997e <_dtoa_r+0x1be>
 8009926:	495e      	ldr	r1, [pc, #376]	; (8009aa0 <_dtoa_r+0x2e0>)
 8009928:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800992c:	ed91 7b00 	vldr	d7, [r1]
 8009930:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009938:	d501      	bpl.n	800993e <_dtoa_r+0x17e>
 800993a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800993e:	2100      	movs	r1, #0
 8009940:	e01e      	b.n	8009980 <_dtoa_r+0x1c0>
 8009942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009944:	4413      	add	r3, r2
 8009946:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800994a:	2920      	cmp	r1, #32
 800994c:	bfc1      	itttt	gt
 800994e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8009952:	408c      	lslgt	r4, r1
 8009954:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009958:	fa28 f101 	lsrgt.w	r1, r8, r1
 800995c:	bfd6      	itet	le
 800995e:	f1c1 0120 	rsble	r1, r1, #32
 8009962:	4321      	orrgt	r1, r4
 8009964:	fa08 f101 	lslle.w	r1, r8, r1
 8009968:	ee07 1a90 	vmov	s15, r1
 800996c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009970:	3b01      	subs	r3, #1
 8009972:	ee17 1a90 	vmov	r1, s15
 8009976:	2001      	movs	r0, #1
 8009978:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800997c:	e7a7      	b.n	80098ce <_dtoa_r+0x10e>
 800997e:	2101      	movs	r1, #1
 8009980:	1ad2      	subs	r2, r2, r3
 8009982:	1e53      	subs	r3, r2, #1
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	bf45      	ittet	mi
 8009988:	f1c2 0301 	rsbmi	r3, r2, #1
 800998c:	9304      	strmi	r3, [sp, #16]
 800998e:	2300      	movpl	r3, #0
 8009990:	2300      	movmi	r3, #0
 8009992:	bf4c      	ite	mi
 8009994:	9305      	strmi	r3, [sp, #20]
 8009996:	9304      	strpl	r3, [sp, #16]
 8009998:	f1bb 0f00 	cmp.w	fp, #0
 800999c:	910b      	str	r1, [sp, #44]	; 0x2c
 800999e:	db18      	blt.n	80099d2 <_dtoa_r+0x212>
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80099a6:	445b      	add	r3, fp
 80099a8:	9305      	str	r3, [sp, #20]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9a06      	ldr	r2, [sp, #24]
 80099ae:	2a09      	cmp	r2, #9
 80099b0:	d848      	bhi.n	8009a44 <_dtoa_r+0x284>
 80099b2:	2a05      	cmp	r2, #5
 80099b4:	bfc4      	itt	gt
 80099b6:	3a04      	subgt	r2, #4
 80099b8:	9206      	strgt	r2, [sp, #24]
 80099ba:	9a06      	ldr	r2, [sp, #24]
 80099bc:	f1a2 0202 	sub.w	r2, r2, #2
 80099c0:	bfcc      	ite	gt
 80099c2:	2400      	movgt	r4, #0
 80099c4:	2401      	movle	r4, #1
 80099c6:	2a03      	cmp	r2, #3
 80099c8:	d847      	bhi.n	8009a5a <_dtoa_r+0x29a>
 80099ca:	e8df f002 	tbb	[pc, r2]
 80099ce:	2d0b      	.short	0x2d0b
 80099d0:	392b      	.short	0x392b
 80099d2:	9b04      	ldr	r3, [sp, #16]
 80099d4:	2200      	movs	r2, #0
 80099d6:	eba3 030b 	sub.w	r3, r3, fp
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	920a      	str	r2, [sp, #40]	; 0x28
 80099de:	f1cb 0300 	rsb	r3, fp, #0
 80099e2:	e7e3      	b.n	80099ac <_dtoa_r+0x1ec>
 80099e4:	2200      	movs	r2, #0
 80099e6:	9207      	str	r2, [sp, #28]
 80099e8:	9a08      	ldr	r2, [sp, #32]
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	dc38      	bgt.n	8009a60 <_dtoa_r+0x2a0>
 80099ee:	f04f 0a01 	mov.w	sl, #1
 80099f2:	46d1      	mov	r9, sl
 80099f4:	4652      	mov	r2, sl
 80099f6:	f8cd a020 	str.w	sl, [sp, #32]
 80099fa:	69f7      	ldr	r7, [r6, #28]
 80099fc:	2100      	movs	r1, #0
 80099fe:	2004      	movs	r0, #4
 8009a00:	f100 0c14 	add.w	ip, r0, #20
 8009a04:	4594      	cmp	ip, r2
 8009a06:	d930      	bls.n	8009a6a <_dtoa_r+0x2aa>
 8009a08:	6079      	str	r1, [r7, #4]
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a0e:	f000 fd43 	bl	800a498 <_Balloc>
 8009a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a14:	9001      	str	r0, [sp, #4]
 8009a16:	4602      	mov	r2, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d145      	bne.n	8009aa8 <_dtoa_r+0x2e8>
 8009a1c:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <_dtoa_r+0x2e4>)
 8009a1e:	f240 11af 	movw	r1, #431	; 0x1af
 8009a22:	e6e5      	b.n	80097f0 <_dtoa_r+0x30>
 8009a24:	2201      	movs	r2, #1
 8009a26:	e7de      	b.n	80099e6 <_dtoa_r+0x226>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	9207      	str	r2, [sp, #28]
 8009a2c:	9a08      	ldr	r2, [sp, #32]
 8009a2e:	eb0b 0a02 	add.w	sl, fp, r2
 8009a32:	f10a 0901 	add.w	r9, sl, #1
 8009a36:	464a      	mov	r2, r9
 8009a38:	2a01      	cmp	r2, #1
 8009a3a:	bfb8      	it	lt
 8009a3c:	2201      	movlt	r2, #1
 8009a3e:	e7dc      	b.n	80099fa <_dtoa_r+0x23a>
 8009a40:	2201      	movs	r2, #1
 8009a42:	e7f2      	b.n	8009a2a <_dtoa_r+0x26a>
 8009a44:	2401      	movs	r4, #1
 8009a46:	2200      	movs	r2, #0
 8009a48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a50:	2100      	movs	r1, #0
 8009a52:	46d1      	mov	r9, sl
 8009a54:	2212      	movs	r2, #18
 8009a56:	9108      	str	r1, [sp, #32]
 8009a58:	e7cf      	b.n	80099fa <_dtoa_r+0x23a>
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	9207      	str	r2, [sp, #28]
 8009a5e:	e7f5      	b.n	8009a4c <_dtoa_r+0x28c>
 8009a60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a64:	46d1      	mov	r9, sl
 8009a66:	4652      	mov	r2, sl
 8009a68:	e7c7      	b.n	80099fa <_dtoa_r+0x23a>
 8009a6a:	3101      	adds	r1, #1
 8009a6c:	0040      	lsls	r0, r0, #1
 8009a6e:	e7c7      	b.n	8009a00 <_dtoa_r+0x240>
 8009a70:	636f4361 	.word	0x636f4361
 8009a74:	3fd287a7 	.word	0x3fd287a7
 8009a78:	8b60c8b3 	.word	0x8b60c8b3
 8009a7c:	3fc68a28 	.word	0x3fc68a28
 8009a80:	509f79fb 	.word	0x509f79fb
 8009a84:	3fd34413 	.word	0x3fd34413
 8009a88:	08020fbe 	.word	0x08020fbe
 8009a8c:	08020fd5 	.word	0x08020fd5
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	08020fba 	.word	0x08020fba
 8009a98:	08020fb1 	.word	0x08020fb1
 8009a9c:	08020f89 	.word	0x08020f89
 8009aa0:	080210c0 	.word	0x080210c0
 8009aa4:	0802102d 	.word	0x0802102d
 8009aa8:	69f2      	ldr	r2, [r6, #28]
 8009aaa:	9901      	ldr	r1, [sp, #4]
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	f1b9 0f0e 	cmp.w	r9, #14
 8009ab2:	d86c      	bhi.n	8009b8e <_dtoa_r+0x3ce>
 8009ab4:	2c00      	cmp	r4, #0
 8009ab6:	d06a      	beq.n	8009b8e <_dtoa_r+0x3ce>
 8009ab8:	f1bb 0f00 	cmp.w	fp, #0
 8009abc:	f340 80a0 	ble.w	8009c00 <_dtoa_r+0x440>
 8009ac0:	4ac1      	ldr	r2, [pc, #772]	; (8009dc8 <_dtoa_r+0x608>)
 8009ac2:	f00b 010f 	and.w	r1, fp, #15
 8009ac6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009aca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ace:	ed92 7b00 	vldr	d7, [r2]
 8009ad2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8009ad6:	f000 8087 	beq.w	8009be8 <_dtoa_r+0x428>
 8009ada:	49bc      	ldr	r1, [pc, #752]	; (8009dcc <_dtoa_r+0x60c>)
 8009adc:	ed91 6b08 	vldr	d6, [r1, #32]
 8009ae0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009ae4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009ae8:	f002 020f 	and.w	r2, r2, #15
 8009aec:	2103      	movs	r1, #3
 8009aee:	48b7      	ldr	r0, [pc, #732]	; (8009dcc <_dtoa_r+0x60c>)
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	d17b      	bne.n	8009bec <_dtoa_r+0x42c>
 8009af4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009af8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009afc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	f000 80a0 	beq.w	8009c4c <_dtoa_r+0x48c>
 8009b0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009b10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b18:	f140 8098 	bpl.w	8009c4c <_dtoa_r+0x48c>
 8009b1c:	f1b9 0f00 	cmp.w	r9, #0
 8009b20:	f000 8094 	beq.w	8009c4c <_dtoa_r+0x48c>
 8009b24:	f1ba 0f00 	cmp.w	sl, #0
 8009b28:	dd2f      	ble.n	8009b8a <_dtoa_r+0x3ca>
 8009b2a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b32:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b36:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	4654      	mov	r4, sl
 8009b3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b42:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009b46:	ee07 1a90 	vmov	s15, r1
 8009b4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b4e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009b52:	ee15 7a90 	vmov	r7, s11
 8009b56:	ec51 0b15 	vmov	r0, r1, d5
 8009b5a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d177      	bne.n	8009c52 <_dtoa_r+0x492>
 8009b62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b6a:	ec41 0b17 	vmov	d7, r0, r1
 8009b6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b76:	f300 826a 	bgt.w	800a04e <_dtoa_r+0x88e>
 8009b7a:	eeb1 7b47 	vneg.f64	d7, d7
 8009b7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	f100 8260 	bmi.w	800a04a <_dtoa_r+0x88a>
 8009b8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	f2c0 811d 	blt.w	8009dd0 <_dtoa_r+0x610>
 8009b96:	f1bb 0f0e 	cmp.w	fp, #14
 8009b9a:	f300 8119 	bgt.w	8009dd0 <_dtoa_r+0x610>
 8009b9e:	4b8a      	ldr	r3, [pc, #552]	; (8009dc8 <_dtoa_r+0x608>)
 8009ba0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ba4:	ed93 6b00 	vldr	d6, [r3]
 8009ba8:	9b08      	ldr	r3, [sp, #32]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f280 80b7 	bge.w	8009d1e <_dtoa_r+0x55e>
 8009bb0:	f1b9 0f00 	cmp.w	r9, #0
 8009bb4:	f300 80b3 	bgt.w	8009d1e <_dtoa_r+0x55e>
 8009bb8:	f040 8246 	bne.w	800a048 <_dtoa_r+0x888>
 8009bbc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009bc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009bc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	464c      	mov	r4, r9
 8009bd2:	464f      	mov	r7, r9
 8009bd4:	f280 821c 	bge.w	800a010 <_dtoa_r+0x850>
 8009bd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bdc:	2331      	movs	r3, #49	; 0x31
 8009bde:	f808 3b01 	strb.w	r3, [r8], #1
 8009be2:	f10b 0b01 	add.w	fp, fp, #1
 8009be6:	e218      	b.n	800a01a <_dtoa_r+0x85a>
 8009be8:	2102      	movs	r1, #2
 8009bea:	e780      	b.n	8009aee <_dtoa_r+0x32e>
 8009bec:	07d4      	lsls	r4, r2, #31
 8009bee:	d504      	bpl.n	8009bfa <_dtoa_r+0x43a>
 8009bf0:	ed90 6b00 	vldr	d6, [r0]
 8009bf4:	3101      	adds	r1, #1
 8009bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bfa:	1052      	asrs	r2, r2, #1
 8009bfc:	3008      	adds	r0, #8
 8009bfe:	e777      	b.n	8009af0 <_dtoa_r+0x330>
 8009c00:	d022      	beq.n	8009c48 <_dtoa_r+0x488>
 8009c02:	f1cb 0200 	rsb	r2, fp, #0
 8009c06:	4970      	ldr	r1, [pc, #448]	; (8009dc8 <_dtoa_r+0x608>)
 8009c08:	f002 000f 	and.w	r0, r2, #15
 8009c0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009c10:	ed91 7b00 	vldr	d7, [r1]
 8009c14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009c18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c1c:	486b      	ldr	r0, [pc, #428]	; (8009dcc <_dtoa_r+0x60c>)
 8009c1e:	1112      	asrs	r2, r2, #4
 8009c20:	2400      	movs	r4, #0
 8009c22:	2102      	movs	r1, #2
 8009c24:	b92a      	cbnz	r2, 8009c32 <_dtoa_r+0x472>
 8009c26:	2c00      	cmp	r4, #0
 8009c28:	f43f af6a 	beq.w	8009b00 <_dtoa_r+0x340>
 8009c2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c30:	e766      	b.n	8009b00 <_dtoa_r+0x340>
 8009c32:	07d7      	lsls	r7, r2, #31
 8009c34:	d505      	bpl.n	8009c42 <_dtoa_r+0x482>
 8009c36:	ed90 6b00 	vldr	d6, [r0]
 8009c3a:	3101      	adds	r1, #1
 8009c3c:	2401      	movs	r4, #1
 8009c3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c42:	1052      	asrs	r2, r2, #1
 8009c44:	3008      	adds	r0, #8
 8009c46:	e7ed      	b.n	8009c24 <_dtoa_r+0x464>
 8009c48:	2102      	movs	r1, #2
 8009c4a:	e759      	b.n	8009b00 <_dtoa_r+0x340>
 8009c4c:	465a      	mov	r2, fp
 8009c4e:	464c      	mov	r4, r9
 8009c50:	e775      	b.n	8009b3e <_dtoa_r+0x37e>
 8009c52:	ec41 0b17 	vmov	d7, r0, r1
 8009c56:	495c      	ldr	r1, [pc, #368]	; (8009dc8 <_dtoa_r+0x608>)
 8009c58:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009c5c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009c60:	9901      	ldr	r1, [sp, #4]
 8009c62:	440c      	add	r4, r1
 8009c64:	9907      	ldr	r1, [sp, #28]
 8009c66:	b351      	cbz	r1, 8009cbe <_dtoa_r+0x4fe>
 8009c68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009c6c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009c70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c74:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c84:	ee14 1a90 	vmov	r1, s9
 8009c88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c8c:	3130      	adds	r1, #48	; 0x30
 8009c8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9a:	f808 1b01 	strb.w	r1, [r8], #1
 8009c9e:	d439      	bmi.n	8009d14 <_dtoa_r+0x554>
 8009ca0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009ca4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cac:	d472      	bmi.n	8009d94 <_dtoa_r+0x5d4>
 8009cae:	45a0      	cmp	r8, r4
 8009cb0:	f43f af6b 	beq.w	8009b8a <_dtoa_r+0x3ca>
 8009cb4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009cb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009cbc:	e7e0      	b.n	8009c80 <_dtoa_r+0x4c0>
 8009cbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009ccc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009cd0:	ee14 1a90 	vmov	r1, s9
 8009cd4:	3130      	adds	r1, #48	; 0x30
 8009cd6:	f808 1b01 	strb.w	r1, [r8], #1
 8009cda:	45a0      	cmp	r8, r4
 8009cdc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ce0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ce4:	d118      	bne.n	8009d18 <_dtoa_r+0x558>
 8009ce6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009cea:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009cee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf6:	dc4d      	bgt.n	8009d94 <_dtoa_r+0x5d4>
 8009cf8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009cfc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	f57f af41 	bpl.w	8009b8a <_dtoa_r+0x3ca>
 8009d08:	4680      	mov	r8, r0
 8009d0a:	3801      	subs	r0, #1
 8009d0c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009d10:	2b30      	cmp	r3, #48	; 0x30
 8009d12:	d0f9      	beq.n	8009d08 <_dtoa_r+0x548>
 8009d14:	4693      	mov	fp, r2
 8009d16:	e02a      	b.n	8009d6e <_dtoa_r+0x5ae>
 8009d18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d1c:	e7d6      	b.n	8009ccc <_dtoa_r+0x50c>
 8009d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009d26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d2a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d2e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d32:	ee15 3a10 	vmov	r3, s10
 8009d36:	3330      	adds	r3, #48	; 0x30
 8009d38:	f808 3b01 	strb.w	r3, [r8], #1
 8009d3c:	9b01      	ldr	r3, [sp, #4]
 8009d3e:	eba8 0303 	sub.w	r3, r8, r3
 8009d42:	4599      	cmp	r9, r3
 8009d44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009d48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009d4c:	d133      	bne.n	8009db6 <_dtoa_r+0x5f6>
 8009d4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5a:	dc1a      	bgt.n	8009d92 <_dtoa_r+0x5d2>
 8009d5c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d64:	d103      	bne.n	8009d6e <_dtoa_r+0x5ae>
 8009d66:	ee15 3a10 	vmov	r3, s10
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d411      	bmi.n	8009d92 <_dtoa_r+0x5d2>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4630      	mov	r0, r6
 8009d72:	f000 fbd1 	bl	800a518 <_Bfree>
 8009d76:	2300      	movs	r3, #0
 8009d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d7a:	f888 3000 	strb.w	r3, [r8]
 8009d7e:	f10b 0301 	add.w	r3, fp, #1
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f43f ad69 	beq.w	800985e <_dtoa_r+0x9e>
 8009d8c:	f8c3 8000 	str.w	r8, [r3]
 8009d90:	e565      	b.n	800985e <_dtoa_r+0x9e>
 8009d92:	465a      	mov	r2, fp
 8009d94:	4643      	mov	r3, r8
 8009d96:	4698      	mov	r8, r3
 8009d98:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009d9c:	2939      	cmp	r1, #57	; 0x39
 8009d9e:	d106      	bne.n	8009dae <_dtoa_r+0x5ee>
 8009da0:	9901      	ldr	r1, [sp, #4]
 8009da2:	4299      	cmp	r1, r3
 8009da4:	d1f7      	bne.n	8009d96 <_dtoa_r+0x5d6>
 8009da6:	9801      	ldr	r0, [sp, #4]
 8009da8:	2130      	movs	r1, #48	; 0x30
 8009daa:	3201      	adds	r2, #1
 8009dac:	7001      	strb	r1, [r0, #0]
 8009dae:	7819      	ldrb	r1, [r3, #0]
 8009db0:	3101      	adds	r1, #1
 8009db2:	7019      	strb	r1, [r3, #0]
 8009db4:	e7ae      	b.n	8009d14 <_dtoa_r+0x554>
 8009db6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009dba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	d1b2      	bne.n	8009d2a <_dtoa_r+0x56a>
 8009dc4:	e7d3      	b.n	8009d6e <_dtoa_r+0x5ae>
 8009dc6:	bf00      	nop
 8009dc8:	080210c0 	.word	0x080210c0
 8009dcc:	08021098 	.word	0x08021098
 8009dd0:	9907      	ldr	r1, [sp, #28]
 8009dd2:	2900      	cmp	r1, #0
 8009dd4:	f000 80d0 	beq.w	8009f78 <_dtoa_r+0x7b8>
 8009dd8:	9906      	ldr	r1, [sp, #24]
 8009dda:	2901      	cmp	r1, #1
 8009ddc:	f300 80b4 	bgt.w	8009f48 <_dtoa_r+0x788>
 8009de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de2:	2900      	cmp	r1, #0
 8009de4:	f000 80ac 	beq.w	8009f40 <_dtoa_r+0x780>
 8009de8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009dec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009df0:	461c      	mov	r4, r3
 8009df2:	9309      	str	r3, [sp, #36]	; 0x24
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	4413      	add	r3, r2
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	9b05      	ldr	r3, [sp, #20]
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	4413      	add	r3, r2
 8009e00:	4630      	mov	r0, r6
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	f000 fc88 	bl	800a718 <__i2b>
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	f1b8 0f00 	cmp.w	r8, #0
 8009e10:	d00d      	beq.n	8009e2e <_dtoa_r+0x66e>
 8009e12:	9a05      	ldr	r2, [sp, #20]
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	dd0a      	ble.n	8009e2e <_dtoa_r+0x66e>
 8009e18:	4542      	cmp	r2, r8
 8009e1a:	9904      	ldr	r1, [sp, #16]
 8009e1c:	bfa8      	it	ge
 8009e1e:	4642      	movge	r2, r8
 8009e20:	1a89      	subs	r1, r1, r2
 8009e22:	9104      	str	r1, [sp, #16]
 8009e24:	9905      	ldr	r1, [sp, #20]
 8009e26:	eba8 0802 	sub.w	r8, r8, r2
 8009e2a:	1a8a      	subs	r2, r1, r2
 8009e2c:	9205      	str	r2, [sp, #20]
 8009e2e:	b303      	cbz	r3, 8009e72 <_dtoa_r+0x6b2>
 8009e30:	9a07      	ldr	r2, [sp, #28]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	f000 80a5 	beq.w	8009f82 <_dtoa_r+0x7c2>
 8009e38:	2c00      	cmp	r4, #0
 8009e3a:	dd13      	ble.n	8009e64 <_dtoa_r+0x6a4>
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4630      	mov	r0, r6
 8009e42:	930d      	str	r3, [sp, #52]	; 0x34
 8009e44:	f000 fd28 	bl	800a898 <__pow5mult>
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f000 fc78 	bl	800a744 <__multiply>
 8009e54:	4629      	mov	r1, r5
 8009e56:	9009      	str	r0, [sp, #36]	; 0x24
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 fb5d 	bl	800a518 <_Bfree>
 8009e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e62:	4615      	mov	r5, r2
 8009e64:	1b1a      	subs	r2, r3, r4
 8009e66:	d004      	beq.n	8009e72 <_dtoa_r+0x6b2>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f000 fd14 	bl	800a898 <__pow5mult>
 8009e70:	4605      	mov	r5, r0
 8009e72:	2101      	movs	r1, #1
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 fc4f 	bl	800a718 <__i2b>
 8009e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	f340 8081 	ble.w	8009f86 <_dtoa_r+0x7c6>
 8009e84:	461a      	mov	r2, r3
 8009e86:	4601      	mov	r1, r0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 fd05 	bl	800a898 <__pow5mult>
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	4604      	mov	r4, r0
 8009e94:	dd7a      	ble.n	8009f8c <_dtoa_r+0x7cc>
 8009e96:	2300      	movs	r3, #0
 8009e98:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9a:	6922      	ldr	r2, [r4, #16]
 8009e9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ea0:	6910      	ldr	r0, [r2, #16]
 8009ea2:	f000 fbeb 	bl	800a67c <__hi0bits>
 8009ea6:	f1c0 0020 	rsb	r0, r0, #32
 8009eaa:	9b05      	ldr	r3, [sp, #20]
 8009eac:	4418      	add	r0, r3
 8009eae:	f010 001f 	ands.w	r0, r0, #31
 8009eb2:	f000 8093 	beq.w	8009fdc <_dtoa_r+0x81c>
 8009eb6:	f1c0 0220 	rsb	r2, r0, #32
 8009eba:	2a04      	cmp	r2, #4
 8009ebc:	f340 8085 	ble.w	8009fca <_dtoa_r+0x80a>
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	f1c0 001c 	rsb	r0, r0, #28
 8009ec6:	4403      	add	r3, r0
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	9b05      	ldr	r3, [sp, #20]
 8009ecc:	4480      	add	r8, r0
 8009ece:	4403      	add	r3, r0
 8009ed0:	9305      	str	r3, [sp, #20]
 8009ed2:	9b04      	ldr	r3, [sp, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	dd05      	ble.n	8009ee4 <_dtoa_r+0x724>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	461a      	mov	r2, r3
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 fd35 	bl	800a94c <__lshift>
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	9b05      	ldr	r3, [sp, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	dd05      	ble.n	8009ef6 <_dtoa_r+0x736>
 8009eea:	4621      	mov	r1, r4
 8009eec:	461a      	mov	r2, r3
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f000 fd2c 	bl	800a94c <__lshift>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d071      	beq.n	8009fe0 <_dtoa_r+0x820>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 fd90 	bl	800aa24 <__mcmp>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	da6b      	bge.n	8009fe0 <_dtoa_r+0x820>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	220a      	movs	r2, #10
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 fb24 	bl	800a55c <__multadd>
 8009f14:	9b07      	ldr	r3, [sp, #28]
 8009f16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8197 	beq.w	800a250 <_dtoa_r+0xa90>
 8009f22:	4639      	mov	r1, r7
 8009f24:	2300      	movs	r3, #0
 8009f26:	220a      	movs	r2, #10
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 fb17 	bl	800a55c <__multadd>
 8009f2e:	f1ba 0f00 	cmp.w	sl, #0
 8009f32:	4607      	mov	r7, r0
 8009f34:	f300 8093 	bgt.w	800a05e <_dtoa_r+0x89e>
 8009f38:	9b06      	ldr	r3, [sp, #24]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	dc57      	bgt.n	8009fee <_dtoa_r+0x82e>
 8009f3e:	e08e      	b.n	800a05e <_dtoa_r+0x89e>
 8009f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f46:	e751      	b.n	8009dec <_dtoa_r+0x62c>
 8009f48:	f109 34ff 	add.w	r4, r9, #4294967295
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	bfbf      	itttt	lt
 8009f50:	1ae2      	sublt	r2, r4, r3
 8009f52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f54:	189b      	addlt	r3, r3, r2
 8009f56:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f58:	bfae      	itee	ge
 8009f5a:	1b1c      	subge	r4, r3, r4
 8009f5c:	4623      	movlt	r3, r4
 8009f5e:	2400      	movlt	r4, #0
 8009f60:	f1b9 0f00 	cmp.w	r9, #0
 8009f64:	bfb5      	itete	lt
 8009f66:	9a04      	ldrlt	r2, [sp, #16]
 8009f68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009f6c:	eba2 0809 	sublt.w	r8, r2, r9
 8009f70:	464a      	movge	r2, r9
 8009f72:	bfb8      	it	lt
 8009f74:	2200      	movlt	r2, #0
 8009f76:	e73c      	b.n	8009df2 <_dtoa_r+0x632>
 8009f78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f7c:	9f07      	ldr	r7, [sp, #28]
 8009f7e:	461c      	mov	r4, r3
 8009f80:	e744      	b.n	8009e0c <_dtoa_r+0x64c>
 8009f82:	461a      	mov	r2, r3
 8009f84:	e770      	b.n	8009e68 <_dtoa_r+0x6a8>
 8009f86:	9b06      	ldr	r3, [sp, #24]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	dc18      	bgt.n	8009fbe <_dtoa_r+0x7fe>
 8009f8c:	9b02      	ldr	r3, [sp, #8]
 8009f8e:	b9b3      	cbnz	r3, 8009fbe <_dtoa_r+0x7fe>
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009f96:	b9a2      	cbnz	r2, 8009fc2 <_dtoa_r+0x802>
 8009f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f9c:	0d12      	lsrs	r2, r2, #20
 8009f9e:	0512      	lsls	r2, r2, #20
 8009fa0:	b18a      	cbz	r2, 8009fc6 <_dtoa_r+0x806>
 8009fa2:	9b04      	ldr	r3, [sp, #16]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	3301      	adds	r3, #1
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	2301      	movs	r3, #1
 8009fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f47f af70 	bne.w	8009e9a <_dtoa_r+0x6da>
 8009fba:	2001      	movs	r0, #1
 8009fbc:	e775      	b.n	8009eaa <_dtoa_r+0x6ea>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e7f6      	b.n	8009fb0 <_dtoa_r+0x7f0>
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	e7f4      	b.n	8009fb0 <_dtoa_r+0x7f0>
 8009fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fc8:	e7f3      	b.n	8009fb2 <_dtoa_r+0x7f2>
 8009fca:	d082      	beq.n	8009ed2 <_dtoa_r+0x712>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	321c      	adds	r2, #28
 8009fd0:	4413      	add	r3, r2
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	9b05      	ldr	r3, [sp, #20]
 8009fd6:	4490      	add	r8, r2
 8009fd8:	4413      	add	r3, r2
 8009fda:	e779      	b.n	8009ed0 <_dtoa_r+0x710>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	e7f5      	b.n	8009fcc <_dtoa_r+0x80c>
 8009fe0:	f1b9 0f00 	cmp.w	r9, #0
 8009fe4:	dc36      	bgt.n	800a054 <_dtoa_r+0x894>
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	dd33      	ble.n	800a054 <_dtoa_r+0x894>
 8009fec:	46ca      	mov	sl, r9
 8009fee:	f1ba 0f00 	cmp.w	sl, #0
 8009ff2:	d10d      	bne.n	800a010 <_dtoa_r+0x850>
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	4653      	mov	r3, sl
 8009ff8:	2205      	movs	r2, #5
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f000 faae 	bl	800a55c <__multadd>
 800a000:	4601      	mov	r1, r0
 800a002:	4604      	mov	r4, r0
 800a004:	4628      	mov	r0, r5
 800a006:	f000 fd0d 	bl	800aa24 <__mcmp>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f73f ade4 	bgt.w	8009bd8 <_dtoa_r+0x418>
 800a010:	9b08      	ldr	r3, [sp, #32]
 800a012:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a016:	ea6f 0b03 	mvn.w	fp, r3
 800a01a:	f04f 0900 	mov.w	r9, #0
 800a01e:	4621      	mov	r1, r4
 800a020:	4630      	mov	r0, r6
 800a022:	f000 fa79 	bl	800a518 <_Bfree>
 800a026:	2f00      	cmp	r7, #0
 800a028:	f43f aea1 	beq.w	8009d6e <_dtoa_r+0x5ae>
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	d005      	beq.n	800a03e <_dtoa_r+0x87e>
 800a032:	45b9      	cmp	r9, r7
 800a034:	d003      	beq.n	800a03e <_dtoa_r+0x87e>
 800a036:	4649      	mov	r1, r9
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 fa6d 	bl	800a518 <_Bfree>
 800a03e:	4639      	mov	r1, r7
 800a040:	4630      	mov	r0, r6
 800a042:	f000 fa69 	bl	800a518 <_Bfree>
 800a046:	e692      	b.n	8009d6e <_dtoa_r+0x5ae>
 800a048:	2400      	movs	r4, #0
 800a04a:	4627      	mov	r7, r4
 800a04c:	e7e0      	b.n	800a010 <_dtoa_r+0x850>
 800a04e:	4693      	mov	fp, r2
 800a050:	4627      	mov	r7, r4
 800a052:	e5c1      	b.n	8009bd8 <_dtoa_r+0x418>
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	46ca      	mov	sl, r9
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8100 	beq.w	800a25e <_dtoa_r+0xa9e>
 800a05e:	f1b8 0f00 	cmp.w	r8, #0
 800a062:	dd05      	ble.n	800a070 <_dtoa_r+0x8b0>
 800a064:	4639      	mov	r1, r7
 800a066:	4642      	mov	r2, r8
 800a068:	4630      	mov	r0, r6
 800a06a:	f000 fc6f 	bl	800a94c <__lshift>
 800a06e:	4607      	mov	r7, r0
 800a070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a072:	2b00      	cmp	r3, #0
 800a074:	d05d      	beq.n	800a132 <_dtoa_r+0x972>
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 fa0d 	bl	800a498 <_Balloc>
 800a07e:	4680      	mov	r8, r0
 800a080:	b928      	cbnz	r0, 800a08e <_dtoa_r+0x8ce>
 800a082:	4b82      	ldr	r3, [pc, #520]	; (800a28c <_dtoa_r+0xacc>)
 800a084:	4602      	mov	r2, r0
 800a086:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a08a:	f7ff bbb1 	b.w	80097f0 <_dtoa_r+0x30>
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	3202      	adds	r2, #2
 800a092:	0092      	lsls	r2, r2, #2
 800a094:	f107 010c 	add.w	r1, r7, #12
 800a098:	300c      	adds	r0, #12
 800a09a:	f001 ff3f 	bl	800bf1c <memcpy>
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4641      	mov	r1, r8
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f000 fc52 	bl	800a94c <__lshift>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	4453      	add	r3, sl
 800a0b2:	9308      	str	r3, [sp, #32]
 800a0b4:	9b02      	ldr	r3, [sp, #8]
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	46b9      	mov	r9, r7
 800a0bc:	9307      	str	r3, [sp, #28]
 800a0be:	4607      	mov	r7, r0
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	f7ff faef 	bl	80096ac <quorem>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	3330      	adds	r3, #48	; 0x30
 800a0d2:	9005      	str	r0, [sp, #20]
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0da:	f000 fca3 	bl	800aa24 <__mcmp>
 800a0de:	463a      	mov	r2, r7
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f000 fcb9 	bl	800aa5c <__mdiff>
 800a0ea:	68c2      	ldr	r2, [r0, #12]
 800a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	bb0a      	cbnz	r2, 800a136 <_dtoa_r+0x976>
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f000 fc95 	bl	800aa24 <__mcmp>
 800a0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	4641      	mov	r1, r8
 800a100:	4630      	mov	r0, r6
 800a102:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a106:	f000 fa07 	bl	800a518 <_Bfree>
 800a10a:	9b06      	ldr	r3, [sp, #24]
 800a10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a10e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a112:	ea43 0102 	orr.w	r1, r3, r2
 800a116:	9b07      	ldr	r3, [sp, #28]
 800a118:	4319      	orrs	r1, r3
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	d10d      	bne.n	800a13a <_dtoa_r+0x97a>
 800a11e:	2b39      	cmp	r3, #57	; 0x39
 800a120:	d029      	beq.n	800a176 <_dtoa_r+0x9b6>
 800a122:	f1ba 0f00 	cmp.w	sl, #0
 800a126:	dd01      	ble.n	800a12c <_dtoa_r+0x96c>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	3331      	adds	r3, #49	; 0x31
 800a12c:	9a02      	ldr	r2, [sp, #8]
 800a12e:	7013      	strb	r3, [r2, #0]
 800a130:	e775      	b.n	800a01e <_dtoa_r+0x85e>
 800a132:	4638      	mov	r0, r7
 800a134:	e7b8      	b.n	800a0a8 <_dtoa_r+0x8e8>
 800a136:	2201      	movs	r2, #1
 800a138:	e7e1      	b.n	800a0fe <_dtoa_r+0x93e>
 800a13a:	f1ba 0f00 	cmp.w	sl, #0
 800a13e:	db06      	blt.n	800a14e <_dtoa_r+0x98e>
 800a140:	9906      	ldr	r1, [sp, #24]
 800a142:	ea41 0a0a 	orr.w	sl, r1, sl
 800a146:	9907      	ldr	r1, [sp, #28]
 800a148:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a14c:	d120      	bne.n	800a190 <_dtoa_r+0x9d0>
 800a14e:	2a00      	cmp	r2, #0
 800a150:	ddec      	ble.n	800a12c <_dtoa_r+0x96c>
 800a152:	4629      	mov	r1, r5
 800a154:	2201      	movs	r2, #1
 800a156:	4630      	mov	r0, r6
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	f000 fbf7 	bl	800a94c <__lshift>
 800a15e:	4621      	mov	r1, r4
 800a160:	4605      	mov	r5, r0
 800a162:	f000 fc5f 	bl	800aa24 <__mcmp>
 800a166:	2800      	cmp	r0, #0
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	dc02      	bgt.n	800a172 <_dtoa_r+0x9b2>
 800a16c:	d1de      	bne.n	800a12c <_dtoa_r+0x96c>
 800a16e:	07da      	lsls	r2, r3, #31
 800a170:	d5dc      	bpl.n	800a12c <_dtoa_r+0x96c>
 800a172:	2b39      	cmp	r3, #57	; 0x39
 800a174:	d1d8      	bne.n	800a128 <_dtoa_r+0x968>
 800a176:	9a02      	ldr	r2, [sp, #8]
 800a178:	2339      	movs	r3, #57	; 0x39
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	4643      	mov	r3, r8
 800a17e:	4698      	mov	r8, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a186:	2a39      	cmp	r2, #57	; 0x39
 800a188:	d051      	beq.n	800a22e <_dtoa_r+0xa6e>
 800a18a:	3201      	adds	r2, #1
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	e746      	b.n	800a01e <_dtoa_r+0x85e>
 800a190:	2a00      	cmp	r2, #0
 800a192:	dd03      	ble.n	800a19c <_dtoa_r+0x9dc>
 800a194:	2b39      	cmp	r3, #57	; 0x39
 800a196:	d0ee      	beq.n	800a176 <_dtoa_r+0x9b6>
 800a198:	3301      	adds	r3, #1
 800a19a:	e7c7      	b.n	800a12c <_dtoa_r+0x96c>
 800a19c:	9a04      	ldr	r2, [sp, #16]
 800a19e:	9908      	ldr	r1, [sp, #32]
 800a1a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1a4:	428a      	cmp	r2, r1
 800a1a6:	d02b      	beq.n	800a200 <_dtoa_r+0xa40>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	220a      	movs	r2, #10
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f000 f9d4 	bl	800a55c <__multadd>
 800a1b4:	45b9      	cmp	r9, r7
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	f04f 0300 	mov.w	r3, #0
 800a1bc:	f04f 020a 	mov.w	r2, #10
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	d107      	bne.n	800a1d6 <_dtoa_r+0xa16>
 800a1c6:	f000 f9c9 	bl	800a55c <__multadd>
 800a1ca:	4681      	mov	r9, r0
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	e774      	b.n	800a0c0 <_dtoa_r+0x900>
 800a1d6:	f000 f9c1 	bl	800a55c <__multadd>
 800a1da:	4639      	mov	r1, r7
 800a1dc:	4681      	mov	r9, r0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f000 f9ba 	bl	800a55c <__multadd>
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	e7f0      	b.n	800a1ce <_dtoa_r+0xa0e>
 800a1ec:	f1ba 0f00 	cmp.w	sl, #0
 800a1f0:	9a01      	ldr	r2, [sp, #4]
 800a1f2:	bfcc      	ite	gt
 800a1f4:	46d0      	movgt	r8, sl
 800a1f6:	f04f 0801 	movle.w	r8, #1
 800a1fa:	4490      	add	r8, r2
 800a1fc:	f04f 0900 	mov.w	r9, #0
 800a200:	4629      	mov	r1, r5
 800a202:	2201      	movs	r2, #1
 800a204:	4630      	mov	r0, r6
 800a206:	9302      	str	r3, [sp, #8]
 800a208:	f000 fba0 	bl	800a94c <__lshift>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4605      	mov	r5, r0
 800a210:	f000 fc08 	bl	800aa24 <__mcmp>
 800a214:	2800      	cmp	r0, #0
 800a216:	dcb1      	bgt.n	800a17c <_dtoa_r+0x9bc>
 800a218:	d102      	bne.n	800a220 <_dtoa_r+0xa60>
 800a21a:	9b02      	ldr	r3, [sp, #8]
 800a21c:	07db      	lsls	r3, r3, #31
 800a21e:	d4ad      	bmi.n	800a17c <_dtoa_r+0x9bc>
 800a220:	4643      	mov	r3, r8
 800a222:	4698      	mov	r8, r3
 800a224:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a228:	2a30      	cmp	r2, #48	; 0x30
 800a22a:	d0fa      	beq.n	800a222 <_dtoa_r+0xa62>
 800a22c:	e6f7      	b.n	800a01e <_dtoa_r+0x85e>
 800a22e:	9a01      	ldr	r2, [sp, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d1a4      	bne.n	800a17e <_dtoa_r+0x9be>
 800a234:	f10b 0b01 	add.w	fp, fp, #1
 800a238:	2331      	movs	r3, #49	; 0x31
 800a23a:	e778      	b.n	800a12e <_dtoa_r+0x96e>
 800a23c:	4b14      	ldr	r3, [pc, #80]	; (800a290 <_dtoa_r+0xad0>)
 800a23e:	f7ff bb2a 	b.w	8009896 <_dtoa_r+0xd6>
 800a242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a244:	2b00      	cmp	r3, #0
 800a246:	f47f ab05 	bne.w	8009854 <_dtoa_r+0x94>
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <_dtoa_r+0xad4>)
 800a24c:	f7ff bb23 	b.w	8009896 <_dtoa_r+0xd6>
 800a250:	f1ba 0f00 	cmp.w	sl, #0
 800a254:	dc03      	bgt.n	800a25e <_dtoa_r+0xa9e>
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	f73f aec8 	bgt.w	8009fee <_dtoa_r+0x82e>
 800a25e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a262:	4621      	mov	r1, r4
 800a264:	4628      	mov	r0, r5
 800a266:	f7ff fa21 	bl	80096ac <quorem>
 800a26a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a26e:	f808 3b01 	strb.w	r3, [r8], #1
 800a272:	9a01      	ldr	r2, [sp, #4]
 800a274:	eba8 0202 	sub.w	r2, r8, r2
 800a278:	4592      	cmp	sl, r2
 800a27a:	ddb7      	ble.n	800a1ec <_dtoa_r+0xa2c>
 800a27c:	4629      	mov	r1, r5
 800a27e:	2300      	movs	r3, #0
 800a280:	220a      	movs	r2, #10
 800a282:	4630      	mov	r0, r6
 800a284:	f000 f96a 	bl	800a55c <__multadd>
 800a288:	4605      	mov	r5, r0
 800a28a:	e7ea      	b.n	800a262 <_dtoa_r+0xaa2>
 800a28c:	0802102d 	.word	0x0802102d
 800a290:	08020f88 	.word	0x08020f88
 800a294:	08020fb1 	.word	0x08020fb1

0800a298 <_free_r>:
 800a298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a29a:	2900      	cmp	r1, #0
 800a29c:	d044      	beq.n	800a328 <_free_r+0x90>
 800a29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a2:	9001      	str	r0, [sp, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2aa:	bfb8      	it	lt
 800a2ac:	18e4      	addlt	r4, r4, r3
 800a2ae:	f000 f8e7 	bl	800a480 <__malloc_lock>
 800a2b2:	4a1e      	ldr	r2, [pc, #120]	; (800a32c <_free_r+0x94>)
 800a2b4:	9801      	ldr	r0, [sp, #4]
 800a2b6:	6813      	ldr	r3, [r2, #0]
 800a2b8:	b933      	cbnz	r3, 800a2c8 <_free_r+0x30>
 800a2ba:	6063      	str	r3, [r4, #4]
 800a2bc:	6014      	str	r4, [r2, #0]
 800a2be:	b003      	add	sp, #12
 800a2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2c4:	f000 b8e2 	b.w	800a48c <__malloc_unlock>
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	d908      	bls.n	800a2de <_free_r+0x46>
 800a2cc:	6825      	ldr	r5, [r4, #0]
 800a2ce:	1961      	adds	r1, r4, r5
 800a2d0:	428b      	cmp	r3, r1
 800a2d2:	bf01      	itttt	eq
 800a2d4:	6819      	ldreq	r1, [r3, #0]
 800a2d6:	685b      	ldreq	r3, [r3, #4]
 800a2d8:	1949      	addeq	r1, r1, r5
 800a2da:	6021      	streq	r1, [r4, #0]
 800a2dc:	e7ed      	b.n	800a2ba <_free_r+0x22>
 800a2de:	461a      	mov	r2, r3
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	b10b      	cbz	r3, 800a2e8 <_free_r+0x50>
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d9fa      	bls.n	800a2de <_free_r+0x46>
 800a2e8:	6811      	ldr	r1, [r2, #0]
 800a2ea:	1855      	adds	r5, r2, r1
 800a2ec:	42a5      	cmp	r5, r4
 800a2ee:	d10b      	bne.n	800a308 <_free_r+0x70>
 800a2f0:	6824      	ldr	r4, [r4, #0]
 800a2f2:	4421      	add	r1, r4
 800a2f4:	1854      	adds	r4, r2, r1
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	6011      	str	r1, [r2, #0]
 800a2fa:	d1e0      	bne.n	800a2be <_free_r+0x26>
 800a2fc:	681c      	ldr	r4, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	6053      	str	r3, [r2, #4]
 800a302:	440c      	add	r4, r1
 800a304:	6014      	str	r4, [r2, #0]
 800a306:	e7da      	b.n	800a2be <_free_r+0x26>
 800a308:	d902      	bls.n	800a310 <_free_r+0x78>
 800a30a:	230c      	movs	r3, #12
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	e7d6      	b.n	800a2be <_free_r+0x26>
 800a310:	6825      	ldr	r5, [r4, #0]
 800a312:	1961      	adds	r1, r4, r5
 800a314:	428b      	cmp	r3, r1
 800a316:	bf04      	itt	eq
 800a318:	6819      	ldreq	r1, [r3, #0]
 800a31a:	685b      	ldreq	r3, [r3, #4]
 800a31c:	6063      	str	r3, [r4, #4]
 800a31e:	bf04      	itt	eq
 800a320:	1949      	addeq	r1, r1, r5
 800a322:	6021      	streq	r1, [r4, #0]
 800a324:	6054      	str	r4, [r2, #4]
 800a326:	e7ca      	b.n	800a2be <_free_r+0x26>
 800a328:	b003      	add	sp, #12
 800a32a:	bd30      	pop	{r4, r5, pc}
 800a32c:	20000618 	.word	0x20000618

0800a330 <malloc>:
 800a330:	4b02      	ldr	r3, [pc, #8]	; (800a33c <malloc+0xc>)
 800a332:	4601      	mov	r1, r0
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	f000 b823 	b.w	800a380 <_malloc_r>
 800a33a:	bf00      	nop
 800a33c:	20000070 	.word	0x20000070

0800a340 <sbrk_aligned>:
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	4e0e      	ldr	r6, [pc, #56]	; (800a37c <sbrk_aligned+0x3c>)
 800a344:	460c      	mov	r4, r1
 800a346:	6831      	ldr	r1, [r6, #0]
 800a348:	4605      	mov	r5, r0
 800a34a:	b911      	cbnz	r1, 800a352 <sbrk_aligned+0x12>
 800a34c:	f001 fdd6 	bl	800befc <_sbrk_r>
 800a350:	6030      	str	r0, [r6, #0]
 800a352:	4621      	mov	r1, r4
 800a354:	4628      	mov	r0, r5
 800a356:	f001 fdd1 	bl	800befc <_sbrk_r>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	d00a      	beq.n	800a374 <sbrk_aligned+0x34>
 800a35e:	1cc4      	adds	r4, r0, #3
 800a360:	f024 0403 	bic.w	r4, r4, #3
 800a364:	42a0      	cmp	r0, r4
 800a366:	d007      	beq.n	800a378 <sbrk_aligned+0x38>
 800a368:	1a21      	subs	r1, r4, r0
 800a36a:	4628      	mov	r0, r5
 800a36c:	f001 fdc6 	bl	800befc <_sbrk_r>
 800a370:	3001      	adds	r0, #1
 800a372:	d101      	bne.n	800a378 <sbrk_aligned+0x38>
 800a374:	f04f 34ff 	mov.w	r4, #4294967295
 800a378:	4620      	mov	r0, r4
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	2000061c 	.word	0x2000061c

0800a380 <_malloc_r>:
 800a380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a384:	1ccd      	adds	r5, r1, #3
 800a386:	f025 0503 	bic.w	r5, r5, #3
 800a38a:	3508      	adds	r5, #8
 800a38c:	2d0c      	cmp	r5, #12
 800a38e:	bf38      	it	cc
 800a390:	250c      	movcc	r5, #12
 800a392:	2d00      	cmp	r5, #0
 800a394:	4607      	mov	r7, r0
 800a396:	db01      	blt.n	800a39c <_malloc_r+0x1c>
 800a398:	42a9      	cmp	r1, r5
 800a39a:	d905      	bls.n	800a3a8 <_malloc_r+0x28>
 800a39c:	230c      	movs	r3, #12
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	2600      	movs	r6, #0
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a47c <_malloc_r+0xfc>
 800a3ac:	f000 f868 	bl	800a480 <__malloc_lock>
 800a3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b4:	461c      	mov	r4, r3
 800a3b6:	bb5c      	cbnz	r4, 800a410 <_malloc_r+0x90>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	f7ff ffc0 	bl	800a340 <sbrk_aligned>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	d155      	bne.n	800a472 <_malloc_r+0xf2>
 800a3c6:	f8d8 4000 	ldr.w	r4, [r8]
 800a3ca:	4626      	mov	r6, r4
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	d145      	bne.n	800a45c <_malloc_r+0xdc>
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	d048      	beq.n	800a466 <_malloc_r+0xe6>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4638      	mov	r0, r7
 800a3da:	eb04 0903 	add.w	r9, r4, r3
 800a3de:	f001 fd8d 	bl	800befc <_sbrk_r>
 800a3e2:	4581      	cmp	r9, r0
 800a3e4:	d13f      	bne.n	800a466 <_malloc_r+0xe6>
 800a3e6:	6821      	ldr	r1, [r4, #0]
 800a3e8:	1a6d      	subs	r5, r5, r1
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7ff ffa7 	bl	800a340 <sbrk_aligned>
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d037      	beq.n	800a466 <_malloc_r+0xe6>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	442b      	add	r3, r5
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d038      	beq.n	800a476 <_malloc_r+0xf6>
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	42a2      	cmp	r2, r4
 800a408:	d12b      	bne.n	800a462 <_malloc_r+0xe2>
 800a40a:	2200      	movs	r2, #0
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	e00f      	b.n	800a430 <_malloc_r+0xb0>
 800a410:	6822      	ldr	r2, [r4, #0]
 800a412:	1b52      	subs	r2, r2, r5
 800a414:	d41f      	bmi.n	800a456 <_malloc_r+0xd6>
 800a416:	2a0b      	cmp	r2, #11
 800a418:	d917      	bls.n	800a44a <_malloc_r+0xca>
 800a41a:	1961      	adds	r1, r4, r5
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	6025      	str	r5, [r4, #0]
 800a420:	bf18      	it	ne
 800a422:	6059      	strne	r1, [r3, #4]
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	bf08      	it	eq
 800a428:	f8c8 1000 	streq.w	r1, [r8]
 800a42c:	5162      	str	r2, [r4, r5]
 800a42e:	604b      	str	r3, [r1, #4]
 800a430:	4638      	mov	r0, r7
 800a432:	f104 060b 	add.w	r6, r4, #11
 800a436:	f000 f829 	bl	800a48c <__malloc_unlock>
 800a43a:	f026 0607 	bic.w	r6, r6, #7
 800a43e:	1d23      	adds	r3, r4, #4
 800a440:	1af2      	subs	r2, r6, r3
 800a442:	d0ae      	beq.n	800a3a2 <_malloc_r+0x22>
 800a444:	1b9b      	subs	r3, r3, r6
 800a446:	50a3      	str	r3, [r4, r2]
 800a448:	e7ab      	b.n	800a3a2 <_malloc_r+0x22>
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6862      	ldr	r2, [r4, #4]
 800a44e:	d1dd      	bne.n	800a40c <_malloc_r+0x8c>
 800a450:	f8c8 2000 	str.w	r2, [r8]
 800a454:	e7ec      	b.n	800a430 <_malloc_r+0xb0>
 800a456:	4623      	mov	r3, r4
 800a458:	6864      	ldr	r4, [r4, #4]
 800a45a:	e7ac      	b.n	800a3b6 <_malloc_r+0x36>
 800a45c:	4634      	mov	r4, r6
 800a45e:	6876      	ldr	r6, [r6, #4]
 800a460:	e7b4      	b.n	800a3cc <_malloc_r+0x4c>
 800a462:	4613      	mov	r3, r2
 800a464:	e7cc      	b.n	800a400 <_malloc_r+0x80>
 800a466:	230c      	movs	r3, #12
 800a468:	603b      	str	r3, [r7, #0]
 800a46a:	4638      	mov	r0, r7
 800a46c:	f000 f80e 	bl	800a48c <__malloc_unlock>
 800a470:	e797      	b.n	800a3a2 <_malloc_r+0x22>
 800a472:	6025      	str	r5, [r4, #0]
 800a474:	e7dc      	b.n	800a430 <_malloc_r+0xb0>
 800a476:	605b      	str	r3, [r3, #4]
 800a478:	deff      	udf	#255	; 0xff
 800a47a:	bf00      	nop
 800a47c:	20000618 	.word	0x20000618

0800a480 <__malloc_lock>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__malloc_lock+0x8>)
 800a482:	f7ff b90a 	b.w	800969a <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	20000614 	.word	0x20000614

0800a48c <__malloc_unlock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__malloc_unlock+0x8>)
 800a48e:	f7ff b905 	b.w	800969c <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	20000614 	.word	0x20000614

0800a498 <_Balloc>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	69c6      	ldr	r6, [r0, #28]
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	b976      	cbnz	r6, 800a4c0 <_Balloc+0x28>
 800a4a2:	2010      	movs	r0, #16
 800a4a4:	f7ff ff44 	bl	800a330 <malloc>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	61e0      	str	r0, [r4, #28]
 800a4ac:	b920      	cbnz	r0, 800a4b8 <_Balloc+0x20>
 800a4ae:	4b18      	ldr	r3, [pc, #96]	; (800a510 <_Balloc+0x78>)
 800a4b0:	4818      	ldr	r0, [pc, #96]	; (800a514 <_Balloc+0x7c>)
 800a4b2:	216b      	movs	r1, #107	; 0x6b
 800a4b4:	f001 fd48 	bl	800bf48 <__assert_func>
 800a4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4bc:	6006      	str	r6, [r0, #0]
 800a4be:	60c6      	str	r6, [r0, #12]
 800a4c0:	69e6      	ldr	r6, [r4, #28]
 800a4c2:	68f3      	ldr	r3, [r6, #12]
 800a4c4:	b183      	cbz	r3, 800a4e8 <_Balloc+0x50>
 800a4c6:	69e3      	ldr	r3, [r4, #28]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4ce:	b9b8      	cbnz	r0, 800a500 <_Balloc+0x68>
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a4d6:	1d72      	adds	r2, r6, #5
 800a4d8:	0092      	lsls	r2, r2, #2
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f001 fd52 	bl	800bf84 <_calloc_r>
 800a4e0:	b160      	cbz	r0, 800a4fc <_Balloc+0x64>
 800a4e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4e6:	e00e      	b.n	800a506 <_Balloc+0x6e>
 800a4e8:	2221      	movs	r2, #33	; 0x21
 800a4ea:	2104      	movs	r1, #4
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f001 fd49 	bl	800bf84 <_calloc_r>
 800a4f2:	69e3      	ldr	r3, [r4, #28]
 800a4f4:	60f0      	str	r0, [r6, #12]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e4      	bne.n	800a4c6 <_Balloc+0x2e>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	6802      	ldr	r2, [r0, #0]
 800a502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a506:	2300      	movs	r3, #0
 800a508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a50c:	e7f7      	b.n	800a4fe <_Balloc+0x66>
 800a50e:	bf00      	nop
 800a510:	08020fbe 	.word	0x08020fbe
 800a514:	0802103e 	.word	0x0802103e

0800a518 <_Bfree>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	69c6      	ldr	r6, [r0, #28]
 800a51c:	4605      	mov	r5, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	b976      	cbnz	r6, 800a540 <_Bfree+0x28>
 800a522:	2010      	movs	r0, #16
 800a524:	f7ff ff04 	bl	800a330 <malloc>
 800a528:	4602      	mov	r2, r0
 800a52a:	61e8      	str	r0, [r5, #28]
 800a52c:	b920      	cbnz	r0, 800a538 <_Bfree+0x20>
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <_Bfree+0x3c>)
 800a530:	4809      	ldr	r0, [pc, #36]	; (800a558 <_Bfree+0x40>)
 800a532:	218f      	movs	r1, #143	; 0x8f
 800a534:	f001 fd08 	bl	800bf48 <__assert_func>
 800a538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a53c:	6006      	str	r6, [r0, #0]
 800a53e:	60c6      	str	r6, [r0, #12]
 800a540:	b13c      	cbz	r4, 800a552 <_Bfree+0x3a>
 800a542:	69eb      	ldr	r3, [r5, #28]
 800a544:	6862      	ldr	r2, [r4, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a54c:	6021      	str	r1, [r4, #0]
 800a54e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	08020fbe 	.word	0x08020fbe
 800a558:	0802103e 	.word	0x0802103e

0800a55c <__multadd>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	690d      	ldr	r5, [r1, #16]
 800a562:	4607      	mov	r7, r0
 800a564:	460c      	mov	r4, r1
 800a566:	461e      	mov	r6, r3
 800a568:	f101 0c14 	add.w	ip, r1, #20
 800a56c:	2000      	movs	r0, #0
 800a56e:	f8dc 3000 	ldr.w	r3, [ip]
 800a572:	b299      	uxth	r1, r3
 800a574:	fb02 6101 	mla	r1, r2, r1, r6
 800a578:	0c1e      	lsrs	r6, r3, #16
 800a57a:	0c0b      	lsrs	r3, r1, #16
 800a57c:	fb02 3306 	mla	r3, r2, r6, r3
 800a580:	b289      	uxth	r1, r1
 800a582:	3001      	adds	r0, #1
 800a584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a588:	4285      	cmp	r5, r0
 800a58a:	f84c 1b04 	str.w	r1, [ip], #4
 800a58e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a592:	dcec      	bgt.n	800a56e <__multadd+0x12>
 800a594:	b30e      	cbz	r6, 800a5da <__multadd+0x7e>
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	42ab      	cmp	r3, r5
 800a59a:	dc19      	bgt.n	800a5d0 <__multadd+0x74>
 800a59c:	6861      	ldr	r1, [r4, #4]
 800a59e:	4638      	mov	r0, r7
 800a5a0:	3101      	adds	r1, #1
 800a5a2:	f7ff ff79 	bl	800a498 <_Balloc>
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	b928      	cbnz	r0, 800a5b6 <__multadd+0x5a>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <__multadd+0x84>)
 800a5ae:	480d      	ldr	r0, [pc, #52]	; (800a5e4 <__multadd+0x88>)
 800a5b0:	21ba      	movs	r1, #186	; 0xba
 800a5b2:	f001 fcc9 	bl	800bf48 <__assert_func>
 800a5b6:	6922      	ldr	r2, [r4, #16]
 800a5b8:	3202      	adds	r2, #2
 800a5ba:	f104 010c 	add.w	r1, r4, #12
 800a5be:	0092      	lsls	r2, r2, #2
 800a5c0:	300c      	adds	r0, #12
 800a5c2:	f001 fcab 	bl	800bf1c <memcpy>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7ff ffa5 	bl	800a518 <_Bfree>
 800a5ce:	4644      	mov	r4, r8
 800a5d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	615e      	str	r6, [r3, #20]
 800a5d8:	6125      	str	r5, [r4, #16]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	0802102d 	.word	0x0802102d
 800a5e4:	0802103e 	.word	0x0802103e

0800a5e8 <__s2b>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	4615      	mov	r5, r2
 800a5f0:	461f      	mov	r7, r3
 800a5f2:	2209      	movs	r2, #9
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	2201      	movs	r2, #1
 800a600:	429a      	cmp	r2, r3
 800a602:	db09      	blt.n	800a618 <__s2b+0x30>
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff ff47 	bl	800a498 <_Balloc>
 800a60a:	b940      	cbnz	r0, 800a61e <__s2b+0x36>
 800a60c:	4602      	mov	r2, r0
 800a60e:	4b19      	ldr	r3, [pc, #100]	; (800a674 <__s2b+0x8c>)
 800a610:	4819      	ldr	r0, [pc, #100]	; (800a678 <__s2b+0x90>)
 800a612:	21d3      	movs	r1, #211	; 0xd3
 800a614:	f001 fc98 	bl	800bf48 <__assert_func>
 800a618:	0052      	lsls	r2, r2, #1
 800a61a:	3101      	adds	r1, #1
 800a61c:	e7f0      	b.n	800a600 <__s2b+0x18>
 800a61e:	9b08      	ldr	r3, [sp, #32]
 800a620:	6143      	str	r3, [r0, #20]
 800a622:	2d09      	cmp	r5, #9
 800a624:	f04f 0301 	mov.w	r3, #1
 800a628:	6103      	str	r3, [r0, #16]
 800a62a:	dd16      	ble.n	800a65a <__s2b+0x72>
 800a62c:	f104 0909 	add.w	r9, r4, #9
 800a630:	46c8      	mov	r8, r9
 800a632:	442c      	add	r4, r5
 800a634:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a638:	4601      	mov	r1, r0
 800a63a:	3b30      	subs	r3, #48	; 0x30
 800a63c:	220a      	movs	r2, #10
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ff8c 	bl	800a55c <__multadd>
 800a644:	45a0      	cmp	r8, r4
 800a646:	d1f5      	bne.n	800a634 <__s2b+0x4c>
 800a648:	f1a5 0408 	sub.w	r4, r5, #8
 800a64c:	444c      	add	r4, r9
 800a64e:	1b2d      	subs	r5, r5, r4
 800a650:	1963      	adds	r3, r4, r5
 800a652:	42bb      	cmp	r3, r7
 800a654:	db04      	blt.n	800a660 <__s2b+0x78>
 800a656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65a:	340a      	adds	r4, #10
 800a65c:	2509      	movs	r5, #9
 800a65e:	e7f6      	b.n	800a64e <__s2b+0x66>
 800a660:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a664:	4601      	mov	r1, r0
 800a666:	3b30      	subs	r3, #48	; 0x30
 800a668:	220a      	movs	r2, #10
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7ff ff76 	bl	800a55c <__multadd>
 800a670:	e7ee      	b.n	800a650 <__s2b+0x68>
 800a672:	bf00      	nop
 800a674:	0802102d 	.word	0x0802102d
 800a678:	0802103e 	.word	0x0802103e

0800a67c <__hi0bits>:
 800a67c:	0c03      	lsrs	r3, r0, #16
 800a67e:	041b      	lsls	r3, r3, #16
 800a680:	b9d3      	cbnz	r3, 800a6b8 <__hi0bits+0x3c>
 800a682:	0400      	lsls	r0, r0, #16
 800a684:	2310      	movs	r3, #16
 800a686:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a68a:	bf04      	itt	eq
 800a68c:	0200      	lsleq	r0, r0, #8
 800a68e:	3308      	addeq	r3, #8
 800a690:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a694:	bf04      	itt	eq
 800a696:	0100      	lsleq	r0, r0, #4
 800a698:	3304      	addeq	r3, #4
 800a69a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a69e:	bf04      	itt	eq
 800a6a0:	0080      	lsleq	r0, r0, #2
 800a6a2:	3302      	addeq	r3, #2
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	db05      	blt.n	800a6b4 <__hi0bits+0x38>
 800a6a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a6ac:	f103 0301 	add.w	r3, r3, #1
 800a6b0:	bf08      	it	eq
 800a6b2:	2320      	moveq	r3, #32
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	4770      	bx	lr
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e7e4      	b.n	800a686 <__hi0bits+0xa>

0800a6bc <__lo0bits>:
 800a6bc:	6803      	ldr	r3, [r0, #0]
 800a6be:	f013 0207 	ands.w	r2, r3, #7
 800a6c2:	d00c      	beq.n	800a6de <__lo0bits+0x22>
 800a6c4:	07d9      	lsls	r1, r3, #31
 800a6c6:	d422      	bmi.n	800a70e <__lo0bits+0x52>
 800a6c8:	079a      	lsls	r2, r3, #30
 800a6ca:	bf49      	itett	mi
 800a6cc:	085b      	lsrmi	r3, r3, #1
 800a6ce:	089b      	lsrpl	r3, r3, #2
 800a6d0:	6003      	strmi	r3, [r0, #0]
 800a6d2:	2201      	movmi	r2, #1
 800a6d4:	bf5c      	itt	pl
 800a6d6:	6003      	strpl	r3, [r0, #0]
 800a6d8:	2202      	movpl	r2, #2
 800a6da:	4610      	mov	r0, r2
 800a6dc:	4770      	bx	lr
 800a6de:	b299      	uxth	r1, r3
 800a6e0:	b909      	cbnz	r1, 800a6e6 <__lo0bits+0x2a>
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	2210      	movs	r2, #16
 800a6e6:	b2d9      	uxtb	r1, r3
 800a6e8:	b909      	cbnz	r1, 800a6ee <__lo0bits+0x32>
 800a6ea:	3208      	adds	r2, #8
 800a6ec:	0a1b      	lsrs	r3, r3, #8
 800a6ee:	0719      	lsls	r1, r3, #28
 800a6f0:	bf04      	itt	eq
 800a6f2:	091b      	lsreq	r3, r3, #4
 800a6f4:	3204      	addeq	r2, #4
 800a6f6:	0799      	lsls	r1, r3, #30
 800a6f8:	bf04      	itt	eq
 800a6fa:	089b      	lsreq	r3, r3, #2
 800a6fc:	3202      	addeq	r2, #2
 800a6fe:	07d9      	lsls	r1, r3, #31
 800a700:	d403      	bmi.n	800a70a <__lo0bits+0x4e>
 800a702:	085b      	lsrs	r3, r3, #1
 800a704:	f102 0201 	add.w	r2, r2, #1
 800a708:	d003      	beq.n	800a712 <__lo0bits+0x56>
 800a70a:	6003      	str	r3, [r0, #0]
 800a70c:	e7e5      	b.n	800a6da <__lo0bits+0x1e>
 800a70e:	2200      	movs	r2, #0
 800a710:	e7e3      	b.n	800a6da <__lo0bits+0x1e>
 800a712:	2220      	movs	r2, #32
 800a714:	e7e1      	b.n	800a6da <__lo0bits+0x1e>
	...

0800a718 <__i2b>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	460c      	mov	r4, r1
 800a71c:	2101      	movs	r1, #1
 800a71e:	f7ff febb 	bl	800a498 <_Balloc>
 800a722:	4602      	mov	r2, r0
 800a724:	b928      	cbnz	r0, 800a732 <__i2b+0x1a>
 800a726:	4b05      	ldr	r3, [pc, #20]	; (800a73c <__i2b+0x24>)
 800a728:	4805      	ldr	r0, [pc, #20]	; (800a740 <__i2b+0x28>)
 800a72a:	f240 1145 	movw	r1, #325	; 0x145
 800a72e:	f001 fc0b 	bl	800bf48 <__assert_func>
 800a732:	2301      	movs	r3, #1
 800a734:	6144      	str	r4, [r0, #20]
 800a736:	6103      	str	r3, [r0, #16]
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	0802102d 	.word	0x0802102d
 800a740:	0802103e 	.word	0x0802103e

0800a744 <__multiply>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	4691      	mov	r9, r2
 800a74a:	690a      	ldr	r2, [r1, #16]
 800a74c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a750:	429a      	cmp	r2, r3
 800a752:	bfb8      	it	lt
 800a754:	460b      	movlt	r3, r1
 800a756:	460c      	mov	r4, r1
 800a758:	bfbc      	itt	lt
 800a75a:	464c      	movlt	r4, r9
 800a75c:	4699      	movlt	r9, r3
 800a75e:	6927      	ldr	r7, [r4, #16]
 800a760:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a764:	68a3      	ldr	r3, [r4, #8]
 800a766:	6861      	ldr	r1, [r4, #4]
 800a768:	eb07 060a 	add.w	r6, r7, sl
 800a76c:	42b3      	cmp	r3, r6
 800a76e:	b085      	sub	sp, #20
 800a770:	bfb8      	it	lt
 800a772:	3101      	addlt	r1, #1
 800a774:	f7ff fe90 	bl	800a498 <_Balloc>
 800a778:	b930      	cbnz	r0, 800a788 <__multiply+0x44>
 800a77a:	4602      	mov	r2, r0
 800a77c:	4b44      	ldr	r3, [pc, #272]	; (800a890 <__multiply+0x14c>)
 800a77e:	4845      	ldr	r0, [pc, #276]	; (800a894 <__multiply+0x150>)
 800a780:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a784:	f001 fbe0 	bl	800bf48 <__assert_func>
 800a788:	f100 0514 	add.w	r5, r0, #20
 800a78c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a790:	462b      	mov	r3, r5
 800a792:	2200      	movs	r2, #0
 800a794:	4543      	cmp	r3, r8
 800a796:	d321      	bcc.n	800a7dc <__multiply+0x98>
 800a798:	f104 0314 	add.w	r3, r4, #20
 800a79c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7a0:	f109 0314 	add.w	r3, r9, #20
 800a7a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7a8:	9202      	str	r2, [sp, #8]
 800a7aa:	1b3a      	subs	r2, r7, r4
 800a7ac:	3a15      	subs	r2, #21
 800a7ae:	f022 0203 	bic.w	r2, r2, #3
 800a7b2:	3204      	adds	r2, #4
 800a7b4:	f104 0115 	add.w	r1, r4, #21
 800a7b8:	428f      	cmp	r7, r1
 800a7ba:	bf38      	it	cc
 800a7bc:	2204      	movcc	r2, #4
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	9a02      	ldr	r2, [sp, #8]
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d80c      	bhi.n	800a7e2 <__multiply+0x9e>
 800a7c8:	2e00      	cmp	r6, #0
 800a7ca:	dd03      	ble.n	800a7d4 <__multiply+0x90>
 800a7cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d05b      	beq.n	800a88c <__multiply+0x148>
 800a7d4:	6106      	str	r6, [r0, #16]
 800a7d6:	b005      	add	sp, #20
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	f843 2b04 	str.w	r2, [r3], #4
 800a7e0:	e7d8      	b.n	800a794 <__multiply+0x50>
 800a7e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7e6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ea:	d024      	beq.n	800a836 <__multiply+0xf2>
 800a7ec:	f104 0e14 	add.w	lr, r4, #20
 800a7f0:	46a9      	mov	r9, r5
 800a7f2:	f04f 0c00 	mov.w	ip, #0
 800a7f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a7fa:	f8d9 1000 	ldr.w	r1, [r9]
 800a7fe:	fa1f fb82 	uxth.w	fp, r2
 800a802:	b289      	uxth	r1, r1
 800a804:	fb0a 110b 	mla	r1, sl, fp, r1
 800a808:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a80c:	f8d9 2000 	ldr.w	r2, [r9]
 800a810:	4461      	add	r1, ip
 800a812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a816:	fb0a c20b 	mla	r2, sl, fp, ip
 800a81a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a81e:	b289      	uxth	r1, r1
 800a820:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a824:	4577      	cmp	r7, lr
 800a826:	f849 1b04 	str.w	r1, [r9], #4
 800a82a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a82e:	d8e2      	bhi.n	800a7f6 <__multiply+0xb2>
 800a830:	9a01      	ldr	r2, [sp, #4]
 800a832:	f845 c002 	str.w	ip, [r5, r2]
 800a836:	9a03      	ldr	r2, [sp, #12]
 800a838:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a83c:	3304      	adds	r3, #4
 800a83e:	f1b9 0f00 	cmp.w	r9, #0
 800a842:	d021      	beq.n	800a888 <__multiply+0x144>
 800a844:	6829      	ldr	r1, [r5, #0]
 800a846:	f104 0c14 	add.w	ip, r4, #20
 800a84a:	46ae      	mov	lr, r5
 800a84c:	f04f 0a00 	mov.w	sl, #0
 800a850:	f8bc b000 	ldrh.w	fp, [ip]
 800a854:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a858:	fb09 220b 	mla	r2, r9, fp, r2
 800a85c:	4452      	add	r2, sl
 800a85e:	b289      	uxth	r1, r1
 800a860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a864:	f84e 1b04 	str.w	r1, [lr], #4
 800a868:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a86c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a870:	f8be 1000 	ldrh.w	r1, [lr]
 800a874:	fb09 110a 	mla	r1, r9, sl, r1
 800a878:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a87c:	4567      	cmp	r7, ip
 800a87e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a882:	d8e5      	bhi.n	800a850 <__multiply+0x10c>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	50a9      	str	r1, [r5, r2]
 800a888:	3504      	adds	r5, #4
 800a88a:	e799      	b.n	800a7c0 <__multiply+0x7c>
 800a88c:	3e01      	subs	r6, #1
 800a88e:	e79b      	b.n	800a7c8 <__multiply+0x84>
 800a890:	0802102d 	.word	0x0802102d
 800a894:	0802103e 	.word	0x0802103e

0800a898 <__pow5mult>:
 800a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a89c:	4615      	mov	r5, r2
 800a89e:	f012 0203 	ands.w	r2, r2, #3
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	d007      	beq.n	800a8b8 <__pow5mult+0x20>
 800a8a8:	4c25      	ldr	r4, [pc, #148]	; (800a940 <__pow5mult+0xa8>)
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8b2:	f7ff fe53 	bl	800a55c <__multadd>
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	10ad      	asrs	r5, r5, #2
 800a8ba:	d03d      	beq.n	800a938 <__pow5mult+0xa0>
 800a8bc:	69f4      	ldr	r4, [r6, #28]
 800a8be:	b97c      	cbnz	r4, 800a8e0 <__pow5mult+0x48>
 800a8c0:	2010      	movs	r0, #16
 800a8c2:	f7ff fd35 	bl	800a330 <malloc>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	61f0      	str	r0, [r6, #28]
 800a8ca:	b928      	cbnz	r0, 800a8d8 <__pow5mult+0x40>
 800a8cc:	4b1d      	ldr	r3, [pc, #116]	; (800a944 <__pow5mult+0xac>)
 800a8ce:	481e      	ldr	r0, [pc, #120]	; (800a948 <__pow5mult+0xb0>)
 800a8d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a8d4:	f001 fb38 	bl	800bf48 <__assert_func>
 800a8d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8dc:	6004      	str	r4, [r0, #0]
 800a8de:	60c4      	str	r4, [r0, #12]
 800a8e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a8e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8e8:	b94c      	cbnz	r4, 800a8fe <__pow5mult+0x66>
 800a8ea:	f240 2171 	movw	r1, #625	; 0x271
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff12 	bl	800a718 <__i2b>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	f04f 0900 	mov.w	r9, #0
 800a902:	07eb      	lsls	r3, r5, #31
 800a904:	d50a      	bpl.n	800a91c <__pow5mult+0x84>
 800a906:	4639      	mov	r1, r7
 800a908:	4622      	mov	r2, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7ff ff1a 	bl	800a744 <__multiply>
 800a910:	4639      	mov	r1, r7
 800a912:	4680      	mov	r8, r0
 800a914:	4630      	mov	r0, r6
 800a916:	f7ff fdff 	bl	800a518 <_Bfree>
 800a91a:	4647      	mov	r7, r8
 800a91c:	106d      	asrs	r5, r5, #1
 800a91e:	d00b      	beq.n	800a938 <__pow5mult+0xa0>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	b938      	cbnz	r0, 800a934 <__pow5mult+0x9c>
 800a924:	4622      	mov	r2, r4
 800a926:	4621      	mov	r1, r4
 800a928:	4630      	mov	r0, r6
 800a92a:	f7ff ff0b 	bl	800a744 <__multiply>
 800a92e:	6020      	str	r0, [r4, #0]
 800a930:	f8c0 9000 	str.w	r9, [r0]
 800a934:	4604      	mov	r4, r0
 800a936:	e7e4      	b.n	800a902 <__pow5mult+0x6a>
 800a938:	4638      	mov	r0, r7
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	bf00      	nop
 800a940:	08021188 	.word	0x08021188
 800a944:	08020fbe 	.word	0x08020fbe
 800a948:	0802103e 	.word	0x0802103e

0800a94c <__lshift>:
 800a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	6849      	ldr	r1, [r1, #4]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a95a:	68a3      	ldr	r3, [r4, #8]
 800a95c:	4607      	mov	r7, r0
 800a95e:	4691      	mov	r9, r2
 800a960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a964:	f108 0601 	add.w	r6, r8, #1
 800a968:	42b3      	cmp	r3, r6
 800a96a:	db0b      	blt.n	800a984 <__lshift+0x38>
 800a96c:	4638      	mov	r0, r7
 800a96e:	f7ff fd93 	bl	800a498 <_Balloc>
 800a972:	4605      	mov	r5, r0
 800a974:	b948      	cbnz	r0, 800a98a <__lshift+0x3e>
 800a976:	4602      	mov	r2, r0
 800a978:	4b28      	ldr	r3, [pc, #160]	; (800aa1c <__lshift+0xd0>)
 800a97a:	4829      	ldr	r0, [pc, #164]	; (800aa20 <__lshift+0xd4>)
 800a97c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a980:	f001 fae2 	bl	800bf48 <__assert_func>
 800a984:	3101      	adds	r1, #1
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	e7ee      	b.n	800a968 <__lshift+0x1c>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f100 0114 	add.w	r1, r0, #20
 800a990:	f100 0210 	add.w	r2, r0, #16
 800a994:	4618      	mov	r0, r3
 800a996:	4553      	cmp	r3, sl
 800a998:	db33      	blt.n	800aa02 <__lshift+0xb6>
 800a99a:	6920      	ldr	r0, [r4, #16]
 800a99c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9a0:	f104 0314 	add.w	r3, r4, #20
 800a9a4:	f019 091f 	ands.w	r9, r9, #31
 800a9a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9b0:	d02b      	beq.n	800aa0a <__lshift+0xbe>
 800a9b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a9b6:	468a      	mov	sl, r1
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	fa00 f009 	lsl.w	r0, r0, r9
 800a9c0:	4310      	orrs	r0, r2
 800a9c2:	f84a 0b04 	str.w	r0, [sl], #4
 800a9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ca:	459c      	cmp	ip, r3
 800a9cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9d0:	d8f3      	bhi.n	800a9ba <__lshift+0x6e>
 800a9d2:	ebac 0304 	sub.w	r3, ip, r4
 800a9d6:	3b15      	subs	r3, #21
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	3304      	adds	r3, #4
 800a9de:	f104 0015 	add.w	r0, r4, #21
 800a9e2:	4584      	cmp	ip, r0
 800a9e4:	bf38      	it	cc
 800a9e6:	2304      	movcc	r3, #4
 800a9e8:	50ca      	str	r2, [r1, r3]
 800a9ea:	b10a      	cbz	r2, 800a9f0 <__lshift+0xa4>
 800a9ec:	f108 0602 	add.w	r6, r8, #2
 800a9f0:	3e01      	subs	r6, #1
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	612e      	str	r6, [r5, #16]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	f7ff fd8e 	bl	800a518 <_Bfree>
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa02:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa06:	3301      	adds	r3, #1
 800aa08:	e7c5      	b.n	800a996 <__lshift+0x4a>
 800aa0a:	3904      	subs	r1, #4
 800aa0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa10:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa14:	459c      	cmp	ip, r3
 800aa16:	d8f9      	bhi.n	800aa0c <__lshift+0xc0>
 800aa18:	e7ea      	b.n	800a9f0 <__lshift+0xa4>
 800aa1a:	bf00      	nop
 800aa1c:	0802102d 	.word	0x0802102d
 800aa20:	0802103e 	.word	0x0802103e

0800aa24 <__mcmp>:
 800aa24:	b530      	push	{r4, r5, lr}
 800aa26:	6902      	ldr	r2, [r0, #16]
 800aa28:	690c      	ldr	r4, [r1, #16]
 800aa2a:	1b12      	subs	r2, r2, r4
 800aa2c:	d10e      	bne.n	800aa4c <__mcmp+0x28>
 800aa2e:	f100 0314 	add.w	r3, r0, #20
 800aa32:	3114      	adds	r1, #20
 800aa34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa44:	42a5      	cmp	r5, r4
 800aa46:	d003      	beq.n	800aa50 <__mcmp+0x2c>
 800aa48:	d305      	bcc.n	800aa56 <__mcmp+0x32>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	bd30      	pop	{r4, r5, pc}
 800aa50:	4283      	cmp	r3, r0
 800aa52:	d3f3      	bcc.n	800aa3c <__mcmp+0x18>
 800aa54:	e7fa      	b.n	800aa4c <__mcmp+0x28>
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	e7f7      	b.n	800aa4c <__mcmp+0x28>

0800aa5c <__mdiff>:
 800aa5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	460c      	mov	r4, r1
 800aa62:	4606      	mov	r6, r0
 800aa64:	4611      	mov	r1, r2
 800aa66:	4620      	mov	r0, r4
 800aa68:	4690      	mov	r8, r2
 800aa6a:	f7ff ffdb 	bl	800aa24 <__mcmp>
 800aa6e:	1e05      	subs	r5, r0, #0
 800aa70:	d110      	bne.n	800aa94 <__mdiff+0x38>
 800aa72:	4629      	mov	r1, r5
 800aa74:	4630      	mov	r0, r6
 800aa76:	f7ff fd0f 	bl	800a498 <_Balloc>
 800aa7a:	b930      	cbnz	r0, 800aa8a <__mdiff+0x2e>
 800aa7c:	4b3a      	ldr	r3, [pc, #232]	; (800ab68 <__mdiff+0x10c>)
 800aa7e:	4602      	mov	r2, r0
 800aa80:	f240 2137 	movw	r1, #567	; 0x237
 800aa84:	4839      	ldr	r0, [pc, #228]	; (800ab6c <__mdiff+0x110>)
 800aa86:	f001 fa5f 	bl	800bf48 <__assert_func>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa94:	bfa4      	itt	ge
 800aa96:	4643      	movge	r3, r8
 800aa98:	46a0      	movge	r8, r4
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aaa0:	bfa6      	itte	ge
 800aaa2:	461c      	movge	r4, r3
 800aaa4:	2500      	movge	r5, #0
 800aaa6:	2501      	movlt	r5, #1
 800aaa8:	f7ff fcf6 	bl	800a498 <_Balloc>
 800aaac:	b920      	cbnz	r0, 800aab8 <__mdiff+0x5c>
 800aaae:	4b2e      	ldr	r3, [pc, #184]	; (800ab68 <__mdiff+0x10c>)
 800aab0:	4602      	mov	r2, r0
 800aab2:	f240 2145 	movw	r1, #581	; 0x245
 800aab6:	e7e5      	b.n	800aa84 <__mdiff+0x28>
 800aab8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aabc:	6926      	ldr	r6, [r4, #16]
 800aabe:	60c5      	str	r5, [r0, #12]
 800aac0:	f104 0914 	add.w	r9, r4, #20
 800aac4:	f108 0514 	add.w	r5, r8, #20
 800aac8:	f100 0e14 	add.w	lr, r0, #20
 800aacc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aad0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aad4:	f108 0210 	add.w	r2, r8, #16
 800aad8:	46f2      	mov	sl, lr
 800aada:	2100      	movs	r1, #0
 800aadc:	f859 3b04 	ldr.w	r3, [r9], #4
 800aae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aae4:	fa11 f88b 	uxtah	r8, r1, fp
 800aae8:	b299      	uxth	r1, r3
 800aaea:	0c1b      	lsrs	r3, r3, #16
 800aaec:	eba8 0801 	sub.w	r8, r8, r1
 800aaf0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aaf4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aaf8:	fa1f f888 	uxth.w	r8, r8
 800aafc:	1419      	asrs	r1, r3, #16
 800aafe:	454e      	cmp	r6, r9
 800ab00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab04:	f84a 3b04 	str.w	r3, [sl], #4
 800ab08:	d8e8      	bhi.n	800aadc <__mdiff+0x80>
 800ab0a:	1b33      	subs	r3, r6, r4
 800ab0c:	3b15      	subs	r3, #21
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	3304      	adds	r3, #4
 800ab14:	3415      	adds	r4, #21
 800ab16:	42a6      	cmp	r6, r4
 800ab18:	bf38      	it	cc
 800ab1a:	2304      	movcc	r3, #4
 800ab1c:	441d      	add	r5, r3
 800ab1e:	4473      	add	r3, lr
 800ab20:	469e      	mov	lr, r3
 800ab22:	462e      	mov	r6, r5
 800ab24:	4566      	cmp	r6, ip
 800ab26:	d30e      	bcc.n	800ab46 <__mdiff+0xea>
 800ab28:	f10c 0203 	add.w	r2, ip, #3
 800ab2c:	1b52      	subs	r2, r2, r5
 800ab2e:	f022 0203 	bic.w	r2, r2, #3
 800ab32:	3d03      	subs	r5, #3
 800ab34:	45ac      	cmp	ip, r5
 800ab36:	bf38      	it	cc
 800ab38:	2200      	movcc	r2, #0
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab40:	b17a      	cbz	r2, 800ab62 <__mdiff+0x106>
 800ab42:	6107      	str	r7, [r0, #16]
 800ab44:	e7a4      	b.n	800aa90 <__mdiff+0x34>
 800ab46:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab4a:	fa11 f288 	uxtah	r2, r1, r8
 800ab4e:	1414      	asrs	r4, r2, #16
 800ab50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab54:	b292      	uxth	r2, r2
 800ab56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab5a:	f84e 2b04 	str.w	r2, [lr], #4
 800ab5e:	1421      	asrs	r1, r4, #16
 800ab60:	e7e0      	b.n	800ab24 <__mdiff+0xc8>
 800ab62:	3f01      	subs	r7, #1
 800ab64:	e7ea      	b.n	800ab3c <__mdiff+0xe0>
 800ab66:	bf00      	nop
 800ab68:	0802102d 	.word	0x0802102d
 800ab6c:	0802103e 	.word	0x0802103e

0800ab70 <__ulp>:
 800ab70:	b082      	sub	sp, #8
 800ab72:	ed8d 0b00 	vstr	d0, [sp]
 800ab76:	9a01      	ldr	r2, [sp, #4]
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <__ulp+0x48>)
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc08      	bgt.n	800ab96 <__ulp+0x26>
 800ab84:	425b      	negs	r3, r3
 800ab86:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ab8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab8e:	da04      	bge.n	800ab9a <__ulp+0x2a>
 800ab90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab94:	4113      	asrs	r3, r2
 800ab96:	2200      	movs	r2, #0
 800ab98:	e008      	b.n	800abac <__ulp+0x3c>
 800ab9a:	f1a2 0314 	sub.w	r3, r2, #20
 800ab9e:	2b1e      	cmp	r3, #30
 800aba0:	bfda      	itte	le
 800aba2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aba6:	40da      	lsrle	r2, r3
 800aba8:	2201      	movgt	r2, #1
 800abaa:	2300      	movs	r3, #0
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	ec41 0b10 	vmov	d0, r0, r1
 800abb4:	b002      	add	sp, #8
 800abb6:	4770      	bx	lr
 800abb8:	7ff00000 	.word	0x7ff00000

0800abbc <__b2d>:
 800abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc0:	6906      	ldr	r6, [r0, #16]
 800abc2:	f100 0814 	add.w	r8, r0, #20
 800abc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800abca:	1f37      	subs	r7, r6, #4
 800abcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7ff fd53 	bl	800a67c <__hi0bits>
 800abd6:	f1c0 0320 	rsb	r3, r0, #32
 800abda:	280a      	cmp	r0, #10
 800abdc:	600b      	str	r3, [r1, #0]
 800abde:	491b      	ldr	r1, [pc, #108]	; (800ac4c <__b2d+0x90>)
 800abe0:	dc15      	bgt.n	800ac0e <__b2d+0x52>
 800abe2:	f1c0 0c0b 	rsb	ip, r0, #11
 800abe6:	fa22 f30c 	lsr.w	r3, r2, ip
 800abea:	45b8      	cmp	r8, r7
 800abec:	ea43 0501 	orr.w	r5, r3, r1
 800abf0:	bf34      	ite	cc
 800abf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abf6:	2300      	movcs	r3, #0
 800abf8:	3015      	adds	r0, #21
 800abfa:	fa02 f000 	lsl.w	r0, r2, r0
 800abfe:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac02:	4303      	orrs	r3, r0
 800ac04:	461c      	mov	r4, r3
 800ac06:	ec45 4b10 	vmov	d0, r4, r5
 800ac0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0e:	45b8      	cmp	r8, r7
 800ac10:	bf3a      	itte	cc
 800ac12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac16:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac1a:	2300      	movcs	r3, #0
 800ac1c:	380b      	subs	r0, #11
 800ac1e:	d012      	beq.n	800ac46 <__b2d+0x8a>
 800ac20:	f1c0 0120 	rsb	r1, r0, #32
 800ac24:	fa23 f401 	lsr.w	r4, r3, r1
 800ac28:	4082      	lsls	r2, r0
 800ac2a:	4322      	orrs	r2, r4
 800ac2c:	4547      	cmp	r7, r8
 800ac2e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ac32:	bf8c      	ite	hi
 800ac34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac38:	2200      	movls	r2, #0
 800ac3a:	4083      	lsls	r3, r0
 800ac3c:	40ca      	lsrs	r2, r1
 800ac3e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac42:	4313      	orrs	r3, r2
 800ac44:	e7de      	b.n	800ac04 <__b2d+0x48>
 800ac46:	ea42 0501 	orr.w	r5, r2, r1
 800ac4a:	e7db      	b.n	800ac04 <__b2d+0x48>
 800ac4c:	3ff00000 	.word	0x3ff00000

0800ac50 <__d2b>:
 800ac50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	460f      	mov	r7, r1
 800ac56:	2101      	movs	r1, #1
 800ac58:	ec59 8b10 	vmov	r8, r9, d0
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	f7ff fc1b 	bl	800a498 <_Balloc>
 800ac62:	4604      	mov	r4, r0
 800ac64:	b930      	cbnz	r0, 800ac74 <__d2b+0x24>
 800ac66:	4602      	mov	r2, r0
 800ac68:	4b24      	ldr	r3, [pc, #144]	; (800acfc <__d2b+0xac>)
 800ac6a:	4825      	ldr	r0, [pc, #148]	; (800ad00 <__d2b+0xb0>)
 800ac6c:	f240 310f 	movw	r1, #783	; 0x30f
 800ac70:	f001 f96a 	bl	800bf48 <__assert_func>
 800ac74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac7c:	bb2d      	cbnz	r5, 800acca <__d2b+0x7a>
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	f1b8 0300 	subs.w	r3, r8, #0
 800ac84:	d026      	beq.n	800acd4 <__d2b+0x84>
 800ac86:	4668      	mov	r0, sp
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	f7ff fd17 	bl	800a6bc <__lo0bits>
 800ac8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac92:	b1e8      	cbz	r0, 800acd0 <__d2b+0x80>
 800ac94:	f1c0 0320 	rsb	r3, r0, #32
 800ac98:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9c:	430b      	orrs	r3, r1
 800ac9e:	40c2      	lsrs	r2, r0
 800aca0:	6163      	str	r3, [r4, #20]
 800aca2:	9201      	str	r2, [sp, #4]
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	61a3      	str	r3, [r4, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bf14      	ite	ne
 800acac:	2202      	movne	r2, #2
 800acae:	2201      	moveq	r2, #1
 800acb0:	6122      	str	r2, [r4, #16]
 800acb2:	b1bd      	cbz	r5, 800ace4 <__d2b+0x94>
 800acb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acb8:	4405      	add	r5, r0
 800acba:	603d      	str	r5, [r7, #0]
 800acbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acc0:	6030      	str	r0, [r6, #0]
 800acc2:	4620      	mov	r0, r4
 800acc4:	b003      	add	sp, #12
 800acc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acce:	e7d6      	b.n	800ac7e <__d2b+0x2e>
 800acd0:	6161      	str	r1, [r4, #20]
 800acd2:	e7e7      	b.n	800aca4 <__d2b+0x54>
 800acd4:	a801      	add	r0, sp, #4
 800acd6:	f7ff fcf1 	bl	800a6bc <__lo0bits>
 800acda:	9b01      	ldr	r3, [sp, #4]
 800acdc:	6163      	str	r3, [r4, #20]
 800acde:	3020      	adds	r0, #32
 800ace0:	2201      	movs	r2, #1
 800ace2:	e7e5      	b.n	800acb0 <__d2b+0x60>
 800ace4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ace8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acec:	6038      	str	r0, [r7, #0]
 800acee:	6918      	ldr	r0, [r3, #16]
 800acf0:	f7ff fcc4 	bl	800a67c <__hi0bits>
 800acf4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acf8:	e7e2      	b.n	800acc0 <__d2b+0x70>
 800acfa:	bf00      	nop
 800acfc:	0802102d 	.word	0x0802102d
 800ad00:	0802103e 	.word	0x0802103e

0800ad04 <__ratio>:
 800ad04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4688      	mov	r8, r1
 800ad0a:	4669      	mov	r1, sp
 800ad0c:	4681      	mov	r9, r0
 800ad0e:	f7ff ff55 	bl	800abbc <__b2d>
 800ad12:	a901      	add	r1, sp, #4
 800ad14:	4640      	mov	r0, r8
 800ad16:	ec55 4b10 	vmov	r4, r5, d0
 800ad1a:	ee10 aa10 	vmov	sl, s0
 800ad1e:	f7ff ff4d 	bl	800abbc <__b2d>
 800ad22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ad26:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad2a:	1ad2      	subs	r2, r2, r3
 800ad2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ad30:	1a5b      	subs	r3, r3, r1
 800ad32:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ad36:	ec57 6b10 	vmov	r6, r7, d0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	bfd6      	itet	le
 800ad3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad42:	462a      	movgt	r2, r5
 800ad44:	463a      	movle	r2, r7
 800ad46:	46ab      	mov	fp, r5
 800ad48:	bfd6      	itet	le
 800ad4a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ad4e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ad52:	ee00 3a90 	vmovle	s1, r3
 800ad56:	ec4b ab17 	vmov	d7, sl, fp
 800ad5a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ad5e:	b003      	add	sp, #12
 800ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad64 <__copybits>:
 800ad64:	3901      	subs	r1, #1
 800ad66:	b570      	push	{r4, r5, r6, lr}
 800ad68:	1149      	asrs	r1, r1, #5
 800ad6a:	6914      	ldr	r4, [r2, #16]
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	f102 0314 	add.w	r3, r2, #20
 800ad72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad7a:	1f05      	subs	r5, r0, #4
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d30c      	bcc.n	800ad9a <__copybits+0x36>
 800ad80:	1aa3      	subs	r3, r4, r2
 800ad82:	3b11      	subs	r3, #17
 800ad84:	f023 0303 	bic.w	r3, r3, #3
 800ad88:	3211      	adds	r2, #17
 800ad8a:	42a2      	cmp	r2, r4
 800ad8c:	bf88      	it	hi
 800ad8e:	2300      	movhi	r3, #0
 800ad90:	4418      	add	r0, r3
 800ad92:	2300      	movs	r3, #0
 800ad94:	4288      	cmp	r0, r1
 800ad96:	d305      	bcc.n	800ada4 <__copybits+0x40>
 800ad98:	bd70      	pop	{r4, r5, r6, pc}
 800ad9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ada2:	e7eb      	b.n	800ad7c <__copybits+0x18>
 800ada4:	f840 3b04 	str.w	r3, [r0], #4
 800ada8:	e7f4      	b.n	800ad94 <__copybits+0x30>

0800adaa <__any_on>:
 800adaa:	f100 0214 	add.w	r2, r0, #20
 800adae:	6900      	ldr	r0, [r0, #16]
 800adb0:	114b      	asrs	r3, r1, #5
 800adb2:	4298      	cmp	r0, r3
 800adb4:	b510      	push	{r4, lr}
 800adb6:	db11      	blt.n	800addc <__any_on+0x32>
 800adb8:	dd0a      	ble.n	800add0 <__any_on+0x26>
 800adba:	f011 011f 	ands.w	r1, r1, #31
 800adbe:	d007      	beq.n	800add0 <__any_on+0x26>
 800adc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adc4:	fa24 f001 	lsr.w	r0, r4, r1
 800adc8:	fa00 f101 	lsl.w	r1, r0, r1
 800adcc:	428c      	cmp	r4, r1
 800adce:	d10b      	bne.n	800ade8 <__any_on+0x3e>
 800add0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800add4:	4293      	cmp	r3, r2
 800add6:	d803      	bhi.n	800ade0 <__any_on+0x36>
 800add8:	2000      	movs	r0, #0
 800adda:	bd10      	pop	{r4, pc}
 800addc:	4603      	mov	r3, r0
 800adde:	e7f7      	b.n	800add0 <__any_on+0x26>
 800ade0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d0f5      	beq.n	800add4 <__any_on+0x2a>
 800ade8:	2001      	movs	r0, #1
 800adea:	e7f6      	b.n	800adda <__any_on+0x30>

0800adec <sulp>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	4604      	mov	r4, r0
 800adf0:	460d      	mov	r5, r1
 800adf2:	4616      	mov	r6, r2
 800adf4:	ec45 4b10 	vmov	d0, r4, r5
 800adf8:	f7ff feba 	bl	800ab70 <__ulp>
 800adfc:	b17e      	cbz	r6, 800ae1e <sulp+0x32>
 800adfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	dd09      	ble.n	800ae1e <sulp+0x32>
 800ae0a:	051b      	lsls	r3, r3, #20
 800ae0c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ae10:	2000      	movs	r0, #0
 800ae12:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ae16:	ec41 0b17 	vmov	d7, r0, r1
 800ae1a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}

0800ae20 <_strtod_l>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	ed2d 8b0e 	vpush	{d8-d14}
 800ae28:	b097      	sub	sp, #92	; 0x5c
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	920d      	str	r2, [sp, #52]	; 0x34
 800ae2e:	2200      	movs	r2, #0
 800ae30:	9212      	str	r2, [sp, #72]	; 0x48
 800ae32:	468a      	mov	sl, r1
 800ae34:	f04f 0800 	mov.w	r8, #0
 800ae38:	f04f 0900 	mov.w	r9, #0
 800ae3c:	460a      	mov	r2, r1
 800ae3e:	9211      	str	r2, [sp, #68]	; 0x44
 800ae40:	7811      	ldrb	r1, [r2, #0]
 800ae42:	292b      	cmp	r1, #43	; 0x2b
 800ae44:	d04c      	beq.n	800aee0 <_strtod_l+0xc0>
 800ae46:	d839      	bhi.n	800aebc <_strtod_l+0x9c>
 800ae48:	290d      	cmp	r1, #13
 800ae4a:	d833      	bhi.n	800aeb4 <_strtod_l+0x94>
 800ae4c:	2908      	cmp	r1, #8
 800ae4e:	d833      	bhi.n	800aeb8 <_strtod_l+0x98>
 800ae50:	2900      	cmp	r1, #0
 800ae52:	d03c      	beq.n	800aece <_strtod_l+0xae>
 800ae54:	2200      	movs	r2, #0
 800ae56:	9208      	str	r2, [sp, #32]
 800ae58:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ae5a:	7832      	ldrb	r2, [r6, #0]
 800ae5c:	2a30      	cmp	r2, #48	; 0x30
 800ae5e:	f040 80b8 	bne.w	800afd2 <_strtod_l+0x1b2>
 800ae62:	7872      	ldrb	r2, [r6, #1]
 800ae64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ae68:	2a58      	cmp	r2, #88	; 0x58
 800ae6a:	d170      	bne.n	800af4e <_strtod_l+0x12e>
 800ae6c:	9302      	str	r3, [sp, #8]
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	ab12      	add	r3, sp, #72	; 0x48
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	4a91      	ldr	r2, [pc, #580]	; (800b0bc <_strtod_l+0x29c>)
 800ae78:	ab13      	add	r3, sp, #76	; 0x4c
 800ae7a:	a911      	add	r1, sp, #68	; 0x44
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f001 f8ff 	bl	800c080 <__gethex>
 800ae82:	f010 070f 	ands.w	r7, r0, #15
 800ae86:	4605      	mov	r5, r0
 800ae88:	d005      	beq.n	800ae96 <_strtod_l+0x76>
 800ae8a:	2f06      	cmp	r7, #6
 800ae8c:	d12a      	bne.n	800aee4 <_strtod_l+0xc4>
 800ae8e:	3601      	adds	r6, #1
 800ae90:	2300      	movs	r3, #0
 800ae92:	9611      	str	r6, [sp, #68]	; 0x44
 800ae94:	9308      	str	r3, [sp, #32]
 800ae96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f040 8555 	bne.w	800b948 <_strtod_l+0xb28>
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	ec49 8b10 	vmov	d0, r8, r9
 800aea4:	b1cb      	cbz	r3, 800aeda <_strtod_l+0xba>
 800aea6:	eeb1 0b40 	vneg.f64	d0, d0
 800aeaa:	b017      	add	sp, #92	; 0x5c
 800aeac:	ecbd 8b0e 	vpop	{d8-d14}
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	2920      	cmp	r1, #32
 800aeb6:	d1cd      	bne.n	800ae54 <_strtod_l+0x34>
 800aeb8:	3201      	adds	r2, #1
 800aeba:	e7c0      	b.n	800ae3e <_strtod_l+0x1e>
 800aebc:	292d      	cmp	r1, #45	; 0x2d
 800aebe:	d1c9      	bne.n	800ae54 <_strtod_l+0x34>
 800aec0:	2101      	movs	r1, #1
 800aec2:	9108      	str	r1, [sp, #32]
 800aec4:	1c51      	adds	r1, r2, #1
 800aec6:	9111      	str	r1, [sp, #68]	; 0x44
 800aec8:	7852      	ldrb	r2, [r2, #1]
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	d1c4      	bne.n	800ae58 <_strtod_l+0x38>
 800aece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aed0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f040 8535 	bne.w	800b944 <_strtod_l+0xb24>
 800aeda:	ec49 8b10 	vmov	d0, r8, r9
 800aede:	e7e4      	b.n	800aeaa <_strtod_l+0x8a>
 800aee0:	2100      	movs	r1, #0
 800aee2:	e7ee      	b.n	800aec2 <_strtod_l+0xa2>
 800aee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aee6:	b13a      	cbz	r2, 800aef8 <_strtod_l+0xd8>
 800aee8:	2135      	movs	r1, #53	; 0x35
 800aeea:	a814      	add	r0, sp, #80	; 0x50
 800aeec:	f7ff ff3a 	bl	800ad64 <__copybits>
 800aef0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aef2:	4620      	mov	r0, r4
 800aef4:	f7ff fb10 	bl	800a518 <_Bfree>
 800aef8:	1e7b      	subs	r3, r7, #1
 800aefa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	d806      	bhi.n	800af0e <_strtod_l+0xee>
 800af00:	e8df f003 	tbb	[pc, r3]
 800af04:	201d0314 	.word	0x201d0314
 800af08:	14          	.byte	0x14
 800af09:	00          	.byte	0x00
 800af0a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800af0e:	05eb      	lsls	r3, r5, #23
 800af10:	bf48      	it	mi
 800af12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800af16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af1a:	0d1b      	lsrs	r3, r3, #20
 800af1c:	051b      	lsls	r3, r3, #20
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1b9      	bne.n	800ae96 <_strtod_l+0x76>
 800af22:	f7fe fb8f 	bl	8009644 <__errno>
 800af26:	2322      	movs	r3, #34	; 0x22
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	e7b4      	b.n	800ae96 <_strtod_l+0x76>
 800af2c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800af30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800af3c:	e7e7      	b.n	800af0e <_strtod_l+0xee>
 800af3e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800b0c4 <_strtod_l+0x2a4>
 800af42:	e7e4      	b.n	800af0e <_strtod_l+0xee>
 800af44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800af48:	f04f 38ff 	mov.w	r8, #4294967295
 800af4c:	e7df      	b.n	800af0e <_strtod_l+0xee>
 800af4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	9211      	str	r2, [sp, #68]	; 0x44
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	2b30      	cmp	r3, #48	; 0x30
 800af58:	d0f9      	beq.n	800af4e <_strtod_l+0x12e>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d09b      	beq.n	800ae96 <_strtod_l+0x76>
 800af5e:	2301      	movs	r3, #1
 800af60:	9306      	str	r3, [sp, #24]
 800af62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af64:	9309      	str	r3, [sp, #36]	; 0x24
 800af66:	2300      	movs	r3, #0
 800af68:	9305      	str	r3, [sp, #20]
 800af6a:	9307      	str	r3, [sp, #28]
 800af6c:	461e      	mov	r6, r3
 800af6e:	220a      	movs	r2, #10
 800af70:	9811      	ldr	r0, [sp, #68]	; 0x44
 800af72:	7805      	ldrb	r5, [r0, #0]
 800af74:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800af78:	b2d9      	uxtb	r1, r3
 800af7a:	2909      	cmp	r1, #9
 800af7c:	d92b      	bls.n	800afd6 <_strtod_l+0x1b6>
 800af7e:	4950      	ldr	r1, [pc, #320]	; (800b0c0 <_strtod_l+0x2a0>)
 800af80:	2201      	movs	r2, #1
 800af82:	f000 ffa9 	bl	800bed8 <strncmp>
 800af86:	2800      	cmp	r0, #0
 800af88:	d035      	beq.n	800aff6 <_strtod_l+0x1d6>
 800af8a:	2000      	movs	r0, #0
 800af8c:	462a      	mov	r2, r5
 800af8e:	4633      	mov	r3, r6
 800af90:	4683      	mov	fp, r0
 800af92:	4601      	mov	r1, r0
 800af94:	2a65      	cmp	r2, #101	; 0x65
 800af96:	d001      	beq.n	800af9c <_strtod_l+0x17c>
 800af98:	2a45      	cmp	r2, #69	; 0x45
 800af9a:	d118      	bne.n	800afce <_strtod_l+0x1ae>
 800af9c:	b91b      	cbnz	r3, 800afa6 <_strtod_l+0x186>
 800af9e:	9b06      	ldr	r3, [sp, #24]
 800afa0:	4303      	orrs	r3, r0
 800afa2:	d094      	beq.n	800aece <_strtod_l+0xae>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800afaa:	f10a 0201 	add.w	r2, sl, #1
 800afae:	9211      	str	r2, [sp, #68]	; 0x44
 800afb0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800afb4:	2a2b      	cmp	r2, #43	; 0x2b
 800afb6:	d075      	beq.n	800b0a4 <_strtod_l+0x284>
 800afb8:	2a2d      	cmp	r2, #45	; 0x2d
 800afba:	d07b      	beq.n	800b0b4 <_strtod_l+0x294>
 800afbc:	f04f 0e00 	mov.w	lr, #0
 800afc0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800afc4:	2d09      	cmp	r5, #9
 800afc6:	f240 8083 	bls.w	800b0d0 <_strtod_l+0x2b0>
 800afca:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800afce:	2500      	movs	r5, #0
 800afd0:	e09e      	b.n	800b110 <_strtod_l+0x2f0>
 800afd2:	2300      	movs	r3, #0
 800afd4:	e7c4      	b.n	800af60 <_strtod_l+0x140>
 800afd6:	2e08      	cmp	r6, #8
 800afd8:	bfd5      	itete	le
 800afda:	9907      	ldrle	r1, [sp, #28]
 800afdc:	9905      	ldrgt	r1, [sp, #20]
 800afde:	fb02 3301 	mlale	r3, r2, r1, r3
 800afe2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800afe6:	f100 0001 	add.w	r0, r0, #1
 800afea:	bfd4      	ite	le
 800afec:	9307      	strle	r3, [sp, #28]
 800afee:	9305      	strgt	r3, [sp, #20]
 800aff0:	3601      	adds	r6, #1
 800aff2:	9011      	str	r0, [sp, #68]	; 0x44
 800aff4:	e7bc      	b.n	800af70 <_strtod_l+0x150>
 800aff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	9211      	str	r2, [sp, #68]	; 0x44
 800affc:	785a      	ldrb	r2, [r3, #1]
 800affe:	b3ae      	cbz	r6, 800b06c <_strtod_l+0x24c>
 800b000:	4683      	mov	fp, r0
 800b002:	4633      	mov	r3, r6
 800b004:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b008:	2909      	cmp	r1, #9
 800b00a:	d912      	bls.n	800b032 <_strtod_l+0x212>
 800b00c:	2101      	movs	r1, #1
 800b00e:	e7c1      	b.n	800af94 <_strtod_l+0x174>
 800b010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	9211      	str	r2, [sp, #68]	; 0x44
 800b016:	785a      	ldrb	r2, [r3, #1]
 800b018:	3001      	adds	r0, #1
 800b01a:	2a30      	cmp	r2, #48	; 0x30
 800b01c:	d0f8      	beq.n	800b010 <_strtod_l+0x1f0>
 800b01e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b022:	2b08      	cmp	r3, #8
 800b024:	f200 8495 	bhi.w	800b952 <_strtod_l+0xb32>
 800b028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b02a:	9309      	str	r3, [sp, #36]	; 0x24
 800b02c:	4683      	mov	fp, r0
 800b02e:	2000      	movs	r0, #0
 800b030:	4603      	mov	r3, r0
 800b032:	3a30      	subs	r2, #48	; 0x30
 800b034:	f100 0101 	add.w	r1, r0, #1
 800b038:	d012      	beq.n	800b060 <_strtod_l+0x240>
 800b03a:	448b      	add	fp, r1
 800b03c:	eb00 0c03 	add.w	ip, r0, r3
 800b040:	4619      	mov	r1, r3
 800b042:	250a      	movs	r5, #10
 800b044:	4561      	cmp	r1, ip
 800b046:	d113      	bne.n	800b070 <_strtod_l+0x250>
 800b048:	1819      	adds	r1, r3, r0
 800b04a:	2908      	cmp	r1, #8
 800b04c:	f103 0301 	add.w	r3, r3, #1
 800b050:	4403      	add	r3, r0
 800b052:	dc1b      	bgt.n	800b08c <_strtod_l+0x26c>
 800b054:	9807      	ldr	r0, [sp, #28]
 800b056:	210a      	movs	r1, #10
 800b058:	fb01 2200 	mla	r2, r1, r0, r2
 800b05c:	9207      	str	r2, [sp, #28]
 800b05e:	2100      	movs	r1, #0
 800b060:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b062:	1c50      	adds	r0, r2, #1
 800b064:	9011      	str	r0, [sp, #68]	; 0x44
 800b066:	7852      	ldrb	r2, [r2, #1]
 800b068:	4608      	mov	r0, r1
 800b06a:	e7cb      	b.n	800b004 <_strtod_l+0x1e4>
 800b06c:	4630      	mov	r0, r6
 800b06e:	e7d4      	b.n	800b01a <_strtod_l+0x1fa>
 800b070:	2908      	cmp	r1, #8
 800b072:	f101 0101 	add.w	r1, r1, #1
 800b076:	dc03      	bgt.n	800b080 <_strtod_l+0x260>
 800b078:	9f07      	ldr	r7, [sp, #28]
 800b07a:	436f      	muls	r7, r5
 800b07c:	9707      	str	r7, [sp, #28]
 800b07e:	e7e1      	b.n	800b044 <_strtod_l+0x224>
 800b080:	2910      	cmp	r1, #16
 800b082:	bfde      	ittt	le
 800b084:	9f05      	ldrle	r7, [sp, #20]
 800b086:	436f      	mulle	r7, r5
 800b088:	9705      	strle	r7, [sp, #20]
 800b08a:	e7db      	b.n	800b044 <_strtod_l+0x224>
 800b08c:	2b10      	cmp	r3, #16
 800b08e:	bfdf      	itttt	le
 800b090:	9805      	ldrle	r0, [sp, #20]
 800b092:	210a      	movle	r1, #10
 800b094:	fb01 2200 	mlale	r2, r1, r0, r2
 800b098:	9205      	strle	r2, [sp, #20]
 800b09a:	e7e0      	b.n	800b05e <_strtod_l+0x23e>
 800b09c:	f04f 0b00 	mov.w	fp, #0
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	e77c      	b.n	800af9e <_strtod_l+0x17e>
 800b0a4:	f04f 0e00 	mov.w	lr, #0
 800b0a8:	f10a 0202 	add.w	r2, sl, #2
 800b0ac:	9211      	str	r2, [sp, #68]	; 0x44
 800b0ae:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800b0b2:	e785      	b.n	800afc0 <_strtod_l+0x1a0>
 800b0b4:	f04f 0e01 	mov.w	lr, #1
 800b0b8:	e7f6      	b.n	800b0a8 <_strtod_l+0x288>
 800b0ba:	bf00      	nop
 800b0bc:	08021198 	.word	0x08021198
 800b0c0:	08021194 	.word	0x08021194
 800b0c4:	7ff00000 	.word	0x7ff00000
 800b0c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0ca:	1c55      	adds	r5, r2, #1
 800b0cc:	9511      	str	r5, [sp, #68]	; 0x44
 800b0ce:	7852      	ldrb	r2, [r2, #1]
 800b0d0:	2a30      	cmp	r2, #48	; 0x30
 800b0d2:	d0f9      	beq.n	800b0c8 <_strtod_l+0x2a8>
 800b0d4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b0d8:	2d08      	cmp	r5, #8
 800b0da:	f63f af78 	bhi.w	800afce <_strtod_l+0x1ae>
 800b0de:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b0e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0e4:	920a      	str	r2, [sp, #40]	; 0x28
 800b0e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0e8:	1c55      	adds	r5, r2, #1
 800b0ea:	9511      	str	r5, [sp, #68]	; 0x44
 800b0ec:	7852      	ldrb	r2, [r2, #1]
 800b0ee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800b0f2:	2f09      	cmp	r7, #9
 800b0f4:	d937      	bls.n	800b166 <_strtod_l+0x346>
 800b0f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b0f8:	1bed      	subs	r5, r5, r7
 800b0fa:	2d08      	cmp	r5, #8
 800b0fc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b100:	dc02      	bgt.n	800b108 <_strtod_l+0x2e8>
 800b102:	4565      	cmp	r5, ip
 800b104:	bfa8      	it	ge
 800b106:	4665      	movge	r5, ip
 800b108:	f1be 0f00 	cmp.w	lr, #0
 800b10c:	d000      	beq.n	800b110 <_strtod_l+0x2f0>
 800b10e:	426d      	negs	r5, r5
 800b110:	2b00      	cmp	r3, #0
 800b112:	d14d      	bne.n	800b1b0 <_strtod_l+0x390>
 800b114:	9b06      	ldr	r3, [sp, #24]
 800b116:	4303      	orrs	r3, r0
 800b118:	f47f aebd 	bne.w	800ae96 <_strtod_l+0x76>
 800b11c:	2900      	cmp	r1, #0
 800b11e:	f47f aed6 	bne.w	800aece <_strtod_l+0xae>
 800b122:	2a69      	cmp	r2, #105	; 0x69
 800b124:	d027      	beq.n	800b176 <_strtod_l+0x356>
 800b126:	dc24      	bgt.n	800b172 <_strtod_l+0x352>
 800b128:	2a49      	cmp	r2, #73	; 0x49
 800b12a:	d024      	beq.n	800b176 <_strtod_l+0x356>
 800b12c:	2a4e      	cmp	r2, #78	; 0x4e
 800b12e:	f47f aece 	bne.w	800aece <_strtod_l+0xae>
 800b132:	4995      	ldr	r1, [pc, #596]	; (800b388 <_strtod_l+0x568>)
 800b134:	a811      	add	r0, sp, #68	; 0x44
 800b136:	f001 f9e3 	bl	800c500 <__match>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f43f aec7 	beq.w	800aece <_strtod_l+0xae>
 800b140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b28      	cmp	r3, #40	; 0x28
 800b146:	d12d      	bne.n	800b1a4 <_strtod_l+0x384>
 800b148:	4990      	ldr	r1, [pc, #576]	; (800b38c <_strtod_l+0x56c>)
 800b14a:	aa14      	add	r2, sp, #80	; 0x50
 800b14c:	a811      	add	r0, sp, #68	; 0x44
 800b14e:	f001 f9eb 	bl	800c528 <__hexnan>
 800b152:	2805      	cmp	r0, #5
 800b154:	d126      	bne.n	800b1a4 <_strtod_l+0x384>
 800b156:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b158:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b15c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b160:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b164:	e697      	b.n	800ae96 <_strtod_l+0x76>
 800b166:	250a      	movs	r5, #10
 800b168:	fb05 2c0c 	mla	ip, r5, ip, r2
 800b16c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800b170:	e7b9      	b.n	800b0e6 <_strtod_l+0x2c6>
 800b172:	2a6e      	cmp	r2, #110	; 0x6e
 800b174:	e7db      	b.n	800b12e <_strtod_l+0x30e>
 800b176:	4986      	ldr	r1, [pc, #536]	; (800b390 <_strtod_l+0x570>)
 800b178:	a811      	add	r0, sp, #68	; 0x44
 800b17a:	f001 f9c1 	bl	800c500 <__match>
 800b17e:	2800      	cmp	r0, #0
 800b180:	f43f aea5 	beq.w	800aece <_strtod_l+0xae>
 800b184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b186:	4983      	ldr	r1, [pc, #524]	; (800b394 <_strtod_l+0x574>)
 800b188:	3b01      	subs	r3, #1
 800b18a:	a811      	add	r0, sp, #68	; 0x44
 800b18c:	9311      	str	r3, [sp, #68]	; 0x44
 800b18e:	f001 f9b7 	bl	800c500 <__match>
 800b192:	b910      	cbnz	r0, 800b19a <_strtod_l+0x37a>
 800b194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b196:	3301      	adds	r3, #1
 800b198:	9311      	str	r3, [sp, #68]	; 0x44
 800b19a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800b3a8 <_strtod_l+0x588>
 800b19e:	f04f 0800 	mov.w	r8, #0
 800b1a2:	e678      	b.n	800ae96 <_strtod_l+0x76>
 800b1a4:	487c      	ldr	r0, [pc, #496]	; (800b398 <_strtod_l+0x578>)
 800b1a6:	f000 fec7 	bl	800bf38 <nan>
 800b1aa:	ec59 8b10 	vmov	r8, r9, d0
 800b1ae:	e672      	b.n	800ae96 <_strtod_l+0x76>
 800b1b0:	eddd 7a07 	vldr	s15, [sp, #28]
 800b1b4:	eba5 020b 	sub.w	r2, r5, fp
 800b1b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b1bc:	2e00      	cmp	r6, #0
 800b1be:	bf08      	it	eq
 800b1c0:	461e      	moveq	r6, r3
 800b1c2:	2b10      	cmp	r3, #16
 800b1c4:	9206      	str	r2, [sp, #24]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	bfa8      	it	ge
 800b1ca:	2210      	movge	r2, #16
 800b1cc:	2b09      	cmp	r3, #9
 800b1ce:	ec59 8b17 	vmov	r8, r9, d7
 800b1d2:	dd0c      	ble.n	800b1ee <_strtod_l+0x3ce>
 800b1d4:	4971      	ldr	r1, [pc, #452]	; (800b39c <_strtod_l+0x57c>)
 800b1d6:	eddd 6a05 	vldr	s13, [sp, #20]
 800b1da:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b1de:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b1e2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b1e6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b1ea:	ec59 8b16 	vmov	r8, r9, d6
 800b1ee:	2b0f      	cmp	r3, #15
 800b1f0:	dc37      	bgt.n	800b262 <_strtod_l+0x442>
 800b1f2:	9906      	ldr	r1, [sp, #24]
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	f43f ae4e 	beq.w	800ae96 <_strtod_l+0x76>
 800b1fa:	dd23      	ble.n	800b244 <_strtod_l+0x424>
 800b1fc:	2916      	cmp	r1, #22
 800b1fe:	dc0b      	bgt.n	800b218 <_strtod_l+0x3f8>
 800b200:	4b66      	ldr	r3, [pc, #408]	; (800b39c <_strtod_l+0x57c>)
 800b202:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b206:	ed93 7b00 	vldr	d7, [r3]
 800b20a:	ec49 8b16 	vmov	d6, r8, r9
 800b20e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b212:	ec59 8b17 	vmov	r8, r9, d7
 800b216:	e63e      	b.n	800ae96 <_strtod_l+0x76>
 800b218:	9806      	ldr	r0, [sp, #24]
 800b21a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b21e:	4281      	cmp	r1, r0
 800b220:	db1f      	blt.n	800b262 <_strtod_l+0x442>
 800b222:	4a5e      	ldr	r2, [pc, #376]	; (800b39c <_strtod_l+0x57c>)
 800b224:	f1c3 030f 	rsb	r3, r3, #15
 800b228:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b22c:	ed91 7b00 	vldr	d7, [r1]
 800b230:	ec49 8b16 	vmov	d6, r8, r9
 800b234:	1ac3      	subs	r3, r0, r3
 800b236:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b23a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b23e:	ed92 6b00 	vldr	d6, [r2]
 800b242:	e7e4      	b.n	800b20e <_strtod_l+0x3ee>
 800b244:	9906      	ldr	r1, [sp, #24]
 800b246:	3116      	adds	r1, #22
 800b248:	db0b      	blt.n	800b262 <_strtod_l+0x442>
 800b24a:	4b54      	ldr	r3, [pc, #336]	; (800b39c <_strtod_l+0x57c>)
 800b24c:	ebab 0505 	sub.w	r5, fp, r5
 800b250:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b254:	ed95 7b00 	vldr	d7, [r5]
 800b258:	ec49 8b16 	vmov	d6, r8, r9
 800b25c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b260:	e7d7      	b.n	800b212 <_strtod_l+0x3f2>
 800b262:	9906      	ldr	r1, [sp, #24]
 800b264:	1a9a      	subs	r2, r3, r2
 800b266:	440a      	add	r2, r1
 800b268:	2a00      	cmp	r2, #0
 800b26a:	dd6e      	ble.n	800b34a <_strtod_l+0x52a>
 800b26c:	f012 000f 	ands.w	r0, r2, #15
 800b270:	d00a      	beq.n	800b288 <_strtod_l+0x468>
 800b272:	494a      	ldr	r1, [pc, #296]	; (800b39c <_strtod_l+0x57c>)
 800b274:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b278:	ed91 7b00 	vldr	d7, [r1]
 800b27c:	ec49 8b16 	vmov	d6, r8, r9
 800b280:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b284:	ec59 8b17 	vmov	r8, r9, d7
 800b288:	f032 020f 	bics.w	r2, r2, #15
 800b28c:	d04e      	beq.n	800b32c <_strtod_l+0x50c>
 800b28e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b292:	dd22      	ble.n	800b2da <_strtod_l+0x4ba>
 800b294:	2500      	movs	r5, #0
 800b296:	462e      	mov	r6, r5
 800b298:	9507      	str	r5, [sp, #28]
 800b29a:	462f      	mov	r7, r5
 800b29c:	2322      	movs	r3, #34	; 0x22
 800b29e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b3a8 <_strtod_l+0x588>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	f04f 0800 	mov.w	r8, #0
 800b2a8:	9b07      	ldr	r3, [sp, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f43f adf3 	beq.w	800ae96 <_strtod_l+0x76>
 800b2b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f7ff f930 	bl	800a518 <_Bfree>
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f7ff f92c 	bl	800a518 <_Bfree>
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff f928 	bl	800a518 <_Bfree>
 800b2c8:	9907      	ldr	r1, [sp, #28]
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7ff f924 	bl	800a518 <_Bfree>
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff f920 	bl	800a518 <_Bfree>
 800b2d8:	e5dd      	b.n	800ae96 <_strtod_l+0x76>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	ec49 8b17 	vmov	d7, r8, r9
 800b2e0:	4f2f      	ldr	r7, [pc, #188]	; (800b3a0 <_strtod_l+0x580>)
 800b2e2:	1112      	asrs	r2, r2, #4
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	2a01      	cmp	r2, #1
 800b2e8:	dc23      	bgt.n	800b332 <_strtod_l+0x512>
 800b2ea:	b108      	cbz	r0, 800b2f0 <_strtod_l+0x4d0>
 800b2ec:	ec59 8b17 	vmov	r8, r9, d7
 800b2f0:	4a2b      	ldr	r2, [pc, #172]	; (800b3a0 <_strtod_l+0x580>)
 800b2f2:	482c      	ldr	r0, [pc, #176]	; (800b3a4 <_strtod_l+0x584>)
 800b2f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b2f8:	ed92 7b00 	vldr	d7, [r2]
 800b2fc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b300:	ec49 8b16 	vmov	d6, r8, r9
 800b304:	4a28      	ldr	r2, [pc, #160]	; (800b3a8 <_strtod_l+0x588>)
 800b306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b30a:	ee17 1a90 	vmov	r1, s15
 800b30e:	400a      	ands	r2, r1
 800b310:	4282      	cmp	r2, r0
 800b312:	ec59 8b17 	vmov	r8, r9, d7
 800b316:	d8bd      	bhi.n	800b294 <_strtod_l+0x474>
 800b318:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b31c:	4282      	cmp	r2, r0
 800b31e:	bf86      	itte	hi
 800b320:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800b3ac <_strtod_l+0x58c>
 800b324:	f04f 38ff 	movhi.w	r8, #4294967295
 800b328:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b32c:	2200      	movs	r2, #0
 800b32e:	9205      	str	r2, [sp, #20]
 800b330:	e076      	b.n	800b420 <_strtod_l+0x600>
 800b332:	f012 0f01 	tst.w	r2, #1
 800b336:	d004      	beq.n	800b342 <_strtod_l+0x522>
 800b338:	ed97 6b00 	vldr	d6, [r7]
 800b33c:	2001      	movs	r0, #1
 800b33e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b342:	3101      	adds	r1, #1
 800b344:	1052      	asrs	r2, r2, #1
 800b346:	3708      	adds	r7, #8
 800b348:	e7cd      	b.n	800b2e6 <_strtod_l+0x4c6>
 800b34a:	d0ef      	beq.n	800b32c <_strtod_l+0x50c>
 800b34c:	4252      	negs	r2, r2
 800b34e:	f012 000f 	ands.w	r0, r2, #15
 800b352:	d00a      	beq.n	800b36a <_strtod_l+0x54a>
 800b354:	4911      	ldr	r1, [pc, #68]	; (800b39c <_strtod_l+0x57c>)
 800b356:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b35a:	ed91 7b00 	vldr	d7, [r1]
 800b35e:	ec49 8b16 	vmov	d6, r8, r9
 800b362:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b366:	ec59 8b17 	vmov	r8, r9, d7
 800b36a:	1112      	asrs	r2, r2, #4
 800b36c:	d0de      	beq.n	800b32c <_strtod_l+0x50c>
 800b36e:	2a1f      	cmp	r2, #31
 800b370:	dd1e      	ble.n	800b3b0 <_strtod_l+0x590>
 800b372:	2500      	movs	r5, #0
 800b374:	462e      	mov	r6, r5
 800b376:	9507      	str	r5, [sp, #28]
 800b378:	462f      	mov	r7, r5
 800b37a:	2322      	movs	r3, #34	; 0x22
 800b37c:	f04f 0800 	mov.w	r8, #0
 800b380:	f04f 0900 	mov.w	r9, #0
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	e78f      	b.n	800b2a8 <_strtod_l+0x488>
 800b388:	08020f85 	.word	0x08020f85
 800b38c:	080211ac 	.word	0x080211ac
 800b390:	08020f7d 	.word	0x08020f7d
 800b394:	08020fb4 	.word	0x08020fb4
 800b398:	0802133d 	.word	0x0802133d
 800b39c:	080210c0 	.word	0x080210c0
 800b3a0:	08021098 	.word	0x08021098
 800b3a4:	7ca00000 	.word	0x7ca00000
 800b3a8:	7ff00000 	.word	0x7ff00000
 800b3ac:	7fefffff 	.word	0x7fefffff
 800b3b0:	f012 0110 	ands.w	r1, r2, #16
 800b3b4:	bf18      	it	ne
 800b3b6:	216a      	movne	r1, #106	; 0x6a
 800b3b8:	9105      	str	r1, [sp, #20]
 800b3ba:	ec49 8b17 	vmov	d7, r8, r9
 800b3be:	49be      	ldr	r1, [pc, #760]	; (800b6b8 <_strtod_l+0x898>)
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	07d7      	lsls	r7, r2, #31
 800b3c4:	d504      	bpl.n	800b3d0 <_strtod_l+0x5b0>
 800b3c6:	ed91 6b00 	vldr	d6, [r1]
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3d0:	1052      	asrs	r2, r2, #1
 800b3d2:	f101 0108 	add.w	r1, r1, #8
 800b3d6:	d1f4      	bne.n	800b3c2 <_strtod_l+0x5a2>
 800b3d8:	b108      	cbz	r0, 800b3de <_strtod_l+0x5be>
 800b3da:	ec59 8b17 	vmov	r8, r9, d7
 800b3de:	9a05      	ldr	r2, [sp, #20]
 800b3e0:	b1ba      	cbz	r2, 800b412 <_strtod_l+0x5f2>
 800b3e2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b3e6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b3ea:	2a00      	cmp	r2, #0
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	dd10      	ble.n	800b412 <_strtod_l+0x5f2>
 800b3f0:	2a1f      	cmp	r2, #31
 800b3f2:	f340 812c 	ble.w	800b64e <_strtod_l+0x82e>
 800b3f6:	2a34      	cmp	r2, #52	; 0x34
 800b3f8:	bfde      	ittt	le
 800b3fa:	f04f 32ff 	movle.w	r2, #4294967295
 800b3fe:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b402:	408a      	lslle	r2, r1
 800b404:	f04f 0800 	mov.w	r8, #0
 800b408:	bfcc      	ite	gt
 800b40a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b40e:	ea02 0900 	andle.w	r9, r2, r0
 800b412:	ec49 8b17 	vmov	d7, r8, r9
 800b416:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41e:	d0a8      	beq.n	800b372 <_strtod_l+0x552>
 800b420:	9a07      	ldr	r2, [sp, #28]
 800b422:	9200      	str	r2, [sp, #0]
 800b424:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b426:	4632      	mov	r2, r6
 800b428:	4620      	mov	r0, r4
 800b42a:	f7ff f8dd 	bl	800a5e8 <__s2b>
 800b42e:	9007      	str	r0, [sp, #28]
 800b430:	2800      	cmp	r0, #0
 800b432:	f43f af2f 	beq.w	800b294 <_strtod_l+0x474>
 800b436:	9a06      	ldr	r2, [sp, #24]
 800b438:	2a00      	cmp	r2, #0
 800b43a:	ebab 0305 	sub.w	r3, fp, r5
 800b43e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800b698 <_strtod_l+0x878>
 800b442:	bfa8      	it	ge
 800b444:	2300      	movge	r3, #0
 800b446:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b6a0 <_strtod_l+0x880>
 800b44a:	ed9f bb97 	vldr	d11, [pc, #604]	; 800b6a8 <_strtod_l+0x888>
 800b44e:	9309      	str	r3, [sp, #36]	; 0x24
 800b450:	2500      	movs	r5, #0
 800b452:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b456:	930c      	str	r3, [sp, #48]	; 0x30
 800b458:	462e      	mov	r6, r5
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	4620      	mov	r0, r4
 800b45e:	6859      	ldr	r1, [r3, #4]
 800b460:	f7ff f81a 	bl	800a498 <_Balloc>
 800b464:	4607      	mov	r7, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	f43f af18 	beq.w	800b29c <_strtod_l+0x47c>
 800b46c:	9b07      	ldr	r3, [sp, #28]
 800b46e:	691a      	ldr	r2, [r3, #16]
 800b470:	3202      	adds	r2, #2
 800b472:	f103 010c 	add.w	r1, r3, #12
 800b476:	0092      	lsls	r2, r2, #2
 800b478:	300c      	adds	r0, #12
 800b47a:	f000 fd4f 	bl	800bf1c <memcpy>
 800b47e:	ec49 8b10 	vmov	d0, r8, r9
 800b482:	aa14      	add	r2, sp, #80	; 0x50
 800b484:	a913      	add	r1, sp, #76	; 0x4c
 800b486:	4620      	mov	r0, r4
 800b488:	f7ff fbe2 	bl	800ac50 <__d2b>
 800b48c:	ec49 8b18 	vmov	d8, r8, r9
 800b490:	9012      	str	r0, [sp, #72]	; 0x48
 800b492:	2800      	cmp	r0, #0
 800b494:	f43f af02 	beq.w	800b29c <_strtod_l+0x47c>
 800b498:	2101      	movs	r1, #1
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7ff f93c 	bl	800a718 <__i2b>
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	f43f aefa 	beq.w	800b29c <_strtod_l+0x47c>
 800b4a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	bfab      	itete	ge
 800b4b0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b4b2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b4b4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b4b8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b4bc:	bfac      	ite	ge
 800b4be:	eb03 0b02 	addge.w	fp, r3, r2
 800b4c2:	eba2 0a03 	sublt.w	sl, r2, r3
 800b4c6:	9a05      	ldr	r2, [sp, #20]
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	4a7b      	ldr	r2, [pc, #492]	; (800b6bc <_strtod_l+0x89c>)
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b4d6:	f280 80cd 	bge.w	800b674 <_strtod_l+0x854>
 800b4da:	1ad2      	subs	r2, r2, r3
 800b4dc:	2a1f      	cmp	r2, #31
 800b4de:	eba1 0102 	sub.w	r1, r1, r2
 800b4e2:	f04f 0001 	mov.w	r0, #1
 800b4e6:	f300 80b9 	bgt.w	800b65c <_strtod_l+0x83c>
 800b4ea:	fa00 f302 	lsl.w	r3, r0, r2
 800b4ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f4:	eb0b 0301 	add.w	r3, fp, r1
 800b4f8:	9a05      	ldr	r2, [sp, #20]
 800b4fa:	459b      	cmp	fp, r3
 800b4fc:	448a      	add	sl, r1
 800b4fe:	4492      	add	sl, r2
 800b500:	465a      	mov	r2, fp
 800b502:	bfa8      	it	ge
 800b504:	461a      	movge	r2, r3
 800b506:	4552      	cmp	r2, sl
 800b508:	bfa8      	it	ge
 800b50a:	4652      	movge	r2, sl
 800b50c:	2a00      	cmp	r2, #0
 800b50e:	bfc2      	ittt	gt
 800b510:	1a9b      	subgt	r3, r3, r2
 800b512:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b516:	ebab 0b02 	subgt.w	fp, fp, r2
 800b51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b51c:	2a00      	cmp	r2, #0
 800b51e:	dd18      	ble.n	800b552 <_strtod_l+0x732>
 800b520:	4631      	mov	r1, r6
 800b522:	4620      	mov	r0, r4
 800b524:	930f      	str	r3, [sp, #60]	; 0x3c
 800b526:	f7ff f9b7 	bl	800a898 <__pow5mult>
 800b52a:	4606      	mov	r6, r0
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f43f aeb5 	beq.w	800b29c <_strtod_l+0x47c>
 800b532:	4601      	mov	r1, r0
 800b534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b536:	4620      	mov	r0, r4
 800b538:	f7ff f904 	bl	800a744 <__multiply>
 800b53c:	900e      	str	r0, [sp, #56]	; 0x38
 800b53e:	2800      	cmp	r0, #0
 800b540:	f43f aeac 	beq.w	800b29c <_strtod_l+0x47c>
 800b544:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b546:	4620      	mov	r0, r4
 800b548:	f7fe ffe6 	bl	800a518 <_Bfree>
 800b54c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b550:	9212      	str	r2, [sp, #72]	; 0x48
 800b552:	2b00      	cmp	r3, #0
 800b554:	f300 8093 	bgt.w	800b67e <_strtod_l+0x85e>
 800b558:	9b06      	ldr	r3, [sp, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dd08      	ble.n	800b570 <_strtod_l+0x750>
 800b55e:	4639      	mov	r1, r7
 800b560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b562:	4620      	mov	r0, r4
 800b564:	f7ff f998 	bl	800a898 <__pow5mult>
 800b568:	4607      	mov	r7, r0
 800b56a:	2800      	cmp	r0, #0
 800b56c:	f43f ae96 	beq.w	800b29c <_strtod_l+0x47c>
 800b570:	f1ba 0f00 	cmp.w	sl, #0
 800b574:	dd08      	ble.n	800b588 <_strtod_l+0x768>
 800b576:	4639      	mov	r1, r7
 800b578:	4652      	mov	r2, sl
 800b57a:	4620      	mov	r0, r4
 800b57c:	f7ff f9e6 	bl	800a94c <__lshift>
 800b580:	4607      	mov	r7, r0
 800b582:	2800      	cmp	r0, #0
 800b584:	f43f ae8a 	beq.w	800b29c <_strtod_l+0x47c>
 800b588:	f1bb 0f00 	cmp.w	fp, #0
 800b58c:	dd08      	ble.n	800b5a0 <_strtod_l+0x780>
 800b58e:	4631      	mov	r1, r6
 800b590:	465a      	mov	r2, fp
 800b592:	4620      	mov	r0, r4
 800b594:	f7ff f9da 	bl	800a94c <__lshift>
 800b598:	4606      	mov	r6, r0
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f43f ae7e 	beq.w	800b29c <_strtod_l+0x47c>
 800b5a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b5a2:	463a      	mov	r2, r7
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f7ff fa59 	bl	800aa5c <__mdiff>
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	f43f ae75 	beq.w	800b29c <_strtod_l+0x47c>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b5b8:	60c3      	str	r3, [r0, #12]
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	f7ff fa32 	bl	800aa24 <__mcmp>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	da7f      	bge.n	800b6c4 <_strtod_l+0x8a4>
 800b5c4:	ea5a 0a08 	orrs.w	sl, sl, r8
 800b5c8:	f040 80a5 	bne.w	800b716 <_strtod_l+0x8f6>
 800b5cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f040 80a0 	bne.w	800b716 <_strtod_l+0x8f6>
 800b5d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5da:	0d1b      	lsrs	r3, r3, #20
 800b5dc:	051b      	lsls	r3, r3, #20
 800b5de:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b5e2:	f240 8098 	bls.w	800b716 <_strtod_l+0x8f6>
 800b5e6:	696b      	ldr	r3, [r5, #20]
 800b5e8:	b91b      	cbnz	r3, 800b5f2 <_strtod_l+0x7d2>
 800b5ea:	692b      	ldr	r3, [r5, #16]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	f340 8092 	ble.w	800b716 <_strtod_l+0x8f6>
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7ff f9a8 	bl	800a94c <__lshift>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4605      	mov	r5, r0
 800b600:	f7ff fa10 	bl	800aa24 <__mcmp>
 800b604:	2800      	cmp	r0, #0
 800b606:	f340 8086 	ble.w	800b716 <_strtod_l+0x8f6>
 800b60a:	9905      	ldr	r1, [sp, #20]
 800b60c:	4a2c      	ldr	r2, [pc, #176]	; (800b6c0 <_strtod_l+0x8a0>)
 800b60e:	464b      	mov	r3, r9
 800b610:	2900      	cmp	r1, #0
 800b612:	f000 809f 	beq.w	800b754 <_strtod_l+0x934>
 800b616:	ea02 0109 	and.w	r1, r2, r9
 800b61a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b61e:	f300 8099 	bgt.w	800b754 <_strtod_l+0x934>
 800b622:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b626:	f77f aea8 	ble.w	800b37a <_strtod_l+0x55a>
 800b62a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b6b0 <_strtod_l+0x890>
 800b62e:	ec49 8b16 	vmov	d6, r8, r9
 800b632:	4b23      	ldr	r3, [pc, #140]	; (800b6c0 <_strtod_l+0x8a0>)
 800b634:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b638:	ee17 2a90 	vmov	r2, s15
 800b63c:	4013      	ands	r3, r2
 800b63e:	ec59 8b17 	vmov	r8, r9, d7
 800b642:	2b00      	cmp	r3, #0
 800b644:	f47f ae34 	bne.w	800b2b0 <_strtod_l+0x490>
 800b648:	2322      	movs	r3, #34	; 0x22
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	e630      	b.n	800b2b0 <_strtod_l+0x490>
 800b64e:	f04f 31ff 	mov.w	r1, #4294967295
 800b652:	fa01 f202 	lsl.w	r2, r1, r2
 800b656:	ea02 0808 	and.w	r8, r2, r8
 800b65a:	e6da      	b.n	800b412 <_strtod_l+0x5f2>
 800b65c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b660:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b664:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b668:	33e2      	adds	r3, #226	; 0xe2
 800b66a:	fa00 f303 	lsl.w	r3, r0, r3
 800b66e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b672:	e73f      	b.n	800b4f4 <_strtod_l+0x6d4>
 800b674:	2200      	movs	r2, #0
 800b676:	2301      	movs	r3, #1
 800b678:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b67c:	e73a      	b.n	800b4f4 <_strtod_l+0x6d4>
 800b67e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b680:	461a      	mov	r2, r3
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff f962 	bl	800a94c <__lshift>
 800b688:	9012      	str	r0, [sp, #72]	; 0x48
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f47f af64 	bne.w	800b558 <_strtod_l+0x738>
 800b690:	e604      	b.n	800b29c <_strtod_l+0x47c>
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	94a03595 	.word	0x94a03595
 800b69c:	3fcfffff 	.word	0x3fcfffff
 800b6a0:	94a03595 	.word	0x94a03595
 800b6a4:	3fdfffff 	.word	0x3fdfffff
 800b6a8:	35afe535 	.word	0x35afe535
 800b6ac:	3fe00000 	.word	0x3fe00000
 800b6b0:	00000000 	.word	0x00000000
 800b6b4:	39500000 	.word	0x39500000
 800b6b8:	080211c0 	.word	0x080211c0
 800b6bc:	fffffc02 	.word	0xfffffc02
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	46cb      	mov	fp, r9
 800b6c6:	d15f      	bne.n	800b788 <_strtod_l+0x968>
 800b6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6cc:	f1ba 0f00 	cmp.w	sl, #0
 800b6d0:	d02a      	beq.n	800b728 <_strtod_l+0x908>
 800b6d2:	4aa7      	ldr	r2, [pc, #668]	; (800b970 <_strtod_l+0xb50>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d12b      	bne.n	800b730 <_strtod_l+0x910>
 800b6d8:	9b05      	ldr	r3, [sp, #20]
 800b6da:	4642      	mov	r2, r8
 800b6dc:	b1fb      	cbz	r3, 800b71e <_strtod_l+0x8fe>
 800b6de:	4ba5      	ldr	r3, [pc, #660]	; (800b974 <_strtod_l+0xb54>)
 800b6e0:	ea09 0303 	and.w	r3, r9, r3
 800b6e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ec:	d81a      	bhi.n	800b724 <_strtod_l+0x904>
 800b6ee:	0d1b      	lsrs	r3, r3, #20
 800b6f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d119      	bne.n	800b730 <_strtod_l+0x910>
 800b6fc:	4b9e      	ldr	r3, [pc, #632]	; (800b978 <_strtod_l+0xb58>)
 800b6fe:	459b      	cmp	fp, r3
 800b700:	d102      	bne.n	800b708 <_strtod_l+0x8e8>
 800b702:	3201      	adds	r2, #1
 800b704:	f43f adca 	beq.w	800b29c <_strtod_l+0x47c>
 800b708:	4b9a      	ldr	r3, [pc, #616]	; (800b974 <_strtod_l+0xb54>)
 800b70a:	ea0b 0303 	and.w	r3, fp, r3
 800b70e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b712:	f04f 0800 	mov.w	r8, #0
 800b716:	9b05      	ldr	r3, [sp, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d186      	bne.n	800b62a <_strtod_l+0x80a>
 800b71c:	e5c8      	b.n	800b2b0 <_strtod_l+0x490>
 800b71e:	f04f 33ff 	mov.w	r3, #4294967295
 800b722:	e7e9      	b.n	800b6f8 <_strtod_l+0x8d8>
 800b724:	460b      	mov	r3, r1
 800b726:	e7e7      	b.n	800b6f8 <_strtod_l+0x8d8>
 800b728:	ea53 0308 	orrs.w	r3, r3, r8
 800b72c:	f43f af6d 	beq.w	800b60a <_strtod_l+0x7ea>
 800b730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b732:	b1cb      	cbz	r3, 800b768 <_strtod_l+0x948>
 800b734:	ea13 0f0b 	tst.w	r3, fp
 800b738:	d0ed      	beq.n	800b716 <_strtod_l+0x8f6>
 800b73a:	9a05      	ldr	r2, [sp, #20]
 800b73c:	4640      	mov	r0, r8
 800b73e:	4649      	mov	r1, r9
 800b740:	f1ba 0f00 	cmp.w	sl, #0
 800b744:	d014      	beq.n	800b770 <_strtod_l+0x950>
 800b746:	f7ff fb51 	bl	800adec <sulp>
 800b74a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b74e:	ec59 8b17 	vmov	r8, r9, d7
 800b752:	e7e0      	b.n	800b716 <_strtod_l+0x8f6>
 800b754:	4013      	ands	r3, r2
 800b756:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b75a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b75e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b762:	f04f 38ff 	mov.w	r8, #4294967295
 800b766:	e7d6      	b.n	800b716 <_strtod_l+0x8f6>
 800b768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b76a:	ea13 0f08 	tst.w	r3, r8
 800b76e:	e7e3      	b.n	800b738 <_strtod_l+0x918>
 800b770:	f7ff fb3c 	bl	800adec <sulp>
 800b774:	ee38 0b40 	vsub.f64	d0, d8, d0
 800b778:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b780:	ec59 8b10 	vmov	r8, r9, d0
 800b784:	d1c7      	bne.n	800b716 <_strtod_l+0x8f6>
 800b786:	e5f8      	b.n	800b37a <_strtod_l+0x55a>
 800b788:	4631      	mov	r1, r6
 800b78a:	4628      	mov	r0, r5
 800b78c:	f7ff faba 	bl	800ad04 <__ratio>
 800b790:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b794:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b79c:	d85f      	bhi.n	800b85e <_strtod_l+0xa3e>
 800b79e:	f1ba 0f00 	cmp.w	sl, #0
 800b7a2:	d166      	bne.n	800b872 <_strtod_l+0xa52>
 800b7a4:	f1b8 0f00 	cmp.w	r8, #0
 800b7a8:	d14d      	bne.n	800b846 <_strtod_l+0xa26>
 800b7aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7ae:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d162      	bne.n	800b87c <_strtod_l+0xa5c>
 800b7b6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800b7ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	d401      	bmi.n	800b7c8 <_strtod_l+0x9a8>
 800b7c4:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b7c8:	eeb1 cb4d 	vneg.f64	d12, d13
 800b7cc:	4869      	ldr	r0, [pc, #420]	; (800b974 <_strtod_l+0xb54>)
 800b7ce:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800b980 <_strtod_l+0xb60>
 800b7d2:	ea0b 0100 	and.w	r1, fp, r0
 800b7d6:	4561      	cmp	r1, ip
 800b7d8:	ec53 2b1c 	vmov	r2, r3, d12
 800b7dc:	d17a      	bne.n	800b8d4 <_strtod_l+0xab4>
 800b7de:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b7e2:	ec49 8b10 	vmov	d0, r8, r9
 800b7e6:	910a      	str	r1, [sp, #40]	; 0x28
 800b7e8:	f7ff f9c2 	bl	800ab70 <__ulp>
 800b7ec:	ec49 8b1e 	vmov	d14, r8, r9
 800b7f0:	4860      	ldr	r0, [pc, #384]	; (800b974 <_strtod_l+0xb54>)
 800b7f2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800b7f6:	ee1e 3a90 	vmov	r3, s29
 800b7fa:	4a60      	ldr	r2, [pc, #384]	; (800b97c <_strtod_l+0xb5c>)
 800b7fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7fe:	4018      	ands	r0, r3
 800b800:	4290      	cmp	r0, r2
 800b802:	ec59 8b1e 	vmov	r8, r9, d14
 800b806:	d93c      	bls.n	800b882 <_strtod_l+0xa62>
 800b808:	ee18 2a90 	vmov	r2, s17
 800b80c:	4b5a      	ldr	r3, [pc, #360]	; (800b978 <_strtod_l+0xb58>)
 800b80e:	429a      	cmp	r2, r3
 800b810:	d104      	bne.n	800b81c <_strtod_l+0x9fc>
 800b812:	ee18 3a10 	vmov	r3, s16
 800b816:	3301      	adds	r3, #1
 800b818:	f43f ad40 	beq.w	800b29c <_strtod_l+0x47c>
 800b81c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800b978 <_strtod_l+0xb58>
 800b820:	f04f 38ff 	mov.w	r8, #4294967295
 800b824:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b826:	4620      	mov	r0, r4
 800b828:	f7fe fe76 	bl	800a518 <_Bfree>
 800b82c:	4639      	mov	r1, r7
 800b82e:	4620      	mov	r0, r4
 800b830:	f7fe fe72 	bl	800a518 <_Bfree>
 800b834:	4631      	mov	r1, r6
 800b836:	4620      	mov	r0, r4
 800b838:	f7fe fe6e 	bl	800a518 <_Bfree>
 800b83c:	4629      	mov	r1, r5
 800b83e:	4620      	mov	r0, r4
 800b840:	f7fe fe6a 	bl	800a518 <_Bfree>
 800b844:	e609      	b.n	800b45a <_strtod_l+0x63a>
 800b846:	f1b8 0f01 	cmp.w	r8, #1
 800b84a:	d103      	bne.n	800b854 <_strtod_l+0xa34>
 800b84c:	f1b9 0f00 	cmp.w	r9, #0
 800b850:	f43f ad93 	beq.w	800b37a <_strtod_l+0x55a>
 800b854:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800b858:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b85c:	e7b6      	b.n	800b7cc <_strtod_l+0x9ac>
 800b85e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b862:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b866:	f1ba 0f00 	cmp.w	sl, #0
 800b86a:	d0ad      	beq.n	800b7c8 <_strtod_l+0x9a8>
 800b86c:	eeb0 cb4d 	vmov.f64	d12, d13
 800b870:	e7ac      	b.n	800b7cc <_strtod_l+0x9ac>
 800b872:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800b876:	eeb0 db4c 	vmov.f64	d13, d12
 800b87a:	e7a7      	b.n	800b7cc <_strtod_l+0x9ac>
 800b87c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800b880:	e7a4      	b.n	800b7cc <_strtod_l+0x9ac>
 800b882:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b886:	9b05      	ldr	r3, [sp, #20]
 800b888:	46cb      	mov	fp, r9
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1ca      	bne.n	800b824 <_strtod_l+0xa04>
 800b88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b892:	0d1b      	lsrs	r3, r3, #20
 800b894:	051b      	lsls	r3, r3, #20
 800b896:	4299      	cmp	r1, r3
 800b898:	d1c4      	bne.n	800b824 <_strtod_l+0xa04>
 800b89a:	ec51 0b1d 	vmov	r0, r1, d13
 800b89e:	f7f4 fefb 	bl	8000698 <__aeabi_d2lz>
 800b8a2:	f7f4 feb3 	bl	800060c <__aeabi_l2d>
 800b8a6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800b8aa:	ec41 0b17 	vmov	d7, r0, r1
 800b8ae:	ea4b 0b08 	orr.w	fp, fp, r8
 800b8b2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800b8b6:	ee3d db47 	vsub.f64	d13, d13, d7
 800b8ba:	d03c      	beq.n	800b936 <_strtod_l+0xb16>
 800b8bc:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c4:	f53f acf4 	bmi.w	800b2b0 <_strtod_l+0x490>
 800b8c8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d0:	dda8      	ble.n	800b824 <_strtod_l+0xa04>
 800b8d2:	e4ed      	b.n	800b2b0 <_strtod_l+0x490>
 800b8d4:	9805      	ldr	r0, [sp, #20]
 800b8d6:	b1f0      	cbz	r0, 800b916 <_strtod_l+0xaf6>
 800b8d8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b8dc:	d81b      	bhi.n	800b916 <_strtod_l+0xaf6>
 800b8de:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b968 <_strtod_l+0xb48>
 800b8e2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ea:	d811      	bhi.n	800b910 <_strtod_l+0xaf0>
 800b8ec:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b8f0:	ee1d 3a10 	vmov	r3, s26
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	bf38      	it	cc
 800b8f8:	2301      	movcc	r3, #1
 800b8fa:	ee0d 3a10 	vmov	s26, r3
 800b8fe:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b902:	f1ba 0f00 	cmp.w	sl, #0
 800b906:	d113      	bne.n	800b930 <_strtod_l+0xb10>
 800b908:	eeb1 7b4d 	vneg.f64	d7, d13
 800b90c:	ec53 2b17 	vmov	r2, r3, d7
 800b910:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b914:	1a43      	subs	r3, r0, r1
 800b916:	eeb0 0b48 	vmov.f64	d0, d8
 800b91a:	ec43 2b1c 	vmov	d12, r2, r3
 800b91e:	910a      	str	r1, [sp, #40]	; 0x28
 800b920:	f7ff f926 	bl	800ab70 <__ulp>
 800b924:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b926:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b92a:	ec59 8b18 	vmov	r8, r9, d8
 800b92e:	e7aa      	b.n	800b886 <_strtod_l+0xa66>
 800b930:	eeb0 7b4d 	vmov.f64	d7, d13
 800b934:	e7ea      	b.n	800b90c <_strtod_l+0xaec>
 800b936:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b93e:	f57f af71 	bpl.w	800b824 <_strtod_l+0xa04>
 800b942:	e4b5      	b.n	800b2b0 <_strtod_l+0x490>
 800b944:	2300      	movs	r3, #0
 800b946:	9308      	str	r3, [sp, #32]
 800b948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b94a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	f7ff baa6 	b.w	800ae9e <_strtod_l+0x7e>
 800b952:	2a65      	cmp	r2, #101	; 0x65
 800b954:	f43f aba2 	beq.w	800b09c <_strtod_l+0x27c>
 800b958:	2a45      	cmp	r2, #69	; 0x45
 800b95a:	f43f ab9f 	beq.w	800b09c <_strtod_l+0x27c>
 800b95e:	2101      	movs	r1, #1
 800b960:	f7ff bbd8 	b.w	800b114 <_strtod_l+0x2f4>
 800b964:	f3af 8000 	nop.w
 800b968:	ffc00000 	.word	0xffc00000
 800b96c:	41dfffff 	.word	0x41dfffff
 800b970:	000fffff 	.word	0x000fffff
 800b974:	7ff00000 	.word	0x7ff00000
 800b978:	7fefffff 	.word	0x7fefffff
 800b97c:	7c9fffff 	.word	0x7c9fffff
 800b980:	7fe00000 	.word	0x7fe00000

0800b984 <_strtod_r>:
 800b984:	4b01      	ldr	r3, [pc, #4]	; (800b98c <_strtod_r+0x8>)
 800b986:	f7ff ba4b 	b.w	800ae20 <_strtod_l>
 800b98a:	bf00      	nop
 800b98c:	20000074 	.word	0x20000074

0800b990 <_strtol_l.constprop.0>:
 800b990:	2b01      	cmp	r3, #1
 800b992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b996:	d001      	beq.n	800b99c <_strtol_l.constprop.0+0xc>
 800b998:	2b24      	cmp	r3, #36	; 0x24
 800b99a:	d906      	bls.n	800b9aa <_strtol_l.constprop.0+0x1a>
 800b99c:	f7fd fe52 	bl	8009644 <__errno>
 800b9a0:	2316      	movs	r3, #22
 800b9a2:	6003      	str	r3, [r0, #0]
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba90 <_strtol_l.constprop.0+0x100>
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	462e      	mov	r6, r5
 800b9b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9b6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b9ba:	f017 0708 	ands.w	r7, r7, #8
 800b9be:	d1f7      	bne.n	800b9b0 <_strtol_l.constprop.0+0x20>
 800b9c0:	2c2d      	cmp	r4, #45	; 0x2d
 800b9c2:	d132      	bne.n	800ba2a <_strtol_l.constprop.0+0x9a>
 800b9c4:	782c      	ldrb	r4, [r5, #0]
 800b9c6:	2701      	movs	r7, #1
 800b9c8:	1cb5      	adds	r5, r6, #2
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d05b      	beq.n	800ba86 <_strtol_l.constprop.0+0xf6>
 800b9ce:	2b10      	cmp	r3, #16
 800b9d0:	d109      	bne.n	800b9e6 <_strtol_l.constprop.0+0x56>
 800b9d2:	2c30      	cmp	r4, #48	; 0x30
 800b9d4:	d107      	bne.n	800b9e6 <_strtol_l.constprop.0+0x56>
 800b9d6:	782c      	ldrb	r4, [r5, #0]
 800b9d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b9dc:	2c58      	cmp	r4, #88	; 0x58
 800b9de:	d14d      	bne.n	800ba7c <_strtol_l.constprop.0+0xec>
 800b9e0:	786c      	ldrb	r4, [r5, #1]
 800b9e2:	2310      	movs	r3, #16
 800b9e4:	3502      	adds	r5, #2
 800b9e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b9ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9ee:	f04f 0e00 	mov.w	lr, #0
 800b9f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b9f6:	4676      	mov	r6, lr
 800b9f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b9fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba00:	f1bc 0f09 	cmp.w	ip, #9
 800ba04:	d816      	bhi.n	800ba34 <_strtol_l.constprop.0+0xa4>
 800ba06:	4664      	mov	r4, ip
 800ba08:	42a3      	cmp	r3, r4
 800ba0a:	dd24      	ble.n	800ba56 <_strtol_l.constprop.0+0xc6>
 800ba0c:	f1be 3fff 	cmp.w	lr, #4294967295
 800ba10:	d008      	beq.n	800ba24 <_strtol_l.constprop.0+0x94>
 800ba12:	45b1      	cmp	r9, r6
 800ba14:	d31c      	bcc.n	800ba50 <_strtol_l.constprop.0+0xc0>
 800ba16:	d101      	bne.n	800ba1c <_strtol_l.constprop.0+0x8c>
 800ba18:	45a2      	cmp	sl, r4
 800ba1a:	db19      	blt.n	800ba50 <_strtol_l.constprop.0+0xc0>
 800ba1c:	fb06 4603 	mla	r6, r6, r3, r4
 800ba20:	f04f 0e01 	mov.w	lr, #1
 800ba24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba28:	e7e8      	b.n	800b9fc <_strtol_l.constprop.0+0x6c>
 800ba2a:	2c2b      	cmp	r4, #43	; 0x2b
 800ba2c:	bf04      	itt	eq
 800ba2e:	782c      	ldrbeq	r4, [r5, #0]
 800ba30:	1cb5      	addeq	r5, r6, #2
 800ba32:	e7ca      	b.n	800b9ca <_strtol_l.constprop.0+0x3a>
 800ba34:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba38:	f1bc 0f19 	cmp.w	ip, #25
 800ba3c:	d801      	bhi.n	800ba42 <_strtol_l.constprop.0+0xb2>
 800ba3e:	3c37      	subs	r4, #55	; 0x37
 800ba40:	e7e2      	b.n	800ba08 <_strtol_l.constprop.0+0x78>
 800ba42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba46:	f1bc 0f19 	cmp.w	ip, #25
 800ba4a:	d804      	bhi.n	800ba56 <_strtol_l.constprop.0+0xc6>
 800ba4c:	3c57      	subs	r4, #87	; 0x57
 800ba4e:	e7db      	b.n	800ba08 <_strtol_l.constprop.0+0x78>
 800ba50:	f04f 3eff 	mov.w	lr, #4294967295
 800ba54:	e7e6      	b.n	800ba24 <_strtol_l.constprop.0+0x94>
 800ba56:	f1be 3fff 	cmp.w	lr, #4294967295
 800ba5a:	d105      	bne.n	800ba68 <_strtol_l.constprop.0+0xd8>
 800ba5c:	2322      	movs	r3, #34	; 0x22
 800ba5e:	6003      	str	r3, [r0, #0]
 800ba60:	4646      	mov	r6, r8
 800ba62:	b942      	cbnz	r2, 800ba76 <_strtol_l.constprop.0+0xe6>
 800ba64:	4630      	mov	r0, r6
 800ba66:	e79e      	b.n	800b9a6 <_strtol_l.constprop.0+0x16>
 800ba68:	b107      	cbz	r7, 800ba6c <_strtol_l.constprop.0+0xdc>
 800ba6a:	4276      	negs	r6, r6
 800ba6c:	2a00      	cmp	r2, #0
 800ba6e:	d0f9      	beq.n	800ba64 <_strtol_l.constprop.0+0xd4>
 800ba70:	f1be 0f00 	cmp.w	lr, #0
 800ba74:	d000      	beq.n	800ba78 <_strtol_l.constprop.0+0xe8>
 800ba76:	1e69      	subs	r1, r5, #1
 800ba78:	6011      	str	r1, [r2, #0]
 800ba7a:	e7f3      	b.n	800ba64 <_strtol_l.constprop.0+0xd4>
 800ba7c:	2430      	movs	r4, #48	; 0x30
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1b1      	bne.n	800b9e6 <_strtol_l.constprop.0+0x56>
 800ba82:	2308      	movs	r3, #8
 800ba84:	e7af      	b.n	800b9e6 <_strtol_l.constprop.0+0x56>
 800ba86:	2c30      	cmp	r4, #48	; 0x30
 800ba88:	d0a5      	beq.n	800b9d6 <_strtol_l.constprop.0+0x46>
 800ba8a:	230a      	movs	r3, #10
 800ba8c:	e7ab      	b.n	800b9e6 <_strtol_l.constprop.0+0x56>
 800ba8e:	bf00      	nop
 800ba90:	080211e9 	.word	0x080211e9

0800ba94 <_strtol_r>:
 800ba94:	f7ff bf7c 	b.w	800b990 <_strtol_l.constprop.0>

0800ba98 <__ssputs_r>:
 800ba98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9c:	688e      	ldr	r6, [r1, #8]
 800ba9e:	461f      	mov	r7, r3
 800baa0:	42be      	cmp	r6, r7
 800baa2:	680b      	ldr	r3, [r1, #0]
 800baa4:	4682      	mov	sl, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	4690      	mov	r8, r2
 800baaa:	d82c      	bhi.n	800bb06 <__ssputs_r+0x6e>
 800baac:	898a      	ldrh	r2, [r1, #12]
 800baae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bab2:	d026      	beq.n	800bb02 <__ssputs_r+0x6a>
 800bab4:	6965      	ldr	r5, [r4, #20]
 800bab6:	6909      	ldr	r1, [r1, #16]
 800bab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800babc:	eba3 0901 	sub.w	r9, r3, r1
 800bac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bac4:	1c7b      	adds	r3, r7, #1
 800bac6:	444b      	add	r3, r9
 800bac8:	106d      	asrs	r5, r5, #1
 800baca:	429d      	cmp	r5, r3
 800bacc:	bf38      	it	cc
 800bace:	461d      	movcc	r5, r3
 800bad0:	0553      	lsls	r3, r2, #21
 800bad2:	d527      	bpl.n	800bb24 <__ssputs_r+0x8c>
 800bad4:	4629      	mov	r1, r5
 800bad6:	f7fe fc53 	bl	800a380 <_malloc_r>
 800bada:	4606      	mov	r6, r0
 800badc:	b360      	cbz	r0, 800bb38 <__ssputs_r+0xa0>
 800bade:	6921      	ldr	r1, [r4, #16]
 800bae0:	464a      	mov	r2, r9
 800bae2:	f000 fa1b 	bl	800bf1c <memcpy>
 800bae6:	89a3      	ldrh	r3, [r4, #12]
 800bae8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800baec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	6126      	str	r6, [r4, #16]
 800baf4:	6165      	str	r5, [r4, #20]
 800baf6:	444e      	add	r6, r9
 800baf8:	eba5 0509 	sub.w	r5, r5, r9
 800bafc:	6026      	str	r6, [r4, #0]
 800bafe:	60a5      	str	r5, [r4, #8]
 800bb00:	463e      	mov	r6, r7
 800bb02:	42be      	cmp	r6, r7
 800bb04:	d900      	bls.n	800bb08 <__ssputs_r+0x70>
 800bb06:	463e      	mov	r6, r7
 800bb08:	6820      	ldr	r0, [r4, #0]
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	4641      	mov	r1, r8
 800bb0e:	f000 f9c9 	bl	800bea4 <memmove>
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	1b9b      	subs	r3, r3, r6
 800bb16:	60a3      	str	r3, [r4, #8]
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	4433      	add	r3, r6
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	2000      	movs	r0, #0
 800bb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb24:	462a      	mov	r2, r5
 800bb26:	f000 fdac 	bl	800c682 <_realloc_r>
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d1e0      	bne.n	800baf2 <__ssputs_r+0x5a>
 800bb30:	6921      	ldr	r1, [r4, #16]
 800bb32:	4650      	mov	r0, sl
 800bb34:	f7fe fbb0 	bl	800a298 <_free_r>
 800bb38:	230c      	movs	r3, #12
 800bb3a:	f8ca 3000 	str.w	r3, [sl]
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4a:	e7e9      	b.n	800bb20 <__ssputs_r+0x88>

0800bb4c <_svfiprintf_r>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	4698      	mov	r8, r3
 800bb52:	898b      	ldrh	r3, [r1, #12]
 800bb54:	061b      	lsls	r3, r3, #24
 800bb56:	b09d      	sub	sp, #116	; 0x74
 800bb58:	4607      	mov	r7, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	d50e      	bpl.n	800bb7e <_svfiprintf_r+0x32>
 800bb60:	690b      	ldr	r3, [r1, #16]
 800bb62:	b963      	cbnz	r3, 800bb7e <_svfiprintf_r+0x32>
 800bb64:	2140      	movs	r1, #64	; 0x40
 800bb66:	f7fe fc0b 	bl	800a380 <_malloc_r>
 800bb6a:	6028      	str	r0, [r5, #0]
 800bb6c:	6128      	str	r0, [r5, #16]
 800bb6e:	b920      	cbnz	r0, 800bb7a <_svfiprintf_r+0x2e>
 800bb70:	230c      	movs	r3, #12
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	e0d0      	b.n	800bd1c <_svfiprintf_r+0x1d0>
 800bb7a:	2340      	movs	r3, #64	; 0x40
 800bb7c:	616b      	str	r3, [r5, #20]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9309      	str	r3, [sp, #36]	; 0x24
 800bb82:	2320      	movs	r3, #32
 800bb84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb88:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb8c:	2330      	movs	r3, #48	; 0x30
 800bb8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd34 <_svfiprintf_r+0x1e8>
 800bb92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb96:	f04f 0901 	mov.w	r9, #1
 800bb9a:	4623      	mov	r3, r4
 800bb9c:	469a      	mov	sl, r3
 800bb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba2:	b10a      	cbz	r2, 800bba8 <_svfiprintf_r+0x5c>
 800bba4:	2a25      	cmp	r2, #37	; 0x25
 800bba6:	d1f9      	bne.n	800bb9c <_svfiprintf_r+0x50>
 800bba8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbac:	d00b      	beq.n	800bbc6 <_svfiprintf_r+0x7a>
 800bbae:	465b      	mov	r3, fp
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f7ff ff6f 	bl	800ba98 <__ssputs_r>
 800bbba:	3001      	adds	r0, #1
 800bbbc:	f000 80a9 	beq.w	800bd12 <_svfiprintf_r+0x1c6>
 800bbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbc2:	445a      	add	r2, fp
 800bbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 80a1 	beq.w	800bd12 <_svfiprintf_r+0x1c6>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbda:	f10a 0a01 	add.w	sl, sl, #1
 800bbde:	9304      	str	r3, [sp, #16]
 800bbe0:	9307      	str	r3, [sp, #28]
 800bbe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbe6:	931a      	str	r3, [sp, #104]	; 0x68
 800bbe8:	4654      	mov	r4, sl
 800bbea:	2205      	movs	r2, #5
 800bbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf0:	4850      	ldr	r0, [pc, #320]	; (800bd34 <_svfiprintf_r+0x1e8>)
 800bbf2:	f7f4 fb25 	bl	8000240 <memchr>
 800bbf6:	9a04      	ldr	r2, [sp, #16]
 800bbf8:	b9d8      	cbnz	r0, 800bc32 <_svfiprintf_r+0xe6>
 800bbfa:	06d0      	lsls	r0, r2, #27
 800bbfc:	bf44      	itt	mi
 800bbfe:	2320      	movmi	r3, #32
 800bc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc04:	0711      	lsls	r1, r2, #28
 800bc06:	bf44      	itt	mi
 800bc08:	232b      	movmi	r3, #43	; 0x2b
 800bc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc12:	2b2a      	cmp	r3, #42	; 0x2a
 800bc14:	d015      	beq.n	800bc42 <_svfiprintf_r+0xf6>
 800bc16:	9a07      	ldr	r2, [sp, #28]
 800bc18:	4654      	mov	r4, sl
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	f04f 0c0a 	mov.w	ip, #10
 800bc20:	4621      	mov	r1, r4
 800bc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc26:	3b30      	subs	r3, #48	; 0x30
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	d94d      	bls.n	800bcc8 <_svfiprintf_r+0x17c>
 800bc2c:	b1b0      	cbz	r0, 800bc5c <_svfiprintf_r+0x110>
 800bc2e:	9207      	str	r2, [sp, #28]
 800bc30:	e014      	b.n	800bc5c <_svfiprintf_r+0x110>
 800bc32:	eba0 0308 	sub.w	r3, r0, r8
 800bc36:	fa09 f303 	lsl.w	r3, r9, r3
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	46a2      	mov	sl, r4
 800bc40:	e7d2      	b.n	800bbe8 <_svfiprintf_r+0x9c>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	1d19      	adds	r1, r3, #4
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	9103      	str	r1, [sp, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bfbb      	ittet	lt
 800bc4e:	425b      	neglt	r3, r3
 800bc50:	f042 0202 	orrlt.w	r2, r2, #2
 800bc54:	9307      	strge	r3, [sp, #28]
 800bc56:	9307      	strlt	r3, [sp, #28]
 800bc58:	bfb8      	it	lt
 800bc5a:	9204      	strlt	r2, [sp, #16]
 800bc5c:	7823      	ldrb	r3, [r4, #0]
 800bc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc60:	d10c      	bne.n	800bc7c <_svfiprintf_r+0x130>
 800bc62:	7863      	ldrb	r3, [r4, #1]
 800bc64:	2b2a      	cmp	r3, #42	; 0x2a
 800bc66:	d134      	bne.n	800bcd2 <_svfiprintf_r+0x186>
 800bc68:	9b03      	ldr	r3, [sp, #12]
 800bc6a:	1d1a      	adds	r2, r3, #4
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	9203      	str	r2, [sp, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfb8      	it	lt
 800bc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc78:	3402      	adds	r4, #2
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd44 <_svfiprintf_r+0x1f8>
 800bc80:	7821      	ldrb	r1, [r4, #0]
 800bc82:	2203      	movs	r2, #3
 800bc84:	4650      	mov	r0, sl
 800bc86:	f7f4 fadb 	bl	8000240 <memchr>
 800bc8a:	b138      	cbz	r0, 800bc9c <_svfiprintf_r+0x150>
 800bc8c:	9b04      	ldr	r3, [sp, #16]
 800bc8e:	eba0 000a 	sub.w	r0, r0, sl
 800bc92:	2240      	movs	r2, #64	; 0x40
 800bc94:	4082      	lsls	r2, r0
 800bc96:	4313      	orrs	r3, r2
 800bc98:	3401      	adds	r4, #1
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca0:	4825      	ldr	r0, [pc, #148]	; (800bd38 <_svfiprintf_r+0x1ec>)
 800bca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bca6:	2206      	movs	r2, #6
 800bca8:	f7f4 faca 	bl	8000240 <memchr>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d038      	beq.n	800bd22 <_svfiprintf_r+0x1d6>
 800bcb0:	4b22      	ldr	r3, [pc, #136]	; (800bd3c <_svfiprintf_r+0x1f0>)
 800bcb2:	bb1b      	cbnz	r3, 800bcfc <_svfiprintf_r+0x1b0>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	3307      	adds	r3, #7
 800bcb8:	f023 0307 	bic.w	r3, r3, #7
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	9303      	str	r3, [sp, #12]
 800bcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc2:	4433      	add	r3, r6
 800bcc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc6:	e768      	b.n	800bb9a <_svfiprintf_r+0x4e>
 800bcc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bccc:	460c      	mov	r4, r1
 800bcce:	2001      	movs	r0, #1
 800bcd0:	e7a6      	b.n	800bc20 <_svfiprintf_r+0xd4>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	3401      	adds	r4, #1
 800bcd6:	9305      	str	r3, [sp, #20]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	f04f 0c0a 	mov.w	ip, #10
 800bcde:	4620      	mov	r0, r4
 800bce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce4:	3a30      	subs	r2, #48	; 0x30
 800bce6:	2a09      	cmp	r2, #9
 800bce8:	d903      	bls.n	800bcf2 <_svfiprintf_r+0x1a6>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0c6      	beq.n	800bc7c <_svfiprintf_r+0x130>
 800bcee:	9105      	str	r1, [sp, #20]
 800bcf0:	e7c4      	b.n	800bc7c <_svfiprintf_r+0x130>
 800bcf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e7f0      	b.n	800bcde <_svfiprintf_r+0x192>
 800bcfc:	ab03      	add	r3, sp, #12
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	462a      	mov	r2, r5
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <_svfiprintf_r+0x1f4>)
 800bd04:	a904      	add	r1, sp, #16
 800bd06:	4638      	mov	r0, r7
 800bd08:	f7fc fd76 	bl	80087f8 <_printf_float>
 800bd0c:	1c42      	adds	r2, r0, #1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	d1d6      	bne.n	800bcc0 <_svfiprintf_r+0x174>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	065b      	lsls	r3, r3, #25
 800bd16:	f53f af2d 	bmi.w	800bb74 <_svfiprintf_r+0x28>
 800bd1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd1c:	b01d      	add	sp, #116	; 0x74
 800bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd22:	ab03      	add	r3, sp, #12
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	462a      	mov	r2, r5
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <_svfiprintf_r+0x1f4>)
 800bd2a:	a904      	add	r1, sp, #16
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f7fc ffeb 	bl	8008d08 <_printf_i>
 800bd32:	e7eb      	b.n	800bd0c <_svfiprintf_r+0x1c0>
 800bd34:	080212e9 	.word	0x080212e9
 800bd38:	080212f3 	.word	0x080212f3
 800bd3c:	080087f9 	.word	0x080087f9
 800bd40:	0800ba99 	.word	0x0800ba99
 800bd44:	080212ef 	.word	0x080212ef

0800bd48 <__sflush_r>:
 800bd48:	898a      	ldrh	r2, [r1, #12]
 800bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4e:	4605      	mov	r5, r0
 800bd50:	0710      	lsls	r0, r2, #28
 800bd52:	460c      	mov	r4, r1
 800bd54:	d458      	bmi.n	800be08 <__sflush_r+0xc0>
 800bd56:	684b      	ldr	r3, [r1, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc05      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc02      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	d0f9      	beq.n	800bd62 <__sflush_r+0x1a>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd74:	682f      	ldr	r7, [r5, #0]
 800bd76:	6a21      	ldr	r1, [r4, #32]
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	d032      	beq.n	800bde2 <__sflush_r+0x9a>
 800bd7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	075a      	lsls	r2, r3, #29
 800bd82:	d505      	bpl.n	800bd90 <__sflush_r+0x48>
 800bd84:	6863      	ldr	r3, [r4, #4]
 800bd86:	1ac0      	subs	r0, r0, r3
 800bd88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd8a:	b10b      	cbz	r3, 800bd90 <__sflush_r+0x48>
 800bd8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd8e:	1ac0      	subs	r0, r0, r3
 800bd90:	2300      	movs	r3, #0
 800bd92:	4602      	mov	r2, r0
 800bd94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd96:	6a21      	ldr	r1, [r4, #32]
 800bd98:	4628      	mov	r0, r5
 800bd9a:	47b0      	blx	r6
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	d106      	bne.n	800bdb0 <__sflush_r+0x68>
 800bda2:	6829      	ldr	r1, [r5, #0]
 800bda4:	291d      	cmp	r1, #29
 800bda6:	d82b      	bhi.n	800be00 <__sflush_r+0xb8>
 800bda8:	4a29      	ldr	r2, [pc, #164]	; (800be50 <__sflush_r+0x108>)
 800bdaa:	410a      	asrs	r2, r1
 800bdac:	07d6      	lsls	r6, r2, #31
 800bdae:	d427      	bmi.n	800be00 <__sflush_r+0xb8>
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	6062      	str	r2, [r4, #4]
 800bdb4:	04d9      	lsls	r1, r3, #19
 800bdb6:	6922      	ldr	r2, [r4, #16]
 800bdb8:	6022      	str	r2, [r4, #0]
 800bdba:	d504      	bpl.n	800bdc6 <__sflush_r+0x7e>
 800bdbc:	1c42      	adds	r2, r0, #1
 800bdbe:	d101      	bne.n	800bdc4 <__sflush_r+0x7c>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b903      	cbnz	r3, 800bdc6 <__sflush_r+0x7e>
 800bdc4:	6560      	str	r0, [r4, #84]	; 0x54
 800bdc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc8:	602f      	str	r7, [r5, #0]
 800bdca:	2900      	cmp	r1, #0
 800bdcc:	d0c9      	beq.n	800bd62 <__sflush_r+0x1a>
 800bdce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd2:	4299      	cmp	r1, r3
 800bdd4:	d002      	beq.n	800bddc <__sflush_r+0x94>
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f7fe fa5e 	bl	800a298 <_free_r>
 800bddc:	2000      	movs	r0, #0
 800bdde:	6360      	str	r0, [r4, #52]	; 0x34
 800bde0:	e7c0      	b.n	800bd64 <__sflush_r+0x1c>
 800bde2:	2301      	movs	r3, #1
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b0      	blx	r6
 800bde8:	1c41      	adds	r1, r0, #1
 800bdea:	d1c8      	bne.n	800bd7e <__sflush_r+0x36>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0c5      	beq.n	800bd7e <__sflush_r+0x36>
 800bdf2:	2b1d      	cmp	r3, #29
 800bdf4:	d001      	beq.n	800bdfa <__sflush_r+0xb2>
 800bdf6:	2b16      	cmp	r3, #22
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0xb6>
 800bdfa:	602f      	str	r7, [r5, #0]
 800bdfc:	e7b1      	b.n	800bd62 <__sflush_r+0x1a>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	e7ad      	b.n	800bd64 <__sflush_r+0x1c>
 800be08:	690f      	ldr	r7, [r1, #16]
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d0a9      	beq.n	800bd62 <__sflush_r+0x1a>
 800be0e:	0793      	lsls	r3, r2, #30
 800be10:	680e      	ldr	r6, [r1, #0]
 800be12:	bf08      	it	eq
 800be14:	694b      	ldreq	r3, [r1, #20]
 800be16:	600f      	str	r7, [r1, #0]
 800be18:	bf18      	it	ne
 800be1a:	2300      	movne	r3, #0
 800be1c:	eba6 0807 	sub.w	r8, r6, r7
 800be20:	608b      	str	r3, [r1, #8]
 800be22:	f1b8 0f00 	cmp.w	r8, #0
 800be26:	dd9c      	ble.n	800bd62 <__sflush_r+0x1a>
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be2c:	4643      	mov	r3, r8
 800be2e:	463a      	mov	r2, r7
 800be30:	4628      	mov	r0, r5
 800be32:	47b0      	blx	r6
 800be34:	2800      	cmp	r0, #0
 800be36:	dc06      	bgt.n	800be46 <__sflush_r+0xfe>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	e78e      	b.n	800bd64 <__sflush_r+0x1c>
 800be46:	4407      	add	r7, r0
 800be48:	eba8 0800 	sub.w	r8, r8, r0
 800be4c:	e7e9      	b.n	800be22 <__sflush_r+0xda>
 800be4e:	bf00      	nop
 800be50:	dfbffffe 	.word	0xdfbffffe

0800be54 <_fflush_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	690b      	ldr	r3, [r1, #16]
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	b913      	cbnz	r3, 800be64 <_fflush_r+0x10>
 800be5e:	2500      	movs	r5, #0
 800be60:	4628      	mov	r0, r5
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	b118      	cbz	r0, 800be6e <_fflush_r+0x1a>
 800be66:	6a03      	ldr	r3, [r0, #32]
 800be68:	b90b      	cbnz	r3, 800be6e <_fflush_r+0x1a>
 800be6a:	f7fd faff 	bl	800946c <__sinit>
 800be6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0f3      	beq.n	800be5e <_fflush_r+0xa>
 800be76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be78:	07d0      	lsls	r0, r2, #31
 800be7a:	d404      	bmi.n	800be86 <_fflush_r+0x32>
 800be7c:	0599      	lsls	r1, r3, #22
 800be7e:	d402      	bmi.n	800be86 <_fflush_r+0x32>
 800be80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be82:	f7fd fc0a 	bl	800969a <__retarget_lock_acquire_recursive>
 800be86:	4628      	mov	r0, r5
 800be88:	4621      	mov	r1, r4
 800be8a:	f7ff ff5d 	bl	800bd48 <__sflush_r>
 800be8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be90:	07da      	lsls	r2, r3, #31
 800be92:	4605      	mov	r5, r0
 800be94:	d4e4      	bmi.n	800be60 <_fflush_r+0xc>
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	059b      	lsls	r3, r3, #22
 800be9a:	d4e1      	bmi.n	800be60 <_fflush_r+0xc>
 800be9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be9e:	f7fd fbfd 	bl	800969c <__retarget_lock_release_recursive>
 800bea2:	e7dd      	b.n	800be60 <_fflush_r+0xc>

0800bea4 <memmove>:
 800bea4:	4288      	cmp	r0, r1
 800bea6:	b510      	push	{r4, lr}
 800bea8:	eb01 0402 	add.w	r4, r1, r2
 800beac:	d902      	bls.n	800beb4 <memmove+0x10>
 800beae:	4284      	cmp	r4, r0
 800beb0:	4623      	mov	r3, r4
 800beb2:	d807      	bhi.n	800bec4 <memmove+0x20>
 800beb4:	1e43      	subs	r3, r0, #1
 800beb6:	42a1      	cmp	r1, r4
 800beb8:	d008      	beq.n	800becc <memmove+0x28>
 800beba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bec2:	e7f8      	b.n	800beb6 <memmove+0x12>
 800bec4:	4402      	add	r2, r0
 800bec6:	4601      	mov	r1, r0
 800bec8:	428a      	cmp	r2, r1
 800beca:	d100      	bne.n	800bece <memmove+0x2a>
 800becc:	bd10      	pop	{r4, pc}
 800bece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bed6:	e7f7      	b.n	800bec8 <memmove+0x24>

0800bed8 <strncmp>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	b16a      	cbz	r2, 800bef8 <strncmp+0x20>
 800bedc:	3901      	subs	r1, #1
 800bede:	1884      	adds	r4, r0, r2
 800bee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bee8:	429a      	cmp	r2, r3
 800beea:	d103      	bne.n	800bef4 <strncmp+0x1c>
 800beec:	42a0      	cmp	r0, r4
 800beee:	d001      	beq.n	800bef4 <strncmp+0x1c>
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	d1f5      	bne.n	800bee0 <strncmp+0x8>
 800bef4:	1ad0      	subs	r0, r2, r3
 800bef6:	bd10      	pop	{r4, pc}
 800bef8:	4610      	mov	r0, r2
 800befa:	e7fc      	b.n	800bef6 <strncmp+0x1e>

0800befc <_sbrk_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	; (800bf18 <_sbrk_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f6 faa4 	bl	8002454 <_sbrk>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_sbrk_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_sbrk_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	20000610 	.word	0x20000610

0800bf1c <memcpy>:
 800bf1c:	440a      	add	r2, r1
 800bf1e:	4291      	cmp	r1, r2
 800bf20:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf24:	d100      	bne.n	800bf28 <memcpy+0xc>
 800bf26:	4770      	bx	lr
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf32:	4291      	cmp	r1, r2
 800bf34:	d1f9      	bne.n	800bf2a <memcpy+0xe>
 800bf36:	bd10      	pop	{r4, pc}

0800bf38 <nan>:
 800bf38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf40 <nan+0x8>
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	00000000 	.word	0x00000000
 800bf44:	7ff80000 	.word	0x7ff80000

0800bf48 <__assert_func>:
 800bf48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf4a:	4614      	mov	r4, r2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <__assert_func+0x2c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4605      	mov	r5, r0
 800bf54:	68d8      	ldr	r0, [r3, #12]
 800bf56:	b14c      	cbz	r4, 800bf6c <__assert_func+0x24>
 800bf58:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <__assert_func+0x30>)
 800bf5a:	9100      	str	r1, [sp, #0]
 800bf5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf60:	4906      	ldr	r1, [pc, #24]	; (800bf7c <__assert_func+0x34>)
 800bf62:	462b      	mov	r3, r5
 800bf64:	f000 fbca 	bl	800c6fc <fiprintf>
 800bf68:	f000 fbda 	bl	800c720 <abort>
 800bf6c:	4b04      	ldr	r3, [pc, #16]	; (800bf80 <__assert_func+0x38>)
 800bf6e:	461c      	mov	r4, r3
 800bf70:	e7f3      	b.n	800bf5a <__assert_func+0x12>
 800bf72:	bf00      	nop
 800bf74:	20000070 	.word	0x20000070
 800bf78:	08021302 	.word	0x08021302
 800bf7c:	0802130f 	.word	0x0802130f
 800bf80:	0802133d 	.word	0x0802133d

0800bf84 <_calloc_r>:
 800bf84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf86:	fba1 2402 	umull	r2, r4, r1, r2
 800bf8a:	b94c      	cbnz	r4, 800bfa0 <_calloc_r+0x1c>
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	9201      	str	r2, [sp, #4]
 800bf90:	f7fe f9f6 	bl	800a380 <_malloc_r>
 800bf94:	9a01      	ldr	r2, [sp, #4]
 800bf96:	4605      	mov	r5, r0
 800bf98:	b930      	cbnz	r0, 800bfa8 <_calloc_r+0x24>
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	b003      	add	sp, #12
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	220c      	movs	r2, #12
 800bfa2:	6002      	str	r2, [r0, #0]
 800bfa4:	2500      	movs	r5, #0
 800bfa6:	e7f8      	b.n	800bf9a <_calloc_r+0x16>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f7fd faf8 	bl	800959e <memset>
 800bfae:	e7f4      	b.n	800bf9a <_calloc_r+0x16>

0800bfb0 <rshift>:
 800bfb0:	6903      	ldr	r3, [r0, #16]
 800bfb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfbe:	f100 0414 	add.w	r4, r0, #20
 800bfc2:	dd45      	ble.n	800c050 <rshift+0xa0>
 800bfc4:	f011 011f 	ands.w	r1, r1, #31
 800bfc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfd0:	d10c      	bne.n	800bfec <rshift+0x3c>
 800bfd2:	f100 0710 	add.w	r7, r0, #16
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	42b1      	cmp	r1, r6
 800bfda:	d334      	bcc.n	800c046 <rshift+0x96>
 800bfdc:	1a9b      	subs	r3, r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	1eea      	subs	r2, r5, #3
 800bfe2:	4296      	cmp	r6, r2
 800bfe4:	bf38      	it	cc
 800bfe6:	2300      	movcc	r3, #0
 800bfe8:	4423      	add	r3, r4
 800bfea:	e015      	b.n	800c018 <rshift+0x68>
 800bfec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bff0:	f1c1 0820 	rsb	r8, r1, #32
 800bff4:	40cf      	lsrs	r7, r1
 800bff6:	f105 0e04 	add.w	lr, r5, #4
 800bffa:	46a1      	mov	r9, r4
 800bffc:	4576      	cmp	r6, lr
 800bffe:	46f4      	mov	ip, lr
 800c000:	d815      	bhi.n	800c02e <rshift+0x7e>
 800c002:	1a9a      	subs	r2, r3, r2
 800c004:	0092      	lsls	r2, r2, #2
 800c006:	3a04      	subs	r2, #4
 800c008:	3501      	adds	r5, #1
 800c00a:	42ae      	cmp	r6, r5
 800c00c:	bf38      	it	cc
 800c00e:	2200      	movcc	r2, #0
 800c010:	18a3      	adds	r3, r4, r2
 800c012:	50a7      	str	r7, [r4, r2]
 800c014:	b107      	cbz	r7, 800c018 <rshift+0x68>
 800c016:	3304      	adds	r3, #4
 800c018:	1b1a      	subs	r2, r3, r4
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c020:	bf08      	it	eq
 800c022:	2300      	moveq	r3, #0
 800c024:	6102      	str	r2, [r0, #16]
 800c026:	bf08      	it	eq
 800c028:	6143      	streq	r3, [r0, #20]
 800c02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02e:	f8dc c000 	ldr.w	ip, [ip]
 800c032:	fa0c fc08 	lsl.w	ip, ip, r8
 800c036:	ea4c 0707 	orr.w	r7, ip, r7
 800c03a:	f849 7b04 	str.w	r7, [r9], #4
 800c03e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c042:	40cf      	lsrs	r7, r1
 800c044:	e7da      	b.n	800bffc <rshift+0x4c>
 800c046:	f851 cb04 	ldr.w	ip, [r1], #4
 800c04a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c04e:	e7c3      	b.n	800bfd8 <rshift+0x28>
 800c050:	4623      	mov	r3, r4
 800c052:	e7e1      	b.n	800c018 <rshift+0x68>

0800c054 <__hexdig_fun>:
 800c054:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c058:	2b09      	cmp	r3, #9
 800c05a:	d802      	bhi.n	800c062 <__hexdig_fun+0xe>
 800c05c:	3820      	subs	r0, #32
 800c05e:	b2c0      	uxtb	r0, r0
 800c060:	4770      	bx	lr
 800c062:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c066:	2b05      	cmp	r3, #5
 800c068:	d801      	bhi.n	800c06e <__hexdig_fun+0x1a>
 800c06a:	3847      	subs	r0, #71	; 0x47
 800c06c:	e7f7      	b.n	800c05e <__hexdig_fun+0xa>
 800c06e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c072:	2b05      	cmp	r3, #5
 800c074:	d801      	bhi.n	800c07a <__hexdig_fun+0x26>
 800c076:	3827      	subs	r0, #39	; 0x27
 800c078:	e7f1      	b.n	800c05e <__hexdig_fun+0xa>
 800c07a:	2000      	movs	r0, #0
 800c07c:	4770      	bx	lr
	...

0800c080 <__gethex>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	4617      	mov	r7, r2
 800c086:	680a      	ldr	r2, [r1, #0]
 800c088:	b085      	sub	sp, #20
 800c08a:	f102 0b02 	add.w	fp, r2, #2
 800c08e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c092:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c096:	4681      	mov	r9, r0
 800c098:	468a      	mov	sl, r1
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	32fe      	adds	r2, #254	; 0xfe
 800c09e:	eb02 030b 	add.w	r3, r2, fp
 800c0a2:	46d8      	mov	r8, fp
 800c0a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	2830      	cmp	r0, #48	; 0x30
 800c0ac:	d0f7      	beq.n	800c09e <__gethex+0x1e>
 800c0ae:	f7ff ffd1 	bl	800c054 <__hexdig_fun>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d138      	bne.n	800c12a <__gethex+0xaa>
 800c0b8:	49a7      	ldr	r1, [pc, #668]	; (800c358 <__gethex+0x2d8>)
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	4640      	mov	r0, r8
 800c0be:	f7ff ff0b 	bl	800bed8 <strncmp>
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d169      	bne.n	800c19c <__gethex+0x11c>
 800c0c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c0cc:	465d      	mov	r5, fp
 800c0ce:	f7ff ffc1 	bl	800c054 <__hexdig_fun>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d064      	beq.n	800c1a0 <__gethex+0x120>
 800c0d6:	465a      	mov	r2, fp
 800c0d8:	7810      	ldrb	r0, [r2, #0]
 800c0da:	2830      	cmp	r0, #48	; 0x30
 800c0dc:	4690      	mov	r8, r2
 800c0de:	f102 0201 	add.w	r2, r2, #1
 800c0e2:	d0f9      	beq.n	800c0d8 <__gethex+0x58>
 800c0e4:	f7ff ffb6 	bl	800c054 <__hexdig_fun>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	fab0 f480 	clz	r4, r0
 800c0ee:	0964      	lsrs	r4, r4, #5
 800c0f0:	465e      	mov	r6, fp
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	4615      	mov	r5, r2
 800c0f8:	3201      	adds	r2, #1
 800c0fa:	7828      	ldrb	r0, [r5, #0]
 800c0fc:	f7ff ffaa 	bl	800c054 <__hexdig_fun>
 800c100:	2800      	cmp	r0, #0
 800c102:	d1f8      	bne.n	800c0f6 <__gethex+0x76>
 800c104:	4994      	ldr	r1, [pc, #592]	; (800c358 <__gethex+0x2d8>)
 800c106:	2201      	movs	r2, #1
 800c108:	4628      	mov	r0, r5
 800c10a:	f7ff fee5 	bl	800bed8 <strncmp>
 800c10e:	b978      	cbnz	r0, 800c130 <__gethex+0xb0>
 800c110:	b946      	cbnz	r6, 800c124 <__gethex+0xa4>
 800c112:	1c6e      	adds	r6, r5, #1
 800c114:	4632      	mov	r2, r6
 800c116:	4615      	mov	r5, r2
 800c118:	3201      	adds	r2, #1
 800c11a:	7828      	ldrb	r0, [r5, #0]
 800c11c:	f7ff ff9a 	bl	800c054 <__hexdig_fun>
 800c120:	2800      	cmp	r0, #0
 800c122:	d1f8      	bne.n	800c116 <__gethex+0x96>
 800c124:	1b73      	subs	r3, r6, r5
 800c126:	009e      	lsls	r6, r3, #2
 800c128:	e004      	b.n	800c134 <__gethex+0xb4>
 800c12a:	2400      	movs	r4, #0
 800c12c:	4626      	mov	r6, r4
 800c12e:	e7e1      	b.n	800c0f4 <__gethex+0x74>
 800c130:	2e00      	cmp	r6, #0
 800c132:	d1f7      	bne.n	800c124 <__gethex+0xa4>
 800c134:	782b      	ldrb	r3, [r5, #0]
 800c136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c13a:	2b50      	cmp	r3, #80	; 0x50
 800c13c:	d13d      	bne.n	800c1ba <__gethex+0x13a>
 800c13e:	786b      	ldrb	r3, [r5, #1]
 800c140:	2b2b      	cmp	r3, #43	; 0x2b
 800c142:	d02f      	beq.n	800c1a4 <__gethex+0x124>
 800c144:	2b2d      	cmp	r3, #45	; 0x2d
 800c146:	d031      	beq.n	800c1ac <__gethex+0x12c>
 800c148:	1c69      	adds	r1, r5, #1
 800c14a:	f04f 0b00 	mov.w	fp, #0
 800c14e:	7808      	ldrb	r0, [r1, #0]
 800c150:	f7ff ff80 	bl	800c054 <__hexdig_fun>
 800c154:	1e42      	subs	r2, r0, #1
 800c156:	b2d2      	uxtb	r2, r2
 800c158:	2a18      	cmp	r2, #24
 800c15a:	d82e      	bhi.n	800c1ba <__gethex+0x13a>
 800c15c:	f1a0 0210 	sub.w	r2, r0, #16
 800c160:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c164:	f7ff ff76 	bl	800c054 <__hexdig_fun>
 800c168:	f100 3cff 	add.w	ip, r0, #4294967295
 800c16c:	fa5f fc8c 	uxtb.w	ip, ip
 800c170:	f1bc 0f18 	cmp.w	ip, #24
 800c174:	d91d      	bls.n	800c1b2 <__gethex+0x132>
 800c176:	f1bb 0f00 	cmp.w	fp, #0
 800c17a:	d000      	beq.n	800c17e <__gethex+0xfe>
 800c17c:	4252      	negs	r2, r2
 800c17e:	4416      	add	r6, r2
 800c180:	f8ca 1000 	str.w	r1, [sl]
 800c184:	b1dc      	cbz	r4, 800c1be <__gethex+0x13e>
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	bf14      	ite	ne
 800c18c:	f04f 0800 	movne.w	r8, #0
 800c190:	f04f 0806 	moveq.w	r8, #6
 800c194:	4640      	mov	r0, r8
 800c196:	b005      	add	sp, #20
 800c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19c:	4645      	mov	r5, r8
 800c19e:	4626      	mov	r6, r4
 800c1a0:	2401      	movs	r4, #1
 800c1a2:	e7c7      	b.n	800c134 <__gethex+0xb4>
 800c1a4:	f04f 0b00 	mov.w	fp, #0
 800c1a8:	1ca9      	adds	r1, r5, #2
 800c1aa:	e7d0      	b.n	800c14e <__gethex+0xce>
 800c1ac:	f04f 0b01 	mov.w	fp, #1
 800c1b0:	e7fa      	b.n	800c1a8 <__gethex+0x128>
 800c1b2:	230a      	movs	r3, #10
 800c1b4:	fb03 0002 	mla	r0, r3, r2, r0
 800c1b8:	e7d0      	b.n	800c15c <__gethex+0xdc>
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	e7e0      	b.n	800c180 <__gethex+0x100>
 800c1be:	eba5 0308 	sub.w	r3, r5, r8
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	2b07      	cmp	r3, #7
 800c1c8:	dc0a      	bgt.n	800c1e0 <__gethex+0x160>
 800c1ca:	4648      	mov	r0, r9
 800c1cc:	f7fe f964 	bl	800a498 <_Balloc>
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	b940      	cbnz	r0, 800c1e6 <__gethex+0x166>
 800c1d4:	4b61      	ldr	r3, [pc, #388]	; (800c35c <__gethex+0x2dc>)
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	21e4      	movs	r1, #228	; 0xe4
 800c1da:	4861      	ldr	r0, [pc, #388]	; (800c360 <__gethex+0x2e0>)
 800c1dc:	f7ff feb4 	bl	800bf48 <__assert_func>
 800c1e0:	3101      	adds	r1, #1
 800c1e2:	105b      	asrs	r3, r3, #1
 800c1e4:	e7ef      	b.n	800c1c6 <__gethex+0x146>
 800c1e6:	f100 0a14 	add.w	sl, r0, #20
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	495a      	ldr	r1, [pc, #360]	; (800c358 <__gethex+0x2d8>)
 800c1ee:	f8cd a004 	str.w	sl, [sp, #4]
 800c1f2:	469b      	mov	fp, r3
 800c1f4:	45a8      	cmp	r8, r5
 800c1f6:	d342      	bcc.n	800c27e <__gethex+0x1fe>
 800c1f8:	9801      	ldr	r0, [sp, #4]
 800c1fa:	f840 bb04 	str.w	fp, [r0], #4
 800c1fe:	eba0 000a 	sub.w	r0, r0, sl
 800c202:	1080      	asrs	r0, r0, #2
 800c204:	6120      	str	r0, [r4, #16]
 800c206:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c20a:	4658      	mov	r0, fp
 800c20c:	f7fe fa36 	bl	800a67c <__hi0bits>
 800c210:	683d      	ldr	r5, [r7, #0]
 800c212:	eba8 0000 	sub.w	r0, r8, r0
 800c216:	42a8      	cmp	r0, r5
 800c218:	dd59      	ble.n	800c2ce <__gethex+0x24e>
 800c21a:	eba0 0805 	sub.w	r8, r0, r5
 800c21e:	4641      	mov	r1, r8
 800c220:	4620      	mov	r0, r4
 800c222:	f7fe fdc2 	bl	800adaa <__any_on>
 800c226:	4683      	mov	fp, r0
 800c228:	b1b8      	cbz	r0, 800c25a <__gethex+0x1da>
 800c22a:	f108 33ff 	add.w	r3, r8, #4294967295
 800c22e:	1159      	asrs	r1, r3, #5
 800c230:	f003 021f 	and.w	r2, r3, #31
 800c234:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c238:	f04f 0b01 	mov.w	fp, #1
 800c23c:	fa0b f202 	lsl.w	r2, fp, r2
 800c240:	420a      	tst	r2, r1
 800c242:	d00a      	beq.n	800c25a <__gethex+0x1da>
 800c244:	455b      	cmp	r3, fp
 800c246:	dd06      	ble.n	800c256 <__gethex+0x1d6>
 800c248:	f1a8 0102 	sub.w	r1, r8, #2
 800c24c:	4620      	mov	r0, r4
 800c24e:	f7fe fdac 	bl	800adaa <__any_on>
 800c252:	2800      	cmp	r0, #0
 800c254:	d138      	bne.n	800c2c8 <__gethex+0x248>
 800c256:	f04f 0b02 	mov.w	fp, #2
 800c25a:	4641      	mov	r1, r8
 800c25c:	4620      	mov	r0, r4
 800c25e:	f7ff fea7 	bl	800bfb0 <rshift>
 800c262:	4446      	add	r6, r8
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	42b3      	cmp	r3, r6
 800c268:	da41      	bge.n	800c2ee <__gethex+0x26e>
 800c26a:	4621      	mov	r1, r4
 800c26c:	4648      	mov	r0, r9
 800c26e:	f7fe f953 	bl	800a518 <_Bfree>
 800c272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c274:	2300      	movs	r3, #0
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c27c:	e78a      	b.n	800c194 <__gethex+0x114>
 800c27e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c282:	2a2e      	cmp	r2, #46	; 0x2e
 800c284:	d014      	beq.n	800c2b0 <__gethex+0x230>
 800c286:	2b20      	cmp	r3, #32
 800c288:	d106      	bne.n	800c298 <__gethex+0x218>
 800c28a:	9b01      	ldr	r3, [sp, #4]
 800c28c:	f843 bb04 	str.w	fp, [r3], #4
 800c290:	f04f 0b00 	mov.w	fp, #0
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	465b      	mov	r3, fp
 800c298:	7828      	ldrb	r0, [r5, #0]
 800c29a:	9303      	str	r3, [sp, #12]
 800c29c:	f7ff feda 	bl	800c054 <__hexdig_fun>
 800c2a0:	9b03      	ldr	r3, [sp, #12]
 800c2a2:	f000 000f 	and.w	r0, r0, #15
 800c2a6:	4098      	lsls	r0, r3
 800c2a8:	ea4b 0b00 	orr.w	fp, fp, r0
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	e7a1      	b.n	800c1f4 <__gethex+0x174>
 800c2b0:	45a8      	cmp	r8, r5
 800c2b2:	d8e8      	bhi.n	800c286 <__gethex+0x206>
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	9303      	str	r3, [sp, #12]
 800c2ba:	f7ff fe0d 	bl	800bed8 <strncmp>
 800c2be:	4926      	ldr	r1, [pc, #152]	; (800c358 <__gethex+0x2d8>)
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d1df      	bne.n	800c286 <__gethex+0x206>
 800c2c6:	e795      	b.n	800c1f4 <__gethex+0x174>
 800c2c8:	f04f 0b03 	mov.w	fp, #3
 800c2cc:	e7c5      	b.n	800c25a <__gethex+0x1da>
 800c2ce:	da0b      	bge.n	800c2e8 <__gethex+0x268>
 800c2d0:	eba5 0800 	sub.w	r8, r5, r0
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4642      	mov	r2, r8
 800c2d8:	4648      	mov	r0, r9
 800c2da:	f7fe fb37 	bl	800a94c <__lshift>
 800c2de:	eba6 0608 	sub.w	r6, r6, r8
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	f100 0a14 	add.w	sl, r0, #20
 800c2e8:	f04f 0b00 	mov.w	fp, #0
 800c2ec:	e7ba      	b.n	800c264 <__gethex+0x1e4>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	42b3      	cmp	r3, r6
 800c2f2:	dd73      	ble.n	800c3dc <__gethex+0x35c>
 800c2f4:	1b9e      	subs	r6, r3, r6
 800c2f6:	42b5      	cmp	r5, r6
 800c2f8:	dc34      	bgt.n	800c364 <__gethex+0x2e4>
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d023      	beq.n	800c348 <__gethex+0x2c8>
 800c300:	2b03      	cmp	r3, #3
 800c302:	d025      	beq.n	800c350 <__gethex+0x2d0>
 800c304:	2b01      	cmp	r3, #1
 800c306:	d115      	bne.n	800c334 <__gethex+0x2b4>
 800c308:	42b5      	cmp	r5, r6
 800c30a:	d113      	bne.n	800c334 <__gethex+0x2b4>
 800c30c:	2d01      	cmp	r5, #1
 800c30e:	d10b      	bne.n	800c328 <__gethex+0x2a8>
 800c310:	9a02      	ldr	r2, [sp, #8]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	2301      	movs	r3, #1
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	f8ca 3000 	str.w	r3, [sl]
 800c31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c320:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c324:	601c      	str	r4, [r3, #0]
 800c326:	e735      	b.n	800c194 <__gethex+0x114>
 800c328:	1e69      	subs	r1, r5, #1
 800c32a:	4620      	mov	r0, r4
 800c32c:	f7fe fd3d 	bl	800adaa <__any_on>
 800c330:	2800      	cmp	r0, #0
 800c332:	d1ed      	bne.n	800c310 <__gethex+0x290>
 800c334:	4621      	mov	r1, r4
 800c336:	4648      	mov	r0, r9
 800c338:	f7fe f8ee 	bl	800a518 <_Bfree>
 800c33c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c33e:	2300      	movs	r3, #0
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c346:	e725      	b.n	800c194 <__gethex+0x114>
 800c348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f2      	bne.n	800c334 <__gethex+0x2b4>
 800c34e:	e7df      	b.n	800c310 <__gethex+0x290>
 800c350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1dc      	bne.n	800c310 <__gethex+0x290>
 800c356:	e7ed      	b.n	800c334 <__gethex+0x2b4>
 800c358:	08021194 	.word	0x08021194
 800c35c:	0802102d 	.word	0x0802102d
 800c360:	0802133e 	.word	0x0802133e
 800c364:	f106 38ff 	add.w	r8, r6, #4294967295
 800c368:	f1bb 0f00 	cmp.w	fp, #0
 800c36c:	d133      	bne.n	800c3d6 <__gethex+0x356>
 800c36e:	f1b8 0f00 	cmp.w	r8, #0
 800c372:	d004      	beq.n	800c37e <__gethex+0x2fe>
 800c374:	4641      	mov	r1, r8
 800c376:	4620      	mov	r0, r4
 800c378:	f7fe fd17 	bl	800adaa <__any_on>
 800c37c:	4683      	mov	fp, r0
 800c37e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c382:	2301      	movs	r3, #1
 800c384:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c388:	f008 081f 	and.w	r8, r8, #31
 800c38c:	fa03 f308 	lsl.w	r3, r3, r8
 800c390:	4213      	tst	r3, r2
 800c392:	4631      	mov	r1, r6
 800c394:	4620      	mov	r0, r4
 800c396:	bf18      	it	ne
 800c398:	f04b 0b02 	orrne.w	fp, fp, #2
 800c39c:	1bad      	subs	r5, r5, r6
 800c39e:	f7ff fe07 	bl	800bfb0 <rshift>
 800c3a2:	687e      	ldr	r6, [r7, #4]
 800c3a4:	f04f 0802 	mov.w	r8, #2
 800c3a8:	f1bb 0f00 	cmp.w	fp, #0
 800c3ac:	d04a      	beq.n	800c444 <__gethex+0x3c4>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d016      	beq.n	800c3e2 <__gethex+0x362>
 800c3b4:	2b03      	cmp	r3, #3
 800c3b6:	d018      	beq.n	800c3ea <__gethex+0x36a>
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d109      	bne.n	800c3d0 <__gethex+0x350>
 800c3bc:	f01b 0f02 	tst.w	fp, #2
 800c3c0:	d006      	beq.n	800c3d0 <__gethex+0x350>
 800c3c2:	f8da 3000 	ldr.w	r3, [sl]
 800c3c6:	ea4b 0b03 	orr.w	fp, fp, r3
 800c3ca:	f01b 0f01 	tst.w	fp, #1
 800c3ce:	d10f      	bne.n	800c3f0 <__gethex+0x370>
 800c3d0:	f048 0810 	orr.w	r8, r8, #16
 800c3d4:	e036      	b.n	800c444 <__gethex+0x3c4>
 800c3d6:	f04f 0b01 	mov.w	fp, #1
 800c3da:	e7d0      	b.n	800c37e <__gethex+0x2fe>
 800c3dc:	f04f 0801 	mov.w	r8, #1
 800c3e0:	e7e2      	b.n	800c3a8 <__gethex+0x328>
 800c3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3e4:	f1c3 0301 	rsb	r3, r3, #1
 800c3e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0ef      	beq.n	800c3d0 <__gethex+0x350>
 800c3f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3f4:	f104 0214 	add.w	r2, r4, #20
 800c3f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c402:	2300      	movs	r3, #0
 800c404:	4694      	mov	ip, r2
 800c406:	f852 1b04 	ldr.w	r1, [r2], #4
 800c40a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c40e:	d01e      	beq.n	800c44e <__gethex+0x3ce>
 800c410:	3101      	adds	r1, #1
 800c412:	f8cc 1000 	str.w	r1, [ip]
 800c416:	f1b8 0f02 	cmp.w	r8, #2
 800c41a:	f104 0214 	add.w	r2, r4, #20
 800c41e:	d13d      	bne.n	800c49c <__gethex+0x41c>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	3b01      	subs	r3, #1
 800c424:	42ab      	cmp	r3, r5
 800c426:	d10b      	bne.n	800c440 <__gethex+0x3c0>
 800c428:	1169      	asrs	r1, r5, #5
 800c42a:	2301      	movs	r3, #1
 800c42c:	f005 051f 	and.w	r5, r5, #31
 800c430:	fa03 f505 	lsl.w	r5, r3, r5
 800c434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c438:	421d      	tst	r5, r3
 800c43a:	bf18      	it	ne
 800c43c:	f04f 0801 	movne.w	r8, #1
 800c440:	f048 0820 	orr.w	r8, r8, #32
 800c444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c446:	601c      	str	r4, [r3, #0]
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	601e      	str	r6, [r3, #0]
 800c44c:	e6a2      	b.n	800c194 <__gethex+0x114>
 800c44e:	4290      	cmp	r0, r2
 800c450:	f842 3c04 	str.w	r3, [r2, #-4]
 800c454:	d8d6      	bhi.n	800c404 <__gethex+0x384>
 800c456:	68a2      	ldr	r2, [r4, #8]
 800c458:	4593      	cmp	fp, r2
 800c45a:	db17      	blt.n	800c48c <__gethex+0x40c>
 800c45c:	6861      	ldr	r1, [r4, #4]
 800c45e:	4648      	mov	r0, r9
 800c460:	3101      	adds	r1, #1
 800c462:	f7fe f819 	bl	800a498 <_Balloc>
 800c466:	4682      	mov	sl, r0
 800c468:	b918      	cbnz	r0, 800c472 <__gethex+0x3f2>
 800c46a:	4b1b      	ldr	r3, [pc, #108]	; (800c4d8 <__gethex+0x458>)
 800c46c:	4602      	mov	r2, r0
 800c46e:	2184      	movs	r1, #132	; 0x84
 800c470:	e6b3      	b.n	800c1da <__gethex+0x15a>
 800c472:	6922      	ldr	r2, [r4, #16]
 800c474:	3202      	adds	r2, #2
 800c476:	f104 010c 	add.w	r1, r4, #12
 800c47a:	0092      	lsls	r2, r2, #2
 800c47c:	300c      	adds	r0, #12
 800c47e:	f7ff fd4d 	bl	800bf1c <memcpy>
 800c482:	4621      	mov	r1, r4
 800c484:	4648      	mov	r0, r9
 800c486:	f7fe f847 	bl	800a518 <_Bfree>
 800c48a:	4654      	mov	r4, sl
 800c48c:	6922      	ldr	r2, [r4, #16]
 800c48e:	1c51      	adds	r1, r2, #1
 800c490:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c494:	6121      	str	r1, [r4, #16]
 800c496:	2101      	movs	r1, #1
 800c498:	6151      	str	r1, [r2, #20]
 800c49a:	e7bc      	b.n	800c416 <__gethex+0x396>
 800c49c:	6921      	ldr	r1, [r4, #16]
 800c49e:	4559      	cmp	r1, fp
 800c4a0:	dd0b      	ble.n	800c4ba <__gethex+0x43a>
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f7ff fd83 	bl	800bfb0 <rshift>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	3601      	adds	r6, #1
 800c4ae:	42b3      	cmp	r3, r6
 800c4b0:	f6ff aedb 	blt.w	800c26a <__gethex+0x1ea>
 800c4b4:	f04f 0801 	mov.w	r8, #1
 800c4b8:	e7c2      	b.n	800c440 <__gethex+0x3c0>
 800c4ba:	f015 051f 	ands.w	r5, r5, #31
 800c4be:	d0f9      	beq.n	800c4b4 <__gethex+0x434>
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	441a      	add	r2, r3
 800c4c4:	f1c5 0520 	rsb	r5, r5, #32
 800c4c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c4cc:	f7fe f8d6 	bl	800a67c <__hi0bits>
 800c4d0:	42a8      	cmp	r0, r5
 800c4d2:	dbe6      	blt.n	800c4a2 <__gethex+0x422>
 800c4d4:	e7ee      	b.n	800c4b4 <__gethex+0x434>
 800c4d6:	bf00      	nop
 800c4d8:	0802102d 	.word	0x0802102d

0800c4dc <L_shift>:
 800c4dc:	f1c2 0208 	rsb	r2, r2, #8
 800c4e0:	0092      	lsls	r2, r2, #2
 800c4e2:	b570      	push	{r4, r5, r6, lr}
 800c4e4:	f1c2 0620 	rsb	r6, r2, #32
 800c4e8:	6843      	ldr	r3, [r0, #4]
 800c4ea:	6804      	ldr	r4, [r0, #0]
 800c4ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c4f0:	432c      	orrs	r4, r5
 800c4f2:	40d3      	lsrs	r3, r2
 800c4f4:	6004      	str	r4, [r0, #0]
 800c4f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4fa:	4288      	cmp	r0, r1
 800c4fc:	d3f4      	bcc.n	800c4e8 <L_shift+0xc>
 800c4fe:	bd70      	pop	{r4, r5, r6, pc}

0800c500 <__match>:
 800c500:	b530      	push	{r4, r5, lr}
 800c502:	6803      	ldr	r3, [r0, #0]
 800c504:	3301      	adds	r3, #1
 800c506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c50a:	b914      	cbnz	r4, 800c512 <__match+0x12>
 800c50c:	6003      	str	r3, [r0, #0]
 800c50e:	2001      	movs	r0, #1
 800c510:	bd30      	pop	{r4, r5, pc}
 800c512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c516:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c51a:	2d19      	cmp	r5, #25
 800c51c:	bf98      	it	ls
 800c51e:	3220      	addls	r2, #32
 800c520:	42a2      	cmp	r2, r4
 800c522:	d0f0      	beq.n	800c506 <__match+0x6>
 800c524:	2000      	movs	r0, #0
 800c526:	e7f3      	b.n	800c510 <__match+0x10>

0800c528 <__hexnan>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	680b      	ldr	r3, [r1, #0]
 800c52e:	6801      	ldr	r1, [r0, #0]
 800c530:	115e      	asrs	r6, r3, #5
 800c532:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c536:	f013 031f 	ands.w	r3, r3, #31
 800c53a:	b087      	sub	sp, #28
 800c53c:	bf18      	it	ne
 800c53e:	3604      	addne	r6, #4
 800c540:	2500      	movs	r5, #0
 800c542:	1f37      	subs	r7, r6, #4
 800c544:	4682      	mov	sl, r0
 800c546:	4690      	mov	r8, r2
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c54e:	46b9      	mov	r9, r7
 800c550:	463c      	mov	r4, r7
 800c552:	9502      	str	r5, [sp, #8]
 800c554:	46ab      	mov	fp, r5
 800c556:	784a      	ldrb	r2, [r1, #1]
 800c558:	1c4b      	adds	r3, r1, #1
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	b342      	cbz	r2, 800c5b0 <__hexnan+0x88>
 800c55e:	4610      	mov	r0, r2
 800c560:	9105      	str	r1, [sp, #20]
 800c562:	9204      	str	r2, [sp, #16]
 800c564:	f7ff fd76 	bl	800c054 <__hexdig_fun>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d14f      	bne.n	800c60c <__hexnan+0xe4>
 800c56c:	9a04      	ldr	r2, [sp, #16]
 800c56e:	9905      	ldr	r1, [sp, #20]
 800c570:	2a20      	cmp	r2, #32
 800c572:	d818      	bhi.n	800c5a6 <__hexnan+0x7e>
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	459b      	cmp	fp, r3
 800c578:	dd13      	ble.n	800c5a2 <__hexnan+0x7a>
 800c57a:	454c      	cmp	r4, r9
 800c57c:	d206      	bcs.n	800c58c <__hexnan+0x64>
 800c57e:	2d07      	cmp	r5, #7
 800c580:	dc04      	bgt.n	800c58c <__hexnan+0x64>
 800c582:	462a      	mov	r2, r5
 800c584:	4649      	mov	r1, r9
 800c586:	4620      	mov	r0, r4
 800c588:	f7ff ffa8 	bl	800c4dc <L_shift>
 800c58c:	4544      	cmp	r4, r8
 800c58e:	d950      	bls.n	800c632 <__hexnan+0x10a>
 800c590:	2300      	movs	r3, #0
 800c592:	f1a4 0904 	sub.w	r9, r4, #4
 800c596:	f844 3c04 	str.w	r3, [r4, #-4]
 800c59a:	f8cd b008 	str.w	fp, [sp, #8]
 800c59e:	464c      	mov	r4, r9
 800c5a0:	461d      	mov	r5, r3
 800c5a2:	9903      	ldr	r1, [sp, #12]
 800c5a4:	e7d7      	b.n	800c556 <__hexnan+0x2e>
 800c5a6:	2a29      	cmp	r2, #41	; 0x29
 800c5a8:	d155      	bne.n	800c656 <__hexnan+0x12e>
 800c5aa:	3102      	adds	r1, #2
 800c5ac:	f8ca 1000 	str.w	r1, [sl]
 800c5b0:	f1bb 0f00 	cmp.w	fp, #0
 800c5b4:	d04f      	beq.n	800c656 <__hexnan+0x12e>
 800c5b6:	454c      	cmp	r4, r9
 800c5b8:	d206      	bcs.n	800c5c8 <__hexnan+0xa0>
 800c5ba:	2d07      	cmp	r5, #7
 800c5bc:	dc04      	bgt.n	800c5c8 <__hexnan+0xa0>
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4649      	mov	r1, r9
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7ff ff8a 	bl	800c4dc <L_shift>
 800c5c8:	4544      	cmp	r4, r8
 800c5ca:	d934      	bls.n	800c636 <__hexnan+0x10e>
 800c5cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5da:	429f      	cmp	r7, r3
 800c5dc:	d2f9      	bcs.n	800c5d2 <__hexnan+0xaa>
 800c5de:	1b3b      	subs	r3, r7, r4
 800c5e0:	f023 0303 	bic.w	r3, r3, #3
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	3e03      	subs	r6, #3
 800c5e8:	3401      	adds	r4, #1
 800c5ea:	42a6      	cmp	r6, r4
 800c5ec:	bf38      	it	cc
 800c5ee:	2304      	movcc	r3, #4
 800c5f0:	4443      	add	r3, r8
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f843 2b04 	str.w	r2, [r3], #4
 800c5f8:	429f      	cmp	r7, r3
 800c5fa:	d2fb      	bcs.n	800c5f4 <__hexnan+0xcc>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	b91b      	cbnz	r3, 800c608 <__hexnan+0xe0>
 800c600:	4547      	cmp	r7, r8
 800c602:	d126      	bne.n	800c652 <__hexnan+0x12a>
 800c604:	2301      	movs	r3, #1
 800c606:	603b      	str	r3, [r7, #0]
 800c608:	2005      	movs	r0, #5
 800c60a:	e025      	b.n	800c658 <__hexnan+0x130>
 800c60c:	3501      	adds	r5, #1
 800c60e:	2d08      	cmp	r5, #8
 800c610:	f10b 0b01 	add.w	fp, fp, #1
 800c614:	dd06      	ble.n	800c624 <__hexnan+0xfc>
 800c616:	4544      	cmp	r4, r8
 800c618:	d9c3      	bls.n	800c5a2 <__hexnan+0x7a>
 800c61a:	2300      	movs	r3, #0
 800c61c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c620:	2501      	movs	r5, #1
 800c622:	3c04      	subs	r4, #4
 800c624:	6822      	ldr	r2, [r4, #0]
 800c626:	f000 000f 	and.w	r0, r0, #15
 800c62a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c62e:	6020      	str	r0, [r4, #0]
 800c630:	e7b7      	b.n	800c5a2 <__hexnan+0x7a>
 800c632:	2508      	movs	r5, #8
 800c634:	e7b5      	b.n	800c5a2 <__hexnan+0x7a>
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d0df      	beq.n	800c5fc <__hexnan+0xd4>
 800c63c:	f1c3 0320 	rsb	r3, r3, #32
 800c640:	f04f 32ff 	mov.w	r2, #4294967295
 800c644:	40da      	lsrs	r2, r3
 800c646:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c64a:	4013      	ands	r3, r2
 800c64c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c650:	e7d4      	b.n	800c5fc <__hexnan+0xd4>
 800c652:	3f04      	subs	r7, #4
 800c654:	e7d2      	b.n	800c5fc <__hexnan+0xd4>
 800c656:	2004      	movs	r0, #4
 800c658:	b007      	add	sp, #28
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c65e <__ascii_mbtowc>:
 800c65e:	b082      	sub	sp, #8
 800c660:	b901      	cbnz	r1, 800c664 <__ascii_mbtowc+0x6>
 800c662:	a901      	add	r1, sp, #4
 800c664:	b142      	cbz	r2, 800c678 <__ascii_mbtowc+0x1a>
 800c666:	b14b      	cbz	r3, 800c67c <__ascii_mbtowc+0x1e>
 800c668:	7813      	ldrb	r3, [r2, #0]
 800c66a:	600b      	str	r3, [r1, #0]
 800c66c:	7812      	ldrb	r2, [r2, #0]
 800c66e:	1e10      	subs	r0, r2, #0
 800c670:	bf18      	it	ne
 800c672:	2001      	movne	r0, #1
 800c674:	b002      	add	sp, #8
 800c676:	4770      	bx	lr
 800c678:	4610      	mov	r0, r2
 800c67a:	e7fb      	b.n	800c674 <__ascii_mbtowc+0x16>
 800c67c:	f06f 0001 	mvn.w	r0, #1
 800c680:	e7f8      	b.n	800c674 <__ascii_mbtowc+0x16>

0800c682 <_realloc_r>:
 800c682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c686:	4680      	mov	r8, r0
 800c688:	4614      	mov	r4, r2
 800c68a:	460e      	mov	r6, r1
 800c68c:	b921      	cbnz	r1, 800c698 <_realloc_r+0x16>
 800c68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	4611      	mov	r1, r2
 800c694:	f7fd be74 	b.w	800a380 <_malloc_r>
 800c698:	b92a      	cbnz	r2, 800c6a6 <_realloc_r+0x24>
 800c69a:	f7fd fdfd 	bl	800a298 <_free_r>
 800c69e:	4625      	mov	r5, r4
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a6:	f000 f842 	bl	800c72e <_malloc_usable_size_r>
 800c6aa:	4284      	cmp	r4, r0
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	d802      	bhi.n	800c6b6 <_realloc_r+0x34>
 800c6b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6b4:	d812      	bhi.n	800c6dc <_realloc_r+0x5a>
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	f7fd fe61 	bl	800a380 <_malloc_r>
 800c6be:	4605      	mov	r5, r0
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d0ed      	beq.n	800c6a0 <_realloc_r+0x1e>
 800c6c4:	42bc      	cmp	r4, r7
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	bf28      	it	cs
 800c6cc:	463a      	movcs	r2, r7
 800c6ce:	f7ff fc25 	bl	800bf1c <memcpy>
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	f7fd fddf 	bl	800a298 <_free_r>
 800c6da:	e7e1      	b.n	800c6a0 <_realloc_r+0x1e>
 800c6dc:	4635      	mov	r5, r6
 800c6de:	e7df      	b.n	800c6a0 <_realloc_r+0x1e>

0800c6e0 <__ascii_wctomb>:
 800c6e0:	b149      	cbz	r1, 800c6f6 <__ascii_wctomb+0x16>
 800c6e2:	2aff      	cmp	r2, #255	; 0xff
 800c6e4:	bf85      	ittet	hi
 800c6e6:	238a      	movhi	r3, #138	; 0x8a
 800c6e8:	6003      	strhi	r3, [r0, #0]
 800c6ea:	700a      	strbls	r2, [r1, #0]
 800c6ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800c6f0:	bf98      	it	ls
 800c6f2:	2001      	movls	r0, #1
 800c6f4:	4770      	bx	lr
 800c6f6:	4608      	mov	r0, r1
 800c6f8:	4770      	bx	lr
	...

0800c6fc <fiprintf>:
 800c6fc:	b40e      	push	{r1, r2, r3}
 800c6fe:	b503      	push	{r0, r1, lr}
 800c700:	4601      	mov	r1, r0
 800c702:	ab03      	add	r3, sp, #12
 800c704:	4805      	ldr	r0, [pc, #20]	; (800c71c <fiprintf+0x20>)
 800c706:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	f000 f83f 	bl	800c790 <_vfiprintf_r>
 800c712:	b002      	add	sp, #8
 800c714:	f85d eb04 	ldr.w	lr, [sp], #4
 800c718:	b003      	add	sp, #12
 800c71a:	4770      	bx	lr
 800c71c:	20000070 	.word	0x20000070

0800c720 <abort>:
 800c720:	b508      	push	{r3, lr}
 800c722:	2006      	movs	r0, #6
 800c724:	f000 fa0c 	bl	800cb40 <raise>
 800c728:	2001      	movs	r0, #1
 800c72a:	f7f5 fe1b 	bl	8002364 <_exit>

0800c72e <_malloc_usable_size_r>:
 800c72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c732:	1f18      	subs	r0, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	bfbc      	itt	lt
 800c738:	580b      	ldrlt	r3, [r1, r0]
 800c73a:	18c0      	addlt	r0, r0, r3
 800c73c:	4770      	bx	lr

0800c73e <__sfputc_r>:
 800c73e:	6893      	ldr	r3, [r2, #8]
 800c740:	3b01      	subs	r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	b410      	push	{r4}
 800c746:	6093      	str	r3, [r2, #8]
 800c748:	da08      	bge.n	800c75c <__sfputc_r+0x1e>
 800c74a:	6994      	ldr	r4, [r2, #24]
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	db01      	blt.n	800c754 <__sfputc_r+0x16>
 800c750:	290a      	cmp	r1, #10
 800c752:	d103      	bne.n	800c75c <__sfputc_r+0x1e>
 800c754:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c758:	f000 b934 	b.w	800c9c4 <__swbuf_r>
 800c75c:	6813      	ldr	r3, [r2, #0]
 800c75e:	1c58      	adds	r0, r3, #1
 800c760:	6010      	str	r0, [r2, #0]
 800c762:	7019      	strb	r1, [r3, #0]
 800c764:	4608      	mov	r0, r1
 800c766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <__sfputs_r>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	4606      	mov	r6, r0
 800c770:	460f      	mov	r7, r1
 800c772:	4614      	mov	r4, r2
 800c774:	18d5      	adds	r5, r2, r3
 800c776:	42ac      	cmp	r4, r5
 800c778:	d101      	bne.n	800c77e <__sfputs_r+0x12>
 800c77a:	2000      	movs	r0, #0
 800c77c:	e007      	b.n	800c78e <__sfputs_r+0x22>
 800c77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c782:	463a      	mov	r2, r7
 800c784:	4630      	mov	r0, r6
 800c786:	f7ff ffda 	bl	800c73e <__sfputc_r>
 800c78a:	1c43      	adds	r3, r0, #1
 800c78c:	d1f3      	bne.n	800c776 <__sfputs_r+0xa>
 800c78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c790 <_vfiprintf_r>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	460d      	mov	r5, r1
 800c796:	b09d      	sub	sp, #116	; 0x74
 800c798:	4614      	mov	r4, r2
 800c79a:	4698      	mov	r8, r3
 800c79c:	4606      	mov	r6, r0
 800c79e:	b118      	cbz	r0, 800c7a8 <_vfiprintf_r+0x18>
 800c7a0:	6a03      	ldr	r3, [r0, #32]
 800c7a2:	b90b      	cbnz	r3, 800c7a8 <_vfiprintf_r+0x18>
 800c7a4:	f7fc fe62 	bl	800946c <__sinit>
 800c7a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7aa:	07d9      	lsls	r1, r3, #31
 800c7ac:	d405      	bmi.n	800c7ba <_vfiprintf_r+0x2a>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d402      	bmi.n	800c7ba <_vfiprintf_r+0x2a>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b6:	f7fc ff70 	bl	800969a <__retarget_lock_acquire_recursive>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	071b      	lsls	r3, r3, #28
 800c7be:	d501      	bpl.n	800c7c4 <_vfiprintf_r+0x34>
 800c7c0:	692b      	ldr	r3, [r5, #16]
 800c7c2:	b99b      	cbnz	r3, 800c7ec <_vfiprintf_r+0x5c>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f000 f93a 	bl	800ca40 <__swsetup_r>
 800c7cc:	b170      	cbz	r0, 800c7ec <_vfiprintf_r+0x5c>
 800c7ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d0:	07dc      	lsls	r4, r3, #31
 800c7d2:	d504      	bpl.n	800c7de <_vfiprintf_r+0x4e>
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d8:	b01d      	add	sp, #116	; 0x74
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	0598      	lsls	r0, r3, #22
 800c7e2:	d4f7      	bmi.n	800c7d4 <_vfiprintf_r+0x44>
 800c7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e6:	f7fc ff59 	bl	800969c <__retarget_lock_release_recursive>
 800c7ea:	e7f3      	b.n	800c7d4 <_vfiprintf_r+0x44>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7fa:	2330      	movs	r3, #48	; 0x30
 800c7fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c9b0 <_vfiprintf_r+0x220>
 800c800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c804:	f04f 0901 	mov.w	r9, #1
 800c808:	4623      	mov	r3, r4
 800c80a:	469a      	mov	sl, r3
 800c80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c810:	b10a      	cbz	r2, 800c816 <_vfiprintf_r+0x86>
 800c812:	2a25      	cmp	r2, #37	; 0x25
 800c814:	d1f9      	bne.n	800c80a <_vfiprintf_r+0x7a>
 800c816:	ebba 0b04 	subs.w	fp, sl, r4
 800c81a:	d00b      	beq.n	800c834 <_vfiprintf_r+0xa4>
 800c81c:	465b      	mov	r3, fp
 800c81e:	4622      	mov	r2, r4
 800c820:	4629      	mov	r1, r5
 800c822:	4630      	mov	r0, r6
 800c824:	f7ff ffa2 	bl	800c76c <__sfputs_r>
 800c828:	3001      	adds	r0, #1
 800c82a:	f000 80a9 	beq.w	800c980 <_vfiprintf_r+0x1f0>
 800c82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c830:	445a      	add	r2, fp
 800c832:	9209      	str	r2, [sp, #36]	; 0x24
 800c834:	f89a 3000 	ldrb.w	r3, [sl]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 80a1 	beq.w	800c980 <_vfiprintf_r+0x1f0>
 800c83e:	2300      	movs	r3, #0
 800c840:	f04f 32ff 	mov.w	r2, #4294967295
 800c844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c848:	f10a 0a01 	add.w	sl, sl, #1
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	9307      	str	r3, [sp, #28]
 800c850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c854:	931a      	str	r3, [sp, #104]	; 0x68
 800c856:	4654      	mov	r4, sl
 800c858:	2205      	movs	r2, #5
 800c85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85e:	4854      	ldr	r0, [pc, #336]	; (800c9b0 <_vfiprintf_r+0x220>)
 800c860:	f7f3 fcee 	bl	8000240 <memchr>
 800c864:	9a04      	ldr	r2, [sp, #16]
 800c866:	b9d8      	cbnz	r0, 800c8a0 <_vfiprintf_r+0x110>
 800c868:	06d1      	lsls	r1, r2, #27
 800c86a:	bf44      	itt	mi
 800c86c:	2320      	movmi	r3, #32
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c872:	0713      	lsls	r3, r2, #28
 800c874:	bf44      	itt	mi
 800c876:	232b      	movmi	r3, #43	; 0x2b
 800c878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c87c:	f89a 3000 	ldrb.w	r3, [sl]
 800c880:	2b2a      	cmp	r3, #42	; 0x2a
 800c882:	d015      	beq.n	800c8b0 <_vfiprintf_r+0x120>
 800c884:	9a07      	ldr	r2, [sp, #28]
 800c886:	4654      	mov	r4, sl
 800c888:	2000      	movs	r0, #0
 800c88a:	f04f 0c0a 	mov.w	ip, #10
 800c88e:	4621      	mov	r1, r4
 800c890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c894:	3b30      	subs	r3, #48	; 0x30
 800c896:	2b09      	cmp	r3, #9
 800c898:	d94d      	bls.n	800c936 <_vfiprintf_r+0x1a6>
 800c89a:	b1b0      	cbz	r0, 800c8ca <_vfiprintf_r+0x13a>
 800c89c:	9207      	str	r2, [sp, #28]
 800c89e:	e014      	b.n	800c8ca <_vfiprintf_r+0x13a>
 800c8a0:	eba0 0308 	sub.w	r3, r0, r8
 800c8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	46a2      	mov	sl, r4
 800c8ae:	e7d2      	b.n	800c856 <_vfiprintf_r+0xc6>
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	1d19      	adds	r1, r3, #4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	9103      	str	r1, [sp, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bfbb      	ittet	lt
 800c8bc:	425b      	neglt	r3, r3
 800c8be:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c2:	9307      	strge	r3, [sp, #28]
 800c8c4:	9307      	strlt	r3, [sp, #28]
 800c8c6:	bfb8      	it	lt
 800c8c8:	9204      	strlt	r2, [sp, #16]
 800c8ca:	7823      	ldrb	r3, [r4, #0]
 800c8cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ce:	d10c      	bne.n	800c8ea <_vfiprintf_r+0x15a>
 800c8d0:	7863      	ldrb	r3, [r4, #1]
 800c8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d4:	d134      	bne.n	800c940 <_vfiprintf_r+0x1b0>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	1d1a      	adds	r2, r3, #4
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	9203      	str	r2, [sp, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	bfb8      	it	lt
 800c8e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8e6:	3402      	adds	r4, #2
 800c8e8:	9305      	str	r3, [sp, #20]
 800c8ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c9c0 <_vfiprintf_r+0x230>
 800c8ee:	7821      	ldrb	r1, [r4, #0]
 800c8f0:	2203      	movs	r2, #3
 800c8f2:	4650      	mov	r0, sl
 800c8f4:	f7f3 fca4 	bl	8000240 <memchr>
 800c8f8:	b138      	cbz	r0, 800c90a <_vfiprintf_r+0x17a>
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	eba0 000a 	sub.w	r0, r0, sl
 800c900:	2240      	movs	r2, #64	; 0x40
 800c902:	4082      	lsls	r2, r0
 800c904:	4313      	orrs	r3, r2
 800c906:	3401      	adds	r4, #1
 800c908:	9304      	str	r3, [sp, #16]
 800c90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90e:	4829      	ldr	r0, [pc, #164]	; (800c9b4 <_vfiprintf_r+0x224>)
 800c910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c914:	2206      	movs	r2, #6
 800c916:	f7f3 fc93 	bl	8000240 <memchr>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d03f      	beq.n	800c99e <_vfiprintf_r+0x20e>
 800c91e:	4b26      	ldr	r3, [pc, #152]	; (800c9b8 <_vfiprintf_r+0x228>)
 800c920:	bb1b      	cbnz	r3, 800c96a <_vfiprintf_r+0x1da>
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	3307      	adds	r3, #7
 800c926:	f023 0307 	bic.w	r3, r3, #7
 800c92a:	3308      	adds	r3, #8
 800c92c:	9303      	str	r3, [sp, #12]
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	443b      	add	r3, r7
 800c932:	9309      	str	r3, [sp, #36]	; 0x24
 800c934:	e768      	b.n	800c808 <_vfiprintf_r+0x78>
 800c936:	fb0c 3202 	mla	r2, ip, r2, r3
 800c93a:	460c      	mov	r4, r1
 800c93c:	2001      	movs	r0, #1
 800c93e:	e7a6      	b.n	800c88e <_vfiprintf_r+0xfe>
 800c940:	2300      	movs	r3, #0
 800c942:	3401      	adds	r4, #1
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	4619      	mov	r1, r3
 800c948:	f04f 0c0a 	mov.w	ip, #10
 800c94c:	4620      	mov	r0, r4
 800c94e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c952:	3a30      	subs	r2, #48	; 0x30
 800c954:	2a09      	cmp	r2, #9
 800c956:	d903      	bls.n	800c960 <_vfiprintf_r+0x1d0>
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0c6      	beq.n	800c8ea <_vfiprintf_r+0x15a>
 800c95c:	9105      	str	r1, [sp, #20]
 800c95e:	e7c4      	b.n	800c8ea <_vfiprintf_r+0x15a>
 800c960:	fb0c 2101 	mla	r1, ip, r1, r2
 800c964:	4604      	mov	r4, r0
 800c966:	2301      	movs	r3, #1
 800c968:	e7f0      	b.n	800c94c <_vfiprintf_r+0x1bc>
 800c96a:	ab03      	add	r3, sp, #12
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	462a      	mov	r2, r5
 800c970:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <_vfiprintf_r+0x22c>)
 800c972:	a904      	add	r1, sp, #16
 800c974:	4630      	mov	r0, r6
 800c976:	f7fb ff3f 	bl	80087f8 <_printf_float>
 800c97a:	4607      	mov	r7, r0
 800c97c:	1c78      	adds	r0, r7, #1
 800c97e:	d1d6      	bne.n	800c92e <_vfiprintf_r+0x19e>
 800c980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c982:	07d9      	lsls	r1, r3, #31
 800c984:	d405      	bmi.n	800c992 <_vfiprintf_r+0x202>
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	059a      	lsls	r2, r3, #22
 800c98a:	d402      	bmi.n	800c992 <_vfiprintf_r+0x202>
 800c98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c98e:	f7fc fe85 	bl	800969c <__retarget_lock_release_recursive>
 800c992:	89ab      	ldrh	r3, [r5, #12]
 800c994:	065b      	lsls	r3, r3, #25
 800c996:	f53f af1d 	bmi.w	800c7d4 <_vfiprintf_r+0x44>
 800c99a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c99c:	e71c      	b.n	800c7d8 <_vfiprintf_r+0x48>
 800c99e:	ab03      	add	r3, sp, #12
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	4b05      	ldr	r3, [pc, #20]	; (800c9bc <_vfiprintf_r+0x22c>)
 800c9a6:	a904      	add	r1, sp, #16
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7fc f9ad 	bl	8008d08 <_printf_i>
 800c9ae:	e7e4      	b.n	800c97a <_vfiprintf_r+0x1ea>
 800c9b0:	080212e9 	.word	0x080212e9
 800c9b4:	080212f3 	.word	0x080212f3
 800c9b8:	080087f9 	.word	0x080087f9
 800c9bc:	0800c76d 	.word	0x0800c76d
 800c9c0:	080212ef 	.word	0x080212ef

0800c9c4 <__swbuf_r>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	460e      	mov	r6, r1
 800c9c8:	4614      	mov	r4, r2
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	b118      	cbz	r0, 800c9d6 <__swbuf_r+0x12>
 800c9ce:	6a03      	ldr	r3, [r0, #32]
 800c9d0:	b90b      	cbnz	r3, 800c9d6 <__swbuf_r+0x12>
 800c9d2:	f7fc fd4b 	bl	800946c <__sinit>
 800c9d6:	69a3      	ldr	r3, [r4, #24]
 800c9d8:	60a3      	str	r3, [r4, #8]
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	071a      	lsls	r2, r3, #28
 800c9de:	d525      	bpl.n	800ca2c <__swbuf_r+0x68>
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	b31b      	cbz	r3, 800ca2c <__swbuf_r+0x68>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	6922      	ldr	r2, [r4, #16]
 800c9e8:	1a98      	subs	r0, r3, r2
 800c9ea:	6963      	ldr	r3, [r4, #20]
 800c9ec:	b2f6      	uxtb	r6, r6
 800c9ee:	4283      	cmp	r3, r0
 800c9f0:	4637      	mov	r7, r6
 800c9f2:	dc04      	bgt.n	800c9fe <__swbuf_r+0x3a>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f7ff fa2c 	bl	800be54 <_fflush_r>
 800c9fc:	b9e0      	cbnz	r0, 800ca38 <__swbuf_r+0x74>
 800c9fe:	68a3      	ldr	r3, [r4, #8]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	60a3      	str	r3, [r4, #8]
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	6022      	str	r2, [r4, #0]
 800ca0a:	701e      	strb	r6, [r3, #0]
 800ca0c:	6962      	ldr	r2, [r4, #20]
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d004      	beq.n	800ca1e <__swbuf_r+0x5a>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	07db      	lsls	r3, r3, #31
 800ca18:	d506      	bpl.n	800ca28 <__swbuf_r+0x64>
 800ca1a:	2e0a      	cmp	r6, #10
 800ca1c:	d104      	bne.n	800ca28 <__swbuf_r+0x64>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7ff fa17 	bl	800be54 <_fflush_r>
 800ca26:	b938      	cbnz	r0, 800ca38 <__swbuf_r+0x74>
 800ca28:	4638      	mov	r0, r7
 800ca2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f000 f806 	bl	800ca40 <__swsetup_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d0d5      	beq.n	800c9e4 <__swbuf_r+0x20>
 800ca38:	f04f 37ff 	mov.w	r7, #4294967295
 800ca3c:	e7f4      	b.n	800ca28 <__swbuf_r+0x64>
	...

0800ca40 <__swsetup_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4b2a      	ldr	r3, [pc, #168]	; (800caec <__swsetup_r+0xac>)
 800ca44:	4605      	mov	r5, r0
 800ca46:	6818      	ldr	r0, [r3, #0]
 800ca48:	460c      	mov	r4, r1
 800ca4a:	b118      	cbz	r0, 800ca54 <__swsetup_r+0x14>
 800ca4c:	6a03      	ldr	r3, [r0, #32]
 800ca4e:	b90b      	cbnz	r3, 800ca54 <__swsetup_r+0x14>
 800ca50:	f7fc fd0c 	bl	800946c <__sinit>
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca5a:	0718      	lsls	r0, r3, #28
 800ca5c:	d422      	bmi.n	800caa4 <__swsetup_r+0x64>
 800ca5e:	06d9      	lsls	r1, r3, #27
 800ca60:	d407      	bmi.n	800ca72 <__swsetup_r+0x32>
 800ca62:	2309      	movs	r3, #9
 800ca64:	602b      	str	r3, [r5, #0]
 800ca66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca6a:	81a3      	strh	r3, [r4, #12]
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	e034      	b.n	800cadc <__swsetup_r+0x9c>
 800ca72:	0758      	lsls	r0, r3, #29
 800ca74:	d512      	bpl.n	800ca9c <__swsetup_r+0x5c>
 800ca76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca78:	b141      	cbz	r1, 800ca8c <__swsetup_r+0x4c>
 800ca7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca7e:	4299      	cmp	r1, r3
 800ca80:	d002      	beq.n	800ca88 <__swsetup_r+0x48>
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7fd fc08 	bl	800a298 <_free_r>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	6363      	str	r3, [r4, #52]	; 0x34
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	2300      	movs	r3, #0
 800ca96:	6063      	str	r3, [r4, #4]
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	89a3      	ldrh	r3, [r4, #12]
 800ca9e:	f043 0308 	orr.w	r3, r3, #8
 800caa2:	81a3      	strh	r3, [r4, #12]
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	b94b      	cbnz	r3, 800cabc <__swsetup_r+0x7c>
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cab2:	d003      	beq.n	800cabc <__swsetup_r+0x7c>
 800cab4:	4621      	mov	r1, r4
 800cab6:	4628      	mov	r0, r5
 800cab8:	f000 f884 	bl	800cbc4 <__smakebuf_r>
 800cabc:	89a0      	ldrh	r0, [r4, #12]
 800cabe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cac2:	f010 0301 	ands.w	r3, r0, #1
 800cac6:	d00a      	beq.n	800cade <__swsetup_r+0x9e>
 800cac8:	2300      	movs	r3, #0
 800caca:	60a3      	str	r3, [r4, #8]
 800cacc:	6963      	ldr	r3, [r4, #20]
 800cace:	425b      	negs	r3, r3
 800cad0:	61a3      	str	r3, [r4, #24]
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	b943      	cbnz	r3, 800cae8 <__swsetup_r+0xa8>
 800cad6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cada:	d1c4      	bne.n	800ca66 <__swsetup_r+0x26>
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	0781      	lsls	r1, r0, #30
 800cae0:	bf58      	it	pl
 800cae2:	6963      	ldrpl	r3, [r4, #20]
 800cae4:	60a3      	str	r3, [r4, #8]
 800cae6:	e7f4      	b.n	800cad2 <__swsetup_r+0x92>
 800cae8:	2000      	movs	r0, #0
 800caea:	e7f7      	b.n	800cadc <__swsetup_r+0x9c>
 800caec:	20000070 	.word	0x20000070

0800caf0 <_raise_r>:
 800caf0:	291f      	cmp	r1, #31
 800caf2:	b538      	push	{r3, r4, r5, lr}
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	d904      	bls.n	800cb04 <_raise_r+0x14>
 800cafa:	2316      	movs	r3, #22
 800cafc:	6003      	str	r3, [r0, #0]
 800cafe:	f04f 30ff 	mov.w	r0, #4294967295
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cb06:	b112      	cbz	r2, 800cb0e <_raise_r+0x1e>
 800cb08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb0c:	b94b      	cbnz	r3, 800cb22 <_raise_r+0x32>
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f000 f830 	bl	800cb74 <_getpid_r>
 800cb14:	462a      	mov	r2, r5
 800cb16:	4601      	mov	r1, r0
 800cb18:	4620      	mov	r0, r4
 800cb1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb1e:	f000 b817 	b.w	800cb50 <_kill_r>
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d00a      	beq.n	800cb3c <_raise_r+0x4c>
 800cb26:	1c59      	adds	r1, r3, #1
 800cb28:	d103      	bne.n	800cb32 <_raise_r+0x42>
 800cb2a:	2316      	movs	r3, #22
 800cb2c:	6003      	str	r3, [r0, #0]
 800cb2e:	2001      	movs	r0, #1
 800cb30:	e7e7      	b.n	800cb02 <_raise_r+0x12>
 800cb32:	2400      	movs	r4, #0
 800cb34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb38:	4628      	mov	r0, r5
 800cb3a:	4798      	blx	r3
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	e7e0      	b.n	800cb02 <_raise_r+0x12>

0800cb40 <raise>:
 800cb40:	4b02      	ldr	r3, [pc, #8]	; (800cb4c <raise+0xc>)
 800cb42:	4601      	mov	r1, r0
 800cb44:	6818      	ldr	r0, [r3, #0]
 800cb46:	f7ff bfd3 	b.w	800caf0 <_raise_r>
 800cb4a:	bf00      	nop
 800cb4c:	20000070 	.word	0x20000070

0800cb50 <_kill_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d07      	ldr	r5, [pc, #28]	; (800cb70 <_kill_r+0x20>)
 800cb54:	2300      	movs	r3, #0
 800cb56:	4604      	mov	r4, r0
 800cb58:	4608      	mov	r0, r1
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	602b      	str	r3, [r5, #0]
 800cb5e:	f7f5 fbf1 	bl	8002344 <_kill>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	d102      	bne.n	800cb6c <_kill_r+0x1c>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	b103      	cbz	r3, 800cb6c <_kill_r+0x1c>
 800cb6a:	6023      	str	r3, [r4, #0]
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000610 	.word	0x20000610

0800cb74 <_getpid_r>:
 800cb74:	f7f5 bbde 	b.w	8002334 <_getpid>

0800cb78 <__swhatbuf_r>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb80:	2900      	cmp	r1, #0
 800cb82:	b096      	sub	sp, #88	; 0x58
 800cb84:	4615      	mov	r5, r2
 800cb86:	461e      	mov	r6, r3
 800cb88:	da0d      	bge.n	800cba6 <__swhatbuf_r+0x2e>
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb90:	f04f 0100 	mov.w	r1, #0
 800cb94:	bf0c      	ite	eq
 800cb96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb9a:	2340      	movne	r3, #64	; 0x40
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	6031      	str	r1, [r6, #0]
 800cba0:	602b      	str	r3, [r5, #0]
 800cba2:	b016      	add	sp, #88	; 0x58
 800cba4:	bd70      	pop	{r4, r5, r6, pc}
 800cba6:	466a      	mov	r2, sp
 800cba8:	f000 f848 	bl	800cc3c <_fstat_r>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	dbec      	blt.n	800cb8a <__swhatbuf_r+0x12>
 800cbb0:	9901      	ldr	r1, [sp, #4]
 800cbb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cbb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cbba:	4259      	negs	r1, r3
 800cbbc:	4159      	adcs	r1, r3
 800cbbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc2:	e7eb      	b.n	800cb9c <__swhatbuf_r+0x24>

0800cbc4 <__smakebuf_r>:
 800cbc4:	898b      	ldrh	r3, [r1, #12]
 800cbc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbc8:	079d      	lsls	r5, r3, #30
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	d507      	bpl.n	800cbe0 <__smakebuf_r+0x1c>
 800cbd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	6123      	str	r3, [r4, #16]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	6163      	str	r3, [r4, #20]
 800cbdc:	b002      	add	sp, #8
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	ab01      	add	r3, sp, #4
 800cbe2:	466a      	mov	r2, sp
 800cbe4:	f7ff ffc8 	bl	800cb78 <__swhatbuf_r>
 800cbe8:	9900      	ldr	r1, [sp, #0]
 800cbea:	4605      	mov	r5, r0
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7fd fbc7 	bl	800a380 <_malloc_r>
 800cbf2:	b948      	cbnz	r0, 800cc08 <__smakebuf_r+0x44>
 800cbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf8:	059a      	lsls	r2, r3, #22
 800cbfa:	d4ef      	bmi.n	800cbdc <__smakebuf_r+0x18>
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	f043 0302 	orr.w	r3, r3, #2
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	e7e3      	b.n	800cbd0 <__smakebuf_r+0xc>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	6020      	str	r0, [r4, #0]
 800cc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	9b00      	ldr	r3, [sp, #0]
 800cc14:	6163      	str	r3, [r4, #20]
 800cc16:	9b01      	ldr	r3, [sp, #4]
 800cc18:	6120      	str	r0, [r4, #16]
 800cc1a:	b15b      	cbz	r3, 800cc34 <__smakebuf_r+0x70>
 800cc1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc20:	4630      	mov	r0, r6
 800cc22:	f000 f81d 	bl	800cc60 <_isatty_r>
 800cc26:	b128      	cbz	r0, 800cc34 <__smakebuf_r+0x70>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f023 0303 	bic.w	r3, r3, #3
 800cc2e:	f043 0301 	orr.w	r3, r3, #1
 800cc32:	81a3      	strh	r3, [r4, #12]
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	431d      	orrs	r5, r3
 800cc38:	81a5      	strh	r5, [r4, #12]
 800cc3a:	e7cf      	b.n	800cbdc <__smakebuf_r+0x18>

0800cc3c <_fstat_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4d07      	ldr	r5, [pc, #28]	; (800cc5c <_fstat_r+0x20>)
 800cc40:	2300      	movs	r3, #0
 800cc42:	4604      	mov	r4, r0
 800cc44:	4608      	mov	r0, r1
 800cc46:	4611      	mov	r1, r2
 800cc48:	602b      	str	r3, [r5, #0]
 800cc4a:	f7f5 fbda 	bl	8002402 <_fstat>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	d102      	bne.n	800cc58 <_fstat_r+0x1c>
 800cc52:	682b      	ldr	r3, [r5, #0]
 800cc54:	b103      	cbz	r3, 800cc58 <_fstat_r+0x1c>
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	bd38      	pop	{r3, r4, r5, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20000610 	.word	0x20000610

0800cc60 <_isatty_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4d06      	ldr	r5, [pc, #24]	; (800cc7c <_isatty_r+0x1c>)
 800cc64:	2300      	movs	r3, #0
 800cc66:	4604      	mov	r4, r0
 800cc68:	4608      	mov	r0, r1
 800cc6a:	602b      	str	r3, [r5, #0]
 800cc6c:	f7f5 fbd9 	bl	8002422 <_isatty>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_isatty_r+0x1a>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_isatty_r+0x1a>
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	20000610 	.word	0x20000610

0800cc80 <_init>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	bf00      	nop
 800cc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc86:	bc08      	pop	{r3}
 800cc88:	469e      	mov	lr, r3
 800cc8a:	4770      	bx	lr

0800cc8c <_fini>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	bf00      	nop
 800cc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc92:	bc08      	pop	{r3}
 800cc94:	469e      	mov	lr, r3
 800cc96:	4770      	bx	lr
