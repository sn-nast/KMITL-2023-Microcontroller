
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b130  0800e1a8  0800e1a8  0001e1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080192d8  080192d8  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080192d8  080192d8  000292d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080192e0  080192e0  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080192e0  080192e0  000292e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080192e4  080192e4  000292e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080192e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001e0  080194c8  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  080194c8  000305e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f080  00000000  00000000  00030251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048bf  00000000  00000000  0004f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00053b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e6  00000000  00000000  00055548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cd60  00000000  00000000  0005692e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000246ce  00000000  00000000  0008368e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108031  00000000  00000000  000a7d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e54  00000000  00000000  001afd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b7be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e190 	.word	0x0800e190

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800e190 	.word	0x0800e190

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <printOut>:
#include "Utilities/my_basic.h"

void printOut(const char *text)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET)
 80009dc:	bf00      	nop
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <printOut+0x34>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b40      	cmp	r3, #64	; 0x40
 80009ea:	d1f8      	bne.n	80009de <printOut+0xa>
	{
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fc77 	bl	80002e0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <printOut+0x34>)
 80009fc:	f008 fc54 	bl	80092a8 <HAL_UART_Transmit>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000040c 	.word	0x2000040c

08000a0c <printOutLine>:

void printOutLine(const char *text)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	printOut(text);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffdd 	bl	80009d4 <printOut>
	printOut("\r\n");
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <printOutLine+0x1c>)
 8000a1c:	f7ff ffda 	bl	80009d4 <printOut>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800e1a8 	.word	0x0800e1a8

08000a2c <delay>:

void delay(uint32_t delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f003 f8f7 	bl	8003c28 <HAL_Delay>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <AM2320_setCommand>:
}


// For AM2320
void AM2320_setCommand(uint8_t *cmdBuffer)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	cmdBuffer[0] = 0x03;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	cmdBuffer[2] = 0x04;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	2204      	movs	r2, #4
 8000a60:	701a      	strb	r2, [r3, #0]
	printOutLine("Set Sensor");
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <AM2320_setCommand+0x2c>)
 8000a64:	f7ff ffd2 	bl	8000a0c <printOutLine>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	0800e1ac 	.word	0x0800e1ac

08000a74 <AM2320_startSensor>:

void AM2320_startSensor(I2C_HandleTypeDef *hi2c, uint8_t *cmdBuffer, uint8_t *dataBuffer)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
	// Setting hi2c1: PB8, PB9 - use hi2c1
	const uint8_t SENSOR_ADDRESS = 0x5c<<1;
 8000a80:	23b8      	movs	r3, #184	; 0xb8
 8000a82:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS, cmdBuffer, 3, 200);
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	b299      	uxth	r1, r3
 8000a88:	23c8      	movs	r3, #200	; 0xc8
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f004 fab3 	bl	8004ffc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS, cmdBuffer, 3, 200);
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	b299      	uxth	r1, r3
 8000a9a:	23c8      	movs	r3, #200	; 0xc8
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f004 faaa 	bl	8004ffc <HAL_I2C_Master_Transmit>
	delay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffbf 	bl	8000a2c <delay>
	HAL_I2C_Master_Receive(hi2c, SENSOR_ADDRESS, dataBuffer, 8, 200);
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	23c8      	movs	r3, #200	; 0xc8
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f004 fb92 	bl	80051e4 <HAL_I2C_Master_Receive>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <AM2320_getTemperatureAndHumidity>:

void AM2320_getTemperatureAndHumidity(float *temperature, float *humidity, uint8_t dataBuffer[8])
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b090      	sub	sp, #64	; 0x40
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	uint16_t Rcrc = dataBuffer[7] << 8;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	86fb      	strh	r3, [r7, #54]	; 0x36
	Rcrc += dataBuffer[6];
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3306      	adds	r3, #6
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000aea:	4413      	add	r3, r2
 8000aec:	86fb      	strh	r3, [r7, #54]	; 0x36
	char text[30];
	if (Rcrc == AM2320_CRC16_2(dataBuffer, 6))
 8000aee:	2106      	movs	r1, #6
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f86d 	bl	8000bd0 <AM2320_CRC16_2>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d148      	bne.n	8000b92 <AM2320_getTemperatureAndHumidity+0xca>
	{
		uint16_t temperatureRawValue = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3304      	adds	r3, #4
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3305      	adds	r3, #5
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	86bb      	strh	r3, [r7, #52]	; 0x34
		*temperature = temperatureRawValue / 10.0;
 8000b1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b26:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	edc3 7a00 	vstr	s15, [r3]
		*temperature = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (*temperature * (-1)) : *temperature;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	09db      	lsrs	r3, r3, #7
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d105      	bne.n	8000b52 <AM2320_getTemperatureAndHumidity+0x8a>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	eef1 7a67 	vneg.f32	s15, s15
 8000b50:	e002      	b.n	8000b58 <AM2320_getTemperatureAndHumidity+0x90>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	edc3 7a00 	vstr	s15, [r3]

		uint16_t himdityRawValue = (dataBuffer[2] << 8) + dataBuffer[3];
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3302      	adds	r3, #2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3303      	adds	r3, #3
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	867b      	strh	r3, [r7, #50]	; 0x32
		*humidity = himdityRawValue / 10.0;
 8000b76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b80:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000b84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	edc3 7a00 	vstr	s15, [r3]
	}
	sprintf(text, "Temperature= %4.1f \t Humidity= %4.1f", *temperature, *humidity);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	edd3 7a00 	vldr	s15, [r3]
 8000ba2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba6:	f107 0014 	add.w	r0, r7, #20
 8000baa:	ed8d 7b00 	vstr	d7, [sp]
 8000bae:	ec53 2b16 	vmov	r2, r3, d6
 8000bb2:	4906      	ldr	r1, [pc, #24]	; (8000bcc <AM2320_getTemperatureAndHumidity+0x104>)
 8000bb4:	f009 ff18 	bl	800a9e8 <siprintf>
	printOutLine(text);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff25 	bl	8000a0c <printOutLine>

}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	; 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	0800e1b8 	.word	0x0800e1b8

08000bd0 <AM2320_CRC16_2>:

uint16_t AM2320_CRC16_2(uint8_t *ptr, uint8_t length)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	737b      	strb	r3, [r7, #13]

	while (length--)
 8000be6:	e023      	b.n	8000c30 <AM2320_CRC16_2+0x60>
	{
		crc ^= *ptr++;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	737b      	strb	r3, [r7, #13]
 8000bfc:	e015      	b.n	8000c2a <AM2320_CRC16_2+0x5a>
		{
			if ((crc & 0x01) != 0)
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00a      	beq.n	8000c1e <AM2320_CRC16_2+0x4e>
			{
				crc >>= 1;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	085b      	lsrs	r3, r3, #1
 8000c0c:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000c0e:	89fb      	ldrh	r3, [r7, #14]
 8000c10:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000c14:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	81fb      	strh	r3, [r7, #14]
 8000c1c:	e002      	b.n	8000c24 <AM2320_CRC16_2+0x54>
			}
			else
			{
				crc >>= 1;
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++)
 8000c24:	7b7b      	ldrb	r3, [r7, #13]
 8000c26:	3301      	adds	r3, #1
 8000c28:	737b      	strb	r3, [r7, #13]
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	d9e6      	bls.n	8000bfe <AM2320_CRC16_2+0x2e>
	while (length--)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	70fa      	strb	r2, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1d6      	bne.n	8000be8 <AM2320_CRC16_2+0x18>
			}
		}
	}
	return crc;
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <fillScreenColor>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "spi.h"

void fillScreenColor(uint16_t color)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fcf1 	bl	800363c <ILI9341_Fill_Screen>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <clearScreenArea>:

void clearScreenArea(Rectangle area, uint16_t color)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c70:	4613      	mov	r3, r2
 8000c72:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
 8000c74:	8938      	ldrh	r0, [r7, #8]
 8000c76:	8979      	ldrh	r1, [r7, #10]
 8000c78:	89ba      	ldrh	r2, [r7, #12]
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	f002 fa6a 	bl	8003154 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	461a      	mov	r2, r3
 8000c84:	893b      	ldrh	r3, [r7, #8]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	89fa      	ldrh	r2, [r7, #14]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	897a      	ldrh	r2, [r7, #10]
 8000c8e:	1a8a      	subs	r2, r1, r2
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fc30 	bl	8003500 <ILI9341_Draw_Colour_Burst>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <setRotation>:

void setRotation(uint8_t rotation)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fab7 	bl	8003228 <ILI9341_Set_Rotation>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <drawText>:

void drawText(const char *text, uint8_t x, uint8_t y, uint16_t size)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af02      	add	r7, sp, #8
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	70fb      	strb	r3, [r7, #3]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70bb      	strb	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, BLACK, size, WHITE);
 8000cdc:	78ba      	ldrb	r2, [r7, #2]
 8000cde:	78f9      	ldrb	r1, [r7, #3]
 8000ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f002 f99b 	bl	8003028 <ILI9341_Draw_Text>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <drawTextAtPoint>:

void drawTextAtPoint(const char *text, Point position, uint16_t size)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	8139      	strh	r1, [r7, #8]
 8000d04:	4613      	mov	r3, r2
 8000d06:	80fb      	strh	r3, [r7, #6]
	drawText(text, position.x, position.y, size);
 8000d08:	7a39      	ldrb	r1, [r7, #8]
 8000d0a:	7a7a      	ldrb	r2, [r7, #9]
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff ffd7 	bl	8000cc2 <drawText>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <drawTextWithColor>:

void drawTextWithColor(const char *text, uint8_t x, uint8_t y, uint16_t color,
		uint16_t size, uint16_t backgroundColor)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	70fb      	strb	r3, [r7, #3]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70bb      	strb	r3, [r7, #2]
 8000d32:	4613      	mov	r3, r2
 8000d34:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, color, size, backgroundColor);
 8000d36:	8838      	ldrh	r0, [r7, #0]
 8000d38:	78ba      	ldrb	r2, [r7, #2]
 8000d3a:	78f9      	ldrb	r1, [r7, #3]
 8000d3c:	8abb      	ldrh	r3, [r7, #20]
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	8a3b      	ldrh	r3, [r7, #16]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4603      	mov	r3, r0
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f002 f96e 	bl	8003028 <ILI9341_Draw_Text>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <drawFilledRectangleAtCoord>:
{
	ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1, y1, color);
}

void drawFilledRectangleAtCoord(Rectangle rectangle, uint16_t color)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d62:	4613      	mov	r3, r2
 8000d64:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(rectangle.x0, rectangle.y0, rectangle.x1, rectangle.y1, color);
 8000d66:	8938      	ldrh	r0, [r7, #8]
 8000d68:	8979      	ldrh	r1, [r7, #10]
 8000d6a:	89ba      	ldrh	r2, [r7, #12]
 8000d6c:	89fc      	ldrh	r4, [r7, #14]
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4623      	mov	r3, r4
 8000d74:	f002 f85f 	bl	8002e36 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}

08000d80 <drawFilledCircleAtCoord>:
{
	ILI9341_Draw_Filled_Circle(x, y, radius, color);
}

void drawFilledCircleAtCoord(Circle circle, uint16_t color)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d8e:	4613      	mov	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Circle(circle.x, circle.y, circle.radius, color);
 8000d92:	8938      	ldrh	r0, [r7, #8]
 8000d94:	8979      	ldrh	r1, [r7, #10]
 8000d96:	89ba      	ldrh	r2, [r7, #12]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	f001 ffc4 	bl	8002d26 <ILI9341_Draw_Filled_Circle>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <drawImageAtPoint>:
{
	ILI9341_Draw_Image(imageArray, orientation);
}

void drawImageAtPoint(Image image, uint8_t rotation)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8000db4:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8000db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dc2:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000dc6:	701a      	strb	r2, [r3, #0]
	setRotation(rotation);
 8000dc8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dcc:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff68 	bl	8000ca8 <setRotation>

	Point startPoint = image.drawPoint;
 8000dd8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ddc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000de0:	889b      	ldrh	r3, [r3, #4]
 8000de2:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
	Point endPoint = { 0, 0};
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

	switch (rotation)
 8000df2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000df6:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d841      	bhi.n	8000e84 <drawImageAtPoint+0xdc>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <drawImageAtPoint+0x60>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e4f 	.word	0x08000e4f
 8000e0c:	08000e19 	.word	0x08000e19
 8000e10:	08000e4f 	.word	0x08000e4f
 8000e14:	08000e19 	.word	0x08000e19
	{
	case SCREEN_HORIZONTAL_1:
	case SCREEN_HORIZONTAL_2:
		endPoint.x = startPoint.x + image.width - 1;
 8000e18:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8000e1c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e20:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e24:	88db      	ldrh	r3, [r3, #6]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.y + image.height;
 8000e34:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8000e38:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e3c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e40:	891b      	ldrh	r3, [r3, #8]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8000e4c:	e01a      	b.n	8000e84 <drawImageAtPoint+0xdc>
	case SCREEN_VERTICAL_1:
	case SCREEN_VERTICAL_2:
		endPoint.x = startPoint.y + image.height - 1;
 8000e4e:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8000e52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e56:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e5a:	891b      	ldrh	r3, [r3, #8]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.x + image.width;
 8000e6a:	f897 2208 	ldrb.w	r2, [r7, #520]	; 0x208
 8000e6e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e72:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000e76:	88db      	ldrh	r3, [r3, #6]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
		break;
 8000e82:	bf00      	nop
	}

	ILI9341_Set_Address(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
 8000e84:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	f897 3204 	ldrb.w	r3, [r7, #516]	; 0x204
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f002 f95a 	bl	8003154 <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	4834      	ldr	r0, [pc, #208]	; (8000f78 <drawImageAtPoint+0x1d0>)
 8000ea8:	f003 fffe 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <drawImageAtPoint+0x1d0>)
 8000eb4:	f003 fff8 	bl	8004ea8 <HAL_GPIO_WritePin>

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];
	uint32_t counter = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000ec4:	e035      	b.n	8000f32 <drawImageAtPoint+0x18a>
	{
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000ecc:	e019      	b.n	8000f02 <drawImageAtPoint+0x15a>
		{
			Temp_small_buffer[k] = image.imageArray[counter + k];
 8000ece:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ed2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000edc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000ee0:	440b      	add	r3, r1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	7819      	ldrb	r1, [r3, #0]
 8000ee6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000eea:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8000eee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000ef2:	4413      	add	r3, r2
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	701a      	strb	r2, [r3, #0]
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000ef8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000efc:	3301      	adds	r3, #1
 8000efe:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000f02:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f0a:	d3e0      	bcc.n	8000ece <drawImageAtPoint+0x126>
		}
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000f0c:	f107 0110 	add.w	r1, r7, #16
 8000f10:	230a      	movs	r3, #10
 8000f12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <drawImageAtPoint+0x1d4>)
 8000f18:	f006 fceb 	bl	80078f2 <HAL_SPI_Transmit>
		counter += BURST_MAX_SIZE;
 8000f1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000f20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f24:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8000f28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000f32:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f36:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000f3a:	88db      	ldrh	r3, [r3, #6]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000f42:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000f46:	891b      	ldrh	r3, [r3, #8]
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <drawImageAtPoint+0x1d8>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	1112      	asrs	r2, r2, #4
 8000f54:	17db      	asrs	r3, r3, #31
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d3b1      	bcc.n	8000ec6 <drawImageAtPoint+0x11e>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <drawImageAtPoint+0x1d0>)
 8000f6a:	f003 ff9d 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	200002c0 	.word	0x200002c0
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <getImageArea>:

Rectangle getImageArea(Image image)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Rectangle imageArea =
	{
			image.drawPoint.x,
 8000f92:	793b      	ldrb	r3, [r7, #4]
 8000f94:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000f96:	823b      	strh	r3, [r7, #16]
			image.drawPoint.y,
 8000f98:	797b      	ldrb	r3, [r7, #5]
 8000f9a:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000f9c:	827b      	strh	r3, [r7, #18]
			image.drawPoint.x + image.width,
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000fa8:	82bb      	strh	r3, [r7, #20]
			image.drawPoint.y + image.height
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	893b      	ldrh	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
	Rectangle imageArea =
 8000fb4:	82fb      	strh	r3, [r7, #22]
	};
	return imageArea;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	cb03      	ldmia	r3!, {r0, r1}
 8000fc0:	6010      	str	r0, [r2, #0]
 8000fc2:	6051      	str	r1, [r2, #4]
}
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <getCircleEdgeX>:

uint16_t getCircleEdgeX(Circle circle)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x + circle.radius;
 8000fdc:	883a      	ldrh	r2, [r7, #0]
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29b      	uxth	r3, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <getCircleEdgeY>:

uint16_t getCircleEdgeY(Circle circle)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y + circle.radius;
 8000ffc:	887a      	ldrh	r2, [r7, #2]
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <getCircleEdgeXNegative>:

uint16_t getCircleEdgeXNegative(Circle circle)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	463b      	mov	r3, r7
 8001018:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x - circle.radius;
 800101c:	883a      	ldrh	r2, [r7, #0]
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29b      	uxth	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <getCircleEdgeYNegative>:

uint16_t getCircleEdgeYNegative(Circle circle)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	463b      	mov	r3, r7
 8001038:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y - circle.radius;
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <MX_ADC1_Init+0xa0>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_ADC1_Init+0x9c>)
 800106a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_ADC1_Init+0x9c>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_ADC1_Init+0x9c>)
 800108c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001094:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_ADC1_Init+0x9c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010b6:	f002 fddb 	bl	8003c70 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010c0:	f001 f97e 	bl	80023c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010c4:	2303      	movs	r3, #3
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010cc:	2302      	movs	r3, #2
 80010ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_ADC1_Init+0x9c>)
 80010d6:	f003 f849 	bl	800416c <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010e0:	f001 f96e 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001fc 	.word	0x200001fc
 80010f0:	40012000 	.word	0x40012000

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_ADC_MspInit+0x88>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_ADC_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001146:	2308      	movs	r3, #8
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_ADC_MspInit+0x8c>)
 800115a:	f003 fbd5 	bl	8004908 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2102      	movs	r1, #2
 8001162:	2012      	movs	r0, #18
 8001164:	f003 fb5b 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001168:	2012      	movs	r0, #18
 800116a:	f003 fb74 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
     PB6   ------> S_TIM4_CH1
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	4b9e      	ldr	r3, [pc, #632]	; (8001414 <MX_GPIO_Init+0x290>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a9d      	ldr	r2, [pc, #628]	; (8001414 <MX_GPIO_Init+0x290>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b9b      	ldr	r3, [pc, #620]	; (8001414 <MX_GPIO_Init+0x290>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b98      	ldr	r3, [pc, #608]	; (8001414 <MX_GPIO_Init+0x290>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a97      	ldr	r2, [pc, #604]	; (8001414 <MX_GPIO_Init+0x290>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b95      	ldr	r3, [pc, #596]	; (8001414 <MX_GPIO_Init+0x290>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ca:	4b92      	ldr	r3, [pc, #584]	; (8001414 <MX_GPIO_Init+0x290>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a91      	ldr	r2, [pc, #580]	; (8001414 <MX_GPIO_Init+0x290>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <MX_GPIO_Init+0x290>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <MX_GPIO_Init+0x290>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <MX_GPIO_Init+0x290>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b89      	ldr	r3, [pc, #548]	; (8001414 <MX_GPIO_Init+0x290>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b86      	ldr	r3, [pc, #536]	; (8001414 <MX_GPIO_Init+0x290>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a85      	ldr	r2, [pc, #532]	; (8001414 <MX_GPIO_Init+0x290>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b83      	ldr	r3, [pc, #524]	; (8001414 <MX_GPIO_Init+0x290>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b80      	ldr	r3, [pc, #512]	; (8001414 <MX_GPIO_Init+0x290>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a7f      	ldr	r2, [pc, #508]	; (8001414 <MX_GPIO_Init+0x290>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <MX_GPIO_Init+0x290>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <MX_GPIO_Init+0x290>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a79      	ldr	r2, [pc, #484]	; (8001414 <MX_GPIO_Init+0x290>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b77      	ldr	r3, [pc, #476]	; (8001414 <MX_GPIO_Init+0x290>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001242:	4b74      	ldr	r3, [pc, #464]	; (8001414 <MX_GPIO_Init+0x290>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a73      	ldr	r2, [pc, #460]	; (8001414 <MX_GPIO_Init+0x290>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b71      	ldr	r3, [pc, #452]	; (8001414 <MX_GPIO_Init+0x290>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2168      	movs	r1, #104	; 0x68
 800125e:	486e      	ldr	r0, [pc, #440]	; (8001418 <MX_GPIO_Init+0x294>)
 8001260:	f003 fe22 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f244 0181 	movw	r1, #16513	; 0x4081
 800126a:	486c      	ldr	r0, [pc, #432]	; (800141c <MX_GPIO_Init+0x298>)
 800126c:	f003 fe1c 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	; 0x40
 8001274:	486a      	ldr	r0, [pc, #424]	; (8001420 <MX_GPIO_Init+0x29c>)
 8001276:	f003 fe17 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001280:	4868      	ldr	r0, [pc, #416]	; (8001424 <MX_GPIO_Init+0x2a0>)
 8001282:	f003 fe11 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001286:	2314      	movs	r3, #20
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	485f      	ldr	r0, [pc, #380]	; (8001418 <MX_GPIO_Init+0x294>)
 800129a:	f003 fb35 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800129e:	2368      	movs	r3, #104	; 0x68
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4858      	ldr	r0, [pc, #352]	; (8001418 <MX_GPIO_Init+0x294>)
 80012b6:	f003 fb27 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4855      	ldr	r0, [pc, #340]	; (8001424 <MX_GPIO_Init+0x2a0>)
 80012d0:	f003 fb1a 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012d4:	2332      	movs	r3, #50	; 0x32
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	484d      	ldr	r0, [pc, #308]	; (8001424 <MX_GPIO_Init+0x2a0>)
 80012f0:	f003 fb0a 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012f4:	2386      	movs	r3, #134	; 0x86
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4846      	ldr	r0, [pc, #280]	; (8001428 <MX_GPIO_Init+0x2a4>)
 8001310:	f003 fafa 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LD3_Pin|LD2_Pin;
 8001314:	f244 0381 	movw	r3, #16513	; 0x4081
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	483b      	ldr	r0, [pc, #236]	; (800141c <MX_GPIO_Init+0x298>)
 800132e:	f003 faeb 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001332:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001344:	2304      	movs	r3, #4
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4833      	ldr	r0, [pc, #204]	; (800141c <MX_GPIO_Init+0x298>)
 8001350:	f003 fada 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	482a      	ldr	r0, [pc, #168]	; (800141c <MX_GPIO_Init+0x298>)
 8001372:	f003 fac9 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4824      	ldr	r0, [pc, #144]	; (8001420 <MX_GPIO_Init+0x29c>)
 800138e:	f003 fabb 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <MX_GPIO_Init+0x29c>)
 80013a6:	f003 faaf 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80013aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <MX_GPIO_Init+0x2a0>)
 80013c4:	f003 faa0 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013da:	230b      	movs	r3, #11
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_GPIO_Init+0x29c>)
 80013e6:	f003 fa8f 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_BACKLIGHT_Pin;
 80013ea:	2340      	movs	r3, #64	; 0x40
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013fa:	2302      	movs	r3, #2
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_LED_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_GPIO_Init+0x298>)
 8001406:	f003 fa7f 	bl	8004908 <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	; 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40021000 	.word	0x40021000
 800141c:	40020400 	.word	0x40020400
 8001420:	40021800 	.word	0x40021800
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000

0800142c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_I2C1_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <MX_I2C1_Init+0x7c>)
 800143a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <MX_I2C1_Init+0x74>)
 8001468:	f003 fd38 	bl	8004edc <HAL_I2C_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001472:	f000 ffa5 	bl	80023c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001476:	2100      	movs	r1, #0
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <MX_I2C1_Init+0x74>)
 800147a:	f004 ff71 	bl	8006360 <HAL_I2CEx_ConfigAnalogFilter>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001484:	f000 ff9c 	bl	80023c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_I2C1_Init+0x74>)
 800148c:	f004 ffb3 	bl	80063f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 ff93 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000244 	.word	0x20000244
 80014a4:	40005400 	.word	0x40005400
 80014a8:	20404768 	.word	0x20404768

080014ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ae      	sub	sp, #184	; 0xb8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2290      	movs	r2, #144	; 0x90
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 faee 	bl	800aaae <memset>
  if(i2cHandle->Instance==I2C1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_I2C_MspInit+0xd4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d14c      	bne.n	8001576 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4618      	mov	r0, r3
 80014ec:	f005 fd04 	bl	8006ef8 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014f6:	f000 ff63 	bl	80023c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001512:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152c:	2304      	movs	r3, #4
 800152e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001536:	4619      	mov	r1, r3
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <HAL_I2C_MspInit+0xdc>)
 800153a:	f003 f9e5 	bl	8004908 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_I2C_MspInit+0xd8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	201f      	movs	r0, #31
 800155c:	f003 f95f 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001560:	201f      	movs	r0, #31
 8001562:	f003 f978 	bl	8004856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2020      	movs	r0, #32
 800156c:	f003 f957 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001570:	2020      	movs	r0, #32
 8001572:	f003 f970 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	37b8      	adds	r7, #184	; 0xb8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40005400 	.word	0x40005400
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001590:	f3bf 8f4f 	dsb	sy
}
 8001594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001596:	f3bf 8f6f 	isb	sy
}
 800159a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <SCB_EnableICache+0x48>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015a4:	f3bf 8f4f 	dsb	sy
}
 80015a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015aa:	f3bf 8f6f 	isb	sy
}
 80015ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <SCB_EnableICache+0x48>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <SCB_EnableICache+0x48>)
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015bc:	f3bf 8f4f 	dsb	sy
}
 80015c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015c2:	f3bf 8f6f 	isb	sy
}
 80015c6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <SCB_EnableDCache+0x84>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015e6:	f3bf 8f4f 	dsb	sy
}
 80015ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <SCB_EnableDCache+0x84>)
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0b5b      	lsrs	r3, r3, #13
 80015f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015fc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001606:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001610:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001616:	4911      	ldr	r1, [pc, #68]	; (800165c <SCB_EnableDCache+0x84>)
 8001618:	4313      	orrs	r3, r2
 800161a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	60ba      	str	r2, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ef      	bne.n	8001608 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	60fa      	str	r2, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1e5      	bne.n	80015fe <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <SCB_EnableDCache+0x84>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <SCB_EnableDCache+0x84>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001644:	f3bf 8f4f 	dsb	sy
}
 8001648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800164a:	f3bf 8f6f 	isb	sy
}
 800164e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <getTemperatureText>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTemperatureText(float temperature, char *temperatureString) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
 800166a:	6038      	str	r0, [r7, #0]
	sprintf(temperatureString, "%.1f C", temperature);
 800166c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001674:	ec53 2b17 	vmov	r2, r3, d7
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <getTemperatureText+0x28>)
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	f009 f9b4 	bl	800a9e8 <siprintf>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800e1f4 	.word	0x0800e1f4

0800168c <getHumidityText>:

void getHumidityText(float humidity, char *humidityString) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	ed87 0a01 	vstr	s0, [r7, #4]
 8001696:	6038      	str	r0, [r7, #0]
	sprintf(humidityString, "%.1f %%RH", humidity);
 8001698:	edd7 7a01 	vldr	s15, [r7, #4]
 800169c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a0:	ec53 2b17 	vmov	r2, r3, d7
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <getHumidityText+0x28>)
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f009 f99e 	bl	800a9e8 <siprintf>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	0800e1fc 	.word	0x0800e1fc

080016b8 <convertColorToRgb565>:

uint16_t convertColorToRgb565(float redIntensity, float greenIntensity, float blueIntensity) {
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0a03 	vstr	s0, [r7, #12]
 80016c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016c6:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t red = (uint16_t)(redIntensity * 31.0 + 0.5);
 80016ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d2:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 80016d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80016de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	82fb      	strh	r3, [r7, #22]
  uint16_t green = (uint16_t)(greenIntensity * 63.0 + 0.5);
 80016ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80016f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001758 <convertColorToRgb565+0xa0>
 80016f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016fc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001700:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	82bb      	strh	r3, [r7, #20]
  uint16_t blue = (uint16_t)(blueIntensity * 31.0 + 0.5);
 800170e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001716:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 800171a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800171e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001722:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001726:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800172a:	ee17 3a90 	vmov	r3, s15
 800172e:	827b      	strh	r3, [r7, #18]

  uint16_t color = (red << 11) | (green << 5) | blue;
 8001730:	8afb      	ldrh	r3, [r7, #22]
 8001732:	02db      	lsls	r3, r3, #11
 8001734:	b21a      	sxth	r2, r3
 8001736:	8abb      	ldrh	r3, [r7, #20]
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21a      	sxth	r2, r3
 8001740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001744:	4313      	orrs	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	823b      	strh	r3, [r7, #16]

  return color;
 800174a:	8a3b      	ldrh	r3, [r7, #16]
}
 800174c:	4618      	mov	r0, r3
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	00000000 	.word	0x00000000
 800175c:	404f8000 	.word	0x404f8000

08001760 <createColorBox>:

Rectangle createColorBox(Circle circle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	e883 0006 	stmia.w	r3, {r1, r2}
	const uint16_t BOX_WIDTH = 130;
 800176e:	2382      	movs	r3, #130	; 0x82
 8001770:	83fb      	strh	r3, [r7, #30]
	const uint16_t BOX_HEIGHT = 20;
 8001772:	2314      	movs	r3, #20
 8001774:	83bb      	strh	r3, [r7, #28]
	const uint16_t GAP_X_CIRCLE_AND_BOX = 15;
 8001776:	230f      	movs	r3, #15
 8001778:	837b      	strh	r3, [r7, #26]

	Rectangle rectangle = {
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX,
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001780:	f7ff fc26 	bl	8000fd0 <getCircleEdgeX>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	8b7b      	ldrh	r3, [r7, #26]
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800178e:	823b      	strh	r3, [r7, #16]
			circle.y - (circle.radius / 2),
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	893b      	ldrh	r3, [r7, #8]
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800179c:	827b      	strh	r3, [r7, #18]
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017a4:	f7ff fc14 	bl	8000fd0 <getCircleEdgeX>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	8b7b      	ldrh	r3, [r7, #26]
 80017ae:	4413      	add	r3, r2
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	8bfb      	ldrh	r3, [r7, #30]
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 80017b8:	82bb      	strh	r3, [r7, #20]
			circle.y + BOX_HEIGHT
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	8bbb      	ldrh	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 80017c2:	82fb      	strh	r3, [r7, #22]
	};
	return rectangle;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	461a      	mov	r2, r3
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	cb03      	ldmia	r3!, {r0, r1}
 80017ce:	6010      	str	r0, [r2, #0]
 80017d0:	6051      	str	r1, [r2, #4]
}
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <createColorIntensityBar>:

Rectangle createColorIntensityBar(Rectangle refRectangle, float colorIntensity)
{
 80017da:	b480      	push	{r7}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	e883 0006 	stmia.w	r3, {r1, r2}
 80017e8:	ed87 0a00 	vstr	s0, [r7]
//	const uint16_t BOX_WIDTH = 130;

	Rectangle intensityBar = {
			refRectangle.x0,
 80017ec:	88bb      	ldrh	r3, [r7, #4]
	Rectangle intensityBar = {
 80017ee:	823b      	strh	r3, [r7, #16]
			refRectangle.y0,
 80017f0:	88fb      	ldrh	r3, [r7, #6]
	Rectangle intensityBar = {
 80017f2:	827b      	strh	r3, [r7, #18]
			refRectangle.x0 + (int) (colorIntensity * (refRectangle.x1 - refRectangle.x0)),
 80017f4:	88ba      	ldrh	r2, [r7, #4]
 80017f6:	893b      	ldrh	r3, [r7, #8]
 80017f8:	4619      	mov	r1, r3
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	1acb      	subs	r3, r1, r3
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001806:	edd7 7a00 	vldr	s15, [r7]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001812:	ee17 3a90 	vmov	r3, s15
 8001816:	b29b      	uxth	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	b29b      	uxth	r3, r3
	Rectangle intensityBar = {
 800181c:	82bb      	strh	r3, [r7, #20]
			refRectangle.y1
 800181e:	897b      	ldrh	r3, [r7, #10]
	Rectangle intensityBar = {
 8001820:	82fb      	strh	r3, [r7, #22]
	};
	return intensityBar;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	461a      	mov	r2, r3
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	cb03      	ldmia	r3!, {r0, r1}
 800182c:	6010      	str	r0, [r2, #0]
 800182e:	6051      	str	r1, [r2, #4]
}
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <drawColorIntensityBar>:

void drawColorIntensityBar(Rectangle colorBox, ColorInfo colorInfo, uint16_t brightColor)
{
 800183c:	b082      	sub	sp, #8
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	463c      	mov	r4, r7
 8001846:	e884 0003 	stmia.w	r4, {r0, r1}
 800184a:	f107 0120 	add.w	r1, r7, #32
 800184e:	e881 000c 	stmia.w	r1, {r2, r3}

	Rectangle colorIntensityBar = createColorIntensityBar(colorBox, colorInfo.intensity);
 8001852:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001856:	f107 0008 	add.w	r0, r7, #8
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	463b      	mov	r3, r7
 8001860:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001864:	f7ff ffb9 	bl	80017da <createColorIntensityBar>

	drawFilledRectangleAtCoord(colorBox, brightColor);
 8001868:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800186a:	461a      	mov	r2, r3
 800186c:	463b      	mov	r3, r7
 800186e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001872:	f7ff fa6f 	bl	8000d54 <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(colorIntensityBar, colorInfo.color);
 8001876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001878:	461a      	mov	r2, r3
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001882:	f7ff fa67 	bl	8000d54 <drawFilledRectangleAtCoord>
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001890:	b002      	add	sp, #8
 8001892:	4770      	bx	lr

08001894 <drawColorIntensityPercentageText>:

void drawColorIntensityPercentageText(Rectangle colorBox, ColorInfo colorInfo)
{
 8001894:	b082      	sub	sp, #8
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	b089      	sub	sp, #36	; 0x24
 800189a:	af00      	add	r7, sp, #0
 800189c:	463c      	mov	r4, r7
 800189e:	e884 0003 	stmia.w	r4, {r0, r1}
 80018a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018a6:	e881 000c 	stmia.w	r1, {r2, r3}
	char text[10];
	const uint8_t GAP_X_BOX_AND_PERCENTAGE = 10;
 80018aa:	230a      	movs	r3, #10
 80018ac:	77fb      	strb	r3, [r7, #31]
	const uint8_t COLOR_PERCENTAGE_FONT_SIZE = 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	77bb      	strb	r3, [r7, #30]

	Point percentagePoint = {colorBox.x1 + GAP_X_BOX_AND_PERCENTAGE, colorBox.y0};
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	743b      	strb	r3, [r7, #16]
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	747b      	strb	r3, [r7, #17]
	Rectangle clearArea = {percentagePoint.x, percentagePoint.y, percentagePoint.x + 50, percentagePoint.y + 20};
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	813b      	strh	r3, [r7, #8]
 80018ca:	7c7b      	ldrb	r3, [r7, #17]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	7c3b      	ldrb	r3, [r7, #16]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3332      	adds	r3, #50	; 0x32
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	81bb      	strh	r3, [r7, #12]
 80018da:	7c7b      	ldrb	r3, [r7, #17]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3314      	adds	r3, #20
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	81fb      	strh	r3, [r7, #14]

	sprintf(text, "%d%%", (int) (colorInfo.intensity * 100));
 80018e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001934 <drawColorIntensityPercentageText+0xa0>
 80018ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	ee17 2a90 	vmov	r2, s15
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <drawColorIntensityPercentageText+0xa4>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 f872 	bl	800a9e8 <siprintf>

	clearScreenArea(clearArea, WHITE);
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001910:	f7ff f9a7 	bl	8000c62 <clearScreenArea>
	drawTextAtPoint(text, percentagePoint, COLOR_PERCENTAGE_FONT_SIZE);
 8001914:	7fbb      	ldrb	r3, [r7, #30]
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f9eb 	bl	8000cfa <drawTextAtPoint>
}
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800192e:	b002      	add	sp, #8
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	42c80000 	.word	0x42c80000
 8001938:	0800e208 	.word	0x0800e208

0800193c <drawHueCircle>:

void drawHueCircle(ColorInfo mixedColorInfo)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	drawFilledCircleAtCoord(mixedColorInfo.circle, mixedColorInfo.color);
 8001948:	897b      	ldrh	r3, [r7, #10]
 800194a:	461a      	mov	r2, r3
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001952:	f7ff fa15 	bl	8000d80 <drawFilledCircleAtCoord>
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <drawColorInfo>:

void drawColorInfo(ColorInfo colorInfo, uint16_t brightColor)
{
 800195e:	b590      	push	{r4, r7, lr}
 8001960:	b089      	sub	sp, #36	; 0x24
 8001962:	af02      	add	r7, sp, #8
 8001964:	1d3c      	adds	r4, r7, #4
 8001966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800196a:	807b      	strh	r3, [r7, #2]
	Rectangle boxArea = createColorBox(colorInfo.circle);
 800196c:	f107 0010 	add.w	r0, r7, #16
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001976:	f7ff fef3 	bl	8001760 <createColorBox>
	drawFilledCircleAtCoord(colorInfo.circle, colorInfo.color);
 800197a:	897b      	ldrh	r3, [r7, #10]
 800197c:	461a      	mov	r2, r3
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001984:	f7ff f9fc 	bl	8000d80 <drawFilledCircleAtCoord>
	drawColorIntensityBar(boxArea, colorInfo, brightColor);
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	cb0c      	ldmia	r3, {r2, r3}
 8001994:	f107 0110 	add.w	r1, r7, #16
 8001998:	c903      	ldmia	r1, {r0, r1}
 800199a:	f7ff ff4f 	bl	800183c <drawColorIntensityBar>
	drawColorIntensityPercentageText(boxArea, colorInfo);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	cb0c      	ldmia	r3, {r2, r3}
 80019a6:	f107 0110 	add.w	r1, r7, #16
 80019aa:	c903      	ldmia	r1, {r0, r1}
 80019ac:	f7ff ff72 	bl	8001894 <drawColorIntensityPercentageText>
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <drawRgbInfo>:

void drawRgbInfo(ColorInfo redColor, ColorInfo greenColor, ColorInfo blueColor, ColorInfo mixedColor)
{
 80019b8:	b082      	sub	sp, #8
 80019ba:	b590      	push	{r4, r7, lr}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	1d3c      	adds	r4, r7, #4
 80019c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
	drawHueCircle(mixedColor);
 80019c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019d0:	f7ff ffb4 	bl	800193c <drawHueCircle>
	drawColorInfo(redColor, BRIGHT_RED);
 80019d4:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80019d8:	1d3a      	adds	r2, r7, #4
 80019da:	ca07      	ldmia	r2, {r0, r1, r2}
 80019dc:	f7ff ffbf 	bl	800195e <drawColorInfo>
	drawColorInfo(greenColor, BRIGHT_GREEN);
 80019e0:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 80019e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ea:	f7ff ffb8 	bl	800195e <drawColorInfo>
	drawColorInfo(blueColor, BRIGHT_BLUE);
 80019ee:	f24e 733f 	movw	r3, #59199	; 0xe73f
 80019f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f8:	f7ff ffb1 	bl	800195e <drawColorInfo>
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a06:	b002      	add	sp, #8
 8001a08:	4770      	bx	lr

08001a0a <isTouchWithinCircle>:

uint8_t isTouchWithinCircle(Circle circle, uint16_t xPos, uint16_t yPos)
{
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	f107 0408 	add.w	r4, r7, #8
 8001a14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a18:	4611      	mov	r1, r2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	80fb      	strh	r3, [r7, #6]
 8001a20:	4613      	mov	r3, r2
 8001a22:	80bb      	strh	r3, [r7, #4]
	uint16_t xPositive = getCircleEdgeX(circle);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a2c:	f7ff fad0 	bl	8000fd0 <getCircleEdgeX>
 8001a30:	4603      	mov	r3, r0
 8001a32:	82fb      	strh	r3, [r7, #22]
	uint16_t xNegative = getCircleEdgeXNegative(circle);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a3c:	f7ff fae8 	bl	8001010 <getCircleEdgeXNegative>
 8001a40:	4603      	mov	r3, r0
 8001a42:	82bb      	strh	r3, [r7, #20]
	uint16_t yPositive = getCircleEdgeY(circle);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a4c:	f7ff fad0 	bl	8000ff0 <getCircleEdgeY>
 8001a50:	4603      	mov	r3, r0
 8001a52:	827b      	strh	r3, [r7, #18]
	uint16_t yNegative = getCircleEdgeYNegative(circle);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a5c:	f7ff fae8 	bl	8001030 <getCircleEdgeYNegative>
 8001a60:	4603      	mov	r3, r0
 8001a62:	823b      	strh	r3, [r7, #16]

	if (xPos > xNegative && xPos < xPositive && yPos > yNegative && yPos < yPositive)
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	8abb      	ldrh	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d90d      	bls.n	8001a88 <isTouchWithinCircle+0x7e>
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	8afb      	ldrh	r3, [r7, #22]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d209      	bcs.n	8001a88 <isTouchWithinCircle+0x7e>
 8001a74:	88ba      	ldrh	r2, [r7, #4]
 8001a76:	8a3b      	ldrh	r3, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d905      	bls.n	8001a88 <isTouchWithinCircle+0x7e>
 8001a7c:	88ba      	ldrh	r2, [r7, #4]
 8001a7e:	8a7b      	ldrh	r3, [r7, #18]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d201      	bcs.n	8001a88 <isTouchWithinCircle+0x7e>
	{
		return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <isTouchWithinCircle+0x80>
	} else
	{
		return 0;
 8001a88:	2300      	movs	r3, #0
	}
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}

08001a92 <isTouchWithinRectangle>:

uint8_t isTouchWithinRectangle(Rectangle rectangle, uint16_t xPos, uint16_t yPos)
{
 8001a92:	b490      	push	{r4, r7}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	f107 0408 	add.w	r4, r7, #8
 8001a9c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	80bb      	strh	r3, [r7, #4]
	if (xPos >= rectangle.x0 && xPos <= rectangle.x1 && yPos <= rectangle.y1 && yPos >= rectangle.y0)
 8001aac:	893b      	ldrh	r3, [r7, #8]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d30d      	bcc.n	8001ad0 <isTouchWithinRectangle+0x3e>
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d809      	bhi.n	8001ad0 <isTouchWithinRectangle+0x3e>
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	88ba      	ldrh	r2, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d805      	bhi.n	8001ad0 <isTouchWithinRectangle+0x3e>
 8001ac4:	897b      	ldrh	r3, [r7, #10]
 8001ac6:	88ba      	ldrh	r2, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d301      	bcc.n	8001ad0 <isTouchWithinRectangle+0x3e>
	{
		return 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <isTouchWithinRectangle+0x40>
	} else
	{
		return 0;
 8001ad0:	2300      	movs	r3, #0
	}

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc90      	pop	{r4, r7}
 8001ada:	4770      	bx	lr

08001adc <addColorIntensity>:

void addColorIntensity(ColorInfo *colorInfo)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	const float MAX_INTENSITY = 1.0;
 8001ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ae8:	60fb      	str	r3, [r7, #12]
	const float STEP_INTENSITY = 0.1;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <addColorIntensity+0x50>)
 8001aec:	60bb      	str	r3, [r7, #8]

	if (colorInfo->intensity >= MAX_INTENSITY) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d804      	bhi.n	8001b0c <addColorIntensity+0x30>
		colorInfo->intensity = 0.0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
	} else
	{
		colorInfo->intensity += STEP_INTENSITY;
	}
}
 8001b0a:	e009      	b.n	8001b20 <addColorIntensity+0x44>
		colorInfo->intensity += STEP_INTENSITY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	3dcccccd 	.word	0x3dcccccd

08001b30 <checkTouchHueCircle>:
	sprintf(text, "T: (%d,%d)", xPos, yPos);
	drawText(text, 50, 180, 3);
}

void checkTouchHueCircle(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	uint16_t xPos = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	83fb      	strh	r3, [r7, #30]
	uint16_t yPos = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	83bb      	strh	r3, [r7, #28]

	int isDisplaying = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]

	while (isDisplaying) {
 8001b4a:	e080      	b.n	8001c4e <checkTouchHueCircle+0x11e>
		HAL_Delay(10);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f002 f86b 	bl	8003c28 <HAL_Delay>

		if (TP_Touchpad_Pressed())
 8001b52:	f001 fff3 	bl	8003b3c <TP_Touchpad_Pressed>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d078      	beq.n	8001c4e <checkTouchHueCircle+0x11e>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 ff29 	bl	80039b8 <TP_Read_Coordinates>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d112      	bne.n	8001b92 <checkTouchHueCircle+0x62>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <checkTouchHueCircle+0x50>
				{
					xPos = position_array[1];
 8001b72:	8afb      	ldrh	r3, [r7, #22]
 8001b74:	83fb      	strh	r3, [r7, #30]
					yPos = SCREEN_HEIGHT - position_array[0];
 8001b76:	8abb      	ldrh	r3, [r7, #20]
 8001b78:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001b7c:	83bb      	strh	r3, [r7, #28]
 8001b7e:	e008      	b.n	8001b92 <checkTouchHueCircle+0x62>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001b80:	2301      	movs	r3, #1
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d105      	bne.n	8001b92 <checkTouchHueCircle+0x62>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001b8c:	83fb      	strh	r3, [r7, #30]
					yPos = position_array[0];
 8001b8e:	8abb      	ldrh	r3, [r7, #20]
 8001b90:	83bb      	strh	r3, [r7, #28]
				}
			}

			if (isTouchWithinCircle(redColor->circle, xPos, yPos))
 8001b92:	8bbb      	ldrh	r3, [r7, #28]
 8001b94:	8bfa      	ldrh	r2, [r7, #30]
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	c903      	ldmia	r1, {r0, r1}
 8001b9a:	f7ff ff36 	bl	8001a0a <isTouchWithinCircle>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <checkTouchHueCircle+0x88>
			{
				addColorIntensity(redColor);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff ff99 	bl	8001adc <addColorIntensity>
				drawColorInfo(*redColor, BRIGHT_RED);
 8001baa:	f64f 733c 	movw	r3, #65340	; 0xff3c
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb2:	f7ff fed4 	bl	800195e <drawColorInfo>
 8001bb6:	e030      	b.n	8001c1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(greenColor->circle, xPos, yPos))
 8001bb8:	8bbb      	ldrh	r3, [r7, #28]
 8001bba:	8bfa      	ldrh	r2, [r7, #30]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	c903      	ldmia	r1, {r0, r1}
 8001bc0:	f7ff ff23 	bl	8001a0a <isTouchWithinCircle>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <checkTouchHueCircle+0xae>
			{
				addColorIntensity(greenColor);
 8001bca:	68b8      	ldr	r0, [r7, #8]
 8001bcc:	f7ff ff86 	bl	8001adc <addColorIntensity>
				drawColorInfo(*greenColor, BRIGHT_GREEN);
 8001bd0:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bd8:	f7ff fec1 	bl	800195e <drawColorInfo>
 8001bdc:	e01d      	b.n	8001c1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(blueColor->circle, xPos, yPos))
 8001bde:	8bbb      	ldrh	r3, [r7, #28]
 8001be0:	8bfa      	ldrh	r2, [r7, #30]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	c903      	ldmia	r1, {r0, r1}
 8001be6:	f7ff ff10 	bl	8001a0a <isTouchWithinCircle>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <checkTouchHueCircle+0xd4>
			{
				addColorIntensity(blueColor);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff73 	bl	8001adc <addColorIntensity>
				drawColorInfo(*blueColor, BRIGHT_BLUE);
 8001bf6:	f24e 733f 	movw	r3, #59199	; 0xe73f
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bfe:	f7ff feae 	bl	800195e <drawColorInfo>
 8001c02:	e00a      	b.n	8001c1a <checkTouchHueCircle+0xea>
			} else if (isTouchWithinCircle(mixedColor->circle, xPos, yPos))
 8001c04:	8bbb      	ldrh	r3, [r7, #28]
 8001c06:	8bfa      	ldrh	r2, [r7, #30]
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	c903      	ldmia	r1, {r0, r1}
 8001c0c:	f7ff fefd 	bl	8001a0a <isTouchWithinCircle>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <checkTouchHueCircle+0xea>
			{
				isDisplaying = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
			}

			mixedColor->color = convertColorToRgb565(redColor->intensity, greenColor->intensity, blueColor->intensity);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c2c:	eeb0 1a66 	vmov.f32	s2, s13
 8001c30:	eef0 0a47 	vmov.f32	s1, s14
 8001c34:	eeb0 0a67 	vmov.f32	s0, s15
 8001c38:	f7ff fd3e 	bl	80016b8 <convertColorToRgb565>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	80da      	strh	r2, [r3, #6]
			drawHueCircle(*mixedColor);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c4a:	f7ff fe77 	bl	800193c <drawHueCircle>
	while (isDisplaying) {
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f af7b 	bne.w	8001b4c <checkTouchHueCircle+0x1c>
		}
	}
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <startTimerInStudentInfoPage>:

void startTimerInStudentInfoPage()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	countSecondInStudentPage = 0;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <startTimerInStudentInfoPage+0x20>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Init(&htim2);
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <startTimerInStudentInfoPage+0x24>)
 8001c6c:	f006 f938 	bl	8007ee0 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <startTimerInStudentInfoPage+0x24>)
 8001c72:	f006 f9e9 	bl	8008048 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <startTimerInStudentInfoPage+0x28>)
 8001c78:	f002 f83e 	bl	8003cf8 <HAL_ADC_Start_IT>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000298 	.word	0x20000298
 8001c84:	20000374 	.word	0x20000374
 8001c88:	200001fc 	.word	0x200001fc

08001c8c <stopTimerInStudentInfoPage>:

void stopTimerInStudentInfoPage()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <stopTimerInStudentInfoPage+0x14>)
 8001c92:	f006 f97c 	bl	8007f8e <HAL_TIM_Base_DeInit>
	HAL_ADC_Stop_IT(&hadc1);
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <stopTimerInStudentInfoPage+0x18>)
 8001c98:	f002 f906 	bl	8003ea8 <HAL_ADC_Stop_IT>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000374 	.word	0x20000374
 8001ca4:	200001fc 	.word	0x200001fc

08001ca8 <startTimerOnSensor>:

void startTimerOnSensor()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <startTimerOnSensor+0x10>)
 8001cae:	f006 fa3b 	bl	8008128 <HAL_TIM_Base_Start_IT>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200003c0 	.word	0x200003c0

08001cbc <stopTimerOnSensor>:

void stopTimerOnSensor()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <stopTimerOnSensor+0x10>)
 8001cc2:	f006 faa9 	bl	8008218 <HAL_TIM_Base_Stop_IT>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200003c0 	.word	0x200003c0

08001cd0 <drawColorInfoPage>:

void drawColorInfoPage(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af08      	add	r7, sp, #32
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
	fillScreenColor(WHITE);
 8001cde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ce2:	f7fe ffb1 	bl	8000c48 <fillScreenColor>
	setRotation(SCREEN_ROTATION);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ffdd 	bl	8000ca8 <setRotation>

	startTimerOnSensor();
 8001cee:	f7ff ffdb 	bl	8001ca8 <startTimerOnSensor>
	drawRgbInfo(*redColor, *greenColor, *blueColor, *mixedColor);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	68fc      	ldr	r4, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	ad05      	add	r5, sp, #20
 8001cfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cfc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	ad02      	add	r5, sp, #8
 8001d04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	1d1a      	adds	r2, r3, #4
 8001d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d1c:	f7ff fe4c 	bl	80019b8 <drawRgbInfo>
	checkTouchHueCircle(redColor, greenColor, blueColor, mixedColor);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff ff02 	bl	8001b30 <checkTouchHueCircle>
	stopTimerOnSensor();
 8001d2c:	f7ff ffc6 	bl	8001cbc <stopTimerOnSensor>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bdb0      	pop	{r4, r5, r7, pc}

08001d38 <drawStudentInfoText>:

void drawStudentInfoText(StudentInfo studentInfo, Point endImagePoint, uint16_t textColor)
{
 8001d38:	b084      	sub	sp, #16
 8001d3a:	b5b0      	push	{r4, r5, r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af02      	add	r7, sp, #8
 8001d40:	f107 0420 	add.w	r4, r7, #32
 8001d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const int LINE_SPACEING_SIZE = 40;
 8001d48:	2328      	movs	r3, #40	; 0x28
 8001d4a:	60fb      	str	r3, [r7, #12]
	const int FONT_SIZE = 2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]

	Point infoPoint =
	{
			endImagePoint.x + 4,
 8001d50:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d54:	3304      	adds	r3, #4
 8001d56:	b2db      	uxtb	r3, r3
	Point infoPoint =
 8001d58:	713b      	strb	r3, [r7, #4]
 8001d5a:	2332      	movs	r3, #50	; 0x32
 8001d5c:	717b      	strb	r3, [r7, #5]
			50
	};

	drawTextWithColor(studentInfo.group, infoPoint.x, infoPoint.y, textColor, FONT_SIZE, WHITE);
 8001d5e:	7939      	ldrb	r1, [r7, #4]
 8001d60:	797a      	ldrb	r2, [r7, #5]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8001d6a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001d6e:	9401      	str	r4, [sp, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4603      	mov	r3, r0
 8001d74:	f107 0020 	add.w	r0, r7, #32
 8001d78:	f7fe ffd0 	bl	8000d1c <drawTextWithColor>
	drawTextWithColor(studentInfo.firstName, infoPoint.x, infoPoint.y + LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001d7c:	7939      	ldrb	r1, [r7, #4]
 8001d7e:	797a      	ldrb	r2, [r7, #5]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
 8001d90:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001d94:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001d98:	9501      	str	r5, [sp, #4]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	f7fe ffbd 	bl	8000d1c <drawTextWithColor>
	drawTextWithColor(studentInfo.lastName, infoPoint.x, infoPoint.y + 2 *LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001da2:	7939      	ldrb	r1, [r7, #4]
 8001da4:	797a      	ldrb	r2, [r7, #5]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
 8001dba:	f107 0052 	add.w	r0, r7, #82	; 0x52
 8001dbe:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001dc2:	9501      	str	r5, [sp, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	f7fe ffa8 	bl	8000d1c <drawTextWithColor>
	drawTextWithColor(studentInfo.id, infoPoint.x, infoPoint.y + 3*LINE_SPACEING_SIZE, textColor, FONT_SIZE, WHITE);
 8001dcc:	7939      	ldrb	r1, [r7, #4]
 8001dce:	797a      	ldrb	r2, [r7, #5]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	0040      	lsls	r0, r0, #1
 8001dd8:	4403      	add	r3, r0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
 8001de8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001dec:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001df0:	9501      	str	r5, [sp, #4]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4623      	mov	r3, r4
 8001df6:	f7fe ff91 	bl	8000d1c <drawTextWithColor>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e04:	b004      	add	sp, #16
 8001e06:	4770      	bx	lr

08001e08 <drawStudentInfoPage>:

void drawStudentInfoPage(StudentInfo studentInfo, ColorInfo colorInfo)
{
 8001e08:	b084      	sub	sp, #16
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b0a6      	sub	sp, #152	; 0x98
 8001e0e:	af18      	add	r7, sp, #96	; 0x60
 8001e10:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001e14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	fillScreenColor(WHITE);
 8001e18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e1c:	f7fe ff14 	bl	8000c48 <fillScreenColor>
	setRotation(SCREEN_ROTATION);
 8001e20:	2301      	movs	r3, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe ff40 	bl	8000ca8 <setRotation>
	Image *image = &studentInfo.image;
 8001e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

	Point endImagePoint = {
			image->drawPoint.x + image->width,
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	791a      	ldrb	r2, [r3, #4]
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	88db      	ldrh	r3, [r3, #6]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2db      	uxtb	r3, r3
	Point endImagePoint = {
 8001e3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			image->drawPoint.y + image->height
 8001e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e42:	795a      	ldrb	r2, [r3, #5]
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	891b      	ldrh	r3, [r3, #8]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
	Point endImagePoint = {
 8001e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	};
	Rectangle imageArea = getImageArea(*image);
 8001e52:	f107 001c 	add.w	r0, r7, #28
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5a:	f7ff f893 	bl	8000f84 <getImageArea>

	drawImageAtPoint(*image, SCREEN_ROTATION);
 8001e5e:	2301      	movs	r3, #1
 8001e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e64:	f7fe ffa0 	bl	8000da8 <drawImageAtPoint>
	drawStudentInfoText(studentInfo, endImagePoint, colorInfo.color);
 8001e68:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001e6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e70:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8001e74:	4668      	mov	r0, sp
 8001e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7a:	2258      	movs	r2, #88	; 0x58
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f008 fe96 	bl	800abae <memcpy>
 8001e82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e88:	f7ff ff56 	bl	8001d38 <drawStudentInfoText>

	uint16_t xPos = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t yPos = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	86bb      	strh	r3, [r7, #52]	; 0x34

	const uint32_t TIMER_IN_SECOND = 4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28

	startTimerInStudentInfoPage();
 8001e98:	f7ff fee2 	bl	8001c60 <startTimerInStudentInfoPage>

	int isDisplaying = 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
	while (isDisplaying) {
 8001ea0:	e032      	b.n	8001f08 <drawStudentInfoPage+0x100>
		char txt[20];
//		sprintf(txt, "Count: %d", (int) countSecondInStudentPage);
//		drawText(txt, 10, 200, 3);
		if (countSecondInStudentPage > TIMER_IN_SECOND)
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <drawStudentInfoPage+0x118>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d202      	bcs.n	8001eb2 <drawStudentInfoPage+0xaa>
		{
			isDisplaying = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb0:	e02a      	b.n	8001f08 <drawStudentInfoPage+0x100>
		} else if (TP_Touchpad_Pressed())
 8001eb2:	f001 fe43 	bl	8003b3c <TP_Touchpad_Pressed>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d025      	beq.n	8001f08 <drawStudentInfoPage+0x100>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fd7a 	bl	80039b8 <TP_Read_Coordinates>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d112      	bne.n	8001ef0 <drawStudentInfoPage+0xe8>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001eca:	2301      	movs	r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <drawStudentInfoPage+0xd6>
				{
					xPos = position_array[1];
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	86fb      	strh	r3, [r7, #54]	; 0x36
					yPos = SCREEN_HEIGHT - position_array[0];
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001eda:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001edc:	e008      	b.n	8001ef0 <drawStudentInfoPage+0xe8>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d105      	bne.n	8001ef0 <drawStudentInfoPage+0xe8>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001eea:	86fb      	strh	r3, [r7, #54]	; 0x36
					yPos = position_array[0];
 8001eec:	88bb      	ldrh	r3, [r7, #4]
 8001eee:	86bb      	strh	r3, [r7, #52]	; 0x34
				}
			}

			if (isTouchWithinRectangle(imageArea, xPos, yPos))
 8001ef0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ef2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ef4:	f107 011c 	add.w	r1, r7, #28
 8001ef8:	c903      	ldmia	r1, {r0, r1}
 8001efa:	f7ff fdca 	bl	8001a92 <isTouchWithinRectangle>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <drawStudentInfoPage+0x100>
			{
				isDisplaying = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
	while (isDisplaying) {
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1c9      	bne.n	8001ea2 <drawStudentInfoPage+0x9a>
			}
		}
	}

	stopTimerInStudentInfoPage();
 8001f0e:	f7ff febd 	bl	8001c8c <stopTimerInStudentInfoPage>
}
 8001f12:	bf00      	nop
 8001f14:	3738      	adds	r7, #56	; 0x38
 8001f16:	46bd      	mov	sp, r7
 8001f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f1c:	b004      	add	sp, #16
 8001f1e:	4770      	bx	lr
 8001f20:	20000298 	.word	0x20000298

08001f24 <drawTemperatureTextAtPoint>:

void drawTemperatureTextAtPoint(float temperature, Point temperaturePosition)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f2e:	8038      	strh	r0, [r7, #0]
	char temperatureText[10];
	Rectangle temperatureArea = { temperaturePosition.x, temperaturePosition.y, temperaturePosition.x + 82, temperaturePosition.y + 20};
 8001f30:	783b      	ldrb	r3, [r7, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	81bb      	strh	r3, [r7, #12]
 8001f36:	787b      	ldrb	r3, [r7, #1]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	81fb      	strh	r3, [r7, #14]
 8001f3c:	783b      	ldrb	r3, [r7, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3352      	adds	r3, #82	; 0x52
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	823b      	strh	r3, [r7, #16]
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3314      	adds	r3, #20
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	827b      	strh	r3, [r7, #18]

	clearScreenArea(temperatureArea, WHITE);
 8001f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f5c:	f7fe fe81 	bl	8000c62 <clearScreenArea>
	getTemperatureText(temperature, temperatureText);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4618      	mov	r0, r3
 8001f66:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f6a:	f7ff fb79 	bl	8001660 <getTemperatureText>
	drawTextAtPoint(temperatureText, temperaturePosition, 2);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	2202      	movs	r2, #2
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe febf 	bl	8000cfa <drawTextAtPoint>
}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <drawHumidityTextAtPoint>:

void drawHumidityTextAtPoint(float humidity, Point humidityPosition)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f8e:	8038      	strh	r0, [r7, #0]
	char temperatureText[10];
	Rectangle temperatureArea = { humidityPosition.x, humidityPosition.y, humidityPosition.x + 82, humidityPosition.y + 20};
 8001f90:	783b      	ldrb	r3, [r7, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	81bb      	strh	r3, [r7, #12]
 8001f96:	787b      	ldrb	r3, [r7, #1]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	81fb      	strh	r3, [r7, #14]
 8001f9c:	783b      	ldrb	r3, [r7, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3352      	adds	r3, #82	; 0x52
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	823b      	strh	r3, [r7, #16]
 8001fa6:	787b      	ldrb	r3, [r7, #1]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3314      	adds	r3, #20
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	827b      	strh	r3, [r7, #18]

	clearScreenArea(temperatureArea, WHITE);
 8001fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fbc:	f7fe fe51 	bl	8000c62 <clearScreenArea>
	getHumidityText(humidity, temperatureText);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fca:	f7ff fb5f 	bl	800168c <getHumidityText>
	drawTextAtPoint(temperatureText, humidityPosition, 2);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe8f 	bl	8000cfa <drawTextAtPoint>
}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_ADC_ConvCpltCallback>:
	ledBacklight->timer->Instance->CCMR3 = (10000-1) * dutyCycle;
	HAL_TIM_PWM_Start(ledBacklight->timer, ledBacklight->timerChannel);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_ADC_ConvCpltCallback+0x28>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d104      	bne.n	8001ffe <HAL_ADC_ConvCpltCallback+0x1a>
	{
		countSecondInStudentPage++;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ffc:	6013      	str	r3, [r2, #0]
	};
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200001fc 	.word	0x200001fc
 8002010:	20000298 	.word	0x20000298

08002014 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b092      	sub	sp, #72	; 0x48
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	static float humidity = 20.5;
	static uint8_t cmdBuffer[3];
	static uint8_t dataBuffer[8];

	static int isSetCommand = 0;
	if (!isSetCommand)
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d110      	bne.n	8002046 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		char text[50];
		sprintf(text, "AM2320 I2C DEMO Starting ...");
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	491f      	ldr	r1, [pc, #124]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fcdc 	bl	800a9e8 <siprintf>
		printOutLine(text);
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fce9 	bl	8000a0c <printOutLine>

		AM2320_setCommand(cmdBuffer);
 800203a:	481c      	ldr	r0, [pc, #112]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800203c:	f7fe fd02 	bl	8000a44 <AM2320_setCommand>
		isSetCommand = 1;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d126      	bne.n	800209c <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		countTimer++;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002056:	6013      	str	r3, [r2, #0]

		Point temperaturePosition = { 25, 30 };
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		Point humidityPosition = { SCREEN_WIDTH / 2 + 10, 30 };
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

		AM2320_startSensor(&hi2c1, cmdBuffer, dataBuffer);
 8002068:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800206a:	4910      	ldr	r1, [pc, #64]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800206c:	4815      	ldr	r0, [pc, #84]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800206e:	f7fe fd01 	bl	8000a74 <AM2320_startSensor>
		AM2320_getTemperatureAndHumidity(&temperature, &humidity, dataBuffer);
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002074:	4914      	ldr	r1, [pc, #80]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002078:	f7fe fd26 	bl	8000ac8 <AM2320_getTemperatureAndHumidity>

		drawTemperatureTextAtPoint(temperature, temperaturePosition);
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002084:	eeb0 0a67 	vmov.f32	s0, s15
 8002088:	f7ff ff4c 	bl	8001f24 <drawTemperatureTextAtPoint>
		drawHumidityTextAtPoint(humidity, humidityPosition);
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	f7ff ff74 	bl	8001f84 <drawHumidityTextAtPoint>
	}
}
 800209c:	bf00      	nop
 800209e:	3748      	adds	r7, #72	; 0x48
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000029c 	.word	0x2000029c
 80020a8:	0800e21c 	.word	0x0800e21c
 80020ac:	200002a0 	.word	0x200002a0
 80020b0:	200003c0 	.word	0x200003c0
 80020b4:	200002a4 	.word	0x200002a4
 80020b8:	0800e23c 	.word	0x0800e23c
 80020bc:	0800e240 	.word	0x0800e240
 80020c0:	200002a8 	.word	0x200002a8
 80020c4:	20000244 	.word	0x20000244
 80020c8:	20000004 	.word	0x20000004
 80020cc:	20000000 	.word	0x20000000

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b0c7      	sub	sp, #284	; 0x11c
 80020d4:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80020d6:	f7ff fa59 	bl	800158c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80020da:	f7ff fa7d 	bl	80015d8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020de:	f001 fd3d 	bl	8003b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e2:	f000 f8fd 	bl	80022e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e6:	f7ff f84d 	bl	8001184 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80020ea:	f000 fd63 	bl	8002bb4 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 80020ee:	f000 f9b5 	bl	800245c <MX_SPI5_Init>
  MX_TIM1_Init();
 80020f2:	f000 fb5f 	bl	80027b4 <MX_TIM1_Init>
  MX_RNG_Init();
 80020f6:	f000 f969 	bl	80023cc <MX_RNG_Init>
  MX_I2C1_Init();
 80020fa:	f7ff f997 	bl	800142c <MX_I2C1_Init>
  MX_TIM2_Init();
 80020fe:	f000 fbad 	bl	800285c <MX_TIM2_Init>
  MX_ADC1_Init();
 8002102:	f7fe ffa5 	bl	8001050 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002106:	f000 fbf7 	bl	80028f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); // initial driver setup to drive ili9341
 800210a:	f001 f8eb 	bl	80032e4 <ILI9341_Init>

	const uint16_t COLOR_CIRCLE_RADIUS = 22;
 800210e:	2316      	movs	r3, #22
 8002110:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	ColorInfo redColor = {
 8002114:	231e      	movs	r3, #30
 8002116:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800211a:	235f      	movs	r3, #95	; 0x5f
 800211c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002120:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002124:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002128:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800212c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			{ 30, SCREEN_HEIGHT / 4 + 35, COLOR_CIRCLE_RADIUS },
			RED,
			0
	};
	ColorInfo greenColor = {
 8002138:	231e      	movs	r3, #30
 800213a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			{ 30, getCircleEdgeY(redColor.circle) + COLOR_CIRCLE_RADIUS + 15, COLOR_CIRCLE_RADIUS },
 800213e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002142:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002146:	f7fe ff53 	bl	8000ff0 <getCircleEdgeY>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002152:	4413      	add	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	330f      	adds	r3, #15
 8002158:	b29b      	uxth	r3, r3
	ColorInfo greenColor = {
 800215a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800215e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002162:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002166:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800216a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			GREEN,
			0
	};
	ColorInfo blueColor = {
 8002176:	231e      	movs	r3, #30
 8002178:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			{ 30, getCircleEdgeY(greenColor.circle) + COLOR_CIRCLE_RADIUS + 15, COLOR_CIRCLE_RADIUS },
 800217c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002180:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002184:	f7fe ff34 	bl	8000ff0 <getCircleEdgeY>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002190:	4413      	add	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	330f      	adds	r3, #15
 8002196:	b29b      	uxth	r3, r3
	ColorInfo blueColor = {
 8002198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800219c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80021a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80021a4:	231f      	movs	r3, #31
 80021a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			BLUE,
			0
	};
	ColorInfo mixedColor = {
 80021b2:	2387      	movs	r3, #135	; 0x87
 80021b4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80021b8:	232d      	movs	r3, #45	; 0x2d
 80021ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80021be:	2319      	movs	r3, #25
 80021c0:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			{ SCREEN_WIDTH / 2 - 25, 45, 25 },
			convertColorToRgb565(redColor.intensity, greenColor.intensity, blueColor.intensity),
 80021c4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021c8:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80021cc:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80021d0:	eeb0 1a66 	vmov.f32	s2, s13
 80021d4:	eef0 0a47 	vmov.f32	s1, s14
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	f7ff fa6c 	bl	80016b8 <convertColorToRgb565>
 80021e0:	4603      	mov	r3, r0
	ColorInfo mixedColor = {
 80021e2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			0
	};

	Point redPandaImagePoint = { 10, 30 };
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <main+0x1f8>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	Image redPandaImage = {
 80021f6:	4b35      	ldr	r3, [pc, #212]	; (80022cc <main+0x1fc>)
 80021f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80021fe:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002202:	2378      	movs	r3, #120	; 0x78
 8002204:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002208:	23b5      	movs	r3, #181	; 0xb5
 800220a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
//			sunImagePoint,
//			120,
//			160
//	};

	StudentInfo myInfo =
 800220e:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <main+0x200>)
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	ca07      	ldmia	r2, {r0, r1, r2}
 8002214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <main+0x204>)
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	ca07      	ldmia	r2, {r0, r1, r2}
 800222a:	c303      	stmia	r3!, {r0, r1}
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	751a      	strb	r2, [r3, #20]
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <main+0x208>)
 8002242:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8002246:	cb03      	ldmia	r3!, {r0, r1}
 8002248:	6010      	str	r0, [r2, #0]
 800224a:	6051      	str	r1, [r2, #4]
 800224c:	8819      	ldrh	r1, [r3, #0]
 800224e:	789b      	ldrb	r3, [r3, #2]
 8002250:	8111      	strh	r1, [r2, #8]
 8002252:	7293      	strb	r3, [r2, #10]
 8002254:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	f8c3 200f 	str.w	r2, [r3, #15]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <main+0x20c>)
 8002268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800226c:	ca07      	ldmia	r2, {r0, r1, r2}
 800226e:	c303      	stmia	r3!, {r0, r1}
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002278:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800227c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002280:	ca07      	ldmia	r2, {r0, r1, r2}
 8002282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		drawColorInfoPage(&redColor, &greenColor, &blueColor, &mixedColor);
 8002286:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800228a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800228e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002292:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8002296:	f7ff fd1b 	bl	8001cd0 <drawColorInfoPage>
		drawStudentInfoPage(myInfo, mixedColor);
 800229a:	ac16      	add	r4, sp, #88	; 0x58
 800229c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022a8:	4668      	mov	r0, sp
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2258      	movs	r2, #88	; 0x58
 80022b0:	4619      	mov	r1, r3
 80022b2:	f008 fc7c 	bl	800abae <memcpy>
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ba:	f7ff fda5 	bl	8001e08 <drawStudentInfoPage>
		delay(10);
 80022be:	200a      	movs	r0, #10
 80022c0:	f7fe fbb4 	bl	8000a2c <delay>
		drawColorInfoPage(&redColor, &greenColor, &blueColor, &mixedColor);
 80022c4:	e7df      	b.n	8002286 <main+0x1b6>
 80022c6:	bf00      	nop
 80022c8:	0800e244 	.word	0x0800e244
 80022cc:	0800e2a8 	.word	0x0800e2a8
 80022d0:	0800e248 	.word	0x0800e248
 80022d4:	0800e25c 	.word	0x0800e25c
 80022d8:	0800e27c 	.word	0x0800e27c
 80022dc:	0800e29c 	.word	0x0800e29c

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	; 0x50
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	2234      	movs	r2, #52	; 0x34
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f008 fbdd 	bl	800aaae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002304:	f004 f8c4 	bl	8006490 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <SystemClock_Config+0xd8>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <SystemClock_Config+0xd8>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <SystemClock_Config+0xd8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <SystemClock_Config+0xdc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <SystemClock_Config+0xdc>)
 8002326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <SystemClock_Config+0xdc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002338:	2301      	movs	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800233c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002340:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002342:	2302      	movs	r3, #2
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002346:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800234c:	2304      	movs	r3, #4
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002350:	23d8      	movs	r3, #216	; 0xd8
 8002352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002354:	2302      	movs	r3, #2
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002358:	2309      	movs	r3, #9
 800235a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800235c:	2302      	movs	r3, #2
 800235e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f8f3 	bl	8006550 <HAL_RCC_OscConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002370:	f000 f826 	bl	80023c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002374:	f004 f89c 	bl	80064b0 <HAL_PWREx_EnableOverDrive>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800237e:	f000 f81f 	bl	80023c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002382:	230f      	movs	r3, #15
 8002384:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002386:	2302      	movs	r3, #2
 8002388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800238e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	2107      	movs	r1, #7
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fb83 	bl	8006aac <HAL_RCC_ClockConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80023ac:	f000 f808 	bl	80023c0 <Error_Handler>
  }
}
 80023b0:	bf00      	nop
 80023b2:	3750      	adds	r7, #80	; 0x50
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_RNG_Init+0x20>)
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <MX_RNG_Init+0x24>)
 80023d4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_RNG_Init+0x20>)
 80023d8:	f005 f9b6 	bl	8007748 <HAL_RNG_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023e2:	f7ff ffed 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200002b0 	.word	0x200002b0
 80023f0:	50060800 	.word	0x50060800

080023f4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0a8      	sub	sp, #160	; 0xa0
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	2290      	movs	r2, #144	; 0x90
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f008 fb52 	bl	800aaae <memset>
  if(rngHandle->Instance==RNG)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_RNG_MspInit+0x60>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d11b      	bne.n	800244c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002414:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002418:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4618      	mov	r0, r3
 8002426:	f004 fd67 	bl	8006ef8 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002430:	f7ff ffc6 	bl	80023c0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_RNG_MspInit+0x64>)
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_RNG_MspInit+0x64>)
 800243a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243e:	6353      	str	r3, [r2, #52]	; 0x34
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RNG_MspInit+0x64>)
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800244c:	bf00      	nop
 800244e:	37a0      	adds	r7, #160	; 0xa0
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	50060800 	.word	0x50060800
 8002458:	40023800 	.word	0x40023800

0800245c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <MX_SPI5_Init+0x78>)
 8002464:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800246c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800247a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_SPI5_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_SPI5_Init+0x74>)
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_SPI5_Init+0x74>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_SPI5_Init+0x74>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_SPI5_Init+0x74>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_SPI5_Init+0x74>)
 80024aa:	2207      	movs	r2, #7
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <MX_SPI5_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_SPI5_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_SPI5_Init+0x74>)
 80024bc:	f005 f96e 	bl	800779c <HAL_SPI_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80024c6:	f7ff ff7b 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200002c0 	.word	0x200002c0
 80024d4:	40015000 	.word	0x40015000

080024d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_SPI_MspInit+0x7c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d128      	bne.n	800254c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_SPI_MspInit+0x80>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_SPI_MspInit+0x80>)
 8002500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_SPI_MspInit+0x80>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_SPI_MspInit+0x80>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_SPI_MspInit+0x80>)
 8002518:	f043 0320 	orr.w	r3, r3, #32
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_SPI_MspInit+0x80>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800252a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800253c:	2305      	movs	r3, #5
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_SPI_MspInit+0x84>)
 8002548:	f002 f9de 	bl	8004908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40015000 	.word	0x40015000
 8002558:	40023800 	.word	0x40023800
 800255c:	40021400 	.word	0x40021400

08002560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_MspInit+0x44>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_MspInit+0x44>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_MspInit+0x44>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_MspInit+0x44>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_MspInit+0x44>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_MspInit+0x44>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f001 fb1c 	bl	8003be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <ADC_IRQHandler+0x10>)
 80025ba:	f001 fcb3 	bl	8003f24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200001fc 	.word	0x200001fc

080025c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM3_IRQHandler+0x10>)
 80025ce:	f005 feb3 	bl	8008338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200003c0 	.word	0x200003c0

080025dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <I2C1_EV_IRQHandler+0x10>)
 80025e2:	f002 fef5 	bl	80053d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000244 	.word	0x20000244

080025f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <I2C1_ER_IRQHandler+0x10>)
 80025f6:	f002 ff05 	bl	8005404 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000244 	.word	0x20000244

08002604 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_kill>:

int _kill(int pid, int sig) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800261e:	f008 fa99 	bl	800ab54 <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
	return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_exit>:

void _exit(int status) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffe7 	bl	8002614 <_kill>
	while (1) {
 8002646:	e7fe      	b.n	8002646 <_exit+0x12>

08002648 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e00a      	b.n	8002670 <_read+0x28>
		*ptr++ = __io_getchar();
 800265a:	f3af 8000 	nop.w
 800265e:	4601      	mov	r1, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	60ba      	str	r2, [r7, #8]
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	dbf0      	blt.n	800265a <_read+0x12>
	}

	return len;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e009      	b.n	80026a8 <_write+0x26>
		__io_putchar(*ptr++);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60ba      	str	r2, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf1      	blt.n	8002694 <_write+0x12>
	}
	return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_close>:

int _close(int file) {
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e2:	605a      	str	r2, [r3, #4]
	return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_isatty>:

int _isatty(int file) {
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
		errno = ENOMEM;
 8002754:	f008 f9fe 	bl	800ab54 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20080000 	.word	0x20080000
 8002784:	00000400 	.word	0x00000400
 8002788:	20000324 	.word	0x20000324
 800278c:	200005e8 	.word	0x200005e8

08002790 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SystemInit+0x20>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <SystemInit+0x20>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <MX_TIM1_Init+0xa4>)
 80027d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027da:	f242 720f 	movw	r2, #9999	; 0x270f
 80027de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_TIM1_Init+0xa0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002800:	4814      	ldr	r0, [pc, #80]	; (8002854 <MX_TIM1_Init+0xa0>)
 8002802:	f005 fb6d 	bl	8007ee0 <HAL_TIM_Base_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800280c:	f7ff fdd8 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4619      	mov	r1, r3
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <MX_TIM1_Init+0xa0>)
 800281e:	f005 ffbf 	bl	80087a0 <HAL_TIM_ConfigClockSource>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002828:	f7ff fdca 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_TIM1_Init+0xa0>)
 800283e:	f006 fc39 	bl	80090b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002848:	f7ff fdba 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000328 	.word	0x20000328
 8002858:	40010000 	.word	0x40010000

0800285c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <MX_TIM2_Init+0x98>)
 800287c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <MX_TIM2_Init+0x98>)
 8002884:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_TIM2_Init+0x98>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <MX_TIM2_Init+0x98>)
 8002892:	f242 720f 	movw	r2, #9999	; 0x270f
 8002896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <MX_TIM2_Init+0x98>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <MX_TIM2_Init+0x98>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028a4:	4813      	ldr	r0, [pc, #76]	; (80028f4 <MX_TIM2_Init+0x98>)
 80028a6:	f005 fb1b 	bl	8007ee0 <HAL_TIM_Base_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80028b0:	f7ff fd86 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	4619      	mov	r1, r3
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <MX_TIM2_Init+0x98>)
 80028c2:	f005 ff6d 	bl	80087a0 <HAL_TIM_ConfigClockSource>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80028cc:	f7ff fd78 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028d0:	2320      	movs	r3, #32
 80028d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_TIM2_Init+0x98>)
 80028de:	f006 fbe9 	bl	80090b4 <HAL_TIMEx_MasterConfigSynchronization>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80028e8:	f7ff fd6a 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000374 	.word	0x20000374

080028f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	; 0x38
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	615a      	str	r2, [r3, #20]
 8002928:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800292a:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <MX_TIM3_Init+0xec>)
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <MX_TIM3_Init+0xf0>)
 800292e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <MX_TIM3_Init+0xec>)
 8002932:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <MX_TIM3_Init+0xec>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800293e:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <MX_TIM3_Init+0xec>)
 8002940:	f242 720f 	movw	r2, #9999	; 0x270f
 8002944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002946:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <MX_TIM3_Init+0xec>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <MX_TIM3_Init+0xec>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002952:	4824      	ldr	r0, [pc, #144]	; (80029e4 <MX_TIM3_Init+0xec>)
 8002954:	f005 fac4 	bl	8007ee0 <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800295e:	f7ff fd2f 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800296c:	4619      	mov	r1, r3
 800296e:	481d      	ldr	r0, [pc, #116]	; (80029e4 <MX_TIM3_Init+0xec>)
 8002970:	f005 ff16 	bl	80087a0 <HAL_TIM_ConfigClockSource>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800297a:	f7ff fd21 	bl	80023c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800297e:	4819      	ldr	r0, [pc, #100]	; (80029e4 <MX_TIM3_Init+0xec>)
 8002980:	f005 fc79 	bl	8008276 <HAL_TIM_PWM_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800298a:	f7ff fd19 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	4811      	ldr	r0, [pc, #68]	; (80029e4 <MX_TIM3_Init+0xec>)
 800299e:	f006 fb89 	bl	80090b4 <HAL_TIMEx_MasterConfigSynchronization>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80029a8:	f7ff fd0a 	bl	80023c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ac:	2360      	movs	r3, #96	; 0x60
 80029ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80029b0:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80029b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029be:	463b      	mov	r3, r7
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4807      	ldr	r0, [pc, #28]	; (80029e4 <MX_TIM3_Init+0xec>)
 80029c6:	f005 fdd7 	bl	8008578 <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80029d0:	f7ff fcf6 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <MX_TIM3_Init+0xec>)
 80029d6:	f000 f87b 	bl	8002ad0 <HAL_TIM_MspPostInit>

}
 80029da:	bf00      	nop
 80029dc:	3738      	adds	r7, #56	; 0x38
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200003c0 	.word	0x200003c0
 80029e8:	40000400 	.word	0x40000400

080029ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <HAL_TIM_Base_MspInit+0xd4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a2c      	ldr	r2, [pc, #176]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a26:	e046      	b.n	8002ab6 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d128      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a62:	2320      	movs	r3, #32
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a72:	2301      	movs	r3, #1
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4812      	ldr	r0, [pc, #72]	; (8002ac8 <HAL_TIM_Base_MspInit+0xdc>)
 8002a7e:	f001 ff43 	bl	8004908 <HAL_GPIO_Init>
}
 8002a82:	e018      	b.n	8002ab6 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_TIM_Base_MspInit+0xe0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d113      	bne.n	8002ab6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	201d      	movs	r0, #29
 8002aac:	f001 feb7 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ab0:	201d      	movs	r0, #29
 8002ab2:	f001 fed0 	bl	8004856 <HAL_NVIC_EnableIRQ>
}
 8002ab6:	bf00      	nop
 8002ab8:	3730      	adds	r7, #48	; 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40000400 	.word	0x40000400

08002ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <HAL_TIM_MspPostInit+0x64>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_TIM_MspPostInit+0x68>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_TIM_MspPostInit+0x68>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_TIM_MspPostInit+0x68>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Temperature_and_Humidity_TIMER_Pin;
 8002b0a:	2340      	movs	r3, #64	; 0x40
 8002b0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temperature_and_Humidity_TIMER_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_TIM_MspPostInit+0x6c>)
 8002b26:	f001 feef 	bl	8004908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b2a:	bf00      	nop
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000

08002b40 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <HAL_TIM_Base_MspDeInit+0x64>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d106      	bne.n	8002b60 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
}
 8002b5e:	e01d      	b.n	8002b9c <HAL_TIM_Base_MspDeInit+0x5c>
  else if(tim_baseHandle->Instance==TIM2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d10a      	bne.n	8002b80 <HAL_TIM_Base_MspDeInit+0x40>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 8002b76:	2120      	movs	r1, #32
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <HAL_TIM_Base_MspDeInit+0x6c>)
 8002b7a:	f002 f871 	bl	8004c60 <HAL_GPIO_DeInit>
}
 8002b7e:	e00d      	b.n	8002b9c <HAL_TIM_Base_MspDeInit+0x5c>
  else if(tim_baseHandle->Instance==TIM3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_TIM_Base_MspDeInit+0x70>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <HAL_TIM_Base_MspDeInit+0x5c>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a06      	ldr	r2, [pc, #24]	; (8002ba8 <HAL_TIM_Base_MspDeInit+0x68>)
 8002b90:	f023 0302 	bic.w	r3, r3, #2
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8002b96:	201d      	movs	r0, #29
 8002b98:	f001 fe6b 	bl	8004872 <HAL_NVIC_DisableIRQ>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <MX_USART3_UART_Init+0x5c>)
 8002bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USART3_UART_Init+0x58>)
 8002bf8:	f006 fb08 	bl	800920c <HAL_UART_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002c02:	f7ff fbdd 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000040c 	.word	0x2000040c
 8002c10:	40004800 	.word	0x40004800

08002c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0ae      	sub	sp, #184	; 0xb8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2290      	movs	r2, #144	; 0x90
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f007 ff3a 	bl	800aaae <memset>
  if(uartHandle->Instance==USART3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <HAL_UART_MspInit+0xb4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d13c      	bne.n	8002cbe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 f950 	bl	8006ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c5e:	f7ff fbaf 	bl	80023c0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_UART_MspInit+0xb8>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <HAL_UART_MspInit+0xb8>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_UART_MspInit+0xb8>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_UART_MspInit+0xb8>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <HAL_UART_MspInit+0xb8>)
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_UART_MspInit+0xb8>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cac:	2307      	movs	r3, #7
 8002cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <HAL_UART_MspInit+0xbc>)
 8002cba:	f001 fe25 	bl	8004908 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	37b8      	adds	r7, #184	; 0xb8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40004800 	.word	0x40004800
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020c00 	.word	0x40020c00

08002cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cda:	490e      	ldr	r1, [pc, #56]	; (8002d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce0:	e002      	b.n	8002ce8 <LoopCopyDataInit>

08002ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce6:	3304      	adds	r3, #4

08002ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cec:	d3f9      	bcc.n	8002ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	; (8002d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf4:	e001      	b.n	8002cfa <LoopFillZerobss>

08002cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf8:	3204      	adds	r2, #4

08002cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cfc:	d3fb      	bcc.n	8002cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cfe:	f7ff fd47 	bl	8002790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d02:	f007 ff2d 	bl	800ab60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d06:	f7ff f9e3 	bl	80020d0 <main>
  bx  lr    
 8002d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d14:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d18:	080192e8 	.word	0x080192e8
  ldr r2, =_sbss
 8002d1c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d20:	200005e4 	.word	0x200005e4

08002d24 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <BusFault_Handler>

08002d26 <ILI9341_Draw_Filled_Circle>:
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour)
{
 8002d26:	b590      	push	{r4, r7, lr}
 8002d28:	b08b      	sub	sp, #44	; 0x2c
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	4608      	mov	r0, r1
 8002d30:	4611      	mov	r1, r2
 8002d32:	461a      	mov	r2, r3
 8002d34:	4623      	mov	r3, r4
 8002d36:	80fb      	strh	r3, [r7, #6]
 8002d38:	4603      	mov	r3, r0
 8002d3a:	80bb      	strh	r3, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
 8002d40:	4613      	mov	r3, r2
 8002d42:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	f1c3 0301 	rsb	r3, r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8002d5e:	e061      	b.n	8002e24 <ILI9341_Draw_Filled_Circle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e018      	b.n	8002d9c <ILI9341_Draw_Filled_Circle+0x76>
		{
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	b298      	uxth	r0, r3
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	88bb      	ldrh	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	883a      	ldrh	r2, [r7, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f000 fc84 	bl	8003688 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	b298      	uxth	r0, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	88ba      	ldrh	r2, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	883a      	ldrh	r2, [r7, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f000 fc79 	bl	8003688 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	88fa      	ldrh	r2, [r7, #6]
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	4413      	add	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	dde0      	ble.n	8002d6a <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++)
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e018      	b.n	8002de4 <ILI9341_Draw_Filled_Circle+0xbe>
		{
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	b298      	uxth	r0, r3
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	883a      	ldrh	r2, [r7, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f000 fc60 	bl	8003688 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	b298      	uxth	r0, r3
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	88ba      	ldrh	r2, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	883a      	ldrh	r2, [r7, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f000 fc55 	bl	8003688 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	4413      	add	r3, r2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dde0      	ble.n	8002db2 <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	3301      	adds	r3, #1
 8002df4:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3302      	adds	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005a      	lsls	r2, r3, #1
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	dd09      	ble.n	8002e24 <ILI9341_Draw_Filled_Circle+0xfe>
		{
			x--;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	3b01      	subs	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3302      	adds	r3, #2
 8002e22:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	da99      	bge.n	8002d60 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	372c      	adds	r7, #44	; 0x2c
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}

08002e36 <ILI9341_Draw_Filled_Rectangle_Coord>:
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8002e36:	b590      	push	{r4, r7, lr}
 8002e38:	b089      	sub	sp, #36	; 0x24
 8002e3a:	af02      	add	r7, sp, #8
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	4608      	mov	r0, r1
 8002e40:	4611      	mov	r1, r2
 8002e42:	461a      	mov	r2, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	80fb      	strh	r3, [r7, #6]
 8002e48:	4603      	mov	r3, r0
 8002e4a:	80bb      	strh	r3, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da01      	bge.n	8002e82 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8002e86:	883a      	ldrh	r2, [r7, #0]
 8002e88:	88bb      	ldrh	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da01      	bge.n	8002e98 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 8002e94:	2301      	movs	r3, #1
 8002e96:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	823b      	strh	r3, [r7, #16]
 8002eaa:	e005      	b.n	8002eb8 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002eb8:	7cbb      	ldrb	r3, [r7, #18]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002ebe:	883a      	ldrh	r2, [r7, #0]
 8002ec0:	88bb      	ldrh	r3, [r7, #4]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	81fb      	strh	r3, [r7, #14]
 8002eca:	e005      	b.n	8002ed8 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002ecc:	88ba      	ldrh	r2, [r7, #4]
 8002ece:	883b      	ldrh	r3, [r7, #0]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8002ed4:	883b      	ldrh	r3, [r7, #0]
 8002ed6:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8002ed8:	8abc      	ldrh	r4, [r7, #20]
 8002eda:	8afa      	ldrh	r2, [r7, #22]
 8002edc:	89f9      	ldrh	r1, [r7, #14]
 8002ede:	8a38      	ldrh	r0, [r7, #16]
 8002ee0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4623      	mov	r3, r4
 8002ee6:	f000 fca9 	bl	800383c <ILI9341_Draw_Rectangle>
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
	...

08002ef4 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	4603      	mov	r3, r0
 8002f08:	71bb      	strb	r3, [r7, #6]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	717b      	strb	r3, [r7, #5]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b1f      	cmp	r3, #31
 8002f1a:	d802      	bhi.n	8002f22 <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	e002      	b.n	8002f28 <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	3b20      	subs	r3, #32
 8002f26:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	753b      	strb	r3, [r7, #20]
 8002f2c:	e012      	b.n	8002f54 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8002f2e:	7dfa      	ldrb	r2, [r7, #23]
 8002f30:	7d38      	ldrb	r0, [r7, #20]
 8002f32:	7d39      	ldrb	r1, [r7, #20]
 8002f34:	4c3b      	ldr	r4, [pc, #236]	; (8003024 <ILI9341_Draw_Char+0x130>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4423      	add	r3, r4
 8002f40:	4403      	add	r3, r0
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	f101 0318 	add.w	r3, r1, #24
 8002f48:	443b      	add	r3, r7
 8002f4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002f4e:	7d3b      	ldrb	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	753b      	strb	r3, [r7, #20]
 8002f54:	7d3b      	ldrb	r3, [r7, #20]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d9e9      	bls.n	8002f2e <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	b298      	uxth	r0, r3
 8002f5e:	797b      	ldrb	r3, [r7, #5]
 8002f60:	b299      	uxth	r1, r3
 8002f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f64:	461a      	mov	r2, r3
 8002f66:	0052      	lsls	r2, r2, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	b29c      	uxth	r4, r3
 8002f74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	4623      	mov	r3, r4
 8002f7a:	f000 fc5f 	bl	800383c <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	757b      	strb	r3, [r7, #21]
 8002f82:	e047      	b.n	8003014 <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	75bb      	strb	r3, [r7, #22]
 8002f88:	e03e      	b.n	8003008 <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 8002f8a:	7d7b      	ldrb	r3, [r7, #21]
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	443b      	add	r3, r7
 8002f90:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f94:	461a      	mov	r2, r3
 8002f96:	7dbb      	ldrb	r3, [r7, #22]
 8002f98:	fa42 f303 	asr.w	r3, r2, r3
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02e      	beq.n	8003002 <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 8002fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d110      	bne.n	8002fcc <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8002faa:	79bb      	ldrb	r3, [r7, #6]
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	b298      	uxth	r0, r3
 8002fb6:	797b      	ldrb	r3, [r7, #5]
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	7dbb      	ldrb	r3, [r7, #22]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f000 fb5f 	bl	8003688 <ILI9341_Draw_Pixel>
 8002fca:	e01a      	b.n	8003002 <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	7d7b      	ldrb	r3, [r7, #21]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002fd6:	fb11 f303 	smulbb	r3, r1, r3
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	b298      	uxth	r0, r3
 8002fe0:	797b      	ldrb	r3, [r7, #5]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	7dbb      	ldrb	r3, [r7, #22]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002fea:	fb11 f303 	smulbb	r3, r1, r3
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b299      	uxth	r1, r3
 8002ff4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002ff6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	f000 fc1d 	bl	800383c <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8003002:	7dbb      	ldrb	r3, [r7, #22]
 8003004:	3301      	adds	r3, #1
 8003006:	75bb      	strb	r3, [r7, #22]
 8003008:	7dbb      	ldrb	r3, [r7, #22]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d9bd      	bls.n	8002f8a <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 800300e:	7d7b      	ldrb	r3, [r7, #21]
 8003010:	3301      	adds	r3, #1
 8003012:	757b      	strb	r3, [r7, #21]
 8003014:	7d7b      	ldrb	r3, [r7, #21]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d9b4      	bls.n	8002f84 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	08018c70 	.word	0x08018c70

08003028 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	af02      	add	r7, sp, #8
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	70fb      	strb	r3, [r7, #3]
 800303a:	460b      	mov	r3, r1
 800303c:	70bb      	strb	r3, [r7, #2]
 800303e:	4613      	mov	r3, r2
 8003040:	803b      	strh	r3, [r7, #0]
	while (*Text)
 8003042:	e017      	b.n	8003074 <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	7818      	ldrb	r0, [r3, #0]
 800304c:	883c      	ldrh	r4, [r7, #0]
 800304e:	78ba      	ldrb	r2, [r7, #2]
 8003050:	78f9      	ldrb	r1, [r7, #3]
 8003052:	8bbb      	ldrh	r3, [r7, #28]
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	8b3b      	ldrh	r3, [r7, #24]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4623      	mov	r3, r4
 800305c:	f7ff ff4a 	bl	8002ef4 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8003060:	8b3b      	ldrh	r3, [r7, #24]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	0052      	lsls	r2, r2, #1
 8003068:	4413      	add	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	4413      	add	r3, r2
 8003072:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e3      	bne.n	8003044 <ILI9341_Draw_Text+0x1c>
	}
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
	...

08003088 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 800308c:	f7ff f9e6 	bl	800245c <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 8003090:	f7fe f878 	bl	8001184 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800309a:	4802      	ldr	r0, [pc, #8]	; (80030a4 <ILI9341_SPI_Init+0x1c>)
 800309c:	f001 ff04 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40020800 	.word	0x40020800

080030a8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80030b2:	1df9      	adds	r1, r7, #7
 80030b4:	2301      	movs	r3, #1
 80030b6:	2201      	movs	r2, #1
 80030b8:	4803      	ldr	r0, [pc, #12]	; (80030c8 <ILI9341_SPI_Send+0x20>)
 80030ba:	f004 fc1a 	bl	80078f2 <HAL_SPI_Transmit>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200002c0 	.word	0x200002c0

080030cc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80030d6:	2200      	movs	r2, #0
 80030d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030dc:	480b      	ldr	r0, [pc, #44]	; (800310c <ILI9341_Write_Command+0x40>)
 80030de:	f001 fee3 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80030e2:	2200      	movs	r2, #0
 80030e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e8:	4808      	ldr	r0, [pc, #32]	; (800310c <ILI9341_Write_Command+0x40>)
 80030ea:	f001 fedd 	bl	8004ea8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ffd9 	bl	80030a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80030f6:	2201      	movs	r2, #1
 80030f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030fc:	4803      	ldr	r0, [pc, #12]	; (800310c <ILI9341_Write_Command+0x40>)
 80030fe:	f001 fed3 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40020800 	.word	0x40020800

08003110 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800311a:	2201      	movs	r2, #1
 800311c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003120:	480b      	ldr	r0, [pc, #44]	; (8003150 <ILI9341_Write_Data+0x40>)
 8003122:	f001 fec1 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <ILI9341_Write_Data+0x40>)
 800312e:	f001 febb 	bl	8004ea8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ffb7 	bl	80030a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800313a:	2201      	movs	r2, #1
 800313c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <ILI9341_Write_Data+0x40>)
 8003142:	f001 feb1 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40020800 	.word	0x40020800

08003154 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4604      	mov	r4, r0
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4623      	mov	r3, r4
 8003164:	80fb      	strh	r3, [r7, #6]
 8003166:	4603      	mov	r3, r0
 8003168:	80bb      	strh	r3, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	807b      	strh	r3, [r7, #2]
 800316e:	4613      	mov	r3, r2
 8003170:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8003172:	202a      	movs	r0, #42	; 0x2a
 8003174:	f7ff ffaa 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	b29b      	uxth	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ffc5 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ffc0 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	b29b      	uxth	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ffb9 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ffb4 	bl	8003110 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80031a8:	202b      	movs	r0, #43	; 0x2b
 80031aa:	f7ff ff8f 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 80031ae:	88bb      	ldrh	r3, [r7, #4]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ffaa 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80031bc:	88bb      	ldrh	r3, [r7, #4]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ffa5 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 80031c6:	883b      	ldrh	r3, [r7, #0]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff9e 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 80031d4:	883b      	ldrh	r3, [r7, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff99 	bl	8003110 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80031de:	202c      	movs	r0, #44	; 0x2c
 80031e0:	f7ff ff74 	bl	80030cc <ILI9341_Write_Command>
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}

080031ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80031f0:	2201      	movs	r2, #1
 80031f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031f6:	480b      	ldr	r0, [pc, #44]	; (8003224 <ILI9341_Reset+0x38>)
 80031f8:	f001 fe56 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80031fc:	20c8      	movs	r0, #200	; 0xc8
 80031fe:	f000 fd13 	bl	8003c28 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003202:	2200      	movs	r2, #0
 8003204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003208:	4806      	ldr	r0, [pc, #24]	; (8003224 <ILI9341_Reset+0x38>)
 800320a:	f001 fe4d 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800320e:	20c8      	movs	r0, #200	; 0xc8
 8003210:	f000 fd0a 	bl	8003c28 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003214:	2201      	movs	r2, #1
 8003216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800321a:	4802      	ldr	r0, [pc, #8]	; (8003224 <ILI9341_Reset+0x38>)
 800321c:	f001 fe44 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40020800 	.word	0x40020800

08003228 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8003236:	2036      	movs	r0, #54	; 0x36
 8003238:	f7ff ff48 	bl	80030cc <ILI9341_Write_Command>
	HAL_Delay(1);
 800323c:	2001      	movs	r0, #1
 800323e:	f000 fcf3 	bl	8003c28 <HAL_Delay>

	switch (screen_rotation)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d837      	bhi.n	80032b8 <ILI9341_Set_Rotation+0x90>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <ILI9341_Set_Rotation+0x28>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003261 	.word	0x08003261
 8003254:	08003277 	.word	0x08003277
 8003258:	0800328d 	.word	0x0800328d
 800325c:	080032a3 	.word	0x080032a3
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8003260:	2048      	movs	r0, #72	; 0x48
 8003262:	f7ff ff55 	bl	8003110 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <ILI9341_Set_Rotation+0x9c>)
 8003268:	22f0      	movs	r2, #240	; 0xf0
 800326a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800326c:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <ILI9341_Set_Rotation+0xa0>)
 800326e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003272:	801a      	strh	r2, [r3, #0]
		break;
 8003274:	e021      	b.n	80032ba <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8003276:	2028      	movs	r0, #40	; 0x28
 8003278:	f7ff ff4a 	bl	8003110 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <ILI9341_Set_Rotation+0x9c>)
 800327e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003282:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <ILI9341_Set_Rotation+0xa0>)
 8003286:	22f0      	movs	r2, #240	; 0xf0
 8003288:	801a      	strh	r2, [r3, #0]
		break;
 800328a:	e016      	b.n	80032ba <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 800328c:	2088      	movs	r0, #136	; 0x88
 800328e:	f7ff ff3f 	bl	8003110 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <ILI9341_Set_Rotation+0x9c>)
 8003294:	22f0      	movs	r2, #240	; 0xf0
 8003296:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <ILI9341_Set_Rotation+0xa0>)
 800329a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800329e:	801a      	strh	r2, [r3, #0]
		break;
 80032a0:	e00b      	b.n	80032ba <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 80032a2:	20e8      	movs	r0, #232	; 0xe8
 80032a4:	f7ff ff34 	bl	8003110 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <ILI9341_Set_Rotation+0x9c>)
 80032aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032ae:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <ILI9341_Set_Rotation+0xa0>)
 80032b2:	22f0      	movs	r2, #240	; 0xf0
 80032b4:	801a      	strh	r2, [r3, #0]
		break;
 80032b6:	e000      	b.n	80032ba <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 80032b8:	bf00      	nop
	}
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	2000000e 	.word	0x2000000e
 80032c8:	2000000c 	.word	0x2000000c

080032cc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80032d0:	2201      	movs	r2, #1
 80032d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032d6:	4802      	ldr	r0, [pc, #8]	; (80032e0 <ILI9341_Enable+0x14>)
 80032d8:	f001 fde6 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40020800 	.word	0x40020800

080032e4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 80032e8:	f7ff fff0 	bl	80032cc <ILI9341_Enable>
	ILI9341_SPI_Init();
 80032ec:	f7ff fecc 	bl	8003088 <ILI9341_SPI_Init>
	ILI9341_Reset();
 80032f0:	f7ff ff7c 	bl	80031ec <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7ff fee9 	bl	80030cc <ILI9341_Write_Command>
	HAL_Delay(1000);
 80032fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032fe:	f000 fc93 	bl	8003c28 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8003302:	20cb      	movs	r0, #203	; 0xcb
 8003304:	f7ff fee2 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8003308:	2039      	movs	r0, #57	; 0x39
 800330a:	f7ff ff01 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800330e:	202c      	movs	r0, #44	; 0x2c
 8003310:	f7ff fefe 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003314:	2000      	movs	r0, #0
 8003316:	f7ff fefb 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 800331a:	2034      	movs	r0, #52	; 0x34
 800331c:	f7ff fef8 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8003320:	2002      	movs	r0, #2
 8003322:	f7ff fef5 	bl	8003110 <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8003326:	20cf      	movs	r0, #207	; 0xcf
 8003328:	f7ff fed0 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f7ff feef 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8003332:	20c1      	movs	r0, #193	; 0xc1
 8003334:	f7ff feec 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8003338:	2030      	movs	r0, #48	; 0x30
 800333a:	f7ff fee9 	bl	8003110 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 800333e:	20e8      	movs	r0, #232	; 0xe8
 8003340:	f7ff fec4 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8003344:	2085      	movs	r0, #133	; 0x85
 8003346:	f7ff fee3 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f7ff fee0 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8003350:	2078      	movs	r0, #120	; 0x78
 8003352:	f7ff fedd 	bl	8003110 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8003356:	20ea      	movs	r0, #234	; 0xea
 8003358:	f7ff feb8 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7ff fed7 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8003362:	2000      	movs	r0, #0
 8003364:	f7ff fed4 	bl	8003110 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8003368:	20ed      	movs	r0, #237	; 0xed
 800336a:	f7ff feaf 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 800336e:	2064      	movs	r0, #100	; 0x64
 8003370:	f7ff fece 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8003374:	2003      	movs	r0, #3
 8003376:	f7ff fecb 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 800337a:	2012      	movs	r0, #18
 800337c:	f7ff fec8 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8003380:	2081      	movs	r0, #129	; 0x81
 8003382:	f7ff fec5 	bl	8003110 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8003386:	20f7      	movs	r0, #247	; 0xf7
 8003388:	f7ff fea0 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 800338c:	2020      	movs	r0, #32
 800338e:	f7ff febf 	bl	8003110 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8003392:	20c0      	movs	r0, #192	; 0xc0
 8003394:	f7ff fe9a 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8003398:	2023      	movs	r0, #35	; 0x23
 800339a:	f7ff feb9 	bl	8003110 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 800339e:	20c1      	movs	r0, #193	; 0xc1
 80033a0:	f7ff fe94 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80033a4:	2010      	movs	r0, #16
 80033a6:	f7ff feb3 	bl	8003110 <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80033aa:	20c5      	movs	r0, #197	; 0xc5
 80033ac:	f7ff fe8e 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80033b0:	203e      	movs	r0, #62	; 0x3e
 80033b2:	f7ff fead 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80033b6:	2028      	movs	r0, #40	; 0x28
 80033b8:	f7ff feaa 	bl	8003110 <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80033bc:	20c7      	movs	r0, #199	; 0xc7
 80033be:	f7ff fe85 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80033c2:	2086      	movs	r0, #134	; 0x86
 80033c4:	f7ff fea4 	bl	8003110 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80033c8:	2036      	movs	r0, #54	; 0x36
 80033ca:	f7ff fe7f 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80033ce:	2048      	movs	r0, #72	; 0x48
 80033d0:	f7ff fe9e 	bl	8003110 <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80033d4:	203a      	movs	r0, #58	; 0x3a
 80033d6:	f7ff fe79 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 80033da:	2055      	movs	r0, #85	; 0x55
 80033dc:	f7ff fe98 	bl	8003110 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80033e0:	20b1      	movs	r0, #177	; 0xb1
 80033e2:	f7ff fe73 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7ff fe92 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 80033ec:	2018      	movs	r0, #24
 80033ee:	f7ff fe8f 	bl	8003110 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 80033f2:	20b6      	movs	r0, #182	; 0xb6
 80033f4:	f7ff fe6a 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 80033f8:	2008      	movs	r0, #8
 80033fa:	f7ff fe89 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 80033fe:	2082      	movs	r0, #130	; 0x82
 8003400:	f7ff fe86 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8003404:	2027      	movs	r0, #39	; 0x27
 8003406:	f7ff fe83 	bl	8003110 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 800340a:	20f2      	movs	r0, #242	; 0xf2
 800340c:	f7ff fe5e 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8003410:	2000      	movs	r0, #0
 8003412:	f7ff fe7d 	bl	8003110 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8003416:	2026      	movs	r0, #38	; 0x26
 8003418:	f7ff fe58 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 800341c:	2001      	movs	r0, #1
 800341e:	f7ff fe77 	bl	8003110 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8003422:	20e0      	movs	r0, #224	; 0xe0
 8003424:	f7ff fe52 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8003428:	200f      	movs	r0, #15
 800342a:	f7ff fe71 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800342e:	2031      	movs	r0, #49	; 0x31
 8003430:	f7ff fe6e 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8003434:	202b      	movs	r0, #43	; 0x2b
 8003436:	f7ff fe6b 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800343a:	200c      	movs	r0, #12
 800343c:	f7ff fe68 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8003440:	200e      	movs	r0, #14
 8003442:	f7ff fe65 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8003446:	2008      	movs	r0, #8
 8003448:	f7ff fe62 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 800344c:	204e      	movs	r0, #78	; 0x4e
 800344e:	f7ff fe5f 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8003452:	20f1      	movs	r0, #241	; 0xf1
 8003454:	f7ff fe5c 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8003458:	2037      	movs	r0, #55	; 0x37
 800345a:	f7ff fe59 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800345e:	2007      	movs	r0, #7
 8003460:	f7ff fe56 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8003464:	2010      	movs	r0, #16
 8003466:	f7ff fe53 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800346a:	2003      	movs	r0, #3
 800346c:	f7ff fe50 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8003470:	200e      	movs	r0, #14
 8003472:	f7ff fe4d 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8003476:	2009      	movs	r0, #9
 8003478:	f7ff fe4a 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800347c:	2000      	movs	r0, #0
 800347e:	f7ff fe47 	bl	8003110 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8003482:	20e1      	movs	r0, #225	; 0xe1
 8003484:	f7ff fe22 	bl	80030cc <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8003488:	2000      	movs	r0, #0
 800348a:	f7ff fe41 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800348e:	200e      	movs	r0, #14
 8003490:	f7ff fe3e 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8003494:	2014      	movs	r0, #20
 8003496:	f7ff fe3b 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800349a:	2003      	movs	r0, #3
 800349c:	f7ff fe38 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80034a0:	2011      	movs	r0, #17
 80034a2:	f7ff fe35 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80034a6:	2007      	movs	r0, #7
 80034a8:	f7ff fe32 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80034ac:	2031      	movs	r0, #49	; 0x31
 80034ae:	f7ff fe2f 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80034b2:	20c1      	movs	r0, #193	; 0xc1
 80034b4:	f7ff fe2c 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80034b8:	2048      	movs	r0, #72	; 0x48
 80034ba:	f7ff fe29 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80034be:	2008      	movs	r0, #8
 80034c0:	f7ff fe26 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80034c4:	200f      	movs	r0, #15
 80034c6:	f7ff fe23 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80034ca:	200c      	movs	r0, #12
 80034cc:	f7ff fe20 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80034d0:	2031      	movs	r0, #49	; 0x31
 80034d2:	f7ff fe1d 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80034d6:	2036      	movs	r0, #54	; 0x36
 80034d8:	f7ff fe1a 	bl	8003110 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80034dc:	200f      	movs	r0, #15
 80034de:	f7ff fe17 	bl	8003110 <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80034e2:	2011      	movs	r0, #17
 80034e4:	f7ff fdf2 	bl	80030cc <ILI9341_Write_Command>
	HAL_Delay(120);
 80034e8:	2078      	movs	r0, #120	; 0x78
 80034ea:	f000 fb9d 	bl	8003c28 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80034ee:	2029      	movs	r0, #41	; 0x29
 80034f0:	f7ff fdec 	bl	80030cc <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7ff fe97 	bl	8003228 <ILI9341_Set_Rotation>
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003504:	b08d      	sub	sp, #52	; 0x34
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	6039      	str	r1, [r7, #0]
 800350c:	80fb      	strh	r3, [r7, #6]
 800350e:	466b      	mov	r3, sp
 8003510:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800351e:	d202      	bcs.n	8003526 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003524:	e002      	b.n	800352c <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8003526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800352c:	2201      	movs	r2, #1
 800352e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003532:	4840      	ldr	r0, [pc, #256]	; (8003634 <ILI9341_Draw_Colour_Burst+0x134>)
 8003534:	f001 fcb8 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800353e:	483d      	ldr	r0, [pc, #244]	; (8003634 <ILI9341_Draw_Colour_Burst+0x134>)
 8003540:	f001 fcb2 	bl	8004ea8 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b29b      	uxth	r3, r3
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 800354e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003550:	460b      	mov	r3, r1
 8003552:	3b01      	subs	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	2300      	movs	r3, #0
 8003558:	4688      	mov	r8, r1
 800355a:	4699      	mov	r9, r3
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003568:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003570:	2300      	movs	r3, #0
 8003572:	460c      	mov	r4, r1
 8003574:	461d      	mov	r5, r3
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	00eb      	lsls	r3, r5, #3
 8003580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003584:	00e2      	lsls	r2, r4, #3
 8003586:	1dcb      	adds	r3, r1, #7
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	ebad 0d03 	sub.w	sp, sp, r3
 8003590:	466b      	mov	r3, sp
 8003592:	3300      	adds	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8003596:	2300      	movs	r3, #0
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
 800359a:	e00e      	b.n	80035ba <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	4413      	add	r3, r2
 80035a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80035a6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	3301      	adds	r3, #1
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	b2d1      	uxtb	r1, r2
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	3302      	adds	r3, #2
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3ec      	bcc.n	800359c <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035dc:	fb01 f202 	mul.w	r2, r1, r2
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	e009      	b.n	8003604 <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	230a      	movs	r3, #10
 80035f6:	69b9      	ldr	r1, [r7, #24]
 80035f8:	480f      	ldr	r0, [pc, #60]	; (8003638 <ILI9341_Draw_Colour_Burst+0x138>)
 80035fa:	f004 f97a 	bl	80078f2 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	3301      	adds	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d3f1      	bcc.n	80035f0 <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	b29a      	uxth	r2, r3
 8003610:	230a      	movs	r3, #10
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	4808      	ldr	r0, [pc, #32]	; (8003638 <ILI9341_Draw_Colour_Burst+0x138>)
 8003616:	f004 f96c 	bl	80078f2 <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800361a:	2201      	movs	r2, #1
 800361c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003620:	4804      	ldr	r0, [pc, #16]	; (8003634 <ILI9341_Draw_Colour_Burst+0x134>)
 8003622:	f001 fc41 	bl	8004ea8 <HAL_GPIO_WritePin>
 8003626:	46b5      	mov	sp, r6
}
 8003628:	bf00      	nop
 800362a:	3734      	adds	r7, #52	; 0x34
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003632:	bf00      	nop
 8003634:	40020800 	.word	0x40020800
 8003638:	200002c0 	.word	0x200002c0

0800363c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <ILI9341_Fill_Screen+0x44>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29a      	uxth	r2, r3
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <ILI9341_Fill_Screen+0x48>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	2100      	movs	r1, #0
 8003654:	2000      	movs	r0, #0
 8003656:	f7ff fd7d 	bl	8003154 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <ILI9341_Fill_Screen+0x44>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <ILI9341_Fill_Screen+0x48>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	461a      	mov	r2, r3
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff44 	bl	8003500 <ILI9341_Draw_Colour_Burst>
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	2000000e 	.word	0x2000000e
 8003684:	2000000c 	.word	0x2000000c

08003688 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
 8003692:	460b      	mov	r3, r1
 8003694:	80bb      	strh	r3, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800369a:	4b64      	ldr	r3, [pc, #400]	; (800382c <ILI9341_Draw_Pixel+0x1a4>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	f080 80be 	bcs.w	8003824 <ILI9341_Draw_Pixel+0x19c>
 80036a8:	4b61      	ldr	r3, [pc, #388]	; (8003830 <ILI9341_Draw_Pixel+0x1a8>)
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	88ba      	ldrh	r2, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f080 80b7 	bcs.w	8003824 <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80036b6:	2200      	movs	r2, #0
 80036b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036bc:	485d      	ldr	r0, [pc, #372]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80036be:	f001 fbf3 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80036c2:	2200      	movs	r2, #0
 80036c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c8:	485a      	ldr	r0, [pc, #360]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80036ca:	f001 fbed 	bl	8004ea8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 80036ce:	202a      	movs	r0, #42	; 0x2a
 80036d0:	f7ff fcea 	bl	80030a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80036d4:	2201      	movs	r2, #1
 80036d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036da:	4856      	ldr	r0, [pc, #344]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80036dc:	f001 fbe4 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80036e0:	2201      	movs	r2, #1
 80036e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e6:	4853      	ldr	r0, [pc, #332]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80036e8:	f001 fbde 	bl	8004ea8 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036f2:	4850      	ldr	r0, [pc, #320]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80036f4:	f001 fbd8 	bl	8004ea8 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	753b      	strb	r3, [r7, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	3301      	adds	r3, #1
 800370c:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800370e:	b2db      	uxtb	r3, r3
 8003710:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800371a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800371c:	f107 0114 	add.w	r1, r7, #20
 8003720:	2301      	movs	r3, #1
 8003722:	2204      	movs	r2, #4
 8003724:	4844      	ldr	r0, [pc, #272]	; (8003838 <ILI9341_Draw_Pixel+0x1b0>)
 8003726:	f004 f8e4 	bl	80078f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800372a:	2201      	movs	r2, #1
 800372c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003730:	4840      	ldr	r0, [pc, #256]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 8003732:	f001 fbb9 	bl	8004ea8 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800373c:	483d      	ldr	r0, [pc, #244]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 800373e:	f001 fbb3 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003742:	2200      	movs	r2, #0
 8003744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003748:	483a      	ldr	r0, [pc, #232]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 800374a:	f001 fbad 	bl	8004ea8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 800374e:	202b      	movs	r0, #43	; 0x2b
 8003750:	f7ff fcaa 	bl	80030a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003754:	2201      	movs	r2, #1
 8003756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800375a:	4836      	ldr	r0, [pc, #216]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 800375c:	f001 fba4 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003760:	2201      	movs	r2, #1
 8003762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003766:	4833      	ldr	r0, [pc, #204]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 8003768:	f001 fb9e 	bl	8004ea8 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003772:	4830      	ldr	r0, [pc, #192]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 8003774:	f001 fb98 	bl	8004ea8 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 8003778:	88bb      	ldrh	r3, [r7, #4]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b29b      	uxth	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	743b      	strb	r3, [r7, #16]
 8003782:	88bb      	ldrh	r3, [r7, #4]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8003788:	88bb      	ldrh	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800378e:	b2db      	uxtb	r3, r3
 8003790:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8003792:	88bb      	ldrh	r3, [r7, #4]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800379a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800379c:	f107 0110 	add.w	r1, r7, #16
 80037a0:	2301      	movs	r3, #1
 80037a2:	2204      	movs	r2, #4
 80037a4:	4824      	ldr	r0, [pc, #144]	; (8003838 <ILI9341_Draw_Pixel+0x1b0>)
 80037a6:	f004 f8a4 	bl	80078f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80037aa:	2201      	movs	r2, #1
 80037ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037b0:	4820      	ldr	r0, [pc, #128]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80037b2:	f001 fb79 	bl	8004ea8 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80037b6:	2200      	movs	r2, #0
 80037b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037bc:	481d      	ldr	r0, [pc, #116]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80037be:	f001 fb73 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80037c2:	2200      	movs	r2, #0
 80037c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037c8:	481a      	ldr	r0, [pc, #104]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80037ca:	f001 fb6d 	bl	8004ea8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80037ce:	202c      	movs	r0, #44	; 0x2c
 80037d0:	f7ff fc6a 	bl	80030a8 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80037d4:	2201      	movs	r2, #1
 80037d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037da:	4816      	ldr	r0, [pc, #88]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80037dc:	f001 fb64 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80037e0:	2201      	movs	r2, #1
 80037e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037e6:	4813      	ldr	r0, [pc, #76]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80037e8:	f001 fb5e 	bl	8004ea8 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037f2:	4810      	ldr	r0, [pc, #64]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 80037f4:	f001 fb58 	bl	8004ea8 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	733b      	strb	r3, [r7, #12]
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003808:	f107 010c 	add.w	r1, r7, #12
 800380c:	2301      	movs	r3, #1
 800380e:	2202      	movs	r2, #2
 8003810:	4809      	ldr	r0, [pc, #36]	; (8003838 <ILI9341_Draw_Pixel+0x1b0>)
 8003812:	f004 f86e 	bl	80078f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003816:	2201      	movs	r2, #1
 8003818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <ILI9341_Draw_Pixel+0x1ac>)
 800381e:	f001 fb43 	bl	8004ea8 <HAL_GPIO_WritePin>
 8003822:	e000      	b.n	8003826 <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 8003824:	bf00      	nop

}
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	2000000e 	.word	0x2000000e
 8003830:	2000000c 	.word	0x2000000c
 8003834:	40020800 	.word	0x40020800
 8003838:	200002c0 	.word	0x200002c0

0800383c <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4623      	mov	r3, r4
 800384c:	80fb      	strh	r3, [r7, #6]
 800384e:	4603      	mov	r3, r0
 8003850:	80bb      	strh	r3, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	807b      	strh	r3, [r7, #2]
 8003856:	4613      	mov	r3, r2
 8003858:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <ILI9341_Draw_Rectangle+0xb0>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	429a      	cmp	r2, r3
 8003864:	d23d      	bcs.n	80038e2 <ILI9341_Draw_Rectangle+0xa6>
 8003866:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <ILI9341_Draw_Rectangle+0xb4>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	88ba      	ldrh	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d237      	bcs.n	80038e2 <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	4413      	add	r3, r2
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <ILI9341_Draw_Rectangle+0xb0>)
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	b292      	uxth	r2, r2
 800387e:	4293      	cmp	r3, r2
 8003880:	dd05      	ble.n	800388e <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <ILI9341_Draw_Rectangle+0xb0>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29a      	uxth	r2, r3
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800388e:	88ba      	ldrh	r2, [r7, #4]
 8003890:	883b      	ldrh	r3, [r7, #0]
 8003892:	4413      	add	r3, r2
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <ILI9341_Draw_Rectangle+0xb4>)
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	b292      	uxth	r2, r2
 800389a:	4293      	cmp	r3, r2
 800389c:	dd05      	ble.n	80038aa <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <ILI9341_Draw_Rectangle+0xb4>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	88bb      	ldrh	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	4413      	add	r3, r2
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29c      	uxth	r4, r3
 80038b6:	88ba      	ldrh	r2, [r7, #4]
 80038b8:	883b      	ldrh	r3, [r7, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	88b9      	ldrh	r1, [r7, #4]
 80038c4:	88f8      	ldrh	r0, [r7, #6]
 80038c6:	4622      	mov	r2, r4
 80038c8:	f7ff fc44 	bl	8003154 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 80038cc:	883b      	ldrh	r3, [r7, #0]
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	8b3b      	ldrh	r3, [r7, #24]
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fe10 	bl	8003500 <ILI9341_Draw_Colour_Burst>
 80038e0:	e000      	b.n	80038e4 <ILI9341_Draw_Rectangle+0xa8>
		return;
 80038e2:	bf00      	nop
}
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000000e 	.word	0x2000000e
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 80038fa:	2310      	movs	r3, #16
 80038fc:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 8003902:	e019      	b.n	8003938 <TP_Read+0x44>
	{
		value <<= 1;
 8003904:	88bb      	ldrh	r3, [r7, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800390a:	2201      	movs	r2, #1
 800390c:	2108      	movs	r1, #8
 800390e:	480e      	ldr	r0, [pc, #56]	; (8003948 <TP_Read+0x54>)
 8003910:	f001 faca 	bl	8004ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	2108      	movs	r1, #8
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <TP_Read+0x54>)
 800391a:	f001 fac5 	bl	8004ea8 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800391e:	2110      	movs	r1, #16
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <TP_Read+0x54>)
 8003922:	f001 faa9 	bl	8004e78 <HAL_GPIO_ReadPin>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <TP_Read+0x3e>
		{
			value++;
 800392c:	88bb      	ldrh	r3, [r7, #4]
 800392e:	3301      	adds	r3, #1
 8003930:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	3b01      	subs	r3, #1
 8003936:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e2      	bne.n	8003904 <TP_Read+0x10>
	};

	return value;
 800393e:	88bb      	ldrh	r3, [r7, #4]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000

0800394c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 8003956:	2308      	movs	r3, #8
 8003958:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800395a:	2200      	movs	r2, #0
 800395c:	2108      	movs	r1, #8
 800395e:	4815      	ldr	r0, [pc, #84]	; (80039b4 <TP_Write+0x68>)
 8003960:	f001 faa2 	bl	8004ea8 <HAL_GPIO_WritePin>

	while (i > 0)
 8003964:	e01e      	b.n	80039a4 <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	da05      	bge.n	800397a <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800396e:	2201      	movs	r2, #1
 8003970:	2120      	movs	r1, #32
 8003972:	4810      	ldr	r0, [pc, #64]	; (80039b4 <TP_Write+0x68>)
 8003974:	f001 fa98 	bl	8004ea8 <HAL_GPIO_WritePin>
 8003978:	e004      	b.n	8003984 <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800397a:	2200      	movs	r2, #0
 800397c:	2120      	movs	r1, #32
 800397e:	480d      	ldr	r0, [pc, #52]	; (80039b4 <TP_Write+0x68>)
 8003980:	f001 fa92 	bl	8004ea8 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800398a:	2201      	movs	r2, #1
 800398c:	2108      	movs	r1, #8
 800398e:	4809      	ldr	r0, [pc, #36]	; (80039b4 <TP_Write+0x68>)
 8003990:	f001 fa8a 	bl	8004ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003994:	2200      	movs	r2, #0
 8003996:	2108      	movs	r1, #8
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <TP_Write+0x68>)
 800399a:	f001 fa85 	bl	8004ea8 <HAL_GPIO_WritePin>
		i--;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1dd      	bne.n	8003966 <TP_Write+0x1a>
	};
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80039c0:	2201      	movs	r2, #1
 80039c2:	2108      	movs	r1, #8
 80039c4:	485a      	ldr	r0, [pc, #360]	; (8003b30 <TP_Read_Coordinates+0x178>)
 80039c6:	f001 fa6f 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80039ca:	2201      	movs	r2, #1
 80039cc:	2120      	movs	r1, #32
 80039ce:	4858      	ldr	r0, [pc, #352]	; (8003b30 <TP_Read_Coordinates+0x178>)
 80039d0:	f001 fa6a 	bl	8004ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80039d4:	2201      	movs	r2, #1
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	4855      	ldr	r0, [pc, #340]	; (8003b30 <TP_Read_Coordinates+0x178>)
 80039da:	f001 fa65 	bl	8004ea8 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 80039ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ee:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	484d      	ldr	r0, [pc, #308]	; (8003b30 <TP_Read_Coordinates+0x178>)
 80039fa:	f001 fa55 	bl	8004ea8 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80039fe:	e023      	b.n	8003a48 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 8003a00:	2090      	movs	r0, #144	; 0x90
 8003a02:	f7ff ffa3 	bl	800394c <TP_Write>

		rawy = TP_Read();
 8003a06:	f7ff ff75 	bl	80038f4 <TP_Read>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 8003a0e:	89fb      	ldrh	r3, [r7, #14]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	4413      	add	r3, r2
 8003a14:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 8003a1e:	20d0      	movs	r0, #208	; 0xd0
 8003a20:	f7ff ff94 	bl	800394c <TP_Write>
		rawx = TP_Read();
 8003a24:	f7ff ff66 	bl	80038f4 <TP_Read>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 8003a2c:	89bb      	ldrh	r3, [r7, #12]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4413      	add	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 8003a34:	89bb      	ldrh	r3, [r7, #12]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	61fb      	str	r3, [r7, #28]
		samples--;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
		counted_samples++;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3301      	adds	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <TP_Read_Coordinates+0xa4>
 8003a4e:	2104      	movs	r1, #4
 8003a50:	4837      	ldr	r0, [pc, #220]	; (8003b30 <TP_Read_Coordinates+0x178>)
 8003a52:	f001 fa11 	bl	8004e78 <HAL_GPIO_ReadPin>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0d1      	beq.n	8003a00 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2140      	movs	r1, #64	; 0x40
 8003a60:	4833      	ldr	r0, [pc, #204]	; (8003b30 <TP_Read_Coordinates+0x178>)
 8003a62:	f001 fa21 	bl	8004ea8 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a6c:	d14d      	bne.n	8003b0a <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003a6e:	2104      	movs	r1, #4
 8003a70:	482f      	ldr	r0, [pc, #188]	; (8003b30 <TP_Read_Coordinates+0x178>)
 8003a72:	f001 fa01 	bl	8004e78 <HAL_GPIO_ReadPin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d146      	bne.n	8003b0a <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8003a98:	89bb      	ldrh	r3, [r7, #12]
 8003a9a:	425b      	negs	r3, r3
 8003a9c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003aa4:	89ba      	ldrh	r2, [r7, #12]
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <TP_Read_Coordinates+0x17c>)
 8003aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aac:	1ad2      	subs	r2, r2, r3
 8003aae:	0852      	lsrs	r2, r2, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ac2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003b28 <TP_Read_Coordinates+0x170>
 8003ac6:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003aca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ace:	ee17 3a90 	vmov	r3, s15
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8003ad8:	89fb      	ldrh	r3, [r7, #14]
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <TP_Read_Coordinates+0x180>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	09db      	lsrs	r3, r3, #7
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b0f      	subs	r3, #15
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003aee:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003b28 <TP_Read_Coordinates+0x170>
 8003af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3302      	adds	r3, #2
 8003afa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003afe:	ee17 2a90 	vmov	r2, s15
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e007      	b.n	8003b1a <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3302      	adds	r3, #2
 8003b14:	2200      	movs	r2, #0
 8003b16:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 8003b18:	2300      	movs	r3, #0
	}
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	f3af 8000 	nop.w
 8003b28:	28f5c28f 	.word	0x28f5c28f
 8003b2c:	3ff28f5c 	.word	0x3ff28f5c
 8003b30:	40021000 	.word	0x40021000
 8003b34:	e01e01e1 	.word	0xe01e01e1
 8003b38:	a0a0a0a1 	.word	0xa0a0a0a1

08003b3c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003b40:	2104      	movs	r1, #4
 8003b42:	4805      	ldr	r0, [pc, #20]	; (8003b58 <TP_Touchpad_Pressed+0x1c>)
 8003b44:	f001 f998 	bl	8004e78 <HAL_GPIO_ReadPin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003b52:	2300      	movs	r3, #0
	}
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_Init+0x28>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_Init+0x28>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f000 fe4b 	bl	8004808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f000 f808 	bl	8003b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b78:	f7fe fcf2 	bl	8002560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_InitTick+0x54>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_InitTick+0x58>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fe71 	bl	800488e <HAL_SYSTICK_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00e      	b.n	8003bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d80a      	bhi.n	8003bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f000 fe2b 	bl	800481e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <HAL_InitTick+0x5c>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	20000014 	.word	0x20000014
 8003be4:	20000010 	.word	0x20000010

08003be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_IncTick+0x20>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x24>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_IncTick+0x24>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000014 	.word	0x20000014
 8003c0c:	20000494 	.word	0x20000494

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000494 	.word	0x20000494

08003c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff ffee 	bl	8003c10 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d005      	beq.n	8003c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_Delay+0x44>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c4e:	bf00      	nop
 8003c50:	f7ff ffde 	bl	8003c10 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d8f7      	bhi.n	8003c50 <HAL_Delay+0x28>
  {
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000014 	.word	0x20000014

08003c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e031      	b.n	8003cea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fa30 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_ADC_Init+0x84>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fbaa 	bl	8004418 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cda:	e001      	b.n	8003ce0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	ffffeefd 	.word	0xffffeefd

08003cf8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_Start_IT+0x1a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0b5      	b.n	8003e7e <HAL_ADC_Start_IT+0x186>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d018      	beq.n	8003d5a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003d38:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_ADC_Start_IT+0x194>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_ADC_Start_IT+0x198>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0c9a      	lsrs	r2, r3, #18
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003d4c:	e002      	b.n	8003d54 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f9      	bne.n	8003d4e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d17d      	bne.n	8003e64 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6c:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_ADC_Start_IT+0x19c>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da2:	d106      	bne.n	8003db2 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f023 0206 	bic.w	r2, r3, #6
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
 8003db0:	e002      	b.n	8003db8 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003dc8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_ADC_Start_IT+0x1a0>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_ADC_Start_IT+0x1a4>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d143      	bne.n	8003e7c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e03a      	b.n	8003e7c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <HAL_ADC_Start_IT+0x1a8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10e      	bne.n	8003e2e <HAL_ADC_Start_IT+0x136>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e2c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_ADC_Start_IT+0x1a4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d120      	bne.n	8003e7c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_ADC_Start_IT+0x1ac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d11b      	bne.n	8003e7c <HAL_ADC_Start_IT+0x184>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d114      	bne.n	8003e7c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	e00b      	b.n	8003e7c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f043 0210 	orr.w	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000008 	.word	0x20000008
 8003e90:	431bde83 	.word	0x431bde83
 8003e94:	fffff8fe 	.word	0xfffff8fe
 8003e98:	04000020 	.word	0x04000020
 8003e9c:	40012300 	.word	0x40012300
 8003ea0:	40012000 	.word	0x40012000
 8003ea4:	40012200 	.word	0x40012200

08003ea8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Stop_IT+0x16>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e027      	b.n	8003f0e <HAL_ADC_Stop_IT+0x66>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10f      	bne.n	8003f04 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_ADC_Stop_IT+0x74>)
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_ADC_Stop_IT+0x78>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	fbffffdf 	.word	0xfbffffdf
 8003f20:	ffffeefe 	.word	0xffffeefe

08003f24 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d049      	beq.n	8003fee <HAL_ADC_IRQHandler+0xca>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d046      	beq.n	8003fee <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d12b      	bne.n	8003fde <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d127      	bne.n	8003fde <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0220 	bic.w	r2, r2, #32
 8003fb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fe f800 	bl	8001fe4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0212 	mvn.w	r2, #18
 8003fec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d057      	beq.n	80040b4 <HAL_ADC_IRQHandler+0x190>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d054      	beq.n	80040b4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d139      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004048:	2b00      	cmp	r3, #0
 800404a:	d12b      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d124      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004064:	2b00      	cmp	r3, #0
 8004066:	d11d      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800406c:	2b00      	cmp	r3, #0
 800406e:	d119      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800407e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fab1 	bl	800460c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 020c 	mvn.w	r2, #12
 80040b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d017      	beq.n	80040fa <HAL_ADC_IRQHandler+0x1d6>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d014      	beq.n	80040fa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10d      	bne.n	80040fa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f82a 	bl	8004144 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0201 	mvn.w	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004108:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_ADC_IRQHandler+0x218>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f043 0202 	orr.w	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0220 	mvn.w	r2, #32
 800412a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f813 	bl	8004158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0220 	mvn.w	r2, #32
 800413a:	601a      	str	r2, [r3, #0]
  }
}
 800413c:	bf00      	nop
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x1c>
 8004184:	2302      	movs	r3, #2
 8004186:	e136      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x28a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b09      	cmp	r3, #9
 8004196:	d93a      	bls.n	800420e <HAL_ADC_ConfigChannel+0xa2>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a0:	d035      	beq.n	800420e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68d9      	ldr	r1, [r3, #12]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	3b1e      	subs	r3, #30
 80041b8:	2207      	movs	r2, #7
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	400a      	ands	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8d      	ldr	r2, [pc, #564]	; (8004404 <HAL_ADC_ConfigChannel+0x298>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10a      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68d9      	ldr	r1, [r3, #12]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	061a      	lsls	r2, r3, #24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041e6:	e035      	b.n	8004254 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4403      	add	r3, r0
 8004200:	3b1e      	subs	r3, #30
 8004202:	409a      	lsls	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800420c:	e022      	b.n	8004254 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6919      	ldr	r1, [r3, #16]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	2207      	movs	r2, #7
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43da      	mvns	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	400a      	ands	r2, r1
 8004230:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6919      	ldr	r1, [r3, #16]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4618      	mov	r0, r3
 8004244:	4603      	mov	r3, r0
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4403      	add	r3, r0
 800424a:	409a      	lsls	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d824      	bhi.n	80042a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	3b05      	subs	r3, #5
 800426e:	221f      	movs	r2, #31
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43da      	mvns	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	400a      	ands	r2, r1
 800427c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	3b05      	subs	r3, #5
 8004298:	fa00 f203 	lsl.w	r2, r0, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34
 80042a4:	e04c      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d824      	bhi.n	80042f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	3b23      	subs	r3, #35	; 0x23
 80042c0:	221f      	movs	r2, #31
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	400a      	ands	r2, r1
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4618      	mov	r0, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	3b23      	subs	r3, #35	; 0x23
 80042ea:	fa00 f203 	lsl.w	r2, r0, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
 80042f6:	e023      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	3b41      	subs	r3, #65	; 0x41
 800430a:	221f      	movs	r2, #31
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43da      	mvns	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	400a      	ands	r2, r1
 8004318:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	4618      	mov	r0, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	3b41      	subs	r3, #65	; 0x41
 8004334:	fa00 f203 	lsl.w	r2, r0, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	; (8004408 <HAL_ADC_ConfigChannel+0x29c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10a      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1f4>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004352:	d105      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a2c      	ldr	r2, [pc, #176]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 800435a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800435e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_ADC_ConfigChannel+0x29c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10f      	bne.n	800438a <HAL_ADC_ConfigChannel+0x21e>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b12      	cmp	r3, #18
 8004370:	d10b      	bne.n	800438a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a25      	ldr	r2, [pc, #148]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004378:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800437c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004388:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <HAL_ADC_ConfigChannel+0x29c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d12b      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x280>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <HAL_ADC_ConfigChannel+0x298>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x23a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b11      	cmp	r3, #17
 80043a4:	d122      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80043b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <HAL_ADC_ConfigChannel+0x298>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d111      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_ADC_ConfigChannel+0x2a4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_ADC_ConfigChannel+0x2a8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9a      	lsrs	r2, r3, #18
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043de:	e002      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f9      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	10000012 	.word	0x10000012
 8004408:	40012000 	.word	0x40012000
 800440c:	40012300 	.word	0x40012300
 8004410:	20000008 	.word	0x20000008
 8004414:	431bde83 	.word	0x431bde83

08004418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004420:	4b78      	ldr	r3, [pc, #480]	; (8004604 <ADC_Init+0x1ec>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a77      	ldr	r2, [pc, #476]	; (8004604 <ADC_Init+0x1ec>)
 8004426:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800442a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800442c:	4b75      	ldr	r3, [pc, #468]	; (8004604 <ADC_Init+0x1ec>)
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4973      	ldr	r1, [pc, #460]	; (8004604 <ADC_Init+0x1ec>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	021a      	lsls	r2, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800446c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6899      	ldr	r1, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	4a58      	ldr	r2, [pc, #352]	; (8004608 <ADC_Init+0x1f0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d022      	beq.n	80044f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	e00f      	b.n	8004512 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004510:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0202 	bic.w	r2, r2, #2
 8004520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	005a      	lsls	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800455e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	3b01      	subs	r3, #1
 800456c:	035a      	lsls	r2, r3, #13
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	e007      	b.n	8004588 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004586:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	051a      	lsls	r2, r3, #20
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6899      	ldr	r1, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ca:	025a      	lsls	r2, r3, #9
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	029a      	lsls	r2, r3, #10
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012300 	.word	0x40012300
 8004608:	0f000001 	.word	0x0f000001

0800460c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <__NVIC_SetPriorityGrouping>:
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <__NVIC_SetPriorityGrouping+0x40>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800463c:	4013      	ands	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 800464a:	4313      	orrs	r3, r2
 800464c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <__NVIC_SetPriorityGrouping+0x40>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	60d3      	str	r3, [r2, #12]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00
 8004664:	05fa0000 	.word	0x05fa0000

08004668 <__NVIC_GetPriorityGrouping>:
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <__NVIC_GetPriorityGrouping+0x18>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0a1b      	lsrs	r3, r3, #8
 8004672:	f003 0307 	and.w	r3, r3, #7
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <__NVIC_EnableIRQ>:
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db0b      	blt.n	80046ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <__NVIC_EnableIRQ+0x38>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2001      	movs	r0, #1
 80046a6:	fa00 f202 	lsl.w	r2, r0, r2
 80046aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e100 	.word	0xe000e100

080046c0 <__NVIC_DisableIRQ>:
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	db12      	blt.n	80046f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	490a      	ldr	r1, [pc, #40]	; (8004704 <__NVIC_DisableIRQ+0x44>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2001      	movs	r0, #1
 80046e2:	fa00 f202 	lsl.w	r2, r0, r2
 80046e6:	3320      	adds	r3, #32
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80046ec:	f3bf 8f4f 	dsb	sy
}
 80046f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046f2:	f3bf 8f6f 	isb	sy
}
 80046f6:	bf00      	nop
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d4:	d301      	bcc.n	80047da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <SysTick_Config+0x40>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047e2:	210f      	movs	r1, #15
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	f7ff ff8e 	bl	8004708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <SysTick_Config+0x40>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <SysTick_Config+0x40>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	e000e010 	.word	0xe000e010

08004808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff05 	bl	8004620 <__NVIC_SetPriorityGrouping>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004830:	f7ff ff1a 	bl	8004668 <__NVIC_GetPriorityGrouping>
 8004834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff ff8e 	bl	800475c <NVIC_EncodePriority>
 8004840:	4602      	mov	r2, r0
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff5d 	bl	8004708 <__NVIC_SetPriority>
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff0d 	bl	8004684 <__NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	4603      	mov	r3, r0
 800487a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800487c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff1d 	bl	80046c0 <__NVIC_DisableIRQ>
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff94 	bl	80047c4 <SysTick_Config>
 800489c:	4603      	mov	r3, r0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d004      	beq.n	80048c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2280      	movs	r2, #128	; 0x80
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e00c      	b.n	80048de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2205      	movs	r2, #5
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f8:	b2db      	uxtb	r3, r3
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e175      	b.n	8004c14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004928:	2201      	movs	r2, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	f040 8164 	bne.w	8004c0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b01      	cmp	r3, #1
 8004950:	d005      	beq.n	800495e <HAL_GPIO_Init+0x56>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d130      	bne.n	80049c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2203      	movs	r2, #3
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004994:	2201      	movs	r2, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 0201 	and.w	r2, r3, #1
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d017      	beq.n	80049fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	2203      	movs	r2, #3
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d123      	bne.n	8004a50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	08da      	lsrs	r2, r3, #3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3208      	adds	r2, #8
 8004a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	220f      	movs	r2, #15
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	08da      	lsrs	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3208      	adds	r2, #8
 8004a4a:	69b9      	ldr	r1, [r7, #24]
 8004a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 0203 	and.w	r2, r3, #3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80be 	beq.w	8004c0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a92:	4b66      	ldr	r3, [pc, #408]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	4a65      	ldr	r2, [pc, #404]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a9e:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004aaa:	4a61      	ldr	r2, [pc, #388]	; (8004c30 <HAL_GPIO_Init+0x328>)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_GPIO_Init+0x32c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d037      	beq.n	8004b46 <HAL_GPIO_Init+0x23e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a57      	ldr	r2, [pc, #348]	; (8004c38 <HAL_GPIO_Init+0x330>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_GPIO_Init+0x23a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a56      	ldr	r2, [pc, #344]	; (8004c3c <HAL_GPIO_Init+0x334>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02b      	beq.n	8004b3e <HAL_GPIO_Init+0x236>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a55      	ldr	r2, [pc, #340]	; (8004c40 <HAL_GPIO_Init+0x338>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d025      	beq.n	8004b3a <HAL_GPIO_Init+0x232>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a54      	ldr	r2, [pc, #336]	; (8004c44 <HAL_GPIO_Init+0x33c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <HAL_GPIO_Init+0x22e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a53      	ldr	r2, [pc, #332]	; (8004c48 <HAL_GPIO_Init+0x340>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x22a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a52      	ldr	r2, [pc, #328]	; (8004c4c <HAL_GPIO_Init+0x344>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x226>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a51      	ldr	r2, [pc, #324]	; (8004c50 <HAL_GPIO_Init+0x348>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x222>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a50      	ldr	r2, [pc, #320]	; (8004c54 <HAL_GPIO_Init+0x34c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x21e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4f      	ldr	r2, [pc, #316]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x21a>
 8004b1e:	2309      	movs	r3, #9
 8004b20:	e012      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b22:	230a      	movs	r3, #10
 8004b24:	e010      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b26:	2308      	movs	r3, #8
 8004b28:	e00e      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b2a:	2307      	movs	r3, #7
 8004b2c:	e00c      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b2e:	2306      	movs	r3, #6
 8004b30:	e00a      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b32:	2305      	movs	r3, #5
 8004b34:	e008      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b36:	2304      	movs	r3, #4
 8004b38:	e006      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e004      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e002      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b46:	2300      	movs	r3, #0
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f002 0203 	and.w	r2, r2, #3
 8004b4e:	0092      	lsls	r2, r2, #2
 8004b50:	4093      	lsls	r3, r2
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b58:	4935      	ldr	r1, [pc, #212]	; (8004c30 <HAL_GPIO_Init+0x328>)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b66:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b8a:	4a34      	ldr	r2, [pc, #208]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b90:	4b32      	ldr	r3, [pc, #200]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bb4:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bba:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <HAL_GPIO_Init+0x354>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	f67f ae86 	bls.w	8004928 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40013800 	.word	0x40013800
 8004c34:	40020000 	.word	0x40020000
 8004c38:	40020400 	.word	0x40020400
 8004c3c:	40020800 	.word	0x40020800
 8004c40:	40020c00 	.word	0x40020c00
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40021400 	.word	0x40021400
 8004c4c:	40021800 	.word	0x40021800
 8004c50:	40021c00 	.word	0x40021c00
 8004c54:	40022000 	.word	0x40022000
 8004c58:	40022400 	.word	0x40022400
 8004c5c:	40013c00 	.word	0x40013c00

08004c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e0d9      	b.n	8004e30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	f040 80c9 	bne.w	8004e2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004c98:	4a6b      	ldr	r2, [pc, #428]	; (8004e48 <HAL_GPIO_DeInit+0x1e8>)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	220f      	movs	r2, #15
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a63      	ldr	r2, [pc, #396]	; (8004e4c <HAL_GPIO_DeInit+0x1ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d037      	beq.n	8004d32 <HAL_GPIO_DeInit+0xd2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a62      	ldr	r2, [pc, #392]	; (8004e50 <HAL_GPIO_DeInit+0x1f0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d031      	beq.n	8004d2e <HAL_GPIO_DeInit+0xce>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_GPIO_DeInit+0x1f4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d02b      	beq.n	8004d2a <HAL_GPIO_DeInit+0xca>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a60      	ldr	r2, [pc, #384]	; (8004e58 <HAL_GPIO_DeInit+0x1f8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d025      	beq.n	8004d26 <HAL_GPIO_DeInit+0xc6>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a5f      	ldr	r2, [pc, #380]	; (8004e5c <HAL_GPIO_DeInit+0x1fc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01f      	beq.n	8004d22 <HAL_GPIO_DeInit+0xc2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a5e      	ldr	r2, [pc, #376]	; (8004e60 <HAL_GPIO_DeInit+0x200>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d019      	beq.n	8004d1e <HAL_GPIO_DeInit+0xbe>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a5d      	ldr	r2, [pc, #372]	; (8004e64 <HAL_GPIO_DeInit+0x204>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_GPIO_DeInit+0xba>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a5c      	ldr	r2, [pc, #368]	; (8004e68 <HAL_GPIO_DeInit+0x208>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00d      	beq.n	8004d16 <HAL_GPIO_DeInit+0xb6>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a5b      	ldr	r2, [pc, #364]	; (8004e6c <HAL_GPIO_DeInit+0x20c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <HAL_GPIO_DeInit+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a5a      	ldr	r2, [pc, #360]	; (8004e70 <HAL_GPIO_DeInit+0x210>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_GPIO_DeInit+0xae>
 8004d0a:	2309      	movs	r3, #9
 8004d0c:	e012      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d0e:	230a      	movs	r3, #10
 8004d10:	e010      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d12:	2308      	movs	r3, #8
 8004d14:	e00e      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d16:	2307      	movs	r3, #7
 8004d18:	e00c      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	e00a      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d1e:	2305      	movs	r3, #5
 8004d20:	e008      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d22:	2304      	movs	r3, #4
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d26:	2303      	movs	r3, #3
 8004d28:	e004      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e002      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_GPIO_DeInit+0xd4>
 8004d32:	2300      	movs	r3, #0
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	f002 0203 	and.w	r2, r2, #3
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	4093      	lsls	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d132      	bne.n	8004daa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d44:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	4949      	ldr	r1, [pc, #292]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d52:	4b48      	ldr	r3, [pc, #288]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	4946      	ldr	r1, [pc, #280]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d60:	4b44      	ldr	r3, [pc, #272]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	4942      	ldr	r1, [pc, #264]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	493f      	ldr	r1, [pc, #252]	; (8004e74 <HAL_GPIO_DeInit+0x214>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	220f      	movs	r2, #15
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004d8c:	4a2e      	ldr	r2, [pc, #184]	; (8004e48 <HAL_GPIO_DeInit+0x1e8>)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	3302      	adds	r3, #2
 8004d94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	482a      	ldr	r0, [pc, #168]	; (8004e48 <HAL_GPIO_DeInit+0x1e8>)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	400a      	ands	r2, r1
 8004da4:	3302      	adds	r3, #2
 8004da6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2103      	movs	r1, #3
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	08da      	lsrs	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3208      	adds	r2, #8
 8004dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	220f      	movs	r2, #15
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	08d2      	lsrs	r2, r2, #3
 8004de0:	4019      	ands	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3208      	adds	r2, #8
 8004de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	2103      	movs	r1, #3
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	2101      	movs	r1, #1
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	401a      	ands	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	2103      	movs	r1, #3
 8004e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	401a      	ands	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b0f      	cmp	r3, #15
 8004e34:	f67f af22 	bls.w	8004c7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40013800 	.word	0x40013800
 8004e4c:	40020000 	.word	0x40020000
 8004e50:	40020400 	.word	0x40020400
 8004e54:	40020800 	.word	0x40020800
 8004e58:	40020c00 	.word	0x40020c00
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40021400 	.word	0x40021400
 8004e64:	40021800 	.word	0x40021800
 8004e68:	40021c00 	.word	0x40021c00
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40022400 	.word	0x40022400
 8004e74:	40013c00 	.word	0x40013c00

08004e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	887b      	ldrh	r3, [r7, #2]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e001      	b.n	8004e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eb8:	787b      	ldrb	r3, [r7, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ec4:	e003      	b.n	8004ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ec6:	887b      	ldrh	r3, [r7, #2]
 8004ec8:	041a      	lsls	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	619a      	str	r2, [r3, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e07f      	b.n	8004fee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc fad2 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	; 0x24
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d107      	bne.n	8004f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	e006      	b.n	8004f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d104      	bne.n	8004f76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_I2C_Init+0x11c>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	02008000 	.word	0x02008000

08004ffc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	460b      	mov	r3, r1
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	4613      	mov	r3, r2
 800500e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b20      	cmp	r3, #32
 800501a:	f040 80da 	bne.w	80051d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_I2C_Master_Transmit+0x30>
 8005028:	2302      	movs	r3, #2
 800502a:	e0d3      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x1d8>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005034:	f7fe fdec 	bl	8003c10 <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2319      	movs	r3, #25
 8005040:	2201      	movs	r2, #1
 8005042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fee3 	bl	8005e12 <I2C_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0be      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2221      	movs	r2, #33	; 0x21
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2210      	movs	r2, #16
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	893a      	ldrh	r2, [r7, #8]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	2bff      	cmp	r3, #255	; 0xff
 8005086:	d90e      	bls.n	80050a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	22ff      	movs	r2, #255	; 0xff
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	b2da      	uxtb	r2, r3
 8005094:	8979      	ldrh	r1, [r7, #10]
 8005096:	4b51      	ldr	r3, [pc, #324]	; (80051dc <HAL_I2C_Master_Transmit+0x1e0>)
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 f8ce 	bl	8006240 <I2C_TransferConfig>
 80050a4:	e06c      	b.n	8005180 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	8979      	ldrh	r1, [r7, #10]
 80050b8:	4b48      	ldr	r3, [pc, #288]	; (80051dc <HAL_I2C_Master_Transmit+0x1e0>)
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f001 f8bd 	bl	8006240 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050c6:	e05b      	b.n	8005180 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	6a39      	ldr	r1, [r7, #32]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fee0 	bl	8005e92 <I2C_WaitOnTXISFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e07b      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d034      	beq.n	8005180 <HAL_I2C_Master_Transmit+0x184>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d130      	bne.n	8005180 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	2200      	movs	r2, #0
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fe72 	bl	8005e12 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04d      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	2bff      	cmp	r3, #255	; 0xff
 8005140:	d90e      	bls.n	8005160 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	22ff      	movs	r2, #255	; 0xff
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514c:	b2da      	uxtb	r2, r3
 800514e:	8979      	ldrh	r1, [r7, #10]
 8005150:	2300      	movs	r3, #0
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f001 f871 	bl	8006240 <I2C_TransferConfig>
 800515e:	e00f      	b.n	8005180 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f001 f860 	bl	8006240 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d19e      	bne.n	80050c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 febf 	bl	8005f12 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e01a      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2220      	movs	r2, #32
 80051a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80051b2:	400b      	ands	r3, r1
 80051b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	80002000 	.word	0x80002000
 80051e0:	fe00e800 	.word	0xfe00e800

080051e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	461a      	mov	r2, r3
 80051f0:	460b      	mov	r3, r1
 80051f2:	817b      	strh	r3, [r7, #10]
 80051f4:	4613      	mov	r3, r2
 80051f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b20      	cmp	r3, #32
 8005202:	f040 80db 	bne.w	80053bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_I2C_Master_Receive+0x30>
 8005210:	2302      	movs	r3, #2
 8005212:	e0d4      	b.n	80053be <HAL_I2C_Master_Receive+0x1da>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800521c:	f7fe fcf8 	bl	8003c10 <HAL_GetTick>
 8005220:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	2319      	movs	r3, #25
 8005228:	2201      	movs	r2, #1
 800522a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fdef 	bl	8005e12 <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0bf      	b.n	80053be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2222      	movs	r2, #34	; 0x22
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2210      	movs	r2, #16
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	893a      	ldrh	r2, [r7, #8]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2bff      	cmp	r3, #255	; 0xff
 800526e:	d90e      	bls.n	800528e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22ff      	movs	r2, #255	; 0xff
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	b2da      	uxtb	r2, r3
 800527c:	8979      	ldrh	r1, [r7, #10]
 800527e:	4b52      	ldr	r3, [pc, #328]	; (80053c8 <HAL_I2C_Master_Receive+0x1e4>)
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 ffda 	bl	8006240 <I2C_TransferConfig>
 800528c:	e06d      	b.n	800536a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	b2da      	uxtb	r2, r3
 800529e:	8979      	ldrh	r1, [r7, #10]
 80052a0:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <HAL_I2C_Master_Receive+0x1e4>)
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 ffc9 	bl	8006240 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052ae:	e05c      	b.n	800536a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	6a39      	ldr	r1, [r7, #32]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fe69 	bl	8005f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e07c      	b.n	80053be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d034      	beq.n	800536a <HAL_I2C_Master_Receive+0x186>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d130      	bne.n	800536a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2200      	movs	r2, #0
 8005310:	2180      	movs	r1, #128	; 0x80
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fd7d 	bl	8005e12 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e04d      	b.n	80053be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2bff      	cmp	r3, #255	; 0xff
 800532a:	d90e      	bls.n	800534a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	; 0xff
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005336:	b2da      	uxtb	r2, r3
 8005338:	8979      	ldrh	r1, [r7, #10]
 800533a:	2300      	movs	r3, #0
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 ff7c 	bl	8006240 <I2C_TransferConfig>
 8005348:	e00f      	b.n	800536a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	b2da      	uxtb	r2, r3
 800535a:	8979      	ldrh	r1, [r7, #10]
 800535c:	2300      	movs	r3, #0
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 ff6b 	bl	8006240 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d19d      	bne.n	80052b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	6a39      	ldr	r1, [r7, #32]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fdca 	bl	8005f12 <I2C_WaitOnSTOPFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e01a      	b.n	80053be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2220      	movs	r2, #32
 800538e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_I2C_Master_Receive+0x1e8>)
 800539c:	400b      	ands	r3, r1
 800539e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	80002400 	.word	0x80002400
 80053cc:	fe00e800 	.word	0xfe00e800

080053d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
  }
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00f      	beq.n	8005446 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005444:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00f      	beq.n	8005470 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	f043 0208 	orr.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800546e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00f      	beq.n	800549a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f043 0202 	orr.w	r2, r3, #2
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005498:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 030b 	and.w	r3, r3, #11
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb77 	bl	8005ba0 <I2C_ITError>
  }
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	70fb      	strb	r3, [r7, #3]
 80054ee:	4613      	mov	r3, r2
 80054f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <I2C_Slave_ISR_IT+0x24>
 800555a:	2302      	movs	r3, #2
 800555c:	e0e1      	b.n	8005722 <I2C_Slave_ISR_IT+0x1e8>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800557a:	6939      	ldr	r1, [r7, #16]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f9b5 	bl	80058ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	d04b      	beq.n	8005624 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005592:	2b00      	cmp	r3, #0
 8005594:	d046      	beq.n	8005624 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d128      	bne.n	80055f2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b28      	cmp	r3, #40	; 0x28
 80055aa:	d108      	bne.n	80055be <I2C_Slave_ISR_IT+0x84>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b2:	d104      	bne.n	80055be <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055b4:	6939      	ldr	r1, [r7, #16]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa9e 	bl	8005af8 <I2C_ITListenCplt>
 80055bc:	e031      	b.n	8005622 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b29      	cmp	r3, #41	; 0x29
 80055c8:	d10e      	bne.n	80055e8 <I2C_Slave_ISR_IT+0xae>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055d0:	d00a      	beq.n	80055e8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2210      	movs	r2, #16
 80055d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fbd7 	bl	8005d8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f926 	bl	8005832 <I2C_ITSlaveSeqCplt>
 80055e6:	e01c      	b.n	8005622 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2210      	movs	r2, #16
 80055ee:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80055f0:	e08f      	b.n	8005712 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2210      	movs	r2, #16
 80055f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <I2C_Slave_ISR_IT+0xda>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005612:	d17e      	bne.n	8005712 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	4619      	mov	r1, r3
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 fac0 	bl	8005ba0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005620:	e077      	b.n	8005712 <I2C_Slave_ISR_IT+0x1d8>
 8005622:	e076      	b.n	8005712 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d02f      	beq.n	800568e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005634:	2b00      	cmp	r3, #0
 8005636:	d02a      	beq.n	800568e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d018      	beq.n	8005674 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d14b      	bne.n	8005716 <I2C_Slave_ISR_IT+0x1dc>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005684:	d047      	beq.n	8005716 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8d3 	bl	8005832 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800568c:	e043      	b.n	8005716 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056a2:	6939      	ldr	r1, [r7, #16]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f840 	bl	800572a <I2C_ITAddrCplt>
 80056aa:	e035      	b.n	8005718 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d030      	beq.n	8005718 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02b      	beq.n	8005718 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80056fa:	e00d      	b.n	8005718 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005702:	d002      	beq.n	800570a <I2C_Slave_ISR_IT+0x1d0>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f891 	bl	8005832 <I2C_ITSlaveSeqCplt>
 8005710:	e002      	b.n	8005718 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005716:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005740:	2b28      	cmp	r3, #40	; 0x28
 8005742:	d16a      	bne.n	800581a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	b29b      	uxth	r3, r3
 800575e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005762:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005770:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800577e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d138      	bne.n	80057fa <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005788:	897b      	ldrh	r3, [r7, #10]
 800578a:	09db      	lsrs	r3, r3, #7
 800578c:	b29a      	uxth	r2, r3
 800578e:	89bb      	ldrh	r3, [r7, #12]
 8005790:	4053      	eors	r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	f003 0306 	and.w	r3, r3, #6
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11c      	bne.n	80057d6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800579c:	897b      	ldrh	r3, [r7, #10]
 800579e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d13b      	bne.n	800582a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2208      	movs	r2, #8
 80057be:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057c8:	89ba      	ldrh	r2, [r7, #12]
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fe87 	bl	80054e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057d4:	e029      	b.n	800582a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fd60 	bl	80062a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057ec:	89ba      	ldrh	r2, [r7, #12]
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fe75 	bl	80054e2 <HAL_I2C_AddrCallback>
}
 80057f8:	e017      	b.n	800582a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fd50 	bl	80062a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800580c:	89ba      	ldrh	r2, [r7, #12]
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fe65 	bl	80054e2 <HAL_I2C_AddrCallback>
}
 8005818:	e007      	b.n	800582a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2208      	movs	r2, #8
 8005820:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e00c      	b.n	8005880 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800587e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b29      	cmp	r3, #41	; 0x29
 800588a:	d112      	bne.n	80058b2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2228      	movs	r2, #40	; 0x28
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2221      	movs	r2, #33	; 0x21
 8005898:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800589a:	2101      	movs	r1, #1
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fd01 	bl	80062a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fe05 	bl	80054ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058b0:	e017      	b.n	80058e2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b2a      	cmp	r3, #42	; 0x2a
 80058bc:	d111      	bne.n	80058e2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2228      	movs	r2, #40	; 0x28
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2222      	movs	r2, #34	; 0x22
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058cc:	2102      	movs	r1, #2
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fce8 	bl	80062a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fdf6 	bl	80054ce <HAL_I2C_SlaveRxCpltCallback>
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005908:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2220      	movs	r2, #32
 8005910:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	2b21      	cmp	r3, #33	; 0x21
 8005916:	d002      	beq.n	800591e <I2C_ITSlaveCplt+0x32>
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b29      	cmp	r3, #41	; 0x29
 800591c:	d108      	bne.n	8005930 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800591e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fcbe 	bl	80062a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2221      	movs	r2, #33	; 0x21
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
 800592e:	e00d      	b.n	800594c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	d002      	beq.n	800593c <I2C_ITSlaveCplt+0x50>
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b2a      	cmp	r3, #42	; 0x2a
 800593a:	d107      	bne.n	800594c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800593c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fcaf 	bl	80062a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2222      	movs	r2, #34	; 0x22
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800595a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <I2C_ITSlaveCplt+0x204>)
 8005968:	400b      	ands	r3, r1
 800596a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa0e 	bl	8005d8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800598a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01f      	beq.n	80059d4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059a2:	e017      	b.n	80059d4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d012      	beq.n	80059d4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d020      	beq.n	8005a20 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0204 	orr.w	r2, r3, #4
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d010      	beq.n	8005a6e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8a4 	bl	8005ba0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b28      	cmp	r3, #40	; 0x28
 8005a62:	d141      	bne.n	8005ae8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f846 	bl	8005af8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a6c:	e03c      	b.n	8005ae8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a76:	d014      	beq.n	8005aa2 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff feda 	bl	8005832 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <I2C_ITSlaveCplt+0x208>)
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fd2f 	bl	80054fe <HAL_I2C_ListenCpltCallback>
}
 8005aa0:	e022      	b.n	8005ae8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b22      	cmp	r3, #34	; 0x22
 8005aac:	d10e      	bne.n	8005acc <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fd02 	bl	80054ce <HAL_I2C_SlaveRxCpltCallback>
}
 8005aca:	e00d      	b.n	8005ae8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fce9 	bl	80054ba <HAL_I2C_SlaveTxCpltCallback>
}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	fe00e800 	.word	0xfe00e800
 8005af4:	ffff0000 	.word	0xffff0000

08005af8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <I2C_ITListenCplt+0xa4>)
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d022      	beq.n	8005b74 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6c:	f043 0204 	orr.w	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b74:	f248 0103 	movw	r1, #32771	; 0x8003
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fb93 	bl	80062a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff fcb5 	bl	80054fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	ffff0000 	.word	0xffff0000

08005ba0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a5d      	ldr	r2, [pc, #372]	; (8005d34 <I2C_ITError+0x194>)
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b28      	cmp	r3, #40	; 0x28
 8005bd6:	d005      	beq.n	8005be4 <I2C_ITError+0x44>
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b29      	cmp	r3, #41	; 0x29
 8005bdc:	d002      	beq.n	8005be4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b2a      	cmp	r3, #42	; 0x2a
 8005be2:	d10b      	bne.n	8005bfc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005be4:	2103      	movs	r1, #3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb5c 	bl	80062a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2228      	movs	r2, #40	; 0x28
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a50      	ldr	r2, [pc, #320]	; (8005d38 <I2C_ITError+0x198>)
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bfa:	e011      	b.n	8005c20 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005bfc:	f248 0103 	movw	r1, #32771	; 0x8003
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb4f 	bl	80062a4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b60      	cmp	r3, #96	; 0x60
 8005c10:	d003      	beq.n	8005c1a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d039      	beq.n	8005ca2 <I2C_ITError+0x102>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b11      	cmp	r3, #17
 8005c32:	d002      	beq.n	8005c3a <I2C_ITError+0x9a>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b21      	cmp	r3, #33	; 0x21
 8005c38:	d133      	bne.n	8005ca2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c48:	d107      	bne.n	8005c5a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fe43 	bl	80048ea <HAL_DMA_GetState>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d017      	beq.n	8005c9a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	4a33      	ldr	r2, [pc, #204]	; (8005d3c <I2C_ITError+0x19c>)
 8005c70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fe11 	bl	80048a6 <HAL_DMA_Abort_IT>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d04d      	beq.n	8005d26 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c98:	e045      	b.n	8005d26 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f850 	bl	8005d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ca0:	e041      	b.n	8005d26 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d039      	beq.n	8005d1e <I2C_ITError+0x17e>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b12      	cmp	r3, #18
 8005cae:	d002      	beq.n	8005cb6 <I2C_ITError+0x116>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b22      	cmp	r3, #34	; 0x22
 8005cb4:	d133      	bne.n	8005d1e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc4:	d107      	bne.n	8005cd6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cd4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fe05 	bl	80048ea <HAL_DMA_GetState>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d017      	beq.n	8005d16 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <I2C_ITError+0x19c>)
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fdd3 	bl	80048a6 <HAL_DMA_Abort_IT>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d011      	beq.n	8005d2a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d14:	e009      	b.n	8005d2a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f812 	bl	8005d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d1c:	e005      	b.n	8005d2a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f80e 	bl	8005d40 <I2C_TreatErrorCallback>
  }
}
 8005d24:	e002      	b.n	8005d2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d2a:	bf00      	nop
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	ffff0000 	.word	0xffff0000
 8005d38:	0800553b 	.word	0x0800553b
 8005d3c:	08005dd7 	.word	0x08005dd7

08005d40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b60      	cmp	r3, #96	; 0x60
 8005d52:	d10e      	bne.n	8005d72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fbdb 	bl	8005526 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d70:	e009      	b.n	8005d86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fbc6 	bl	8005512 <HAL_I2C_ErrorCallback>
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d103      	bne.n	8005dac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d007      	beq.n	8005dca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	619a      	str	r2, [r3, #24]
  }
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	2200      	movs	r2, #0
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	2200      	movs	r2, #0
 8005e02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff ff9b 	bl	8005d40 <I2C_TreatErrorCallback>
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e22:	e022      	b.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d01e      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2c:	f7fd fef0 	bl	8003c10 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d113      	bne.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e00f      	b.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d0cd      	beq.n	8005e24 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e9e:	e02c      	b.n	8005efa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8eb 	bl	8006080 <I2C_IsErrorOccurred>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e02a      	b.n	8005f0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d01e      	beq.n	8005efa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7fd fea8 	bl	8003c10 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d113      	bne.n	8005efa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e007      	b.n	8005f0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d1cb      	bne.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f1e:	e028      	b.n	8005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f8ab 	bl	8006080 <I2C_IsErrorOccurred>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e026      	b.n	8005f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f34:	f7fd fe6c 	bl	8003c10 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d302      	bcc.n	8005f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d113      	bne.n	8005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e007      	b.n	8005f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d1cf      	bne.n	8005f20 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f98:	e064      	b.n	8006064 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f86e 	bl	8006080 <I2C_IsErrorOccurred>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e062      	b.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d138      	bne.n	800602e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d105      	bne.n	8005fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e04e      	b.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d107      	bne.n	8005ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2210      	movs	r2, #16
 8005fea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	645a      	str	r2, [r3, #68]	; 0x44
 8005ff2:	e002      	b.n	8005ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2220      	movs	r2, #32
 8006000:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b1b      	ldr	r3, [pc, #108]	; (800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800600e:	400b      	ands	r3, r1
 8006010:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e022      	b.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602e:	f7fd fdef 	bl	8003c10 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	429a      	cmp	r2, r3
 800603c:	d302      	bcc.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e007      	b.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d193      	bne.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	fe00e800 	.word	0xfe00e800

08006080 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d068      	beq.n	800617e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2210      	movs	r2, #16
 80060b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060b4:	e049      	b.n	800614a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d045      	beq.n	800614a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fd fda7 	bl	8003c10 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <I2C_IsErrorOccurred+0x54>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d13a      	bne.n	800614a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f6:	d121      	bne.n	800613c <I2C_IsErrorOccurred+0xbc>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060fe:	d01d      	beq.n	800613c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006100:	7cfb      	ldrb	r3, [r7, #19]
 8006102:	2b20      	cmp	r3, #32
 8006104:	d01a      	beq.n	800613c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006114:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006116:	f7fd fd7b 	bl	8003c10 <HAL_GetTick>
 800611a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800611c:	e00e      	b.n	800613c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800611e:	f7fd fd77 	bl	8003c10 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b19      	cmp	r3, #25
 800612a:	d907      	bls.n	800613c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800613a:	e006      	b.n	800614a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b20      	cmp	r3, #32
 8006148:	d1e9      	bne.n	800611e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b20      	cmp	r3, #32
 8006156:	d003      	beq.n	8006160 <I2C_IsErrorOccurred+0xe0>
 8006158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0aa      	beq.n	80060b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2220      	movs	r2, #32
 800616e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	f043 0308 	orr.w	r3, r3, #8
 80061b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	f043 0302 	orr.w	r3, r3, #2
 80061da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80061ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01c      	beq.n	800622e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fdca 	bl	8005d8e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b0d      	ldr	r3, [pc, #52]	; (800623c <I2C_IsErrorOccurred+0x1bc>)
 8006206:	400b      	ands	r3, r1
 8006208:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800622e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006232:	4618      	mov	r0, r3
 8006234:	3728      	adds	r7, #40	; 0x28
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	fe00e800 	.word	0xfe00e800

08006240 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	817b      	strh	r3, [r7, #10]
 800624e:	4613      	mov	r3, r2
 8006250:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006252:	897b      	ldrh	r3, [r7, #10]
 8006254:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006258:	7a7b      	ldrb	r3, [r7, #9]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006260:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	4313      	orrs	r3, r2
 800626a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800626e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	0d5b      	lsrs	r3, r3, #21
 800627a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <I2C_TransferConfig+0x60>)
 8006280:	430b      	orrs	r3, r1
 8006282:	43db      	mvns	r3, r3
 8006284:	ea02 0103 	and.w	r1, r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	03ff63ff 	.word	0x03ff63ff

080062a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00f      	beq.n	80062de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80062c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062d2:	2b28      	cmp	r3, #40	; 0x28
 80062d4:	d003      	beq.n	80062de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80062dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80062ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062fc:	2b28      	cmp	r3, #40	; 0x28
 80062fe:	d003      	beq.n	8006308 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006306:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006308:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800630c:	2b00      	cmp	r3, #0
 800630e:	da03      	bge.n	8006318 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006316:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	2b10      	cmp	r3, #16
 800631c:	d103      	bne.n	8006326 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006324:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006326:	887b      	ldrh	r3, [r7, #2]
 8006328:	2b20      	cmp	r3, #32
 800632a:	d103      	bne.n	8006334 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f043 0320 	orr.w	r3, r3, #32
 8006332:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006334:	887b      	ldrh	r3, [r7, #2]
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d103      	bne.n	8006342 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006340:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6819      	ldr	r1, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	43da      	mvns	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	400a      	ands	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b20      	cmp	r3, #32
 8006374:	d138      	bne.n	80063e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006380:	2302      	movs	r3, #2
 8006382:	e032      	b.n	80063ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6819      	ldr	r1, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b20      	cmp	r3, #32
 800640a:	d139      	bne.n	8006480 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006416:	2302      	movs	r3, #2
 8006418:	e033      	b.n	8006482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	; 0x24
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006448:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a04      	ldr	r2, [pc, #16]	; (80064ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800649a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800649e:	6013      	str	r3, [r2, #0]
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40007000 	.word	0x40007000

080064b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064ba:	4b23      	ldr	r3, [pc, #140]	; (8006548 <HAL_PWREx_EnableOverDrive+0x98>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	4a22      	ldr	r2, [pc, #136]	; (8006548 <HAL_PWREx_EnableOverDrive+0x98>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	; 0x40
 80064c6:	4b20      	ldr	r3, [pc, #128]	; (8006548 <HAL_PWREx_EnableOverDrive+0x98>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064d2:	4b1e      	ldr	r3, [pc, #120]	; (800654c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064de:	f7fd fb97 	bl	8003c10 <HAL_GetTick>
 80064e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064e4:	e009      	b.n	80064fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064e6:	f7fd fb93 	bl	8003c10 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f4:	d901      	bls.n	80064fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e022      	b.n	8006540 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006506:	d1ee      	bne.n	80064e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <HAL_PWREx_EnableOverDrive+0x9c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0f      	ldr	r2, [pc, #60]	; (800654c <HAL_PWREx_EnableOverDrive+0x9c>)
 800650e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006512:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006514:	f7fd fb7c 	bl	8003c10 <HAL_GetTick>
 8006518:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800651a:	e009      	b.n	8006530 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800651c:	f7fd fb78 	bl	8003c10 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652a:	d901      	bls.n	8006530 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e007      	b.n	8006540 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653c:	d1ee      	bne.n	800651c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	40007000 	.word	0x40007000

08006550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006558:	2300      	movs	r3, #0
 800655a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e29b      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8087 	beq.w	8006682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006574:	4b96      	ldr	r3, [pc, #600]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b04      	cmp	r3, #4
 800657e:	d00c      	beq.n	800659a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006580:	4b93      	ldr	r3, [pc, #588]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	2b08      	cmp	r3, #8
 800658a:	d112      	bne.n	80065b2 <HAL_RCC_OscConfig+0x62>
 800658c:	4b90      	ldr	r3, [pc, #576]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006598:	d10b      	bne.n	80065b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659a:	4b8d      	ldr	r3, [pc, #564]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d06c      	beq.n	8006680 <HAL_RCC_OscConfig+0x130>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d168      	bne.n	8006680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e275      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x7a>
 80065bc:	4b84      	ldr	r3, [pc, #528]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a83      	ldr	r2, [pc, #524]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e02e      	b.n	8006628 <HAL_RCC_OscConfig+0xd8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10c      	bne.n	80065ec <HAL_RCC_OscConfig+0x9c>
 80065d2:	4b7f      	ldr	r3, [pc, #508]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7e      	ldr	r2, [pc, #504]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	4b7c      	ldr	r3, [pc, #496]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a7b      	ldr	r2, [pc, #492]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	e01d      	b.n	8006628 <HAL_RCC_OscConfig+0xd8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065f4:	d10c      	bne.n	8006610 <HAL_RCC_OscConfig+0xc0>
 80065f6:	4b76      	ldr	r3, [pc, #472]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a75      	ldr	r2, [pc, #468]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80065fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4b73      	ldr	r3, [pc, #460]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a72      	ldr	r2, [pc, #456]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e00b      	b.n	8006628 <HAL_RCC_OscConfig+0xd8>
 8006610:	4b6f      	ldr	r3, [pc, #444]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6e      	ldr	r2, [pc, #440]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4b6c      	ldr	r3, [pc, #432]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6b      	ldr	r2, [pc, #428]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fd faee 	bl	8003c10 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fd faea 	bl	8003c10 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	; 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e229      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664a:	4b61      	ldr	r3, [pc, #388]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0xe8>
 8006656:	e014      	b.n	8006682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fd fada 	bl	8003c10 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fd fad6 	bl	8003c10 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e215      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006672:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x110>
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d069      	beq.n	8006762 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800668e:	4b50      	ldr	r3, [pc, #320]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800669a:	4b4d      	ldr	r3, [pc, #308]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d11c      	bne.n	80066e0 <HAL_RCC_OscConfig+0x190>
 80066a6:	4b4a      	ldr	r3, [pc, #296]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d116      	bne.n	80066e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b2:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <HAL_RCC_OscConfig+0x17a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d001      	beq.n	80066ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e1e9      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ca:	4b41      	ldr	r3, [pc, #260]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	493d      	ldr	r1, [pc, #244]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066de:	e040      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d023      	beq.n	8006730 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066e8:	4b39      	ldr	r3, [pc, #228]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a38      	ldr	r2, [pc, #224]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fd fa8c 	bl	8003c10 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fc:	f7fd fa88 	bl	8003c10 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e1c7      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670e:	4b30      	ldr	r3, [pc, #192]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800671a:	4b2d      	ldr	r3, [pc, #180]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	4929      	ldr	r1, [pc, #164]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]
 800672e:	e018      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006730:	4b27      	ldr	r3, [pc, #156]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fd fa68 	bl	8003c10 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006744:	f7fd fa64 	bl	8003c10 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1a3      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d038      	beq.n	80067e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d019      	beq.n	80067aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006776:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 8006778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677a:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006782:	f7fd fa45 	bl	8003c10 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800678a:	f7fd fa41 	bl	8003c10 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e180      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 800679e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x23a>
 80067a8:	e01a      	b.n	80067e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80067ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ae:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <HAL_RCC_OscConfig+0x280>)
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b6:	f7fd fa2b 	bl	8003c10 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067bc:	e00a      	b.n	80067d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067be:	f7fd fa27 	bl	8003c10 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d903      	bls.n	80067d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e166      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
 80067d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d4:	4b92      	ldr	r3, [pc, #584]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80067d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1ee      	bne.n	80067be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80a4 	beq.w	8006936 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ee:	4b8c      	ldr	r3, [pc, #560]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	4b89      	ldr	r3, [pc, #548]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	4a88      	ldr	r2, [pc, #544]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006804:	6413      	str	r3, [r2, #64]	; 0x40
 8006806:	4b86      	ldr	r3, [pc, #536]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006816:	4b83      	ldr	r3, [pc, #524]	; (8006a24 <HAL_RCC_OscConfig+0x4d4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d118      	bne.n	8006854 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006822:	4b80      	ldr	r3, [pc, #512]	; (8006a24 <HAL_RCC_OscConfig+0x4d4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a7f      	ldr	r2, [pc, #508]	; (8006a24 <HAL_RCC_OscConfig+0x4d4>)
 8006828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800682e:	f7fd f9ef 	bl	8003c10 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006836:	f7fd f9eb 	bl	8003c10 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b64      	cmp	r3, #100	; 0x64
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e12a      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006848:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <HAL_RCC_OscConfig+0x4d4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d106      	bne.n	800686a <HAL_RCC_OscConfig+0x31a>
 800685c:	4b70      	ldr	r3, [pc, #448]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4a6f      	ldr	r2, [pc, #444]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	6713      	str	r3, [r2, #112]	; 0x70
 8006868:	e02d      	b.n	80068c6 <HAL_RCC_OscConfig+0x376>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10c      	bne.n	800688c <HAL_RCC_OscConfig+0x33c>
 8006872:	4b6b      	ldr	r3, [pc, #428]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4a6a      	ldr	r2, [pc, #424]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	6713      	str	r3, [r2, #112]	; 0x70
 800687e:	4b68      	ldr	r3, [pc, #416]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	4a67      	ldr	r2, [pc, #412]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006884:	f023 0304 	bic.w	r3, r3, #4
 8006888:	6713      	str	r3, [r2, #112]	; 0x70
 800688a:	e01c      	b.n	80068c6 <HAL_RCC_OscConfig+0x376>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b05      	cmp	r3, #5
 8006892:	d10c      	bne.n	80068ae <HAL_RCC_OscConfig+0x35e>
 8006894:	4b62      	ldr	r3, [pc, #392]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	4a61      	ldr	r2, [pc, #388]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 800689a:	f043 0304 	orr.w	r3, r3, #4
 800689e:	6713      	str	r3, [r2, #112]	; 0x70
 80068a0:	4b5f      	ldr	r3, [pc, #380]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a4:	4a5e      	ldr	r2, [pc, #376]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	6713      	str	r3, [r2, #112]	; 0x70
 80068ac:	e00b      	b.n	80068c6 <HAL_RCC_OscConfig+0x376>
 80068ae:	4b5c      	ldr	r3, [pc, #368]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a5b      	ldr	r2, [pc, #364]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ba:	4b59      	ldr	r3, [pc, #356]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068be:	4a58      	ldr	r2, [pc, #352]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d015      	beq.n	80068fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fd f99f 	bl	8003c10 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fd f99b 	bl	8003c10 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e0d8      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ec:	4b4c      	ldr	r3, [pc, #304]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ee      	beq.n	80068d6 <HAL_RCC_OscConfig+0x386>
 80068f8:	e014      	b.n	8006924 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fd f989 	bl	8003c10 <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006900:	e00a      	b.n	8006918 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fd f985 	bl	8003c10 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e0c2      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006918:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 800691a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1ee      	bne.n	8006902 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d105      	bne.n	8006936 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692a:	4b3d      	ldr	r3, [pc, #244]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	4a3c      	ldr	r2, [pc, #240]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80ae 	beq.w	8006a9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006940:	4b37      	ldr	r3, [pc, #220]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	2b08      	cmp	r3, #8
 800694a:	d06d      	beq.n	8006a28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d14b      	bne.n	80069ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006954:	4b32      	ldr	r3, [pc, #200]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a31      	ldr	r2, [pc, #196]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 800695a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fd f956 	bl	8003c10 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006968:	f7fd f952 	bl	8003c10 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e091      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697a:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69da      	ldr	r2, [r3, #28]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	3b01      	subs	r3, #1
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	061b      	lsls	r3, r3, #24
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	071b      	lsls	r3, r3, #28
 80069b2:	491b      	ldr	r1, [pc, #108]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b8:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80069be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fd f924 	bl	8003c10 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069cc:	f7fd f920 	bl	8003c10 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e05f      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x47c>
 80069ea:	e057      	b.n	8006a9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fd f90a 	bl	8003c10 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fd f906 	bl	8003c10 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e045      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a12:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RCC_OscConfig+0x4d0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x4b0>
 8006a1e:	e03d      	b.n	8006a9c <HAL_RCC_OscConfig+0x54c>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a28:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <HAL_RCC_OscConfig+0x558>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d030      	beq.n	8006a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d129      	bne.n	8006a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d122      	bne.n	8006a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d119      	bne.n	8006a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	3b01      	subs	r3, #1
 8006a72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d10f      	bne.n	8006a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d107      	bne.n	8006a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d001      	beq.n	8006a9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023800 	.word	0x40023800

08006aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0d0      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac4:	4b6a      	ldr	r3, [pc, #424]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d910      	bls.n	8006af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad2:	4b67      	ldr	r3, [pc, #412]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f023 020f 	bic.w	r2, r3, #15
 8006ada:	4965      	ldr	r1, [pc, #404]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae2:	4b63      	ldr	r3, [pc, #396]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d001      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e0b8      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d020      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b0c:	4b59      	ldr	r3, [pc, #356]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a58      	ldr	r2, [pc, #352]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b24:	4b53      	ldr	r3, [pc, #332]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	4a52      	ldr	r2, [pc, #328]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b30:	4b50      	ldr	r3, [pc, #320]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	494d      	ldr	r1, [pc, #308]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d040      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d107      	bne.n	8006b66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	4b47      	ldr	r3, [pc, #284]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d115      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e07f      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b6e:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e073      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7e:	4b3d      	ldr	r3, [pc, #244]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e06b      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b8e:	4b39      	ldr	r3, [pc, #228]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f023 0203 	bic.w	r2, r3, #3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4936      	ldr	r1, [pc, #216]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba0:	f7fd f836 	bl	8003c10 <HAL_GetTick>
 8006ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba8:	f7fd f832 	bl	8003c10 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e053      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bbe:	4b2d      	ldr	r3, [pc, #180]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 020c 	and.w	r2, r3, #12
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d1eb      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd0:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d210      	bcs.n	8006c00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 020f 	bic.w	r2, r3, #15
 8006be6:	4922      	ldr	r1, [pc, #136]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bee:	4b20      	ldr	r3, [pc, #128]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e032      	b.n	8006c66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c0c:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4916      	ldr	r1, [pc, #88]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	490e      	ldr	r1, [pc, #56]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c3e:	f000 f821 	bl	8006c84 <HAL_RCC_GetSysClockFreq>
 8006c42:	4602      	mov	r2, r0
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	091b      	lsrs	r3, r3, #4
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	490a      	ldr	r1, [pc, #40]	; (8006c78 <HAL_RCC_ClockConfig+0x1cc>)
 8006c50:	5ccb      	ldrb	r3, [r1, r3]
 8006c52:	fa22 f303 	lsr.w	r3, r2, r3
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <HAL_RCC_ClockConfig+0x1d0>)
 8006c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c5a:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <HAL_RCC_ClockConfig+0x1d4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fc ff92 	bl	8003b88 <HAL_InitTick>

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40023c00 	.word	0x40023c00
 8006c74:	40023800 	.word	0x40023800
 8006c78:	08018c58 	.word	0x08018c58
 8006c7c:	20000008 	.word	0x20000008
 8006c80:	20000010 	.word	0x20000010

08006c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c88:	b094      	sub	sp, #80	; 0x50
 8006c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c90:	2300      	movs	r3, #0
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c94:	2300      	movs	r3, #0
 8006c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c9c:	4b79      	ldr	r3, [pc, #484]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 030c 	and.w	r3, r3, #12
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d00d      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	f200 80e1 	bhi.w	8006e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8006cb6:	e0db      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cb8:	4b73      	ldr	r3, [pc, #460]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cbc:	e0db      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cbe:	4b73      	ldr	r3, [pc, #460]	; (8006e8c <HAL_RCC_GetSysClockFreq+0x208>)
 8006cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cc2:	e0d8      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cc4:	4b6f      	ldr	r3, [pc, #444]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ccc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cce:	4b6d      	ldr	r3, [pc, #436]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d063      	beq.n	8006da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cda:	4b6a      	ldr	r3, [pc, #424]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	099b      	lsrs	r3, r3, #6
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cec:	633b      	str	r3, [r7, #48]	; 0x30
 8006cee:	2300      	movs	r3, #0
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	f04f 0000 	mov.w	r0, #0
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	0159      	lsls	r1, r3, #5
 8006d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d08:	0150      	lsls	r0, r2, #5
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4621      	mov	r1, r4
 8006d10:	1a51      	subs	r1, r2, r1
 8006d12:	6139      	str	r1, [r7, #16]
 8006d14:	4629      	mov	r1, r5
 8006d16:	eb63 0301 	sbc.w	r3, r3, r1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d28:	4659      	mov	r1, fp
 8006d2a:	018b      	lsls	r3, r1, #6
 8006d2c:	4651      	mov	r1, sl
 8006d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d32:	4651      	mov	r1, sl
 8006d34:	018a      	lsls	r2, r1, #6
 8006d36:	4651      	mov	r1, sl
 8006d38:	ebb2 0801 	subs.w	r8, r2, r1
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d56:	4690      	mov	r8, r2
 8006d58:	4699      	mov	r9, r3
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	eb18 0303 	adds.w	r3, r8, r3
 8006d60:	60bb      	str	r3, [r7, #8]
 8006d62:	462b      	mov	r3, r5
 8006d64:	eb49 0303 	adc.w	r3, r9, r3
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d76:	4629      	mov	r1, r5
 8006d78:	024b      	lsls	r3, r1, #9
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d80:	4621      	mov	r1, r4
 8006d82:	024a      	lsls	r2, r1, #9
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d94:	f7f9 fc68 	bl	8000668 <__aeabi_uldivmod>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da0:	e058      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da2:	4b38      	ldr	r3, [pc, #224]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	2200      	movs	r2, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	4611      	mov	r1, r2
 8006dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006db2:	623b      	str	r3, [r7, #32]
 8006db4:	2300      	movs	r3, #0
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
 8006db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	f04f 0000 	mov.w	r0, #0
 8006dc4:	f04f 0100 	mov.w	r1, #0
 8006dc8:	0159      	lsls	r1, r3, #5
 8006dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dce:	0150      	lsls	r0, r2, #5
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dda:	4649      	mov	r1, r9
 8006ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006df4:	ebb2 040a 	subs.w	r4, r2, sl
 8006df8:	eb63 050b 	sbc.w	r5, r3, fp
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	00eb      	lsls	r3, r5, #3
 8006e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e0a:	00e2      	lsls	r2, r4, #3
 8006e0c:	4614      	mov	r4, r2
 8006e0e:	461d      	mov	r5, r3
 8006e10:	4643      	mov	r3, r8
 8006e12:	18e3      	adds	r3, r4, r3
 8006e14:	603b      	str	r3, [r7, #0]
 8006e16:	464b      	mov	r3, r9
 8006e18:	eb45 0303 	adc.w	r3, r5, r3
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	028b      	lsls	r3, r1, #10
 8006e2e:	4621      	mov	r1, r4
 8006e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e34:	4621      	mov	r1, r4
 8006e36:	028a      	lsls	r2, r1, #10
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3e:	2200      	movs	r2, #0
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	61fa      	str	r2, [r7, #28]
 8006e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e48:	f7f9 fc0e 	bl	8000668 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4613      	mov	r3, r2
 8006e52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	3301      	adds	r3, #1
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e6e:	e002      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3750      	adds	r7, #80	; 0x50
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e82:	bf00      	nop
 8006e84:	40023800 	.word	0x40023800
 8006e88:	00f42400 	.word	0x00f42400
 8006e8c:	007a1200 	.word	0x007a1200

08006e90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e96:	681b      	ldr	r3, [r3, #0]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000008 	.word	0x20000008

08006ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006eac:	f7ff fff0 	bl	8006e90 <HAL_RCC_GetHCLKFreq>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	0a9b      	lsrs	r3, r3, #10
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	4903      	ldr	r1, [pc, #12]	; (8006ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ebe:	5ccb      	ldrb	r3, [r1, r3]
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	08018c68 	.word	0x08018c68

08006ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ed4:	f7ff ffdc 	bl	8006e90 <HAL_RCC_GetHCLKFreq>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	0b5b      	lsrs	r3, r3, #13
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	4903      	ldr	r1, [pc, #12]	; (8006ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ee6:	5ccb      	ldrb	r3, [r1, r3]
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	08018c68 	.word	0x08018c68

08006ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f20:	4b69      	ldr	r3, [pc, #420]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f2a:	6093      	str	r3, [r2, #8]
 8006f2c:	4b66      	ldr	r3, [pc, #408]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f34:	4964      	ldr	r1, [pc, #400]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d017      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f52:	4b5d      	ldr	r3, [pc, #372]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	4959      	ldr	r1, [pc, #356]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d017      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f8e:	4b4e      	ldr	r3, [pc, #312]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	494a      	ldr	r1, [pc, #296]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 808b 	beq.w	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fdc:	4b3a      	ldr	r3, [pc, #232]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	4a39      	ldr	r2, [pc, #228]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe8:	4b37      	ldr	r3, [pc, #220]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ff4:	4b35      	ldr	r3, [pc, #212]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a34      	ldr	r2, [pc, #208]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007000:	f7fc fe06 	bl	8003c10 <HAL_GetTick>
 8007004:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007006:	e008      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007008:	f7fc fe02 	bl	8003c10 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b64      	cmp	r3, #100	; 0x64
 8007014:	d901      	bls.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e38f      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800701a:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f0      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007026:	4b28      	ldr	r3, [pc, #160]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d035      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	429a      	cmp	r2, r3
 8007042:	d02e      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007044:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800704e:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	4a1d      	ldr	r2, [pc, #116]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007058:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800705a:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	4a1a      	ldr	r2, [pc, #104]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007066:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800706c:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d114      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fc fdca 	bl	8003c10 <HAL_GetTick>
 800707c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707e:	e00a      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007080:	f7fc fdc6 	bl	8003c10 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	; 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e351      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0ee      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ae:	d111      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070be:	400b      	ands	r3, r1
 80070c0:	4901      	ldr	r1, [pc, #4]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
 80070c6:	e00b      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40007000 	.word	0x40007000
 80070d0:	0ffffcff 	.word	0x0ffffcff
 80070d4:	4bac      	ldr	r3, [pc, #688]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	4aab      	ldr	r2, [pc, #684]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070de:	6093      	str	r3, [r2, #8]
 80070e0:	4ba9      	ldr	r3, [pc, #676]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ec:	49a6      	ldr	r1, [pc, #664]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d010      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070fe:	4ba2      	ldr	r3, [pc, #648]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007104:	4aa0      	ldr	r2, [pc, #640]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800710a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800710e:	4b9e      	ldr	r3, [pc, #632]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	499b      	ldr	r1, [pc, #620]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800712c:	4b96      	ldr	r3, [pc, #600]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800713a:	4993      	ldr	r1, [pc, #588]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800714e:	4b8e      	ldr	r3, [pc, #568]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800715c:	498a      	ldr	r1, [pc, #552]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007170:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717e:	4982      	ldr	r1, [pc, #520]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007192:	4b7d      	ldr	r3, [pc, #500]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a0:	4979      	ldr	r1, [pc, #484]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071b4:	4b74      	ldr	r3, [pc, #464]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ba:	f023 0203 	bic.w	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	4971      	ldr	r1, [pc, #452]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071d6:	4b6c      	ldr	r3, [pc, #432]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071dc:	f023 020c 	bic.w	r2, r3, #12
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e4:	4968      	ldr	r1, [pc, #416]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071f8:	4b63      	ldr	r3, [pc, #396]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	4960      	ldr	r1, [pc, #384]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800721a:	4b5b      	ldr	r3, [pc, #364]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800721c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007220:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007228:	4957      	ldr	r1, [pc, #348]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800723c:	4b52      	ldr	r3, [pc, #328]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	494f      	ldr	r1, [pc, #316]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800725e:	4b4a      	ldr	r3, [pc, #296]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726c:	4946      	ldr	r1, [pc, #280]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007280:	4b41      	ldr	r3, [pc, #260]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	493e      	ldr	r1, [pc, #248]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80072a2:	4b39      	ldr	r3, [pc, #228]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b0:	4935      	ldr	r1, [pc, #212]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072c4:	4b30      	ldr	r3, [pc, #192]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d2:	492d      	ldr	r1, [pc, #180]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d011      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072e6:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f4:	4924      	ldr	r1, [pc, #144]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007304:	d101      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007306:	2301      	movs	r3, #1
 8007308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007316:	2301      	movs	r3, #1
 8007318:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	4914      	ldr	r1, [pc, #80]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00b      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007358:	490b      	ldr	r1, [pc, #44]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00f      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007372:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	4902      	ldr	r1, [pc, #8]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007384:	e002      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007386:	bf00      	nop
 8007388:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007398:	4b8a      	ldr	r3, [pc, #552]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800739a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800739e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a8:	4986      	ldr	r1, [pc, #536]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073bc:	4b81      	ldr	r3, [pc, #516]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073cc:	497d      	ldr	r1, [pc, #500]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d006      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80d6 	beq.w	8007594 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073e8:	4b76      	ldr	r3, [pc, #472]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a75      	ldr	r2, [pc, #468]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f4:	f7fc fc0c 	bl	8003c10 <HAL_GetTick>
 80073f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073fc:	f7fc fc08 	bl	8003c10 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b64      	cmp	r3, #100	; 0x64
 8007408:	d901      	bls.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e195      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800740e:	4b6d      	ldr	r3, [pc, #436]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d021      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742a:	2b00      	cmp	r3, #0
 800742c:	d11d      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800742e:	4b65      	ldr	r3, [pc, #404]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800743c:	4b61      	ldr	r3, [pc, #388]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800743e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007442:	0e1b      	lsrs	r3, r3, #24
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	019a      	lsls	r2, r3, #6
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	041b      	lsls	r3, r3, #16
 8007454:	431a      	orrs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	061b      	lsls	r3, r3, #24
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	071b      	lsls	r3, r3, #28
 8007462:	4958      	ldr	r1, [pc, #352]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007464:	4313      	orrs	r3, r2
 8007466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800747e:	d00a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02e      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007494:	d129      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007496:	4b4b      	ldr	r3, [pc, #300]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749c:	0c1b      	lsrs	r3, r3, #16
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074a4:	4b47      	ldr	r3, [pc, #284]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074aa:	0f1b      	lsrs	r3, r3, #28
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	019a      	lsls	r2, r3, #6
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	061b      	lsls	r3, r3, #24
 80074c4:	431a      	orrs	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	071b      	lsls	r3, r3, #28
 80074ca:	493e      	ldr	r1, [pc, #248]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074d2:	4b3c      	ldr	r3, [pc, #240]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d8:	f023 021f 	bic.w	r2, r3, #31
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	3b01      	subs	r3, #1
 80074e2:	4938      	ldr	r1, [pc, #224]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01d      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074f6:	4b33      	ldr	r3, [pc, #204]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fc:	0e1b      	lsrs	r3, r3, #24
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007504:	4b2f      	ldr	r3, [pc, #188]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750a:	0f1b      	lsrs	r3, r3, #28
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	019a      	lsls	r2, r3, #6
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	431a      	orrs	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	071b      	lsls	r3, r3, #28
 800752a:	4926      	ldr	r1, [pc, #152]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d011      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	019a      	lsls	r2, r3, #6
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	061b      	lsls	r3, r3, #24
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	071b      	lsls	r3, r3, #28
 800755a:	491a      	ldr	r1, [pc, #104]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800755c:	4313      	orrs	r3, r2
 800755e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007562:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800756c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756e:	f7fc fb4f 	bl	8003c10 <HAL_GetTick>
 8007572:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007574:	e008      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007576:	f7fc fb4b 	bl	8003c10 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b64      	cmp	r3, #100	; 0x64
 8007582:	d901      	bls.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0d8      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0f0      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b01      	cmp	r3, #1
 8007598:	f040 80ce 	bne.w	8007738 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a8:	f7fc fb32 	bl	8003c10 <HAL_GetTick>
 80075ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075ae:	e00b      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075b0:	f7fc fb2e 	bl	8003c10 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b64      	cmp	r3, #100	; 0x64
 80075bc:	d904      	bls.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e0bb      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80075c2:	bf00      	nop
 80075c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075c8:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d4:	d0ec      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d02e      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d12a      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075fe:	4b51      	ldr	r3, [pc, #324]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007604:	0c1b      	lsrs	r3, r3, #16
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800760c:	4b4d      	ldr	r3, [pc, #308]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007612:	0f1b      	lsrs	r3, r3, #28
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	019a      	lsls	r2, r3, #6
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	041b      	lsls	r3, r3, #16
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	061b      	lsls	r3, r3, #24
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	071b      	lsls	r3, r3, #28
 8007632:	4944      	ldr	r1, [pc, #272]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800763a:	4b42      	ldr	r3, [pc, #264]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800763c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007640:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	3b01      	subs	r3, #1
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	493d      	ldr	r1, [pc, #244]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d022      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007668:	d11d      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800766a:	4b36      	ldr	r3, [pc, #216]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	0e1b      	lsrs	r3, r3, #24
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007678:	4b32      	ldr	r3, [pc, #200]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	0f1b      	lsrs	r3, r3, #28
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	019a      	lsls	r2, r3, #6
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	431a      	orrs	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	061b      	lsls	r3, r3, #24
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	071b      	lsls	r3, r3, #28
 800769e:	4929      	ldr	r1, [pc, #164]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d028      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076b2:	4b24      	ldr	r3, [pc, #144]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b8:	0e1b      	lsrs	r3, r3, #24
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076c0:	4b20      	ldr	r3, [pc, #128]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	019a      	lsls	r2, r3, #6
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	041b      	lsls	r3, r3, #16
 80076d8:	431a      	orrs	r2, r3
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	061b      	lsls	r3, r3, #24
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	071b      	lsls	r3, r3, #28
 80076e6:	4917      	ldr	r1, [pc, #92]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076ee:	4b15      	ldr	r3, [pc, #84]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	4911      	ldr	r1, [pc, #68]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007704:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a0e      	ldr	r2, [pc, #56]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800770a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800770e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007710:	f7fc fa7e 	bl	8003c10 <HAL_GetTick>
 8007714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007716:	e008      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007718:	f7fc fa7a 	bl	8003c10 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b64      	cmp	r3, #100	; 0x64
 8007724:	d901      	bls.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e007      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007736:	d1ef      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40023800 	.word	0x40023800

08007748 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e01c      	b.n	8007794 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	795b      	ldrb	r3, [r3, #5]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa fe42 	bl	80023f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0204 	orr.w	r2, r2, #4
 8007784:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e09d      	b.n	80078ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077be:	d009      	beq.n	80077d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	61da      	str	r2, [r3, #28]
 80077c6:	e005      	b.n	80077d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fa fe72 	bl	80024d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800780a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007814:	d902      	bls.n	800781c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	e002      	b.n	8007822 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800781c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007820:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800782a:	d007      	beq.n	800783c <HAL_SPI_Init+0xa0>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007834:	d002      	beq.n	800783c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	ea42 0103 	orr.w	r1, r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	0c1b      	lsrs	r3, r3, #16
 8007898:	f003 0204 	and.w	r2, r3, #4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80078b8:	ea42 0103 	orr.w	r1, r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b088      	sub	sp, #32
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_SPI_Transmit+0x22>
 8007910:	2302      	movs	r3, #2
 8007912:	e158      	b.n	8007bc6 <HAL_SPI_Transmit+0x2d4>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800791c:	f7fc f978 	bl	8003c10 <HAL_GetTick>
 8007920:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	d002      	beq.n	8007938 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007932:	2302      	movs	r3, #2
 8007934:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007936:	e13d      	b.n	8007bb4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <HAL_SPI_Transmit+0x52>
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007948:	e134      	b.n	8007bb4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2203      	movs	r2, #3
 800794e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	88fa      	ldrh	r2, [r7, #6]
 8007962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007994:	d10f      	bne.n	80079b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d007      	beq.n	80079d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079dc:	d94b      	bls.n	8007a76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_SPI_Transmit+0xfa>
 80079e6:	8afb      	ldrh	r3, [r7, #22]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d13e      	bne.n	8007a6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	881a      	ldrh	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a10:	e02b      	b.n	8007a6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d112      	bne.n	8007a46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	881a      	ldrh	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	1c9a      	adds	r2, r3, #2
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a44:	e011      	b.n	8007a6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a46:	f7fc f8e3 	bl	8003c10 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d803      	bhi.n	8007a5e <HAL_SPI_Transmit+0x16c>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d102      	bne.n	8007a64 <HAL_SPI_Transmit+0x172>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a68:	e0a4      	b.n	8007bb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1ce      	bne.n	8007a12 <HAL_SPI_Transmit+0x120>
 8007a74:	e07c      	b.n	8007b70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_Transmit+0x192>
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d170      	bne.n	8007b66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d912      	bls.n	8007ab4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	1c9a      	adds	r2, r3, #2
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b02      	subs	r3, #2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ab2:	e058      	b.n	8007b66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007ada:	e044      	b.n	8007b66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d12b      	bne.n	8007b42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d912      	bls.n	8007b1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	881a      	ldrh	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	1c9a      	adds	r2, r3, #2
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b02      	subs	r3, #2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b18:	e025      	b.n	8007b66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b40:	e011      	b.n	8007b66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b42:	f7fc f865 	bl	8003c10 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d803      	bhi.n	8007b5a <HAL_SPI_Transmit+0x268>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d102      	bne.n	8007b60 <HAL_SPI_Transmit+0x26e>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b64:	e026      	b.n	8007bb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1b5      	bne.n	8007adc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f949 	bl	8007e0c <SPI_EndRxTxTransaction>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2220      	movs	r2, #32
 8007b84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b8e:	2300      	movs	r3, #0
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	613b      	str	r3, [r7, #16]
 8007ba2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e000      	b.n	8007bb4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007bc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007be0:	f7fc f816 	bl	8003c10 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bf0:	f7fc f80e 	bl	8003c10 <HAL_GetTick>
 8007bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	015b      	lsls	r3, r3, #5
 8007bfc:	0d1b      	lsrs	r3, r3, #20
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c06:	e054      	b.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d050      	beq.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c10:	f7fb fffe 	bl	8003c10 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d902      	bls.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d13d      	bne.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3e:	d111      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c48:	d004      	beq.n	8007c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d107      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6c:	d10f      	bne.n	8007c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e017      	b.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d19b      	bne.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000008 	.word	0x20000008

08007ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007cf2:	f7fb ff8d 	bl	8003c10 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	4413      	add	r3, r2
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d02:	f7fb ff85 	bl	8003c10 <HAL_GetTick>
 8007d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d10:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	00da      	lsls	r2, r3, #3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	0d1b      	lsrs	r3, r3, #20
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	fb02 f303 	mul.w	r3, r2, r3
 8007d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d28:	e060      	b.n	8007dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d30:	d107      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d050      	beq.n	8007dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d4a:	f7fb ff61 	bl	8003c10 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d902      	bls.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d13d      	bne.n	8007ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d78:	d111      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d82:	d004      	beq.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8c:	d107      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da6:	d10f      	bne.n	8007dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e010      	b.n	8007dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d196      	bne.n	8007d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	; 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000008 	.word	0x20000008

08007e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff ff5b 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e34:	f043 0220 	orr.w	r2, r3, #32
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e046      	b.n	8007ece <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e40:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <SPI_EndRxTxTransaction+0xcc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a25      	ldr	r2, [pc, #148]	; (8007edc <SPI_EndRxTxTransaction+0xd0>)
 8007e46:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4a:	0d5b      	lsrs	r3, r3, #21
 8007e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
 8007e54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e5e:	d112      	bne.n	8007e86 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff feb0 	bl	8007bd0 <SPI_WaitFlagStateUntilTimeout>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d016      	beq.n	8007ea4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e023      	b.n	8007ece <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9c:	2b80      	cmp	r3, #128	; 0x80
 8007e9e:	d0f2      	beq.n	8007e86 <SPI_EndRxTxTransaction+0x7a>
 8007ea0:	e000      	b.n	8007ea4 <SPI_EndRxTxTransaction+0x98>
        break;
 8007ea2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff ff15 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d007      	beq.n	8007ecc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec0:	f043 0220 	orr.w	r2, r3, #32
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e000      	b.n	8007ece <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000008 	.word	0x20000008
 8007edc:	165e9f81 	.word	0x165e9f81

08007ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e049      	b.n	8007f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fa fd70 	bl	80029ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f000 fd30 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a1a      	ldr	r2, [r3, #32]
 8007fa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fa8:	4013      	ands	r3, r2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10f      	bne.n	8007fce <HAL_TIM_Base_DeInit+0x40>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	f240 4344 	movw	r3, #1092	; 0x444
 8007fb8:	4013      	ands	r3, r2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d107      	bne.n	8007fce <HAL_TIM_Base_DeInit+0x40>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fa fdb6 	bl	8002b40 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d001      	beq.n	8008060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e04c      	b.n	80080fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a26      	ldr	r2, [pc, #152]	; (8008108 <HAL_TIM_Base_Start+0xc0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d022      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800807a:	d01d      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a22      	ldr	r2, [pc, #136]	; (800810c <HAL_TIM_Base_Start+0xc4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d018      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a21      	ldr	r2, [pc, #132]	; (8008110 <HAL_TIM_Base_Start+0xc8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d013      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <HAL_TIM_Base_Start+0xcc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00e      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a1e      	ldr	r2, [pc, #120]	; (8008118 <HAL_TIM_Base_Start+0xd0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d009      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1c      	ldr	r2, [pc, #112]	; (800811c <HAL_TIM_Base_Start+0xd4>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <HAL_TIM_Base_Start+0x70>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <HAL_TIM_Base_Start+0xd8>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d115      	bne.n	80080e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	4b19      	ldr	r3, [pc, #100]	; (8008124 <HAL_TIM_Base_Start+0xdc>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b06      	cmp	r3, #6
 80080c8:	d015      	beq.n	80080f6 <HAL_TIM_Base_Start+0xae>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d0:	d011      	beq.n	80080f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0201 	orr.w	r2, r2, #1
 80080e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e2:	e008      	b.n	80080f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	e000      	b.n	80080f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	40010000 	.word	0x40010000
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800
 8008114:	40000c00 	.word	0x40000c00
 8008118:	40010400 	.word	0x40010400
 800811c:	40014000 	.word	0x40014000
 8008120:	40001800 	.word	0x40001800
 8008124:	00010007 	.word	0x00010007

08008128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b01      	cmp	r3, #1
 800813a:	d001      	beq.n	8008140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e054      	b.n	80081ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a26      	ldr	r2, [pc, #152]	; (80081f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d022      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800816a:	d01d      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a22      	ldr	r2, [pc, #136]	; (80081fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d018      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a21      	ldr	r2, [pc, #132]	; (8008200 <HAL_TIM_Base_Start_IT+0xd8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <HAL_TIM_Base_Start_IT+0xdc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00e      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1e      	ldr	r2, [pc, #120]	; (8008208 <HAL_TIM_Base_Start_IT+0xe0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_TIM_Base_Start_IT+0xe4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x80>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <HAL_TIM_Base_Start_IT+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d115      	bne.n	80081d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	4b19      	ldr	r3, [pc, #100]	; (8008214 <HAL_TIM_Base_Start_IT+0xec>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b06      	cmp	r3, #6
 80081b8:	d015      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0xbe>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c0:	d011      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0201 	orr.w	r2, r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d2:	e008      	b.n	80081e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0201 	orr.w	r2, r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	e000      	b.n	80081e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40000400 	.word	0x40000400
 8008200:	40000800 	.word	0x40000800
 8008204:	40000c00 	.word	0x40000c00
 8008208:	40010400 	.word	0x40010400
 800820c:	40014000 	.word	0x40014000
 8008210:	40001800 	.word	0x40001800
 8008214:	00010007 	.word	0x00010007

08008218 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a1a      	ldr	r2, [r3, #32]
 8008236:	f241 1311 	movw	r3, #4369	; 0x1111
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10f      	bne.n	8008260 <HAL_TIM_Base_Stop_IT+0x48>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6a1a      	ldr	r2, [r3, #32]
 8008246:	f240 4344 	movw	r3, #1092	; 0x444
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <HAL_TIM_Base_Stop_IT+0x48>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e049      	b.n	800831c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f841 	bl	8008324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2202      	movs	r2, #2
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f000 fb65 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b02      	cmp	r3, #2
 800834c:	d122      	bne.n	8008394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b02      	cmp	r3, #2
 800835a:	d11b      	bne.n	8008394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f06f 0202 	mvn.w	r2, #2
 8008364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fae4 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8008380:	e005      	b.n	800838e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fad6 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fae7 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d122      	bne.n	80083e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d11b      	bne.n	80083e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0204 	mvn.w	r2, #4
 80083b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 faba 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 80083d4:	e005      	b.n	80083e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 faac 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fabd 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d122      	bne.n	800843c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f003 0308 	and.w	r3, r3, #8
 8008400:	2b08      	cmp	r3, #8
 8008402:	d11b      	bne.n	800843c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f06f 0208 	mvn.w	r2, #8
 800840c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2204      	movs	r2, #4
 8008412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	f003 0303 	and.w	r3, r3, #3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa90 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8008428:	e005      	b.n	8008436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa82 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fa93 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	2b10      	cmp	r3, #16
 8008448:	d122      	bne.n	8008490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b10      	cmp	r3, #16
 8008456:	d11b      	bne.n	8008490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f06f 0210 	mvn.w	r2, #16
 8008460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2208      	movs	r2, #8
 8008466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa66 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 800847c:	e005      	b.n	800848a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa58 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa69 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b01      	cmp	r3, #1
 800849c:	d10e      	bne.n	80084bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d107      	bne.n	80084bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f06f 0201 	mvn.w	r2, #1
 80084b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 fdac 	bl	8002014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b80      	cmp	r3, #128	; 0x80
 80084c8:	d10e      	bne.n	80084e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d4:	2b80      	cmp	r3, #128	; 0x80
 80084d6:	d107      	bne.n	80084e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fe7e 	bl	80091e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084f6:	d10e      	bne.n	8008516 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008502:	2b80      	cmp	r3, #128	; 0x80
 8008504:	d107      	bne.n	8008516 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800850e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fe71 	bl	80091f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	d10e      	bne.n	8008542 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852e:	2b40      	cmp	r3, #64	; 0x40
 8008530:	d107      	bne.n	8008542 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800853a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fa17 	bl	8008970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b20      	cmp	r3, #32
 800854e:	d10e      	bne.n	800856e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b20      	cmp	r3, #32
 800855c:	d107      	bne.n	800856e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f06f 0220 	mvn.w	r2, #32
 8008566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fe31 	bl	80091d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008592:	2302      	movs	r3, #2
 8008594:	e0ff      	b.n	8008796 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b14      	cmp	r3, #20
 80085a2:	f200 80f0 	bhi.w	8008786 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	08008601 	.word	0x08008601
 80085b0:	08008787 	.word	0x08008787
 80085b4:	08008787 	.word	0x08008787
 80085b8:	08008787 	.word	0x08008787
 80085bc:	08008641 	.word	0x08008641
 80085c0:	08008787 	.word	0x08008787
 80085c4:	08008787 	.word	0x08008787
 80085c8:	08008787 	.word	0x08008787
 80085cc:	08008683 	.word	0x08008683
 80085d0:	08008787 	.word	0x08008787
 80085d4:	08008787 	.word	0x08008787
 80085d8:	08008787 	.word	0x08008787
 80085dc:	080086c3 	.word	0x080086c3
 80085e0:	08008787 	.word	0x08008787
 80085e4:	08008787 	.word	0x08008787
 80085e8:	08008787 	.word	0x08008787
 80085ec:	08008705 	.word	0x08008705
 80085f0:	08008787 	.word	0x08008787
 80085f4:	08008787 	.word	0x08008787
 80085f8:	08008787 	.word	0x08008787
 80085fc:	08008745 	.word	0x08008745
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fa5c 	bl	8008ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0208 	orr.w	r2, r2, #8
 800861a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0204 	bic.w	r2, r2, #4
 800862a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6999      	ldr	r1, [r3, #24]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	691a      	ldr	r2, [r3, #16]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	619a      	str	r2, [r3, #24]
      break;
 800863e:	e0a5      	b.n	800878c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	4618      	mov	r0, r3
 8008648:	f000 faae 	bl	8008ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800865a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800866a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6999      	ldr	r1, [r3, #24]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	021a      	lsls	r2, r3, #8
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	619a      	str	r2, [r3, #24]
      break;
 8008680:	e084      	b.n	800878c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fb05 	bl	8008c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f042 0208 	orr.w	r2, r2, #8
 800869c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0204 	bic.w	r2, r2, #4
 80086ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69d9      	ldr	r1, [r3, #28]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	61da      	str	r2, [r3, #28]
      break;
 80086c0:	e064      	b.n	800878c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fb5b 	bl	8008d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69da      	ldr	r2, [r3, #28]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69d9      	ldr	r1, [r3, #28]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	021a      	lsls	r2, r3, #8
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	61da      	str	r2, [r3, #28]
      break;
 8008702:	e043      	b.n	800878c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fb92 	bl	8008e34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0208 	orr.w	r2, r2, #8
 800871e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0204 	bic.w	r2, r2, #4
 800872e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008742:	e023      	b.n	800878c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fbc4 	bl	8008ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800875e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800876e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	021a      	lsls	r2, r3, #8
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008784:	e002      	b.n	800878c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	75fb      	strb	r3, [r7, #23]
      break;
 800878a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008794:	7dfb      	ldrb	r3, [r7, #23]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop

080087a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_TIM_ConfigClockSource+0x1c>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e0b4      	b.n	8008926 <HAL_TIM_ConfigClockSource+0x186>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	4b56      	ldr	r3, [pc, #344]	; (8008930 <HAL_TIM_ConfigClockSource+0x190>)
 80087d8:	4013      	ands	r3, r2
 80087da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f4:	d03e      	beq.n	8008874 <HAL_TIM_ConfigClockSource+0xd4>
 80087f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fa:	f200 8087 	bhi.w	800890c <HAL_TIM_ConfigClockSource+0x16c>
 80087fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008802:	f000 8086 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x172>
 8008806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880a:	d87f      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800880c:	2b70      	cmp	r3, #112	; 0x70
 800880e:	d01a      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0xa6>
 8008810:	2b70      	cmp	r3, #112	; 0x70
 8008812:	d87b      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 8008814:	2b60      	cmp	r3, #96	; 0x60
 8008816:	d050      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x11a>
 8008818:	2b60      	cmp	r3, #96	; 0x60
 800881a:	d877      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800881c:	2b50      	cmp	r3, #80	; 0x50
 800881e:	d03c      	beq.n	800889a <HAL_TIM_ConfigClockSource+0xfa>
 8008820:	2b50      	cmp	r3, #80	; 0x50
 8008822:	d873      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 8008824:	2b40      	cmp	r3, #64	; 0x40
 8008826:	d058      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x13a>
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d86f      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800882c:	2b30      	cmp	r3, #48	; 0x30
 800882e:	d064      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008830:	2b30      	cmp	r3, #48	; 0x30
 8008832:	d86b      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 8008834:	2b20      	cmp	r3, #32
 8008836:	d060      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008838:	2b20      	cmp	r3, #32
 800883a:	d867      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d05c      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008840:	2b10      	cmp	r3, #16
 8008842:	d05a      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008844:	e062      	b.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008856:	f000 fc0d 	bl	8009074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	609a      	str	r2, [r3, #8]
      break;
 8008872:	e04f      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008884:	f000 fbf6 	bl	8009074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008896:	609a      	str	r2, [r3, #8]
      break;
 8008898:	e03c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 fb6a 	bl	8008f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2150      	movs	r1, #80	; 0x50
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fbc3 	bl	800903e <TIM_ITRx_SetConfig>
      break;
 80088b8:	e02c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088c6:	461a      	mov	r2, r3
 80088c8:	f000 fb89 	bl	8008fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2160      	movs	r1, #96	; 0x60
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fbb3 	bl	800903e <TIM_ITRx_SetConfig>
      break;
 80088d8:	e01c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e6:	461a      	mov	r2, r3
 80088e8:	f000 fb4a 	bl	8008f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2140      	movs	r1, #64	; 0x40
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fba3 	bl	800903e <TIM_ITRx_SetConfig>
      break;
 80088f8:	e00c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f000 fb9a 	bl	800903e <TIM_ITRx_SetConfig>
      break;
 800890a:	e003      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
      break;
 8008910:	e000      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	fffeff88 	.word	0xfffeff88

08008934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a40      	ldr	r2, [pc, #256]	; (8008a98 <TIM_Base_SetConfig+0x114>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d013      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d00f      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a3d      	ldr	r2, [pc, #244]	; (8008a9c <TIM_Base_SetConfig+0x118>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00b      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a3c      	ldr	r2, [pc, #240]	; (8008aa0 <TIM_Base_SetConfig+0x11c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a3b      	ldr	r2, [pc, #236]	; (8008aa4 <TIM_Base_SetConfig+0x120>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a3a      	ldr	r2, [pc, #232]	; (8008aa8 <TIM_Base_SetConfig+0x124>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d108      	bne.n	80089d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2f      	ldr	r2, [pc, #188]	; (8008a98 <TIM_Base_SetConfig+0x114>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d02b      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e4:	d027      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a2c      	ldr	r2, [pc, #176]	; (8008a9c <TIM_Base_SetConfig+0x118>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d023      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a2b      	ldr	r2, [pc, #172]	; (8008aa0 <TIM_Base_SetConfig+0x11c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d01f      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2a      	ldr	r2, [pc, #168]	; (8008aa4 <TIM_Base_SetConfig+0x120>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01b      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a29      	ldr	r2, [pc, #164]	; (8008aa8 <TIM_Base_SetConfig+0x124>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d017      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a28      	ldr	r2, [pc, #160]	; (8008aac <TIM_Base_SetConfig+0x128>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d013      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a27      	ldr	r2, [pc, #156]	; (8008ab0 <TIM_Base_SetConfig+0x12c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d00f      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a26      	ldr	r2, [pc, #152]	; (8008ab4 <TIM_Base_SetConfig+0x130>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00b      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a25      	ldr	r2, [pc, #148]	; (8008ab8 <TIM_Base_SetConfig+0x134>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d007      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a24      	ldr	r2, [pc, #144]	; (8008abc <TIM_Base_SetConfig+0x138>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d003      	beq.n	8008a36 <TIM_Base_SetConfig+0xb2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a23      	ldr	r2, [pc, #140]	; (8008ac0 <TIM_Base_SetConfig+0x13c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d108      	bne.n	8008a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <TIM_Base_SetConfig+0x114>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d003      	beq.n	8008a7c <TIM_Base_SetConfig+0xf8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a0c      	ldr	r2, [pc, #48]	; (8008aa8 <TIM_Base_SetConfig+0x124>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d103      	bne.n	8008a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	615a      	str	r2, [r3, #20]
}
 8008a8a:	bf00      	nop
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40010400 	.word	0x40010400
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40014400 	.word	0x40014400
 8008ab4:	40014800 	.word	0x40014800
 8008ab8:	40001800 	.word	0x40001800
 8008abc:	40001c00 	.word	0x40001c00
 8008ac0:	40002000 	.word	0x40002000

08008ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f023 0201 	bic.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4b2b      	ldr	r3, [pc, #172]	; (8008b9c <TIM_OC1_SetConfig+0xd8>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f023 0302 	bic.w	r3, r3, #2
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a21      	ldr	r2, [pc, #132]	; (8008ba0 <TIM_OC1_SetConfig+0xdc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_OC1_SetConfig+0x64>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a20      	ldr	r2, [pc, #128]	; (8008ba4 <TIM_OC1_SetConfig+0xe0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d10c      	bne.n	8008b42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f023 0308 	bic.w	r3, r3, #8
 8008b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f023 0304 	bic.w	r3, r3, #4
 8008b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <TIM_OC1_SetConfig+0xdc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d003      	beq.n	8008b52 <TIM_OC1_SetConfig+0x8e>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <TIM_OC1_SetConfig+0xe0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d111      	bne.n	8008b76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	621a      	str	r2, [r3, #32]
}
 8008b90:	bf00      	nop
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	fffeff8f 	.word	0xfffeff8f
 8008ba0:	40010000 	.word	0x40010000
 8008ba4:	40010400 	.word	0x40010400

08008ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0210 	bic.w	r2, r3, #16
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <TIM_OC2_SetConfig+0xe4>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f023 0320 	bic.w	r3, r3, #32
 8008bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a23      	ldr	r2, [pc, #140]	; (8008c90 <TIM_OC2_SetConfig+0xe8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d003      	beq.n	8008c10 <TIM_OC2_SetConfig+0x68>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a22      	ldr	r2, [pc, #136]	; (8008c94 <TIM_OC2_SetConfig+0xec>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10d      	bne.n	8008c2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <TIM_OC2_SetConfig+0xe8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_OC2_SetConfig+0x94>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a17      	ldr	r2, [pc, #92]	; (8008c94 <TIM_OC2_SetConfig+0xec>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d113      	bne.n	8008c64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	621a      	str	r2, [r3, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	feff8fff 	.word	0xfeff8fff
 8008c90:	40010000 	.word	0x40010000
 8008c94:	40010400 	.word	0x40010400

08008c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <TIM_OC3_SetConfig+0xe0>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a22      	ldr	r2, [pc, #136]	; (8008d7c <TIM_OC3_SetConfig+0xe4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_OC3_SetConfig+0x66>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a21      	ldr	r2, [pc, #132]	; (8008d80 <TIM_OC3_SetConfig+0xe8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d10d      	bne.n	8008d1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <TIM_OC3_SetConfig+0xe4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC3_SetConfig+0x92>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a16      	ldr	r2, [pc, #88]	; (8008d80 <TIM_OC3_SetConfig+0xe8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d113      	bne.n	8008d52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	621a      	str	r2, [r3, #32]
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	fffeff8f 	.word	0xfffeff8f
 8008d7c:	40010000 	.word	0x40010000
 8008d80:	40010400 	.word	0x40010400

08008d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4b1e      	ldr	r3, [pc, #120]	; (8008e28 <TIM_OC4_SetConfig+0xa4>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	031b      	lsls	r3, r3, #12
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a13      	ldr	r2, [pc, #76]	; (8008e2c <TIM_OC4_SetConfig+0xa8>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d003      	beq.n	8008dec <TIM_OC4_SetConfig+0x68>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a12      	ldr	r2, [pc, #72]	; (8008e30 <TIM_OC4_SetConfig+0xac>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d109      	bne.n	8008e00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	019b      	lsls	r3, r3, #6
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	feff8fff 	.word	0xfeff8fff
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40010400 	.word	0x40010400

08008e34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <TIM_OC5_SetConfig+0x98>)
 8008e60:	4013      	ands	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a12      	ldr	r2, [pc, #72]	; (8008ed0 <TIM_OC5_SetConfig+0x9c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d003      	beq.n	8008e92 <TIM_OC5_SetConfig+0x5e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a11      	ldr	r2, [pc, #68]	; (8008ed4 <TIM_OC5_SetConfig+0xa0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d109      	bne.n	8008ea6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	621a      	str	r2, [r3, #32]
}
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	fffeff8f 	.word	0xfffeff8f
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40010400 	.word	0x40010400

08008ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <TIM_OC6_SetConfig+0x9c>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	051b      	lsls	r3, r3, #20
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a13      	ldr	r2, [pc, #76]	; (8008f78 <TIM_OC6_SetConfig+0xa0>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d003      	beq.n	8008f38 <TIM_OC6_SetConfig+0x60>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a12      	ldr	r2, [pc, #72]	; (8008f7c <TIM_OC6_SetConfig+0xa4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d109      	bne.n	8008f4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	029b      	lsls	r3, r3, #10
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	621a      	str	r2, [r3, #32]
}
 8008f66:	bf00      	nop
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	feff8fff 	.word	0xfeff8fff
 8008f78:	40010000 	.word	0x40010000
 8008f7c:	40010400 	.word	0x40010400

08008f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	f023 0201 	bic.w	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f023 030a 	bic.w	r3, r3, #10
 8008fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	621a      	str	r2, [r3, #32]
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b087      	sub	sp, #28
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	f023 0210 	bic.w	r2, r3, #16
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	031b      	lsls	r3, r3, #12
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	4313      	orrs	r3, r2
 8009012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800901a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4313      	orrs	r3, r2
 800905c:	f043 0307 	orr.w	r3, r3, #7
 8009060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bf00      	nop
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800908e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	021a      	lsls	r2, r3, #8
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	431a      	orrs	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4313      	orrs	r3, r2
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	609a      	str	r2, [r3, #8]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e06d      	b.n	80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a30      	ldr	r2, [pc, #192]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d004      	beq.n	8009100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a2f      	ldr	r2, [pc, #188]	; (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d108      	bne.n	8009112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009118:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a20      	ldr	r2, [pc, #128]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d022      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913e:	d01d      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1d      	ldr	r2, [pc, #116]	; (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d018      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a1c      	ldr	r2, [pc, #112]	; (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d013      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00e      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d009      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a16      	ldr	r2, [pc, #88]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d004      	beq.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a15      	ldr	r2, [pc, #84]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d10c      	bne.n	8009196 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	4313      	orrs	r3, r2
 800918c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	40010000 	.word	0x40010000
 80091b8:	40010400 	.word	0x40010400
 80091bc:	40000400 	.word	0x40000400
 80091c0:	40000800 	.word	0x40000800
 80091c4:	40000c00 	.word	0x40000c00
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40001800 	.word	0x40001800

080091d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e040      	b.n	80092a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f9 fcf0 	bl	8002c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2224      	movs	r2, #36	; 0x24
 8009238:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0201 	bic.w	r2, r2, #1
 8009248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f8b0 	bl	80093b0 <UART_SetConfig>
 8009250:	4603      	mov	r3, r0
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e022      	b.n	80092a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb08 	bl	8009878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0201 	orr.w	r2, r2, #1
 8009296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb8f 	bl	80099bc <UART_CheckIdleState>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	; 0x28
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	4613      	mov	r3, r2
 80092b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d171      	bne.n	80093a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_UART_Transmit+0x24>
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e06a      	b.n	80093a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2221      	movs	r2, #33	; 0x21
 80092dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092de:	f7fa fc97 	bl	8003c10 <HAL_GetTick>
 80092e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	88fa      	ldrh	r2, [r7, #6]
 80092f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fc:	d108      	bne.n	8009310 <HAL_UART_Transmit+0x68>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	e003      	b.n	8009318 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009318:	e02c      	b.n	8009374 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2200      	movs	r2, #0
 8009322:	2180      	movs	r1, #128	; 0x80
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fb96 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e038      	b.n	80093a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10b      	bne.n	8009352 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009348:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	3302      	adds	r3, #2
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e007      	b.n	8009362 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	781a      	ldrb	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	3301      	adds	r3, #1
 8009360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1cc      	bne.n	800931a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2200      	movs	r2, #0
 8009388:	2140      	movs	r1, #64	; 0x40
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 fb63 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e005      	b.n	80093a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2220      	movs	r2, #32
 800939e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e000      	b.n	80093a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4ba6      	ldr	r3, [pc, #664]	; (8009674 <UART_SetConfig+0x2c4>)
 80093dc:	4013      	ands	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	6812      	ldr	r2, [r2, #0]
 80093e2:	6979      	ldr	r1, [r7, #20]
 80093e4:	430b      	orrs	r3, r1
 80093e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a94      	ldr	r2, [pc, #592]	; (8009678 <UART_SetConfig+0x2c8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d120      	bne.n	800946e <UART_SetConfig+0xbe>
 800942c:	4b93      	ldr	r3, [pc, #588]	; (800967c <UART_SetConfig+0x2cc>)
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009432:	f003 0303 	and.w	r3, r3, #3
 8009436:	2b03      	cmp	r3, #3
 8009438:	d816      	bhi.n	8009468 <UART_SetConfig+0xb8>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <UART_SetConfig+0x90>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009451 	.word	0x08009451
 8009444:	0800945d 	.word	0x0800945d
 8009448:	08009457 	.word	0x08009457
 800944c:	08009463 	.word	0x08009463
 8009450:	2301      	movs	r3, #1
 8009452:	77fb      	strb	r3, [r7, #31]
 8009454:	e150      	b.n	80096f8 <UART_SetConfig+0x348>
 8009456:	2302      	movs	r3, #2
 8009458:	77fb      	strb	r3, [r7, #31]
 800945a:	e14d      	b.n	80096f8 <UART_SetConfig+0x348>
 800945c:	2304      	movs	r3, #4
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e14a      	b.n	80096f8 <UART_SetConfig+0x348>
 8009462:	2308      	movs	r3, #8
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	e147      	b.n	80096f8 <UART_SetConfig+0x348>
 8009468:	2310      	movs	r3, #16
 800946a:	77fb      	strb	r3, [r7, #31]
 800946c:	e144      	b.n	80096f8 <UART_SetConfig+0x348>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a83      	ldr	r2, [pc, #524]	; (8009680 <UART_SetConfig+0x2d0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d132      	bne.n	80094de <UART_SetConfig+0x12e>
 8009478:	4b80      	ldr	r3, [pc, #512]	; (800967c <UART_SetConfig+0x2cc>)
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	2b0c      	cmp	r3, #12
 8009484:	d828      	bhi.n	80094d8 <UART_SetConfig+0x128>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <UART_SetConfig+0xdc>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094c1 	.word	0x080094c1
 8009490:	080094d9 	.word	0x080094d9
 8009494:	080094d9 	.word	0x080094d9
 8009498:	080094d9 	.word	0x080094d9
 800949c:	080094cd 	.word	0x080094cd
 80094a0:	080094d9 	.word	0x080094d9
 80094a4:	080094d9 	.word	0x080094d9
 80094a8:	080094d9 	.word	0x080094d9
 80094ac:	080094c7 	.word	0x080094c7
 80094b0:	080094d9 	.word	0x080094d9
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094d9 	.word	0x080094d9
 80094bc:	080094d3 	.word	0x080094d3
 80094c0:	2300      	movs	r3, #0
 80094c2:	77fb      	strb	r3, [r7, #31]
 80094c4:	e118      	b.n	80096f8 <UART_SetConfig+0x348>
 80094c6:	2302      	movs	r3, #2
 80094c8:	77fb      	strb	r3, [r7, #31]
 80094ca:	e115      	b.n	80096f8 <UART_SetConfig+0x348>
 80094cc:	2304      	movs	r3, #4
 80094ce:	77fb      	strb	r3, [r7, #31]
 80094d0:	e112      	b.n	80096f8 <UART_SetConfig+0x348>
 80094d2:	2308      	movs	r3, #8
 80094d4:	77fb      	strb	r3, [r7, #31]
 80094d6:	e10f      	b.n	80096f8 <UART_SetConfig+0x348>
 80094d8:	2310      	movs	r3, #16
 80094da:	77fb      	strb	r3, [r7, #31]
 80094dc:	e10c      	b.n	80096f8 <UART_SetConfig+0x348>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a68      	ldr	r2, [pc, #416]	; (8009684 <UART_SetConfig+0x2d4>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d120      	bne.n	800952a <UART_SetConfig+0x17a>
 80094e8:	4b64      	ldr	r3, [pc, #400]	; (800967c <UART_SetConfig+0x2cc>)
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094f2:	2b30      	cmp	r3, #48	; 0x30
 80094f4:	d013      	beq.n	800951e <UART_SetConfig+0x16e>
 80094f6:	2b30      	cmp	r3, #48	; 0x30
 80094f8:	d814      	bhi.n	8009524 <UART_SetConfig+0x174>
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d009      	beq.n	8009512 <UART_SetConfig+0x162>
 80094fe:	2b20      	cmp	r3, #32
 8009500:	d810      	bhi.n	8009524 <UART_SetConfig+0x174>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <UART_SetConfig+0x15c>
 8009506:	2b10      	cmp	r3, #16
 8009508:	d006      	beq.n	8009518 <UART_SetConfig+0x168>
 800950a:	e00b      	b.n	8009524 <UART_SetConfig+0x174>
 800950c:	2300      	movs	r3, #0
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e0f2      	b.n	80096f8 <UART_SetConfig+0x348>
 8009512:	2302      	movs	r3, #2
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e0ef      	b.n	80096f8 <UART_SetConfig+0x348>
 8009518:	2304      	movs	r3, #4
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e0ec      	b.n	80096f8 <UART_SetConfig+0x348>
 800951e:	2308      	movs	r3, #8
 8009520:	77fb      	strb	r3, [r7, #31]
 8009522:	e0e9      	b.n	80096f8 <UART_SetConfig+0x348>
 8009524:	2310      	movs	r3, #16
 8009526:	77fb      	strb	r3, [r7, #31]
 8009528:	e0e6      	b.n	80096f8 <UART_SetConfig+0x348>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a56      	ldr	r2, [pc, #344]	; (8009688 <UART_SetConfig+0x2d8>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d120      	bne.n	8009576 <UART_SetConfig+0x1c6>
 8009534:	4b51      	ldr	r3, [pc, #324]	; (800967c <UART_SetConfig+0x2cc>)
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800953e:	2bc0      	cmp	r3, #192	; 0xc0
 8009540:	d013      	beq.n	800956a <UART_SetConfig+0x1ba>
 8009542:	2bc0      	cmp	r3, #192	; 0xc0
 8009544:	d814      	bhi.n	8009570 <UART_SetConfig+0x1c0>
 8009546:	2b80      	cmp	r3, #128	; 0x80
 8009548:	d009      	beq.n	800955e <UART_SetConfig+0x1ae>
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d810      	bhi.n	8009570 <UART_SetConfig+0x1c0>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <UART_SetConfig+0x1a8>
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d006      	beq.n	8009564 <UART_SetConfig+0x1b4>
 8009556:	e00b      	b.n	8009570 <UART_SetConfig+0x1c0>
 8009558:	2300      	movs	r3, #0
 800955a:	77fb      	strb	r3, [r7, #31]
 800955c:	e0cc      	b.n	80096f8 <UART_SetConfig+0x348>
 800955e:	2302      	movs	r3, #2
 8009560:	77fb      	strb	r3, [r7, #31]
 8009562:	e0c9      	b.n	80096f8 <UART_SetConfig+0x348>
 8009564:	2304      	movs	r3, #4
 8009566:	77fb      	strb	r3, [r7, #31]
 8009568:	e0c6      	b.n	80096f8 <UART_SetConfig+0x348>
 800956a:	2308      	movs	r3, #8
 800956c:	77fb      	strb	r3, [r7, #31]
 800956e:	e0c3      	b.n	80096f8 <UART_SetConfig+0x348>
 8009570:	2310      	movs	r3, #16
 8009572:	77fb      	strb	r3, [r7, #31]
 8009574:	e0c0      	b.n	80096f8 <UART_SetConfig+0x348>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a44      	ldr	r2, [pc, #272]	; (800968c <UART_SetConfig+0x2dc>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d125      	bne.n	80095cc <UART_SetConfig+0x21c>
 8009580:	4b3e      	ldr	r3, [pc, #248]	; (800967c <UART_SetConfig+0x2cc>)
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800958a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800958e:	d017      	beq.n	80095c0 <UART_SetConfig+0x210>
 8009590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009594:	d817      	bhi.n	80095c6 <UART_SetConfig+0x216>
 8009596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800959a:	d00b      	beq.n	80095b4 <UART_SetConfig+0x204>
 800959c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a0:	d811      	bhi.n	80095c6 <UART_SetConfig+0x216>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <UART_SetConfig+0x1fe>
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095aa:	d006      	beq.n	80095ba <UART_SetConfig+0x20a>
 80095ac:	e00b      	b.n	80095c6 <UART_SetConfig+0x216>
 80095ae:	2300      	movs	r3, #0
 80095b0:	77fb      	strb	r3, [r7, #31]
 80095b2:	e0a1      	b.n	80096f8 <UART_SetConfig+0x348>
 80095b4:	2302      	movs	r3, #2
 80095b6:	77fb      	strb	r3, [r7, #31]
 80095b8:	e09e      	b.n	80096f8 <UART_SetConfig+0x348>
 80095ba:	2304      	movs	r3, #4
 80095bc:	77fb      	strb	r3, [r7, #31]
 80095be:	e09b      	b.n	80096f8 <UART_SetConfig+0x348>
 80095c0:	2308      	movs	r3, #8
 80095c2:	77fb      	strb	r3, [r7, #31]
 80095c4:	e098      	b.n	80096f8 <UART_SetConfig+0x348>
 80095c6:	2310      	movs	r3, #16
 80095c8:	77fb      	strb	r3, [r7, #31]
 80095ca:	e095      	b.n	80096f8 <UART_SetConfig+0x348>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a2f      	ldr	r2, [pc, #188]	; (8009690 <UART_SetConfig+0x2e0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d125      	bne.n	8009622 <UART_SetConfig+0x272>
 80095d6:	4b29      	ldr	r3, [pc, #164]	; (800967c <UART_SetConfig+0x2cc>)
 80095d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095e4:	d017      	beq.n	8009616 <UART_SetConfig+0x266>
 80095e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095ea:	d817      	bhi.n	800961c <UART_SetConfig+0x26c>
 80095ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095f0:	d00b      	beq.n	800960a <UART_SetConfig+0x25a>
 80095f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095f6:	d811      	bhi.n	800961c <UART_SetConfig+0x26c>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <UART_SetConfig+0x254>
 80095fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009600:	d006      	beq.n	8009610 <UART_SetConfig+0x260>
 8009602:	e00b      	b.n	800961c <UART_SetConfig+0x26c>
 8009604:	2301      	movs	r3, #1
 8009606:	77fb      	strb	r3, [r7, #31]
 8009608:	e076      	b.n	80096f8 <UART_SetConfig+0x348>
 800960a:	2302      	movs	r3, #2
 800960c:	77fb      	strb	r3, [r7, #31]
 800960e:	e073      	b.n	80096f8 <UART_SetConfig+0x348>
 8009610:	2304      	movs	r3, #4
 8009612:	77fb      	strb	r3, [r7, #31]
 8009614:	e070      	b.n	80096f8 <UART_SetConfig+0x348>
 8009616:	2308      	movs	r3, #8
 8009618:	77fb      	strb	r3, [r7, #31]
 800961a:	e06d      	b.n	80096f8 <UART_SetConfig+0x348>
 800961c:	2310      	movs	r3, #16
 800961e:	77fb      	strb	r3, [r7, #31]
 8009620:	e06a      	b.n	80096f8 <UART_SetConfig+0x348>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a1b      	ldr	r2, [pc, #108]	; (8009694 <UART_SetConfig+0x2e4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d138      	bne.n	800969e <UART_SetConfig+0x2ee>
 800962c:	4b13      	ldr	r3, [pc, #76]	; (800967c <UART_SetConfig+0x2cc>)
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009632:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800963a:	d017      	beq.n	800966c <UART_SetConfig+0x2bc>
 800963c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009640:	d82a      	bhi.n	8009698 <UART_SetConfig+0x2e8>
 8009642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009646:	d00b      	beq.n	8009660 <UART_SetConfig+0x2b0>
 8009648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964c:	d824      	bhi.n	8009698 <UART_SetConfig+0x2e8>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <UART_SetConfig+0x2aa>
 8009652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009656:	d006      	beq.n	8009666 <UART_SetConfig+0x2b6>
 8009658:	e01e      	b.n	8009698 <UART_SetConfig+0x2e8>
 800965a:	2300      	movs	r3, #0
 800965c:	77fb      	strb	r3, [r7, #31]
 800965e:	e04b      	b.n	80096f8 <UART_SetConfig+0x348>
 8009660:	2302      	movs	r3, #2
 8009662:	77fb      	strb	r3, [r7, #31]
 8009664:	e048      	b.n	80096f8 <UART_SetConfig+0x348>
 8009666:	2304      	movs	r3, #4
 8009668:	77fb      	strb	r3, [r7, #31]
 800966a:	e045      	b.n	80096f8 <UART_SetConfig+0x348>
 800966c:	2308      	movs	r3, #8
 800966e:	77fb      	strb	r3, [r7, #31]
 8009670:	e042      	b.n	80096f8 <UART_SetConfig+0x348>
 8009672:	bf00      	nop
 8009674:	efff69f3 	.word	0xefff69f3
 8009678:	40011000 	.word	0x40011000
 800967c:	40023800 	.word	0x40023800
 8009680:	40004400 	.word	0x40004400
 8009684:	40004800 	.word	0x40004800
 8009688:	40004c00 	.word	0x40004c00
 800968c:	40005000 	.word	0x40005000
 8009690:	40011400 	.word	0x40011400
 8009694:	40007800 	.word	0x40007800
 8009698:	2310      	movs	r3, #16
 800969a:	77fb      	strb	r3, [r7, #31]
 800969c:	e02c      	b.n	80096f8 <UART_SetConfig+0x348>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a72      	ldr	r2, [pc, #456]	; (800986c <UART_SetConfig+0x4bc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d125      	bne.n	80096f4 <UART_SetConfig+0x344>
 80096a8:	4b71      	ldr	r3, [pc, #452]	; (8009870 <UART_SetConfig+0x4c0>)
 80096aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80096b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80096b6:	d017      	beq.n	80096e8 <UART_SetConfig+0x338>
 80096b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80096bc:	d817      	bhi.n	80096ee <UART_SetConfig+0x33e>
 80096be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c2:	d00b      	beq.n	80096dc <UART_SetConfig+0x32c>
 80096c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c8:	d811      	bhi.n	80096ee <UART_SetConfig+0x33e>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <UART_SetConfig+0x326>
 80096ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096d2:	d006      	beq.n	80096e2 <UART_SetConfig+0x332>
 80096d4:	e00b      	b.n	80096ee <UART_SetConfig+0x33e>
 80096d6:	2300      	movs	r3, #0
 80096d8:	77fb      	strb	r3, [r7, #31]
 80096da:	e00d      	b.n	80096f8 <UART_SetConfig+0x348>
 80096dc:	2302      	movs	r3, #2
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e00a      	b.n	80096f8 <UART_SetConfig+0x348>
 80096e2:	2304      	movs	r3, #4
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e007      	b.n	80096f8 <UART_SetConfig+0x348>
 80096e8:	2308      	movs	r3, #8
 80096ea:	77fb      	strb	r3, [r7, #31]
 80096ec:	e004      	b.n	80096f8 <UART_SetConfig+0x348>
 80096ee:	2310      	movs	r3, #16
 80096f0:	77fb      	strb	r3, [r7, #31]
 80096f2:	e001      	b.n	80096f8 <UART_SetConfig+0x348>
 80096f4:	2310      	movs	r3, #16
 80096f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009700:	d15b      	bne.n	80097ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009702:	7ffb      	ldrb	r3, [r7, #31]
 8009704:	2b08      	cmp	r3, #8
 8009706:	d828      	bhi.n	800975a <UART_SetConfig+0x3aa>
 8009708:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <UART_SetConfig+0x360>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009735 	.word	0x08009735
 8009714:	0800973d 	.word	0x0800973d
 8009718:	08009745 	.word	0x08009745
 800971c:	0800975b 	.word	0x0800975b
 8009720:	0800974b 	.word	0x0800974b
 8009724:	0800975b 	.word	0x0800975b
 8009728:	0800975b 	.word	0x0800975b
 800972c:	0800975b 	.word	0x0800975b
 8009730:	08009753 	.word	0x08009753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009734:	f7fd fbb8 	bl	8006ea8 <HAL_RCC_GetPCLK1Freq>
 8009738:	61b8      	str	r0, [r7, #24]
        break;
 800973a:	e013      	b.n	8009764 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800973c:	f7fd fbc8 	bl	8006ed0 <HAL_RCC_GetPCLK2Freq>
 8009740:	61b8      	str	r0, [r7, #24]
        break;
 8009742:	e00f      	b.n	8009764 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009744:	4b4b      	ldr	r3, [pc, #300]	; (8009874 <UART_SetConfig+0x4c4>)
 8009746:	61bb      	str	r3, [r7, #24]
        break;
 8009748:	e00c      	b.n	8009764 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800974a:	f7fd fa9b 	bl	8006c84 <HAL_RCC_GetSysClockFreq>
 800974e:	61b8      	str	r0, [r7, #24]
        break;
 8009750:	e008      	b.n	8009764 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009756:	61bb      	str	r3, [r7, #24]
        break;
 8009758:	e004      	b.n	8009764 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	77bb      	strb	r3, [r7, #30]
        break;
 8009762:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d074      	beq.n	8009854 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	005a      	lsls	r2, r3, #1
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	085b      	lsrs	r3, r3, #1
 8009774:	441a      	add	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	fbb2 f3f3 	udiv	r3, r2, r3
 800977e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b0f      	cmp	r3, #15
 8009784:	d916      	bls.n	80097b4 <UART_SetConfig+0x404>
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800978c:	d212      	bcs.n	80097b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f023 030f 	bic.w	r3, r3, #15
 8009796:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	085b      	lsrs	r3, r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	89fa      	ldrh	r2, [r7, #14]
 80097b0:	60da      	str	r2, [r3, #12]
 80097b2:	e04f      	b.n	8009854 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	77bb      	strb	r3, [r7, #30]
 80097b8:	e04c      	b.n	8009854 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097ba:	7ffb      	ldrb	r3, [r7, #31]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d828      	bhi.n	8009812 <UART_SetConfig+0x462>
 80097c0:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x418>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	080097fd 	.word	0x080097fd
 80097d4:	08009813 	.word	0x08009813
 80097d8:	08009803 	.word	0x08009803
 80097dc:	08009813 	.word	0x08009813
 80097e0:	08009813 	.word	0x08009813
 80097e4:	08009813 	.word	0x08009813
 80097e8:	0800980b 	.word	0x0800980b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ec:	f7fd fb5c 	bl	8006ea8 <HAL_RCC_GetPCLK1Freq>
 80097f0:	61b8      	str	r0, [r7, #24]
        break;
 80097f2:	e013      	b.n	800981c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097f4:	f7fd fb6c 	bl	8006ed0 <HAL_RCC_GetPCLK2Freq>
 80097f8:	61b8      	str	r0, [r7, #24]
        break;
 80097fa:	e00f      	b.n	800981c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097fc:	4b1d      	ldr	r3, [pc, #116]	; (8009874 <UART_SetConfig+0x4c4>)
 80097fe:	61bb      	str	r3, [r7, #24]
        break;
 8009800:	e00c      	b.n	800981c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009802:	f7fd fa3f 	bl	8006c84 <HAL_RCC_GetSysClockFreq>
 8009806:	61b8      	str	r0, [r7, #24]
        break;
 8009808:	e008      	b.n	800981c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980e:	61bb      	str	r3, [r7, #24]
        break;
 8009810:	e004      	b.n	800981c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	77bb      	strb	r3, [r7, #30]
        break;
 800981a:	bf00      	nop
    }

    if (pclk != 0U)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d018      	beq.n	8009854 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	085a      	lsrs	r2, r3, #1
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	441a      	add	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	fbb2 f3f3 	udiv	r3, r2, r3
 8009834:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b0f      	cmp	r3, #15
 800983a:	d909      	bls.n	8009850 <UART_SetConfig+0x4a0>
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009842:	d205      	bcs.n	8009850 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	b29a      	uxth	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60da      	str	r2, [r3, #12]
 800984e:	e001      	b.n	8009854 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009860:	7fbb      	ldrb	r3, [r7, #30]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3720      	adds	r7, #32
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	40007c00 	.word	0x40007c00
 8009870:	40023800 	.word	0x40023800
 8009874:	00f42400 	.word	0x00f42400

08009878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00a      	beq.n	800992a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	430a      	orrs	r2, r1
 800994a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01a      	beq.n	800998e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009976:	d10a      	bne.n	800998e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	605a      	str	r2, [r3, #4]
  }
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af02      	add	r7, sp, #8
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099cc:	f7fa f920 	bl	8003c10 <HAL_GetTick>
 80099d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d10e      	bne.n	80099fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f831 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e027      	b.n	8009a4e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d10e      	bne.n	8009a2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f81b 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e011      	b.n	8009a4e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b09c      	sub	sp, #112	; 0x70
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4613      	mov	r3, r2
 8009a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a66:	e0a7      	b.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	f000 80a3 	beq.w	8009bb8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a72:	f7fa f8cd 	bl	8003c10 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d302      	bcc.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d13f      	bne.n	8009b08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e6      	bne.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8009adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e5      	bne.n	8009aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e068      	b.n	8009bda <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d050      	beq.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b24:	d148      	bne.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e6      	bne.n	8009b30 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3308      	adds	r3, #8
 8009b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	613b      	str	r3, [r7, #16]
   return(result);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f023 0301 	bic.w	r3, r3, #1
 8009b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b82:	623a      	str	r2, [r7, #32]
 8009b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	69f9      	ldr	r1, [r7, #28]
 8009b88:	6a3a      	ldr	r2, [r7, #32]
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e5      	bne.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e010      	b.n	8009bda <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69da      	ldr	r2, [r3, #28]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	bf0c      	ite	eq
 8009bc8:	2301      	moveq	r3, #1
 8009bca:	2300      	movne	r3, #0
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	461a      	mov	r2, r3
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	f43f af48 	beq.w	8009a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3770      	adds	r7, #112	; 0x70
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <__cvt>:
 8009be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be4:	ed2d 8b02 	vpush	{d8}
 8009be8:	eeb0 8b40 	vmov.f64	d8, d0
 8009bec:	b085      	sub	sp, #20
 8009bee:	4617      	mov	r7, r2
 8009bf0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009bf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009bf4:	ee18 2a90 	vmov	r2, s17
 8009bf8:	f025 0520 	bic.w	r5, r5, #32
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	bfb6      	itet	lt
 8009c00:	222d      	movlt	r2, #45	; 0x2d
 8009c02:	2200      	movge	r2, #0
 8009c04:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c08:	2d46      	cmp	r5, #70	; 0x46
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	d004      	beq.n	8009c1a <__cvt+0x38>
 8009c10:	2d45      	cmp	r5, #69	; 0x45
 8009c12:	d100      	bne.n	8009c16 <__cvt+0x34>
 8009c14:	3401      	adds	r4, #1
 8009c16:	2102      	movs	r1, #2
 8009c18:	e000      	b.n	8009c1c <__cvt+0x3a>
 8009c1a:	2103      	movs	r1, #3
 8009c1c:	ab03      	add	r3, sp, #12
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	ab02      	add	r3, sp, #8
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	4622      	mov	r2, r4
 8009c26:	4633      	mov	r3, r6
 8009c28:	eeb0 0b48 	vmov.f64	d0, d8
 8009c2c:	f001 f85c 	bl	800ace8 <_dtoa_r>
 8009c30:	2d47      	cmp	r5, #71	; 0x47
 8009c32:	d101      	bne.n	8009c38 <__cvt+0x56>
 8009c34:	07fb      	lsls	r3, r7, #31
 8009c36:	d51a      	bpl.n	8009c6e <__cvt+0x8c>
 8009c38:	2d46      	cmp	r5, #70	; 0x46
 8009c3a:	eb00 0204 	add.w	r2, r0, r4
 8009c3e:	d10c      	bne.n	8009c5a <__cvt+0x78>
 8009c40:	7803      	ldrb	r3, [r0, #0]
 8009c42:	2b30      	cmp	r3, #48	; 0x30
 8009c44:	d107      	bne.n	8009c56 <__cvt+0x74>
 8009c46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4e:	bf1c      	itt	ne
 8009c50:	f1c4 0401 	rsbne	r4, r4, #1
 8009c54:	6034      	strne	r4, [r6, #0]
 8009c56:	6833      	ldr	r3, [r6, #0]
 8009c58:	441a      	add	r2, r3
 8009c5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c62:	bf08      	it	eq
 8009c64:	9203      	streq	r2, [sp, #12]
 8009c66:	2130      	movs	r1, #48	; 0x30
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d307      	bcc.n	8009c7e <__cvt+0x9c>
 8009c6e:	9b03      	ldr	r3, [sp, #12]
 8009c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c72:	1a1b      	subs	r3, r3, r0
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	b005      	add	sp, #20
 8009c78:	ecbd 8b02 	vpop	{d8}
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7e:	1c5c      	adds	r4, r3, #1
 8009c80:	9403      	str	r4, [sp, #12]
 8009c82:	7019      	strb	r1, [r3, #0]
 8009c84:	e7f0      	b.n	8009c68 <__cvt+0x86>

08009c86 <__exponent>:
 8009c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	bfb8      	it	lt
 8009c8e:	4249      	neglt	r1, r1
 8009c90:	f803 2b02 	strb.w	r2, [r3], #2
 8009c94:	bfb4      	ite	lt
 8009c96:	222d      	movlt	r2, #45	; 0x2d
 8009c98:	222b      	movge	r2, #43	; 0x2b
 8009c9a:	2909      	cmp	r1, #9
 8009c9c:	7042      	strb	r2, [r0, #1]
 8009c9e:	dd2a      	ble.n	8009cf6 <__exponent+0x70>
 8009ca0:	f10d 0207 	add.w	r2, sp, #7
 8009ca4:	4617      	mov	r7, r2
 8009ca6:	260a      	movs	r6, #10
 8009ca8:	4694      	mov	ip, r2
 8009caa:	fb91 f5f6 	sdiv	r5, r1, r6
 8009cae:	fb06 1415 	mls	r4, r6, r5, r1
 8009cb2:	3430      	adds	r4, #48	; 0x30
 8009cb4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009cb8:	460c      	mov	r4, r1
 8009cba:	2c63      	cmp	r4, #99	; 0x63
 8009cbc:	f102 32ff 	add.w	r2, r2, #4294967295
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	dcf1      	bgt.n	8009ca8 <__exponent+0x22>
 8009cc4:	3130      	adds	r1, #48	; 0x30
 8009cc6:	f1ac 0402 	sub.w	r4, ip, #2
 8009cca:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009cce:	1c41      	adds	r1, r0, #1
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	42ba      	cmp	r2, r7
 8009cd4:	d30a      	bcc.n	8009cec <__exponent+0x66>
 8009cd6:	f10d 0209 	add.w	r2, sp, #9
 8009cda:	eba2 020c 	sub.w	r2, r2, ip
 8009cde:	42bc      	cmp	r4, r7
 8009ce0:	bf88      	it	hi
 8009ce2:	2200      	movhi	r2, #0
 8009ce4:	4413      	add	r3, r2
 8009ce6:	1a18      	subs	r0, r3, r0
 8009ce8:	b003      	add	sp, #12
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009cf0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009cf4:	e7ed      	b.n	8009cd2 <__exponent+0x4c>
 8009cf6:	2330      	movs	r3, #48	; 0x30
 8009cf8:	3130      	adds	r1, #48	; 0x30
 8009cfa:	7083      	strb	r3, [r0, #2]
 8009cfc:	70c1      	strb	r1, [r0, #3]
 8009cfe:	1d03      	adds	r3, r0, #4
 8009d00:	e7f1      	b.n	8009ce6 <__exponent+0x60>
 8009d02:	0000      	movs	r0, r0
 8009d04:	0000      	movs	r0, r0
	...

08009d08 <_printf_float>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	b08b      	sub	sp, #44	; 0x2c
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009d14:	4616      	mov	r6, r2
 8009d16:	461f      	mov	r7, r3
 8009d18:	4605      	mov	r5, r0
 8009d1a:	f000 fed1 	bl	800aac0 <_localeconv_r>
 8009d1e:	f8d0 b000 	ldr.w	fp, [r0]
 8009d22:	4658      	mov	r0, fp
 8009d24:	f7f6 fadc 	bl	80002e0 <strlen>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9308      	str	r3, [sp, #32]
 8009d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d34:	6822      	ldr	r2, [r4, #0]
 8009d36:	3307      	adds	r3, #7
 8009d38:	f023 0307 	bic.w	r3, r3, #7
 8009d3c:	f103 0108 	add.w	r1, r3, #8
 8009d40:	f8c8 1000 	str.w	r1, [r8]
 8009d44:	ed93 0b00 	vldr	d0, [r3]
 8009d48:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009fa8 <_printf_float+0x2a0>
 8009d4c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009d50:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d58:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009d5c:	4682      	mov	sl, r0
 8009d5e:	dd24      	ble.n	8009daa <_printf_float+0xa2>
 8009d60:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d68:	d502      	bpl.n	8009d70 <_printf_float+0x68>
 8009d6a:	232d      	movs	r3, #45	; 0x2d
 8009d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d70:	498f      	ldr	r1, [pc, #572]	; (8009fb0 <_printf_float+0x2a8>)
 8009d72:	4b90      	ldr	r3, [pc, #576]	; (8009fb4 <_printf_float+0x2ac>)
 8009d74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d78:	bf94      	ite	ls
 8009d7a:	4688      	movls	r8, r1
 8009d7c:	4698      	movhi	r8, r3
 8009d7e:	2303      	movs	r3, #3
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	f022 0204 	bic.w	r2, r2, #4
 8009d86:	2300      	movs	r3, #0
 8009d88:	6022      	str	r2, [r4, #0]
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	9700      	str	r7, [sp, #0]
 8009d8e:	4633      	mov	r3, r6
 8009d90:	aa09      	add	r2, sp, #36	; 0x24
 8009d92:	4621      	mov	r1, r4
 8009d94:	4628      	mov	r0, r5
 8009d96:	f000 f9d1 	bl	800a13c <_printf_common>
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f040 808a 	bne.w	8009eb4 <_printf_float+0x1ac>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	b00b      	add	sp, #44	; 0x2c
 8009da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009daa:	eeb4 0b40 	vcmp.f64	d0, d0
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	d709      	bvc.n	8009dc8 <_printf_float+0xc0>
 8009db4:	ee10 3a90 	vmov	r3, s1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfbc      	itt	lt
 8009dbc:	232d      	movlt	r3, #45	; 0x2d
 8009dbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dc2:	497d      	ldr	r1, [pc, #500]	; (8009fb8 <_printf_float+0x2b0>)
 8009dc4:	4b7d      	ldr	r3, [pc, #500]	; (8009fbc <_printf_float+0x2b4>)
 8009dc6:	e7d5      	b.n	8009d74 <_printf_float+0x6c>
 8009dc8:	6863      	ldr	r3, [r4, #4]
 8009dca:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009dce:	9104      	str	r1, [sp, #16]
 8009dd0:	1c59      	adds	r1, r3, #1
 8009dd2:	d13c      	bne.n	8009e4e <_printf_float+0x146>
 8009dd4:	2306      	movs	r3, #6
 8009dd6:	6063      	str	r3, [r4, #4]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	9303      	str	r3, [sp, #12]
 8009ddc:	ab08      	add	r3, sp, #32
 8009dde:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009de2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009de6:	ab07      	add	r3, sp, #28
 8009de8:	6861      	ldr	r1, [r4, #4]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	f10d 031b 	add.w	r3, sp, #27
 8009df2:	4628      	mov	r0, r5
 8009df4:	f7ff fef5 	bl	8009be2 <__cvt>
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	9907      	ldr	r1, [sp, #28]
 8009dfc:	2b47      	cmp	r3, #71	; 0x47
 8009dfe:	4680      	mov	r8, r0
 8009e00:	d108      	bne.n	8009e14 <_printf_float+0x10c>
 8009e02:	1cc8      	adds	r0, r1, #3
 8009e04:	db02      	blt.n	8009e0c <_printf_float+0x104>
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	dd41      	ble.n	8009e90 <_printf_float+0x188>
 8009e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8009e10:	fa5f f989 	uxtb.w	r9, r9
 8009e14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e18:	d820      	bhi.n	8009e5c <_printf_float+0x154>
 8009e1a:	3901      	subs	r1, #1
 8009e1c:	464a      	mov	r2, r9
 8009e1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e22:	9107      	str	r1, [sp, #28]
 8009e24:	f7ff ff2f 	bl	8009c86 <__exponent>
 8009e28:	9a08      	ldr	r2, [sp, #32]
 8009e2a:	9004      	str	r0, [sp, #16]
 8009e2c:	1813      	adds	r3, r2, r0
 8009e2e:	2a01      	cmp	r2, #1
 8009e30:	6123      	str	r3, [r4, #16]
 8009e32:	dc02      	bgt.n	8009e3a <_printf_float+0x132>
 8009e34:	6822      	ldr	r2, [r4, #0]
 8009e36:	07d2      	lsls	r2, r2, #31
 8009e38:	d501      	bpl.n	8009e3e <_printf_float+0x136>
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	6123      	str	r3, [r4, #16]
 8009e3e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0a2      	beq.n	8009d8c <_printf_float+0x84>
 8009e46:	232d      	movs	r3, #45	; 0x2d
 8009e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e4c:	e79e      	b.n	8009d8c <_printf_float+0x84>
 8009e4e:	9904      	ldr	r1, [sp, #16]
 8009e50:	2947      	cmp	r1, #71	; 0x47
 8009e52:	d1c1      	bne.n	8009dd8 <_printf_float+0xd0>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1bf      	bne.n	8009dd8 <_printf_float+0xd0>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7bc      	b.n	8009dd6 <_printf_float+0xce>
 8009e5c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e60:	d118      	bne.n	8009e94 <_printf_float+0x18c>
 8009e62:	2900      	cmp	r1, #0
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	dd0b      	ble.n	8009e80 <_printf_float+0x178>
 8009e68:	6121      	str	r1, [r4, #16]
 8009e6a:	b913      	cbnz	r3, 8009e72 <_printf_float+0x16a>
 8009e6c:	6822      	ldr	r2, [r4, #0]
 8009e6e:	07d0      	lsls	r0, r2, #31
 8009e70:	d502      	bpl.n	8009e78 <_printf_float+0x170>
 8009e72:	3301      	adds	r3, #1
 8009e74:	440b      	add	r3, r1
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	e7de      	b.n	8009e3e <_printf_float+0x136>
 8009e80:	b913      	cbnz	r3, 8009e88 <_printf_float+0x180>
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	07d2      	lsls	r2, r2, #31
 8009e86:	d501      	bpl.n	8009e8c <_printf_float+0x184>
 8009e88:	3302      	adds	r3, #2
 8009e8a:	e7f4      	b.n	8009e76 <_printf_float+0x16e>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e7f2      	b.n	8009e76 <_printf_float+0x16e>
 8009e90:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009e94:	9b08      	ldr	r3, [sp, #32]
 8009e96:	4299      	cmp	r1, r3
 8009e98:	db05      	blt.n	8009ea6 <_printf_float+0x19e>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	6121      	str	r1, [r4, #16]
 8009e9e:	07d8      	lsls	r0, r3, #31
 8009ea0:	d5ea      	bpl.n	8009e78 <_printf_float+0x170>
 8009ea2:	1c4b      	adds	r3, r1, #1
 8009ea4:	e7e7      	b.n	8009e76 <_printf_float+0x16e>
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	bfd4      	ite	le
 8009eaa:	f1c1 0202 	rsble	r2, r1, #2
 8009eae:	2201      	movgt	r2, #1
 8009eb0:	4413      	add	r3, r2
 8009eb2:	e7e0      	b.n	8009e76 <_printf_float+0x16e>
 8009eb4:	6823      	ldr	r3, [r4, #0]
 8009eb6:	055a      	lsls	r2, r3, #21
 8009eb8:	d407      	bmi.n	8009eca <_printf_float+0x1c2>
 8009eba:	6923      	ldr	r3, [r4, #16]
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d12a      	bne.n	8009f1e <_printf_float+0x216>
 8009ec8:	e76a      	b.n	8009da0 <_printf_float+0x98>
 8009eca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ece:	f240 80e0 	bls.w	800a092 <_printf_float+0x38a>
 8009ed2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ed6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ede:	d133      	bne.n	8009f48 <_printf_float+0x240>
 8009ee0:	4a37      	ldr	r2, [pc, #220]	; (8009fc0 <_printf_float+0x2b8>)
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	f43f af58 	beq.w	8009da0 <_printf_float+0x98>
 8009ef0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	db02      	blt.n	8009efe <_printf_float+0x1f6>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	07d8      	lsls	r0, r3, #31
 8009efc:	d50f      	bpl.n	8009f1e <_printf_float+0x216>
 8009efe:	4653      	mov	r3, sl
 8009f00:	465a      	mov	r2, fp
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f43f af49 	beq.w	8009da0 <_printf_float+0x98>
 8009f0e:	f04f 0800 	mov.w	r8, #0
 8009f12:	f104 091a 	add.w	r9, r4, #26
 8009f16:	9b08      	ldr	r3, [sp, #32]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	4543      	cmp	r3, r8
 8009f1c:	dc09      	bgt.n	8009f32 <_printf_float+0x22a>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	079b      	lsls	r3, r3, #30
 8009f22:	f100 8106 	bmi.w	800a132 <_printf_float+0x42a>
 8009f26:	68e0      	ldr	r0, [r4, #12]
 8009f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2a:	4298      	cmp	r0, r3
 8009f2c:	bfb8      	it	lt
 8009f2e:	4618      	movlt	r0, r3
 8009f30:	e738      	b.n	8009da4 <_printf_float+0x9c>
 8009f32:	2301      	movs	r3, #1
 8009f34:	464a      	mov	r2, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f af2f 	beq.w	8009da0 <_printf_float+0x98>
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	e7e6      	b.n	8009f16 <_printf_float+0x20e>
 8009f48:	9b07      	ldr	r3, [sp, #28]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dc3a      	bgt.n	8009fc4 <_printf_float+0x2bc>
 8009f4e:	4a1c      	ldr	r2, [pc, #112]	; (8009fc0 <_printf_float+0x2b8>)
 8009f50:	2301      	movs	r3, #1
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f af21 	beq.w	8009da0 <_printf_float+0x98>
 8009f5e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	d102      	bne.n	8009f6c <_printf_float+0x264>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	07d9      	lsls	r1, r3, #31
 8009f6a:	d5d8      	bpl.n	8009f1e <_printf_float+0x216>
 8009f6c:	4653      	mov	r3, sl
 8009f6e:	465a      	mov	r2, fp
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f af12 	beq.w	8009da0 <_printf_float+0x98>
 8009f7c:	f04f 0900 	mov.w	r9, #0
 8009f80:	f104 0a1a 	add.w	sl, r4, #26
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	425b      	negs	r3, r3
 8009f88:	454b      	cmp	r3, r9
 8009f8a:	dc01      	bgt.n	8009f90 <_printf_float+0x288>
 8009f8c:	9b08      	ldr	r3, [sp, #32]
 8009f8e:	e795      	b.n	8009ebc <_printf_float+0x1b4>
 8009f90:	2301      	movs	r3, #1
 8009f92:	4652      	mov	r2, sl
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f af00 	beq.w	8009da0 <_printf_float+0x98>
 8009fa0:	f109 0901 	add.w	r9, r9, #1
 8009fa4:	e7ee      	b.n	8009f84 <_printf_float+0x27c>
 8009fa6:	bf00      	nop
 8009fa8:	ffffffff 	.word	0xffffffff
 8009fac:	7fefffff 	.word	0x7fefffff
 8009fb0:	08018eb0 	.word	0x08018eb0
 8009fb4:	08018eb4 	.word	0x08018eb4
 8009fb8:	08018eb8 	.word	0x08018eb8
 8009fbc:	08018ebc 	.word	0x08018ebc
 8009fc0:	08018ec0 	.word	0x08018ec0
 8009fc4:	9a08      	ldr	r2, [sp, #32]
 8009fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	bfa8      	it	ge
 8009fcc:	461a      	movge	r2, r3
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	4691      	mov	r9, r2
 8009fd2:	dc38      	bgt.n	800a046 <_printf_float+0x33e>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9305      	str	r3, [sp, #20]
 8009fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fdc:	f104 021a 	add.w	r2, r4, #26
 8009fe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fe2:	9905      	ldr	r1, [sp, #20]
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	eba3 0309 	sub.w	r3, r3, r9
 8009fea:	428b      	cmp	r3, r1
 8009fec:	dc33      	bgt.n	800a056 <_printf_float+0x34e>
 8009fee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	db3c      	blt.n	800a070 <_printf_float+0x368>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	07da      	lsls	r2, r3, #31
 8009ffa:	d439      	bmi.n	800a070 <_printf_float+0x368>
 8009ffc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a000:	eba2 0903 	sub.w	r9, r2, r3
 800a004:	9b04      	ldr	r3, [sp, #16]
 800a006:	1ad2      	subs	r2, r2, r3
 800a008:	4591      	cmp	r9, r2
 800a00a:	bfa8      	it	ge
 800a00c:	4691      	movge	r9, r2
 800a00e:	f1b9 0f00 	cmp.w	r9, #0
 800a012:	dc35      	bgt.n	800a080 <_printf_float+0x378>
 800a014:	f04f 0800 	mov.w	r8, #0
 800a018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a01c:	f104 0a1a 	add.w	sl, r4, #26
 800a020:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	eba3 0309 	sub.w	r3, r3, r9
 800a02a:	4543      	cmp	r3, r8
 800a02c:	f77f af77 	ble.w	8009f1e <_printf_float+0x216>
 800a030:	2301      	movs	r3, #1
 800a032:	4652      	mov	r2, sl
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f aeb0 	beq.w	8009da0 <_printf_float+0x98>
 800a040:	f108 0801 	add.w	r8, r8, #1
 800a044:	e7ec      	b.n	800a020 <_printf_float+0x318>
 800a046:	4613      	mov	r3, r2
 800a048:	4631      	mov	r1, r6
 800a04a:	4642      	mov	r2, r8
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	d1bf      	bne.n	8009fd4 <_printf_float+0x2cc>
 800a054:	e6a4      	b.n	8009da0 <_printf_float+0x98>
 800a056:	2301      	movs	r3, #1
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	9204      	str	r2, [sp, #16]
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	f43f ae9d 	beq.w	8009da0 <_printf_float+0x98>
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	9a04      	ldr	r2, [sp, #16]
 800a06a:	3301      	adds	r3, #1
 800a06c:	9305      	str	r3, [sp, #20]
 800a06e:	e7b7      	b.n	8009fe0 <_printf_float+0x2d8>
 800a070:	4653      	mov	r3, sl
 800a072:	465a      	mov	r2, fp
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	47b8      	blx	r7
 800a07a:	3001      	adds	r0, #1
 800a07c:	d1be      	bne.n	8009ffc <_printf_float+0x2f4>
 800a07e:	e68f      	b.n	8009da0 <_printf_float+0x98>
 800a080:	9a04      	ldr	r2, [sp, #16]
 800a082:	464b      	mov	r3, r9
 800a084:	4442      	add	r2, r8
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	d1c1      	bne.n	800a014 <_printf_float+0x30c>
 800a090:	e686      	b.n	8009da0 <_printf_float+0x98>
 800a092:	9a08      	ldr	r2, [sp, #32]
 800a094:	2a01      	cmp	r2, #1
 800a096:	dc01      	bgt.n	800a09c <_printf_float+0x394>
 800a098:	07db      	lsls	r3, r3, #31
 800a09a:	d537      	bpl.n	800a10c <_printf_float+0x404>
 800a09c:	2301      	movs	r3, #1
 800a09e:	4642      	mov	r2, r8
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f43f ae7a 	beq.w	8009da0 <_printf_float+0x98>
 800a0ac:	4653      	mov	r3, sl
 800a0ae:	465a      	mov	r2, fp
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b8      	blx	r7
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f43f ae72 	beq.w	8009da0 <_printf_float+0x98>
 800a0bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a0c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c8:	9b08      	ldr	r3, [sp, #32]
 800a0ca:	d01a      	beq.n	800a102 <_printf_float+0x3fa>
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	f108 0201 	add.w	r2, r8, #1
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	47b8      	blx	r7
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d10e      	bne.n	800a0fa <_printf_float+0x3f2>
 800a0dc:	e660      	b.n	8009da0 <_printf_float+0x98>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	464a      	mov	r2, r9
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b8      	blx	r7
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	f43f ae59 	beq.w	8009da0 <_printf_float+0x98>
 800a0ee:	f108 0801 	add.w	r8, r8, #1
 800a0f2:	9b08      	ldr	r3, [sp, #32]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	4543      	cmp	r3, r8
 800a0f8:	dcf1      	bgt.n	800a0de <_printf_float+0x3d6>
 800a0fa:	9b04      	ldr	r3, [sp, #16]
 800a0fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a100:	e6dd      	b.n	8009ebe <_printf_float+0x1b6>
 800a102:	f04f 0800 	mov.w	r8, #0
 800a106:	f104 091a 	add.w	r9, r4, #26
 800a10a:	e7f2      	b.n	800a0f2 <_printf_float+0x3ea>
 800a10c:	2301      	movs	r3, #1
 800a10e:	4642      	mov	r2, r8
 800a110:	e7df      	b.n	800a0d2 <_printf_float+0x3ca>
 800a112:	2301      	movs	r3, #1
 800a114:	464a      	mov	r2, r9
 800a116:	4631      	mov	r1, r6
 800a118:	4628      	mov	r0, r5
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	f43f ae3f 	beq.w	8009da0 <_printf_float+0x98>
 800a122:	f108 0801 	add.w	r8, r8, #1
 800a126:	68e3      	ldr	r3, [r4, #12]
 800a128:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a12a:	1a5b      	subs	r3, r3, r1
 800a12c:	4543      	cmp	r3, r8
 800a12e:	dcf0      	bgt.n	800a112 <_printf_float+0x40a>
 800a130:	e6f9      	b.n	8009f26 <_printf_float+0x21e>
 800a132:	f04f 0800 	mov.w	r8, #0
 800a136:	f104 0919 	add.w	r9, r4, #25
 800a13a:	e7f4      	b.n	800a126 <_printf_float+0x41e>

0800a13c <_printf_common>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	4616      	mov	r6, r2
 800a142:	4699      	mov	r9, r3
 800a144:	688a      	ldr	r2, [r1, #8]
 800a146:	690b      	ldr	r3, [r1, #16]
 800a148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a14c:	4293      	cmp	r3, r2
 800a14e:	bfb8      	it	lt
 800a150:	4613      	movlt	r3, r2
 800a152:	6033      	str	r3, [r6, #0]
 800a154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a158:	4607      	mov	r7, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	b10a      	cbz	r2, 800a162 <_printf_common+0x26>
 800a15e:	3301      	adds	r3, #1
 800a160:	6033      	str	r3, [r6, #0]
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	0699      	lsls	r1, r3, #26
 800a166:	bf42      	ittt	mi
 800a168:	6833      	ldrmi	r3, [r6, #0]
 800a16a:	3302      	addmi	r3, #2
 800a16c:	6033      	strmi	r3, [r6, #0]
 800a16e:	6825      	ldr	r5, [r4, #0]
 800a170:	f015 0506 	ands.w	r5, r5, #6
 800a174:	d106      	bne.n	800a184 <_printf_common+0x48>
 800a176:	f104 0a19 	add.w	sl, r4, #25
 800a17a:	68e3      	ldr	r3, [r4, #12]
 800a17c:	6832      	ldr	r2, [r6, #0]
 800a17e:	1a9b      	subs	r3, r3, r2
 800a180:	42ab      	cmp	r3, r5
 800a182:	dc26      	bgt.n	800a1d2 <_printf_common+0x96>
 800a184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a188:	1e13      	subs	r3, r2, #0
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	bf18      	it	ne
 800a18e:	2301      	movne	r3, #1
 800a190:	0692      	lsls	r2, r2, #26
 800a192:	d42b      	bmi.n	800a1ec <_printf_common+0xb0>
 800a194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a198:	4649      	mov	r1, r9
 800a19a:	4638      	mov	r0, r7
 800a19c:	47c0      	blx	r8
 800a19e:	3001      	adds	r0, #1
 800a1a0:	d01e      	beq.n	800a1e0 <_printf_common+0xa4>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	6922      	ldr	r2, [r4, #16]
 800a1a6:	f003 0306 	and.w	r3, r3, #6
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	bf02      	ittt	eq
 800a1ae:	68e5      	ldreq	r5, [r4, #12]
 800a1b0:	6833      	ldreq	r3, [r6, #0]
 800a1b2:	1aed      	subeq	r5, r5, r3
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	bf0c      	ite	eq
 800a1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1bc:	2500      	movne	r5, #0
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	bfc4      	itt	gt
 800a1c2:	1a9b      	subgt	r3, r3, r2
 800a1c4:	18ed      	addgt	r5, r5, r3
 800a1c6:	2600      	movs	r6, #0
 800a1c8:	341a      	adds	r4, #26
 800a1ca:	42b5      	cmp	r5, r6
 800a1cc:	d11a      	bne.n	800a204 <_printf_common+0xc8>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e008      	b.n	800a1e4 <_printf_common+0xa8>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4652      	mov	r2, sl
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4638      	mov	r0, r7
 800a1da:	47c0      	blx	r8
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d103      	bne.n	800a1e8 <_printf_common+0xac>
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e8:	3501      	adds	r5, #1
 800a1ea:	e7c6      	b.n	800a17a <_printf_common+0x3e>
 800a1ec:	18e1      	adds	r1, r4, r3
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	2030      	movs	r0, #48	; 0x30
 800a1f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1f6:	4422      	add	r2, r4
 800a1f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a200:	3302      	adds	r3, #2
 800a202:	e7c7      	b.n	800a194 <_printf_common+0x58>
 800a204:	2301      	movs	r3, #1
 800a206:	4622      	mov	r2, r4
 800a208:	4649      	mov	r1, r9
 800a20a:	4638      	mov	r0, r7
 800a20c:	47c0      	blx	r8
 800a20e:	3001      	adds	r0, #1
 800a210:	d0e6      	beq.n	800a1e0 <_printf_common+0xa4>
 800a212:	3601      	adds	r6, #1
 800a214:	e7d9      	b.n	800a1ca <_printf_common+0x8e>
	...

0800a218 <_printf_i>:
 800a218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a21c:	7e0f      	ldrb	r7, [r1, #24]
 800a21e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a220:	2f78      	cmp	r7, #120	; 0x78
 800a222:	4691      	mov	r9, r2
 800a224:	4680      	mov	r8, r0
 800a226:	460c      	mov	r4, r1
 800a228:	469a      	mov	sl, r3
 800a22a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a22e:	d807      	bhi.n	800a240 <_printf_i+0x28>
 800a230:	2f62      	cmp	r7, #98	; 0x62
 800a232:	d80a      	bhi.n	800a24a <_printf_i+0x32>
 800a234:	2f00      	cmp	r7, #0
 800a236:	f000 80d4 	beq.w	800a3e2 <_printf_i+0x1ca>
 800a23a:	2f58      	cmp	r7, #88	; 0x58
 800a23c:	f000 80c0 	beq.w	800a3c0 <_printf_i+0x1a8>
 800a240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a248:	e03a      	b.n	800a2c0 <_printf_i+0xa8>
 800a24a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a24e:	2b15      	cmp	r3, #21
 800a250:	d8f6      	bhi.n	800a240 <_printf_i+0x28>
 800a252:	a101      	add	r1, pc, #4	; (adr r1, 800a258 <_printf_i+0x40>)
 800a254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a258:	0800a2b1 	.word	0x0800a2b1
 800a25c:	0800a2c5 	.word	0x0800a2c5
 800a260:	0800a241 	.word	0x0800a241
 800a264:	0800a241 	.word	0x0800a241
 800a268:	0800a241 	.word	0x0800a241
 800a26c:	0800a241 	.word	0x0800a241
 800a270:	0800a2c5 	.word	0x0800a2c5
 800a274:	0800a241 	.word	0x0800a241
 800a278:	0800a241 	.word	0x0800a241
 800a27c:	0800a241 	.word	0x0800a241
 800a280:	0800a241 	.word	0x0800a241
 800a284:	0800a3c9 	.word	0x0800a3c9
 800a288:	0800a2f1 	.word	0x0800a2f1
 800a28c:	0800a383 	.word	0x0800a383
 800a290:	0800a241 	.word	0x0800a241
 800a294:	0800a241 	.word	0x0800a241
 800a298:	0800a3eb 	.word	0x0800a3eb
 800a29c:	0800a241 	.word	0x0800a241
 800a2a0:	0800a2f1 	.word	0x0800a2f1
 800a2a4:	0800a241 	.word	0x0800a241
 800a2a8:	0800a241 	.word	0x0800a241
 800a2ac:	0800a38b 	.word	0x0800a38b
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	1d1a      	adds	r2, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	602a      	str	r2, [r5, #0]
 800a2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e09f      	b.n	800a404 <_printf_i+0x1ec>
 800a2c4:	6820      	ldr	r0, [r4, #0]
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	0607      	lsls	r7, r0, #24
 800a2ca:	f103 0104 	add.w	r1, r3, #4
 800a2ce:	6029      	str	r1, [r5, #0]
 800a2d0:	d501      	bpl.n	800a2d6 <_printf_i+0xbe>
 800a2d2:	681e      	ldr	r6, [r3, #0]
 800a2d4:	e003      	b.n	800a2de <_printf_i+0xc6>
 800a2d6:	0646      	lsls	r6, r0, #25
 800a2d8:	d5fb      	bpl.n	800a2d2 <_printf_i+0xba>
 800a2da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2de:	2e00      	cmp	r6, #0
 800a2e0:	da03      	bge.n	800a2ea <_printf_i+0xd2>
 800a2e2:	232d      	movs	r3, #45	; 0x2d
 800a2e4:	4276      	negs	r6, r6
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ea:	485a      	ldr	r0, [pc, #360]	; (800a454 <_printf_i+0x23c>)
 800a2ec:	230a      	movs	r3, #10
 800a2ee:	e012      	b.n	800a316 <_printf_i+0xfe>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	6820      	ldr	r0, [r4, #0]
 800a2f4:	1d19      	adds	r1, r3, #4
 800a2f6:	6029      	str	r1, [r5, #0]
 800a2f8:	0605      	lsls	r5, r0, #24
 800a2fa:	d501      	bpl.n	800a300 <_printf_i+0xe8>
 800a2fc:	681e      	ldr	r6, [r3, #0]
 800a2fe:	e002      	b.n	800a306 <_printf_i+0xee>
 800a300:	0641      	lsls	r1, r0, #25
 800a302:	d5fb      	bpl.n	800a2fc <_printf_i+0xe4>
 800a304:	881e      	ldrh	r6, [r3, #0]
 800a306:	4853      	ldr	r0, [pc, #332]	; (800a454 <_printf_i+0x23c>)
 800a308:	2f6f      	cmp	r7, #111	; 0x6f
 800a30a:	bf0c      	ite	eq
 800a30c:	2308      	moveq	r3, #8
 800a30e:	230a      	movne	r3, #10
 800a310:	2100      	movs	r1, #0
 800a312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a316:	6865      	ldr	r5, [r4, #4]
 800a318:	60a5      	str	r5, [r4, #8]
 800a31a:	2d00      	cmp	r5, #0
 800a31c:	bfa2      	ittt	ge
 800a31e:	6821      	ldrge	r1, [r4, #0]
 800a320:	f021 0104 	bicge.w	r1, r1, #4
 800a324:	6021      	strge	r1, [r4, #0]
 800a326:	b90e      	cbnz	r6, 800a32c <_printf_i+0x114>
 800a328:	2d00      	cmp	r5, #0
 800a32a:	d04b      	beq.n	800a3c4 <_printf_i+0x1ac>
 800a32c:	4615      	mov	r5, r2
 800a32e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a332:	fb03 6711 	mls	r7, r3, r1, r6
 800a336:	5dc7      	ldrb	r7, [r0, r7]
 800a338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a33c:	4637      	mov	r7, r6
 800a33e:	42bb      	cmp	r3, r7
 800a340:	460e      	mov	r6, r1
 800a342:	d9f4      	bls.n	800a32e <_printf_i+0x116>
 800a344:	2b08      	cmp	r3, #8
 800a346:	d10b      	bne.n	800a360 <_printf_i+0x148>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	07de      	lsls	r6, r3, #31
 800a34c:	d508      	bpl.n	800a360 <_printf_i+0x148>
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	6861      	ldr	r1, [r4, #4]
 800a352:	4299      	cmp	r1, r3
 800a354:	bfde      	ittt	le
 800a356:	2330      	movle	r3, #48	; 0x30
 800a358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a35c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a360:	1b52      	subs	r2, r2, r5
 800a362:	6122      	str	r2, [r4, #16]
 800a364:	f8cd a000 	str.w	sl, [sp]
 800a368:	464b      	mov	r3, r9
 800a36a:	aa03      	add	r2, sp, #12
 800a36c:	4621      	mov	r1, r4
 800a36e:	4640      	mov	r0, r8
 800a370:	f7ff fee4 	bl	800a13c <_printf_common>
 800a374:	3001      	adds	r0, #1
 800a376:	d14a      	bne.n	800a40e <_printf_i+0x1f6>
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	b004      	add	sp, #16
 800a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	f043 0320 	orr.w	r3, r3, #32
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	4833      	ldr	r0, [pc, #204]	; (800a458 <_printf_i+0x240>)
 800a38c:	2778      	movs	r7, #120	; 0x78
 800a38e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	6829      	ldr	r1, [r5, #0]
 800a396:	061f      	lsls	r7, r3, #24
 800a398:	f851 6b04 	ldr.w	r6, [r1], #4
 800a39c:	d402      	bmi.n	800a3a4 <_printf_i+0x18c>
 800a39e:	065f      	lsls	r7, r3, #25
 800a3a0:	bf48      	it	mi
 800a3a2:	b2b6      	uxthmi	r6, r6
 800a3a4:	07df      	lsls	r7, r3, #31
 800a3a6:	bf48      	it	mi
 800a3a8:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ac:	6029      	str	r1, [r5, #0]
 800a3ae:	bf48      	it	mi
 800a3b0:	6023      	strmi	r3, [r4, #0]
 800a3b2:	b91e      	cbnz	r6, 800a3bc <_printf_i+0x1a4>
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	f023 0320 	bic.w	r3, r3, #32
 800a3ba:	6023      	str	r3, [r4, #0]
 800a3bc:	2310      	movs	r3, #16
 800a3be:	e7a7      	b.n	800a310 <_printf_i+0xf8>
 800a3c0:	4824      	ldr	r0, [pc, #144]	; (800a454 <_printf_i+0x23c>)
 800a3c2:	e7e4      	b.n	800a38e <_printf_i+0x176>
 800a3c4:	4615      	mov	r5, r2
 800a3c6:	e7bd      	b.n	800a344 <_printf_i+0x12c>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	6826      	ldr	r6, [r4, #0]
 800a3cc:	6961      	ldr	r1, [r4, #20]
 800a3ce:	1d18      	adds	r0, r3, #4
 800a3d0:	6028      	str	r0, [r5, #0]
 800a3d2:	0635      	lsls	r5, r6, #24
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	d501      	bpl.n	800a3dc <_printf_i+0x1c4>
 800a3d8:	6019      	str	r1, [r3, #0]
 800a3da:	e002      	b.n	800a3e2 <_printf_i+0x1ca>
 800a3dc:	0670      	lsls	r0, r6, #25
 800a3de:	d5fb      	bpl.n	800a3d8 <_printf_i+0x1c0>
 800a3e0:	8019      	strh	r1, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	4615      	mov	r5, r2
 800a3e8:	e7bc      	b.n	800a364 <_printf_i+0x14c>
 800a3ea:	682b      	ldr	r3, [r5, #0]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	602a      	str	r2, [r5, #0]
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	6862      	ldr	r2, [r4, #4]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f7f5 ff22 	bl	8000240 <memchr>
 800a3fc:	b108      	cbz	r0, 800a402 <_printf_i+0x1ea>
 800a3fe:	1b40      	subs	r0, r0, r5
 800a400:	6060      	str	r0, [r4, #4]
 800a402:	6863      	ldr	r3, [r4, #4]
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	2300      	movs	r3, #0
 800a408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a40c:	e7aa      	b.n	800a364 <_printf_i+0x14c>
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	462a      	mov	r2, r5
 800a412:	4649      	mov	r1, r9
 800a414:	4640      	mov	r0, r8
 800a416:	47d0      	blx	sl
 800a418:	3001      	adds	r0, #1
 800a41a:	d0ad      	beq.n	800a378 <_printf_i+0x160>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	079b      	lsls	r3, r3, #30
 800a420:	d413      	bmi.n	800a44a <_printf_i+0x232>
 800a422:	68e0      	ldr	r0, [r4, #12]
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	4298      	cmp	r0, r3
 800a428:	bfb8      	it	lt
 800a42a:	4618      	movlt	r0, r3
 800a42c:	e7a6      	b.n	800a37c <_printf_i+0x164>
 800a42e:	2301      	movs	r3, #1
 800a430:	4632      	mov	r2, r6
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d09d      	beq.n	800a378 <_printf_i+0x160>
 800a43c:	3501      	adds	r5, #1
 800a43e:	68e3      	ldr	r3, [r4, #12]
 800a440:	9903      	ldr	r1, [sp, #12]
 800a442:	1a5b      	subs	r3, r3, r1
 800a444:	42ab      	cmp	r3, r5
 800a446:	dcf2      	bgt.n	800a42e <_printf_i+0x216>
 800a448:	e7eb      	b.n	800a422 <_printf_i+0x20a>
 800a44a:	2500      	movs	r5, #0
 800a44c:	f104 0619 	add.w	r6, r4, #25
 800a450:	e7f5      	b.n	800a43e <_printf_i+0x226>
 800a452:	bf00      	nop
 800a454:	08018ec2 	.word	0x08018ec2
 800a458:	08018ed3 	.word	0x08018ed3

0800a45c <_scanf_float>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	b087      	sub	sp, #28
 800a462:	4617      	mov	r7, r2
 800a464:	9303      	str	r3, [sp, #12]
 800a466:	688b      	ldr	r3, [r1, #8]
 800a468:	1e5a      	subs	r2, r3, #1
 800a46a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a46e:	bf83      	ittte	hi
 800a470:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a474:	195b      	addhi	r3, r3, r5
 800a476:	9302      	strhi	r3, [sp, #8]
 800a478:	2300      	movls	r3, #0
 800a47a:	bf86      	itte	hi
 800a47c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a480:	608b      	strhi	r3, [r1, #8]
 800a482:	9302      	strls	r3, [sp, #8]
 800a484:	680b      	ldr	r3, [r1, #0]
 800a486:	468b      	mov	fp, r1
 800a488:	2500      	movs	r5, #0
 800a48a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a48e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a492:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a496:	4680      	mov	r8, r0
 800a498:	460c      	mov	r4, r1
 800a49a:	465e      	mov	r6, fp
 800a49c:	46aa      	mov	sl, r5
 800a49e:	46a9      	mov	r9, r5
 800a4a0:	9501      	str	r5, [sp, #4]
 800a4a2:	68a2      	ldr	r2, [r4, #8]
 800a4a4:	b152      	cbz	r2, 800a4bc <_scanf_float+0x60>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b4e      	cmp	r3, #78	; 0x4e
 800a4ac:	d864      	bhi.n	800a578 <_scanf_float+0x11c>
 800a4ae:	2b40      	cmp	r3, #64	; 0x40
 800a4b0:	d83c      	bhi.n	800a52c <_scanf_float+0xd0>
 800a4b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a4b6:	b2c8      	uxtb	r0, r1
 800a4b8:	280e      	cmp	r0, #14
 800a4ba:	d93a      	bls.n	800a532 <_scanf_float+0xd6>
 800a4bc:	f1b9 0f00 	cmp.w	r9, #0
 800a4c0:	d003      	beq.n	800a4ca <_scanf_float+0x6e>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ce:	f1ba 0f01 	cmp.w	sl, #1
 800a4d2:	f200 8113 	bhi.w	800a6fc <_scanf_float+0x2a0>
 800a4d6:	455e      	cmp	r6, fp
 800a4d8:	f200 8105 	bhi.w	800a6e6 <_scanf_float+0x28a>
 800a4dc:	2501      	movs	r5, #1
 800a4de:	4628      	mov	r0, r5
 800a4e0:	b007      	add	sp, #28
 800a4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a4ea:	2a0d      	cmp	r2, #13
 800a4ec:	d8e6      	bhi.n	800a4bc <_scanf_float+0x60>
 800a4ee:	a101      	add	r1, pc, #4	; (adr r1, 800a4f4 <_scanf_float+0x98>)
 800a4f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4f4:	0800a633 	.word	0x0800a633
 800a4f8:	0800a4bd 	.word	0x0800a4bd
 800a4fc:	0800a4bd 	.word	0x0800a4bd
 800a500:	0800a4bd 	.word	0x0800a4bd
 800a504:	0800a693 	.word	0x0800a693
 800a508:	0800a66b 	.word	0x0800a66b
 800a50c:	0800a4bd 	.word	0x0800a4bd
 800a510:	0800a4bd 	.word	0x0800a4bd
 800a514:	0800a641 	.word	0x0800a641
 800a518:	0800a4bd 	.word	0x0800a4bd
 800a51c:	0800a4bd 	.word	0x0800a4bd
 800a520:	0800a4bd 	.word	0x0800a4bd
 800a524:	0800a4bd 	.word	0x0800a4bd
 800a528:	0800a5f9 	.word	0x0800a5f9
 800a52c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a530:	e7db      	b.n	800a4ea <_scanf_float+0x8e>
 800a532:	290e      	cmp	r1, #14
 800a534:	d8c2      	bhi.n	800a4bc <_scanf_float+0x60>
 800a536:	a001      	add	r0, pc, #4	; (adr r0, 800a53c <_scanf_float+0xe0>)
 800a538:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a53c:	0800a5eb 	.word	0x0800a5eb
 800a540:	0800a4bd 	.word	0x0800a4bd
 800a544:	0800a5eb 	.word	0x0800a5eb
 800a548:	0800a67f 	.word	0x0800a67f
 800a54c:	0800a4bd 	.word	0x0800a4bd
 800a550:	0800a599 	.word	0x0800a599
 800a554:	0800a5d5 	.word	0x0800a5d5
 800a558:	0800a5d5 	.word	0x0800a5d5
 800a55c:	0800a5d5 	.word	0x0800a5d5
 800a560:	0800a5d5 	.word	0x0800a5d5
 800a564:	0800a5d5 	.word	0x0800a5d5
 800a568:	0800a5d5 	.word	0x0800a5d5
 800a56c:	0800a5d5 	.word	0x0800a5d5
 800a570:	0800a5d5 	.word	0x0800a5d5
 800a574:	0800a5d5 	.word	0x0800a5d5
 800a578:	2b6e      	cmp	r3, #110	; 0x6e
 800a57a:	d809      	bhi.n	800a590 <_scanf_float+0x134>
 800a57c:	2b60      	cmp	r3, #96	; 0x60
 800a57e:	d8b2      	bhi.n	800a4e6 <_scanf_float+0x8a>
 800a580:	2b54      	cmp	r3, #84	; 0x54
 800a582:	d077      	beq.n	800a674 <_scanf_float+0x218>
 800a584:	2b59      	cmp	r3, #89	; 0x59
 800a586:	d199      	bne.n	800a4bc <_scanf_float+0x60>
 800a588:	2d07      	cmp	r5, #7
 800a58a:	d197      	bne.n	800a4bc <_scanf_float+0x60>
 800a58c:	2508      	movs	r5, #8
 800a58e:	e029      	b.n	800a5e4 <_scanf_float+0x188>
 800a590:	2b74      	cmp	r3, #116	; 0x74
 800a592:	d06f      	beq.n	800a674 <_scanf_float+0x218>
 800a594:	2b79      	cmp	r3, #121	; 0x79
 800a596:	e7f6      	b.n	800a586 <_scanf_float+0x12a>
 800a598:	6821      	ldr	r1, [r4, #0]
 800a59a:	05c8      	lsls	r0, r1, #23
 800a59c:	d51a      	bpl.n	800a5d4 <_scanf_float+0x178>
 800a59e:	9b02      	ldr	r3, [sp, #8]
 800a5a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5a4:	6021      	str	r1, [r4, #0]
 800a5a6:	f109 0901 	add.w	r9, r9, #1
 800a5aa:	b11b      	cbz	r3, 800a5b4 <_scanf_float+0x158>
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	3201      	adds	r2, #1
 800a5b0:	9302      	str	r3, [sp, #8]
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	68a3      	ldr	r3, [r4, #8]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	60a3      	str	r3, [r4, #8]
 800a5ba:	6923      	ldr	r3, [r4, #16]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	6123      	str	r3, [r4, #16]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	607b      	str	r3, [r7, #4]
 800a5c8:	f340 8084 	ble.w	800a6d4 <_scanf_float+0x278>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	603b      	str	r3, [r7, #0]
 800a5d2:	e766      	b.n	800a4a2 <_scanf_float+0x46>
 800a5d4:	eb1a 0f05 	cmn.w	sl, r5
 800a5d8:	f47f af70 	bne.w	800a4bc <_scanf_float+0x60>
 800a5dc:	6822      	ldr	r2, [r4, #0]
 800a5de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a5e8:	e7e4      	b.n	800a5b4 <_scanf_float+0x158>
 800a5ea:	6822      	ldr	r2, [r4, #0]
 800a5ec:	0610      	lsls	r0, r2, #24
 800a5ee:	f57f af65 	bpl.w	800a4bc <_scanf_float+0x60>
 800a5f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5f6:	e7f4      	b.n	800a5e2 <_scanf_float+0x186>
 800a5f8:	f1ba 0f00 	cmp.w	sl, #0
 800a5fc:	d10e      	bne.n	800a61c <_scanf_float+0x1c0>
 800a5fe:	f1b9 0f00 	cmp.w	r9, #0
 800a602:	d10e      	bne.n	800a622 <_scanf_float+0x1c6>
 800a604:	6822      	ldr	r2, [r4, #0]
 800a606:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a60a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a60e:	d108      	bne.n	800a622 <_scanf_float+0x1c6>
 800a610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a614:	6022      	str	r2, [r4, #0]
 800a616:	f04f 0a01 	mov.w	sl, #1
 800a61a:	e7e3      	b.n	800a5e4 <_scanf_float+0x188>
 800a61c:	f1ba 0f02 	cmp.w	sl, #2
 800a620:	d055      	beq.n	800a6ce <_scanf_float+0x272>
 800a622:	2d01      	cmp	r5, #1
 800a624:	d002      	beq.n	800a62c <_scanf_float+0x1d0>
 800a626:	2d04      	cmp	r5, #4
 800a628:	f47f af48 	bne.w	800a4bc <_scanf_float+0x60>
 800a62c:	3501      	adds	r5, #1
 800a62e:	b2ed      	uxtb	r5, r5
 800a630:	e7d8      	b.n	800a5e4 <_scanf_float+0x188>
 800a632:	f1ba 0f01 	cmp.w	sl, #1
 800a636:	f47f af41 	bne.w	800a4bc <_scanf_float+0x60>
 800a63a:	f04f 0a02 	mov.w	sl, #2
 800a63e:	e7d1      	b.n	800a5e4 <_scanf_float+0x188>
 800a640:	b97d      	cbnz	r5, 800a662 <_scanf_float+0x206>
 800a642:	f1b9 0f00 	cmp.w	r9, #0
 800a646:	f47f af3c 	bne.w	800a4c2 <_scanf_float+0x66>
 800a64a:	6822      	ldr	r2, [r4, #0]
 800a64c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a650:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a654:	f47f af39 	bne.w	800a4ca <_scanf_float+0x6e>
 800a658:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a65c:	6022      	str	r2, [r4, #0]
 800a65e:	2501      	movs	r5, #1
 800a660:	e7c0      	b.n	800a5e4 <_scanf_float+0x188>
 800a662:	2d03      	cmp	r5, #3
 800a664:	d0e2      	beq.n	800a62c <_scanf_float+0x1d0>
 800a666:	2d05      	cmp	r5, #5
 800a668:	e7de      	b.n	800a628 <_scanf_float+0x1cc>
 800a66a:	2d02      	cmp	r5, #2
 800a66c:	f47f af26 	bne.w	800a4bc <_scanf_float+0x60>
 800a670:	2503      	movs	r5, #3
 800a672:	e7b7      	b.n	800a5e4 <_scanf_float+0x188>
 800a674:	2d06      	cmp	r5, #6
 800a676:	f47f af21 	bne.w	800a4bc <_scanf_float+0x60>
 800a67a:	2507      	movs	r5, #7
 800a67c:	e7b2      	b.n	800a5e4 <_scanf_float+0x188>
 800a67e:	6822      	ldr	r2, [r4, #0]
 800a680:	0591      	lsls	r1, r2, #22
 800a682:	f57f af1b 	bpl.w	800a4bc <_scanf_float+0x60>
 800a686:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a68a:	6022      	str	r2, [r4, #0]
 800a68c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a690:	e7a8      	b.n	800a5e4 <_scanf_float+0x188>
 800a692:	6822      	ldr	r2, [r4, #0]
 800a694:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a698:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a69c:	d006      	beq.n	800a6ac <_scanf_float+0x250>
 800a69e:	0550      	lsls	r0, r2, #21
 800a6a0:	f57f af0c 	bpl.w	800a4bc <_scanf_float+0x60>
 800a6a4:	f1b9 0f00 	cmp.w	r9, #0
 800a6a8:	f43f af0f 	beq.w	800a4ca <_scanf_float+0x6e>
 800a6ac:	0591      	lsls	r1, r2, #22
 800a6ae:	bf58      	it	pl
 800a6b0:	9901      	ldrpl	r1, [sp, #4]
 800a6b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6b6:	bf58      	it	pl
 800a6b8:	eba9 0101 	subpl.w	r1, r9, r1
 800a6bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6c0:	bf58      	it	pl
 800a6c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	f04f 0900 	mov.w	r9, #0
 800a6cc:	e78a      	b.n	800a5e4 <_scanf_float+0x188>
 800a6ce:	f04f 0a03 	mov.w	sl, #3
 800a6d2:	e787      	b.n	800a5e4 <_scanf_float+0x188>
 800a6d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6d8:	4639      	mov	r1, r7
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4798      	blx	r3
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f aedf 	beq.w	800a4a2 <_scanf_float+0x46>
 800a6e4:	e6ea      	b.n	800a4bc <_scanf_float+0x60>
 800a6e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6ee:	463a      	mov	r2, r7
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4798      	blx	r3
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	e6ec      	b.n	800a4d6 <_scanf_float+0x7a>
 800a6fc:	1e6b      	subs	r3, r5, #1
 800a6fe:	2b06      	cmp	r3, #6
 800a700:	d825      	bhi.n	800a74e <_scanf_float+0x2f2>
 800a702:	2d02      	cmp	r5, #2
 800a704:	d836      	bhi.n	800a774 <_scanf_float+0x318>
 800a706:	455e      	cmp	r6, fp
 800a708:	f67f aee8 	bls.w	800a4dc <_scanf_float+0x80>
 800a70c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a710:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a714:	463a      	mov	r2, r7
 800a716:	4640      	mov	r0, r8
 800a718:	4798      	blx	r3
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	e7f1      	b.n	800a706 <_scanf_float+0x2aa>
 800a722:	9802      	ldr	r0, [sp, #8]
 800a724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a728:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a72c:	9002      	str	r0, [sp, #8]
 800a72e:	463a      	mov	r2, r7
 800a730:	4640      	mov	r0, r8
 800a732:	4798      	blx	r3
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	3b01      	subs	r3, #1
 800a738:	6123      	str	r3, [r4, #16]
 800a73a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a73e:	fa5f fa8a 	uxtb.w	sl, sl
 800a742:	f1ba 0f02 	cmp.w	sl, #2
 800a746:	d1ec      	bne.n	800a722 <_scanf_float+0x2c6>
 800a748:	3d03      	subs	r5, #3
 800a74a:	b2ed      	uxtb	r5, r5
 800a74c:	1b76      	subs	r6, r6, r5
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	05da      	lsls	r2, r3, #23
 800a752:	d52f      	bpl.n	800a7b4 <_scanf_float+0x358>
 800a754:	055b      	lsls	r3, r3, #21
 800a756:	d510      	bpl.n	800a77a <_scanf_float+0x31e>
 800a758:	455e      	cmp	r6, fp
 800a75a:	f67f aebf 	bls.w	800a4dc <_scanf_float+0x80>
 800a75e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a762:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a766:	463a      	mov	r2, r7
 800a768:	4640      	mov	r0, r8
 800a76a:	4798      	blx	r3
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	3b01      	subs	r3, #1
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	e7f1      	b.n	800a758 <_scanf_float+0x2fc>
 800a774:	46aa      	mov	sl, r5
 800a776:	9602      	str	r6, [sp, #8]
 800a778:	e7df      	b.n	800a73a <_scanf_float+0x2de>
 800a77a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	2965      	cmp	r1, #101	; 0x65
 800a782:	f103 33ff 	add.w	r3, r3, #4294967295
 800a786:	f106 35ff 	add.w	r5, r6, #4294967295
 800a78a:	6123      	str	r3, [r4, #16]
 800a78c:	d00c      	beq.n	800a7a8 <_scanf_float+0x34c>
 800a78e:	2945      	cmp	r1, #69	; 0x45
 800a790:	d00a      	beq.n	800a7a8 <_scanf_float+0x34c>
 800a792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a796:	463a      	mov	r2, r7
 800a798:	4640      	mov	r0, r8
 800a79a:	4798      	blx	r3
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	1eb5      	subs	r5, r6, #2
 800a7a6:	6123      	str	r3, [r4, #16]
 800a7a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7ac:	463a      	mov	r2, r7
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	4798      	blx	r3
 800a7b2:	462e      	mov	r6, r5
 800a7b4:	6825      	ldr	r5, [r4, #0]
 800a7b6:	f015 0510 	ands.w	r5, r5, #16
 800a7ba:	d14d      	bne.n	800a858 <_scanf_float+0x3fc>
 800a7bc:	7035      	strb	r5, [r6, #0]
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c8:	d11a      	bne.n	800a800 <_scanf_float+0x3a4>
 800a7ca:	9b01      	ldr	r3, [sp, #4]
 800a7cc:	454b      	cmp	r3, r9
 800a7ce:	eba3 0209 	sub.w	r2, r3, r9
 800a7d2:	d122      	bne.n	800a81a <_scanf_float+0x3be>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4659      	mov	r1, fp
 800a7d8:	4640      	mov	r0, r8
 800a7da:	f002 fb67 	bl	800ceac <_strtod_r>
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	6821      	ldr	r1, [r4, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f011 0f02 	tst.w	r1, #2
 800a7e8:	f103 0204 	add.w	r2, r3, #4
 800a7ec:	d020      	beq.n	800a830 <_scanf_float+0x3d4>
 800a7ee:	9903      	ldr	r1, [sp, #12]
 800a7f0:	600a      	str	r2, [r1, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	ed83 0b00 	vstr	d0, [r3]
 800a7f8:	68e3      	ldr	r3, [r4, #12]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	60e3      	str	r3, [r4, #12]
 800a7fe:	e66e      	b.n	800a4de <_scanf_float+0x82>
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0e6      	beq.n	800a7d4 <_scanf_float+0x378>
 800a806:	9905      	ldr	r1, [sp, #20]
 800a808:	230a      	movs	r3, #10
 800a80a:	462a      	mov	r2, r5
 800a80c:	3101      	adds	r1, #1
 800a80e:	4640      	mov	r0, r8
 800a810:	f002 fbd4 	bl	800cfbc <_strtol_r>
 800a814:	9b04      	ldr	r3, [sp, #16]
 800a816:	9e05      	ldr	r6, [sp, #20]
 800a818:	1ac2      	subs	r2, r0, r3
 800a81a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a81e:	429e      	cmp	r6, r3
 800a820:	bf28      	it	cs
 800a822:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a826:	490d      	ldr	r1, [pc, #52]	; (800a85c <_scanf_float+0x400>)
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f8dd 	bl	800a9e8 <siprintf>
 800a82e:	e7d1      	b.n	800a7d4 <_scanf_float+0x378>
 800a830:	f011 0f04 	tst.w	r1, #4
 800a834:	9903      	ldr	r1, [sp, #12]
 800a836:	600a      	str	r2, [r1, #0]
 800a838:	d1db      	bne.n	800a7f2 <_scanf_float+0x396>
 800a83a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a842:	681e      	ldr	r6, [r3, #0]
 800a844:	d705      	bvc.n	800a852 <_scanf_float+0x3f6>
 800a846:	4806      	ldr	r0, [pc, #24]	; (800a860 <_scanf_float+0x404>)
 800a848:	f000 f9c0 	bl	800abcc <nanf>
 800a84c:	ed86 0a00 	vstr	s0, [r6]
 800a850:	e7d2      	b.n	800a7f8 <_scanf_float+0x39c>
 800a852:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a856:	e7f9      	b.n	800a84c <_scanf_float+0x3f0>
 800a858:	2500      	movs	r5, #0
 800a85a:	e640      	b.n	800a4de <_scanf_float+0x82>
 800a85c:	08018ee4 	.word	0x08018ee4
 800a860:	08019275 	.word	0x08019275

0800a864 <std>:
 800a864:	2300      	movs	r3, #0
 800a866:	b510      	push	{r4, lr}
 800a868:	4604      	mov	r4, r0
 800a86a:	e9c0 3300 	strd	r3, r3, [r0]
 800a86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a872:	6083      	str	r3, [r0, #8]
 800a874:	8181      	strh	r1, [r0, #12]
 800a876:	6643      	str	r3, [r0, #100]	; 0x64
 800a878:	81c2      	strh	r2, [r0, #14]
 800a87a:	6183      	str	r3, [r0, #24]
 800a87c:	4619      	mov	r1, r3
 800a87e:	2208      	movs	r2, #8
 800a880:	305c      	adds	r0, #92	; 0x5c
 800a882:	f000 f914 	bl	800aaae <memset>
 800a886:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <std+0x58>)
 800a888:	6263      	str	r3, [r4, #36]	; 0x24
 800a88a:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <std+0x5c>)
 800a88c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a88e:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <std+0x60>)
 800a890:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a892:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <std+0x64>)
 800a894:	6323      	str	r3, [r4, #48]	; 0x30
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <std+0x68>)
 800a898:	6224      	str	r4, [r4, #32]
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d006      	beq.n	800a8ac <std+0x48>
 800a89e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8a2:	4294      	cmp	r4, r2
 800a8a4:	d002      	beq.n	800a8ac <std+0x48>
 800a8a6:	33d0      	adds	r3, #208	; 0xd0
 800a8a8:	429c      	cmp	r4, r3
 800a8aa:	d105      	bne.n	800a8b8 <std+0x54>
 800a8ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b4:	f000 b978 	b.w	800aba8 <__retarget_lock_init_recursive>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	bf00      	nop
 800a8bc:	0800aa29 	.word	0x0800aa29
 800a8c0:	0800aa4b 	.word	0x0800aa4b
 800a8c4:	0800aa83 	.word	0x0800aa83
 800a8c8:	0800aaa7 	.word	0x0800aaa7
 800a8cc:	20000498 	.word	0x20000498

0800a8d0 <stdio_exit_handler>:
 800a8d0:	4a02      	ldr	r2, [pc, #8]	; (800a8dc <stdio_exit_handler+0xc>)
 800a8d2:	4903      	ldr	r1, [pc, #12]	; (800a8e0 <stdio_exit_handler+0x10>)
 800a8d4:	4803      	ldr	r0, [pc, #12]	; (800a8e4 <stdio_exit_handler+0x14>)
 800a8d6:	f000 b869 	b.w	800a9ac <_fwalk_sglue>
 800a8da:	bf00      	nop
 800a8dc:	20000018 	.word	0x20000018
 800a8e0:	0800d37d 	.word	0x0800d37d
 800a8e4:	20000024 	.word	0x20000024

0800a8e8 <cleanup_stdio>:
 800a8e8:	6841      	ldr	r1, [r0, #4]
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <cleanup_stdio+0x34>)
 800a8ec:	4299      	cmp	r1, r3
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	d001      	beq.n	800a8f8 <cleanup_stdio+0x10>
 800a8f4:	f002 fd42 	bl	800d37c <_fflush_r>
 800a8f8:	68a1      	ldr	r1, [r4, #8]
 800a8fa:	4b09      	ldr	r3, [pc, #36]	; (800a920 <cleanup_stdio+0x38>)
 800a8fc:	4299      	cmp	r1, r3
 800a8fe:	d002      	beq.n	800a906 <cleanup_stdio+0x1e>
 800a900:	4620      	mov	r0, r4
 800a902:	f002 fd3b 	bl	800d37c <_fflush_r>
 800a906:	68e1      	ldr	r1, [r4, #12]
 800a908:	4b06      	ldr	r3, [pc, #24]	; (800a924 <cleanup_stdio+0x3c>)
 800a90a:	4299      	cmp	r1, r3
 800a90c:	d004      	beq.n	800a918 <cleanup_stdio+0x30>
 800a90e:	4620      	mov	r0, r4
 800a910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a914:	f002 bd32 	b.w	800d37c <_fflush_r>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	bf00      	nop
 800a91c:	20000498 	.word	0x20000498
 800a920:	20000500 	.word	0x20000500
 800a924:	20000568 	.word	0x20000568

0800a928 <global_stdio_init.part.0>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <global_stdio_init.part.0+0x30>)
 800a92c:	4c0b      	ldr	r4, [pc, #44]	; (800a95c <global_stdio_init.part.0+0x34>)
 800a92e:	4a0c      	ldr	r2, [pc, #48]	; (800a960 <global_stdio_init.part.0+0x38>)
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	4620      	mov	r0, r4
 800a934:	2200      	movs	r2, #0
 800a936:	2104      	movs	r1, #4
 800a938:	f7ff ff94 	bl	800a864 <std>
 800a93c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a940:	2201      	movs	r2, #1
 800a942:	2109      	movs	r1, #9
 800a944:	f7ff ff8e 	bl	800a864 <std>
 800a948:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a94c:	2202      	movs	r2, #2
 800a94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a952:	2112      	movs	r1, #18
 800a954:	f7ff bf86 	b.w	800a864 <std>
 800a958:	200005d0 	.word	0x200005d0
 800a95c:	20000498 	.word	0x20000498
 800a960:	0800a8d1 	.word	0x0800a8d1

0800a964 <__sfp_lock_acquire>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__sfp_lock_acquire+0x8>)
 800a966:	f000 b920 	b.w	800abaa <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	200005d9 	.word	0x200005d9

0800a970 <__sfp_lock_release>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__sfp_lock_release+0x8>)
 800a972:	f000 b91b 	b.w	800abac <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	200005d9 	.word	0x200005d9

0800a97c <__sinit>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4604      	mov	r4, r0
 800a980:	f7ff fff0 	bl	800a964 <__sfp_lock_acquire>
 800a984:	6a23      	ldr	r3, [r4, #32]
 800a986:	b11b      	cbz	r3, 800a990 <__sinit+0x14>
 800a988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a98c:	f7ff bff0 	b.w	800a970 <__sfp_lock_release>
 800a990:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <__sinit+0x28>)
 800a992:	6223      	str	r3, [r4, #32]
 800a994:	4b04      	ldr	r3, [pc, #16]	; (800a9a8 <__sinit+0x2c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1f5      	bne.n	800a988 <__sinit+0xc>
 800a99c:	f7ff ffc4 	bl	800a928 <global_stdio_init.part.0>
 800a9a0:	e7f2      	b.n	800a988 <__sinit+0xc>
 800a9a2:	bf00      	nop
 800a9a4:	0800a8e9 	.word	0x0800a8e9
 800a9a8:	200005d0 	.word	0x200005d0

0800a9ac <_fwalk_sglue>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4688      	mov	r8, r1
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a9c0:	d505      	bpl.n	800a9ce <_fwalk_sglue+0x22>
 800a9c2:	6824      	ldr	r4, [r4, #0]
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	d1f7      	bne.n	800a9b8 <_fwalk_sglue+0xc>
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d907      	bls.n	800a9e4 <_fwalk_sglue+0x38>
 800a9d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	d003      	beq.n	800a9e4 <_fwalk_sglue+0x38>
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4638      	mov	r0, r7
 800a9e0:	47c0      	blx	r8
 800a9e2:	4306      	orrs	r6, r0
 800a9e4:	3568      	adds	r5, #104	; 0x68
 800a9e6:	e7e9      	b.n	800a9bc <_fwalk_sglue+0x10>

0800a9e8 <siprintf>:
 800a9e8:	b40e      	push	{r1, r2, r3}
 800a9ea:	b500      	push	{lr}
 800a9ec:	b09c      	sub	sp, #112	; 0x70
 800a9ee:	ab1d      	add	r3, sp, #116	; 0x74
 800a9f0:	9002      	str	r0, [sp, #8]
 800a9f2:	9006      	str	r0, [sp, #24]
 800a9f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9f8:	4809      	ldr	r0, [pc, #36]	; (800aa20 <siprintf+0x38>)
 800a9fa:	9107      	str	r1, [sp, #28]
 800a9fc:	9104      	str	r1, [sp, #16]
 800a9fe:	4909      	ldr	r1, [pc, #36]	; (800aa24 <siprintf+0x3c>)
 800aa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa04:	9105      	str	r1, [sp, #20]
 800aa06:	6800      	ldr	r0, [r0, #0]
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	a902      	add	r1, sp, #8
 800aa0c:	f002 fb32 	bl	800d074 <_svfiprintf_r>
 800aa10:	9b02      	ldr	r3, [sp, #8]
 800aa12:	2200      	movs	r2, #0
 800aa14:	701a      	strb	r2, [r3, #0]
 800aa16:	b01c      	add	sp, #112	; 0x70
 800aa18:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa1c:	b003      	add	sp, #12
 800aa1e:	4770      	bx	lr
 800aa20:	20000070 	.word	0x20000070
 800aa24:	ffff0208 	.word	0xffff0208

0800aa28 <__sread>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa30:	f000 f86c 	bl	800ab0c <_read_r>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	bfab      	itete	ge
 800aa38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa3a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa3c:	181b      	addge	r3, r3, r0
 800aa3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa42:	bfac      	ite	ge
 800aa44:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa46:	81a3      	strhlt	r3, [r4, #12]
 800aa48:	bd10      	pop	{r4, pc}

0800aa4a <__swrite>:
 800aa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4e:	461f      	mov	r7, r3
 800aa50:	898b      	ldrh	r3, [r1, #12]
 800aa52:	05db      	lsls	r3, r3, #23
 800aa54:	4605      	mov	r5, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	4616      	mov	r6, r2
 800aa5a:	d505      	bpl.n	800aa68 <__swrite+0x1e>
 800aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa60:	2302      	movs	r3, #2
 800aa62:	2200      	movs	r2, #0
 800aa64:	f000 f840 	bl	800aae8 <_lseek_r>
 800aa68:	89a3      	ldrh	r3, [r4, #12]
 800aa6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	4632      	mov	r2, r6
 800aa76:	463b      	mov	r3, r7
 800aa78:	4628      	mov	r0, r5
 800aa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7e:	f000 b857 	b.w	800ab30 <_write_r>

0800aa82 <__sseek>:
 800aa82:	b510      	push	{r4, lr}
 800aa84:	460c      	mov	r4, r1
 800aa86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8a:	f000 f82d 	bl	800aae8 <_lseek_r>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	bf15      	itete	ne
 800aa94:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa9e:	81a3      	strheq	r3, [r4, #12]
 800aaa0:	bf18      	it	ne
 800aaa2:	81a3      	strhne	r3, [r4, #12]
 800aaa4:	bd10      	pop	{r4, pc}

0800aaa6 <__sclose>:
 800aaa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaaa:	f000 b80d 	b.w	800aac8 <_close_r>

0800aaae <memset>:
 800aaae:	4402      	add	r2, r0
 800aab0:	4603      	mov	r3, r0
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d100      	bne.n	800aab8 <memset+0xa>
 800aab6:	4770      	bx	lr
 800aab8:	f803 1b01 	strb.w	r1, [r3], #1
 800aabc:	e7f9      	b.n	800aab2 <memset+0x4>
	...

0800aac0 <_localeconv_r>:
 800aac0:	4800      	ldr	r0, [pc, #0]	; (800aac4 <_localeconv_r+0x4>)
 800aac2:	4770      	bx	lr
 800aac4:	20000164 	.word	0x20000164

0800aac8 <_close_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	; (800aae4 <_close_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f7 fdf1 	bl	80026ba <_close>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_close_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_close_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	200005d4 	.word	0x200005d4

0800aae8 <_lseek_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	; (800ab08 <_lseek_r+0x20>)
 800aaec:	4604      	mov	r4, r0
 800aaee:	4608      	mov	r0, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	602a      	str	r2, [r5, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7f7 fe06 	bl	8002708 <_lseek>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_lseek_r+0x1e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_lseek_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200005d4 	.word	0x200005d4

0800ab0c <_read_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d07      	ldr	r5, [pc, #28]	; (800ab2c <_read_r+0x20>)
 800ab10:	4604      	mov	r4, r0
 800ab12:	4608      	mov	r0, r1
 800ab14:	4611      	mov	r1, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	602a      	str	r2, [r5, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f7 fd94 	bl	8002648 <_read>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_read_r+0x1e>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_read_r+0x1e>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	200005d4 	.word	0x200005d4

0800ab30 <_write_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	; (800ab50 <_write_r+0x20>)
 800ab34:	4604      	mov	r4, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	4611      	mov	r1, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7f7 fd9f 	bl	8002682 <_write>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_write_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_write_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	200005d4 	.word	0x200005d4

0800ab54 <__errno>:
 800ab54:	4b01      	ldr	r3, [pc, #4]	; (800ab5c <__errno+0x8>)
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	20000070 	.word	0x20000070

0800ab60 <__libc_init_array>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	4d0d      	ldr	r5, [pc, #52]	; (800ab98 <__libc_init_array+0x38>)
 800ab64:	4c0d      	ldr	r4, [pc, #52]	; (800ab9c <__libc_init_array+0x3c>)
 800ab66:	1b64      	subs	r4, r4, r5
 800ab68:	10a4      	asrs	r4, r4, #2
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	42a6      	cmp	r6, r4
 800ab6e:	d109      	bne.n	800ab84 <__libc_init_array+0x24>
 800ab70:	4d0b      	ldr	r5, [pc, #44]	; (800aba0 <__libc_init_array+0x40>)
 800ab72:	4c0c      	ldr	r4, [pc, #48]	; (800aba4 <__libc_init_array+0x44>)
 800ab74:	f003 fb0c 	bl	800e190 <_init>
 800ab78:	1b64      	subs	r4, r4, r5
 800ab7a:	10a4      	asrs	r4, r4, #2
 800ab7c:	2600      	movs	r6, #0
 800ab7e:	42a6      	cmp	r6, r4
 800ab80:	d105      	bne.n	800ab8e <__libc_init_array+0x2e>
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab88:	4798      	blx	r3
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e7ee      	b.n	800ab6c <__libc_init_array+0xc>
 800ab8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab92:	4798      	blx	r3
 800ab94:	3601      	adds	r6, #1
 800ab96:	e7f2      	b.n	800ab7e <__libc_init_array+0x1e>
 800ab98:	080192e0 	.word	0x080192e0
 800ab9c:	080192e0 	.word	0x080192e0
 800aba0:	080192e0 	.word	0x080192e0
 800aba4:	080192e4 	.word	0x080192e4

0800aba8 <__retarget_lock_init_recursive>:
 800aba8:	4770      	bx	lr

0800abaa <__retarget_lock_acquire_recursive>:
 800abaa:	4770      	bx	lr

0800abac <__retarget_lock_release_recursive>:
 800abac:	4770      	bx	lr

0800abae <memcpy>:
 800abae:	440a      	add	r2, r1
 800abb0:	4291      	cmp	r1, r2
 800abb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800abb6:	d100      	bne.n	800abba <memcpy+0xc>
 800abb8:	4770      	bx	lr
 800abba:	b510      	push	{r4, lr}
 800abbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abc4:	4291      	cmp	r1, r2
 800abc6:	d1f9      	bne.n	800abbc <memcpy+0xe>
 800abc8:	bd10      	pop	{r4, pc}
	...

0800abcc <nanf>:
 800abcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800abd4 <nanf+0x8>
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	7fc00000 	.word	0x7fc00000

0800abd8 <quorem>:
 800abd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	6903      	ldr	r3, [r0, #16]
 800abde:	690c      	ldr	r4, [r1, #16]
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	4607      	mov	r7, r0
 800abe4:	db7e      	blt.n	800ace4 <quorem+0x10c>
 800abe6:	3c01      	subs	r4, #1
 800abe8:	f101 0814 	add.w	r8, r1, #20
 800abec:	f100 0514 	add.w	r5, r0, #20
 800abf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abfe:	3301      	adds	r3, #1
 800ac00:	429a      	cmp	r2, r3
 800ac02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac0a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac0e:	d331      	bcc.n	800ac74 <quorem+0x9c>
 800ac10:	f04f 0e00 	mov.w	lr, #0
 800ac14:	4640      	mov	r0, r8
 800ac16:	46ac      	mov	ip, r5
 800ac18:	46f2      	mov	sl, lr
 800ac1a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac1e:	b293      	uxth	r3, r2
 800ac20:	fb06 e303 	mla	r3, r6, r3, lr
 800ac24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac28:	0c1a      	lsrs	r2, r3, #16
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	ebaa 0303 	sub.w	r3, sl, r3
 800ac30:	f8dc a000 	ldr.w	sl, [ip]
 800ac34:	fa13 f38a 	uxtah	r3, r3, sl
 800ac38:	fb06 220e 	mla	r2, r6, lr, r2
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	9b00      	ldr	r3, [sp, #0]
 800ac40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac44:	b292      	uxth	r2, r2
 800ac46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac4e:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac52:	4581      	cmp	r9, r0
 800ac54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac58:	f84c 3b04 	str.w	r3, [ip], #4
 800ac5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac60:	d2db      	bcs.n	800ac1a <quorem+0x42>
 800ac62:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac66:	b92b      	cbnz	r3, 800ac74 <quorem+0x9c>
 800ac68:	9b01      	ldr	r3, [sp, #4]
 800ac6a:	3b04      	subs	r3, #4
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	d32c      	bcc.n	800accc <quorem+0xf4>
 800ac72:	613c      	str	r4, [r7, #16]
 800ac74:	4638      	mov	r0, r7
 800ac76:	f001 f969 	bl	800bf4c <__mcmp>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	db22      	blt.n	800acc4 <quorem+0xec>
 800ac7e:	3601      	adds	r6, #1
 800ac80:	4629      	mov	r1, r5
 800ac82:	2000      	movs	r0, #0
 800ac84:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac88:	f8d1 c000 	ldr.w	ip, [r1]
 800ac8c:	b293      	uxth	r3, r2
 800ac8e:	1ac3      	subs	r3, r0, r3
 800ac90:	0c12      	lsrs	r2, r2, #16
 800ac92:	fa13 f38c 	uxtah	r3, r3, ip
 800ac96:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aca4:	45c1      	cmp	r9, r8
 800aca6:	f841 3b04 	str.w	r3, [r1], #4
 800acaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acae:	d2e9      	bcs.n	800ac84 <quorem+0xac>
 800acb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acb8:	b922      	cbnz	r2, 800acc4 <quorem+0xec>
 800acba:	3b04      	subs	r3, #4
 800acbc:	429d      	cmp	r5, r3
 800acbe:	461a      	mov	r2, r3
 800acc0:	d30a      	bcc.n	800acd8 <quorem+0x100>
 800acc2:	613c      	str	r4, [r7, #16]
 800acc4:	4630      	mov	r0, r6
 800acc6:	b003      	add	sp, #12
 800acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800accc:	6812      	ldr	r2, [r2, #0]
 800acce:	3b04      	subs	r3, #4
 800acd0:	2a00      	cmp	r2, #0
 800acd2:	d1ce      	bne.n	800ac72 <quorem+0x9a>
 800acd4:	3c01      	subs	r4, #1
 800acd6:	e7c9      	b.n	800ac6c <quorem+0x94>
 800acd8:	6812      	ldr	r2, [r2, #0]
 800acda:	3b04      	subs	r3, #4
 800acdc:	2a00      	cmp	r2, #0
 800acde:	d1f0      	bne.n	800acc2 <quorem+0xea>
 800ace0:	3c01      	subs	r4, #1
 800ace2:	e7eb      	b.n	800acbc <quorem+0xe4>
 800ace4:	2000      	movs	r0, #0
 800ace6:	e7ee      	b.n	800acc6 <quorem+0xee>

0800ace8 <_dtoa_r>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	ed2d 8b02 	vpush	{d8}
 800acf0:	69c5      	ldr	r5, [r0, #28]
 800acf2:	b091      	sub	sp, #68	; 0x44
 800acf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acf8:	ec59 8b10 	vmov	r8, r9, d0
 800acfc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800acfe:	9106      	str	r1, [sp, #24]
 800ad00:	4606      	mov	r6, r0
 800ad02:	9208      	str	r2, [sp, #32]
 800ad04:	930c      	str	r3, [sp, #48]	; 0x30
 800ad06:	b975      	cbnz	r5, 800ad26 <_dtoa_r+0x3e>
 800ad08:	2010      	movs	r0, #16
 800ad0a:	f000 fda5 	bl	800b858 <malloc>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	61f0      	str	r0, [r6, #28]
 800ad12:	b920      	cbnz	r0, 800ad1e <_dtoa_r+0x36>
 800ad14:	4ba6      	ldr	r3, [pc, #664]	; (800afb0 <_dtoa_r+0x2c8>)
 800ad16:	21ef      	movs	r1, #239	; 0xef
 800ad18:	48a6      	ldr	r0, [pc, #664]	; (800afb4 <_dtoa_r+0x2cc>)
 800ad1a:	f002 fb9d 	bl	800d458 <__assert_func>
 800ad1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad22:	6005      	str	r5, [r0, #0]
 800ad24:	60c5      	str	r5, [r0, #12]
 800ad26:	69f3      	ldr	r3, [r6, #28]
 800ad28:	6819      	ldr	r1, [r3, #0]
 800ad2a:	b151      	cbz	r1, 800ad42 <_dtoa_r+0x5a>
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	604a      	str	r2, [r1, #4]
 800ad30:	2301      	movs	r3, #1
 800ad32:	4093      	lsls	r3, r2
 800ad34:	608b      	str	r3, [r1, #8]
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 fe82 	bl	800ba40 <_Bfree>
 800ad3c:	69f3      	ldr	r3, [r6, #28]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	f1b9 0300 	subs.w	r3, r9, #0
 800ad46:	bfbb      	ittet	lt
 800ad48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad4c:	9303      	strlt	r3, [sp, #12]
 800ad4e:	2300      	movge	r3, #0
 800ad50:	2201      	movlt	r2, #1
 800ad52:	bfac      	ite	ge
 800ad54:	6023      	strge	r3, [r4, #0]
 800ad56:	6022      	strlt	r2, [r4, #0]
 800ad58:	4b97      	ldr	r3, [pc, #604]	; (800afb8 <_dtoa_r+0x2d0>)
 800ad5a:	9c03      	ldr	r4, [sp, #12]
 800ad5c:	43a3      	bics	r3, r4
 800ad5e:	d11c      	bne.n	800ad9a <_dtoa_r+0xb2>
 800ad60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad62:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ad6c:	ea53 0308 	orrs.w	r3, r3, r8
 800ad70:	f000 84fb 	beq.w	800b76a <_dtoa_r+0xa82>
 800ad74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad76:	b963      	cbnz	r3, 800ad92 <_dtoa_r+0xaa>
 800ad78:	4b90      	ldr	r3, [pc, #576]	; (800afbc <_dtoa_r+0x2d4>)
 800ad7a:	e020      	b.n	800adbe <_dtoa_r+0xd6>
 800ad7c:	4b90      	ldr	r3, [pc, #576]	; (800afc0 <_dtoa_r+0x2d8>)
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	3308      	adds	r3, #8
 800ad82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	9801      	ldr	r0, [sp, #4]
 800ad88:	b011      	add	sp, #68	; 0x44
 800ad8a:	ecbd 8b02 	vpop	{d8}
 800ad8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad92:	4b8a      	ldr	r3, [pc, #552]	; (800afbc <_dtoa_r+0x2d4>)
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	3303      	adds	r3, #3
 800ad98:	e7f3      	b.n	800ad82 <_dtoa_r+0x9a>
 800ad9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ad9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ada2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada6:	d10c      	bne.n	800adc2 <_dtoa_r+0xda>
 800ada8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adaa:	2301      	movs	r3, #1
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 84d7 	beq.w	800b764 <_dtoa_r+0xa7c>
 800adb6:	4b83      	ldr	r3, [pc, #524]	; (800afc4 <_dtoa_r+0x2dc>)
 800adb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	e7e1      	b.n	800ad86 <_dtoa_r+0x9e>
 800adc2:	aa0e      	add	r2, sp, #56	; 0x38
 800adc4:	a90f      	add	r1, sp, #60	; 0x3c
 800adc6:	4630      	mov	r0, r6
 800adc8:	eeb0 0b48 	vmov.f64	d0, d8
 800adcc:	f001 f9d4 	bl	800c178 <__d2b>
 800add0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800add4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800add6:	4605      	mov	r5, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d046      	beq.n	800ae6a <_dtoa_r+0x182>
 800addc:	eeb0 7b48 	vmov.f64	d7, d8
 800ade0:	ee18 1a90 	vmov	r1, s17
 800ade4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ade8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800adec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800adf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800adf4:	2000      	movs	r0, #0
 800adf6:	ee07 1a90 	vmov	s15, r1
 800adfa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800adfe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800af98 <_dtoa_r+0x2b0>
 800ae02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae06:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800afa0 <_dtoa_r+0x2b8>
 800ae0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ae0e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800afa8 <_dtoa_r+0x2c0>
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ae1a:	eeb0 7b46 	vmov.f64	d7, d6
 800ae1e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ae22:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ae26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ae2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae2e:	ee16 ba90 	vmov	fp, s13
 800ae32:	9009      	str	r0, [sp, #36]	; 0x24
 800ae34:	d508      	bpl.n	800ae48 <_dtoa_r+0x160>
 800ae36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ae3a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae42:	bf18      	it	ne
 800ae44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ae48:	f1bb 0f16 	cmp.w	fp, #22
 800ae4c:	d82b      	bhi.n	800aea6 <_dtoa_r+0x1be>
 800ae4e:	495e      	ldr	r1, [pc, #376]	; (800afc8 <_dtoa_r+0x2e0>)
 800ae50:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ae54:	ed91 7b00 	vldr	d7, [r1]
 800ae58:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae60:	d501      	bpl.n	800ae66 <_dtoa_r+0x17e>
 800ae62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae66:	2100      	movs	r1, #0
 800ae68:	e01e      	b.n	800aea8 <_dtoa_r+0x1c0>
 800ae6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ae72:	2920      	cmp	r1, #32
 800ae74:	bfc1      	itttt	gt
 800ae76:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800ae7a:	408c      	lslgt	r4, r1
 800ae7c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800ae80:	fa28 f101 	lsrgt.w	r1, r8, r1
 800ae84:	bfd6      	itet	le
 800ae86:	f1c1 0120 	rsble	r1, r1, #32
 800ae8a:	4321      	orrgt	r1, r4
 800ae8c:	fa08 f101 	lslle.w	r1, r8, r1
 800ae90:	ee07 1a90 	vmov	s15, r1
 800ae94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	ee17 1a90 	vmov	r1, s15
 800ae9e:	2001      	movs	r0, #1
 800aea0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aea4:	e7a7      	b.n	800adf6 <_dtoa_r+0x10e>
 800aea6:	2101      	movs	r1, #1
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	1e53      	subs	r3, r2, #1
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	bf45      	ittet	mi
 800aeb0:	f1c2 0301 	rsbmi	r3, r2, #1
 800aeb4:	9304      	strmi	r3, [sp, #16]
 800aeb6:	2300      	movpl	r3, #0
 800aeb8:	2300      	movmi	r3, #0
 800aeba:	bf4c      	ite	mi
 800aebc:	9305      	strmi	r3, [sp, #20]
 800aebe:	9304      	strpl	r3, [sp, #16]
 800aec0:	f1bb 0f00 	cmp.w	fp, #0
 800aec4:	910b      	str	r1, [sp, #44]	; 0x2c
 800aec6:	db18      	blt.n	800aefa <_dtoa_r+0x212>
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800aece:	445b      	add	r3, fp
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9a06      	ldr	r2, [sp, #24]
 800aed6:	2a09      	cmp	r2, #9
 800aed8:	d848      	bhi.n	800af6c <_dtoa_r+0x284>
 800aeda:	2a05      	cmp	r2, #5
 800aedc:	bfc4      	itt	gt
 800aede:	3a04      	subgt	r2, #4
 800aee0:	9206      	strgt	r2, [sp, #24]
 800aee2:	9a06      	ldr	r2, [sp, #24]
 800aee4:	f1a2 0202 	sub.w	r2, r2, #2
 800aee8:	bfcc      	ite	gt
 800aeea:	2400      	movgt	r4, #0
 800aeec:	2401      	movle	r4, #1
 800aeee:	2a03      	cmp	r2, #3
 800aef0:	d847      	bhi.n	800af82 <_dtoa_r+0x29a>
 800aef2:	e8df f002 	tbb	[pc, r2]
 800aef6:	2d0b      	.short	0x2d0b
 800aef8:	392b      	.short	0x392b
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	2200      	movs	r2, #0
 800aefe:	eba3 030b 	sub.w	r3, r3, fp
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	920a      	str	r2, [sp, #40]	; 0x28
 800af06:	f1cb 0300 	rsb	r3, fp, #0
 800af0a:	e7e3      	b.n	800aed4 <_dtoa_r+0x1ec>
 800af0c:	2200      	movs	r2, #0
 800af0e:	9207      	str	r2, [sp, #28]
 800af10:	9a08      	ldr	r2, [sp, #32]
 800af12:	2a00      	cmp	r2, #0
 800af14:	dc38      	bgt.n	800af88 <_dtoa_r+0x2a0>
 800af16:	f04f 0a01 	mov.w	sl, #1
 800af1a:	46d1      	mov	r9, sl
 800af1c:	4652      	mov	r2, sl
 800af1e:	f8cd a020 	str.w	sl, [sp, #32]
 800af22:	69f7      	ldr	r7, [r6, #28]
 800af24:	2100      	movs	r1, #0
 800af26:	2004      	movs	r0, #4
 800af28:	f100 0c14 	add.w	ip, r0, #20
 800af2c:	4594      	cmp	ip, r2
 800af2e:	d930      	bls.n	800af92 <_dtoa_r+0x2aa>
 800af30:	6079      	str	r1, [r7, #4]
 800af32:	4630      	mov	r0, r6
 800af34:	930d      	str	r3, [sp, #52]	; 0x34
 800af36:	f000 fd43 	bl	800b9c0 <_Balloc>
 800af3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af3c:	9001      	str	r0, [sp, #4]
 800af3e:	4602      	mov	r2, r0
 800af40:	2800      	cmp	r0, #0
 800af42:	d145      	bne.n	800afd0 <_dtoa_r+0x2e8>
 800af44:	4b21      	ldr	r3, [pc, #132]	; (800afcc <_dtoa_r+0x2e4>)
 800af46:	f240 11af 	movw	r1, #431	; 0x1af
 800af4a:	e6e5      	b.n	800ad18 <_dtoa_r+0x30>
 800af4c:	2201      	movs	r2, #1
 800af4e:	e7de      	b.n	800af0e <_dtoa_r+0x226>
 800af50:	2200      	movs	r2, #0
 800af52:	9207      	str	r2, [sp, #28]
 800af54:	9a08      	ldr	r2, [sp, #32]
 800af56:	eb0b 0a02 	add.w	sl, fp, r2
 800af5a:	f10a 0901 	add.w	r9, sl, #1
 800af5e:	464a      	mov	r2, r9
 800af60:	2a01      	cmp	r2, #1
 800af62:	bfb8      	it	lt
 800af64:	2201      	movlt	r2, #1
 800af66:	e7dc      	b.n	800af22 <_dtoa_r+0x23a>
 800af68:	2201      	movs	r2, #1
 800af6a:	e7f2      	b.n	800af52 <_dtoa_r+0x26a>
 800af6c:	2401      	movs	r4, #1
 800af6e:	2200      	movs	r2, #0
 800af70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800af74:	f04f 3aff 	mov.w	sl, #4294967295
 800af78:	2100      	movs	r1, #0
 800af7a:	46d1      	mov	r9, sl
 800af7c:	2212      	movs	r2, #18
 800af7e:	9108      	str	r1, [sp, #32]
 800af80:	e7cf      	b.n	800af22 <_dtoa_r+0x23a>
 800af82:	2201      	movs	r2, #1
 800af84:	9207      	str	r2, [sp, #28]
 800af86:	e7f5      	b.n	800af74 <_dtoa_r+0x28c>
 800af88:	f8dd a020 	ldr.w	sl, [sp, #32]
 800af8c:	46d1      	mov	r9, sl
 800af8e:	4652      	mov	r2, sl
 800af90:	e7c7      	b.n	800af22 <_dtoa_r+0x23a>
 800af92:	3101      	adds	r1, #1
 800af94:	0040      	lsls	r0, r0, #1
 800af96:	e7c7      	b.n	800af28 <_dtoa_r+0x240>
 800af98:	636f4361 	.word	0x636f4361
 800af9c:	3fd287a7 	.word	0x3fd287a7
 800afa0:	8b60c8b3 	.word	0x8b60c8b3
 800afa4:	3fc68a28 	.word	0x3fc68a28
 800afa8:	509f79fb 	.word	0x509f79fb
 800afac:	3fd34413 	.word	0x3fd34413
 800afb0:	08018ef6 	.word	0x08018ef6
 800afb4:	08018f0d 	.word	0x08018f0d
 800afb8:	7ff00000 	.word	0x7ff00000
 800afbc:	08018ef2 	.word	0x08018ef2
 800afc0:	08018ee9 	.word	0x08018ee9
 800afc4:	08018ec1 	.word	0x08018ec1
 800afc8:	08018ff8 	.word	0x08018ff8
 800afcc:	08018f65 	.word	0x08018f65
 800afd0:	69f2      	ldr	r2, [r6, #28]
 800afd2:	9901      	ldr	r1, [sp, #4]
 800afd4:	6011      	str	r1, [r2, #0]
 800afd6:	f1b9 0f0e 	cmp.w	r9, #14
 800afda:	d86c      	bhi.n	800b0b6 <_dtoa_r+0x3ce>
 800afdc:	2c00      	cmp	r4, #0
 800afde:	d06a      	beq.n	800b0b6 <_dtoa_r+0x3ce>
 800afe0:	f1bb 0f00 	cmp.w	fp, #0
 800afe4:	f340 80a0 	ble.w	800b128 <_dtoa_r+0x440>
 800afe8:	4ac1      	ldr	r2, [pc, #772]	; (800b2f0 <_dtoa_r+0x608>)
 800afea:	f00b 010f 	and.w	r1, fp, #15
 800afee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aff2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aff6:	ed92 7b00 	vldr	d7, [r2]
 800affa:	ea4f 122b 	mov.w	r2, fp, asr #4
 800affe:	f000 8087 	beq.w	800b110 <_dtoa_r+0x428>
 800b002:	49bc      	ldr	r1, [pc, #752]	; (800b2f4 <_dtoa_r+0x60c>)
 800b004:	ed91 6b08 	vldr	d6, [r1, #32]
 800b008:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b00c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b010:	f002 020f 	and.w	r2, r2, #15
 800b014:	2103      	movs	r1, #3
 800b016:	48b7      	ldr	r0, [pc, #732]	; (800b2f4 <_dtoa_r+0x60c>)
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d17b      	bne.n	800b114 <_dtoa_r+0x42c>
 800b01c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b020:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b024:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b02a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b02e:	2a00      	cmp	r2, #0
 800b030:	f000 80a0 	beq.w	800b174 <_dtoa_r+0x48c>
 800b034:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b038:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b040:	f140 8098 	bpl.w	800b174 <_dtoa_r+0x48c>
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	f000 8094 	beq.w	800b174 <_dtoa_r+0x48c>
 800b04c:	f1ba 0f00 	cmp.w	sl, #0
 800b050:	dd2f      	ble.n	800b0b2 <_dtoa_r+0x3ca>
 800b052:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b056:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b05a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b05e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b062:	3101      	adds	r1, #1
 800b064:	4654      	mov	r4, sl
 800b066:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b06a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b06e:	ee07 1a90 	vmov	s15, r1
 800b072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b076:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b07a:	ee15 7a90 	vmov	r7, s11
 800b07e:	ec51 0b15 	vmov	r0, r1, d5
 800b082:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b086:	2c00      	cmp	r4, #0
 800b088:	d177      	bne.n	800b17a <_dtoa_r+0x492>
 800b08a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b08e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b092:	ec41 0b17 	vmov	d7, r0, r1
 800b096:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09e:	f300 826a 	bgt.w	800b576 <_dtoa_r+0x88e>
 800b0a2:	eeb1 7b47 	vneg.f64	d7, d7
 800b0a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ae:	f100 8260 	bmi.w	800b572 <_dtoa_r+0x88a>
 800b0b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	f2c0 811d 	blt.w	800b2f8 <_dtoa_r+0x610>
 800b0be:	f1bb 0f0e 	cmp.w	fp, #14
 800b0c2:	f300 8119 	bgt.w	800b2f8 <_dtoa_r+0x610>
 800b0c6:	4b8a      	ldr	r3, [pc, #552]	; (800b2f0 <_dtoa_r+0x608>)
 800b0c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0cc:	ed93 6b00 	vldr	d6, [r3]
 800b0d0:	9b08      	ldr	r3, [sp, #32]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f280 80b7 	bge.w	800b246 <_dtoa_r+0x55e>
 800b0d8:	f1b9 0f00 	cmp.w	r9, #0
 800b0dc:	f300 80b3 	bgt.w	800b246 <_dtoa_r+0x55e>
 800b0e0:	f040 8246 	bne.w	800b570 <_dtoa_r+0x888>
 800b0e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b0e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b0ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f8:	464c      	mov	r4, r9
 800b0fa:	464f      	mov	r7, r9
 800b0fc:	f280 821c 	bge.w	800b538 <_dtoa_r+0x850>
 800b100:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b104:	2331      	movs	r3, #49	; 0x31
 800b106:	f808 3b01 	strb.w	r3, [r8], #1
 800b10a:	f10b 0b01 	add.w	fp, fp, #1
 800b10e:	e218      	b.n	800b542 <_dtoa_r+0x85a>
 800b110:	2102      	movs	r1, #2
 800b112:	e780      	b.n	800b016 <_dtoa_r+0x32e>
 800b114:	07d4      	lsls	r4, r2, #31
 800b116:	d504      	bpl.n	800b122 <_dtoa_r+0x43a>
 800b118:	ed90 6b00 	vldr	d6, [r0]
 800b11c:	3101      	adds	r1, #1
 800b11e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b122:	1052      	asrs	r2, r2, #1
 800b124:	3008      	adds	r0, #8
 800b126:	e777      	b.n	800b018 <_dtoa_r+0x330>
 800b128:	d022      	beq.n	800b170 <_dtoa_r+0x488>
 800b12a:	f1cb 0200 	rsb	r2, fp, #0
 800b12e:	4970      	ldr	r1, [pc, #448]	; (800b2f0 <_dtoa_r+0x608>)
 800b130:	f002 000f 	and.w	r0, r2, #15
 800b134:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b138:	ed91 7b00 	vldr	d7, [r1]
 800b13c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b140:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b144:	486b      	ldr	r0, [pc, #428]	; (800b2f4 <_dtoa_r+0x60c>)
 800b146:	1112      	asrs	r2, r2, #4
 800b148:	2400      	movs	r4, #0
 800b14a:	2102      	movs	r1, #2
 800b14c:	b92a      	cbnz	r2, 800b15a <_dtoa_r+0x472>
 800b14e:	2c00      	cmp	r4, #0
 800b150:	f43f af6a 	beq.w	800b028 <_dtoa_r+0x340>
 800b154:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b158:	e766      	b.n	800b028 <_dtoa_r+0x340>
 800b15a:	07d7      	lsls	r7, r2, #31
 800b15c:	d505      	bpl.n	800b16a <_dtoa_r+0x482>
 800b15e:	ed90 6b00 	vldr	d6, [r0]
 800b162:	3101      	adds	r1, #1
 800b164:	2401      	movs	r4, #1
 800b166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b16a:	1052      	asrs	r2, r2, #1
 800b16c:	3008      	adds	r0, #8
 800b16e:	e7ed      	b.n	800b14c <_dtoa_r+0x464>
 800b170:	2102      	movs	r1, #2
 800b172:	e759      	b.n	800b028 <_dtoa_r+0x340>
 800b174:	465a      	mov	r2, fp
 800b176:	464c      	mov	r4, r9
 800b178:	e775      	b.n	800b066 <_dtoa_r+0x37e>
 800b17a:	ec41 0b17 	vmov	d7, r0, r1
 800b17e:	495c      	ldr	r1, [pc, #368]	; (800b2f0 <_dtoa_r+0x608>)
 800b180:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b184:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b188:	9901      	ldr	r1, [sp, #4]
 800b18a:	440c      	add	r4, r1
 800b18c:	9907      	ldr	r1, [sp, #28]
 800b18e:	b351      	cbz	r1, 800b1e6 <_dtoa_r+0x4fe>
 800b190:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b194:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b198:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b19c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b1a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b1a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b1a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b1ac:	ee14 1a90 	vmov	r1, s9
 800b1b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b1b4:	3130      	adds	r1, #48	; 0x30
 800b1b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b1ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c2:	f808 1b01 	strb.w	r1, [r8], #1
 800b1c6:	d439      	bmi.n	800b23c <_dtoa_r+0x554>
 800b1c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b1cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d4:	d472      	bmi.n	800b2bc <_dtoa_r+0x5d4>
 800b1d6:	45a0      	cmp	r8, r4
 800b1d8:	f43f af6b 	beq.w	800b0b2 <_dtoa_r+0x3ca>
 800b1dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b1e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b1e4:	e7e0      	b.n	800b1a8 <_dtoa_r+0x4c0>
 800b1e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b1f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b1f8:	ee14 1a90 	vmov	r1, s9
 800b1fc:	3130      	adds	r1, #48	; 0x30
 800b1fe:	f808 1b01 	strb.w	r1, [r8], #1
 800b202:	45a0      	cmp	r8, r4
 800b204:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b208:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b20c:	d118      	bne.n	800b240 <_dtoa_r+0x558>
 800b20e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b212:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b216:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21e:	dc4d      	bgt.n	800b2bc <_dtoa_r+0x5d4>
 800b220:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b224:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22c:	f57f af41 	bpl.w	800b0b2 <_dtoa_r+0x3ca>
 800b230:	4680      	mov	r8, r0
 800b232:	3801      	subs	r0, #1
 800b234:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b238:	2b30      	cmp	r3, #48	; 0x30
 800b23a:	d0f9      	beq.n	800b230 <_dtoa_r+0x548>
 800b23c:	4693      	mov	fp, r2
 800b23e:	e02a      	b.n	800b296 <_dtoa_r+0x5ae>
 800b240:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b244:	e7d6      	b.n	800b1f4 <_dtoa_r+0x50c>
 800b246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b24a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b24e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b252:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b256:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b25a:	ee15 3a10 	vmov	r3, s10
 800b25e:	3330      	adds	r3, #48	; 0x30
 800b260:	f808 3b01 	strb.w	r3, [r8], #1
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	eba8 0303 	sub.w	r3, r8, r3
 800b26a:	4599      	cmp	r9, r3
 800b26c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b270:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b274:	d133      	bne.n	800b2de <_dtoa_r+0x5f6>
 800b276:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b27a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b282:	dc1a      	bgt.n	800b2ba <_dtoa_r+0x5d2>
 800b284:	eeb4 7b46 	vcmp.f64	d7, d6
 800b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28c:	d103      	bne.n	800b296 <_dtoa_r+0x5ae>
 800b28e:	ee15 3a10 	vmov	r3, s10
 800b292:	07d9      	lsls	r1, r3, #31
 800b294:	d411      	bmi.n	800b2ba <_dtoa_r+0x5d2>
 800b296:	4629      	mov	r1, r5
 800b298:	4630      	mov	r0, r6
 800b29a:	f000 fbd1 	bl	800ba40 <_Bfree>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a2:	f888 3000 	strb.w	r3, [r8]
 800b2a6:	f10b 0301 	add.w	r3, fp, #1
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f43f ad69 	beq.w	800ad86 <_dtoa_r+0x9e>
 800b2b4:	f8c3 8000 	str.w	r8, [r3]
 800b2b8:	e565      	b.n	800ad86 <_dtoa_r+0x9e>
 800b2ba:	465a      	mov	r2, fp
 800b2bc:	4643      	mov	r3, r8
 800b2be:	4698      	mov	r8, r3
 800b2c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b2c4:	2939      	cmp	r1, #57	; 0x39
 800b2c6:	d106      	bne.n	800b2d6 <_dtoa_r+0x5ee>
 800b2c8:	9901      	ldr	r1, [sp, #4]
 800b2ca:	4299      	cmp	r1, r3
 800b2cc:	d1f7      	bne.n	800b2be <_dtoa_r+0x5d6>
 800b2ce:	9801      	ldr	r0, [sp, #4]
 800b2d0:	2130      	movs	r1, #48	; 0x30
 800b2d2:	3201      	adds	r2, #1
 800b2d4:	7001      	strb	r1, [r0, #0]
 800b2d6:	7819      	ldrb	r1, [r3, #0]
 800b2d8:	3101      	adds	r1, #1
 800b2da:	7019      	strb	r1, [r3, #0]
 800b2dc:	e7ae      	b.n	800b23c <_dtoa_r+0x554>
 800b2de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b2e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ea:	d1b2      	bne.n	800b252 <_dtoa_r+0x56a>
 800b2ec:	e7d3      	b.n	800b296 <_dtoa_r+0x5ae>
 800b2ee:	bf00      	nop
 800b2f0:	08018ff8 	.word	0x08018ff8
 800b2f4:	08018fd0 	.word	0x08018fd0
 800b2f8:	9907      	ldr	r1, [sp, #28]
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	f000 80d0 	beq.w	800b4a0 <_dtoa_r+0x7b8>
 800b300:	9906      	ldr	r1, [sp, #24]
 800b302:	2901      	cmp	r1, #1
 800b304:	f300 80b4 	bgt.w	800b470 <_dtoa_r+0x788>
 800b308:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b30a:	2900      	cmp	r1, #0
 800b30c:	f000 80ac 	beq.w	800b468 <_dtoa_r+0x780>
 800b310:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b314:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b318:	461c      	mov	r4, r3
 800b31a:	9309      	str	r3, [sp, #36]	; 0x24
 800b31c:	9b04      	ldr	r3, [sp, #16]
 800b31e:	4413      	add	r3, r2
 800b320:	9304      	str	r3, [sp, #16]
 800b322:	9b05      	ldr	r3, [sp, #20]
 800b324:	2101      	movs	r1, #1
 800b326:	4413      	add	r3, r2
 800b328:	4630      	mov	r0, r6
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	f000 fc88 	bl	800bc40 <__i2b>
 800b330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b332:	4607      	mov	r7, r0
 800b334:	f1b8 0f00 	cmp.w	r8, #0
 800b338:	d00d      	beq.n	800b356 <_dtoa_r+0x66e>
 800b33a:	9a05      	ldr	r2, [sp, #20]
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	dd0a      	ble.n	800b356 <_dtoa_r+0x66e>
 800b340:	4542      	cmp	r2, r8
 800b342:	9904      	ldr	r1, [sp, #16]
 800b344:	bfa8      	it	ge
 800b346:	4642      	movge	r2, r8
 800b348:	1a89      	subs	r1, r1, r2
 800b34a:	9104      	str	r1, [sp, #16]
 800b34c:	9905      	ldr	r1, [sp, #20]
 800b34e:	eba8 0802 	sub.w	r8, r8, r2
 800b352:	1a8a      	subs	r2, r1, r2
 800b354:	9205      	str	r2, [sp, #20]
 800b356:	b303      	cbz	r3, 800b39a <_dtoa_r+0x6b2>
 800b358:	9a07      	ldr	r2, [sp, #28]
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	f000 80a5 	beq.w	800b4aa <_dtoa_r+0x7c2>
 800b360:	2c00      	cmp	r4, #0
 800b362:	dd13      	ble.n	800b38c <_dtoa_r+0x6a4>
 800b364:	4639      	mov	r1, r7
 800b366:	4622      	mov	r2, r4
 800b368:	4630      	mov	r0, r6
 800b36a:	930d      	str	r3, [sp, #52]	; 0x34
 800b36c:	f000 fd28 	bl	800bdc0 <__pow5mult>
 800b370:	462a      	mov	r2, r5
 800b372:	4601      	mov	r1, r0
 800b374:	4607      	mov	r7, r0
 800b376:	4630      	mov	r0, r6
 800b378:	f000 fc78 	bl	800bc6c <__multiply>
 800b37c:	4629      	mov	r1, r5
 800b37e:	9009      	str	r0, [sp, #36]	; 0x24
 800b380:	4630      	mov	r0, r6
 800b382:	f000 fb5d 	bl	800ba40 <_Bfree>
 800b386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b38a:	4615      	mov	r5, r2
 800b38c:	1b1a      	subs	r2, r3, r4
 800b38e:	d004      	beq.n	800b39a <_dtoa_r+0x6b2>
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f000 fd14 	bl	800bdc0 <__pow5mult>
 800b398:	4605      	mov	r5, r0
 800b39a:	2101      	movs	r1, #1
 800b39c:	4630      	mov	r0, r6
 800b39e:	f000 fc4f 	bl	800bc40 <__i2b>
 800b3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	f340 8081 	ble.w	800b4ae <_dtoa_r+0x7c6>
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f000 fd05 	bl	800bdc0 <__pow5mult>
 800b3b6:	9b06      	ldr	r3, [sp, #24]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	dd7a      	ble.n	800b4b4 <_dtoa_r+0x7cc>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c2:	6922      	ldr	r2, [r4, #16]
 800b3c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3c8:	6910      	ldr	r0, [r2, #16]
 800b3ca:	f000 fbeb 	bl	800bba4 <__hi0bits>
 800b3ce:	f1c0 0020 	rsb	r0, r0, #32
 800b3d2:	9b05      	ldr	r3, [sp, #20]
 800b3d4:	4418      	add	r0, r3
 800b3d6:	f010 001f 	ands.w	r0, r0, #31
 800b3da:	f000 8093 	beq.w	800b504 <_dtoa_r+0x81c>
 800b3de:	f1c0 0220 	rsb	r2, r0, #32
 800b3e2:	2a04      	cmp	r2, #4
 800b3e4:	f340 8085 	ble.w	800b4f2 <_dtoa_r+0x80a>
 800b3e8:	9b04      	ldr	r3, [sp, #16]
 800b3ea:	f1c0 001c 	rsb	r0, r0, #28
 800b3ee:	4403      	add	r3, r0
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	9b05      	ldr	r3, [sp, #20]
 800b3f4:	4480      	add	r8, r0
 800b3f6:	4403      	add	r3, r0
 800b3f8:	9305      	str	r3, [sp, #20]
 800b3fa:	9b04      	ldr	r3, [sp, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dd05      	ble.n	800b40c <_dtoa_r+0x724>
 800b400:	4629      	mov	r1, r5
 800b402:	461a      	mov	r2, r3
 800b404:	4630      	mov	r0, r6
 800b406:	f000 fd35 	bl	800be74 <__lshift>
 800b40a:	4605      	mov	r5, r0
 800b40c:	9b05      	ldr	r3, [sp, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd05      	ble.n	800b41e <_dtoa_r+0x736>
 800b412:	4621      	mov	r1, r4
 800b414:	461a      	mov	r2, r3
 800b416:	4630      	mov	r0, r6
 800b418:	f000 fd2c 	bl	800be74 <__lshift>
 800b41c:	4604      	mov	r4, r0
 800b41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d071      	beq.n	800b508 <_dtoa_r+0x820>
 800b424:	4621      	mov	r1, r4
 800b426:	4628      	mov	r0, r5
 800b428:	f000 fd90 	bl	800bf4c <__mcmp>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	da6b      	bge.n	800b508 <_dtoa_r+0x820>
 800b430:	2300      	movs	r3, #0
 800b432:	4629      	mov	r1, r5
 800b434:	220a      	movs	r2, #10
 800b436:	4630      	mov	r0, r6
 800b438:	f000 fb24 	bl	800ba84 <__multadd>
 800b43c:	9b07      	ldr	r3, [sp, #28]
 800b43e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b442:	4605      	mov	r5, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8197 	beq.w	800b778 <_dtoa_r+0xa90>
 800b44a:	4639      	mov	r1, r7
 800b44c:	2300      	movs	r3, #0
 800b44e:	220a      	movs	r2, #10
 800b450:	4630      	mov	r0, r6
 800b452:	f000 fb17 	bl	800ba84 <__multadd>
 800b456:	f1ba 0f00 	cmp.w	sl, #0
 800b45a:	4607      	mov	r7, r0
 800b45c:	f300 8093 	bgt.w	800b586 <_dtoa_r+0x89e>
 800b460:	9b06      	ldr	r3, [sp, #24]
 800b462:	2b02      	cmp	r3, #2
 800b464:	dc57      	bgt.n	800b516 <_dtoa_r+0x82e>
 800b466:	e08e      	b.n	800b586 <_dtoa_r+0x89e>
 800b468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b46a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b46e:	e751      	b.n	800b314 <_dtoa_r+0x62c>
 800b470:	f109 34ff 	add.w	r4, r9, #4294967295
 800b474:	42a3      	cmp	r3, r4
 800b476:	bfbf      	itttt	lt
 800b478:	1ae2      	sublt	r2, r4, r3
 800b47a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b47c:	189b      	addlt	r3, r3, r2
 800b47e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b480:	bfae      	itee	ge
 800b482:	1b1c      	subge	r4, r3, r4
 800b484:	4623      	movlt	r3, r4
 800b486:	2400      	movlt	r4, #0
 800b488:	f1b9 0f00 	cmp.w	r9, #0
 800b48c:	bfb5      	itete	lt
 800b48e:	9a04      	ldrlt	r2, [sp, #16]
 800b490:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b494:	eba2 0809 	sublt.w	r8, r2, r9
 800b498:	464a      	movge	r2, r9
 800b49a:	bfb8      	it	lt
 800b49c:	2200      	movlt	r2, #0
 800b49e:	e73c      	b.n	800b31a <_dtoa_r+0x632>
 800b4a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b4a4:	9f07      	ldr	r7, [sp, #28]
 800b4a6:	461c      	mov	r4, r3
 800b4a8:	e744      	b.n	800b334 <_dtoa_r+0x64c>
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	e770      	b.n	800b390 <_dtoa_r+0x6a8>
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	dc18      	bgt.n	800b4e6 <_dtoa_r+0x7fe>
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	b9b3      	cbnz	r3, 800b4e6 <_dtoa_r+0x7fe>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b4be:	b9a2      	cbnz	r2, 800b4ea <_dtoa_r+0x802>
 800b4c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b4c4:	0d12      	lsrs	r2, r2, #20
 800b4c6:	0512      	lsls	r2, r2, #20
 800b4c8:	b18a      	cbz	r2, 800b4ee <_dtoa_r+0x806>
 800b4ca:	9b04      	ldr	r3, [sp, #16]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	9304      	str	r3, [sp, #16]
 800b4d0:	9b05      	ldr	r3, [sp, #20]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f47f af70 	bne.w	800b3c2 <_dtoa_r+0x6da>
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	e775      	b.n	800b3d2 <_dtoa_r+0x6ea>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e7f6      	b.n	800b4d8 <_dtoa_r+0x7f0>
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	e7f4      	b.n	800b4d8 <_dtoa_r+0x7f0>
 800b4ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f0:	e7f3      	b.n	800b4da <_dtoa_r+0x7f2>
 800b4f2:	d082      	beq.n	800b3fa <_dtoa_r+0x712>
 800b4f4:	9b04      	ldr	r3, [sp, #16]
 800b4f6:	321c      	adds	r2, #28
 800b4f8:	4413      	add	r3, r2
 800b4fa:	9304      	str	r3, [sp, #16]
 800b4fc:	9b05      	ldr	r3, [sp, #20]
 800b4fe:	4490      	add	r8, r2
 800b500:	4413      	add	r3, r2
 800b502:	e779      	b.n	800b3f8 <_dtoa_r+0x710>
 800b504:	4602      	mov	r2, r0
 800b506:	e7f5      	b.n	800b4f4 <_dtoa_r+0x80c>
 800b508:	f1b9 0f00 	cmp.w	r9, #0
 800b50c:	dc36      	bgt.n	800b57c <_dtoa_r+0x894>
 800b50e:	9b06      	ldr	r3, [sp, #24]
 800b510:	2b02      	cmp	r3, #2
 800b512:	dd33      	ble.n	800b57c <_dtoa_r+0x894>
 800b514:	46ca      	mov	sl, r9
 800b516:	f1ba 0f00 	cmp.w	sl, #0
 800b51a:	d10d      	bne.n	800b538 <_dtoa_r+0x850>
 800b51c:	4621      	mov	r1, r4
 800b51e:	4653      	mov	r3, sl
 800b520:	2205      	movs	r2, #5
 800b522:	4630      	mov	r0, r6
 800b524:	f000 faae 	bl	800ba84 <__multadd>
 800b528:	4601      	mov	r1, r0
 800b52a:	4604      	mov	r4, r0
 800b52c:	4628      	mov	r0, r5
 800b52e:	f000 fd0d 	bl	800bf4c <__mcmp>
 800b532:	2800      	cmp	r0, #0
 800b534:	f73f ade4 	bgt.w	800b100 <_dtoa_r+0x418>
 800b538:	9b08      	ldr	r3, [sp, #32]
 800b53a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b53e:	ea6f 0b03 	mvn.w	fp, r3
 800b542:	f04f 0900 	mov.w	r9, #0
 800b546:	4621      	mov	r1, r4
 800b548:	4630      	mov	r0, r6
 800b54a:	f000 fa79 	bl	800ba40 <_Bfree>
 800b54e:	2f00      	cmp	r7, #0
 800b550:	f43f aea1 	beq.w	800b296 <_dtoa_r+0x5ae>
 800b554:	f1b9 0f00 	cmp.w	r9, #0
 800b558:	d005      	beq.n	800b566 <_dtoa_r+0x87e>
 800b55a:	45b9      	cmp	r9, r7
 800b55c:	d003      	beq.n	800b566 <_dtoa_r+0x87e>
 800b55e:	4649      	mov	r1, r9
 800b560:	4630      	mov	r0, r6
 800b562:	f000 fa6d 	bl	800ba40 <_Bfree>
 800b566:	4639      	mov	r1, r7
 800b568:	4630      	mov	r0, r6
 800b56a:	f000 fa69 	bl	800ba40 <_Bfree>
 800b56e:	e692      	b.n	800b296 <_dtoa_r+0x5ae>
 800b570:	2400      	movs	r4, #0
 800b572:	4627      	mov	r7, r4
 800b574:	e7e0      	b.n	800b538 <_dtoa_r+0x850>
 800b576:	4693      	mov	fp, r2
 800b578:	4627      	mov	r7, r4
 800b57a:	e5c1      	b.n	800b100 <_dtoa_r+0x418>
 800b57c:	9b07      	ldr	r3, [sp, #28]
 800b57e:	46ca      	mov	sl, r9
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 8100 	beq.w	800b786 <_dtoa_r+0xa9e>
 800b586:	f1b8 0f00 	cmp.w	r8, #0
 800b58a:	dd05      	ble.n	800b598 <_dtoa_r+0x8b0>
 800b58c:	4639      	mov	r1, r7
 800b58e:	4642      	mov	r2, r8
 800b590:	4630      	mov	r0, r6
 800b592:	f000 fc6f 	bl	800be74 <__lshift>
 800b596:	4607      	mov	r7, r0
 800b598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d05d      	beq.n	800b65a <_dtoa_r+0x972>
 800b59e:	6879      	ldr	r1, [r7, #4]
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f000 fa0d 	bl	800b9c0 <_Balloc>
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	b928      	cbnz	r0, 800b5b6 <_dtoa_r+0x8ce>
 800b5aa:	4b82      	ldr	r3, [pc, #520]	; (800b7b4 <_dtoa_r+0xacc>)
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b5b2:	f7ff bbb1 	b.w	800ad18 <_dtoa_r+0x30>
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	3202      	adds	r2, #2
 800b5ba:	0092      	lsls	r2, r2, #2
 800b5bc:	f107 010c 	add.w	r1, r7, #12
 800b5c0:	300c      	adds	r0, #12
 800b5c2:	f7ff faf4 	bl	800abae <memcpy>
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	4641      	mov	r1, r8
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f000 fc52 	bl	800be74 <__lshift>
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	4453      	add	r3, sl
 800b5da:	9308      	str	r3, [sp, #32]
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	46b9      	mov	r9, r7
 800b5e4:	9307      	str	r3, [sp, #28]
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	9b04      	ldr	r3, [sp, #16]
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	9302      	str	r3, [sp, #8]
 800b5f2:	f7ff faf1 	bl	800abd8 <quorem>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	3330      	adds	r3, #48	; 0x30
 800b5fa:	9005      	str	r0, [sp, #20]
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4628      	mov	r0, r5
 800b600:	9309      	str	r3, [sp, #36]	; 0x24
 800b602:	f000 fca3 	bl	800bf4c <__mcmp>
 800b606:	463a      	mov	r2, r7
 800b608:	4682      	mov	sl, r0
 800b60a:	4621      	mov	r1, r4
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 fcb9 	bl	800bf84 <__mdiff>
 800b612:	68c2      	ldr	r2, [r0, #12]
 800b614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b616:	4680      	mov	r8, r0
 800b618:	bb0a      	cbnz	r2, 800b65e <_dtoa_r+0x976>
 800b61a:	4601      	mov	r1, r0
 800b61c:	4628      	mov	r0, r5
 800b61e:	f000 fc95 	bl	800bf4c <__mcmp>
 800b622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b624:	4602      	mov	r2, r0
 800b626:	4641      	mov	r1, r8
 800b628:	4630      	mov	r0, r6
 800b62a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b62e:	f000 fa07 	bl	800ba40 <_Bfree>
 800b632:	9b06      	ldr	r3, [sp, #24]
 800b634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b636:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b63a:	ea43 0102 	orr.w	r1, r3, r2
 800b63e:	9b07      	ldr	r3, [sp, #28]
 800b640:	4319      	orrs	r1, r3
 800b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b644:	d10d      	bne.n	800b662 <_dtoa_r+0x97a>
 800b646:	2b39      	cmp	r3, #57	; 0x39
 800b648:	d029      	beq.n	800b69e <_dtoa_r+0x9b6>
 800b64a:	f1ba 0f00 	cmp.w	sl, #0
 800b64e:	dd01      	ble.n	800b654 <_dtoa_r+0x96c>
 800b650:	9b05      	ldr	r3, [sp, #20]
 800b652:	3331      	adds	r3, #49	; 0x31
 800b654:	9a02      	ldr	r2, [sp, #8]
 800b656:	7013      	strb	r3, [r2, #0]
 800b658:	e775      	b.n	800b546 <_dtoa_r+0x85e>
 800b65a:	4638      	mov	r0, r7
 800b65c:	e7b8      	b.n	800b5d0 <_dtoa_r+0x8e8>
 800b65e:	2201      	movs	r2, #1
 800b660:	e7e1      	b.n	800b626 <_dtoa_r+0x93e>
 800b662:	f1ba 0f00 	cmp.w	sl, #0
 800b666:	db06      	blt.n	800b676 <_dtoa_r+0x98e>
 800b668:	9906      	ldr	r1, [sp, #24]
 800b66a:	ea41 0a0a 	orr.w	sl, r1, sl
 800b66e:	9907      	ldr	r1, [sp, #28]
 800b670:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b674:	d120      	bne.n	800b6b8 <_dtoa_r+0x9d0>
 800b676:	2a00      	cmp	r2, #0
 800b678:	ddec      	ble.n	800b654 <_dtoa_r+0x96c>
 800b67a:	4629      	mov	r1, r5
 800b67c:	2201      	movs	r2, #1
 800b67e:	4630      	mov	r0, r6
 800b680:	9304      	str	r3, [sp, #16]
 800b682:	f000 fbf7 	bl	800be74 <__lshift>
 800b686:	4621      	mov	r1, r4
 800b688:	4605      	mov	r5, r0
 800b68a:	f000 fc5f 	bl	800bf4c <__mcmp>
 800b68e:	2800      	cmp	r0, #0
 800b690:	9b04      	ldr	r3, [sp, #16]
 800b692:	dc02      	bgt.n	800b69a <_dtoa_r+0x9b2>
 800b694:	d1de      	bne.n	800b654 <_dtoa_r+0x96c>
 800b696:	07da      	lsls	r2, r3, #31
 800b698:	d5dc      	bpl.n	800b654 <_dtoa_r+0x96c>
 800b69a:	2b39      	cmp	r3, #57	; 0x39
 800b69c:	d1d8      	bne.n	800b650 <_dtoa_r+0x968>
 800b69e:	9a02      	ldr	r2, [sp, #8]
 800b6a0:	2339      	movs	r3, #57	; 0x39
 800b6a2:	7013      	strb	r3, [r2, #0]
 800b6a4:	4643      	mov	r3, r8
 800b6a6:	4698      	mov	r8, r3
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b6ae:	2a39      	cmp	r2, #57	; 0x39
 800b6b0:	d051      	beq.n	800b756 <_dtoa_r+0xa6e>
 800b6b2:	3201      	adds	r2, #1
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	e746      	b.n	800b546 <_dtoa_r+0x85e>
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	dd03      	ble.n	800b6c4 <_dtoa_r+0x9dc>
 800b6bc:	2b39      	cmp	r3, #57	; 0x39
 800b6be:	d0ee      	beq.n	800b69e <_dtoa_r+0x9b6>
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	e7c7      	b.n	800b654 <_dtoa_r+0x96c>
 800b6c4:	9a04      	ldr	r2, [sp, #16]
 800b6c6:	9908      	ldr	r1, [sp, #32]
 800b6c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6cc:	428a      	cmp	r2, r1
 800b6ce:	d02b      	beq.n	800b728 <_dtoa_r+0xa40>
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	220a      	movs	r2, #10
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f000 f9d4 	bl	800ba84 <__multadd>
 800b6dc:	45b9      	cmp	r9, r7
 800b6de:	4605      	mov	r5, r0
 800b6e0:	f04f 0300 	mov.w	r3, #0
 800b6e4:	f04f 020a 	mov.w	r2, #10
 800b6e8:	4649      	mov	r1, r9
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	d107      	bne.n	800b6fe <_dtoa_r+0xa16>
 800b6ee:	f000 f9c9 	bl	800ba84 <__multadd>
 800b6f2:	4681      	mov	r9, r0
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	e774      	b.n	800b5e8 <_dtoa_r+0x900>
 800b6fe:	f000 f9c1 	bl	800ba84 <__multadd>
 800b702:	4639      	mov	r1, r7
 800b704:	4681      	mov	r9, r0
 800b706:	2300      	movs	r3, #0
 800b708:	220a      	movs	r2, #10
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 f9ba 	bl	800ba84 <__multadd>
 800b710:	4607      	mov	r7, r0
 800b712:	e7f0      	b.n	800b6f6 <_dtoa_r+0xa0e>
 800b714:	f1ba 0f00 	cmp.w	sl, #0
 800b718:	9a01      	ldr	r2, [sp, #4]
 800b71a:	bfcc      	ite	gt
 800b71c:	46d0      	movgt	r8, sl
 800b71e:	f04f 0801 	movle.w	r8, #1
 800b722:	4490      	add	r8, r2
 800b724:	f04f 0900 	mov.w	r9, #0
 800b728:	4629      	mov	r1, r5
 800b72a:	2201      	movs	r2, #1
 800b72c:	4630      	mov	r0, r6
 800b72e:	9302      	str	r3, [sp, #8]
 800b730:	f000 fba0 	bl	800be74 <__lshift>
 800b734:	4621      	mov	r1, r4
 800b736:	4605      	mov	r5, r0
 800b738:	f000 fc08 	bl	800bf4c <__mcmp>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	dcb1      	bgt.n	800b6a4 <_dtoa_r+0x9bc>
 800b740:	d102      	bne.n	800b748 <_dtoa_r+0xa60>
 800b742:	9b02      	ldr	r3, [sp, #8]
 800b744:	07db      	lsls	r3, r3, #31
 800b746:	d4ad      	bmi.n	800b6a4 <_dtoa_r+0x9bc>
 800b748:	4643      	mov	r3, r8
 800b74a:	4698      	mov	r8, r3
 800b74c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b750:	2a30      	cmp	r2, #48	; 0x30
 800b752:	d0fa      	beq.n	800b74a <_dtoa_r+0xa62>
 800b754:	e6f7      	b.n	800b546 <_dtoa_r+0x85e>
 800b756:	9a01      	ldr	r2, [sp, #4]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d1a4      	bne.n	800b6a6 <_dtoa_r+0x9be>
 800b75c:	f10b 0b01 	add.w	fp, fp, #1
 800b760:	2331      	movs	r3, #49	; 0x31
 800b762:	e778      	b.n	800b656 <_dtoa_r+0x96e>
 800b764:	4b14      	ldr	r3, [pc, #80]	; (800b7b8 <_dtoa_r+0xad0>)
 800b766:	f7ff bb2a 	b.w	800adbe <_dtoa_r+0xd6>
 800b76a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f47f ab05 	bne.w	800ad7c <_dtoa_r+0x94>
 800b772:	4b12      	ldr	r3, [pc, #72]	; (800b7bc <_dtoa_r+0xad4>)
 800b774:	f7ff bb23 	b.w	800adbe <_dtoa_r+0xd6>
 800b778:	f1ba 0f00 	cmp.w	sl, #0
 800b77c:	dc03      	bgt.n	800b786 <_dtoa_r+0xa9e>
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	2b02      	cmp	r3, #2
 800b782:	f73f aec8 	bgt.w	800b516 <_dtoa_r+0x82e>
 800b786:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b78a:	4621      	mov	r1, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	f7ff fa23 	bl	800abd8 <quorem>
 800b792:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b796:	f808 3b01 	strb.w	r3, [r8], #1
 800b79a:	9a01      	ldr	r2, [sp, #4]
 800b79c:	eba8 0202 	sub.w	r2, r8, r2
 800b7a0:	4592      	cmp	sl, r2
 800b7a2:	ddb7      	ble.n	800b714 <_dtoa_r+0xa2c>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	220a      	movs	r2, #10
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f000 f96a 	bl	800ba84 <__multadd>
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	e7ea      	b.n	800b78a <_dtoa_r+0xaa2>
 800b7b4:	08018f65 	.word	0x08018f65
 800b7b8:	08018ec0 	.word	0x08018ec0
 800b7bc:	08018ee9 	.word	0x08018ee9

0800b7c0 <_free_r>:
 800b7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7c2:	2900      	cmp	r1, #0
 800b7c4:	d044      	beq.n	800b850 <_free_r+0x90>
 800b7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7ca:	9001      	str	r0, [sp, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b7d2:	bfb8      	it	lt
 800b7d4:	18e4      	addlt	r4, r4, r3
 800b7d6:	f000 f8e7 	bl	800b9a8 <__malloc_lock>
 800b7da:	4a1e      	ldr	r2, [pc, #120]	; (800b854 <_free_r+0x94>)
 800b7dc:	9801      	ldr	r0, [sp, #4]
 800b7de:	6813      	ldr	r3, [r2, #0]
 800b7e0:	b933      	cbnz	r3, 800b7f0 <_free_r+0x30>
 800b7e2:	6063      	str	r3, [r4, #4]
 800b7e4:	6014      	str	r4, [r2, #0]
 800b7e6:	b003      	add	sp, #12
 800b7e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ec:	f000 b8e2 	b.w	800b9b4 <__malloc_unlock>
 800b7f0:	42a3      	cmp	r3, r4
 800b7f2:	d908      	bls.n	800b806 <_free_r+0x46>
 800b7f4:	6825      	ldr	r5, [r4, #0]
 800b7f6:	1961      	adds	r1, r4, r5
 800b7f8:	428b      	cmp	r3, r1
 800b7fa:	bf01      	itttt	eq
 800b7fc:	6819      	ldreq	r1, [r3, #0]
 800b7fe:	685b      	ldreq	r3, [r3, #4]
 800b800:	1949      	addeq	r1, r1, r5
 800b802:	6021      	streq	r1, [r4, #0]
 800b804:	e7ed      	b.n	800b7e2 <_free_r+0x22>
 800b806:	461a      	mov	r2, r3
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	b10b      	cbz	r3, 800b810 <_free_r+0x50>
 800b80c:	42a3      	cmp	r3, r4
 800b80e:	d9fa      	bls.n	800b806 <_free_r+0x46>
 800b810:	6811      	ldr	r1, [r2, #0]
 800b812:	1855      	adds	r5, r2, r1
 800b814:	42a5      	cmp	r5, r4
 800b816:	d10b      	bne.n	800b830 <_free_r+0x70>
 800b818:	6824      	ldr	r4, [r4, #0]
 800b81a:	4421      	add	r1, r4
 800b81c:	1854      	adds	r4, r2, r1
 800b81e:	42a3      	cmp	r3, r4
 800b820:	6011      	str	r1, [r2, #0]
 800b822:	d1e0      	bne.n	800b7e6 <_free_r+0x26>
 800b824:	681c      	ldr	r4, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	6053      	str	r3, [r2, #4]
 800b82a:	440c      	add	r4, r1
 800b82c:	6014      	str	r4, [r2, #0]
 800b82e:	e7da      	b.n	800b7e6 <_free_r+0x26>
 800b830:	d902      	bls.n	800b838 <_free_r+0x78>
 800b832:	230c      	movs	r3, #12
 800b834:	6003      	str	r3, [r0, #0]
 800b836:	e7d6      	b.n	800b7e6 <_free_r+0x26>
 800b838:	6825      	ldr	r5, [r4, #0]
 800b83a:	1961      	adds	r1, r4, r5
 800b83c:	428b      	cmp	r3, r1
 800b83e:	bf04      	itt	eq
 800b840:	6819      	ldreq	r1, [r3, #0]
 800b842:	685b      	ldreq	r3, [r3, #4]
 800b844:	6063      	str	r3, [r4, #4]
 800b846:	bf04      	itt	eq
 800b848:	1949      	addeq	r1, r1, r5
 800b84a:	6021      	streq	r1, [r4, #0]
 800b84c:	6054      	str	r4, [r2, #4]
 800b84e:	e7ca      	b.n	800b7e6 <_free_r+0x26>
 800b850:	b003      	add	sp, #12
 800b852:	bd30      	pop	{r4, r5, pc}
 800b854:	200005dc 	.word	0x200005dc

0800b858 <malloc>:
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <malloc+0xc>)
 800b85a:	4601      	mov	r1, r0
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f000 b823 	b.w	800b8a8 <_malloc_r>
 800b862:	bf00      	nop
 800b864:	20000070 	.word	0x20000070

0800b868 <sbrk_aligned>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4e0e      	ldr	r6, [pc, #56]	; (800b8a4 <sbrk_aligned+0x3c>)
 800b86c:	460c      	mov	r4, r1
 800b86e:	6831      	ldr	r1, [r6, #0]
 800b870:	4605      	mov	r5, r0
 800b872:	b911      	cbnz	r1, 800b87a <sbrk_aligned+0x12>
 800b874:	f001 fdd6 	bl	800d424 <_sbrk_r>
 800b878:	6030      	str	r0, [r6, #0]
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f001 fdd1 	bl	800d424 <_sbrk_r>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d00a      	beq.n	800b89c <sbrk_aligned+0x34>
 800b886:	1cc4      	adds	r4, r0, #3
 800b888:	f024 0403 	bic.w	r4, r4, #3
 800b88c:	42a0      	cmp	r0, r4
 800b88e:	d007      	beq.n	800b8a0 <sbrk_aligned+0x38>
 800b890:	1a21      	subs	r1, r4, r0
 800b892:	4628      	mov	r0, r5
 800b894:	f001 fdc6 	bl	800d424 <_sbrk_r>
 800b898:	3001      	adds	r0, #1
 800b89a:	d101      	bne.n	800b8a0 <sbrk_aligned+0x38>
 800b89c:	f04f 34ff 	mov.w	r4, #4294967295
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	200005e0 	.word	0x200005e0

0800b8a8 <_malloc_r>:
 800b8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ac:	1ccd      	adds	r5, r1, #3
 800b8ae:	f025 0503 	bic.w	r5, r5, #3
 800b8b2:	3508      	adds	r5, #8
 800b8b4:	2d0c      	cmp	r5, #12
 800b8b6:	bf38      	it	cc
 800b8b8:	250c      	movcc	r5, #12
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	4607      	mov	r7, r0
 800b8be:	db01      	blt.n	800b8c4 <_malloc_r+0x1c>
 800b8c0:	42a9      	cmp	r1, r5
 800b8c2:	d905      	bls.n	800b8d0 <_malloc_r+0x28>
 800b8c4:	230c      	movs	r3, #12
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	2600      	movs	r6, #0
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b9a4 <_malloc_r+0xfc>
 800b8d4:	f000 f868 	bl	800b9a8 <__malloc_lock>
 800b8d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8dc:	461c      	mov	r4, r3
 800b8de:	bb5c      	cbnz	r4, 800b938 <_malloc_r+0x90>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f7ff ffc0 	bl	800b868 <sbrk_aligned>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	d155      	bne.n	800b99a <_malloc_r+0xf2>
 800b8ee:	f8d8 4000 	ldr.w	r4, [r8]
 800b8f2:	4626      	mov	r6, r4
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	d145      	bne.n	800b984 <_malloc_r+0xdc>
 800b8f8:	2c00      	cmp	r4, #0
 800b8fa:	d048      	beq.n	800b98e <_malloc_r+0xe6>
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	4631      	mov	r1, r6
 800b900:	4638      	mov	r0, r7
 800b902:	eb04 0903 	add.w	r9, r4, r3
 800b906:	f001 fd8d 	bl	800d424 <_sbrk_r>
 800b90a:	4581      	cmp	r9, r0
 800b90c:	d13f      	bne.n	800b98e <_malloc_r+0xe6>
 800b90e:	6821      	ldr	r1, [r4, #0]
 800b910:	1a6d      	subs	r5, r5, r1
 800b912:	4629      	mov	r1, r5
 800b914:	4638      	mov	r0, r7
 800b916:	f7ff ffa7 	bl	800b868 <sbrk_aligned>
 800b91a:	3001      	adds	r0, #1
 800b91c:	d037      	beq.n	800b98e <_malloc_r+0xe6>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	442b      	add	r3, r5
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	f8d8 3000 	ldr.w	r3, [r8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d038      	beq.n	800b99e <_malloc_r+0xf6>
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	42a2      	cmp	r2, r4
 800b930:	d12b      	bne.n	800b98a <_malloc_r+0xe2>
 800b932:	2200      	movs	r2, #0
 800b934:	605a      	str	r2, [r3, #4]
 800b936:	e00f      	b.n	800b958 <_malloc_r+0xb0>
 800b938:	6822      	ldr	r2, [r4, #0]
 800b93a:	1b52      	subs	r2, r2, r5
 800b93c:	d41f      	bmi.n	800b97e <_malloc_r+0xd6>
 800b93e:	2a0b      	cmp	r2, #11
 800b940:	d917      	bls.n	800b972 <_malloc_r+0xca>
 800b942:	1961      	adds	r1, r4, r5
 800b944:	42a3      	cmp	r3, r4
 800b946:	6025      	str	r5, [r4, #0]
 800b948:	bf18      	it	ne
 800b94a:	6059      	strne	r1, [r3, #4]
 800b94c:	6863      	ldr	r3, [r4, #4]
 800b94e:	bf08      	it	eq
 800b950:	f8c8 1000 	streq.w	r1, [r8]
 800b954:	5162      	str	r2, [r4, r5]
 800b956:	604b      	str	r3, [r1, #4]
 800b958:	4638      	mov	r0, r7
 800b95a:	f104 060b 	add.w	r6, r4, #11
 800b95e:	f000 f829 	bl	800b9b4 <__malloc_unlock>
 800b962:	f026 0607 	bic.w	r6, r6, #7
 800b966:	1d23      	adds	r3, r4, #4
 800b968:	1af2      	subs	r2, r6, r3
 800b96a:	d0ae      	beq.n	800b8ca <_malloc_r+0x22>
 800b96c:	1b9b      	subs	r3, r3, r6
 800b96e:	50a3      	str	r3, [r4, r2]
 800b970:	e7ab      	b.n	800b8ca <_malloc_r+0x22>
 800b972:	42a3      	cmp	r3, r4
 800b974:	6862      	ldr	r2, [r4, #4]
 800b976:	d1dd      	bne.n	800b934 <_malloc_r+0x8c>
 800b978:	f8c8 2000 	str.w	r2, [r8]
 800b97c:	e7ec      	b.n	800b958 <_malloc_r+0xb0>
 800b97e:	4623      	mov	r3, r4
 800b980:	6864      	ldr	r4, [r4, #4]
 800b982:	e7ac      	b.n	800b8de <_malloc_r+0x36>
 800b984:	4634      	mov	r4, r6
 800b986:	6876      	ldr	r6, [r6, #4]
 800b988:	e7b4      	b.n	800b8f4 <_malloc_r+0x4c>
 800b98a:	4613      	mov	r3, r2
 800b98c:	e7cc      	b.n	800b928 <_malloc_r+0x80>
 800b98e:	230c      	movs	r3, #12
 800b990:	603b      	str	r3, [r7, #0]
 800b992:	4638      	mov	r0, r7
 800b994:	f000 f80e 	bl	800b9b4 <__malloc_unlock>
 800b998:	e797      	b.n	800b8ca <_malloc_r+0x22>
 800b99a:	6025      	str	r5, [r4, #0]
 800b99c:	e7dc      	b.n	800b958 <_malloc_r+0xb0>
 800b99e:	605b      	str	r3, [r3, #4]
 800b9a0:	deff      	udf	#255	; 0xff
 800b9a2:	bf00      	nop
 800b9a4:	200005dc 	.word	0x200005dc

0800b9a8 <__malloc_lock>:
 800b9a8:	4801      	ldr	r0, [pc, #4]	; (800b9b0 <__malloc_lock+0x8>)
 800b9aa:	f7ff b8fe 	b.w	800abaa <__retarget_lock_acquire_recursive>
 800b9ae:	bf00      	nop
 800b9b0:	200005d8 	.word	0x200005d8

0800b9b4 <__malloc_unlock>:
 800b9b4:	4801      	ldr	r0, [pc, #4]	; (800b9bc <__malloc_unlock+0x8>)
 800b9b6:	f7ff b8f9 	b.w	800abac <__retarget_lock_release_recursive>
 800b9ba:	bf00      	nop
 800b9bc:	200005d8 	.word	0x200005d8

0800b9c0 <_Balloc>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	69c6      	ldr	r6, [r0, #28]
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	b976      	cbnz	r6, 800b9e8 <_Balloc+0x28>
 800b9ca:	2010      	movs	r0, #16
 800b9cc:	f7ff ff44 	bl	800b858 <malloc>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	61e0      	str	r0, [r4, #28]
 800b9d4:	b920      	cbnz	r0, 800b9e0 <_Balloc+0x20>
 800b9d6:	4b18      	ldr	r3, [pc, #96]	; (800ba38 <_Balloc+0x78>)
 800b9d8:	4818      	ldr	r0, [pc, #96]	; (800ba3c <_Balloc+0x7c>)
 800b9da:	216b      	movs	r1, #107	; 0x6b
 800b9dc:	f001 fd3c 	bl	800d458 <__assert_func>
 800b9e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9e4:	6006      	str	r6, [r0, #0]
 800b9e6:	60c6      	str	r6, [r0, #12]
 800b9e8:	69e6      	ldr	r6, [r4, #28]
 800b9ea:	68f3      	ldr	r3, [r6, #12]
 800b9ec:	b183      	cbz	r3, 800ba10 <_Balloc+0x50>
 800b9ee:	69e3      	ldr	r3, [r4, #28]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9f6:	b9b8      	cbnz	r0, 800ba28 <_Balloc+0x68>
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b9fe:	1d72      	adds	r2, r6, #5
 800ba00:	0092      	lsls	r2, r2, #2
 800ba02:	4620      	mov	r0, r4
 800ba04:	f001 fd46 	bl	800d494 <_calloc_r>
 800ba08:	b160      	cbz	r0, 800ba24 <_Balloc+0x64>
 800ba0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba0e:	e00e      	b.n	800ba2e <_Balloc+0x6e>
 800ba10:	2221      	movs	r2, #33	; 0x21
 800ba12:	2104      	movs	r1, #4
 800ba14:	4620      	mov	r0, r4
 800ba16:	f001 fd3d 	bl	800d494 <_calloc_r>
 800ba1a:	69e3      	ldr	r3, [r4, #28]
 800ba1c:	60f0      	str	r0, [r6, #12]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e4      	bne.n	800b9ee <_Balloc+0x2e>
 800ba24:	2000      	movs	r0, #0
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	6802      	ldr	r2, [r0, #0]
 800ba2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba34:	e7f7      	b.n	800ba26 <_Balloc+0x66>
 800ba36:	bf00      	nop
 800ba38:	08018ef6 	.word	0x08018ef6
 800ba3c:	08018f76 	.word	0x08018f76

0800ba40 <_Bfree>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	69c6      	ldr	r6, [r0, #28]
 800ba44:	4605      	mov	r5, r0
 800ba46:	460c      	mov	r4, r1
 800ba48:	b976      	cbnz	r6, 800ba68 <_Bfree+0x28>
 800ba4a:	2010      	movs	r0, #16
 800ba4c:	f7ff ff04 	bl	800b858 <malloc>
 800ba50:	4602      	mov	r2, r0
 800ba52:	61e8      	str	r0, [r5, #28]
 800ba54:	b920      	cbnz	r0, 800ba60 <_Bfree+0x20>
 800ba56:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <_Bfree+0x3c>)
 800ba58:	4809      	ldr	r0, [pc, #36]	; (800ba80 <_Bfree+0x40>)
 800ba5a:	218f      	movs	r1, #143	; 0x8f
 800ba5c:	f001 fcfc 	bl	800d458 <__assert_func>
 800ba60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba64:	6006      	str	r6, [r0, #0]
 800ba66:	60c6      	str	r6, [r0, #12]
 800ba68:	b13c      	cbz	r4, 800ba7a <_Bfree+0x3a>
 800ba6a:	69eb      	ldr	r3, [r5, #28]
 800ba6c:	6862      	ldr	r2, [r4, #4]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba74:	6021      	str	r1, [r4, #0]
 800ba76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	08018ef6 	.word	0x08018ef6
 800ba80:	08018f76 	.word	0x08018f76

0800ba84 <__multadd>:
 800ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba88:	690d      	ldr	r5, [r1, #16]
 800ba8a:	4607      	mov	r7, r0
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	461e      	mov	r6, r3
 800ba90:	f101 0c14 	add.w	ip, r1, #20
 800ba94:	2000      	movs	r0, #0
 800ba96:	f8dc 3000 	ldr.w	r3, [ip]
 800ba9a:	b299      	uxth	r1, r3
 800ba9c:	fb02 6101 	mla	r1, r2, r1, r6
 800baa0:	0c1e      	lsrs	r6, r3, #16
 800baa2:	0c0b      	lsrs	r3, r1, #16
 800baa4:	fb02 3306 	mla	r3, r2, r6, r3
 800baa8:	b289      	uxth	r1, r1
 800baaa:	3001      	adds	r0, #1
 800baac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bab0:	4285      	cmp	r5, r0
 800bab2:	f84c 1b04 	str.w	r1, [ip], #4
 800bab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800baba:	dcec      	bgt.n	800ba96 <__multadd+0x12>
 800babc:	b30e      	cbz	r6, 800bb02 <__multadd+0x7e>
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	42ab      	cmp	r3, r5
 800bac2:	dc19      	bgt.n	800baf8 <__multadd+0x74>
 800bac4:	6861      	ldr	r1, [r4, #4]
 800bac6:	4638      	mov	r0, r7
 800bac8:	3101      	adds	r1, #1
 800baca:	f7ff ff79 	bl	800b9c0 <_Balloc>
 800bace:	4680      	mov	r8, r0
 800bad0:	b928      	cbnz	r0, 800bade <__multadd+0x5a>
 800bad2:	4602      	mov	r2, r0
 800bad4:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <__multadd+0x84>)
 800bad6:	480d      	ldr	r0, [pc, #52]	; (800bb0c <__multadd+0x88>)
 800bad8:	21ba      	movs	r1, #186	; 0xba
 800bada:	f001 fcbd 	bl	800d458 <__assert_func>
 800bade:	6922      	ldr	r2, [r4, #16]
 800bae0:	3202      	adds	r2, #2
 800bae2:	f104 010c 	add.w	r1, r4, #12
 800bae6:	0092      	lsls	r2, r2, #2
 800bae8:	300c      	adds	r0, #12
 800baea:	f7ff f860 	bl	800abae <memcpy>
 800baee:	4621      	mov	r1, r4
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7ff ffa5 	bl	800ba40 <_Bfree>
 800baf6:	4644      	mov	r4, r8
 800baf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bafc:	3501      	adds	r5, #1
 800bafe:	615e      	str	r6, [r3, #20]
 800bb00:	6125      	str	r5, [r4, #16]
 800bb02:	4620      	mov	r0, r4
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	08018f65 	.word	0x08018f65
 800bb0c:	08018f76 	.word	0x08018f76

0800bb10 <__s2b>:
 800bb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb14:	460c      	mov	r4, r1
 800bb16:	4615      	mov	r5, r2
 800bb18:	461f      	mov	r7, r3
 800bb1a:	2209      	movs	r2, #9
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	4606      	mov	r6, r0
 800bb20:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb24:	2100      	movs	r1, #0
 800bb26:	2201      	movs	r2, #1
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	db09      	blt.n	800bb40 <__s2b+0x30>
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7ff ff47 	bl	800b9c0 <_Balloc>
 800bb32:	b940      	cbnz	r0, 800bb46 <__s2b+0x36>
 800bb34:	4602      	mov	r2, r0
 800bb36:	4b19      	ldr	r3, [pc, #100]	; (800bb9c <__s2b+0x8c>)
 800bb38:	4819      	ldr	r0, [pc, #100]	; (800bba0 <__s2b+0x90>)
 800bb3a:	21d3      	movs	r1, #211	; 0xd3
 800bb3c:	f001 fc8c 	bl	800d458 <__assert_func>
 800bb40:	0052      	lsls	r2, r2, #1
 800bb42:	3101      	adds	r1, #1
 800bb44:	e7f0      	b.n	800bb28 <__s2b+0x18>
 800bb46:	9b08      	ldr	r3, [sp, #32]
 800bb48:	6143      	str	r3, [r0, #20]
 800bb4a:	2d09      	cmp	r5, #9
 800bb4c:	f04f 0301 	mov.w	r3, #1
 800bb50:	6103      	str	r3, [r0, #16]
 800bb52:	dd16      	ble.n	800bb82 <__s2b+0x72>
 800bb54:	f104 0909 	add.w	r9, r4, #9
 800bb58:	46c8      	mov	r8, r9
 800bb5a:	442c      	add	r4, r5
 800bb5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb60:	4601      	mov	r1, r0
 800bb62:	3b30      	subs	r3, #48	; 0x30
 800bb64:	220a      	movs	r2, #10
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7ff ff8c 	bl	800ba84 <__multadd>
 800bb6c:	45a0      	cmp	r8, r4
 800bb6e:	d1f5      	bne.n	800bb5c <__s2b+0x4c>
 800bb70:	f1a5 0408 	sub.w	r4, r5, #8
 800bb74:	444c      	add	r4, r9
 800bb76:	1b2d      	subs	r5, r5, r4
 800bb78:	1963      	adds	r3, r4, r5
 800bb7a:	42bb      	cmp	r3, r7
 800bb7c:	db04      	blt.n	800bb88 <__s2b+0x78>
 800bb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb82:	340a      	adds	r4, #10
 800bb84:	2509      	movs	r5, #9
 800bb86:	e7f6      	b.n	800bb76 <__s2b+0x66>
 800bb88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	3b30      	subs	r3, #48	; 0x30
 800bb90:	220a      	movs	r2, #10
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ff76 	bl	800ba84 <__multadd>
 800bb98:	e7ee      	b.n	800bb78 <__s2b+0x68>
 800bb9a:	bf00      	nop
 800bb9c:	08018f65 	.word	0x08018f65
 800bba0:	08018f76 	.word	0x08018f76

0800bba4 <__hi0bits>:
 800bba4:	0c03      	lsrs	r3, r0, #16
 800bba6:	041b      	lsls	r3, r3, #16
 800bba8:	b9d3      	cbnz	r3, 800bbe0 <__hi0bits+0x3c>
 800bbaa:	0400      	lsls	r0, r0, #16
 800bbac:	2310      	movs	r3, #16
 800bbae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbb2:	bf04      	itt	eq
 800bbb4:	0200      	lsleq	r0, r0, #8
 800bbb6:	3308      	addeq	r3, #8
 800bbb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbbc:	bf04      	itt	eq
 800bbbe:	0100      	lsleq	r0, r0, #4
 800bbc0:	3304      	addeq	r3, #4
 800bbc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbc6:	bf04      	itt	eq
 800bbc8:	0080      	lsleq	r0, r0, #2
 800bbca:	3302      	addeq	r3, #2
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	db05      	blt.n	800bbdc <__hi0bits+0x38>
 800bbd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbd4:	f103 0301 	add.w	r3, r3, #1
 800bbd8:	bf08      	it	eq
 800bbda:	2320      	moveq	r3, #32
 800bbdc:	4618      	mov	r0, r3
 800bbde:	4770      	bx	lr
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e7e4      	b.n	800bbae <__hi0bits+0xa>

0800bbe4 <__lo0bits>:
 800bbe4:	6803      	ldr	r3, [r0, #0]
 800bbe6:	f013 0207 	ands.w	r2, r3, #7
 800bbea:	d00c      	beq.n	800bc06 <__lo0bits+0x22>
 800bbec:	07d9      	lsls	r1, r3, #31
 800bbee:	d422      	bmi.n	800bc36 <__lo0bits+0x52>
 800bbf0:	079a      	lsls	r2, r3, #30
 800bbf2:	bf49      	itett	mi
 800bbf4:	085b      	lsrmi	r3, r3, #1
 800bbf6:	089b      	lsrpl	r3, r3, #2
 800bbf8:	6003      	strmi	r3, [r0, #0]
 800bbfa:	2201      	movmi	r2, #1
 800bbfc:	bf5c      	itt	pl
 800bbfe:	6003      	strpl	r3, [r0, #0]
 800bc00:	2202      	movpl	r2, #2
 800bc02:	4610      	mov	r0, r2
 800bc04:	4770      	bx	lr
 800bc06:	b299      	uxth	r1, r3
 800bc08:	b909      	cbnz	r1, 800bc0e <__lo0bits+0x2a>
 800bc0a:	0c1b      	lsrs	r3, r3, #16
 800bc0c:	2210      	movs	r2, #16
 800bc0e:	b2d9      	uxtb	r1, r3
 800bc10:	b909      	cbnz	r1, 800bc16 <__lo0bits+0x32>
 800bc12:	3208      	adds	r2, #8
 800bc14:	0a1b      	lsrs	r3, r3, #8
 800bc16:	0719      	lsls	r1, r3, #28
 800bc18:	bf04      	itt	eq
 800bc1a:	091b      	lsreq	r3, r3, #4
 800bc1c:	3204      	addeq	r2, #4
 800bc1e:	0799      	lsls	r1, r3, #30
 800bc20:	bf04      	itt	eq
 800bc22:	089b      	lsreq	r3, r3, #2
 800bc24:	3202      	addeq	r2, #2
 800bc26:	07d9      	lsls	r1, r3, #31
 800bc28:	d403      	bmi.n	800bc32 <__lo0bits+0x4e>
 800bc2a:	085b      	lsrs	r3, r3, #1
 800bc2c:	f102 0201 	add.w	r2, r2, #1
 800bc30:	d003      	beq.n	800bc3a <__lo0bits+0x56>
 800bc32:	6003      	str	r3, [r0, #0]
 800bc34:	e7e5      	b.n	800bc02 <__lo0bits+0x1e>
 800bc36:	2200      	movs	r2, #0
 800bc38:	e7e3      	b.n	800bc02 <__lo0bits+0x1e>
 800bc3a:	2220      	movs	r2, #32
 800bc3c:	e7e1      	b.n	800bc02 <__lo0bits+0x1e>
	...

0800bc40 <__i2b>:
 800bc40:	b510      	push	{r4, lr}
 800bc42:	460c      	mov	r4, r1
 800bc44:	2101      	movs	r1, #1
 800bc46:	f7ff febb 	bl	800b9c0 <_Balloc>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	b928      	cbnz	r0, 800bc5a <__i2b+0x1a>
 800bc4e:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <__i2b+0x24>)
 800bc50:	4805      	ldr	r0, [pc, #20]	; (800bc68 <__i2b+0x28>)
 800bc52:	f240 1145 	movw	r1, #325	; 0x145
 800bc56:	f001 fbff 	bl	800d458 <__assert_func>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	6144      	str	r4, [r0, #20]
 800bc5e:	6103      	str	r3, [r0, #16]
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop
 800bc64:	08018f65 	.word	0x08018f65
 800bc68:	08018f76 	.word	0x08018f76

0800bc6c <__multiply>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	4691      	mov	r9, r2
 800bc72:	690a      	ldr	r2, [r1, #16]
 800bc74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	bfb8      	it	lt
 800bc7c:	460b      	movlt	r3, r1
 800bc7e:	460c      	mov	r4, r1
 800bc80:	bfbc      	itt	lt
 800bc82:	464c      	movlt	r4, r9
 800bc84:	4699      	movlt	r9, r3
 800bc86:	6927      	ldr	r7, [r4, #16]
 800bc88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc8c:	68a3      	ldr	r3, [r4, #8]
 800bc8e:	6861      	ldr	r1, [r4, #4]
 800bc90:	eb07 060a 	add.w	r6, r7, sl
 800bc94:	42b3      	cmp	r3, r6
 800bc96:	b085      	sub	sp, #20
 800bc98:	bfb8      	it	lt
 800bc9a:	3101      	addlt	r1, #1
 800bc9c:	f7ff fe90 	bl	800b9c0 <_Balloc>
 800bca0:	b930      	cbnz	r0, 800bcb0 <__multiply+0x44>
 800bca2:	4602      	mov	r2, r0
 800bca4:	4b44      	ldr	r3, [pc, #272]	; (800bdb8 <__multiply+0x14c>)
 800bca6:	4845      	ldr	r0, [pc, #276]	; (800bdbc <__multiply+0x150>)
 800bca8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bcac:	f001 fbd4 	bl	800d458 <__assert_func>
 800bcb0:	f100 0514 	add.w	r5, r0, #20
 800bcb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcb8:	462b      	mov	r3, r5
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4543      	cmp	r3, r8
 800bcbe:	d321      	bcc.n	800bd04 <__multiply+0x98>
 800bcc0:	f104 0314 	add.w	r3, r4, #20
 800bcc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcc8:	f109 0314 	add.w	r3, r9, #20
 800bccc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcd0:	9202      	str	r2, [sp, #8]
 800bcd2:	1b3a      	subs	r2, r7, r4
 800bcd4:	3a15      	subs	r2, #21
 800bcd6:	f022 0203 	bic.w	r2, r2, #3
 800bcda:	3204      	adds	r2, #4
 800bcdc:	f104 0115 	add.w	r1, r4, #21
 800bce0:	428f      	cmp	r7, r1
 800bce2:	bf38      	it	cc
 800bce4:	2204      	movcc	r2, #4
 800bce6:	9201      	str	r2, [sp, #4]
 800bce8:	9a02      	ldr	r2, [sp, #8]
 800bcea:	9303      	str	r3, [sp, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d80c      	bhi.n	800bd0a <__multiply+0x9e>
 800bcf0:	2e00      	cmp	r6, #0
 800bcf2:	dd03      	ble.n	800bcfc <__multiply+0x90>
 800bcf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d05b      	beq.n	800bdb4 <__multiply+0x148>
 800bcfc:	6106      	str	r6, [r0, #16]
 800bcfe:	b005      	add	sp, #20
 800bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	f843 2b04 	str.w	r2, [r3], #4
 800bd08:	e7d8      	b.n	800bcbc <__multiply+0x50>
 800bd0a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd0e:	f1ba 0f00 	cmp.w	sl, #0
 800bd12:	d024      	beq.n	800bd5e <__multiply+0xf2>
 800bd14:	f104 0e14 	add.w	lr, r4, #20
 800bd18:	46a9      	mov	r9, r5
 800bd1a:	f04f 0c00 	mov.w	ip, #0
 800bd1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd22:	f8d9 1000 	ldr.w	r1, [r9]
 800bd26:	fa1f fb82 	uxth.w	fp, r2
 800bd2a:	b289      	uxth	r1, r1
 800bd2c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd34:	f8d9 2000 	ldr.w	r2, [r9]
 800bd38:	4461      	add	r1, ip
 800bd3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd3e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd46:	b289      	uxth	r1, r1
 800bd48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd4c:	4577      	cmp	r7, lr
 800bd4e:	f849 1b04 	str.w	r1, [r9], #4
 800bd52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd56:	d8e2      	bhi.n	800bd1e <__multiply+0xb2>
 800bd58:	9a01      	ldr	r2, [sp, #4]
 800bd5a:	f845 c002 	str.w	ip, [r5, r2]
 800bd5e:	9a03      	ldr	r2, [sp, #12]
 800bd60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd64:	3304      	adds	r3, #4
 800bd66:	f1b9 0f00 	cmp.w	r9, #0
 800bd6a:	d021      	beq.n	800bdb0 <__multiply+0x144>
 800bd6c:	6829      	ldr	r1, [r5, #0]
 800bd6e:	f104 0c14 	add.w	ip, r4, #20
 800bd72:	46ae      	mov	lr, r5
 800bd74:	f04f 0a00 	mov.w	sl, #0
 800bd78:	f8bc b000 	ldrh.w	fp, [ip]
 800bd7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd80:	fb09 220b 	mla	r2, r9, fp, r2
 800bd84:	4452      	add	r2, sl
 800bd86:	b289      	uxth	r1, r1
 800bd88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd8c:	f84e 1b04 	str.w	r1, [lr], #4
 800bd90:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd98:	f8be 1000 	ldrh.w	r1, [lr]
 800bd9c:	fb09 110a 	mla	r1, r9, sl, r1
 800bda0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bda4:	4567      	cmp	r7, ip
 800bda6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdaa:	d8e5      	bhi.n	800bd78 <__multiply+0x10c>
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	50a9      	str	r1, [r5, r2]
 800bdb0:	3504      	adds	r5, #4
 800bdb2:	e799      	b.n	800bce8 <__multiply+0x7c>
 800bdb4:	3e01      	subs	r6, #1
 800bdb6:	e79b      	b.n	800bcf0 <__multiply+0x84>
 800bdb8:	08018f65 	.word	0x08018f65
 800bdbc:	08018f76 	.word	0x08018f76

0800bdc0 <__pow5mult>:
 800bdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc4:	4615      	mov	r5, r2
 800bdc6:	f012 0203 	ands.w	r2, r2, #3
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460f      	mov	r7, r1
 800bdce:	d007      	beq.n	800bde0 <__pow5mult+0x20>
 800bdd0:	4c25      	ldr	r4, [pc, #148]	; (800be68 <__pow5mult+0xa8>)
 800bdd2:	3a01      	subs	r2, #1
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdda:	f7ff fe53 	bl	800ba84 <__multadd>
 800bdde:	4607      	mov	r7, r0
 800bde0:	10ad      	asrs	r5, r5, #2
 800bde2:	d03d      	beq.n	800be60 <__pow5mult+0xa0>
 800bde4:	69f4      	ldr	r4, [r6, #28]
 800bde6:	b97c      	cbnz	r4, 800be08 <__pow5mult+0x48>
 800bde8:	2010      	movs	r0, #16
 800bdea:	f7ff fd35 	bl	800b858 <malloc>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	61f0      	str	r0, [r6, #28]
 800bdf2:	b928      	cbnz	r0, 800be00 <__pow5mult+0x40>
 800bdf4:	4b1d      	ldr	r3, [pc, #116]	; (800be6c <__pow5mult+0xac>)
 800bdf6:	481e      	ldr	r0, [pc, #120]	; (800be70 <__pow5mult+0xb0>)
 800bdf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bdfc:	f001 fb2c 	bl	800d458 <__assert_func>
 800be00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be04:	6004      	str	r4, [r0, #0]
 800be06:	60c4      	str	r4, [r0, #12]
 800be08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be10:	b94c      	cbnz	r4, 800be26 <__pow5mult+0x66>
 800be12:	f240 2171 	movw	r1, #625	; 0x271
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff ff12 	bl	800bc40 <__i2b>
 800be1c:	2300      	movs	r3, #0
 800be1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be22:	4604      	mov	r4, r0
 800be24:	6003      	str	r3, [r0, #0]
 800be26:	f04f 0900 	mov.w	r9, #0
 800be2a:	07eb      	lsls	r3, r5, #31
 800be2c:	d50a      	bpl.n	800be44 <__pow5mult+0x84>
 800be2e:	4639      	mov	r1, r7
 800be30:	4622      	mov	r2, r4
 800be32:	4630      	mov	r0, r6
 800be34:	f7ff ff1a 	bl	800bc6c <__multiply>
 800be38:	4639      	mov	r1, r7
 800be3a:	4680      	mov	r8, r0
 800be3c:	4630      	mov	r0, r6
 800be3e:	f7ff fdff 	bl	800ba40 <_Bfree>
 800be42:	4647      	mov	r7, r8
 800be44:	106d      	asrs	r5, r5, #1
 800be46:	d00b      	beq.n	800be60 <__pow5mult+0xa0>
 800be48:	6820      	ldr	r0, [r4, #0]
 800be4a:	b938      	cbnz	r0, 800be5c <__pow5mult+0x9c>
 800be4c:	4622      	mov	r2, r4
 800be4e:	4621      	mov	r1, r4
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff ff0b 	bl	800bc6c <__multiply>
 800be56:	6020      	str	r0, [r4, #0]
 800be58:	f8c0 9000 	str.w	r9, [r0]
 800be5c:	4604      	mov	r4, r0
 800be5e:	e7e4      	b.n	800be2a <__pow5mult+0x6a>
 800be60:	4638      	mov	r0, r7
 800be62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be66:	bf00      	nop
 800be68:	080190c0 	.word	0x080190c0
 800be6c:	08018ef6 	.word	0x08018ef6
 800be70:	08018f76 	.word	0x08018f76

0800be74 <__lshift>:
 800be74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be78:	460c      	mov	r4, r1
 800be7a:	6849      	ldr	r1, [r1, #4]
 800be7c:	6923      	ldr	r3, [r4, #16]
 800be7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	4607      	mov	r7, r0
 800be86:	4691      	mov	r9, r2
 800be88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be8c:	f108 0601 	add.w	r6, r8, #1
 800be90:	42b3      	cmp	r3, r6
 800be92:	db0b      	blt.n	800beac <__lshift+0x38>
 800be94:	4638      	mov	r0, r7
 800be96:	f7ff fd93 	bl	800b9c0 <_Balloc>
 800be9a:	4605      	mov	r5, r0
 800be9c:	b948      	cbnz	r0, 800beb2 <__lshift+0x3e>
 800be9e:	4602      	mov	r2, r0
 800bea0:	4b28      	ldr	r3, [pc, #160]	; (800bf44 <__lshift+0xd0>)
 800bea2:	4829      	ldr	r0, [pc, #164]	; (800bf48 <__lshift+0xd4>)
 800bea4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bea8:	f001 fad6 	bl	800d458 <__assert_func>
 800beac:	3101      	adds	r1, #1
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	e7ee      	b.n	800be90 <__lshift+0x1c>
 800beb2:	2300      	movs	r3, #0
 800beb4:	f100 0114 	add.w	r1, r0, #20
 800beb8:	f100 0210 	add.w	r2, r0, #16
 800bebc:	4618      	mov	r0, r3
 800bebe:	4553      	cmp	r3, sl
 800bec0:	db33      	blt.n	800bf2a <__lshift+0xb6>
 800bec2:	6920      	ldr	r0, [r4, #16]
 800bec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bec8:	f104 0314 	add.w	r3, r4, #20
 800becc:	f019 091f 	ands.w	r9, r9, #31
 800bed0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bed4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bed8:	d02b      	beq.n	800bf32 <__lshift+0xbe>
 800beda:	f1c9 0e20 	rsb	lr, r9, #32
 800bede:	468a      	mov	sl, r1
 800bee0:	2200      	movs	r2, #0
 800bee2:	6818      	ldr	r0, [r3, #0]
 800bee4:	fa00 f009 	lsl.w	r0, r0, r9
 800bee8:	4310      	orrs	r0, r2
 800beea:	f84a 0b04 	str.w	r0, [sl], #4
 800beee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef2:	459c      	cmp	ip, r3
 800bef4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bef8:	d8f3      	bhi.n	800bee2 <__lshift+0x6e>
 800befa:	ebac 0304 	sub.w	r3, ip, r4
 800befe:	3b15      	subs	r3, #21
 800bf00:	f023 0303 	bic.w	r3, r3, #3
 800bf04:	3304      	adds	r3, #4
 800bf06:	f104 0015 	add.w	r0, r4, #21
 800bf0a:	4584      	cmp	ip, r0
 800bf0c:	bf38      	it	cc
 800bf0e:	2304      	movcc	r3, #4
 800bf10:	50ca      	str	r2, [r1, r3]
 800bf12:	b10a      	cbz	r2, 800bf18 <__lshift+0xa4>
 800bf14:	f108 0602 	add.w	r6, r8, #2
 800bf18:	3e01      	subs	r6, #1
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	612e      	str	r6, [r5, #16]
 800bf1e:	4621      	mov	r1, r4
 800bf20:	f7ff fd8e 	bl	800ba40 <_Bfree>
 800bf24:	4628      	mov	r0, r5
 800bf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf2e:	3301      	adds	r3, #1
 800bf30:	e7c5      	b.n	800bebe <__lshift+0x4a>
 800bf32:	3904      	subs	r1, #4
 800bf34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf38:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf3c:	459c      	cmp	ip, r3
 800bf3e:	d8f9      	bhi.n	800bf34 <__lshift+0xc0>
 800bf40:	e7ea      	b.n	800bf18 <__lshift+0xa4>
 800bf42:	bf00      	nop
 800bf44:	08018f65 	.word	0x08018f65
 800bf48:	08018f76 	.word	0x08018f76

0800bf4c <__mcmp>:
 800bf4c:	b530      	push	{r4, r5, lr}
 800bf4e:	6902      	ldr	r2, [r0, #16]
 800bf50:	690c      	ldr	r4, [r1, #16]
 800bf52:	1b12      	subs	r2, r2, r4
 800bf54:	d10e      	bne.n	800bf74 <__mcmp+0x28>
 800bf56:	f100 0314 	add.w	r3, r0, #20
 800bf5a:	3114      	adds	r1, #20
 800bf5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf6c:	42a5      	cmp	r5, r4
 800bf6e:	d003      	beq.n	800bf78 <__mcmp+0x2c>
 800bf70:	d305      	bcc.n	800bf7e <__mcmp+0x32>
 800bf72:	2201      	movs	r2, #1
 800bf74:	4610      	mov	r0, r2
 800bf76:	bd30      	pop	{r4, r5, pc}
 800bf78:	4283      	cmp	r3, r0
 800bf7a:	d3f3      	bcc.n	800bf64 <__mcmp+0x18>
 800bf7c:	e7fa      	b.n	800bf74 <__mcmp+0x28>
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf82:	e7f7      	b.n	800bf74 <__mcmp+0x28>

0800bf84 <__mdiff>:
 800bf84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf88:	460c      	mov	r4, r1
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4690      	mov	r8, r2
 800bf92:	f7ff ffdb 	bl	800bf4c <__mcmp>
 800bf96:	1e05      	subs	r5, r0, #0
 800bf98:	d110      	bne.n	800bfbc <__mdiff+0x38>
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f7ff fd0f 	bl	800b9c0 <_Balloc>
 800bfa2:	b930      	cbnz	r0, 800bfb2 <__mdiff+0x2e>
 800bfa4:	4b3a      	ldr	r3, [pc, #232]	; (800c090 <__mdiff+0x10c>)
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	f240 2137 	movw	r1, #567	; 0x237
 800bfac:	4839      	ldr	r0, [pc, #228]	; (800c094 <__mdiff+0x110>)
 800bfae:	f001 fa53 	bl	800d458 <__assert_func>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbc:	bfa4      	itt	ge
 800bfbe:	4643      	movge	r3, r8
 800bfc0:	46a0      	movge	r8, r4
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfc8:	bfa6      	itte	ge
 800bfca:	461c      	movge	r4, r3
 800bfcc:	2500      	movge	r5, #0
 800bfce:	2501      	movlt	r5, #1
 800bfd0:	f7ff fcf6 	bl	800b9c0 <_Balloc>
 800bfd4:	b920      	cbnz	r0, 800bfe0 <__mdiff+0x5c>
 800bfd6:	4b2e      	ldr	r3, [pc, #184]	; (800c090 <__mdiff+0x10c>)
 800bfd8:	4602      	mov	r2, r0
 800bfda:	f240 2145 	movw	r1, #581	; 0x245
 800bfde:	e7e5      	b.n	800bfac <__mdiff+0x28>
 800bfe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfe4:	6926      	ldr	r6, [r4, #16]
 800bfe6:	60c5      	str	r5, [r0, #12]
 800bfe8:	f104 0914 	add.w	r9, r4, #20
 800bfec:	f108 0514 	add.w	r5, r8, #20
 800bff0:	f100 0e14 	add.w	lr, r0, #20
 800bff4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bffc:	f108 0210 	add.w	r2, r8, #16
 800c000:	46f2      	mov	sl, lr
 800c002:	2100      	movs	r1, #0
 800c004:	f859 3b04 	ldr.w	r3, [r9], #4
 800c008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c00c:	fa11 f88b 	uxtah	r8, r1, fp
 800c010:	b299      	uxth	r1, r3
 800c012:	0c1b      	lsrs	r3, r3, #16
 800c014:	eba8 0801 	sub.w	r8, r8, r1
 800c018:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c01c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c020:	fa1f f888 	uxth.w	r8, r8
 800c024:	1419      	asrs	r1, r3, #16
 800c026:	454e      	cmp	r6, r9
 800c028:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c02c:	f84a 3b04 	str.w	r3, [sl], #4
 800c030:	d8e8      	bhi.n	800c004 <__mdiff+0x80>
 800c032:	1b33      	subs	r3, r6, r4
 800c034:	3b15      	subs	r3, #21
 800c036:	f023 0303 	bic.w	r3, r3, #3
 800c03a:	3304      	adds	r3, #4
 800c03c:	3415      	adds	r4, #21
 800c03e:	42a6      	cmp	r6, r4
 800c040:	bf38      	it	cc
 800c042:	2304      	movcc	r3, #4
 800c044:	441d      	add	r5, r3
 800c046:	4473      	add	r3, lr
 800c048:	469e      	mov	lr, r3
 800c04a:	462e      	mov	r6, r5
 800c04c:	4566      	cmp	r6, ip
 800c04e:	d30e      	bcc.n	800c06e <__mdiff+0xea>
 800c050:	f10c 0203 	add.w	r2, ip, #3
 800c054:	1b52      	subs	r2, r2, r5
 800c056:	f022 0203 	bic.w	r2, r2, #3
 800c05a:	3d03      	subs	r5, #3
 800c05c:	45ac      	cmp	ip, r5
 800c05e:	bf38      	it	cc
 800c060:	2200      	movcc	r2, #0
 800c062:	4413      	add	r3, r2
 800c064:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c068:	b17a      	cbz	r2, 800c08a <__mdiff+0x106>
 800c06a:	6107      	str	r7, [r0, #16]
 800c06c:	e7a4      	b.n	800bfb8 <__mdiff+0x34>
 800c06e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c072:	fa11 f288 	uxtah	r2, r1, r8
 800c076:	1414      	asrs	r4, r2, #16
 800c078:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c07c:	b292      	uxth	r2, r2
 800c07e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c082:	f84e 2b04 	str.w	r2, [lr], #4
 800c086:	1421      	asrs	r1, r4, #16
 800c088:	e7e0      	b.n	800c04c <__mdiff+0xc8>
 800c08a:	3f01      	subs	r7, #1
 800c08c:	e7ea      	b.n	800c064 <__mdiff+0xe0>
 800c08e:	bf00      	nop
 800c090:	08018f65 	.word	0x08018f65
 800c094:	08018f76 	.word	0x08018f76

0800c098 <__ulp>:
 800c098:	b082      	sub	sp, #8
 800c09a:	ed8d 0b00 	vstr	d0, [sp]
 800c09e:	9a01      	ldr	r2, [sp, #4]
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <__ulp+0x48>)
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dc08      	bgt.n	800c0be <__ulp+0x26>
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c0b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0b6:	da04      	bge.n	800c0c2 <__ulp+0x2a>
 800c0b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0bc:	4113      	asrs	r3, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	e008      	b.n	800c0d4 <__ulp+0x3c>
 800c0c2:	f1a2 0314 	sub.w	r3, r2, #20
 800c0c6:	2b1e      	cmp	r3, #30
 800c0c8:	bfda      	itte	le
 800c0ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c0ce:	40da      	lsrle	r2, r3
 800c0d0:	2201      	movgt	r2, #1
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	ec41 0b10 	vmov	d0, r0, r1
 800c0dc:	b002      	add	sp, #8
 800c0de:	4770      	bx	lr
 800c0e0:	7ff00000 	.word	0x7ff00000

0800c0e4 <__b2d>:
 800c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e8:	6906      	ldr	r6, [r0, #16]
 800c0ea:	f100 0814 	add.w	r8, r0, #20
 800c0ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c0f2:	1f37      	subs	r7, r6, #4
 800c0f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f7ff fd53 	bl	800bba4 <__hi0bits>
 800c0fe:	f1c0 0320 	rsb	r3, r0, #32
 800c102:	280a      	cmp	r0, #10
 800c104:	600b      	str	r3, [r1, #0]
 800c106:	491b      	ldr	r1, [pc, #108]	; (800c174 <__b2d+0x90>)
 800c108:	dc15      	bgt.n	800c136 <__b2d+0x52>
 800c10a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c10e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c112:	45b8      	cmp	r8, r7
 800c114:	ea43 0501 	orr.w	r5, r3, r1
 800c118:	bf34      	ite	cc
 800c11a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c11e:	2300      	movcs	r3, #0
 800c120:	3015      	adds	r0, #21
 800c122:	fa02 f000 	lsl.w	r0, r2, r0
 800c126:	fa23 f30c 	lsr.w	r3, r3, ip
 800c12a:	4303      	orrs	r3, r0
 800c12c:	461c      	mov	r4, r3
 800c12e:	ec45 4b10 	vmov	d0, r4, r5
 800c132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c136:	45b8      	cmp	r8, r7
 800c138:	bf3a      	itte	cc
 800c13a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c13e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c142:	2300      	movcs	r3, #0
 800c144:	380b      	subs	r0, #11
 800c146:	d012      	beq.n	800c16e <__b2d+0x8a>
 800c148:	f1c0 0120 	rsb	r1, r0, #32
 800c14c:	fa23 f401 	lsr.w	r4, r3, r1
 800c150:	4082      	lsls	r2, r0
 800c152:	4322      	orrs	r2, r4
 800c154:	4547      	cmp	r7, r8
 800c156:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c15a:	bf8c      	ite	hi
 800c15c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c160:	2200      	movls	r2, #0
 800c162:	4083      	lsls	r3, r0
 800c164:	40ca      	lsrs	r2, r1
 800c166:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c16a:	4313      	orrs	r3, r2
 800c16c:	e7de      	b.n	800c12c <__b2d+0x48>
 800c16e:	ea42 0501 	orr.w	r5, r2, r1
 800c172:	e7db      	b.n	800c12c <__b2d+0x48>
 800c174:	3ff00000 	.word	0x3ff00000

0800c178 <__d2b>:
 800c178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c17c:	460f      	mov	r7, r1
 800c17e:	2101      	movs	r1, #1
 800c180:	ec59 8b10 	vmov	r8, r9, d0
 800c184:	4616      	mov	r6, r2
 800c186:	f7ff fc1b 	bl	800b9c0 <_Balloc>
 800c18a:	4604      	mov	r4, r0
 800c18c:	b930      	cbnz	r0, 800c19c <__d2b+0x24>
 800c18e:	4602      	mov	r2, r0
 800c190:	4b24      	ldr	r3, [pc, #144]	; (800c224 <__d2b+0xac>)
 800c192:	4825      	ldr	r0, [pc, #148]	; (800c228 <__d2b+0xb0>)
 800c194:	f240 310f 	movw	r1, #783	; 0x30f
 800c198:	f001 f95e 	bl	800d458 <__assert_func>
 800c19c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1a4:	bb2d      	cbnz	r5, 800c1f2 <__d2b+0x7a>
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c1ac:	d026      	beq.n	800c1fc <__d2b+0x84>
 800c1ae:	4668      	mov	r0, sp
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	f7ff fd17 	bl	800bbe4 <__lo0bits>
 800c1b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c1ba:	b1e8      	cbz	r0, 800c1f8 <__d2b+0x80>
 800c1bc:	f1c0 0320 	rsb	r3, r0, #32
 800c1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	40c2      	lsrs	r2, r0
 800c1c8:	6163      	str	r3, [r4, #20]
 800c1ca:	9201      	str	r2, [sp, #4]
 800c1cc:	9b01      	ldr	r3, [sp, #4]
 800c1ce:	61a3      	str	r3, [r4, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	bf14      	ite	ne
 800c1d4:	2202      	movne	r2, #2
 800c1d6:	2201      	moveq	r2, #1
 800c1d8:	6122      	str	r2, [r4, #16]
 800c1da:	b1bd      	cbz	r5, 800c20c <__d2b+0x94>
 800c1dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1e0:	4405      	add	r5, r0
 800c1e2:	603d      	str	r5, [r7, #0]
 800c1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1e8:	6030      	str	r0, [r6, #0]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	b003      	add	sp, #12
 800c1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1f6:	e7d6      	b.n	800c1a6 <__d2b+0x2e>
 800c1f8:	6161      	str	r1, [r4, #20]
 800c1fa:	e7e7      	b.n	800c1cc <__d2b+0x54>
 800c1fc:	a801      	add	r0, sp, #4
 800c1fe:	f7ff fcf1 	bl	800bbe4 <__lo0bits>
 800c202:	9b01      	ldr	r3, [sp, #4]
 800c204:	6163      	str	r3, [r4, #20]
 800c206:	3020      	adds	r0, #32
 800c208:	2201      	movs	r2, #1
 800c20a:	e7e5      	b.n	800c1d8 <__d2b+0x60>
 800c20c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c210:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c214:	6038      	str	r0, [r7, #0]
 800c216:	6918      	ldr	r0, [r3, #16]
 800c218:	f7ff fcc4 	bl	800bba4 <__hi0bits>
 800c21c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c220:	e7e2      	b.n	800c1e8 <__d2b+0x70>
 800c222:	bf00      	nop
 800c224:	08018f65 	.word	0x08018f65
 800c228:	08018f76 	.word	0x08018f76

0800c22c <__ratio>:
 800c22c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	4688      	mov	r8, r1
 800c232:	4669      	mov	r1, sp
 800c234:	4681      	mov	r9, r0
 800c236:	f7ff ff55 	bl	800c0e4 <__b2d>
 800c23a:	a901      	add	r1, sp, #4
 800c23c:	4640      	mov	r0, r8
 800c23e:	ec55 4b10 	vmov	r4, r5, d0
 800c242:	ee10 aa10 	vmov	sl, s0
 800c246:	f7ff ff4d 	bl	800c0e4 <__b2d>
 800c24a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c24e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c252:	1ad2      	subs	r2, r2, r3
 800c254:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c258:	1a5b      	subs	r3, r3, r1
 800c25a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c25e:	ec57 6b10 	vmov	r6, r7, d0
 800c262:	2b00      	cmp	r3, #0
 800c264:	bfd6      	itet	le
 800c266:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c26a:	462a      	movgt	r2, r5
 800c26c:	463a      	movle	r2, r7
 800c26e:	46ab      	mov	fp, r5
 800c270:	bfd6      	itet	le
 800c272:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c276:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c27a:	ee00 3a90 	vmovle	s1, r3
 800c27e:	ec4b ab17 	vmov	d7, sl, fp
 800c282:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c286:	b003      	add	sp, #12
 800c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c28c <__copybits>:
 800c28c:	3901      	subs	r1, #1
 800c28e:	b570      	push	{r4, r5, r6, lr}
 800c290:	1149      	asrs	r1, r1, #5
 800c292:	6914      	ldr	r4, [r2, #16]
 800c294:	3101      	adds	r1, #1
 800c296:	f102 0314 	add.w	r3, r2, #20
 800c29a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c29e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2a2:	1f05      	subs	r5, r0, #4
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	d30c      	bcc.n	800c2c2 <__copybits+0x36>
 800c2a8:	1aa3      	subs	r3, r4, r2
 800c2aa:	3b11      	subs	r3, #17
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	3211      	adds	r2, #17
 800c2b2:	42a2      	cmp	r2, r4
 800c2b4:	bf88      	it	hi
 800c2b6:	2300      	movhi	r3, #0
 800c2b8:	4418      	add	r0, r3
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4288      	cmp	r0, r1
 800c2be:	d305      	bcc.n	800c2cc <__copybits+0x40>
 800c2c0:	bd70      	pop	{r4, r5, r6, pc}
 800c2c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2ca:	e7eb      	b.n	800c2a4 <__copybits+0x18>
 800c2cc:	f840 3b04 	str.w	r3, [r0], #4
 800c2d0:	e7f4      	b.n	800c2bc <__copybits+0x30>

0800c2d2 <__any_on>:
 800c2d2:	f100 0214 	add.w	r2, r0, #20
 800c2d6:	6900      	ldr	r0, [r0, #16]
 800c2d8:	114b      	asrs	r3, r1, #5
 800c2da:	4298      	cmp	r0, r3
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	db11      	blt.n	800c304 <__any_on+0x32>
 800c2e0:	dd0a      	ble.n	800c2f8 <__any_on+0x26>
 800c2e2:	f011 011f 	ands.w	r1, r1, #31
 800c2e6:	d007      	beq.n	800c2f8 <__any_on+0x26>
 800c2e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2ec:	fa24 f001 	lsr.w	r0, r4, r1
 800c2f0:	fa00 f101 	lsl.w	r1, r0, r1
 800c2f4:	428c      	cmp	r4, r1
 800c2f6:	d10b      	bne.n	800c310 <__any_on+0x3e>
 800c2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d803      	bhi.n	800c308 <__any_on+0x36>
 800c300:	2000      	movs	r0, #0
 800c302:	bd10      	pop	{r4, pc}
 800c304:	4603      	mov	r3, r0
 800c306:	e7f7      	b.n	800c2f8 <__any_on+0x26>
 800c308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c30c:	2900      	cmp	r1, #0
 800c30e:	d0f5      	beq.n	800c2fc <__any_on+0x2a>
 800c310:	2001      	movs	r0, #1
 800c312:	e7f6      	b.n	800c302 <__any_on+0x30>

0800c314 <sulp>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	4604      	mov	r4, r0
 800c318:	460d      	mov	r5, r1
 800c31a:	4616      	mov	r6, r2
 800c31c:	ec45 4b10 	vmov	d0, r4, r5
 800c320:	f7ff feba 	bl	800c098 <__ulp>
 800c324:	b17e      	cbz	r6, 800c346 <sulp+0x32>
 800c326:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c32a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dd09      	ble.n	800c346 <sulp+0x32>
 800c332:	051b      	lsls	r3, r3, #20
 800c334:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c338:	2000      	movs	r0, #0
 800c33a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c33e:	ec41 0b17 	vmov	d7, r0, r1
 800c342:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c346:	bd70      	pop	{r4, r5, r6, pc}

0800c348 <_strtod_l>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	ed2d 8b0e 	vpush	{d8-d14}
 800c350:	b097      	sub	sp, #92	; 0x5c
 800c352:	4604      	mov	r4, r0
 800c354:	920d      	str	r2, [sp, #52]	; 0x34
 800c356:	2200      	movs	r2, #0
 800c358:	9212      	str	r2, [sp, #72]	; 0x48
 800c35a:	468a      	mov	sl, r1
 800c35c:	f04f 0800 	mov.w	r8, #0
 800c360:	f04f 0900 	mov.w	r9, #0
 800c364:	460a      	mov	r2, r1
 800c366:	9211      	str	r2, [sp, #68]	; 0x44
 800c368:	7811      	ldrb	r1, [r2, #0]
 800c36a:	292b      	cmp	r1, #43	; 0x2b
 800c36c:	d04c      	beq.n	800c408 <_strtod_l+0xc0>
 800c36e:	d839      	bhi.n	800c3e4 <_strtod_l+0x9c>
 800c370:	290d      	cmp	r1, #13
 800c372:	d833      	bhi.n	800c3dc <_strtod_l+0x94>
 800c374:	2908      	cmp	r1, #8
 800c376:	d833      	bhi.n	800c3e0 <_strtod_l+0x98>
 800c378:	2900      	cmp	r1, #0
 800c37a:	d03c      	beq.n	800c3f6 <_strtod_l+0xae>
 800c37c:	2200      	movs	r2, #0
 800c37e:	9208      	str	r2, [sp, #32]
 800c380:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c382:	7832      	ldrb	r2, [r6, #0]
 800c384:	2a30      	cmp	r2, #48	; 0x30
 800c386:	f040 80b8 	bne.w	800c4fa <_strtod_l+0x1b2>
 800c38a:	7872      	ldrb	r2, [r6, #1]
 800c38c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c390:	2a58      	cmp	r2, #88	; 0x58
 800c392:	d170      	bne.n	800c476 <_strtod_l+0x12e>
 800c394:	9302      	str	r3, [sp, #8]
 800c396:	9b08      	ldr	r3, [sp, #32]
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	ab12      	add	r3, sp, #72	; 0x48
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	4a91      	ldr	r2, [pc, #580]	; (800c5e4 <_strtod_l+0x29c>)
 800c3a0:	ab13      	add	r3, sp, #76	; 0x4c
 800c3a2:	a911      	add	r1, sp, #68	; 0x44
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f001 f8f3 	bl	800d590 <__gethex>
 800c3aa:	f010 070f 	ands.w	r7, r0, #15
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	d005      	beq.n	800c3be <_strtod_l+0x76>
 800c3b2:	2f06      	cmp	r7, #6
 800c3b4:	d12a      	bne.n	800c40c <_strtod_l+0xc4>
 800c3b6:	3601      	adds	r6, #1
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9611      	str	r6, [sp, #68]	; 0x44
 800c3bc:	9308      	str	r3, [sp, #32]
 800c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f040 8555 	bne.w	800ce70 <_strtod_l+0xb28>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	ec49 8b10 	vmov	d0, r8, r9
 800c3cc:	b1cb      	cbz	r3, 800c402 <_strtod_l+0xba>
 800c3ce:	eeb1 0b40 	vneg.f64	d0, d0
 800c3d2:	b017      	add	sp, #92	; 0x5c
 800c3d4:	ecbd 8b0e 	vpop	{d8-d14}
 800c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3dc:	2920      	cmp	r1, #32
 800c3de:	d1cd      	bne.n	800c37c <_strtod_l+0x34>
 800c3e0:	3201      	adds	r2, #1
 800c3e2:	e7c0      	b.n	800c366 <_strtod_l+0x1e>
 800c3e4:	292d      	cmp	r1, #45	; 0x2d
 800c3e6:	d1c9      	bne.n	800c37c <_strtod_l+0x34>
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	9108      	str	r1, [sp, #32]
 800c3ec:	1c51      	adds	r1, r2, #1
 800c3ee:	9111      	str	r1, [sp, #68]	; 0x44
 800c3f0:	7852      	ldrb	r2, [r2, #1]
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	d1c4      	bne.n	800c380 <_strtod_l+0x38>
 800c3f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3f8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f040 8535 	bne.w	800ce6c <_strtod_l+0xb24>
 800c402:	ec49 8b10 	vmov	d0, r8, r9
 800c406:	e7e4      	b.n	800c3d2 <_strtod_l+0x8a>
 800c408:	2100      	movs	r1, #0
 800c40a:	e7ee      	b.n	800c3ea <_strtod_l+0xa2>
 800c40c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c40e:	b13a      	cbz	r2, 800c420 <_strtod_l+0xd8>
 800c410:	2135      	movs	r1, #53	; 0x35
 800c412:	a814      	add	r0, sp, #80	; 0x50
 800c414:	f7ff ff3a 	bl	800c28c <__copybits>
 800c418:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff fb10 	bl	800ba40 <_Bfree>
 800c420:	1e7b      	subs	r3, r7, #1
 800c422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c424:	2b04      	cmp	r3, #4
 800c426:	d806      	bhi.n	800c436 <_strtod_l+0xee>
 800c428:	e8df f003 	tbb	[pc, r3]
 800c42c:	201d0314 	.word	0x201d0314
 800c430:	14          	.byte	0x14
 800c431:	00          	.byte	0x00
 800c432:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800c436:	05eb      	lsls	r3, r5, #23
 800c438:	bf48      	it	mi
 800c43a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c43e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c442:	0d1b      	lsrs	r3, r3, #20
 800c444:	051b      	lsls	r3, r3, #20
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1b9      	bne.n	800c3be <_strtod_l+0x76>
 800c44a:	f7fe fb83 	bl	800ab54 <__errno>
 800c44e:	2322      	movs	r3, #34	; 0x22
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	e7b4      	b.n	800c3be <_strtod_l+0x76>
 800c454:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800c458:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c45c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c460:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c464:	e7e7      	b.n	800c436 <_strtod_l+0xee>
 800c466:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c5ec <_strtod_l+0x2a4>
 800c46a:	e7e4      	b.n	800c436 <_strtod_l+0xee>
 800c46c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c470:	f04f 38ff 	mov.w	r8, #4294967295
 800c474:	e7df      	b.n	800c436 <_strtod_l+0xee>
 800c476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	9211      	str	r2, [sp, #68]	; 0x44
 800c47c:	785b      	ldrb	r3, [r3, #1]
 800c47e:	2b30      	cmp	r3, #48	; 0x30
 800c480:	d0f9      	beq.n	800c476 <_strtod_l+0x12e>
 800c482:	2b00      	cmp	r3, #0
 800c484:	d09b      	beq.n	800c3be <_strtod_l+0x76>
 800c486:	2301      	movs	r3, #1
 800c488:	9306      	str	r3, [sp, #24]
 800c48a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c48c:	9309      	str	r3, [sp, #36]	; 0x24
 800c48e:	2300      	movs	r3, #0
 800c490:	9305      	str	r3, [sp, #20]
 800c492:	9307      	str	r3, [sp, #28]
 800c494:	461e      	mov	r6, r3
 800c496:	220a      	movs	r2, #10
 800c498:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c49a:	7805      	ldrb	r5, [r0, #0]
 800c49c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c4a0:	b2d9      	uxtb	r1, r3
 800c4a2:	2909      	cmp	r1, #9
 800c4a4:	d92b      	bls.n	800c4fe <_strtod_l+0x1b6>
 800c4a6:	4950      	ldr	r1, [pc, #320]	; (800c5e8 <_strtod_l+0x2a0>)
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f000 ffa9 	bl	800d400 <strncmp>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d035      	beq.n	800c51e <_strtod_l+0x1d6>
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	4633      	mov	r3, r6
 800c4b8:	4683      	mov	fp, r0
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	2a65      	cmp	r2, #101	; 0x65
 800c4be:	d001      	beq.n	800c4c4 <_strtod_l+0x17c>
 800c4c0:	2a45      	cmp	r2, #69	; 0x45
 800c4c2:	d118      	bne.n	800c4f6 <_strtod_l+0x1ae>
 800c4c4:	b91b      	cbnz	r3, 800c4ce <_strtod_l+0x186>
 800c4c6:	9b06      	ldr	r3, [sp, #24]
 800c4c8:	4303      	orrs	r3, r0
 800c4ca:	d094      	beq.n	800c3f6 <_strtod_l+0xae>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c4d2:	f10a 0201 	add.w	r2, sl, #1
 800c4d6:	9211      	str	r2, [sp, #68]	; 0x44
 800c4d8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c4dc:	2a2b      	cmp	r2, #43	; 0x2b
 800c4de:	d075      	beq.n	800c5cc <_strtod_l+0x284>
 800c4e0:	2a2d      	cmp	r2, #45	; 0x2d
 800c4e2:	d07b      	beq.n	800c5dc <_strtod_l+0x294>
 800c4e4:	f04f 0e00 	mov.w	lr, #0
 800c4e8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c4ec:	2d09      	cmp	r5, #9
 800c4ee:	f240 8083 	bls.w	800c5f8 <_strtod_l+0x2b0>
 800c4f2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c4f6:	2500      	movs	r5, #0
 800c4f8:	e09e      	b.n	800c638 <_strtod_l+0x2f0>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e7c4      	b.n	800c488 <_strtod_l+0x140>
 800c4fe:	2e08      	cmp	r6, #8
 800c500:	bfd5      	itete	le
 800c502:	9907      	ldrle	r1, [sp, #28]
 800c504:	9905      	ldrgt	r1, [sp, #20]
 800c506:	fb02 3301 	mlale	r3, r2, r1, r3
 800c50a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c50e:	f100 0001 	add.w	r0, r0, #1
 800c512:	bfd4      	ite	le
 800c514:	9307      	strle	r3, [sp, #28]
 800c516:	9305      	strgt	r3, [sp, #20]
 800c518:	3601      	adds	r6, #1
 800c51a:	9011      	str	r0, [sp, #68]	; 0x44
 800c51c:	e7bc      	b.n	800c498 <_strtod_l+0x150>
 800c51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	9211      	str	r2, [sp, #68]	; 0x44
 800c524:	785a      	ldrb	r2, [r3, #1]
 800c526:	b3ae      	cbz	r6, 800c594 <_strtod_l+0x24c>
 800c528:	4683      	mov	fp, r0
 800c52a:	4633      	mov	r3, r6
 800c52c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c530:	2909      	cmp	r1, #9
 800c532:	d912      	bls.n	800c55a <_strtod_l+0x212>
 800c534:	2101      	movs	r1, #1
 800c536:	e7c1      	b.n	800c4bc <_strtod_l+0x174>
 800c538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	9211      	str	r2, [sp, #68]	; 0x44
 800c53e:	785a      	ldrb	r2, [r3, #1]
 800c540:	3001      	adds	r0, #1
 800c542:	2a30      	cmp	r2, #48	; 0x30
 800c544:	d0f8      	beq.n	800c538 <_strtod_l+0x1f0>
 800c546:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c54a:	2b08      	cmp	r3, #8
 800c54c:	f200 8495 	bhi.w	800ce7a <_strtod_l+0xb32>
 800c550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c552:	9309      	str	r3, [sp, #36]	; 0x24
 800c554:	4683      	mov	fp, r0
 800c556:	2000      	movs	r0, #0
 800c558:	4603      	mov	r3, r0
 800c55a:	3a30      	subs	r2, #48	; 0x30
 800c55c:	f100 0101 	add.w	r1, r0, #1
 800c560:	d012      	beq.n	800c588 <_strtod_l+0x240>
 800c562:	448b      	add	fp, r1
 800c564:	eb00 0c03 	add.w	ip, r0, r3
 800c568:	4619      	mov	r1, r3
 800c56a:	250a      	movs	r5, #10
 800c56c:	4561      	cmp	r1, ip
 800c56e:	d113      	bne.n	800c598 <_strtod_l+0x250>
 800c570:	1819      	adds	r1, r3, r0
 800c572:	2908      	cmp	r1, #8
 800c574:	f103 0301 	add.w	r3, r3, #1
 800c578:	4403      	add	r3, r0
 800c57a:	dc1b      	bgt.n	800c5b4 <_strtod_l+0x26c>
 800c57c:	9807      	ldr	r0, [sp, #28]
 800c57e:	210a      	movs	r1, #10
 800c580:	fb01 2200 	mla	r2, r1, r0, r2
 800c584:	9207      	str	r2, [sp, #28]
 800c586:	2100      	movs	r1, #0
 800c588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c58a:	1c50      	adds	r0, r2, #1
 800c58c:	9011      	str	r0, [sp, #68]	; 0x44
 800c58e:	7852      	ldrb	r2, [r2, #1]
 800c590:	4608      	mov	r0, r1
 800c592:	e7cb      	b.n	800c52c <_strtod_l+0x1e4>
 800c594:	4630      	mov	r0, r6
 800c596:	e7d4      	b.n	800c542 <_strtod_l+0x1fa>
 800c598:	2908      	cmp	r1, #8
 800c59a:	f101 0101 	add.w	r1, r1, #1
 800c59e:	dc03      	bgt.n	800c5a8 <_strtod_l+0x260>
 800c5a0:	9f07      	ldr	r7, [sp, #28]
 800c5a2:	436f      	muls	r7, r5
 800c5a4:	9707      	str	r7, [sp, #28]
 800c5a6:	e7e1      	b.n	800c56c <_strtod_l+0x224>
 800c5a8:	2910      	cmp	r1, #16
 800c5aa:	bfde      	ittt	le
 800c5ac:	9f05      	ldrle	r7, [sp, #20]
 800c5ae:	436f      	mulle	r7, r5
 800c5b0:	9705      	strle	r7, [sp, #20]
 800c5b2:	e7db      	b.n	800c56c <_strtod_l+0x224>
 800c5b4:	2b10      	cmp	r3, #16
 800c5b6:	bfdf      	itttt	le
 800c5b8:	9805      	ldrle	r0, [sp, #20]
 800c5ba:	210a      	movle	r1, #10
 800c5bc:	fb01 2200 	mlale	r2, r1, r0, r2
 800c5c0:	9205      	strle	r2, [sp, #20]
 800c5c2:	e7e0      	b.n	800c586 <_strtod_l+0x23e>
 800c5c4:	f04f 0b00 	mov.w	fp, #0
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	e77c      	b.n	800c4c6 <_strtod_l+0x17e>
 800c5cc:	f04f 0e00 	mov.w	lr, #0
 800c5d0:	f10a 0202 	add.w	r2, sl, #2
 800c5d4:	9211      	str	r2, [sp, #68]	; 0x44
 800c5d6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c5da:	e785      	b.n	800c4e8 <_strtod_l+0x1a0>
 800c5dc:	f04f 0e01 	mov.w	lr, #1
 800c5e0:	e7f6      	b.n	800c5d0 <_strtod_l+0x288>
 800c5e2:	bf00      	nop
 800c5e4:	080190d0 	.word	0x080190d0
 800c5e8:	080190cc 	.word	0x080190cc
 800c5ec:	7ff00000 	.word	0x7ff00000
 800c5f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c5f2:	1c55      	adds	r5, r2, #1
 800c5f4:	9511      	str	r5, [sp, #68]	; 0x44
 800c5f6:	7852      	ldrb	r2, [r2, #1]
 800c5f8:	2a30      	cmp	r2, #48	; 0x30
 800c5fa:	d0f9      	beq.n	800c5f0 <_strtod_l+0x2a8>
 800c5fc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c600:	2d08      	cmp	r5, #8
 800c602:	f63f af78 	bhi.w	800c4f6 <_strtod_l+0x1ae>
 800c606:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c60a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c60c:	920a      	str	r2, [sp, #40]	; 0x28
 800c60e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c610:	1c55      	adds	r5, r2, #1
 800c612:	9511      	str	r5, [sp, #68]	; 0x44
 800c614:	7852      	ldrb	r2, [r2, #1]
 800c616:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c61a:	2f09      	cmp	r7, #9
 800c61c:	d937      	bls.n	800c68e <_strtod_l+0x346>
 800c61e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c620:	1bed      	subs	r5, r5, r7
 800c622:	2d08      	cmp	r5, #8
 800c624:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c628:	dc02      	bgt.n	800c630 <_strtod_l+0x2e8>
 800c62a:	4565      	cmp	r5, ip
 800c62c:	bfa8      	it	ge
 800c62e:	4665      	movge	r5, ip
 800c630:	f1be 0f00 	cmp.w	lr, #0
 800c634:	d000      	beq.n	800c638 <_strtod_l+0x2f0>
 800c636:	426d      	negs	r5, r5
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d14d      	bne.n	800c6d8 <_strtod_l+0x390>
 800c63c:	9b06      	ldr	r3, [sp, #24]
 800c63e:	4303      	orrs	r3, r0
 800c640:	f47f aebd 	bne.w	800c3be <_strtod_l+0x76>
 800c644:	2900      	cmp	r1, #0
 800c646:	f47f aed6 	bne.w	800c3f6 <_strtod_l+0xae>
 800c64a:	2a69      	cmp	r2, #105	; 0x69
 800c64c:	d027      	beq.n	800c69e <_strtod_l+0x356>
 800c64e:	dc24      	bgt.n	800c69a <_strtod_l+0x352>
 800c650:	2a49      	cmp	r2, #73	; 0x49
 800c652:	d024      	beq.n	800c69e <_strtod_l+0x356>
 800c654:	2a4e      	cmp	r2, #78	; 0x4e
 800c656:	f47f aece 	bne.w	800c3f6 <_strtod_l+0xae>
 800c65a:	4995      	ldr	r1, [pc, #596]	; (800c8b0 <_strtod_l+0x568>)
 800c65c:	a811      	add	r0, sp, #68	; 0x44
 800c65e:	f001 f9d7 	bl	800da10 <__match>
 800c662:	2800      	cmp	r0, #0
 800c664:	f43f aec7 	beq.w	800c3f6 <_strtod_l+0xae>
 800c668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b28      	cmp	r3, #40	; 0x28
 800c66e:	d12d      	bne.n	800c6cc <_strtod_l+0x384>
 800c670:	4990      	ldr	r1, [pc, #576]	; (800c8b4 <_strtod_l+0x56c>)
 800c672:	aa14      	add	r2, sp, #80	; 0x50
 800c674:	a811      	add	r0, sp, #68	; 0x44
 800c676:	f001 f9df 	bl	800da38 <__hexnan>
 800c67a:	2805      	cmp	r0, #5
 800c67c:	d126      	bne.n	800c6cc <_strtod_l+0x384>
 800c67e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c680:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c684:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c688:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c68c:	e697      	b.n	800c3be <_strtod_l+0x76>
 800c68e:	250a      	movs	r5, #10
 800c690:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c694:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c698:	e7b9      	b.n	800c60e <_strtod_l+0x2c6>
 800c69a:	2a6e      	cmp	r2, #110	; 0x6e
 800c69c:	e7db      	b.n	800c656 <_strtod_l+0x30e>
 800c69e:	4986      	ldr	r1, [pc, #536]	; (800c8b8 <_strtod_l+0x570>)
 800c6a0:	a811      	add	r0, sp, #68	; 0x44
 800c6a2:	f001 f9b5 	bl	800da10 <__match>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f43f aea5 	beq.w	800c3f6 <_strtod_l+0xae>
 800c6ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6ae:	4983      	ldr	r1, [pc, #524]	; (800c8bc <_strtod_l+0x574>)
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	a811      	add	r0, sp, #68	; 0x44
 800c6b4:	9311      	str	r3, [sp, #68]	; 0x44
 800c6b6:	f001 f9ab 	bl	800da10 <__match>
 800c6ba:	b910      	cbnz	r0, 800c6c2 <_strtod_l+0x37a>
 800c6bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6be:	3301      	adds	r3, #1
 800c6c0:	9311      	str	r3, [sp, #68]	; 0x44
 800c6c2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c8d0 <_strtod_l+0x588>
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	e678      	b.n	800c3be <_strtod_l+0x76>
 800c6cc:	487c      	ldr	r0, [pc, #496]	; (800c8c0 <_strtod_l+0x578>)
 800c6ce:	f000 febb 	bl	800d448 <nan>
 800c6d2:	ec59 8b10 	vmov	r8, r9, d0
 800c6d6:	e672      	b.n	800c3be <_strtod_l+0x76>
 800c6d8:	eddd 7a07 	vldr	s15, [sp, #28]
 800c6dc:	eba5 020b 	sub.w	r2, r5, fp
 800c6e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	bf08      	it	eq
 800c6e8:	461e      	moveq	r6, r3
 800c6ea:	2b10      	cmp	r3, #16
 800c6ec:	9206      	str	r2, [sp, #24]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	bfa8      	it	ge
 800c6f2:	2210      	movge	r2, #16
 800c6f4:	2b09      	cmp	r3, #9
 800c6f6:	ec59 8b17 	vmov	r8, r9, d7
 800c6fa:	dd0c      	ble.n	800c716 <_strtod_l+0x3ce>
 800c6fc:	4971      	ldr	r1, [pc, #452]	; (800c8c4 <_strtod_l+0x57c>)
 800c6fe:	eddd 6a05 	vldr	s13, [sp, #20]
 800c702:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c706:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c70a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c70e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c712:	ec59 8b16 	vmov	r8, r9, d6
 800c716:	2b0f      	cmp	r3, #15
 800c718:	dc37      	bgt.n	800c78a <_strtod_l+0x442>
 800c71a:	9906      	ldr	r1, [sp, #24]
 800c71c:	2900      	cmp	r1, #0
 800c71e:	f43f ae4e 	beq.w	800c3be <_strtod_l+0x76>
 800c722:	dd23      	ble.n	800c76c <_strtod_l+0x424>
 800c724:	2916      	cmp	r1, #22
 800c726:	dc0b      	bgt.n	800c740 <_strtod_l+0x3f8>
 800c728:	4b66      	ldr	r3, [pc, #408]	; (800c8c4 <_strtod_l+0x57c>)
 800c72a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c72e:	ed93 7b00 	vldr	d7, [r3]
 800c732:	ec49 8b16 	vmov	d6, r8, r9
 800c736:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c73a:	ec59 8b17 	vmov	r8, r9, d7
 800c73e:	e63e      	b.n	800c3be <_strtod_l+0x76>
 800c740:	9806      	ldr	r0, [sp, #24]
 800c742:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c746:	4281      	cmp	r1, r0
 800c748:	db1f      	blt.n	800c78a <_strtod_l+0x442>
 800c74a:	4a5e      	ldr	r2, [pc, #376]	; (800c8c4 <_strtod_l+0x57c>)
 800c74c:	f1c3 030f 	rsb	r3, r3, #15
 800c750:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c754:	ed91 7b00 	vldr	d7, [r1]
 800c758:	ec49 8b16 	vmov	d6, r8, r9
 800c75c:	1ac3      	subs	r3, r0, r3
 800c75e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c762:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c766:	ed92 6b00 	vldr	d6, [r2]
 800c76a:	e7e4      	b.n	800c736 <_strtod_l+0x3ee>
 800c76c:	9906      	ldr	r1, [sp, #24]
 800c76e:	3116      	adds	r1, #22
 800c770:	db0b      	blt.n	800c78a <_strtod_l+0x442>
 800c772:	4b54      	ldr	r3, [pc, #336]	; (800c8c4 <_strtod_l+0x57c>)
 800c774:	ebab 0505 	sub.w	r5, fp, r5
 800c778:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c77c:	ed95 7b00 	vldr	d7, [r5]
 800c780:	ec49 8b16 	vmov	d6, r8, r9
 800c784:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c788:	e7d7      	b.n	800c73a <_strtod_l+0x3f2>
 800c78a:	9906      	ldr	r1, [sp, #24]
 800c78c:	1a9a      	subs	r2, r3, r2
 800c78e:	440a      	add	r2, r1
 800c790:	2a00      	cmp	r2, #0
 800c792:	dd6e      	ble.n	800c872 <_strtod_l+0x52a>
 800c794:	f012 000f 	ands.w	r0, r2, #15
 800c798:	d00a      	beq.n	800c7b0 <_strtod_l+0x468>
 800c79a:	494a      	ldr	r1, [pc, #296]	; (800c8c4 <_strtod_l+0x57c>)
 800c79c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c7a0:	ed91 7b00 	vldr	d7, [r1]
 800c7a4:	ec49 8b16 	vmov	d6, r8, r9
 800c7a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7ac:	ec59 8b17 	vmov	r8, r9, d7
 800c7b0:	f032 020f 	bics.w	r2, r2, #15
 800c7b4:	d04e      	beq.n	800c854 <_strtod_l+0x50c>
 800c7b6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c7ba:	dd22      	ble.n	800c802 <_strtod_l+0x4ba>
 800c7bc:	2500      	movs	r5, #0
 800c7be:	462e      	mov	r6, r5
 800c7c0:	9507      	str	r5, [sp, #28]
 800c7c2:	462f      	mov	r7, r5
 800c7c4:	2322      	movs	r3, #34	; 0x22
 800c7c6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c8d0 <_strtod_l+0x588>
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	f04f 0800 	mov.w	r8, #0
 800c7d0:	9b07      	ldr	r3, [sp, #28]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f43f adf3 	beq.w	800c3be <_strtod_l+0x76>
 800c7d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f7ff f930 	bl	800ba40 <_Bfree>
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7ff f92c 	bl	800ba40 <_Bfree>
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f7ff f928 	bl	800ba40 <_Bfree>
 800c7f0:	9907      	ldr	r1, [sp, #28]
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f7ff f924 	bl	800ba40 <_Bfree>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7ff f920 	bl	800ba40 <_Bfree>
 800c800:	e5dd      	b.n	800c3be <_strtod_l+0x76>
 800c802:	2000      	movs	r0, #0
 800c804:	ec49 8b17 	vmov	d7, r8, r9
 800c808:	4f2f      	ldr	r7, [pc, #188]	; (800c8c8 <_strtod_l+0x580>)
 800c80a:	1112      	asrs	r2, r2, #4
 800c80c:	4601      	mov	r1, r0
 800c80e:	2a01      	cmp	r2, #1
 800c810:	dc23      	bgt.n	800c85a <_strtod_l+0x512>
 800c812:	b108      	cbz	r0, 800c818 <_strtod_l+0x4d0>
 800c814:	ec59 8b17 	vmov	r8, r9, d7
 800c818:	4a2b      	ldr	r2, [pc, #172]	; (800c8c8 <_strtod_l+0x580>)
 800c81a:	482c      	ldr	r0, [pc, #176]	; (800c8cc <_strtod_l+0x584>)
 800c81c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c820:	ed92 7b00 	vldr	d7, [r2]
 800c824:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c828:	ec49 8b16 	vmov	d6, r8, r9
 800c82c:	4a28      	ldr	r2, [pc, #160]	; (800c8d0 <_strtod_l+0x588>)
 800c82e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c832:	ee17 1a90 	vmov	r1, s15
 800c836:	400a      	ands	r2, r1
 800c838:	4282      	cmp	r2, r0
 800c83a:	ec59 8b17 	vmov	r8, r9, d7
 800c83e:	d8bd      	bhi.n	800c7bc <_strtod_l+0x474>
 800c840:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c844:	4282      	cmp	r2, r0
 800c846:	bf86      	itte	hi
 800c848:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c8d4 <_strtod_l+0x58c>
 800c84c:	f04f 38ff 	movhi.w	r8, #4294967295
 800c850:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c854:	2200      	movs	r2, #0
 800c856:	9205      	str	r2, [sp, #20]
 800c858:	e076      	b.n	800c948 <_strtod_l+0x600>
 800c85a:	f012 0f01 	tst.w	r2, #1
 800c85e:	d004      	beq.n	800c86a <_strtod_l+0x522>
 800c860:	ed97 6b00 	vldr	d6, [r7]
 800c864:	2001      	movs	r0, #1
 800c866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c86a:	3101      	adds	r1, #1
 800c86c:	1052      	asrs	r2, r2, #1
 800c86e:	3708      	adds	r7, #8
 800c870:	e7cd      	b.n	800c80e <_strtod_l+0x4c6>
 800c872:	d0ef      	beq.n	800c854 <_strtod_l+0x50c>
 800c874:	4252      	negs	r2, r2
 800c876:	f012 000f 	ands.w	r0, r2, #15
 800c87a:	d00a      	beq.n	800c892 <_strtod_l+0x54a>
 800c87c:	4911      	ldr	r1, [pc, #68]	; (800c8c4 <_strtod_l+0x57c>)
 800c87e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c882:	ed91 7b00 	vldr	d7, [r1]
 800c886:	ec49 8b16 	vmov	d6, r8, r9
 800c88a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c88e:	ec59 8b17 	vmov	r8, r9, d7
 800c892:	1112      	asrs	r2, r2, #4
 800c894:	d0de      	beq.n	800c854 <_strtod_l+0x50c>
 800c896:	2a1f      	cmp	r2, #31
 800c898:	dd1e      	ble.n	800c8d8 <_strtod_l+0x590>
 800c89a:	2500      	movs	r5, #0
 800c89c:	462e      	mov	r6, r5
 800c89e:	9507      	str	r5, [sp, #28]
 800c8a0:	462f      	mov	r7, r5
 800c8a2:	2322      	movs	r3, #34	; 0x22
 800c8a4:	f04f 0800 	mov.w	r8, #0
 800c8a8:	f04f 0900 	mov.w	r9, #0
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	e78f      	b.n	800c7d0 <_strtod_l+0x488>
 800c8b0:	08018ebd 	.word	0x08018ebd
 800c8b4:	080190e4 	.word	0x080190e4
 800c8b8:	08018eb5 	.word	0x08018eb5
 800c8bc:	08018eec 	.word	0x08018eec
 800c8c0:	08019275 	.word	0x08019275
 800c8c4:	08018ff8 	.word	0x08018ff8
 800c8c8:	08018fd0 	.word	0x08018fd0
 800c8cc:	7ca00000 	.word	0x7ca00000
 800c8d0:	7ff00000 	.word	0x7ff00000
 800c8d4:	7fefffff 	.word	0x7fefffff
 800c8d8:	f012 0110 	ands.w	r1, r2, #16
 800c8dc:	bf18      	it	ne
 800c8de:	216a      	movne	r1, #106	; 0x6a
 800c8e0:	9105      	str	r1, [sp, #20]
 800c8e2:	ec49 8b17 	vmov	d7, r8, r9
 800c8e6:	49be      	ldr	r1, [pc, #760]	; (800cbe0 <_strtod_l+0x898>)
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	07d7      	lsls	r7, r2, #31
 800c8ec:	d504      	bpl.n	800c8f8 <_strtod_l+0x5b0>
 800c8ee:	ed91 6b00 	vldr	d6, [r1]
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8f8:	1052      	asrs	r2, r2, #1
 800c8fa:	f101 0108 	add.w	r1, r1, #8
 800c8fe:	d1f4      	bne.n	800c8ea <_strtod_l+0x5a2>
 800c900:	b108      	cbz	r0, 800c906 <_strtod_l+0x5be>
 800c902:	ec59 8b17 	vmov	r8, r9, d7
 800c906:	9a05      	ldr	r2, [sp, #20]
 800c908:	b1ba      	cbz	r2, 800c93a <_strtod_l+0x5f2>
 800c90a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c90e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c912:	2a00      	cmp	r2, #0
 800c914:	4648      	mov	r0, r9
 800c916:	dd10      	ble.n	800c93a <_strtod_l+0x5f2>
 800c918:	2a1f      	cmp	r2, #31
 800c91a:	f340 812c 	ble.w	800cb76 <_strtod_l+0x82e>
 800c91e:	2a34      	cmp	r2, #52	; 0x34
 800c920:	bfde      	ittt	le
 800c922:	f04f 32ff 	movle.w	r2, #4294967295
 800c926:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c92a:	408a      	lslle	r2, r1
 800c92c:	f04f 0800 	mov.w	r8, #0
 800c930:	bfcc      	ite	gt
 800c932:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c936:	ea02 0900 	andle.w	r9, r2, r0
 800c93a:	ec49 8b17 	vmov	d7, r8, r9
 800c93e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c946:	d0a8      	beq.n	800c89a <_strtod_l+0x552>
 800c948:	9a07      	ldr	r2, [sp, #28]
 800c94a:	9200      	str	r2, [sp, #0]
 800c94c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c94e:	4632      	mov	r2, r6
 800c950:	4620      	mov	r0, r4
 800c952:	f7ff f8dd 	bl	800bb10 <__s2b>
 800c956:	9007      	str	r0, [sp, #28]
 800c958:	2800      	cmp	r0, #0
 800c95a:	f43f af2f 	beq.w	800c7bc <_strtod_l+0x474>
 800c95e:	9a06      	ldr	r2, [sp, #24]
 800c960:	2a00      	cmp	r2, #0
 800c962:	ebab 0305 	sub.w	r3, fp, r5
 800c966:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800cbc0 <_strtod_l+0x878>
 800c96a:	bfa8      	it	ge
 800c96c:	2300      	movge	r3, #0
 800c96e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800cbc8 <_strtod_l+0x880>
 800c972:	ed9f bb97 	vldr	d11, [pc, #604]	; 800cbd0 <_strtod_l+0x888>
 800c976:	9309      	str	r3, [sp, #36]	; 0x24
 800c978:	2500      	movs	r5, #0
 800c97a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c97e:	930c      	str	r3, [sp, #48]	; 0x30
 800c980:	462e      	mov	r6, r5
 800c982:	9b07      	ldr	r3, [sp, #28]
 800c984:	4620      	mov	r0, r4
 800c986:	6859      	ldr	r1, [r3, #4]
 800c988:	f7ff f81a 	bl	800b9c0 <_Balloc>
 800c98c:	4607      	mov	r7, r0
 800c98e:	2800      	cmp	r0, #0
 800c990:	f43f af18 	beq.w	800c7c4 <_strtod_l+0x47c>
 800c994:	9b07      	ldr	r3, [sp, #28]
 800c996:	691a      	ldr	r2, [r3, #16]
 800c998:	3202      	adds	r2, #2
 800c99a:	f103 010c 	add.w	r1, r3, #12
 800c99e:	0092      	lsls	r2, r2, #2
 800c9a0:	300c      	adds	r0, #12
 800c9a2:	f7fe f904 	bl	800abae <memcpy>
 800c9a6:	ec49 8b10 	vmov	d0, r8, r9
 800c9aa:	aa14      	add	r2, sp, #80	; 0x50
 800c9ac:	a913      	add	r1, sp, #76	; 0x4c
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f7ff fbe2 	bl	800c178 <__d2b>
 800c9b4:	ec49 8b18 	vmov	d8, r8, r9
 800c9b8:	9012      	str	r0, [sp, #72]	; 0x48
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f af02 	beq.w	800c7c4 <_strtod_l+0x47c>
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f7ff f93c 	bl	800bc40 <__i2b>
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	f43f aefa 	beq.w	800c7c4 <_strtod_l+0x47c>
 800c9d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bfab      	itete	ge
 800c9d8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c9da:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c9dc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c9e0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c9e4:	bfac      	ite	ge
 800c9e6:	eb03 0b02 	addge.w	fp, r3, r2
 800c9ea:	eba2 0a03 	sublt.w	sl, r2, r3
 800c9ee:	9a05      	ldr	r2, [sp, #20]
 800c9f0:	1a9b      	subs	r3, r3, r2
 800c9f2:	440b      	add	r3, r1
 800c9f4:	4a7b      	ldr	r2, [pc, #492]	; (800cbe4 <_strtod_l+0x89c>)
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c9fe:	f280 80cd 	bge.w	800cb9c <_strtod_l+0x854>
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	2a1f      	cmp	r2, #31
 800ca06:	eba1 0102 	sub.w	r1, r1, r2
 800ca0a:	f04f 0001 	mov.w	r0, #1
 800ca0e:	f300 80b9 	bgt.w	800cb84 <_strtod_l+0x83c>
 800ca12:	fa00 f302 	lsl.w	r3, r0, r2
 800ca16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca18:	2300      	movs	r3, #0
 800ca1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca1c:	eb0b 0301 	add.w	r3, fp, r1
 800ca20:	9a05      	ldr	r2, [sp, #20]
 800ca22:	459b      	cmp	fp, r3
 800ca24:	448a      	add	sl, r1
 800ca26:	4492      	add	sl, r2
 800ca28:	465a      	mov	r2, fp
 800ca2a:	bfa8      	it	ge
 800ca2c:	461a      	movge	r2, r3
 800ca2e:	4552      	cmp	r2, sl
 800ca30:	bfa8      	it	ge
 800ca32:	4652      	movge	r2, sl
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	bfc2      	ittt	gt
 800ca38:	1a9b      	subgt	r3, r3, r2
 800ca3a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ca3e:	ebab 0b02 	subgt.w	fp, fp, r2
 800ca42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	dd18      	ble.n	800ca7a <_strtod_l+0x732>
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca4e:	f7ff f9b7 	bl	800bdc0 <__pow5mult>
 800ca52:	4606      	mov	r6, r0
 800ca54:	2800      	cmp	r0, #0
 800ca56:	f43f aeb5 	beq.w	800c7c4 <_strtod_l+0x47c>
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7ff f904 	bl	800bc6c <__multiply>
 800ca64:	900e      	str	r0, [sp, #56]	; 0x38
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f43f aeac 	beq.w	800c7c4 <_strtod_l+0x47c>
 800ca6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f7fe ffe6 	bl	800ba40 <_Bfree>
 800ca74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca78:	9212      	str	r2, [sp, #72]	; 0x48
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f300 8093 	bgt.w	800cba6 <_strtod_l+0x85e>
 800ca80:	9b06      	ldr	r3, [sp, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dd08      	ble.n	800ca98 <_strtod_l+0x750>
 800ca86:	4639      	mov	r1, r7
 800ca88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f7ff f998 	bl	800bdc0 <__pow5mult>
 800ca90:	4607      	mov	r7, r0
 800ca92:	2800      	cmp	r0, #0
 800ca94:	f43f ae96 	beq.w	800c7c4 <_strtod_l+0x47c>
 800ca98:	f1ba 0f00 	cmp.w	sl, #0
 800ca9c:	dd08      	ble.n	800cab0 <_strtod_l+0x768>
 800ca9e:	4639      	mov	r1, r7
 800caa0:	4652      	mov	r2, sl
 800caa2:	4620      	mov	r0, r4
 800caa4:	f7ff f9e6 	bl	800be74 <__lshift>
 800caa8:	4607      	mov	r7, r0
 800caaa:	2800      	cmp	r0, #0
 800caac:	f43f ae8a 	beq.w	800c7c4 <_strtod_l+0x47c>
 800cab0:	f1bb 0f00 	cmp.w	fp, #0
 800cab4:	dd08      	ble.n	800cac8 <_strtod_l+0x780>
 800cab6:	4631      	mov	r1, r6
 800cab8:	465a      	mov	r2, fp
 800caba:	4620      	mov	r0, r4
 800cabc:	f7ff f9da 	bl	800be74 <__lshift>
 800cac0:	4606      	mov	r6, r0
 800cac2:	2800      	cmp	r0, #0
 800cac4:	f43f ae7e 	beq.w	800c7c4 <_strtod_l+0x47c>
 800cac8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800caca:	463a      	mov	r2, r7
 800cacc:	4620      	mov	r0, r4
 800cace:	f7ff fa59 	bl	800bf84 <__mdiff>
 800cad2:	4605      	mov	r5, r0
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f43f ae75 	beq.w	800c7c4 <_strtod_l+0x47c>
 800cada:	2300      	movs	r3, #0
 800cadc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800cae0:	60c3      	str	r3, [r0, #12]
 800cae2:	4631      	mov	r1, r6
 800cae4:	f7ff fa32 	bl	800bf4c <__mcmp>
 800cae8:	2800      	cmp	r0, #0
 800caea:	da7f      	bge.n	800cbec <_strtod_l+0x8a4>
 800caec:	ea5a 0a08 	orrs.w	sl, sl, r8
 800caf0:	f040 80a5 	bne.w	800cc3e <_strtod_l+0x8f6>
 800caf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f040 80a0 	bne.w	800cc3e <_strtod_l+0x8f6>
 800cafe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb02:	0d1b      	lsrs	r3, r3, #20
 800cb04:	051b      	lsls	r3, r3, #20
 800cb06:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb0a:	f240 8098 	bls.w	800cc3e <_strtod_l+0x8f6>
 800cb0e:	696b      	ldr	r3, [r5, #20]
 800cb10:	b91b      	cbnz	r3, 800cb1a <_strtod_l+0x7d2>
 800cb12:	692b      	ldr	r3, [r5, #16]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	f340 8092 	ble.w	800cc3e <_strtod_l+0x8f6>
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7ff f9a8 	bl	800be74 <__lshift>
 800cb24:	4631      	mov	r1, r6
 800cb26:	4605      	mov	r5, r0
 800cb28:	f7ff fa10 	bl	800bf4c <__mcmp>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	f340 8086 	ble.w	800cc3e <_strtod_l+0x8f6>
 800cb32:	9905      	ldr	r1, [sp, #20]
 800cb34:	4a2c      	ldr	r2, [pc, #176]	; (800cbe8 <_strtod_l+0x8a0>)
 800cb36:	464b      	mov	r3, r9
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	f000 809f 	beq.w	800cc7c <_strtod_l+0x934>
 800cb3e:	ea02 0109 	and.w	r1, r2, r9
 800cb42:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb46:	f300 8099 	bgt.w	800cc7c <_strtod_l+0x934>
 800cb4a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb4e:	f77f aea8 	ble.w	800c8a2 <_strtod_l+0x55a>
 800cb52:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cbd8 <_strtod_l+0x890>
 800cb56:	ec49 8b16 	vmov	d6, r8, r9
 800cb5a:	4b23      	ldr	r3, [pc, #140]	; (800cbe8 <_strtod_l+0x8a0>)
 800cb5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cb60:	ee17 2a90 	vmov	r2, s15
 800cb64:	4013      	ands	r3, r2
 800cb66:	ec59 8b17 	vmov	r8, r9, d7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f47f ae34 	bne.w	800c7d8 <_strtod_l+0x490>
 800cb70:	2322      	movs	r3, #34	; 0x22
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	e630      	b.n	800c7d8 <_strtod_l+0x490>
 800cb76:	f04f 31ff 	mov.w	r1, #4294967295
 800cb7a:	fa01 f202 	lsl.w	r2, r1, r2
 800cb7e:	ea02 0808 	and.w	r8, r2, r8
 800cb82:	e6da      	b.n	800c93a <_strtod_l+0x5f2>
 800cb84:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cb88:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cb8c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cb90:	33e2      	adds	r3, #226	; 0xe2
 800cb92:	fa00 f303 	lsl.w	r3, r0, r3
 800cb96:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800cb9a:	e73f      	b.n	800ca1c <_strtod_l+0x6d4>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cba4:	e73a      	b.n	800ca1c <_strtod_l+0x6d4>
 800cba6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f7ff f962 	bl	800be74 <__lshift>
 800cbb0:	9012      	str	r0, [sp, #72]	; 0x48
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	f47f af64 	bne.w	800ca80 <_strtod_l+0x738>
 800cbb8:	e604      	b.n	800c7c4 <_strtod_l+0x47c>
 800cbba:	bf00      	nop
 800cbbc:	f3af 8000 	nop.w
 800cbc0:	94a03595 	.word	0x94a03595
 800cbc4:	3fcfffff 	.word	0x3fcfffff
 800cbc8:	94a03595 	.word	0x94a03595
 800cbcc:	3fdfffff 	.word	0x3fdfffff
 800cbd0:	35afe535 	.word	0x35afe535
 800cbd4:	3fe00000 	.word	0x3fe00000
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	39500000 	.word	0x39500000
 800cbe0:	080190f8 	.word	0x080190f8
 800cbe4:	fffffc02 	.word	0xfffffc02
 800cbe8:	7ff00000 	.word	0x7ff00000
 800cbec:	46cb      	mov	fp, r9
 800cbee:	d15f      	bne.n	800ccb0 <_strtod_l+0x968>
 800cbf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbf4:	f1ba 0f00 	cmp.w	sl, #0
 800cbf8:	d02a      	beq.n	800cc50 <_strtod_l+0x908>
 800cbfa:	4aa7      	ldr	r2, [pc, #668]	; (800ce98 <_strtod_l+0xb50>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d12b      	bne.n	800cc58 <_strtod_l+0x910>
 800cc00:	9b05      	ldr	r3, [sp, #20]
 800cc02:	4642      	mov	r2, r8
 800cc04:	b1fb      	cbz	r3, 800cc46 <_strtod_l+0x8fe>
 800cc06:	4ba5      	ldr	r3, [pc, #660]	; (800ce9c <_strtod_l+0xb54>)
 800cc08:	ea09 0303 	and.w	r3, r9, r3
 800cc0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc10:	f04f 31ff 	mov.w	r1, #4294967295
 800cc14:	d81a      	bhi.n	800cc4c <_strtod_l+0x904>
 800cc16:	0d1b      	lsrs	r3, r3, #20
 800cc18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d119      	bne.n	800cc58 <_strtod_l+0x910>
 800cc24:	4b9e      	ldr	r3, [pc, #632]	; (800cea0 <_strtod_l+0xb58>)
 800cc26:	459b      	cmp	fp, r3
 800cc28:	d102      	bne.n	800cc30 <_strtod_l+0x8e8>
 800cc2a:	3201      	adds	r2, #1
 800cc2c:	f43f adca 	beq.w	800c7c4 <_strtod_l+0x47c>
 800cc30:	4b9a      	ldr	r3, [pc, #616]	; (800ce9c <_strtod_l+0xb54>)
 800cc32:	ea0b 0303 	and.w	r3, fp, r3
 800cc36:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cc3a:	f04f 0800 	mov.w	r8, #0
 800cc3e:	9b05      	ldr	r3, [sp, #20]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d186      	bne.n	800cb52 <_strtod_l+0x80a>
 800cc44:	e5c8      	b.n	800c7d8 <_strtod_l+0x490>
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4a:	e7e9      	b.n	800cc20 <_strtod_l+0x8d8>
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	e7e7      	b.n	800cc20 <_strtod_l+0x8d8>
 800cc50:	ea53 0308 	orrs.w	r3, r3, r8
 800cc54:	f43f af6d 	beq.w	800cb32 <_strtod_l+0x7ea>
 800cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5a:	b1cb      	cbz	r3, 800cc90 <_strtod_l+0x948>
 800cc5c:	ea13 0f0b 	tst.w	r3, fp
 800cc60:	d0ed      	beq.n	800cc3e <_strtod_l+0x8f6>
 800cc62:	9a05      	ldr	r2, [sp, #20]
 800cc64:	4640      	mov	r0, r8
 800cc66:	4649      	mov	r1, r9
 800cc68:	f1ba 0f00 	cmp.w	sl, #0
 800cc6c:	d014      	beq.n	800cc98 <_strtod_l+0x950>
 800cc6e:	f7ff fb51 	bl	800c314 <sulp>
 800cc72:	ee38 7b00 	vadd.f64	d7, d8, d0
 800cc76:	ec59 8b17 	vmov	r8, r9, d7
 800cc7a:	e7e0      	b.n	800cc3e <_strtod_l+0x8f6>
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cc82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cc86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cc8a:	f04f 38ff 	mov.w	r8, #4294967295
 800cc8e:	e7d6      	b.n	800cc3e <_strtod_l+0x8f6>
 800cc90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc92:	ea13 0f08 	tst.w	r3, r8
 800cc96:	e7e3      	b.n	800cc60 <_strtod_l+0x918>
 800cc98:	f7ff fb3c 	bl	800c314 <sulp>
 800cc9c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800cca0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca8:	ec59 8b10 	vmov	r8, r9, d0
 800ccac:	d1c7      	bne.n	800cc3e <_strtod_l+0x8f6>
 800ccae:	e5f8      	b.n	800c8a2 <_strtod_l+0x55a>
 800ccb0:	4631      	mov	r1, r6
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f7ff faba 	bl	800c22c <__ratio>
 800ccb8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ccbc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ccc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc4:	d85f      	bhi.n	800cd86 <_strtod_l+0xa3e>
 800ccc6:	f1ba 0f00 	cmp.w	sl, #0
 800ccca:	d166      	bne.n	800cd9a <_strtod_l+0xa52>
 800cccc:	f1b8 0f00 	cmp.w	r8, #0
 800ccd0:	d14d      	bne.n	800cd6e <_strtod_l+0xa26>
 800ccd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccd6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d162      	bne.n	800cda4 <_strtod_l+0xa5c>
 800ccde:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800cce2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccea:	d401      	bmi.n	800ccf0 <_strtod_l+0x9a8>
 800ccec:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ccf0:	eeb1 cb4d 	vneg.f64	d12, d13
 800ccf4:	4869      	ldr	r0, [pc, #420]	; (800ce9c <_strtod_l+0xb54>)
 800ccf6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800cea8 <_strtod_l+0xb60>
 800ccfa:	ea0b 0100 	and.w	r1, fp, r0
 800ccfe:	4561      	cmp	r1, ip
 800cd00:	ec53 2b1c 	vmov	r2, r3, d12
 800cd04:	d17a      	bne.n	800cdfc <_strtod_l+0xab4>
 800cd06:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cd0a:	ec49 8b10 	vmov	d0, r8, r9
 800cd0e:	910a      	str	r1, [sp, #40]	; 0x28
 800cd10:	f7ff f9c2 	bl	800c098 <__ulp>
 800cd14:	ec49 8b1e 	vmov	d14, r8, r9
 800cd18:	4860      	ldr	r0, [pc, #384]	; (800ce9c <_strtod_l+0xb54>)
 800cd1a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800cd1e:	ee1e 3a90 	vmov	r3, s29
 800cd22:	4a60      	ldr	r2, [pc, #384]	; (800cea4 <_strtod_l+0xb5c>)
 800cd24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd26:	4018      	ands	r0, r3
 800cd28:	4290      	cmp	r0, r2
 800cd2a:	ec59 8b1e 	vmov	r8, r9, d14
 800cd2e:	d93c      	bls.n	800cdaa <_strtod_l+0xa62>
 800cd30:	ee18 2a90 	vmov	r2, s17
 800cd34:	4b5a      	ldr	r3, [pc, #360]	; (800cea0 <_strtod_l+0xb58>)
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d104      	bne.n	800cd44 <_strtod_l+0x9fc>
 800cd3a:	ee18 3a10 	vmov	r3, s16
 800cd3e:	3301      	adds	r3, #1
 800cd40:	f43f ad40 	beq.w	800c7c4 <_strtod_l+0x47c>
 800cd44:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800cea0 <_strtod_l+0xb58>
 800cd48:	f04f 38ff 	mov.w	r8, #4294967295
 800cd4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f7fe fe76 	bl	800ba40 <_Bfree>
 800cd54:	4639      	mov	r1, r7
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7fe fe72 	bl	800ba40 <_Bfree>
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7fe fe6e 	bl	800ba40 <_Bfree>
 800cd64:	4629      	mov	r1, r5
 800cd66:	4620      	mov	r0, r4
 800cd68:	f7fe fe6a 	bl	800ba40 <_Bfree>
 800cd6c:	e609      	b.n	800c982 <_strtod_l+0x63a>
 800cd6e:	f1b8 0f01 	cmp.w	r8, #1
 800cd72:	d103      	bne.n	800cd7c <_strtod_l+0xa34>
 800cd74:	f1b9 0f00 	cmp.w	r9, #0
 800cd78:	f43f ad93 	beq.w	800c8a2 <_strtod_l+0x55a>
 800cd7c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800cd80:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800cd84:	e7b6      	b.n	800ccf4 <_strtod_l+0x9ac>
 800cd86:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cd8a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800cd8e:	f1ba 0f00 	cmp.w	sl, #0
 800cd92:	d0ad      	beq.n	800ccf0 <_strtod_l+0x9a8>
 800cd94:	eeb0 cb4d 	vmov.f64	d12, d13
 800cd98:	e7ac      	b.n	800ccf4 <_strtod_l+0x9ac>
 800cd9a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800cd9e:	eeb0 db4c 	vmov.f64	d13, d12
 800cda2:	e7a7      	b.n	800ccf4 <_strtod_l+0x9ac>
 800cda4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800cda8:	e7a4      	b.n	800ccf4 <_strtod_l+0x9ac>
 800cdaa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cdae:	9b05      	ldr	r3, [sp, #20]
 800cdb0:	46cb      	mov	fp, r9
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1ca      	bne.n	800cd4c <_strtod_l+0xa04>
 800cdb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cdba:	0d1b      	lsrs	r3, r3, #20
 800cdbc:	051b      	lsls	r3, r3, #20
 800cdbe:	4299      	cmp	r1, r3
 800cdc0:	d1c4      	bne.n	800cd4c <_strtod_l+0xa04>
 800cdc2:	ec51 0b1d 	vmov	r0, r1, d13
 800cdc6:	f7f3 fc67 	bl	8000698 <__aeabi_d2lz>
 800cdca:	f7f3 fc1f 	bl	800060c <__aeabi_l2d>
 800cdce:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800cdd2:	ec41 0b17 	vmov	d7, r0, r1
 800cdd6:	ea4b 0b08 	orr.w	fp, fp, r8
 800cdda:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800cdde:	ee3d db47 	vsub.f64	d13, d13, d7
 800cde2:	d03c      	beq.n	800ce5e <_strtod_l+0xb16>
 800cde4:	eeb4 dbca 	vcmpe.f64	d13, d10
 800cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdec:	f53f acf4 	bmi.w	800c7d8 <_strtod_l+0x490>
 800cdf0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800cdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf8:	dda8      	ble.n	800cd4c <_strtod_l+0xa04>
 800cdfa:	e4ed      	b.n	800c7d8 <_strtod_l+0x490>
 800cdfc:	9805      	ldr	r0, [sp, #20]
 800cdfe:	b1f0      	cbz	r0, 800ce3e <_strtod_l+0xaf6>
 800ce00:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ce04:	d81b      	bhi.n	800ce3e <_strtod_l+0xaf6>
 800ce06:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800ce90 <_strtod_l+0xb48>
 800ce0a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ce0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce12:	d811      	bhi.n	800ce38 <_strtod_l+0xaf0>
 800ce14:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ce18:	ee1d 3a10 	vmov	r3, s26
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	bf38      	it	cc
 800ce20:	2301      	movcc	r3, #1
 800ce22:	ee0d 3a10 	vmov	s26, r3
 800ce26:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ce2a:	f1ba 0f00 	cmp.w	sl, #0
 800ce2e:	d113      	bne.n	800ce58 <_strtod_l+0xb10>
 800ce30:	eeb1 7b4d 	vneg.f64	d7, d13
 800ce34:	ec53 2b17 	vmov	r2, r3, d7
 800ce38:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ce3c:	1a43      	subs	r3, r0, r1
 800ce3e:	eeb0 0b48 	vmov.f64	d0, d8
 800ce42:	ec43 2b1c 	vmov	d12, r2, r3
 800ce46:	910a      	str	r1, [sp, #40]	; 0x28
 800ce48:	f7ff f926 	bl	800c098 <__ulp>
 800ce4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce4e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ce52:	ec59 8b18 	vmov	r8, r9, d8
 800ce56:	e7aa      	b.n	800cdae <_strtod_l+0xa66>
 800ce58:	eeb0 7b4d 	vmov.f64	d7, d13
 800ce5c:	e7ea      	b.n	800ce34 <_strtod_l+0xaec>
 800ce5e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ce62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce66:	f57f af71 	bpl.w	800cd4c <_strtod_l+0xa04>
 800ce6a:	e4b5      	b.n	800c7d8 <_strtod_l+0x490>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9308      	str	r3, [sp, #32]
 800ce70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	f7ff baa6 	b.w	800c3c6 <_strtod_l+0x7e>
 800ce7a:	2a65      	cmp	r2, #101	; 0x65
 800ce7c:	f43f aba2 	beq.w	800c5c4 <_strtod_l+0x27c>
 800ce80:	2a45      	cmp	r2, #69	; 0x45
 800ce82:	f43f ab9f 	beq.w	800c5c4 <_strtod_l+0x27c>
 800ce86:	2101      	movs	r1, #1
 800ce88:	f7ff bbd8 	b.w	800c63c <_strtod_l+0x2f4>
 800ce8c:	f3af 8000 	nop.w
 800ce90:	ffc00000 	.word	0xffc00000
 800ce94:	41dfffff 	.word	0x41dfffff
 800ce98:	000fffff 	.word	0x000fffff
 800ce9c:	7ff00000 	.word	0x7ff00000
 800cea0:	7fefffff 	.word	0x7fefffff
 800cea4:	7c9fffff 	.word	0x7c9fffff
 800cea8:	7fe00000 	.word	0x7fe00000

0800ceac <_strtod_r>:
 800ceac:	4b01      	ldr	r3, [pc, #4]	; (800ceb4 <_strtod_r+0x8>)
 800ceae:	f7ff ba4b 	b.w	800c348 <_strtod_l>
 800ceb2:	bf00      	nop
 800ceb4:	20000074 	.word	0x20000074

0800ceb8 <_strtol_l.constprop.0>:
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cebe:	d001      	beq.n	800cec4 <_strtol_l.constprop.0+0xc>
 800cec0:	2b24      	cmp	r3, #36	; 0x24
 800cec2:	d906      	bls.n	800ced2 <_strtol_l.constprop.0+0x1a>
 800cec4:	f7fd fe46 	bl	800ab54 <__errno>
 800cec8:	2316      	movs	r3, #22
 800ceca:	6003      	str	r3, [r0, #0]
 800cecc:	2000      	movs	r0, #0
 800cece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cfb8 <_strtol_l.constprop.0+0x100>
 800ced6:	460d      	mov	r5, r1
 800ced8:	462e      	mov	r6, r5
 800ceda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cede:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cee2:	f017 0708 	ands.w	r7, r7, #8
 800cee6:	d1f7      	bne.n	800ced8 <_strtol_l.constprop.0+0x20>
 800cee8:	2c2d      	cmp	r4, #45	; 0x2d
 800ceea:	d132      	bne.n	800cf52 <_strtol_l.constprop.0+0x9a>
 800ceec:	782c      	ldrb	r4, [r5, #0]
 800ceee:	2701      	movs	r7, #1
 800cef0:	1cb5      	adds	r5, r6, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d05b      	beq.n	800cfae <_strtol_l.constprop.0+0xf6>
 800cef6:	2b10      	cmp	r3, #16
 800cef8:	d109      	bne.n	800cf0e <_strtol_l.constprop.0+0x56>
 800cefa:	2c30      	cmp	r4, #48	; 0x30
 800cefc:	d107      	bne.n	800cf0e <_strtol_l.constprop.0+0x56>
 800cefe:	782c      	ldrb	r4, [r5, #0]
 800cf00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf04:	2c58      	cmp	r4, #88	; 0x58
 800cf06:	d14d      	bne.n	800cfa4 <_strtol_l.constprop.0+0xec>
 800cf08:	786c      	ldrb	r4, [r5, #1]
 800cf0a:	2310      	movs	r3, #16
 800cf0c:	3502      	adds	r5, #2
 800cf0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf12:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf16:	f04f 0e00 	mov.w	lr, #0
 800cf1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf1e:	4676      	mov	r6, lr
 800cf20:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf28:	f1bc 0f09 	cmp.w	ip, #9
 800cf2c:	d816      	bhi.n	800cf5c <_strtol_l.constprop.0+0xa4>
 800cf2e:	4664      	mov	r4, ip
 800cf30:	42a3      	cmp	r3, r4
 800cf32:	dd24      	ble.n	800cf7e <_strtol_l.constprop.0+0xc6>
 800cf34:	f1be 3fff 	cmp.w	lr, #4294967295
 800cf38:	d008      	beq.n	800cf4c <_strtol_l.constprop.0+0x94>
 800cf3a:	45b1      	cmp	r9, r6
 800cf3c:	d31c      	bcc.n	800cf78 <_strtol_l.constprop.0+0xc0>
 800cf3e:	d101      	bne.n	800cf44 <_strtol_l.constprop.0+0x8c>
 800cf40:	45a2      	cmp	sl, r4
 800cf42:	db19      	blt.n	800cf78 <_strtol_l.constprop.0+0xc0>
 800cf44:	fb06 4603 	mla	r6, r6, r3, r4
 800cf48:	f04f 0e01 	mov.w	lr, #1
 800cf4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf50:	e7e8      	b.n	800cf24 <_strtol_l.constprop.0+0x6c>
 800cf52:	2c2b      	cmp	r4, #43	; 0x2b
 800cf54:	bf04      	itt	eq
 800cf56:	782c      	ldrbeq	r4, [r5, #0]
 800cf58:	1cb5      	addeq	r5, r6, #2
 800cf5a:	e7ca      	b.n	800cef2 <_strtol_l.constprop.0+0x3a>
 800cf5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf60:	f1bc 0f19 	cmp.w	ip, #25
 800cf64:	d801      	bhi.n	800cf6a <_strtol_l.constprop.0+0xb2>
 800cf66:	3c37      	subs	r4, #55	; 0x37
 800cf68:	e7e2      	b.n	800cf30 <_strtol_l.constprop.0+0x78>
 800cf6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf6e:	f1bc 0f19 	cmp.w	ip, #25
 800cf72:	d804      	bhi.n	800cf7e <_strtol_l.constprop.0+0xc6>
 800cf74:	3c57      	subs	r4, #87	; 0x57
 800cf76:	e7db      	b.n	800cf30 <_strtol_l.constprop.0+0x78>
 800cf78:	f04f 3eff 	mov.w	lr, #4294967295
 800cf7c:	e7e6      	b.n	800cf4c <_strtol_l.constprop.0+0x94>
 800cf7e:	f1be 3fff 	cmp.w	lr, #4294967295
 800cf82:	d105      	bne.n	800cf90 <_strtol_l.constprop.0+0xd8>
 800cf84:	2322      	movs	r3, #34	; 0x22
 800cf86:	6003      	str	r3, [r0, #0]
 800cf88:	4646      	mov	r6, r8
 800cf8a:	b942      	cbnz	r2, 800cf9e <_strtol_l.constprop.0+0xe6>
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	e79e      	b.n	800cece <_strtol_l.constprop.0+0x16>
 800cf90:	b107      	cbz	r7, 800cf94 <_strtol_l.constprop.0+0xdc>
 800cf92:	4276      	negs	r6, r6
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	d0f9      	beq.n	800cf8c <_strtol_l.constprop.0+0xd4>
 800cf98:	f1be 0f00 	cmp.w	lr, #0
 800cf9c:	d000      	beq.n	800cfa0 <_strtol_l.constprop.0+0xe8>
 800cf9e:	1e69      	subs	r1, r5, #1
 800cfa0:	6011      	str	r1, [r2, #0]
 800cfa2:	e7f3      	b.n	800cf8c <_strtol_l.constprop.0+0xd4>
 800cfa4:	2430      	movs	r4, #48	; 0x30
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1b1      	bne.n	800cf0e <_strtol_l.constprop.0+0x56>
 800cfaa:	2308      	movs	r3, #8
 800cfac:	e7af      	b.n	800cf0e <_strtol_l.constprop.0+0x56>
 800cfae:	2c30      	cmp	r4, #48	; 0x30
 800cfb0:	d0a5      	beq.n	800cefe <_strtol_l.constprop.0+0x46>
 800cfb2:	230a      	movs	r3, #10
 800cfb4:	e7ab      	b.n	800cf0e <_strtol_l.constprop.0+0x56>
 800cfb6:	bf00      	nop
 800cfb8:	08019121 	.word	0x08019121

0800cfbc <_strtol_r>:
 800cfbc:	f7ff bf7c 	b.w	800ceb8 <_strtol_l.constprop.0>

0800cfc0 <__ssputs_r>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	688e      	ldr	r6, [r1, #8]
 800cfc6:	461f      	mov	r7, r3
 800cfc8:	42be      	cmp	r6, r7
 800cfca:	680b      	ldr	r3, [r1, #0]
 800cfcc:	4682      	mov	sl, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	4690      	mov	r8, r2
 800cfd2:	d82c      	bhi.n	800d02e <__ssputs_r+0x6e>
 800cfd4:	898a      	ldrh	r2, [r1, #12]
 800cfd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfda:	d026      	beq.n	800d02a <__ssputs_r+0x6a>
 800cfdc:	6965      	ldr	r5, [r4, #20]
 800cfde:	6909      	ldr	r1, [r1, #16]
 800cfe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfe4:	eba3 0901 	sub.w	r9, r3, r1
 800cfe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfec:	1c7b      	adds	r3, r7, #1
 800cfee:	444b      	add	r3, r9
 800cff0:	106d      	asrs	r5, r5, #1
 800cff2:	429d      	cmp	r5, r3
 800cff4:	bf38      	it	cc
 800cff6:	461d      	movcc	r5, r3
 800cff8:	0553      	lsls	r3, r2, #21
 800cffa:	d527      	bpl.n	800d04c <__ssputs_r+0x8c>
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7fe fc53 	bl	800b8a8 <_malloc_r>
 800d002:	4606      	mov	r6, r0
 800d004:	b360      	cbz	r0, 800d060 <__ssputs_r+0xa0>
 800d006:	6921      	ldr	r1, [r4, #16]
 800d008:	464a      	mov	r2, r9
 800d00a:	f7fd fdd0 	bl	800abae <memcpy>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d018:	81a3      	strh	r3, [r4, #12]
 800d01a:	6126      	str	r6, [r4, #16]
 800d01c:	6165      	str	r5, [r4, #20]
 800d01e:	444e      	add	r6, r9
 800d020:	eba5 0509 	sub.w	r5, r5, r9
 800d024:	6026      	str	r6, [r4, #0]
 800d026:	60a5      	str	r5, [r4, #8]
 800d028:	463e      	mov	r6, r7
 800d02a:	42be      	cmp	r6, r7
 800d02c:	d900      	bls.n	800d030 <__ssputs_r+0x70>
 800d02e:	463e      	mov	r6, r7
 800d030:	6820      	ldr	r0, [r4, #0]
 800d032:	4632      	mov	r2, r6
 800d034:	4641      	mov	r1, r8
 800d036:	f000 f9c9 	bl	800d3cc <memmove>
 800d03a:	68a3      	ldr	r3, [r4, #8]
 800d03c:	1b9b      	subs	r3, r3, r6
 800d03e:	60a3      	str	r3, [r4, #8]
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	4433      	add	r3, r6
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	2000      	movs	r0, #0
 800d048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04c:	462a      	mov	r2, r5
 800d04e:	f000 fda0 	bl	800db92 <_realloc_r>
 800d052:	4606      	mov	r6, r0
 800d054:	2800      	cmp	r0, #0
 800d056:	d1e0      	bne.n	800d01a <__ssputs_r+0x5a>
 800d058:	6921      	ldr	r1, [r4, #16]
 800d05a:	4650      	mov	r0, sl
 800d05c:	f7fe fbb0 	bl	800b7c0 <_free_r>
 800d060:	230c      	movs	r3, #12
 800d062:	f8ca 3000 	str.w	r3, [sl]
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	f04f 30ff 	mov.w	r0, #4294967295
 800d072:	e7e9      	b.n	800d048 <__ssputs_r+0x88>

0800d074 <_svfiprintf_r>:
 800d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d078:	4698      	mov	r8, r3
 800d07a:	898b      	ldrh	r3, [r1, #12]
 800d07c:	061b      	lsls	r3, r3, #24
 800d07e:	b09d      	sub	sp, #116	; 0x74
 800d080:	4607      	mov	r7, r0
 800d082:	460d      	mov	r5, r1
 800d084:	4614      	mov	r4, r2
 800d086:	d50e      	bpl.n	800d0a6 <_svfiprintf_r+0x32>
 800d088:	690b      	ldr	r3, [r1, #16]
 800d08a:	b963      	cbnz	r3, 800d0a6 <_svfiprintf_r+0x32>
 800d08c:	2140      	movs	r1, #64	; 0x40
 800d08e:	f7fe fc0b 	bl	800b8a8 <_malloc_r>
 800d092:	6028      	str	r0, [r5, #0]
 800d094:	6128      	str	r0, [r5, #16]
 800d096:	b920      	cbnz	r0, 800d0a2 <_svfiprintf_r+0x2e>
 800d098:	230c      	movs	r3, #12
 800d09a:	603b      	str	r3, [r7, #0]
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a0:	e0d0      	b.n	800d244 <_svfiprintf_r+0x1d0>
 800d0a2:	2340      	movs	r3, #64	; 0x40
 800d0a4:	616b      	str	r3, [r5, #20]
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0aa:	2320      	movs	r3, #32
 800d0ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0b4:	2330      	movs	r3, #48	; 0x30
 800d0b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d25c <_svfiprintf_r+0x1e8>
 800d0ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0be:	f04f 0901 	mov.w	r9, #1
 800d0c2:	4623      	mov	r3, r4
 800d0c4:	469a      	mov	sl, r3
 800d0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ca:	b10a      	cbz	r2, 800d0d0 <_svfiprintf_r+0x5c>
 800d0cc:	2a25      	cmp	r2, #37	; 0x25
 800d0ce:	d1f9      	bne.n	800d0c4 <_svfiprintf_r+0x50>
 800d0d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d0d4:	d00b      	beq.n	800d0ee <_svfiprintf_r+0x7a>
 800d0d6:	465b      	mov	r3, fp
 800d0d8:	4622      	mov	r2, r4
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4638      	mov	r0, r7
 800d0de:	f7ff ff6f 	bl	800cfc0 <__ssputs_r>
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	f000 80a9 	beq.w	800d23a <_svfiprintf_r+0x1c6>
 800d0e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0ea:	445a      	add	r2, fp
 800d0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f000 80a1 	beq.w	800d23a <_svfiprintf_r+0x1c6>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d102:	f10a 0a01 	add.w	sl, sl, #1
 800d106:	9304      	str	r3, [sp, #16]
 800d108:	9307      	str	r3, [sp, #28]
 800d10a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d10e:	931a      	str	r3, [sp, #104]	; 0x68
 800d110:	4654      	mov	r4, sl
 800d112:	2205      	movs	r2, #5
 800d114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d118:	4850      	ldr	r0, [pc, #320]	; (800d25c <_svfiprintf_r+0x1e8>)
 800d11a:	f7f3 f891 	bl	8000240 <memchr>
 800d11e:	9a04      	ldr	r2, [sp, #16]
 800d120:	b9d8      	cbnz	r0, 800d15a <_svfiprintf_r+0xe6>
 800d122:	06d0      	lsls	r0, r2, #27
 800d124:	bf44      	itt	mi
 800d126:	2320      	movmi	r3, #32
 800d128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d12c:	0711      	lsls	r1, r2, #28
 800d12e:	bf44      	itt	mi
 800d130:	232b      	movmi	r3, #43	; 0x2b
 800d132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d136:	f89a 3000 	ldrb.w	r3, [sl]
 800d13a:	2b2a      	cmp	r3, #42	; 0x2a
 800d13c:	d015      	beq.n	800d16a <_svfiprintf_r+0xf6>
 800d13e:	9a07      	ldr	r2, [sp, #28]
 800d140:	4654      	mov	r4, sl
 800d142:	2000      	movs	r0, #0
 800d144:	f04f 0c0a 	mov.w	ip, #10
 800d148:	4621      	mov	r1, r4
 800d14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d14e:	3b30      	subs	r3, #48	; 0x30
 800d150:	2b09      	cmp	r3, #9
 800d152:	d94d      	bls.n	800d1f0 <_svfiprintf_r+0x17c>
 800d154:	b1b0      	cbz	r0, 800d184 <_svfiprintf_r+0x110>
 800d156:	9207      	str	r2, [sp, #28]
 800d158:	e014      	b.n	800d184 <_svfiprintf_r+0x110>
 800d15a:	eba0 0308 	sub.w	r3, r0, r8
 800d15e:	fa09 f303 	lsl.w	r3, r9, r3
 800d162:	4313      	orrs	r3, r2
 800d164:	9304      	str	r3, [sp, #16]
 800d166:	46a2      	mov	sl, r4
 800d168:	e7d2      	b.n	800d110 <_svfiprintf_r+0x9c>
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	1d19      	adds	r1, r3, #4
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	9103      	str	r1, [sp, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	bfbb      	ittet	lt
 800d176:	425b      	neglt	r3, r3
 800d178:	f042 0202 	orrlt.w	r2, r2, #2
 800d17c:	9307      	strge	r3, [sp, #28]
 800d17e:	9307      	strlt	r3, [sp, #28]
 800d180:	bfb8      	it	lt
 800d182:	9204      	strlt	r2, [sp, #16]
 800d184:	7823      	ldrb	r3, [r4, #0]
 800d186:	2b2e      	cmp	r3, #46	; 0x2e
 800d188:	d10c      	bne.n	800d1a4 <_svfiprintf_r+0x130>
 800d18a:	7863      	ldrb	r3, [r4, #1]
 800d18c:	2b2a      	cmp	r3, #42	; 0x2a
 800d18e:	d134      	bne.n	800d1fa <_svfiprintf_r+0x186>
 800d190:	9b03      	ldr	r3, [sp, #12]
 800d192:	1d1a      	adds	r2, r3, #4
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	9203      	str	r2, [sp, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	bfb8      	it	lt
 800d19c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1a0:	3402      	adds	r4, #2
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d26c <_svfiprintf_r+0x1f8>
 800d1a8:	7821      	ldrb	r1, [r4, #0]
 800d1aa:	2203      	movs	r2, #3
 800d1ac:	4650      	mov	r0, sl
 800d1ae:	f7f3 f847 	bl	8000240 <memchr>
 800d1b2:	b138      	cbz	r0, 800d1c4 <_svfiprintf_r+0x150>
 800d1b4:	9b04      	ldr	r3, [sp, #16]
 800d1b6:	eba0 000a 	sub.w	r0, r0, sl
 800d1ba:	2240      	movs	r2, #64	; 0x40
 800d1bc:	4082      	lsls	r2, r0
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	3401      	adds	r4, #1
 800d1c2:	9304      	str	r3, [sp, #16]
 800d1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c8:	4825      	ldr	r0, [pc, #148]	; (800d260 <_svfiprintf_r+0x1ec>)
 800d1ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ce:	2206      	movs	r2, #6
 800d1d0:	f7f3 f836 	bl	8000240 <memchr>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d038      	beq.n	800d24a <_svfiprintf_r+0x1d6>
 800d1d8:	4b22      	ldr	r3, [pc, #136]	; (800d264 <_svfiprintf_r+0x1f0>)
 800d1da:	bb1b      	cbnz	r3, 800d224 <_svfiprintf_r+0x1b0>
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	3307      	adds	r3, #7
 800d1e0:	f023 0307 	bic.w	r3, r3, #7
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	9303      	str	r3, [sp, #12]
 800d1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ea:	4433      	add	r3, r6
 800d1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ee:	e768      	b.n	800d0c2 <_svfiprintf_r+0x4e>
 800d1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	e7a6      	b.n	800d148 <_svfiprintf_r+0xd4>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	3401      	adds	r4, #1
 800d1fe:	9305      	str	r3, [sp, #20]
 800d200:	4619      	mov	r1, r3
 800d202:	f04f 0c0a 	mov.w	ip, #10
 800d206:	4620      	mov	r0, r4
 800d208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d20c:	3a30      	subs	r2, #48	; 0x30
 800d20e:	2a09      	cmp	r2, #9
 800d210:	d903      	bls.n	800d21a <_svfiprintf_r+0x1a6>
 800d212:	2b00      	cmp	r3, #0
 800d214:	d0c6      	beq.n	800d1a4 <_svfiprintf_r+0x130>
 800d216:	9105      	str	r1, [sp, #20]
 800d218:	e7c4      	b.n	800d1a4 <_svfiprintf_r+0x130>
 800d21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d21e:	4604      	mov	r4, r0
 800d220:	2301      	movs	r3, #1
 800d222:	e7f0      	b.n	800d206 <_svfiprintf_r+0x192>
 800d224:	ab03      	add	r3, sp, #12
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	462a      	mov	r2, r5
 800d22a:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <_svfiprintf_r+0x1f4>)
 800d22c:	a904      	add	r1, sp, #16
 800d22e:	4638      	mov	r0, r7
 800d230:	f7fc fd6a 	bl	8009d08 <_printf_float>
 800d234:	1c42      	adds	r2, r0, #1
 800d236:	4606      	mov	r6, r0
 800d238:	d1d6      	bne.n	800d1e8 <_svfiprintf_r+0x174>
 800d23a:	89ab      	ldrh	r3, [r5, #12]
 800d23c:	065b      	lsls	r3, r3, #25
 800d23e:	f53f af2d 	bmi.w	800d09c <_svfiprintf_r+0x28>
 800d242:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d244:	b01d      	add	sp, #116	; 0x74
 800d246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24a:	ab03      	add	r3, sp, #12
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	462a      	mov	r2, r5
 800d250:	4b05      	ldr	r3, [pc, #20]	; (800d268 <_svfiprintf_r+0x1f4>)
 800d252:	a904      	add	r1, sp, #16
 800d254:	4638      	mov	r0, r7
 800d256:	f7fc ffdf 	bl	800a218 <_printf_i>
 800d25a:	e7eb      	b.n	800d234 <_svfiprintf_r+0x1c0>
 800d25c:	08019221 	.word	0x08019221
 800d260:	0801922b 	.word	0x0801922b
 800d264:	08009d09 	.word	0x08009d09
 800d268:	0800cfc1 	.word	0x0800cfc1
 800d26c:	08019227 	.word	0x08019227

0800d270 <__sflush_r>:
 800d270:	898a      	ldrh	r2, [r1, #12]
 800d272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d276:	4605      	mov	r5, r0
 800d278:	0710      	lsls	r0, r2, #28
 800d27a:	460c      	mov	r4, r1
 800d27c:	d458      	bmi.n	800d330 <__sflush_r+0xc0>
 800d27e:	684b      	ldr	r3, [r1, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	dc05      	bgt.n	800d290 <__sflush_r+0x20>
 800d284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d286:	2b00      	cmp	r3, #0
 800d288:	dc02      	bgt.n	800d290 <__sflush_r+0x20>
 800d28a:	2000      	movs	r0, #0
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d292:	2e00      	cmp	r6, #0
 800d294:	d0f9      	beq.n	800d28a <__sflush_r+0x1a>
 800d296:	2300      	movs	r3, #0
 800d298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d29c:	682f      	ldr	r7, [r5, #0]
 800d29e:	6a21      	ldr	r1, [r4, #32]
 800d2a0:	602b      	str	r3, [r5, #0]
 800d2a2:	d032      	beq.n	800d30a <__sflush_r+0x9a>
 800d2a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2a6:	89a3      	ldrh	r3, [r4, #12]
 800d2a8:	075a      	lsls	r2, r3, #29
 800d2aa:	d505      	bpl.n	800d2b8 <__sflush_r+0x48>
 800d2ac:	6863      	ldr	r3, [r4, #4]
 800d2ae:	1ac0      	subs	r0, r0, r3
 800d2b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2b2:	b10b      	cbz	r3, 800d2b8 <__sflush_r+0x48>
 800d2b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2b6:	1ac0      	subs	r0, r0, r3
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2be:	6a21      	ldr	r1, [r4, #32]
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	47b0      	blx	r6
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	d106      	bne.n	800d2d8 <__sflush_r+0x68>
 800d2ca:	6829      	ldr	r1, [r5, #0]
 800d2cc:	291d      	cmp	r1, #29
 800d2ce:	d82b      	bhi.n	800d328 <__sflush_r+0xb8>
 800d2d0:	4a29      	ldr	r2, [pc, #164]	; (800d378 <__sflush_r+0x108>)
 800d2d2:	410a      	asrs	r2, r1
 800d2d4:	07d6      	lsls	r6, r2, #31
 800d2d6:	d427      	bmi.n	800d328 <__sflush_r+0xb8>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	6062      	str	r2, [r4, #4]
 800d2dc:	04d9      	lsls	r1, r3, #19
 800d2de:	6922      	ldr	r2, [r4, #16]
 800d2e0:	6022      	str	r2, [r4, #0]
 800d2e2:	d504      	bpl.n	800d2ee <__sflush_r+0x7e>
 800d2e4:	1c42      	adds	r2, r0, #1
 800d2e6:	d101      	bne.n	800d2ec <__sflush_r+0x7c>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b903      	cbnz	r3, 800d2ee <__sflush_r+0x7e>
 800d2ec:	6560      	str	r0, [r4, #84]	; 0x54
 800d2ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2f0:	602f      	str	r7, [r5, #0]
 800d2f2:	2900      	cmp	r1, #0
 800d2f4:	d0c9      	beq.n	800d28a <__sflush_r+0x1a>
 800d2f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2fa:	4299      	cmp	r1, r3
 800d2fc:	d002      	beq.n	800d304 <__sflush_r+0x94>
 800d2fe:	4628      	mov	r0, r5
 800d300:	f7fe fa5e 	bl	800b7c0 <_free_r>
 800d304:	2000      	movs	r0, #0
 800d306:	6360      	str	r0, [r4, #52]	; 0x34
 800d308:	e7c0      	b.n	800d28c <__sflush_r+0x1c>
 800d30a:	2301      	movs	r3, #1
 800d30c:	4628      	mov	r0, r5
 800d30e:	47b0      	blx	r6
 800d310:	1c41      	adds	r1, r0, #1
 800d312:	d1c8      	bne.n	800d2a6 <__sflush_r+0x36>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d0c5      	beq.n	800d2a6 <__sflush_r+0x36>
 800d31a:	2b1d      	cmp	r3, #29
 800d31c:	d001      	beq.n	800d322 <__sflush_r+0xb2>
 800d31e:	2b16      	cmp	r3, #22
 800d320:	d101      	bne.n	800d326 <__sflush_r+0xb6>
 800d322:	602f      	str	r7, [r5, #0]
 800d324:	e7b1      	b.n	800d28a <__sflush_r+0x1a>
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	e7ad      	b.n	800d28c <__sflush_r+0x1c>
 800d330:	690f      	ldr	r7, [r1, #16]
 800d332:	2f00      	cmp	r7, #0
 800d334:	d0a9      	beq.n	800d28a <__sflush_r+0x1a>
 800d336:	0793      	lsls	r3, r2, #30
 800d338:	680e      	ldr	r6, [r1, #0]
 800d33a:	bf08      	it	eq
 800d33c:	694b      	ldreq	r3, [r1, #20]
 800d33e:	600f      	str	r7, [r1, #0]
 800d340:	bf18      	it	ne
 800d342:	2300      	movne	r3, #0
 800d344:	eba6 0807 	sub.w	r8, r6, r7
 800d348:	608b      	str	r3, [r1, #8]
 800d34a:	f1b8 0f00 	cmp.w	r8, #0
 800d34e:	dd9c      	ble.n	800d28a <__sflush_r+0x1a>
 800d350:	6a21      	ldr	r1, [r4, #32]
 800d352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d354:	4643      	mov	r3, r8
 800d356:	463a      	mov	r2, r7
 800d358:	4628      	mov	r0, r5
 800d35a:	47b0      	blx	r6
 800d35c:	2800      	cmp	r0, #0
 800d35e:	dc06      	bgt.n	800d36e <__sflush_r+0xfe>
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	f04f 30ff 	mov.w	r0, #4294967295
 800d36c:	e78e      	b.n	800d28c <__sflush_r+0x1c>
 800d36e:	4407      	add	r7, r0
 800d370:	eba8 0800 	sub.w	r8, r8, r0
 800d374:	e7e9      	b.n	800d34a <__sflush_r+0xda>
 800d376:	bf00      	nop
 800d378:	dfbffffe 	.word	0xdfbffffe

0800d37c <_fflush_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	690b      	ldr	r3, [r1, #16]
 800d380:	4605      	mov	r5, r0
 800d382:	460c      	mov	r4, r1
 800d384:	b913      	cbnz	r3, 800d38c <_fflush_r+0x10>
 800d386:	2500      	movs	r5, #0
 800d388:	4628      	mov	r0, r5
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	b118      	cbz	r0, 800d396 <_fflush_r+0x1a>
 800d38e:	6a03      	ldr	r3, [r0, #32]
 800d390:	b90b      	cbnz	r3, 800d396 <_fflush_r+0x1a>
 800d392:	f7fd faf3 	bl	800a97c <__sinit>
 800d396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d0f3      	beq.n	800d386 <_fflush_r+0xa>
 800d39e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3a0:	07d0      	lsls	r0, r2, #31
 800d3a2:	d404      	bmi.n	800d3ae <_fflush_r+0x32>
 800d3a4:	0599      	lsls	r1, r3, #22
 800d3a6:	d402      	bmi.n	800d3ae <_fflush_r+0x32>
 800d3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3aa:	f7fd fbfe 	bl	800abaa <__retarget_lock_acquire_recursive>
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	f7ff ff5d 	bl	800d270 <__sflush_r>
 800d3b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3b8:	07da      	lsls	r2, r3, #31
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	d4e4      	bmi.n	800d388 <_fflush_r+0xc>
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	059b      	lsls	r3, r3, #22
 800d3c2:	d4e1      	bmi.n	800d388 <_fflush_r+0xc>
 800d3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3c6:	f7fd fbf1 	bl	800abac <__retarget_lock_release_recursive>
 800d3ca:	e7dd      	b.n	800d388 <_fflush_r+0xc>

0800d3cc <memmove>:
 800d3cc:	4288      	cmp	r0, r1
 800d3ce:	b510      	push	{r4, lr}
 800d3d0:	eb01 0402 	add.w	r4, r1, r2
 800d3d4:	d902      	bls.n	800d3dc <memmove+0x10>
 800d3d6:	4284      	cmp	r4, r0
 800d3d8:	4623      	mov	r3, r4
 800d3da:	d807      	bhi.n	800d3ec <memmove+0x20>
 800d3dc:	1e43      	subs	r3, r0, #1
 800d3de:	42a1      	cmp	r1, r4
 800d3e0:	d008      	beq.n	800d3f4 <memmove+0x28>
 800d3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3ea:	e7f8      	b.n	800d3de <memmove+0x12>
 800d3ec:	4402      	add	r2, r0
 800d3ee:	4601      	mov	r1, r0
 800d3f0:	428a      	cmp	r2, r1
 800d3f2:	d100      	bne.n	800d3f6 <memmove+0x2a>
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3fe:	e7f7      	b.n	800d3f0 <memmove+0x24>

0800d400 <strncmp>:
 800d400:	b510      	push	{r4, lr}
 800d402:	b16a      	cbz	r2, 800d420 <strncmp+0x20>
 800d404:	3901      	subs	r1, #1
 800d406:	1884      	adds	r4, r0, r2
 800d408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d40c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d410:	429a      	cmp	r2, r3
 800d412:	d103      	bne.n	800d41c <strncmp+0x1c>
 800d414:	42a0      	cmp	r0, r4
 800d416:	d001      	beq.n	800d41c <strncmp+0x1c>
 800d418:	2a00      	cmp	r2, #0
 800d41a:	d1f5      	bne.n	800d408 <strncmp+0x8>
 800d41c:	1ad0      	subs	r0, r2, r3
 800d41e:	bd10      	pop	{r4, pc}
 800d420:	4610      	mov	r0, r2
 800d422:	e7fc      	b.n	800d41e <strncmp+0x1e>

0800d424 <_sbrk_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4d06      	ldr	r5, [pc, #24]	; (800d440 <_sbrk_r+0x1c>)
 800d428:	2300      	movs	r3, #0
 800d42a:	4604      	mov	r4, r0
 800d42c:	4608      	mov	r0, r1
 800d42e:	602b      	str	r3, [r5, #0]
 800d430:	f7f5 f978 	bl	8002724 <_sbrk>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d102      	bne.n	800d43e <_sbrk_r+0x1a>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	b103      	cbz	r3, 800d43e <_sbrk_r+0x1a>
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	200005d4 	.word	0x200005d4
 800d444:	00000000 	.word	0x00000000

0800d448 <nan>:
 800d448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d450 <nan+0x8>
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	00000000 	.word	0x00000000
 800d454:	7ff80000 	.word	0x7ff80000

0800d458 <__assert_func>:
 800d458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d45a:	4614      	mov	r4, r2
 800d45c:	461a      	mov	r2, r3
 800d45e:	4b09      	ldr	r3, [pc, #36]	; (800d484 <__assert_func+0x2c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4605      	mov	r5, r0
 800d464:	68d8      	ldr	r0, [r3, #12]
 800d466:	b14c      	cbz	r4, 800d47c <__assert_func+0x24>
 800d468:	4b07      	ldr	r3, [pc, #28]	; (800d488 <__assert_func+0x30>)
 800d46a:	9100      	str	r1, [sp, #0]
 800d46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d470:	4906      	ldr	r1, [pc, #24]	; (800d48c <__assert_func+0x34>)
 800d472:	462b      	mov	r3, r5
 800d474:	f000 fbca 	bl	800dc0c <fiprintf>
 800d478:	f000 fbda 	bl	800dc30 <abort>
 800d47c:	4b04      	ldr	r3, [pc, #16]	; (800d490 <__assert_func+0x38>)
 800d47e:	461c      	mov	r4, r3
 800d480:	e7f3      	b.n	800d46a <__assert_func+0x12>
 800d482:	bf00      	nop
 800d484:	20000070 	.word	0x20000070
 800d488:	0801923a 	.word	0x0801923a
 800d48c:	08019247 	.word	0x08019247
 800d490:	08019275 	.word	0x08019275

0800d494 <_calloc_r>:
 800d494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d496:	fba1 2402 	umull	r2, r4, r1, r2
 800d49a:	b94c      	cbnz	r4, 800d4b0 <_calloc_r+0x1c>
 800d49c:	4611      	mov	r1, r2
 800d49e:	9201      	str	r2, [sp, #4]
 800d4a0:	f7fe fa02 	bl	800b8a8 <_malloc_r>
 800d4a4:	9a01      	ldr	r2, [sp, #4]
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	b930      	cbnz	r0, 800d4b8 <_calloc_r+0x24>
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	b003      	add	sp, #12
 800d4ae:	bd30      	pop	{r4, r5, pc}
 800d4b0:	220c      	movs	r2, #12
 800d4b2:	6002      	str	r2, [r0, #0]
 800d4b4:	2500      	movs	r5, #0
 800d4b6:	e7f8      	b.n	800d4aa <_calloc_r+0x16>
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	f7fd faf8 	bl	800aaae <memset>
 800d4be:	e7f4      	b.n	800d4aa <_calloc_r+0x16>

0800d4c0 <rshift>:
 800d4c0:	6903      	ldr	r3, [r0, #16]
 800d4c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4ce:	f100 0414 	add.w	r4, r0, #20
 800d4d2:	dd45      	ble.n	800d560 <rshift+0xa0>
 800d4d4:	f011 011f 	ands.w	r1, r1, #31
 800d4d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4e0:	d10c      	bne.n	800d4fc <rshift+0x3c>
 800d4e2:	f100 0710 	add.w	r7, r0, #16
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	42b1      	cmp	r1, r6
 800d4ea:	d334      	bcc.n	800d556 <rshift+0x96>
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	1eea      	subs	r2, r5, #3
 800d4f2:	4296      	cmp	r6, r2
 800d4f4:	bf38      	it	cc
 800d4f6:	2300      	movcc	r3, #0
 800d4f8:	4423      	add	r3, r4
 800d4fa:	e015      	b.n	800d528 <rshift+0x68>
 800d4fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d500:	f1c1 0820 	rsb	r8, r1, #32
 800d504:	40cf      	lsrs	r7, r1
 800d506:	f105 0e04 	add.w	lr, r5, #4
 800d50a:	46a1      	mov	r9, r4
 800d50c:	4576      	cmp	r6, lr
 800d50e:	46f4      	mov	ip, lr
 800d510:	d815      	bhi.n	800d53e <rshift+0x7e>
 800d512:	1a9a      	subs	r2, r3, r2
 800d514:	0092      	lsls	r2, r2, #2
 800d516:	3a04      	subs	r2, #4
 800d518:	3501      	adds	r5, #1
 800d51a:	42ae      	cmp	r6, r5
 800d51c:	bf38      	it	cc
 800d51e:	2200      	movcc	r2, #0
 800d520:	18a3      	adds	r3, r4, r2
 800d522:	50a7      	str	r7, [r4, r2]
 800d524:	b107      	cbz	r7, 800d528 <rshift+0x68>
 800d526:	3304      	adds	r3, #4
 800d528:	1b1a      	subs	r2, r3, r4
 800d52a:	42a3      	cmp	r3, r4
 800d52c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d530:	bf08      	it	eq
 800d532:	2300      	moveq	r3, #0
 800d534:	6102      	str	r2, [r0, #16]
 800d536:	bf08      	it	eq
 800d538:	6143      	streq	r3, [r0, #20]
 800d53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d53e:	f8dc c000 	ldr.w	ip, [ip]
 800d542:	fa0c fc08 	lsl.w	ip, ip, r8
 800d546:	ea4c 0707 	orr.w	r7, ip, r7
 800d54a:	f849 7b04 	str.w	r7, [r9], #4
 800d54e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d552:	40cf      	lsrs	r7, r1
 800d554:	e7da      	b.n	800d50c <rshift+0x4c>
 800d556:	f851 cb04 	ldr.w	ip, [r1], #4
 800d55a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d55e:	e7c3      	b.n	800d4e8 <rshift+0x28>
 800d560:	4623      	mov	r3, r4
 800d562:	e7e1      	b.n	800d528 <rshift+0x68>

0800d564 <__hexdig_fun>:
 800d564:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d568:	2b09      	cmp	r3, #9
 800d56a:	d802      	bhi.n	800d572 <__hexdig_fun+0xe>
 800d56c:	3820      	subs	r0, #32
 800d56e:	b2c0      	uxtb	r0, r0
 800d570:	4770      	bx	lr
 800d572:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d576:	2b05      	cmp	r3, #5
 800d578:	d801      	bhi.n	800d57e <__hexdig_fun+0x1a>
 800d57a:	3847      	subs	r0, #71	; 0x47
 800d57c:	e7f7      	b.n	800d56e <__hexdig_fun+0xa>
 800d57e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d582:	2b05      	cmp	r3, #5
 800d584:	d801      	bhi.n	800d58a <__hexdig_fun+0x26>
 800d586:	3827      	subs	r0, #39	; 0x27
 800d588:	e7f1      	b.n	800d56e <__hexdig_fun+0xa>
 800d58a:	2000      	movs	r0, #0
 800d58c:	4770      	bx	lr
	...

0800d590 <__gethex>:
 800d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d594:	4617      	mov	r7, r2
 800d596:	680a      	ldr	r2, [r1, #0]
 800d598:	b085      	sub	sp, #20
 800d59a:	f102 0b02 	add.w	fp, r2, #2
 800d59e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d5a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5a6:	4681      	mov	r9, r0
 800d5a8:	468a      	mov	sl, r1
 800d5aa:	9302      	str	r3, [sp, #8]
 800d5ac:	32fe      	adds	r2, #254	; 0xfe
 800d5ae:	eb02 030b 	add.w	r3, r2, fp
 800d5b2:	46d8      	mov	r8, fp
 800d5b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d5b8:	9301      	str	r3, [sp, #4]
 800d5ba:	2830      	cmp	r0, #48	; 0x30
 800d5bc:	d0f7      	beq.n	800d5ae <__gethex+0x1e>
 800d5be:	f7ff ffd1 	bl	800d564 <__hexdig_fun>
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d138      	bne.n	800d63a <__gethex+0xaa>
 800d5c8:	49a7      	ldr	r1, [pc, #668]	; (800d868 <__gethex+0x2d8>)
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	f7ff ff17 	bl	800d400 <strncmp>
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d169      	bne.n	800d6ac <__gethex+0x11c>
 800d5d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d5dc:	465d      	mov	r5, fp
 800d5de:	f7ff ffc1 	bl	800d564 <__hexdig_fun>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d064      	beq.n	800d6b0 <__gethex+0x120>
 800d5e6:	465a      	mov	r2, fp
 800d5e8:	7810      	ldrb	r0, [r2, #0]
 800d5ea:	2830      	cmp	r0, #48	; 0x30
 800d5ec:	4690      	mov	r8, r2
 800d5ee:	f102 0201 	add.w	r2, r2, #1
 800d5f2:	d0f9      	beq.n	800d5e8 <__gethex+0x58>
 800d5f4:	f7ff ffb6 	bl	800d564 <__hexdig_fun>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	fab0 f480 	clz	r4, r0
 800d5fe:	0964      	lsrs	r4, r4, #5
 800d600:	465e      	mov	r6, fp
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	4642      	mov	r2, r8
 800d606:	4615      	mov	r5, r2
 800d608:	3201      	adds	r2, #1
 800d60a:	7828      	ldrb	r0, [r5, #0]
 800d60c:	f7ff ffaa 	bl	800d564 <__hexdig_fun>
 800d610:	2800      	cmp	r0, #0
 800d612:	d1f8      	bne.n	800d606 <__gethex+0x76>
 800d614:	4994      	ldr	r1, [pc, #592]	; (800d868 <__gethex+0x2d8>)
 800d616:	2201      	movs	r2, #1
 800d618:	4628      	mov	r0, r5
 800d61a:	f7ff fef1 	bl	800d400 <strncmp>
 800d61e:	b978      	cbnz	r0, 800d640 <__gethex+0xb0>
 800d620:	b946      	cbnz	r6, 800d634 <__gethex+0xa4>
 800d622:	1c6e      	adds	r6, r5, #1
 800d624:	4632      	mov	r2, r6
 800d626:	4615      	mov	r5, r2
 800d628:	3201      	adds	r2, #1
 800d62a:	7828      	ldrb	r0, [r5, #0]
 800d62c:	f7ff ff9a 	bl	800d564 <__hexdig_fun>
 800d630:	2800      	cmp	r0, #0
 800d632:	d1f8      	bne.n	800d626 <__gethex+0x96>
 800d634:	1b73      	subs	r3, r6, r5
 800d636:	009e      	lsls	r6, r3, #2
 800d638:	e004      	b.n	800d644 <__gethex+0xb4>
 800d63a:	2400      	movs	r4, #0
 800d63c:	4626      	mov	r6, r4
 800d63e:	e7e1      	b.n	800d604 <__gethex+0x74>
 800d640:	2e00      	cmp	r6, #0
 800d642:	d1f7      	bne.n	800d634 <__gethex+0xa4>
 800d644:	782b      	ldrb	r3, [r5, #0]
 800d646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d64a:	2b50      	cmp	r3, #80	; 0x50
 800d64c:	d13d      	bne.n	800d6ca <__gethex+0x13a>
 800d64e:	786b      	ldrb	r3, [r5, #1]
 800d650:	2b2b      	cmp	r3, #43	; 0x2b
 800d652:	d02f      	beq.n	800d6b4 <__gethex+0x124>
 800d654:	2b2d      	cmp	r3, #45	; 0x2d
 800d656:	d031      	beq.n	800d6bc <__gethex+0x12c>
 800d658:	1c69      	adds	r1, r5, #1
 800d65a:	f04f 0b00 	mov.w	fp, #0
 800d65e:	7808      	ldrb	r0, [r1, #0]
 800d660:	f7ff ff80 	bl	800d564 <__hexdig_fun>
 800d664:	1e42      	subs	r2, r0, #1
 800d666:	b2d2      	uxtb	r2, r2
 800d668:	2a18      	cmp	r2, #24
 800d66a:	d82e      	bhi.n	800d6ca <__gethex+0x13a>
 800d66c:	f1a0 0210 	sub.w	r2, r0, #16
 800d670:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d674:	f7ff ff76 	bl	800d564 <__hexdig_fun>
 800d678:	f100 3cff 	add.w	ip, r0, #4294967295
 800d67c:	fa5f fc8c 	uxtb.w	ip, ip
 800d680:	f1bc 0f18 	cmp.w	ip, #24
 800d684:	d91d      	bls.n	800d6c2 <__gethex+0x132>
 800d686:	f1bb 0f00 	cmp.w	fp, #0
 800d68a:	d000      	beq.n	800d68e <__gethex+0xfe>
 800d68c:	4252      	negs	r2, r2
 800d68e:	4416      	add	r6, r2
 800d690:	f8ca 1000 	str.w	r1, [sl]
 800d694:	b1dc      	cbz	r4, 800d6ce <__gethex+0x13e>
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bf14      	ite	ne
 800d69c:	f04f 0800 	movne.w	r8, #0
 800d6a0:	f04f 0806 	moveq.w	r8, #6
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	b005      	add	sp, #20
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ac:	4645      	mov	r5, r8
 800d6ae:	4626      	mov	r6, r4
 800d6b0:	2401      	movs	r4, #1
 800d6b2:	e7c7      	b.n	800d644 <__gethex+0xb4>
 800d6b4:	f04f 0b00 	mov.w	fp, #0
 800d6b8:	1ca9      	adds	r1, r5, #2
 800d6ba:	e7d0      	b.n	800d65e <__gethex+0xce>
 800d6bc:	f04f 0b01 	mov.w	fp, #1
 800d6c0:	e7fa      	b.n	800d6b8 <__gethex+0x128>
 800d6c2:	230a      	movs	r3, #10
 800d6c4:	fb03 0002 	mla	r0, r3, r2, r0
 800d6c8:	e7d0      	b.n	800d66c <__gethex+0xdc>
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	e7e0      	b.n	800d690 <__gethex+0x100>
 800d6ce:	eba5 0308 	sub.w	r3, r5, r8
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	2b07      	cmp	r3, #7
 800d6d8:	dc0a      	bgt.n	800d6f0 <__gethex+0x160>
 800d6da:	4648      	mov	r0, r9
 800d6dc:	f7fe f970 	bl	800b9c0 <_Balloc>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	b940      	cbnz	r0, 800d6f6 <__gethex+0x166>
 800d6e4:	4b61      	ldr	r3, [pc, #388]	; (800d86c <__gethex+0x2dc>)
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	21e4      	movs	r1, #228	; 0xe4
 800d6ea:	4861      	ldr	r0, [pc, #388]	; (800d870 <__gethex+0x2e0>)
 800d6ec:	f7ff feb4 	bl	800d458 <__assert_func>
 800d6f0:	3101      	adds	r1, #1
 800d6f2:	105b      	asrs	r3, r3, #1
 800d6f4:	e7ef      	b.n	800d6d6 <__gethex+0x146>
 800d6f6:	f100 0a14 	add.w	sl, r0, #20
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	495a      	ldr	r1, [pc, #360]	; (800d868 <__gethex+0x2d8>)
 800d6fe:	f8cd a004 	str.w	sl, [sp, #4]
 800d702:	469b      	mov	fp, r3
 800d704:	45a8      	cmp	r8, r5
 800d706:	d342      	bcc.n	800d78e <__gethex+0x1fe>
 800d708:	9801      	ldr	r0, [sp, #4]
 800d70a:	f840 bb04 	str.w	fp, [r0], #4
 800d70e:	eba0 000a 	sub.w	r0, r0, sl
 800d712:	1080      	asrs	r0, r0, #2
 800d714:	6120      	str	r0, [r4, #16]
 800d716:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d71a:	4658      	mov	r0, fp
 800d71c:	f7fe fa42 	bl	800bba4 <__hi0bits>
 800d720:	683d      	ldr	r5, [r7, #0]
 800d722:	eba8 0000 	sub.w	r0, r8, r0
 800d726:	42a8      	cmp	r0, r5
 800d728:	dd59      	ble.n	800d7de <__gethex+0x24e>
 800d72a:	eba0 0805 	sub.w	r8, r0, r5
 800d72e:	4641      	mov	r1, r8
 800d730:	4620      	mov	r0, r4
 800d732:	f7fe fdce 	bl	800c2d2 <__any_on>
 800d736:	4683      	mov	fp, r0
 800d738:	b1b8      	cbz	r0, 800d76a <__gethex+0x1da>
 800d73a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d73e:	1159      	asrs	r1, r3, #5
 800d740:	f003 021f 	and.w	r2, r3, #31
 800d744:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d748:	f04f 0b01 	mov.w	fp, #1
 800d74c:	fa0b f202 	lsl.w	r2, fp, r2
 800d750:	420a      	tst	r2, r1
 800d752:	d00a      	beq.n	800d76a <__gethex+0x1da>
 800d754:	455b      	cmp	r3, fp
 800d756:	dd06      	ble.n	800d766 <__gethex+0x1d6>
 800d758:	f1a8 0102 	sub.w	r1, r8, #2
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7fe fdb8 	bl	800c2d2 <__any_on>
 800d762:	2800      	cmp	r0, #0
 800d764:	d138      	bne.n	800d7d8 <__gethex+0x248>
 800d766:	f04f 0b02 	mov.w	fp, #2
 800d76a:	4641      	mov	r1, r8
 800d76c:	4620      	mov	r0, r4
 800d76e:	f7ff fea7 	bl	800d4c0 <rshift>
 800d772:	4446      	add	r6, r8
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	42b3      	cmp	r3, r6
 800d778:	da41      	bge.n	800d7fe <__gethex+0x26e>
 800d77a:	4621      	mov	r1, r4
 800d77c:	4648      	mov	r0, r9
 800d77e:	f7fe f95f 	bl	800ba40 <_Bfree>
 800d782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d784:	2300      	movs	r3, #0
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d78c:	e78a      	b.n	800d6a4 <__gethex+0x114>
 800d78e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d792:	2a2e      	cmp	r2, #46	; 0x2e
 800d794:	d014      	beq.n	800d7c0 <__gethex+0x230>
 800d796:	2b20      	cmp	r3, #32
 800d798:	d106      	bne.n	800d7a8 <__gethex+0x218>
 800d79a:	9b01      	ldr	r3, [sp, #4]
 800d79c:	f843 bb04 	str.w	fp, [r3], #4
 800d7a0:	f04f 0b00 	mov.w	fp, #0
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	465b      	mov	r3, fp
 800d7a8:	7828      	ldrb	r0, [r5, #0]
 800d7aa:	9303      	str	r3, [sp, #12]
 800d7ac:	f7ff feda 	bl	800d564 <__hexdig_fun>
 800d7b0:	9b03      	ldr	r3, [sp, #12]
 800d7b2:	f000 000f 	and.w	r0, r0, #15
 800d7b6:	4098      	lsls	r0, r3
 800d7b8:	ea4b 0b00 	orr.w	fp, fp, r0
 800d7bc:	3304      	adds	r3, #4
 800d7be:	e7a1      	b.n	800d704 <__gethex+0x174>
 800d7c0:	45a8      	cmp	r8, r5
 800d7c2:	d8e8      	bhi.n	800d796 <__gethex+0x206>
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	9303      	str	r3, [sp, #12]
 800d7ca:	f7ff fe19 	bl	800d400 <strncmp>
 800d7ce:	4926      	ldr	r1, [pc, #152]	; (800d868 <__gethex+0x2d8>)
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d1df      	bne.n	800d796 <__gethex+0x206>
 800d7d6:	e795      	b.n	800d704 <__gethex+0x174>
 800d7d8:	f04f 0b03 	mov.w	fp, #3
 800d7dc:	e7c5      	b.n	800d76a <__gethex+0x1da>
 800d7de:	da0b      	bge.n	800d7f8 <__gethex+0x268>
 800d7e0:	eba5 0800 	sub.w	r8, r5, r0
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	4642      	mov	r2, r8
 800d7e8:	4648      	mov	r0, r9
 800d7ea:	f7fe fb43 	bl	800be74 <__lshift>
 800d7ee:	eba6 0608 	sub.w	r6, r6, r8
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	f100 0a14 	add.w	sl, r0, #20
 800d7f8:	f04f 0b00 	mov.w	fp, #0
 800d7fc:	e7ba      	b.n	800d774 <__gethex+0x1e4>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	42b3      	cmp	r3, r6
 800d802:	dd73      	ble.n	800d8ec <__gethex+0x35c>
 800d804:	1b9e      	subs	r6, r3, r6
 800d806:	42b5      	cmp	r5, r6
 800d808:	dc34      	bgt.n	800d874 <__gethex+0x2e4>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d023      	beq.n	800d858 <__gethex+0x2c8>
 800d810:	2b03      	cmp	r3, #3
 800d812:	d025      	beq.n	800d860 <__gethex+0x2d0>
 800d814:	2b01      	cmp	r3, #1
 800d816:	d115      	bne.n	800d844 <__gethex+0x2b4>
 800d818:	42b5      	cmp	r5, r6
 800d81a:	d113      	bne.n	800d844 <__gethex+0x2b4>
 800d81c:	2d01      	cmp	r5, #1
 800d81e:	d10b      	bne.n	800d838 <__gethex+0x2a8>
 800d820:	9a02      	ldr	r2, [sp, #8]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	2301      	movs	r3, #1
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	f8ca 3000 	str.w	r3, [sl]
 800d82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d830:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d834:	601c      	str	r4, [r3, #0]
 800d836:	e735      	b.n	800d6a4 <__gethex+0x114>
 800d838:	1e69      	subs	r1, r5, #1
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7fe fd49 	bl	800c2d2 <__any_on>
 800d840:	2800      	cmp	r0, #0
 800d842:	d1ed      	bne.n	800d820 <__gethex+0x290>
 800d844:	4621      	mov	r1, r4
 800d846:	4648      	mov	r0, r9
 800d848:	f7fe f8fa 	bl	800ba40 <_Bfree>
 800d84c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d84e:	2300      	movs	r3, #0
 800d850:	6013      	str	r3, [r2, #0]
 800d852:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d856:	e725      	b.n	800d6a4 <__gethex+0x114>
 800d858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1f2      	bne.n	800d844 <__gethex+0x2b4>
 800d85e:	e7df      	b.n	800d820 <__gethex+0x290>
 800d860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1dc      	bne.n	800d820 <__gethex+0x290>
 800d866:	e7ed      	b.n	800d844 <__gethex+0x2b4>
 800d868:	080190cc 	.word	0x080190cc
 800d86c:	08018f65 	.word	0x08018f65
 800d870:	08019276 	.word	0x08019276
 800d874:	f106 38ff 	add.w	r8, r6, #4294967295
 800d878:	f1bb 0f00 	cmp.w	fp, #0
 800d87c:	d133      	bne.n	800d8e6 <__gethex+0x356>
 800d87e:	f1b8 0f00 	cmp.w	r8, #0
 800d882:	d004      	beq.n	800d88e <__gethex+0x2fe>
 800d884:	4641      	mov	r1, r8
 800d886:	4620      	mov	r0, r4
 800d888:	f7fe fd23 	bl	800c2d2 <__any_on>
 800d88c:	4683      	mov	fp, r0
 800d88e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d892:	2301      	movs	r3, #1
 800d894:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d898:	f008 081f 	and.w	r8, r8, #31
 800d89c:	fa03 f308 	lsl.w	r3, r3, r8
 800d8a0:	4213      	tst	r3, r2
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	bf18      	it	ne
 800d8a8:	f04b 0b02 	orrne.w	fp, fp, #2
 800d8ac:	1bad      	subs	r5, r5, r6
 800d8ae:	f7ff fe07 	bl	800d4c0 <rshift>
 800d8b2:	687e      	ldr	r6, [r7, #4]
 800d8b4:	f04f 0802 	mov.w	r8, #2
 800d8b8:	f1bb 0f00 	cmp.w	fp, #0
 800d8bc:	d04a      	beq.n	800d954 <__gethex+0x3c4>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d016      	beq.n	800d8f2 <__gethex+0x362>
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d018      	beq.n	800d8fa <__gethex+0x36a>
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d109      	bne.n	800d8e0 <__gethex+0x350>
 800d8cc:	f01b 0f02 	tst.w	fp, #2
 800d8d0:	d006      	beq.n	800d8e0 <__gethex+0x350>
 800d8d2:	f8da 3000 	ldr.w	r3, [sl]
 800d8d6:	ea4b 0b03 	orr.w	fp, fp, r3
 800d8da:	f01b 0f01 	tst.w	fp, #1
 800d8de:	d10f      	bne.n	800d900 <__gethex+0x370>
 800d8e0:	f048 0810 	orr.w	r8, r8, #16
 800d8e4:	e036      	b.n	800d954 <__gethex+0x3c4>
 800d8e6:	f04f 0b01 	mov.w	fp, #1
 800d8ea:	e7d0      	b.n	800d88e <__gethex+0x2fe>
 800d8ec:	f04f 0801 	mov.w	r8, #1
 800d8f0:	e7e2      	b.n	800d8b8 <__gethex+0x328>
 800d8f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8f4:	f1c3 0301 	rsb	r3, r3, #1
 800d8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0ef      	beq.n	800d8e0 <__gethex+0x350>
 800d900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d904:	f104 0214 	add.w	r2, r4, #20
 800d908:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d912:	2300      	movs	r3, #0
 800d914:	4694      	mov	ip, r2
 800d916:	f852 1b04 	ldr.w	r1, [r2], #4
 800d91a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d91e:	d01e      	beq.n	800d95e <__gethex+0x3ce>
 800d920:	3101      	adds	r1, #1
 800d922:	f8cc 1000 	str.w	r1, [ip]
 800d926:	f1b8 0f02 	cmp.w	r8, #2
 800d92a:	f104 0214 	add.w	r2, r4, #20
 800d92e:	d13d      	bne.n	800d9ac <__gethex+0x41c>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	3b01      	subs	r3, #1
 800d934:	42ab      	cmp	r3, r5
 800d936:	d10b      	bne.n	800d950 <__gethex+0x3c0>
 800d938:	1169      	asrs	r1, r5, #5
 800d93a:	2301      	movs	r3, #1
 800d93c:	f005 051f 	and.w	r5, r5, #31
 800d940:	fa03 f505 	lsl.w	r5, r3, r5
 800d944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d948:	421d      	tst	r5, r3
 800d94a:	bf18      	it	ne
 800d94c:	f04f 0801 	movne.w	r8, #1
 800d950:	f048 0820 	orr.w	r8, r8, #32
 800d954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d956:	601c      	str	r4, [r3, #0]
 800d958:	9b02      	ldr	r3, [sp, #8]
 800d95a:	601e      	str	r6, [r3, #0]
 800d95c:	e6a2      	b.n	800d6a4 <__gethex+0x114>
 800d95e:	4290      	cmp	r0, r2
 800d960:	f842 3c04 	str.w	r3, [r2, #-4]
 800d964:	d8d6      	bhi.n	800d914 <__gethex+0x384>
 800d966:	68a2      	ldr	r2, [r4, #8]
 800d968:	4593      	cmp	fp, r2
 800d96a:	db17      	blt.n	800d99c <__gethex+0x40c>
 800d96c:	6861      	ldr	r1, [r4, #4]
 800d96e:	4648      	mov	r0, r9
 800d970:	3101      	adds	r1, #1
 800d972:	f7fe f825 	bl	800b9c0 <_Balloc>
 800d976:	4682      	mov	sl, r0
 800d978:	b918      	cbnz	r0, 800d982 <__gethex+0x3f2>
 800d97a:	4b1b      	ldr	r3, [pc, #108]	; (800d9e8 <__gethex+0x458>)
 800d97c:	4602      	mov	r2, r0
 800d97e:	2184      	movs	r1, #132	; 0x84
 800d980:	e6b3      	b.n	800d6ea <__gethex+0x15a>
 800d982:	6922      	ldr	r2, [r4, #16]
 800d984:	3202      	adds	r2, #2
 800d986:	f104 010c 	add.w	r1, r4, #12
 800d98a:	0092      	lsls	r2, r2, #2
 800d98c:	300c      	adds	r0, #12
 800d98e:	f7fd f90e 	bl	800abae <memcpy>
 800d992:	4621      	mov	r1, r4
 800d994:	4648      	mov	r0, r9
 800d996:	f7fe f853 	bl	800ba40 <_Bfree>
 800d99a:	4654      	mov	r4, sl
 800d99c:	6922      	ldr	r2, [r4, #16]
 800d99e:	1c51      	adds	r1, r2, #1
 800d9a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d9a4:	6121      	str	r1, [r4, #16]
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	6151      	str	r1, [r2, #20]
 800d9aa:	e7bc      	b.n	800d926 <__gethex+0x396>
 800d9ac:	6921      	ldr	r1, [r4, #16]
 800d9ae:	4559      	cmp	r1, fp
 800d9b0:	dd0b      	ble.n	800d9ca <__gethex+0x43a>
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f7ff fd83 	bl	800d4c0 <rshift>
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	3601      	adds	r6, #1
 800d9be:	42b3      	cmp	r3, r6
 800d9c0:	f6ff aedb 	blt.w	800d77a <__gethex+0x1ea>
 800d9c4:	f04f 0801 	mov.w	r8, #1
 800d9c8:	e7c2      	b.n	800d950 <__gethex+0x3c0>
 800d9ca:	f015 051f 	ands.w	r5, r5, #31
 800d9ce:	d0f9      	beq.n	800d9c4 <__gethex+0x434>
 800d9d0:	9b01      	ldr	r3, [sp, #4]
 800d9d2:	441a      	add	r2, r3
 800d9d4:	f1c5 0520 	rsb	r5, r5, #32
 800d9d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d9dc:	f7fe f8e2 	bl	800bba4 <__hi0bits>
 800d9e0:	42a8      	cmp	r0, r5
 800d9e2:	dbe6      	blt.n	800d9b2 <__gethex+0x422>
 800d9e4:	e7ee      	b.n	800d9c4 <__gethex+0x434>
 800d9e6:	bf00      	nop
 800d9e8:	08018f65 	.word	0x08018f65

0800d9ec <L_shift>:
 800d9ec:	f1c2 0208 	rsb	r2, r2, #8
 800d9f0:	0092      	lsls	r2, r2, #2
 800d9f2:	b570      	push	{r4, r5, r6, lr}
 800d9f4:	f1c2 0620 	rsb	r6, r2, #32
 800d9f8:	6843      	ldr	r3, [r0, #4]
 800d9fa:	6804      	ldr	r4, [r0, #0]
 800d9fc:	fa03 f506 	lsl.w	r5, r3, r6
 800da00:	432c      	orrs	r4, r5
 800da02:	40d3      	lsrs	r3, r2
 800da04:	6004      	str	r4, [r0, #0]
 800da06:	f840 3f04 	str.w	r3, [r0, #4]!
 800da0a:	4288      	cmp	r0, r1
 800da0c:	d3f4      	bcc.n	800d9f8 <L_shift+0xc>
 800da0e:	bd70      	pop	{r4, r5, r6, pc}

0800da10 <__match>:
 800da10:	b530      	push	{r4, r5, lr}
 800da12:	6803      	ldr	r3, [r0, #0]
 800da14:	3301      	adds	r3, #1
 800da16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da1a:	b914      	cbnz	r4, 800da22 <__match+0x12>
 800da1c:	6003      	str	r3, [r0, #0]
 800da1e:	2001      	movs	r0, #1
 800da20:	bd30      	pop	{r4, r5, pc}
 800da22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da2a:	2d19      	cmp	r5, #25
 800da2c:	bf98      	it	ls
 800da2e:	3220      	addls	r2, #32
 800da30:	42a2      	cmp	r2, r4
 800da32:	d0f0      	beq.n	800da16 <__match+0x6>
 800da34:	2000      	movs	r0, #0
 800da36:	e7f3      	b.n	800da20 <__match+0x10>

0800da38 <__hexnan>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	680b      	ldr	r3, [r1, #0]
 800da3e:	6801      	ldr	r1, [r0, #0]
 800da40:	115e      	asrs	r6, r3, #5
 800da42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da46:	f013 031f 	ands.w	r3, r3, #31
 800da4a:	b087      	sub	sp, #28
 800da4c:	bf18      	it	ne
 800da4e:	3604      	addne	r6, #4
 800da50:	2500      	movs	r5, #0
 800da52:	1f37      	subs	r7, r6, #4
 800da54:	4682      	mov	sl, r0
 800da56:	4690      	mov	r8, r2
 800da58:	9301      	str	r3, [sp, #4]
 800da5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800da5e:	46b9      	mov	r9, r7
 800da60:	463c      	mov	r4, r7
 800da62:	9502      	str	r5, [sp, #8]
 800da64:	46ab      	mov	fp, r5
 800da66:	784a      	ldrb	r2, [r1, #1]
 800da68:	1c4b      	adds	r3, r1, #1
 800da6a:	9303      	str	r3, [sp, #12]
 800da6c:	b342      	cbz	r2, 800dac0 <__hexnan+0x88>
 800da6e:	4610      	mov	r0, r2
 800da70:	9105      	str	r1, [sp, #20]
 800da72:	9204      	str	r2, [sp, #16]
 800da74:	f7ff fd76 	bl	800d564 <__hexdig_fun>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d14f      	bne.n	800db1c <__hexnan+0xe4>
 800da7c:	9a04      	ldr	r2, [sp, #16]
 800da7e:	9905      	ldr	r1, [sp, #20]
 800da80:	2a20      	cmp	r2, #32
 800da82:	d818      	bhi.n	800dab6 <__hexnan+0x7e>
 800da84:	9b02      	ldr	r3, [sp, #8]
 800da86:	459b      	cmp	fp, r3
 800da88:	dd13      	ble.n	800dab2 <__hexnan+0x7a>
 800da8a:	454c      	cmp	r4, r9
 800da8c:	d206      	bcs.n	800da9c <__hexnan+0x64>
 800da8e:	2d07      	cmp	r5, #7
 800da90:	dc04      	bgt.n	800da9c <__hexnan+0x64>
 800da92:	462a      	mov	r2, r5
 800da94:	4649      	mov	r1, r9
 800da96:	4620      	mov	r0, r4
 800da98:	f7ff ffa8 	bl	800d9ec <L_shift>
 800da9c:	4544      	cmp	r4, r8
 800da9e:	d950      	bls.n	800db42 <__hexnan+0x10a>
 800daa0:	2300      	movs	r3, #0
 800daa2:	f1a4 0904 	sub.w	r9, r4, #4
 800daa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800daaa:	f8cd b008 	str.w	fp, [sp, #8]
 800daae:	464c      	mov	r4, r9
 800dab0:	461d      	mov	r5, r3
 800dab2:	9903      	ldr	r1, [sp, #12]
 800dab4:	e7d7      	b.n	800da66 <__hexnan+0x2e>
 800dab6:	2a29      	cmp	r2, #41	; 0x29
 800dab8:	d155      	bne.n	800db66 <__hexnan+0x12e>
 800daba:	3102      	adds	r1, #2
 800dabc:	f8ca 1000 	str.w	r1, [sl]
 800dac0:	f1bb 0f00 	cmp.w	fp, #0
 800dac4:	d04f      	beq.n	800db66 <__hexnan+0x12e>
 800dac6:	454c      	cmp	r4, r9
 800dac8:	d206      	bcs.n	800dad8 <__hexnan+0xa0>
 800daca:	2d07      	cmp	r5, #7
 800dacc:	dc04      	bgt.n	800dad8 <__hexnan+0xa0>
 800dace:	462a      	mov	r2, r5
 800dad0:	4649      	mov	r1, r9
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7ff ff8a 	bl	800d9ec <L_shift>
 800dad8:	4544      	cmp	r4, r8
 800dada:	d934      	bls.n	800db46 <__hexnan+0x10e>
 800dadc:	f1a8 0204 	sub.w	r2, r8, #4
 800dae0:	4623      	mov	r3, r4
 800dae2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dae6:	f842 1f04 	str.w	r1, [r2, #4]!
 800daea:	429f      	cmp	r7, r3
 800daec:	d2f9      	bcs.n	800dae2 <__hexnan+0xaa>
 800daee:	1b3b      	subs	r3, r7, r4
 800daf0:	f023 0303 	bic.w	r3, r3, #3
 800daf4:	3304      	adds	r3, #4
 800daf6:	3e03      	subs	r6, #3
 800daf8:	3401      	adds	r4, #1
 800dafa:	42a6      	cmp	r6, r4
 800dafc:	bf38      	it	cc
 800dafe:	2304      	movcc	r3, #4
 800db00:	4443      	add	r3, r8
 800db02:	2200      	movs	r2, #0
 800db04:	f843 2b04 	str.w	r2, [r3], #4
 800db08:	429f      	cmp	r7, r3
 800db0a:	d2fb      	bcs.n	800db04 <__hexnan+0xcc>
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	b91b      	cbnz	r3, 800db18 <__hexnan+0xe0>
 800db10:	4547      	cmp	r7, r8
 800db12:	d126      	bne.n	800db62 <__hexnan+0x12a>
 800db14:	2301      	movs	r3, #1
 800db16:	603b      	str	r3, [r7, #0]
 800db18:	2005      	movs	r0, #5
 800db1a:	e025      	b.n	800db68 <__hexnan+0x130>
 800db1c:	3501      	adds	r5, #1
 800db1e:	2d08      	cmp	r5, #8
 800db20:	f10b 0b01 	add.w	fp, fp, #1
 800db24:	dd06      	ble.n	800db34 <__hexnan+0xfc>
 800db26:	4544      	cmp	r4, r8
 800db28:	d9c3      	bls.n	800dab2 <__hexnan+0x7a>
 800db2a:	2300      	movs	r3, #0
 800db2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800db30:	2501      	movs	r5, #1
 800db32:	3c04      	subs	r4, #4
 800db34:	6822      	ldr	r2, [r4, #0]
 800db36:	f000 000f 	and.w	r0, r0, #15
 800db3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db3e:	6020      	str	r0, [r4, #0]
 800db40:	e7b7      	b.n	800dab2 <__hexnan+0x7a>
 800db42:	2508      	movs	r5, #8
 800db44:	e7b5      	b.n	800dab2 <__hexnan+0x7a>
 800db46:	9b01      	ldr	r3, [sp, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d0df      	beq.n	800db0c <__hexnan+0xd4>
 800db4c:	f1c3 0320 	rsb	r3, r3, #32
 800db50:	f04f 32ff 	mov.w	r2, #4294967295
 800db54:	40da      	lsrs	r2, r3
 800db56:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db5a:	4013      	ands	r3, r2
 800db5c:	f846 3c04 	str.w	r3, [r6, #-4]
 800db60:	e7d4      	b.n	800db0c <__hexnan+0xd4>
 800db62:	3f04      	subs	r7, #4
 800db64:	e7d2      	b.n	800db0c <__hexnan+0xd4>
 800db66:	2004      	movs	r0, #4
 800db68:	b007      	add	sp, #28
 800db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db6e <__ascii_mbtowc>:
 800db6e:	b082      	sub	sp, #8
 800db70:	b901      	cbnz	r1, 800db74 <__ascii_mbtowc+0x6>
 800db72:	a901      	add	r1, sp, #4
 800db74:	b142      	cbz	r2, 800db88 <__ascii_mbtowc+0x1a>
 800db76:	b14b      	cbz	r3, 800db8c <__ascii_mbtowc+0x1e>
 800db78:	7813      	ldrb	r3, [r2, #0]
 800db7a:	600b      	str	r3, [r1, #0]
 800db7c:	7812      	ldrb	r2, [r2, #0]
 800db7e:	1e10      	subs	r0, r2, #0
 800db80:	bf18      	it	ne
 800db82:	2001      	movne	r0, #1
 800db84:	b002      	add	sp, #8
 800db86:	4770      	bx	lr
 800db88:	4610      	mov	r0, r2
 800db8a:	e7fb      	b.n	800db84 <__ascii_mbtowc+0x16>
 800db8c:	f06f 0001 	mvn.w	r0, #1
 800db90:	e7f8      	b.n	800db84 <__ascii_mbtowc+0x16>

0800db92 <_realloc_r>:
 800db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db96:	4680      	mov	r8, r0
 800db98:	4614      	mov	r4, r2
 800db9a:	460e      	mov	r6, r1
 800db9c:	b921      	cbnz	r1, 800dba8 <_realloc_r+0x16>
 800db9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dba2:	4611      	mov	r1, r2
 800dba4:	f7fd be80 	b.w	800b8a8 <_malloc_r>
 800dba8:	b92a      	cbnz	r2, 800dbb6 <_realloc_r+0x24>
 800dbaa:	f7fd fe09 	bl	800b7c0 <_free_r>
 800dbae:	4625      	mov	r5, r4
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb6:	f000 f842 	bl	800dc3e <_malloc_usable_size_r>
 800dbba:	4284      	cmp	r4, r0
 800dbbc:	4607      	mov	r7, r0
 800dbbe:	d802      	bhi.n	800dbc6 <_realloc_r+0x34>
 800dbc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbc4:	d812      	bhi.n	800dbec <_realloc_r+0x5a>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4640      	mov	r0, r8
 800dbca:	f7fd fe6d 	bl	800b8a8 <_malloc_r>
 800dbce:	4605      	mov	r5, r0
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d0ed      	beq.n	800dbb0 <_realloc_r+0x1e>
 800dbd4:	42bc      	cmp	r4, r7
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	4631      	mov	r1, r6
 800dbda:	bf28      	it	cs
 800dbdc:	463a      	movcs	r2, r7
 800dbde:	f7fc ffe6 	bl	800abae <memcpy>
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	f7fd fdeb 	bl	800b7c0 <_free_r>
 800dbea:	e7e1      	b.n	800dbb0 <_realloc_r+0x1e>
 800dbec:	4635      	mov	r5, r6
 800dbee:	e7df      	b.n	800dbb0 <_realloc_r+0x1e>

0800dbf0 <__ascii_wctomb>:
 800dbf0:	b149      	cbz	r1, 800dc06 <__ascii_wctomb+0x16>
 800dbf2:	2aff      	cmp	r2, #255	; 0xff
 800dbf4:	bf85      	ittet	hi
 800dbf6:	238a      	movhi	r3, #138	; 0x8a
 800dbf8:	6003      	strhi	r3, [r0, #0]
 800dbfa:	700a      	strbls	r2, [r1, #0]
 800dbfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc00:	bf98      	it	ls
 800dc02:	2001      	movls	r0, #1
 800dc04:	4770      	bx	lr
 800dc06:	4608      	mov	r0, r1
 800dc08:	4770      	bx	lr
	...

0800dc0c <fiprintf>:
 800dc0c:	b40e      	push	{r1, r2, r3}
 800dc0e:	b503      	push	{r0, r1, lr}
 800dc10:	4601      	mov	r1, r0
 800dc12:	ab03      	add	r3, sp, #12
 800dc14:	4805      	ldr	r0, [pc, #20]	; (800dc2c <fiprintf+0x20>)
 800dc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc1a:	6800      	ldr	r0, [r0, #0]
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	f000 f83f 	bl	800dca0 <_vfiprintf_r>
 800dc22:	b002      	add	sp, #8
 800dc24:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc28:	b003      	add	sp, #12
 800dc2a:	4770      	bx	lr
 800dc2c:	20000070 	.word	0x20000070

0800dc30 <abort>:
 800dc30:	b508      	push	{r3, lr}
 800dc32:	2006      	movs	r0, #6
 800dc34:	f000 fa0c 	bl	800e050 <raise>
 800dc38:	2001      	movs	r0, #1
 800dc3a:	f7f4 fcfb 	bl	8002634 <_exit>

0800dc3e <_malloc_usable_size_r>:
 800dc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc42:	1f18      	subs	r0, r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	bfbc      	itt	lt
 800dc48:	580b      	ldrlt	r3, [r1, r0]
 800dc4a:	18c0      	addlt	r0, r0, r3
 800dc4c:	4770      	bx	lr

0800dc4e <__sfputc_r>:
 800dc4e:	6893      	ldr	r3, [r2, #8]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	b410      	push	{r4}
 800dc56:	6093      	str	r3, [r2, #8]
 800dc58:	da08      	bge.n	800dc6c <__sfputc_r+0x1e>
 800dc5a:	6994      	ldr	r4, [r2, #24]
 800dc5c:	42a3      	cmp	r3, r4
 800dc5e:	db01      	blt.n	800dc64 <__sfputc_r+0x16>
 800dc60:	290a      	cmp	r1, #10
 800dc62:	d103      	bne.n	800dc6c <__sfputc_r+0x1e>
 800dc64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc68:	f000 b934 	b.w	800ded4 <__swbuf_r>
 800dc6c:	6813      	ldr	r3, [r2, #0]
 800dc6e:	1c58      	adds	r0, r3, #1
 800dc70:	6010      	str	r0, [r2, #0]
 800dc72:	7019      	strb	r1, [r3, #0]
 800dc74:	4608      	mov	r0, r1
 800dc76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <__sfputs_r>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460f      	mov	r7, r1
 800dc82:	4614      	mov	r4, r2
 800dc84:	18d5      	adds	r5, r2, r3
 800dc86:	42ac      	cmp	r4, r5
 800dc88:	d101      	bne.n	800dc8e <__sfputs_r+0x12>
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	e007      	b.n	800dc9e <__sfputs_r+0x22>
 800dc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc92:	463a      	mov	r2, r7
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7ff ffda 	bl	800dc4e <__sfputc_r>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	d1f3      	bne.n	800dc86 <__sfputs_r+0xa>
 800dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dca0 <_vfiprintf_r>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	460d      	mov	r5, r1
 800dca6:	b09d      	sub	sp, #116	; 0x74
 800dca8:	4614      	mov	r4, r2
 800dcaa:	4698      	mov	r8, r3
 800dcac:	4606      	mov	r6, r0
 800dcae:	b118      	cbz	r0, 800dcb8 <_vfiprintf_r+0x18>
 800dcb0:	6a03      	ldr	r3, [r0, #32]
 800dcb2:	b90b      	cbnz	r3, 800dcb8 <_vfiprintf_r+0x18>
 800dcb4:	f7fc fe62 	bl	800a97c <__sinit>
 800dcb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcba:	07d9      	lsls	r1, r3, #31
 800dcbc:	d405      	bmi.n	800dcca <_vfiprintf_r+0x2a>
 800dcbe:	89ab      	ldrh	r3, [r5, #12]
 800dcc0:	059a      	lsls	r2, r3, #22
 800dcc2:	d402      	bmi.n	800dcca <_vfiprintf_r+0x2a>
 800dcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcc6:	f7fc ff70 	bl	800abaa <__retarget_lock_acquire_recursive>
 800dcca:	89ab      	ldrh	r3, [r5, #12]
 800dccc:	071b      	lsls	r3, r3, #28
 800dcce:	d501      	bpl.n	800dcd4 <_vfiprintf_r+0x34>
 800dcd0:	692b      	ldr	r3, [r5, #16]
 800dcd2:	b99b      	cbnz	r3, 800dcfc <_vfiprintf_r+0x5c>
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f000 f93a 	bl	800df50 <__swsetup_r>
 800dcdc:	b170      	cbz	r0, 800dcfc <_vfiprintf_r+0x5c>
 800dcde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dce0:	07dc      	lsls	r4, r3, #31
 800dce2:	d504      	bpl.n	800dcee <_vfiprintf_r+0x4e>
 800dce4:	f04f 30ff 	mov.w	r0, #4294967295
 800dce8:	b01d      	add	sp, #116	; 0x74
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	0598      	lsls	r0, r3, #22
 800dcf2:	d4f7      	bmi.n	800dce4 <_vfiprintf_r+0x44>
 800dcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf6:	f7fc ff59 	bl	800abac <__retarget_lock_release_recursive>
 800dcfa:	e7f3      	b.n	800dce4 <_vfiprintf_r+0x44>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dd00:	2320      	movs	r3, #32
 800dd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd06:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd0a:	2330      	movs	r3, #48	; 0x30
 800dd0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dec0 <_vfiprintf_r+0x220>
 800dd10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd14:	f04f 0901 	mov.w	r9, #1
 800dd18:	4623      	mov	r3, r4
 800dd1a:	469a      	mov	sl, r3
 800dd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd20:	b10a      	cbz	r2, 800dd26 <_vfiprintf_r+0x86>
 800dd22:	2a25      	cmp	r2, #37	; 0x25
 800dd24:	d1f9      	bne.n	800dd1a <_vfiprintf_r+0x7a>
 800dd26:	ebba 0b04 	subs.w	fp, sl, r4
 800dd2a:	d00b      	beq.n	800dd44 <_vfiprintf_r+0xa4>
 800dd2c:	465b      	mov	r3, fp
 800dd2e:	4622      	mov	r2, r4
 800dd30:	4629      	mov	r1, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ffa2 	bl	800dc7c <__sfputs_r>
 800dd38:	3001      	adds	r0, #1
 800dd3a:	f000 80a9 	beq.w	800de90 <_vfiprintf_r+0x1f0>
 800dd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd40:	445a      	add	r2, fp
 800dd42:	9209      	str	r2, [sp, #36]	; 0x24
 800dd44:	f89a 3000 	ldrb.w	r3, [sl]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 80a1 	beq.w	800de90 <_vfiprintf_r+0x1f0>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295
 800dd54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd58:	f10a 0a01 	add.w	sl, sl, #1
 800dd5c:	9304      	str	r3, [sp, #16]
 800dd5e:	9307      	str	r3, [sp, #28]
 800dd60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd64:	931a      	str	r3, [sp, #104]	; 0x68
 800dd66:	4654      	mov	r4, sl
 800dd68:	2205      	movs	r2, #5
 800dd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd6e:	4854      	ldr	r0, [pc, #336]	; (800dec0 <_vfiprintf_r+0x220>)
 800dd70:	f7f2 fa66 	bl	8000240 <memchr>
 800dd74:	9a04      	ldr	r2, [sp, #16]
 800dd76:	b9d8      	cbnz	r0, 800ddb0 <_vfiprintf_r+0x110>
 800dd78:	06d1      	lsls	r1, r2, #27
 800dd7a:	bf44      	itt	mi
 800dd7c:	2320      	movmi	r3, #32
 800dd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd82:	0713      	lsls	r3, r2, #28
 800dd84:	bf44      	itt	mi
 800dd86:	232b      	movmi	r3, #43	; 0x2b
 800dd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd90:	2b2a      	cmp	r3, #42	; 0x2a
 800dd92:	d015      	beq.n	800ddc0 <_vfiprintf_r+0x120>
 800dd94:	9a07      	ldr	r2, [sp, #28]
 800dd96:	4654      	mov	r4, sl
 800dd98:	2000      	movs	r0, #0
 800dd9a:	f04f 0c0a 	mov.w	ip, #10
 800dd9e:	4621      	mov	r1, r4
 800dda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dda4:	3b30      	subs	r3, #48	; 0x30
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d94d      	bls.n	800de46 <_vfiprintf_r+0x1a6>
 800ddaa:	b1b0      	cbz	r0, 800ddda <_vfiprintf_r+0x13a>
 800ddac:	9207      	str	r2, [sp, #28]
 800ddae:	e014      	b.n	800ddda <_vfiprintf_r+0x13a>
 800ddb0:	eba0 0308 	sub.w	r3, r0, r8
 800ddb4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	9304      	str	r3, [sp, #16]
 800ddbc:	46a2      	mov	sl, r4
 800ddbe:	e7d2      	b.n	800dd66 <_vfiprintf_r+0xc6>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	1d19      	adds	r1, r3, #4
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	9103      	str	r1, [sp, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	bfbb      	ittet	lt
 800ddcc:	425b      	neglt	r3, r3
 800ddce:	f042 0202 	orrlt.w	r2, r2, #2
 800ddd2:	9307      	strge	r3, [sp, #28]
 800ddd4:	9307      	strlt	r3, [sp, #28]
 800ddd6:	bfb8      	it	lt
 800ddd8:	9204      	strlt	r2, [sp, #16]
 800ddda:	7823      	ldrb	r3, [r4, #0]
 800dddc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddde:	d10c      	bne.n	800ddfa <_vfiprintf_r+0x15a>
 800dde0:	7863      	ldrb	r3, [r4, #1]
 800dde2:	2b2a      	cmp	r3, #42	; 0x2a
 800dde4:	d134      	bne.n	800de50 <_vfiprintf_r+0x1b0>
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	1d1a      	adds	r2, r3, #4
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	9203      	str	r2, [sp, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	bfb8      	it	lt
 800ddf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddf6:	3402      	adds	r4, #2
 800ddf8:	9305      	str	r3, [sp, #20]
 800ddfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ded0 <_vfiprintf_r+0x230>
 800ddfe:	7821      	ldrb	r1, [r4, #0]
 800de00:	2203      	movs	r2, #3
 800de02:	4650      	mov	r0, sl
 800de04:	f7f2 fa1c 	bl	8000240 <memchr>
 800de08:	b138      	cbz	r0, 800de1a <_vfiprintf_r+0x17a>
 800de0a:	9b04      	ldr	r3, [sp, #16]
 800de0c:	eba0 000a 	sub.w	r0, r0, sl
 800de10:	2240      	movs	r2, #64	; 0x40
 800de12:	4082      	lsls	r2, r0
 800de14:	4313      	orrs	r3, r2
 800de16:	3401      	adds	r4, #1
 800de18:	9304      	str	r3, [sp, #16]
 800de1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de1e:	4829      	ldr	r0, [pc, #164]	; (800dec4 <_vfiprintf_r+0x224>)
 800de20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de24:	2206      	movs	r2, #6
 800de26:	f7f2 fa0b 	bl	8000240 <memchr>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d03f      	beq.n	800deae <_vfiprintf_r+0x20e>
 800de2e:	4b26      	ldr	r3, [pc, #152]	; (800dec8 <_vfiprintf_r+0x228>)
 800de30:	bb1b      	cbnz	r3, 800de7a <_vfiprintf_r+0x1da>
 800de32:	9b03      	ldr	r3, [sp, #12]
 800de34:	3307      	adds	r3, #7
 800de36:	f023 0307 	bic.w	r3, r3, #7
 800de3a:	3308      	adds	r3, #8
 800de3c:	9303      	str	r3, [sp, #12]
 800de3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de40:	443b      	add	r3, r7
 800de42:	9309      	str	r3, [sp, #36]	; 0x24
 800de44:	e768      	b.n	800dd18 <_vfiprintf_r+0x78>
 800de46:	fb0c 3202 	mla	r2, ip, r2, r3
 800de4a:	460c      	mov	r4, r1
 800de4c:	2001      	movs	r0, #1
 800de4e:	e7a6      	b.n	800dd9e <_vfiprintf_r+0xfe>
 800de50:	2300      	movs	r3, #0
 800de52:	3401      	adds	r4, #1
 800de54:	9305      	str	r3, [sp, #20]
 800de56:	4619      	mov	r1, r3
 800de58:	f04f 0c0a 	mov.w	ip, #10
 800de5c:	4620      	mov	r0, r4
 800de5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de62:	3a30      	subs	r2, #48	; 0x30
 800de64:	2a09      	cmp	r2, #9
 800de66:	d903      	bls.n	800de70 <_vfiprintf_r+0x1d0>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0c6      	beq.n	800ddfa <_vfiprintf_r+0x15a>
 800de6c:	9105      	str	r1, [sp, #20]
 800de6e:	e7c4      	b.n	800ddfa <_vfiprintf_r+0x15a>
 800de70:	fb0c 2101 	mla	r1, ip, r1, r2
 800de74:	4604      	mov	r4, r0
 800de76:	2301      	movs	r3, #1
 800de78:	e7f0      	b.n	800de5c <_vfiprintf_r+0x1bc>
 800de7a:	ab03      	add	r3, sp, #12
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	462a      	mov	r2, r5
 800de80:	4b12      	ldr	r3, [pc, #72]	; (800decc <_vfiprintf_r+0x22c>)
 800de82:	a904      	add	r1, sp, #16
 800de84:	4630      	mov	r0, r6
 800de86:	f7fb ff3f 	bl	8009d08 <_printf_float>
 800de8a:	4607      	mov	r7, r0
 800de8c:	1c78      	adds	r0, r7, #1
 800de8e:	d1d6      	bne.n	800de3e <_vfiprintf_r+0x19e>
 800de90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de92:	07d9      	lsls	r1, r3, #31
 800de94:	d405      	bmi.n	800dea2 <_vfiprintf_r+0x202>
 800de96:	89ab      	ldrh	r3, [r5, #12]
 800de98:	059a      	lsls	r2, r3, #22
 800de9a:	d402      	bmi.n	800dea2 <_vfiprintf_r+0x202>
 800de9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de9e:	f7fc fe85 	bl	800abac <__retarget_lock_release_recursive>
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	065b      	lsls	r3, r3, #25
 800dea6:	f53f af1d 	bmi.w	800dce4 <_vfiprintf_r+0x44>
 800deaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deac:	e71c      	b.n	800dce8 <_vfiprintf_r+0x48>
 800deae:	ab03      	add	r3, sp, #12
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	462a      	mov	r2, r5
 800deb4:	4b05      	ldr	r3, [pc, #20]	; (800decc <_vfiprintf_r+0x22c>)
 800deb6:	a904      	add	r1, sp, #16
 800deb8:	4630      	mov	r0, r6
 800deba:	f7fc f9ad 	bl	800a218 <_printf_i>
 800debe:	e7e4      	b.n	800de8a <_vfiprintf_r+0x1ea>
 800dec0:	08019221 	.word	0x08019221
 800dec4:	0801922b 	.word	0x0801922b
 800dec8:	08009d09 	.word	0x08009d09
 800decc:	0800dc7d 	.word	0x0800dc7d
 800ded0:	08019227 	.word	0x08019227

0800ded4 <__swbuf_r>:
 800ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded6:	460e      	mov	r6, r1
 800ded8:	4614      	mov	r4, r2
 800deda:	4605      	mov	r5, r0
 800dedc:	b118      	cbz	r0, 800dee6 <__swbuf_r+0x12>
 800dede:	6a03      	ldr	r3, [r0, #32]
 800dee0:	b90b      	cbnz	r3, 800dee6 <__swbuf_r+0x12>
 800dee2:	f7fc fd4b 	bl	800a97c <__sinit>
 800dee6:	69a3      	ldr	r3, [r4, #24]
 800dee8:	60a3      	str	r3, [r4, #8]
 800deea:	89a3      	ldrh	r3, [r4, #12]
 800deec:	071a      	lsls	r2, r3, #28
 800deee:	d525      	bpl.n	800df3c <__swbuf_r+0x68>
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	b31b      	cbz	r3, 800df3c <__swbuf_r+0x68>
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	6922      	ldr	r2, [r4, #16]
 800def8:	1a98      	subs	r0, r3, r2
 800defa:	6963      	ldr	r3, [r4, #20]
 800defc:	b2f6      	uxtb	r6, r6
 800defe:	4283      	cmp	r3, r0
 800df00:	4637      	mov	r7, r6
 800df02:	dc04      	bgt.n	800df0e <__swbuf_r+0x3a>
 800df04:	4621      	mov	r1, r4
 800df06:	4628      	mov	r0, r5
 800df08:	f7ff fa38 	bl	800d37c <_fflush_r>
 800df0c:	b9e0      	cbnz	r0, 800df48 <__swbuf_r+0x74>
 800df0e:	68a3      	ldr	r3, [r4, #8]
 800df10:	3b01      	subs	r3, #1
 800df12:	60a3      	str	r3, [r4, #8]
 800df14:	6823      	ldr	r3, [r4, #0]
 800df16:	1c5a      	adds	r2, r3, #1
 800df18:	6022      	str	r2, [r4, #0]
 800df1a:	701e      	strb	r6, [r3, #0]
 800df1c:	6962      	ldr	r2, [r4, #20]
 800df1e:	1c43      	adds	r3, r0, #1
 800df20:	429a      	cmp	r2, r3
 800df22:	d004      	beq.n	800df2e <__swbuf_r+0x5a>
 800df24:	89a3      	ldrh	r3, [r4, #12]
 800df26:	07db      	lsls	r3, r3, #31
 800df28:	d506      	bpl.n	800df38 <__swbuf_r+0x64>
 800df2a:	2e0a      	cmp	r6, #10
 800df2c:	d104      	bne.n	800df38 <__swbuf_r+0x64>
 800df2e:	4621      	mov	r1, r4
 800df30:	4628      	mov	r0, r5
 800df32:	f7ff fa23 	bl	800d37c <_fflush_r>
 800df36:	b938      	cbnz	r0, 800df48 <__swbuf_r+0x74>
 800df38:	4638      	mov	r0, r7
 800df3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df3c:	4621      	mov	r1, r4
 800df3e:	4628      	mov	r0, r5
 800df40:	f000 f806 	bl	800df50 <__swsetup_r>
 800df44:	2800      	cmp	r0, #0
 800df46:	d0d5      	beq.n	800def4 <__swbuf_r+0x20>
 800df48:	f04f 37ff 	mov.w	r7, #4294967295
 800df4c:	e7f4      	b.n	800df38 <__swbuf_r+0x64>
	...

0800df50 <__swsetup_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4b2a      	ldr	r3, [pc, #168]	; (800dffc <__swsetup_r+0xac>)
 800df54:	4605      	mov	r5, r0
 800df56:	6818      	ldr	r0, [r3, #0]
 800df58:	460c      	mov	r4, r1
 800df5a:	b118      	cbz	r0, 800df64 <__swsetup_r+0x14>
 800df5c:	6a03      	ldr	r3, [r0, #32]
 800df5e:	b90b      	cbnz	r3, 800df64 <__swsetup_r+0x14>
 800df60:	f7fc fd0c 	bl	800a97c <__sinit>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df6a:	0718      	lsls	r0, r3, #28
 800df6c:	d422      	bmi.n	800dfb4 <__swsetup_r+0x64>
 800df6e:	06d9      	lsls	r1, r3, #27
 800df70:	d407      	bmi.n	800df82 <__swsetup_r+0x32>
 800df72:	2309      	movs	r3, #9
 800df74:	602b      	str	r3, [r5, #0]
 800df76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	f04f 30ff 	mov.w	r0, #4294967295
 800df80:	e034      	b.n	800dfec <__swsetup_r+0x9c>
 800df82:	0758      	lsls	r0, r3, #29
 800df84:	d512      	bpl.n	800dfac <__swsetup_r+0x5c>
 800df86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df88:	b141      	cbz	r1, 800df9c <__swsetup_r+0x4c>
 800df8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df8e:	4299      	cmp	r1, r3
 800df90:	d002      	beq.n	800df98 <__swsetup_r+0x48>
 800df92:	4628      	mov	r0, r5
 800df94:	f7fd fc14 	bl	800b7c0 <_free_r>
 800df98:	2300      	movs	r3, #0
 800df9a:	6363      	str	r3, [r4, #52]	; 0x34
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfa2:	81a3      	strh	r3, [r4, #12]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	6063      	str	r3, [r4, #4]
 800dfa8:	6923      	ldr	r3, [r4, #16]
 800dfaa:	6023      	str	r3, [r4, #0]
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	f043 0308 	orr.w	r3, r3, #8
 800dfb2:	81a3      	strh	r3, [r4, #12]
 800dfb4:	6923      	ldr	r3, [r4, #16]
 800dfb6:	b94b      	cbnz	r3, 800dfcc <__swsetup_r+0x7c>
 800dfb8:	89a3      	ldrh	r3, [r4, #12]
 800dfba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfc2:	d003      	beq.n	800dfcc <__swsetup_r+0x7c>
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f000 f884 	bl	800e0d4 <__smakebuf_r>
 800dfcc:	89a0      	ldrh	r0, [r4, #12]
 800dfce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfd2:	f010 0301 	ands.w	r3, r0, #1
 800dfd6:	d00a      	beq.n	800dfee <__swsetup_r+0x9e>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	60a3      	str	r3, [r4, #8]
 800dfdc:	6963      	ldr	r3, [r4, #20]
 800dfde:	425b      	negs	r3, r3
 800dfe0:	61a3      	str	r3, [r4, #24]
 800dfe2:	6923      	ldr	r3, [r4, #16]
 800dfe4:	b943      	cbnz	r3, 800dff8 <__swsetup_r+0xa8>
 800dfe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfea:	d1c4      	bne.n	800df76 <__swsetup_r+0x26>
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	0781      	lsls	r1, r0, #30
 800dff0:	bf58      	it	pl
 800dff2:	6963      	ldrpl	r3, [r4, #20]
 800dff4:	60a3      	str	r3, [r4, #8]
 800dff6:	e7f4      	b.n	800dfe2 <__swsetup_r+0x92>
 800dff8:	2000      	movs	r0, #0
 800dffa:	e7f7      	b.n	800dfec <__swsetup_r+0x9c>
 800dffc:	20000070 	.word	0x20000070

0800e000 <_raise_r>:
 800e000:	291f      	cmp	r1, #31
 800e002:	b538      	push	{r3, r4, r5, lr}
 800e004:	4604      	mov	r4, r0
 800e006:	460d      	mov	r5, r1
 800e008:	d904      	bls.n	800e014 <_raise_r+0x14>
 800e00a:	2316      	movs	r3, #22
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	f04f 30ff 	mov.w	r0, #4294967295
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e016:	b112      	cbz	r2, 800e01e <_raise_r+0x1e>
 800e018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e01c:	b94b      	cbnz	r3, 800e032 <_raise_r+0x32>
 800e01e:	4620      	mov	r0, r4
 800e020:	f000 f830 	bl	800e084 <_getpid_r>
 800e024:	462a      	mov	r2, r5
 800e026:	4601      	mov	r1, r0
 800e028:	4620      	mov	r0, r4
 800e02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e02e:	f000 b817 	b.w	800e060 <_kill_r>
 800e032:	2b01      	cmp	r3, #1
 800e034:	d00a      	beq.n	800e04c <_raise_r+0x4c>
 800e036:	1c59      	adds	r1, r3, #1
 800e038:	d103      	bne.n	800e042 <_raise_r+0x42>
 800e03a:	2316      	movs	r3, #22
 800e03c:	6003      	str	r3, [r0, #0]
 800e03e:	2001      	movs	r0, #1
 800e040:	e7e7      	b.n	800e012 <_raise_r+0x12>
 800e042:	2400      	movs	r4, #0
 800e044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e048:	4628      	mov	r0, r5
 800e04a:	4798      	blx	r3
 800e04c:	2000      	movs	r0, #0
 800e04e:	e7e0      	b.n	800e012 <_raise_r+0x12>

0800e050 <raise>:
 800e050:	4b02      	ldr	r3, [pc, #8]	; (800e05c <raise+0xc>)
 800e052:	4601      	mov	r1, r0
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	f7ff bfd3 	b.w	800e000 <_raise_r>
 800e05a:	bf00      	nop
 800e05c:	20000070 	.word	0x20000070

0800e060 <_kill_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	4d07      	ldr	r5, [pc, #28]	; (800e080 <_kill_r+0x20>)
 800e064:	2300      	movs	r3, #0
 800e066:	4604      	mov	r4, r0
 800e068:	4608      	mov	r0, r1
 800e06a:	4611      	mov	r1, r2
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	f7f4 fad1 	bl	8002614 <_kill>
 800e072:	1c43      	adds	r3, r0, #1
 800e074:	d102      	bne.n	800e07c <_kill_r+0x1c>
 800e076:	682b      	ldr	r3, [r5, #0]
 800e078:	b103      	cbz	r3, 800e07c <_kill_r+0x1c>
 800e07a:	6023      	str	r3, [r4, #0]
 800e07c:	bd38      	pop	{r3, r4, r5, pc}
 800e07e:	bf00      	nop
 800e080:	200005d4 	.word	0x200005d4

0800e084 <_getpid_r>:
 800e084:	f7f4 babe 	b.w	8002604 <_getpid>

0800e088 <__swhatbuf_r>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	460c      	mov	r4, r1
 800e08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e090:	2900      	cmp	r1, #0
 800e092:	b096      	sub	sp, #88	; 0x58
 800e094:	4615      	mov	r5, r2
 800e096:	461e      	mov	r6, r3
 800e098:	da0d      	bge.n	800e0b6 <__swhatbuf_r+0x2e>
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e0a0:	f04f 0100 	mov.w	r1, #0
 800e0a4:	bf0c      	ite	eq
 800e0a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e0aa:	2340      	movne	r3, #64	; 0x40
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	6031      	str	r1, [r6, #0]
 800e0b0:	602b      	str	r3, [r5, #0]
 800e0b2:	b016      	add	sp, #88	; 0x58
 800e0b4:	bd70      	pop	{r4, r5, r6, pc}
 800e0b6:	466a      	mov	r2, sp
 800e0b8:	f000 f848 	bl	800e14c <_fstat_r>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	dbec      	blt.n	800e09a <__swhatbuf_r+0x12>
 800e0c0:	9901      	ldr	r1, [sp, #4]
 800e0c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e0c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e0ca:	4259      	negs	r1, r3
 800e0cc:	4159      	adcs	r1, r3
 800e0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0d2:	e7eb      	b.n	800e0ac <__swhatbuf_r+0x24>

0800e0d4 <__smakebuf_r>:
 800e0d4:	898b      	ldrh	r3, [r1, #12]
 800e0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0d8:	079d      	lsls	r5, r3, #30
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460c      	mov	r4, r1
 800e0de:	d507      	bpl.n	800e0f0 <__smakebuf_r+0x1c>
 800e0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	6163      	str	r3, [r4, #20]
 800e0ec:	b002      	add	sp, #8
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	ab01      	add	r3, sp, #4
 800e0f2:	466a      	mov	r2, sp
 800e0f4:	f7ff ffc8 	bl	800e088 <__swhatbuf_r>
 800e0f8:	9900      	ldr	r1, [sp, #0]
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f7fd fbd3 	bl	800b8a8 <_malloc_r>
 800e102:	b948      	cbnz	r0, 800e118 <__smakebuf_r+0x44>
 800e104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e108:	059a      	lsls	r2, r3, #22
 800e10a:	d4ef      	bmi.n	800e0ec <__smakebuf_r+0x18>
 800e10c:	f023 0303 	bic.w	r3, r3, #3
 800e110:	f043 0302 	orr.w	r3, r3, #2
 800e114:	81a3      	strh	r3, [r4, #12]
 800e116:	e7e3      	b.n	800e0e0 <__smakebuf_r+0xc>
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	6020      	str	r0, [r4, #0]
 800e11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e120:	81a3      	strh	r3, [r4, #12]
 800e122:	9b00      	ldr	r3, [sp, #0]
 800e124:	6163      	str	r3, [r4, #20]
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	6120      	str	r0, [r4, #16]
 800e12a:	b15b      	cbz	r3, 800e144 <__smakebuf_r+0x70>
 800e12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e130:	4630      	mov	r0, r6
 800e132:	f000 f81d 	bl	800e170 <_isatty_r>
 800e136:	b128      	cbz	r0, 800e144 <__smakebuf_r+0x70>
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	f023 0303 	bic.w	r3, r3, #3
 800e13e:	f043 0301 	orr.w	r3, r3, #1
 800e142:	81a3      	strh	r3, [r4, #12]
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	431d      	orrs	r5, r3
 800e148:	81a5      	strh	r5, [r4, #12]
 800e14a:	e7cf      	b.n	800e0ec <__smakebuf_r+0x18>

0800e14c <_fstat_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4d07      	ldr	r5, [pc, #28]	; (800e16c <_fstat_r+0x20>)
 800e150:	2300      	movs	r3, #0
 800e152:	4604      	mov	r4, r0
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	602b      	str	r3, [r5, #0]
 800e15a:	f7f4 faba 	bl	80026d2 <_fstat>
 800e15e:	1c43      	adds	r3, r0, #1
 800e160:	d102      	bne.n	800e168 <_fstat_r+0x1c>
 800e162:	682b      	ldr	r3, [r5, #0]
 800e164:	b103      	cbz	r3, 800e168 <_fstat_r+0x1c>
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	bd38      	pop	{r3, r4, r5, pc}
 800e16a:	bf00      	nop
 800e16c:	200005d4 	.word	0x200005d4

0800e170 <_isatty_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4d06      	ldr	r5, [pc, #24]	; (800e18c <_isatty_r+0x1c>)
 800e174:	2300      	movs	r3, #0
 800e176:	4604      	mov	r4, r0
 800e178:	4608      	mov	r0, r1
 800e17a:	602b      	str	r3, [r5, #0]
 800e17c:	f7f4 fab9 	bl	80026f2 <_isatty>
 800e180:	1c43      	adds	r3, r0, #1
 800e182:	d102      	bne.n	800e18a <_isatty_r+0x1a>
 800e184:	682b      	ldr	r3, [r5, #0]
 800e186:	b103      	cbz	r3, 800e18a <_isatty_r+0x1a>
 800e188:	6023      	str	r3, [r4, #0]
 800e18a:	bd38      	pop	{r3, r4, r5, pc}
 800e18c:	200005d4 	.word	0x200005d4

0800e190 <_init>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	bf00      	nop
 800e194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e196:	bc08      	pop	{r3}
 800e198:	469e      	mov	lr, r3
 800e19a:	4770      	bx	lr

0800e19c <_fini>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	bf00      	nop
 800e1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a2:	bc08      	pop	{r3}
 800e1a4:	469e      	mov	lr, r3
 800e1a6:	4770      	bx	lr
