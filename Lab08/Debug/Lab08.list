
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a078  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800a278  0800a278  0001a278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a8  0800a9a8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9a8  0800a9a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9b0  0800a9b0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d8  0800ab90  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800ab90  00020490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015842  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345d  00000000  00000000  00035a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed4  00000000  00000000  0003a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af96  00000000  00000000  0003b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a49c  00000000  00000000  00066092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100ffb  00000000  00000000  0008052e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006290  00000000  00000000  0018152c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001877bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a260 	.word	0x0800a260

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800a260 	.word	0x0800a260

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <fillScreenColor>:
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

void fillScreenColor(uint16_t color)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 ff0f 	bl	8002804 <ILI9341_Fill_Screen>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <clearScreenArea>:

void clearScreenArea(Rectangle area, uint16_t color)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80009fc:	4613      	mov	r3, r2
 80009fe:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
 8000a00:	8938      	ldrh	r0, [r7, #8]
 8000a02:	8979      	ldrh	r1, [r7, #10]
 8000a04:	89ba      	ldrh	r2, [r7, #12]
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	f001 fc88 	bl	800231c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
 8000a0c:	89bb      	ldrh	r3, [r7, #12]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	893b      	ldrh	r3, [r7, #8]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	4611      	mov	r1, r2
 8000a18:	897a      	ldrh	r2, [r7, #10]
 8000a1a:	1a8a      	subs	r2, r1, r2
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fe4e 	bl	80026c8 <ILI9341_Draw_Colour_Burst>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <setRotation>:

void setRotation(uint8_t rotation)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fcd5 	bl	80023f0 <ILI9341_Set_Rotation>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <drawText>:

void drawText(const char *text, uint8_t x, uint8_t y, uint16_t size)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af02      	add	r7, sp, #8
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	4608      	mov	r0, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	70fb      	strb	r3, [r7, #3]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70bb      	strb	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, BLACK, size, WHITE);
 8000a68:	78ba      	ldrb	r2, [r7, #2]
 8000a6a:	78f9      	ldrb	r1, [r7, #3]
 8000a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	883b      	ldrh	r3, [r7, #0]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f001 fbb9 	bl	80021f0 <ILI9341_Draw_Text>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <drawTextByPoint>:

void drawTextByPoint(const char *text, Point position, uint16_t size)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	8139      	strh	r1, [r7, #8]
 8000a90:	4613      	mov	r3, r2
 8000a92:	80fb      	strh	r3, [r7, #6]
	drawText(text, position.x, position.y, size);
 8000a94:	7a39      	ldrb	r1, [r7, #8]
 8000a96:	7a7a      	ldrb	r2, [r7, #9]
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff ffd7 	bl	8000a4e <drawText>
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <drawFilledRectangleByCoord>:
{
	ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1, y1, color);
}

void drawFilledRectangleByCoord(Rectangle rectangle, uint16_t color)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(rectangle.x0, rectangle.y0, rectangle.x1, rectangle.y1, color);
 8000aba:	8938      	ldrh	r0, [r7, #8]
 8000abc:	8979      	ldrh	r1, [r7, #10]
 8000abe:	89ba      	ldrh	r2, [r7, #12]
 8000ac0:	89fc      	ldrh	r4, [r7, #14]
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	f001 fa99 	bl	8001ffe <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}

08000ad4 <drawFilledCircleByCoord>:
{
	ILI9341_Draw_Filled_Circle(x, y, radius, color);
}

void drawFilledCircleByCoord(Circle circle, uint16_t color)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Circle(circle.x, circle.y, circle.radius, color);
 8000ae6:	8938      	ldrh	r0, [r7, #8]
 8000ae8:	8979      	ldrh	r1, [r7, #10]
 8000aea:	89ba      	ldrh	r2, [r7, #12]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	f001 f9fe 	bl	8001eee <ILI9341_Draw_Filled_Circle>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <getCircleEdgeX>:
	ILI9341_Draw_Image(imageArray, orientation);
}


uint16_t getCircleEdgeX(Circle circle)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	463b      	mov	r3, r7
 8000b02:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x + circle.radius;
 8000b06:	883a      	ldrh	r2, [r7, #0]
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <getCircleEdgeY>:

uint16_t getCircleEdgeY(Circle circle)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	463b      	mov	r3, r7
 8000b22:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y + circle.radius;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b29b      	uxth	r3, r3
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <getCircleEdgeXNegative>:

uint16_t getCircleEdgeXNegative(Circle circle)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	463b      	mov	r3, r7
 8000b42:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x - circle.radius;
 8000b46:	883a      	ldrh	r2, [r7, #0]
 8000b48:	88bb      	ldrh	r3, [r7, #4]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <getCircleEdgeYNegative>:


uint16_t getCircleEdgeYNegative(Circle circle)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	463b      	mov	r3, r7
 8000b62:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y - circle.radius;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	b29b      	uxth	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <MX_GPIO_Init>:
 PC5   ------> ETH_RXD1
 PB13   ------> ETH_TXD1
 PG11   ------> ETH_TX_EN
 PG13   ------> ETH_TXD0
 */
void MX_GPIO_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4b8d      	ldr	r3, [pc, #564]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a8c      	ldr	r2, [pc, #560]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b87      	ldr	r3, [pc, #540]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a86      	ldr	r2, [pc, #536]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b84      	ldr	r3, [pc, #528]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc2:	4b81      	ldr	r3, [pc, #516]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a80      	ldr	r2, [pc, #512]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bc8:	f043 0320 	orr.w	r3, r3, #32
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b7e      	ldr	r3, [pc, #504]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b75      	ldr	r3, [pc, #468]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a74      	ldr	r2, [pc, #464]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b6c      	ldr	r3, [pc, #432]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a68      	ldr	r2, [pc, #416]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b66      	ldr	r3, [pc, #408]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a62      	ldr	r2, [pc, #392]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b60      	ldr	r3, [pc, #384]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, T_CLK_Pin | T_MOSI_Pin | T_CS_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2168      	movs	r1, #104	; 0x68
 8000c56:	485d      	ldr	r0, [pc, #372]	; (8000dcc <MX_GPIO_Init+0x250>)
 8000c58:	f002 fb98 	bl	800338c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c62:	485b      	ldr	r0, [pc, #364]	; (8000dd0 <MX_GPIO_Init+0x254>)
 8000c64:	f002 fb92 	bl	800338c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	4859      	ldr	r0, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000c6e:	f002 fb8d 	bl	800338c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000c78:	4857      	ldr	r0, [pc, #348]	; (8000dd8 <MX_GPIO_Init+0x25c>)
 8000c7a:	f002 fb87 	bl	800338c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin */
	GPIO_InitStruct.Pin = T_IRQ_Pin | T_MISO_Pin;
 8000c7e:	2314      	movs	r3, #20
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	484e      	ldr	r0, [pc, #312]	; (8000dcc <MX_GPIO_Init+0x250>)
 8000c92:	f002 f9b7 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = T_CLK_Pin | T_MOSI_Pin | T_CS_Pin;
 8000c96:	2368      	movs	r3, #104	; 0x68
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4847      	ldr	r0, [pc, #284]	; (8000dcc <MX_GPIO_Init+0x250>)
 8000cae:	f002 f9a9 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4844      	ldr	r0, [pc, #272]	; (8000dd8 <MX_GPIO_Init+0x25c>)
 8000cc8:	f002 f99c 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000ccc:	2332      	movs	r3, #50	; 0x32
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cdc:	230b      	movs	r3, #11
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	483c      	ldr	r0, [pc, #240]	; (8000dd8 <MX_GPIO_Init+0x25c>)
 8000ce8:	f002 f98c 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000cec:	2386      	movs	r3, #134	; 0x86
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfc:	230b      	movs	r3, #11
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4835      	ldr	r0, [pc, #212]	; (8000ddc <MX_GPIO_Init+0x260>)
 8000d08:	f002 f97c 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_GPIO_Init+0x254>)
 8000d2a:	f002 f96b 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8000d2e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <MX_GPIO_Init+0x254>)
 8000d48:	f002 f95c 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000d64:	f002 f94e 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000d7c:	f002 f942 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = CS_Pin | DC_Pin | RST_Pin;
 8000d80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <MX_GPIO_Init+0x25c>)
 8000d9a:	f002 f933 	bl	8003004 <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000d9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db0:	230b      	movs	r3, #11
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000dbc:	f002 f922 	bl	8003004 <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <SCB_EnableICache>:
	/**
	 \brief   Enable I-Cache
	 \details Turns on I-Cache
	 */
	__STATIC_INLINE void SCB_EnableICache(void)
	{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
 \details Acts as a special kind of Data Memory Barrier.
 It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
	__ASM volatile ("dsb 0xF":::"memory");
 8000de4:	f3bf 8f4f 	dsb	sy
}
 8000de8:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000dea:	f3bf 8f6f 	isb	sy
}
 8000dee:	bf00      	nop
#if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <SCB_EnableICache+0x48>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000dfe:	f3bf 8f6f 	isb	sy
}
 8000e02:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <SCB_EnableICache+0x48>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <SCB_EnableICache+0x48>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	6153      	str	r3, [r2, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8000e10:	f3bf 8f4f 	dsb	sy
}
 8000e14:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000e16:	f3bf 8f6f 	isb	sy
}
 8000e1a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
	}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <SCB_EnableDCache>:
	/**
	 \brief   Enable D-Cache
	 \details Turns on D-Cache
	 */
	__STATIC_INLINE void SCB_EnableDCache(void)
	{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	__ASM volatile ("dsb 0xF":::"memory");
 8000e3a:	f3bf 8f4f 	dsb	sy
}
 8000e3e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e46:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	0b5b      	lsrs	r3, r3, #13
 8000e4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e50:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e5a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	015a      	lsls	r2, r3, #5
 8000e60:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e64:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e6a:	4911      	ldr	r1, [pc, #68]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	60ba      	str	r2, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1ef      	bne.n	8000e5c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	60fa      	str	r2, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1e5      	bne.n	8000e52 <SCB_EnableDCache+0x26>
	__ASM volatile ("dsb 0xF":::"memory");
 8000e86:	f3bf 8f4f 	dsb	sy
}
 8000e8a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6153      	str	r3, [r2, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8000e98:	f3bf 8f4f 	dsb	sy
}
 8000e9c:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000e9e:	f3bf 8f6f 	isb	sy
}
 8000ea2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
	}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <getTemperature>:
	sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
	ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
	HAL_Delay(10000);
}

void getTemperature(double *temperature) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	// In celcius
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <getTemperatureString>:

void getTemperatureString(double temperature, char *temperatureString) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ed2:	6078      	str	r0, [r7, #4]
	sprintf(temperatureString, "%.1f C", temperature);
 8000ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ed8:	4903      	ldr	r1, [pc, #12]	; (8000ee8 <getTemperatureString+0x20>)
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f005 fdec 	bl	8006ab8 <siprintf>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0800a2e8 	.word	0x0800a2e8

08000eec <getHumidity>:

void getHumidity(double *humidity) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	// In Relative Humidity, %RH
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <getHumidityString>:

void getHumidityString(double humidity, char *humidityString) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f0a:	6078      	str	r0, [r7, #4]
	sprintf(humidityString, "%.1f %%RH", humidity);
 8000f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f10:	4903      	ldr	r1, [pc, #12]	; (8000f20 <getHumidityString+0x20>)
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f005 fdd0 	bl	8006ab8 <siprintf>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	0800a2f0 	.word	0x0800a2f0

08000f24 <drawHueCircle>:

void drawHueCircle(uint16_t color) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	Circle circle = { SCREEN_WIDTH / 2 - 25, 45, 25 };
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <drawHueCircle+0x34>)
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f38:	6018      	str	r0, [r3, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	8019      	strh	r1, [r3, #0]
	drawFilledCircleByCoord(circle, color);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	461a      	mov	r2, r3
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f4a:	f7ff fdc3 	bl	8000ad4 <drawFilledCircleByCoord>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	0800a2fc 	.word	0x0800a2fc
 8000f5c:	00000000 	.word	0x00000000

08000f60 <convertColorToRgb565>:

uint16_t convertColorToRgb565(float redIntensity, float greenIntensity, float blueIntensity) {
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f6e:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t red = (uint16_t)(redIntensity * 31.0 + 0.5);
 8000f72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7a:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000f7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f82:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000f86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	82fb      	strh	r3, [r7, #22]
  uint16_t green = (uint16_t)(greenIntensity * 63.0 + 0.5);
 8000f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001000 <convertColorToRgb565+0xa0>
 8000fa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fb0:	ee17 3a90 	vmov	r3, s15
 8000fb4:	82bb      	strh	r3, [r7, #20]
  uint16_t blue = (uint16_t)(blueIntensity * 31.0 + 0.5);
 8000fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fbe:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000fc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fc6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000fca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fd2:	ee17 3a90 	vmov	r3, s15
 8000fd6:	827b      	strh	r3, [r7, #18]

  uint16_t color = (red << 11) | (green << 5) | blue;
 8000fd8:	8afb      	ldrh	r3, [r7, #22]
 8000fda:	02db      	lsls	r3, r3, #11
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	8abb      	ldrh	r3, [r7, #20]
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	823b      	strh	r3, [r7, #16]

  return color;
 8000ff2:	8a3b      	ldrh	r3, [r7, #16]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	00000000 	.word	0x00000000
 8001004:	404f8000 	.word	0x404f8000

08001008 <drawRgbInfo>:

void drawRgbInfo(ColorIntensity redColor, ColorIntensity greenColor, ColorIntensity blueColor) {
 8001008:	b082      	sub	sp, #8
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b09d      	sub	sp, #116	; 0x74
 800100e:	af00      	add	r7, sp, #0
 8001010:	1d3c      	adds	r4, r7, #4
 8001012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const uint16_t BRIGHT_RED = 0xff3c;
 800101a:	f64f 733c 	movw	r3, #65340	; 0xff3c
 800101e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	const uint16_t BRIGHT_GREEN = 0xcff9;
 8001022:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 8001026:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	const uint16_t BRIGHT_BLUE = 0xe73f;
 800102a:	f24e 733f 	movw	r3, #59199	; 0xe73f
 800102e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	const uint16_t BOX_WIDTH = 150;
 8001032:	2396      	movs	r3, #150	; 0x96
 8001034:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	const uint16_t BOX_HEIGHT = 20;
 8001038:	2314      	movs	r3, #20
 800103a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	const uint16_t GAP_X_CIRCLE_AND_BOX = 15;
 800103e:	230f      	movs	r3, #15
 8001040:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	Rectangle redBox =
	{
			getCircleEdgeX(redColor.circle) + GAP_X_CIRCLE_AND_BOX,
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	e893 0003 	ldmia.w	r3, {r0, r1}
 800104a:	f7ff fd56 	bl	8000afa <getCircleEdgeX>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
	Rectangle redBox =
 800105a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			redColor.circle.y - (redColor.circle.radius / 2),
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	893b      	ldrh	r3, [r7, #8]
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b29b      	uxth	r3, r3
	Rectangle redBox =
 800106a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			getCircleEdgeX(redColor.circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001074:	f7ff fd41 	bl	8000afa <getCircleEdgeX>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001080:	4413      	add	r3, r2
 8001082:	b29a      	uxth	r2, r3
 8001084:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001088:	4413      	add	r3, r2
 800108a:	b29b      	uxth	r3, r3
	Rectangle redBox =
 800108c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			redColor.circle.y + BOX_HEIGHT
 8001090:	88fa      	ldrh	r2, [r7, #6]
 8001092:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
	Rectangle redBox =
 800109a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	};

	Rectangle greenBox =
	{
			getCircleEdgeX(greenColor.circle) + GAP_X_CIRCLE_AND_BOX,
 800109e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010a6:	f7ff fd28 	bl	8000afa <getCircleEdgeX>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010b2:	4413      	add	r3, r2
 80010b4:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 80010b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			greenColor.circle.y - (greenColor.circle.radius / 2),
 80010ba:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80010be:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 80010ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			getCircleEdgeX(greenColor.circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 80010ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010d6:	f7ff fd10 	bl	8000afa <getCircleEdgeX>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010e2:	4413      	add	r3, r2
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 80010ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			greenColor.circle.y + BOX_HEIGHT
 80010f2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80010f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
	Rectangle greenBox =
 80010fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	};

	Rectangle blueBox =
	{
			getCircleEdgeX(blueColor.circle) + GAP_X_CIRCLE_AND_BOX,
 8001102:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001106:	e893 0003 	ldmia.w	r3, {r0, r1}
 800110a:	f7ff fcf6 	bl	8000afa <getCircleEdgeX>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001116:	4413      	add	r3, r2
 8001118:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 800111a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			blueColor.circle.y - (blueColor.circle.radius / 2),
 800111e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8001122:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	b29b      	uxth	r3, r3
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 800112e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			getCircleEdgeX(blueColor.circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 8001132:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001136:	e893 0003 	ldmia.w	r3, {r0, r1}
 800113a:	f7ff fcde 	bl	8000afa <getCircleEdgeX>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001146:	4413      	add	r3, r2
 8001148:	b29a      	uxth	r2, r3
 800114a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800114e:	4413      	add	r3, r2
 8001150:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 8001152:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			blueColor.circle.y + BOX_HEIGHT
 8001156:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800115a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
	Rectangle blueBox =
 8001162:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	};

	Rectangle redIntensityBar =
	{
			redBox.x0, redBox.y0,
 8001166:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
	Rectangle redIntensityBar =
 800116a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			redBox.x0, redBox.y0,
 800116e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
	Rectangle redIntensityBar =
 8001172:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			redBox.x0 + (int) (redColor.intensity*BOX_WIDTH) , redBox.y1
 8001176:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800117a:	ed97 7a03 	vldr	s14, [r7, #12]
 800117e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001192:	ee17 3a90 	vmov	r3, s15
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
	Rectangle redIntensityBar =
 800119c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			redBox.x0 + (int) (redColor.intensity*BOX_WIDTH) , redBox.y1
 80011a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
	Rectangle redIntensityBar =
 80011a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	};
	Rectangle greenIntensityBar =
	{
			greenBox.x0, greenBox.y0,
 80011a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
	Rectangle greenIntensityBar =
 80011ac:	873b      	strh	r3, [r7, #56]	; 0x38
			greenBox.x0, greenBox.y0,
 80011ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	Rectangle greenIntensityBar =
 80011b2:	877b      	strh	r3, [r7, #58]	; 0x3a
			greenBox.x0 + (int) (greenColor.intensity*BOX_WIDTH) , greenBox.y1
 80011b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80011b8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80011bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d0:	ee17 3a90 	vmov	r3, s15
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	b29b      	uxth	r3, r3
	Rectangle greenIntensityBar =
 80011da:	87bb      	strh	r3, [r7, #60]	; 0x3c
			greenBox.x0 + (int) (greenColor.intensity*BOX_WIDTH) , greenBox.y1
 80011dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	Rectangle greenIntensityBar =
 80011e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
	};
	Rectangle blueIntensityBar =
	{
			blueBox.x0, blueBox.y0,
 80011e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
	Rectangle blueIntensityBar =
 80011e6:	863b      	strh	r3, [r7, #48]	; 0x30
			blueBox.x0, blueBox.y0,
 80011e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
	Rectangle blueIntensityBar =
 80011ec:	867b      	strh	r3, [r7, #50]	; 0x32
			blueBox.x0 + (int) (blueColor.intensity*BOX_WIDTH) , blueBox.y1
 80011ee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80011f2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80011f6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
	Rectangle blueIntensityBar =
 8001214:	86bb      	strh	r3, [r7, #52]	; 0x34
			blueBox.x0 + (int) (blueColor.intensity*BOX_WIDTH) , blueBox.y1
 8001216:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
	Rectangle blueIntensityBar =
 800121a:	86fb      	strh	r3, [r7, #54]	; 0x36
	};


	const uint8_t COLOR_PERCENTAGE_FONT_SIZE = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	const uint8_t GAP_X_BOX_AND_PERCENTAGE = 10;
 8001222:	230a      	movs	r3, #10
 8001224:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	Point redPercentagePos = {redBox.x1 + GAP_X_BOX_AND_PERCENTAGE, redBox.y0};
 8001228:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800122c:	b2da      	uxtb	r2, r3
 800122e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001232:	4413      	add	r3, r2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800123a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Point greenPercentagePos = {greenBox.x1 + GAP_X_BOX_AND_PERCENTAGE, greenBox.y0};
 8001244:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001248:	b2da      	uxtb	r2, r3
 800124a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800124e:	4413      	add	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001256:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Point bluePercentagePos = {blueBox.x1 + GAP_X_BOX_AND_PERCENTAGE, blueBox.y0};
 8001260:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001264:	b2da      	uxtb	r2, r3
 8001266:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800126a:	4413      	add	r3, r2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001272:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

//	fillScreenColor(WHITE);

	drawHueCircle(convertColorToRgb565(redColor.intensity, greenColor.intensity, blueColor.intensity));
 800127c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001280:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001284:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001288:	eeb0 1a66 	vmov.f32	s2, s13
 800128c:	eef0 0a47 	vmov.f32	s1, s14
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f7ff fe64 	bl	8000f60 <convertColorToRgb565>
 8001298:	4603      	mov	r3, r0
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe42 	bl	8000f24 <drawHueCircle>

	drawFilledCircleByCoord(redColor.circle, RED);
 80012a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012aa:	f7ff fc13 	bl	8000ad4 <drawFilledCircleByCoord>
	drawFilledCircleByCoord(greenColor.circle, GREEN);
 80012ae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ba:	f7ff fc0b 	bl	8000ad4 <drawFilledCircleByCoord>
	drawFilledCircleByCoord(blueColor.circle, BLUE);
 80012be:	221f      	movs	r2, #31
 80012c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012c8:	f7ff fc04 	bl	8000ad4 <drawFilledCircleByCoord>

	drawFilledRectangleByCoord(redBox, BRIGHT_RED);
 80012cc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80012d0:	461a      	mov	r2, r3
 80012d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012da:	f7ff fbe5 	bl	8000aa8 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(greenBox, BRIGHT_GREEN);
 80012de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80012e2:	461a      	mov	r2, r3
 80012e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ec:	f7ff fbdc 	bl	8000aa8 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(blueBox, BRIGHT_BLUE);
 80012f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80012f4:	461a      	mov	r2, r3
 80012f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012fe:	f7ff fbd3 	bl	8000aa8 <drawFilledRectangleByCoord>

	drawFilledRectangleByCoord(redIntensityBar, RED);
 8001302:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800130e:	f7ff fbcb 	bl	8000aa8 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(greenIntensityBar, GREEN);
 8001312:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001316:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800131a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800131e:	f7ff fbc3 	bl	8000aa8 <drawFilledRectangleByCoord>
	drawFilledRectangleByCoord(blueIntensityBar, BLUE);
 8001322:	221f      	movs	r2, #31
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	e893 0003 	ldmia.w	r3, {r0, r1}
 800132c:	f7ff fbbc 	bl	8000aa8 <drawFilledRectangleByCoord>

	char text[10];
	Rectangle area = {redPercentagePos.x, redPercentagePos.y, bluePercentagePos.x + 50, bluePercentagePos.y + 50};
 8001330:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001334:	b29b      	uxth	r3, r3
 8001336:	823b      	strh	r3, [r7, #16]
 8001338:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800133c:	b29b      	uxth	r3, r3
 800133e:	827b      	strh	r3, [r7, #18]
 8001340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001344:	b29b      	uxth	r3, r3
 8001346:	3332      	adds	r3, #50	; 0x32
 8001348:	b29b      	uxth	r3, r3
 800134a:	82bb      	strh	r3, [r7, #20]
 800134c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001350:	b29b      	uxth	r3, r3
 8001352:	3332      	adds	r3, #50	; 0x32
 8001354:	b29b      	uxth	r3, r3
 8001356:	82fb      	strh	r3, [r7, #22]
	clearScreenArea(area, WHITE);
 8001358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001364:	f7ff fb43 	bl	80009ee <clearScreenArea>

	sprintf(text, "%d", (int) (redColor.intensity * 100));
 8001368:	edd7 7a03 	vldr	s15, [r7, #12]
 800136c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800140c <drawRgbInfo+0x404>
 8001370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	ee17 2a90 	vmov	r2, s15
 8001380:	4923      	ldr	r1, [pc, #140]	; (8001410 <drawRgbInfo+0x408>)
 8001382:	4618      	mov	r0, r3
 8001384:	f005 fb98 	bl	8006ab8 <siprintf>
	drawTextByPoint(text, redPercentagePos, COLOR_PERCENTAGE_FONT_SIZE);
 8001388:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800138c:	b29a      	uxth	r2, r3
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fb76 	bl	8000a86 <drawTextByPoint>

	sprintf(text, "%d", (int) (greenColor.intensity * 100));
 800139a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800139e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800140c <drawRgbInfo+0x404>
 80013a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	ee17 2a90 	vmov	r2, s15
 80013b2:	4917      	ldr	r1, [pc, #92]	; (8001410 <drawRgbInfo+0x408>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fb7f 	bl	8006ab8 <siprintf>
	drawTextByPoint(text, greenPercentagePos, COLOR_PERCENTAGE_FONT_SIZE);
 80013ba:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb5d 	bl	8000a86 <drawTextByPoint>

	sprintf(text, "%d", (int) (blueColor.intensity * 100));
 80013cc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80013d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800140c <drawRgbInfo+0x404>
 80013d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	ee17 2a90 	vmov	r2, s15
 80013e4:	490a      	ldr	r1, [pc, #40]	; (8001410 <drawRgbInfo+0x408>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fb66 	bl	8006ab8 <siprintf>
	drawTextByPoint(text, bluePercentagePos, COLOR_PERCENTAGE_FONT_SIZE);
 80013ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fb44 	bl	8000a86 <drawTextByPoint>
}
 80013fe:	bf00      	nop
 8001400:	3774      	adds	r7, #116	; 0x74
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001408:	b002      	add	sp, #8
 800140a:	4770      	bx	lr
 800140c:	42c80000 	.word	0x42c80000
 8001410:	0800a304 	.word	0x0800a304
 8001414:	00000000 	.word	0x00000000

08001418 <checkTouchHueCircle>:
{

}

void checkTouchHueCircle(ColorIntensity *redColor, ColorIntensity *greenColor, ColorIntensity *blueColor)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b092      	sub	sp, #72	; 0x48
 800141c:	af06      	add	r7, sp, #24
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	uint16_t xPos = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t yPos = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint16_t redXPositive = getCircleEdgeX(redColor->circle);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001432:	f7ff fb62 	bl	8000afa <getCircleEdgeX>
 8001436:	4603      	mov	r3, r0
 8001438:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t redXNegative = getCircleEdgeXNegative(redColor->circle);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001440:	f7ff fb7b 	bl	8000b3a <getCircleEdgeXNegative>
 8001444:	4603      	mov	r3, r0
 8001446:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t redYPositive = getCircleEdgeY(redColor->circle);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800144e:	f7ff fb64 	bl	8000b1a <getCircleEdgeY>
 8001452:	4603      	mov	r3, r0
 8001454:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t redYNegative = getCircleEdgeYNegative(redColor->circle);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	e893 0003 	ldmia.w	r3, {r0, r1}
 800145c:	f7ff fb7d 	bl	8000b5a <getCircleEdgeYNegative>
 8001460:	4603      	mov	r3, r0
 8001462:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint16_t greenXPositive = getCircleEdgeX(greenColor->circle);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800146a:	f7ff fb46 	bl	8000afa <getCircleEdgeX>
 800146e:	4603      	mov	r3, r0
 8001470:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t greenXNegative = getCircleEdgeXNegative(greenColor->circle);
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001478:	f7ff fb5f 	bl	8000b3a <getCircleEdgeXNegative>
 800147c:	4603      	mov	r3, r0
 800147e:	843b      	strh	r3, [r7, #32]
	uint16_t greenYPositive = getCircleEdgeY(greenColor->circle);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001486:	f7ff fb48 	bl	8000b1a <getCircleEdgeY>
 800148a:	4603      	mov	r3, r0
 800148c:	83fb      	strh	r3, [r7, #30]
	uint16_t greenYNegative = getCircleEdgeYNegative(greenColor->circle);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001494:	f7ff fb61 	bl	8000b5a <getCircleEdgeYNegative>
 8001498:	4603      	mov	r3, r0
 800149a:	83bb      	strh	r3, [r7, #28]

	uint16_t blueXPositive = getCircleEdgeX(blueColor->circle);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014a2:	f7ff fb2a 	bl	8000afa <getCircleEdgeX>
 80014a6:	4603      	mov	r3, r0
 80014a8:	837b      	strh	r3, [r7, #26]
	uint16_t blueXNegative = getCircleEdgeXNegative(blueColor->circle);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014b0:	f7ff fb43 	bl	8000b3a <getCircleEdgeXNegative>
 80014b4:	4603      	mov	r3, r0
 80014b6:	833b      	strh	r3, [r7, #24]
	uint16_t blueYPositive = getCircleEdgeY(blueColor->circle);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014be:	f7ff fb2c 	bl	8000b1a <getCircleEdgeY>
 80014c2:	4603      	mov	r3, r0
 80014c4:	82fb      	strh	r3, [r7, #22]
	uint16_t blueYNegative = getCircleEdgeYNegative(blueColor->circle);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014cc:	f7ff fb45 	bl	8000b5a <getCircleEdgeYNegative>
 80014d0:	4603      	mov	r3, r0
 80014d2:	82bb      	strh	r3, [r7, #20]

	while (1) {
		HAL_Delay(20);
 80014d4:	2014      	movs	r0, #20
 80014d6:	f001 fc8b 	bl	8002df0 <HAL_Delay>

		if (TP_Touchpad_Pressed()) {
 80014da:	f001 fc13 	bl	8002d04 <TP_Touchpad_Pressed>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f7      	beq.n	80014d4 <checkTouchHueCircle+0xbc>

			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fb49 	bl	8002b80 <TP_Read_Coordinates>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d112      	bne.n	800151a <checkTouchHueCircle+0x102>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 80014f4:	2301      	movs	r3, #1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <checkTouchHueCircle+0xf0>
				{
					xPos = position_array[1];
 80014fa:	8a7b      	ldrh	r3, [r7, #18]
 80014fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
					yPos = SCREEN_HEIGHT - position_array[0];
 80014fe:	8a3b      	ldrh	r3, [r7, #16]
 8001500:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001504:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001506:	e008      	b.n	800151a <checkTouchHueCircle+0x102>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001508:	2301      	movs	r3, #1
 800150a:	2b03      	cmp	r3, #3
 800150c:	d105      	bne.n	800151a <checkTouchHueCircle+0x102>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 800150e:	8a7b      	ldrh	r3, [r7, #18]
 8001510:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001514:	85fb      	strh	r3, [r7, #46]	; 0x2e
					yPos = position_array[0];
 8001516:	8a3b      	ldrh	r3, [r7, #16]
 8001518:	85bb      	strh	r3, [r7, #44]	; 0x2c
				}
			}


			if (xPos > redXNegative && xPos < redXPositive && yPos > redYNegative && yPos < redYPositive)
 800151a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800151c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800151e:	429a      	cmp	r2, r3
 8001520:	d929      	bls.n	8001576 <checkTouchHueCircle+0x15e>
 8001522:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001524:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001526:	429a      	cmp	r2, r3
 8001528:	d225      	bcs.n	8001576 <checkTouchHueCircle+0x15e>
 800152a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800152c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800152e:	429a      	cmp	r2, r3
 8001530:	d921      	bls.n	8001576 <checkTouchHueCircle+0x15e>
 8001532:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001536:	429a      	cmp	r2, r3
 8001538:	d21d      	bcs.n	8001576 <checkTouchHueCircle+0x15e>
			{
				if (redColor->intensity >= 1.0) {
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	db04      	blt.n	8001558 <checkTouchHueCircle+0x140>
					redColor->intensity = 0.0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
				if (redColor->intensity >= 1.0) {
 8001556:	e069      	b.n	800162c <checkTouchHueCircle+0x214>
				} else {
					redColor->intensity += 0.2;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edd3 7a02 	vldr	s15, [r3, #8]
 800155e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001562:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001658 <checkTouchHueCircle+0x240>
 8001566:	ee37 7b06 	vadd.f64	d7, d7, d6
 800156a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edc3 7a02 	vstr	s15, [r3, #8]
				if (redColor->intensity >= 1.0) {
 8001574:	e05a      	b.n	800162c <checkTouchHueCircle+0x214>
				}
			} else if (xPos > greenXNegative && xPos < greenXPositive && yPos > greenYNegative && yPos < greenYPositive)
 8001576:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001578:	8c3b      	ldrh	r3, [r7, #32]
 800157a:	429a      	cmp	r2, r3
 800157c:	d929      	bls.n	80015d2 <checkTouchHueCircle+0x1ba>
 800157e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001582:	429a      	cmp	r2, r3
 8001584:	d225      	bcs.n	80015d2 <checkTouchHueCircle+0x1ba>
 8001586:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001588:	8bbb      	ldrh	r3, [r7, #28]
 800158a:	429a      	cmp	r2, r3
 800158c:	d921      	bls.n	80015d2 <checkTouchHueCircle+0x1ba>
 800158e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001590:	8bfb      	ldrh	r3, [r7, #30]
 8001592:	429a      	cmp	r2, r3
 8001594:	d21d      	bcs.n	80015d2 <checkTouchHueCircle+0x1ba>
			{
				if (greenColor->intensity >= 1.0) {
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	edd3 7a02 	vldr	s15, [r3, #8]
 800159c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	db04      	blt.n	80015b4 <checkTouchHueCircle+0x19c>
					greenColor->intensity = 0.0;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
				if (greenColor->intensity >= 1.0) {
 80015b2:	e03b      	b.n	800162c <checkTouchHueCircle+0x214>
				} else {
					greenColor->intensity += 0.2;
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015be:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001658 <checkTouchHueCircle+0x240>
 80015c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	edc3 7a02 	vstr	s15, [r3, #8]
				if (greenColor->intensity >= 1.0) {
 80015d0:	e02c      	b.n	800162c <checkTouchHueCircle+0x214>
				}
			} else if (xPos > blueXNegative && xPos < blueXPositive && yPos > blueYNegative && yPos < blueYPositive)
 80015d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015d4:	8b3b      	ldrh	r3, [r7, #24]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d928      	bls.n	800162c <checkTouchHueCircle+0x214>
 80015da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015dc:	8b7b      	ldrh	r3, [r7, #26]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d224      	bcs.n	800162c <checkTouchHueCircle+0x214>
 80015e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015e4:	8abb      	ldrh	r3, [r7, #20]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d920      	bls.n	800162c <checkTouchHueCircle+0x214>
 80015ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d21c      	bcs.n	800162c <checkTouchHueCircle+0x214>
			{
				if (blueColor->intensity >= 1.0) {
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	db04      	blt.n	8001610 <checkTouchHueCircle+0x1f8>
					blueColor->intensity = 0.0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	e00d      	b.n	800162c <checkTouchHueCircle+0x214>
				} else {
					blueColor->intensity += 0.2;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edd3 7a02 	vldr	s15, [r3, #8]
 8001616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001658 <checkTouchHueCircle+0x240>
 800161e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a02 	vstr	s15, [r3, #8]
				}
			}
			drawRgbInfo(*redColor, *greenColor, *blueColor);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	68fc      	ldr	r4, [r7, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	ad02      	add	r5, sp, #8
 8001634:	ca07      	ldmia	r2, {r0, r1, r2}
 8001636:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800163a:	466d      	mov	r5, sp
 800163c:	1d1a      	adds	r2, r3, #4
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	e885 0003 	stmia.w	r5, {r0, r1}
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800164c:	f7ff fcdc 	bl	8001008 <drawRgbInfo>
		HAL_Delay(20);
 8001650:	e740      	b.n	80014d4 <checkTouchHueCircle+0xbc>
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	9999999a 	.word	0x9999999a
 800165c:	3fc99999 	.word	0x3fc99999

08001660 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b09f      	sub	sp, #124	; 0x7c
 8001664:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8001666:	f7ff fbbb 	bl	8000de0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800166a:	f7ff fbdf 	bl	8000e2c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800166e:	f001 fb59 	bl	8002d24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001672:	f000 f8cd 	bl	8001810 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001676:	f7ff fa81 	bl	8000b7c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800167a:	f000 fb7f 	bl	8001d7c <MX_USART3_UART_Init>
	MX_SPI5_Init();
 800167e:	f000 f985 	bl	800198c <MX_SPI5_Init>
	MX_TIM1_Init();
 8001682:	f000 fb07 	bl	8001c94 <MX_TIM1_Init>
	MX_RNG_Init();
 8001686:	f000 f939 	bl	80018fc <MX_RNG_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); // initial driver setup to drive ili9341
 800168a:	f000 ff0f 	bl	80024ac <ILI9341_Init>

	double temperature = 25.8;
 800168e:	a35c      	add	r3, pc, #368	; (adr r3, 8001800 <main+0x1a0>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double humidity = 55.6;
 8001698:	a35b      	add	r3, pc, #364	; (adr r3, 8001808 <main+0x1a8>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	char temperatureString[10];
	char humidityString[10];

	uint16_t radius = 20;
 80016a2:	2314      	movs	r3, #20
 80016a4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	ColorIntensity redColor = {{ 30, SCREEN_HEIGHT / 4 + 35, radius }, 0};
 80016a8:	231e      	movs	r3, #30
 80016aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80016ac:	235f      	movs	r3, #95	; 0x5f
 80016ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	ColorIntensity greenColor = {{ 30, getCircleEdgeY(redColor.circle) + radius + 15, radius }, 0};
 80016bc:	231e      	movs	r3, #30
 80016be:	833b      	strh	r3, [r7, #24]
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016c8:	f7ff fa27 	bl	8000b1a <getCircleEdgeY>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	330f      	adds	r3, #15
 80016da:	b29b      	uxth	r3, r3
 80016dc:	837b      	strh	r3, [r7, #26]
 80016de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016e2:	83bb      	strh	r3, [r7, #28]
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
	ColorIntensity blueColor = {{ 30, getCircleEdgeY(greenColor.circle) + radius + 15, radius }, 0};
 80016ea:	231e      	movs	r3, #30
 80016ec:	81bb      	strh	r3, [r7, #12]
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016f6:	f7ff fa10 	bl	8000b1a <getCircleEdgeY>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	330f      	adds	r3, #15
 8001708:	b29b      	uxth	r3, r3
 800170a:	81fb      	strh	r3, [r7, #14]
 800170c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001710:	823b      	strh	r3, [r7, #16]
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

	getTemperature(&temperature);
 8001718:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbc9 	bl	8000eb4 <getTemperature>
	getTemperatureString(temperature, temperatureString);
 8001722:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001726:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800172a:	4618      	mov	r0, r3
 800172c:	eeb0 0b47 	vmov.f64	d0, d7
 8001730:	f7ff fbca 	bl	8000ec8 <getTemperatureString>

	getHumidity(&humidity);
 8001734:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fbd7 	bl	8000eec <getHumidity>
	getHumidityString(humidity, humidityString);
 800173e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001746:	4618      	mov	r0, r3
 8001748:	eeb0 0b47 	vmov.f64	d0, d7
 800174c:	f7ff fbd8 	bl	8000f00 <getHumidityString>

	Point temperaturePosition = { 25, 30 };
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <main+0x198>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	813b      	strh	r3, [r7, #8]
	Point humidityPosition = { SCREEN_WIDTH / 2 + 10, 30 };
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <main+0x19c>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	80bb      	strh	r3, [r7, #4]

	int fontSize = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	65bb      	str	r3, [r7, #88]	; 0x58
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		fillScreenColor(WHITE);
 8001760:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001764:	f7ff f936 	bl	80009d4 <fillScreenColor>
		setRotation(SCREEN_ROTATION);
 8001768:	2301      	movs	r3, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f962 	bl	8000a34 <setRotation>
		drawTextByPoint(temperatureString, temperaturePosition, fontSize);
 8001770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001772:	b29a      	uxth	r2, r3
 8001774:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f983 	bl	8000a86 <drawTextByPoint>
		drawHueCircle(convertColorToRgb565(redColor.intensity, greenColor.intensity, blueColor.intensity));
 8001780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001784:	ed97 7a08 	vldr	s14, [r7, #32]
 8001788:	edd7 6a05 	vldr	s13, [r7, #20]
 800178c:	eeb0 1a66 	vmov.f32	s2, s13
 8001790:	eef0 0a47 	vmov.f32	s1, s14
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f7ff fbe2 	bl	8000f60 <convertColorToRgb565>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fbc0 	bl	8000f24 <drawHueCircle>
		drawTextByPoint(humidityString, humidityPosition, fontSize);
 80017a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f969 	bl	8000a86 <drawTextByPoint>
		drawRgbInfo(redColor, greenColor, blueColor);
 80017b4:	ac02      	add	r4, sp, #8
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017c2:	466a      	mov	r2, sp
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80017d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d8:	f7ff fc16 	bl	8001008 <drawRgbInfo>

		checkTouchHueCircle(&redColor, &greenColor, &blueColor);
 80017dc:	f107 020c 	add.w	r2, r7, #12
 80017e0:	f107 0118 	add.w	r1, r7, #24
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe15 	bl	8001418 <checkTouchHueCircle>
		HAL_Delay(5000);
 80017ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80017f2:	f001 fafd 	bl	8002df0 <HAL_Delay>
		fillScreenColor(WHITE);
 80017f6:	e7b3      	b.n	8001760 <main+0x100>
 80017f8:	0800a320 	.word	0x0800a320
 80017fc:	0800a324 	.word	0x0800a324
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	4039cccc 	.word	0x4039cccc
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	404bcccc 	.word	0x404bcccc

08001810 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b094      	sub	sp, #80	; 0x50
 8001814:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2234      	movs	r2, #52	; 0x34
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f005 f9ad 	bl	8006b7e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001834:	f001 fdc4 	bl	80033c0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <SystemClock_Config+0xd8>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <SystemClock_Config+0xd8>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <SystemClock_Config+0xd8>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <SystemClock_Config+0xdc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a25      	ldr	r2, [pc, #148]	; (80018ec <SystemClock_Config+0xdc>)
 8001856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <SystemClock_Config+0xdc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001868:	2301      	movs	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800186c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001870:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001872:	2302      	movs	r3, #2
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 200;
 8001880:	23c8      	movs	r3, #200	; 0xc8
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001888:	2309      	movs	r3, #9
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fdf3 	bl	8003480 <HAL_RCC_OscConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0x94>
		Error_Handler();
 80018a0:	f000 f826 	bl	80018f0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80018a4:	f001 fd9c 	bl	80033e0 <HAL_PWREx_EnableOverDrive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0xa2>
		Error_Handler();
 80018ae:	f000 f81f 	bl	80018f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b2:	230f      	movs	r3, #15
 80018b4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b6:	2302      	movs	r3, #2
 80018b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	2106      	movs	r1, #6
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 f883 	bl	80039dc <HAL_RCC_ClockConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0xd0>
		Error_Handler();
 80018dc:	f000 f808 	bl	80018f0 <Error_Handler>
	}
}
 80018e0:	bf00      	nop
 80018e2:	3750      	adds	r7, #80	; 0x50
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000

080018f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	__ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_RNG_Init+0x20>)
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <MX_RNG_Init+0x24>)
 8001904:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_RNG_Init+0x20>)
 8001908:	f002 feb6 	bl	8004678 <HAL_RNG_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001912:	f7ff ffed 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200001f4 	.word	0x200001f4
 8001920:	50060800 	.word	0x50060800

08001924 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0a8      	sub	sp, #160	; 0xa0
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2290      	movs	r2, #144	; 0x90
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f005 f922 	bl	8006b7e <memset>
  if(rngHandle->Instance==RNG)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_RNG_MspInit+0x60>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d11b      	bne.n	800197c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001944:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001948:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fa67 	bl	8003e28 <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001960:	f7ff ffc6 	bl	80018f0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_RNG_MspInit+0x64>)
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RNG_MspInit+0x64>)
 800196a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196e:	6353      	str	r3, [r2, #52]	; 0x34
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RNG_MspInit+0x64>)
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800197c:	bf00      	nop
 800197e:	37a0      	adds	r7, #160	; 0xa0
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	50060800 	.word	0x50060800
 8001988:	40023800 	.word	0x40023800

0800198c <MX_SPI5_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	/* USER CODE END SPI5_Init 0 */

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	hspi5.Instance = SPI5;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_SPI5_Init+0x74>)
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <MX_SPI5_Init+0x78>)
 8001994:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_SPI5_Init+0x74>)
 8001998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800199c:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019aa:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019be:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019da:	2207      	movs	r2, #7
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_SPI5_Init+0x74>)
 80019ec:	f002 fe6e 	bl	80046cc <HAL_SPI_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_SPI5_Init+0x6e>
		Error_Handler();
 80019f6:	f7ff ff7b 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000204 	.word	0x20000204
 8001a04:	40015000 	.word	0x40015000

08001a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI5) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_SPI_MspInit+0x7c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d128      	bne.n	8001a7c <HAL_SPI_MspInit+0x74>
		/* USER CODE BEGIN SPI5_MspInit 0 */

		/* USER CODE END SPI5_MspInit 0 */
		/* SPI5 clock enable */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
		/**SPI5 GPIO Configuration
		 PF7     ------> SPI5_SCK
		 PF8     ------> SPI5_MISO
		 PF9     ------> SPI5_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001a5a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a5e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_SPI_MspInit+0x84>)
 8001a78:	f001 fac4 	bl	8003004 <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI5_MspInit 1 */

		/* USER CODE END SPI5_MspInit 1 */
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40015000 	.word	0x40015000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40021400 	.word	0x40021400

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f001 f968 	bl	8002db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_kill>:

int _kill(int pid, int sig) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001afe:	f005 f891 	bl	8006c24 <__errno>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2216      	movs	r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
	return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_exit>:

void _exit(int status) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ffe7 	bl	8001af4 <_kill>
	while (1) {
 8001b26:	e7fe      	b.n	8001b26 <_exit+0x12>

08001b28 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e00a      	b.n	8001b50 <_read+0x28>
		*ptr++ = __io_getchar();
 8001b3a:	f3af 8000 	nop.w
 8001b3e:	4601      	mov	r1, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbf0      	blt.n	8001b3a <_read+0x12>
	}

	return len;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e009      	b.n	8001b88 <_write+0x26>
		__io_putchar(*ptr++);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf1      	blt.n	8001b74 <_write+0x12>
	}
	return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_close>:

int _close(int file) {
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_isatty>:

int _isatty(int file) {
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
		errno = ENOMEM;
 8001c34:	f004 fff6 	bl	8006c24 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20080000 	.word	0x20080000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20000268 	.word	0x20000268
 8001c6c:	20000490 	.word	0x20000490

08001c70 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <MX_TIM1_Init>:
/* USER CODE END 0 */

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cb4:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <MX_TIM1_Init+0xa4>)
 8001cb6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000 - 1;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cbe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001ce0:	4814      	ldr	r0, [pc, #80]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001ce2:	f003 f895 	bl	8004e10 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x5c>
		Error_Handler();
 8001cec:	f7ff fe00 	bl	80018f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001cfe:	f003 f8df 	bl	8004ec0 <HAL_TIM_ConfigClockSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x78>
		Error_Handler();
 8001d08:	f7ff fdf2 	bl	80018f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM1_Init+0xa0>)
 8001d1e:	f003 fad3 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001d28:	f7ff fde2 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000026c 	.word	0x2000026c
 8001d38:	40010000 	.word	0x40010000

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_TIM_Base_MspInit+0x38>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10b      	bne.n	8001d66 <HAL_TIM_Base_MspInit+0x2a>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_TIM_Base_MspInit+0x3c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_TIM_Base_MspInit+0x3c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_TIM_Base_MspInit+0x3c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40023800 	.word	0x40023800

08001d7c <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <MX_USART3_UART_Init+0x5c>)
 8001d84:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001dc0:	f003 fb10 	bl	80053e4 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001dca:	f7ff fd91 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002b8 	.word	0x200002b8
 8001dd8:	40004800 	.word	0x40004800

08001ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0ae      	sub	sp, #184	; 0xb8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001de4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2290      	movs	r2, #144	; 0x90
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 febe 	bl	8006b7e <memset>
	if (uartHandle->Instance == USART3) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d13c      	bne.n	8001e86 <HAL_UART_MspInit+0xaa>

		/* USER CODE END USART3_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e10:	617b      	str	r3, [r7, #20]
		PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 f804 	bl	8003e28 <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_UART_MspInit+0x4e>
			Error_Handler();
 8001e26:	f7ff fd63 	bl	80018f0 <Error_Handler>
		}

		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e74:	2307      	movs	r3, #7
 8001e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0xbc>)
 8001e82:	f001 f8bf 	bl	8003004 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001e86:	bf00      	nop
 8001e88:	37b8      	adds	r7, #184	; 0xb8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004800 	.word	0x40004800
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020c00 	.word	0x40020c00

08001e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec6:	f7ff fed3 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eca:	f004 feb1 	bl	8006c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ece:	f7ff fbc7 	bl	8001660 <main>
  bx  lr    
 8001ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ee0:	0800a9b8 	.word	0x0800a9b8
  ldr r2, =_sbss
 8001ee4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ee8:	20000490 	.word	0x20000490

08001eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC_IRQHandler>

08001eee <ILI9341_Draw_Filled_Circle>:
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour)
{
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b08b      	sub	sp, #44	; 0x2c
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	4603      	mov	r3, r0
 8001f02:	80bb      	strh	r3, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	f1c3 0301 	rsb	r3, r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8001f26:	e061      	b.n	8001fec <ILI9341_Draw_Filled_Circle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e018      	b.n	8001f64 <ILI9341_Draw_Filled_Circle+0x76>
		{
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	b298      	uxth	r0, r3
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	883a      	ldrh	r2, [r7, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	f000 fc84 	bl	8002850 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	b298      	uxth	r0, r3
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	88ba      	ldrh	r2, [r7, #4]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	883a      	ldrh	r2, [r7, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f000 fc79 	bl	8002850 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dde0      	ble.n	8001f32 <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++)
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e018      	b.n	8001fac <ILI9341_Draw_Filled_Circle+0xbe>
		{
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	b298      	uxth	r0, r3
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	88bb      	ldrh	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	883a      	ldrh	r2, [r7, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f000 fc60 	bl	8002850 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	b298      	uxth	r0, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	88ba      	ldrh	r2, [r7, #4]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	883a      	ldrh	r2, [r7, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f000 fc55 	bl	8002850 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dde0      	ble.n	8001f7a <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005a      	lsls	r2, r3, #1
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dd09      	ble.n	8001fec <ILI9341_Draw_Filled_Circle+0xfe>
		{
			x--;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	da99      	bge.n	8001f28 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	372c      	adds	r7, #44	; 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}

08001ffe <ILI9341_Draw_Filled_Rectangle_Coord>:
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8001ffe:	b590      	push	{r4, r7, lr}
 8002000:	b089      	sub	sp, #36	; 0x24
 8002002:	af02      	add	r7, sp, #8
 8002004:	4604      	mov	r4, r0
 8002006:	4608      	mov	r0, r1
 8002008:	4611      	mov	r1, r2
 800200a:	461a      	mov	r2, r3
 800200c:	4623      	mov	r3, r4
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	4603      	mov	r3, r0
 8002012:	80bb      	strh	r3, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8002038:	887a      	ldrh	r2, [r7, #2]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da01      	bge.n	800204a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 800204e:	883a      	ldrh	r2, [r7, #0]
 8002050:	88bb      	ldrh	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da01      	bge.n	8002060 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 800205c:	2301      	movs	r3, #1
 800205e:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	823b      	strh	r3, [r7, #16]
 8002072:	e005      	b.n	8002080 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002080:	7cbb      	ldrb	r3, [r7, #18]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002086:	883a      	ldrh	r2, [r7, #0]
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 800208e:	88bb      	ldrh	r3, [r7, #4]
 8002090:	81fb      	strh	r3, [r7, #14]
 8002092:	e005      	b.n	80020a0 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002094:	88ba      	ldrh	r2, [r7, #4]
 8002096:	883b      	ldrh	r3, [r7, #0]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 800209c:	883b      	ldrh	r3, [r7, #0]
 800209e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 80020a0:	8abc      	ldrh	r4, [r7, #20]
 80020a2:	8afa      	ldrh	r2, [r7, #22]
 80020a4:	89f9      	ldrh	r1, [r7, #14]
 80020a6:	8a38      	ldrh	r0, [r7, #16]
 80020a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4623      	mov	r3, r4
 80020ae:	f000 fca9 	bl	8002a04 <ILI9341_Draw_Rectangle>
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
	...

080020bc <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	4603      	mov	r3, r0
 80020d0:	71bb      	strb	r3, [r7, #6]
 80020d2:	460b      	mov	r3, r1
 80020d4:	717b      	strb	r3, [r7, #5]
 80020d6:	4613      	mov	r3, r2
 80020d8:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b1f      	cmp	r3, #31
 80020e2:	d802      	bhi.n	80020ea <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	e002      	b.n	80020f0 <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	3b20      	subs	r3, #32
 80020ee:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	753b      	strb	r3, [r7, #20]
 80020f4:	e012      	b.n	800211c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80020f6:	7dfa      	ldrb	r2, [r7, #23]
 80020f8:	7d38      	ldrb	r0, [r7, #20]
 80020fa:	7d39      	ldrb	r1, [r7, #20]
 80020fc:	4c3b      	ldr	r4, [pc, #236]	; (80021ec <ILI9341_Draw_Char+0x130>)
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4423      	add	r3, r4
 8002108:	4403      	add	r3, r0
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	f101 0318 	add.w	r3, r1, #24
 8002110:	443b      	add	r3, r7
 8002112:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002116:	7d3b      	ldrb	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	753b      	strb	r3, [r7, #20]
 800211c:	7d3b      	ldrb	r3, [r7, #20]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d9e9      	bls.n	80020f6 <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	b298      	uxth	r0, r3
 8002126:	797b      	ldrb	r3, [r7, #5]
 8002128:	b299      	uxth	r1, r3
 800212a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800212c:	461a      	mov	r2, r3
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	4413      	add	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	b29c      	uxth	r4, r3
 800213c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4623      	mov	r3, r4
 8002142:	f000 fc5f 	bl	8002a04 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8002146:	2300      	movs	r3, #0
 8002148:	757b      	strb	r3, [r7, #21]
 800214a:	e047      	b.n	80021dc <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	75bb      	strb	r3, [r7, #22]
 8002150:	e03e      	b.n	80021d0 <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 8002152:	7d7b      	ldrb	r3, [r7, #21]
 8002154:	3318      	adds	r3, #24
 8002156:	443b      	add	r3, r7
 8002158:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800215c:	461a      	mov	r2, r3
 800215e:	7dbb      	ldrb	r3, [r7, #22]
 8002160:	fa42 f303 	asr.w	r3, r2, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02e      	beq.n	80021ca <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 800216c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800216e:	2b01      	cmp	r3, #1
 8002170:	d110      	bne.n	8002194 <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	b29a      	uxth	r2, r3
 8002176:	7d7b      	ldrb	r3, [r7, #21]
 8002178:	b29b      	uxth	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	b298      	uxth	r0, r3
 800217e:	797b      	ldrb	r3, [r7, #5]
 8002180:	b29a      	uxth	r2, r3
 8002182:	7dbb      	ldrb	r3, [r7, #22]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4413      	add	r3, r2
 8002188:	b29b      	uxth	r3, r3
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	4619      	mov	r1, r3
 800218e:	f000 fb5f 	bl	8002850 <ILI9341_Draw_Pixel>
 8002192:	e01a      	b.n	80021ca <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	b29a      	uxth	r2, r3
 8002198:	7d7b      	ldrb	r3, [r7, #21]
 800219a:	b29b      	uxth	r3, r3
 800219c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800219e:	fb11 f303 	smulbb	r3, r1, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b298      	uxth	r0, r3
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	7dbb      	ldrb	r3, [r7, #22]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80021b2:	fb11 f303 	smulbb	r3, r1, r3
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	b299      	uxth	r1, r3
 80021bc:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80021be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4623      	mov	r3, r4
 80021c6:	f000 fc1d 	bl	8002a04 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 80021ca:	7dbb      	ldrb	r3, [r7, #22]
 80021cc:	3301      	adds	r3, #1
 80021ce:	75bb      	strb	r3, [r7, #22]
 80021d0:	7dbb      	ldrb	r3, [r7, #22]
 80021d2:	2b07      	cmp	r3, #7
 80021d4:	d9bd      	bls.n	8002152 <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 80021d6:	7d7b      	ldrb	r3, [r7, #21]
 80021d8:	3301      	adds	r3, #1
 80021da:	757b      	strb	r3, [r7, #21]
 80021dc:	7d7b      	ldrb	r3, [r7, #21]
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d9b4      	bls.n	800214c <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	0800a340 	.word	0x0800a340

080021f0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	70fb      	strb	r3, [r7, #3]
 8002202:	460b      	mov	r3, r1
 8002204:	70bb      	strb	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	803b      	strh	r3, [r7, #0]
	while (*Text)
 800220a:	e017      	b.n	800223c <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	7818      	ldrb	r0, [r3, #0]
 8002214:	883c      	ldrh	r4, [r7, #0]
 8002216:	78ba      	ldrb	r2, [r7, #2]
 8002218:	78f9      	ldrb	r1, [r7, #3]
 800221a:	8bbb      	ldrh	r3, [r7, #28]
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	8b3b      	ldrh	r3, [r7, #24]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4623      	mov	r3, r4
 8002224:	f7ff ff4a 	bl	80020bc <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8002228:	8b3b      	ldrh	r3, [r7, #24]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	0052      	lsls	r2, r2, #1
 8002230:	4413      	add	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	4413      	add	r3, r2
 800223a:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e3      	bne.n	800220c <ILI9341_Draw_Text+0x1c>
	}
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
	...

08002250 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 8002254:	f7ff fb9a 	bl	800198c <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 8002258:	f7fe fc90 	bl	8000b7c <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <ILI9341_SPI_Init+0x1c>)
 8002264:	f001 f892 	bl	800338c <HAL_GPIO_WritePin>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40020800 	.word	0x40020800

08002270 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800227a:	1df9      	adds	r1, r7, #7
 800227c:	2301      	movs	r3, #1
 800227e:	2201      	movs	r2, #1
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <ILI9341_SPI_Send+0x20>)
 8002282:	f002 face 	bl	8004822 <HAL_SPI_Transmit>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000204 	.word	0x20000204

08002294 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <ILI9341_Write_Command+0x40>)
 80022a6:	f001 f871 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b0:	4808      	ldr	r0, [pc, #32]	; (80022d4 <ILI9341_Write_Command+0x40>)
 80022b2:	f001 f86b 	bl	800338c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ffd9 	bl	8002270 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <ILI9341_Write_Command+0x40>)
 80022c6:	f001 f861 	bl	800338c <HAL_GPIO_WritePin>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40020800 	.word	0x40020800

080022d8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e8:	480b      	ldr	r0, [pc, #44]	; (8002318 <ILI9341_Write_Data+0x40>)
 80022ea:	f001 f84f 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f4:	4808      	ldr	r0, [pc, #32]	; (8002318 <ILI9341_Write_Data+0x40>)
 80022f6:	f001 f849 	bl	800338c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ffb7 	bl	8002270 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <ILI9341_Write_Data+0x40>)
 800230a:	f001 f83f 	bl	800338c <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40020800 	.word	0x40020800

0800231c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4623      	mov	r3, r4
 800232c:	80fb      	strh	r3, [r7, #6]
 800232e:	4603      	mov	r3, r0
 8002330:	80bb      	strh	r3, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]
 8002336:	4613      	mov	r3, r2
 8002338:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 800233a:	202a      	movs	r0, #42	; 0x2a
 800233c:	f7ff ffaa 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b29b      	uxth	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ffc5 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ffc0 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29b      	uxth	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ffb9 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ffb4 	bl	80022d8 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8002370:	202b      	movs	r0, #43	; 0x2b
 8002372:	f7ff ff8f 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	b29b      	uxth	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ffaa 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8002384:	88bb      	ldrh	r3, [r7, #4]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ffa5 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 800238e:	883b      	ldrh	r3, [r7, #0]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff9e 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 800239c:	883b      	ldrh	r3, [r7, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff99 	bl	80022d8 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80023a6:	202c      	movs	r0, #44	; 0x2c
 80023a8:	f7ff ff74 	bl	8002294 <ILI9341_Write_Command>
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}

080023b4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <ILI9341_Reset+0x38>)
 80023c0:	f000 ffe4 	bl	800338c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80023c4:	20c8      	movs	r0, #200	; 0xc8
 80023c6:	f000 fd13 	bl	8002df0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <ILI9341_Reset+0x38>)
 80023d2:	f000 ffdb 	bl	800338c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80023d6:	20c8      	movs	r0, #200	; 0xc8
 80023d8:	f000 fd0a 	bl	8002df0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e2:	4802      	ldr	r0, [pc, #8]	; (80023ec <ILI9341_Reset+0x38>)
 80023e4:	f000 ffd2 	bl	800338c <HAL_GPIO_WritePin>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40020800 	.word	0x40020800

080023f0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80023fe:	2036      	movs	r0, #54	; 0x36
 8002400:	f7ff ff48 	bl	8002294 <ILI9341_Write_Command>
	HAL_Delay(1);
 8002404:	2001      	movs	r0, #1
 8002406:	f000 fcf3 	bl	8002df0 <HAL_Delay>

	switch (screen_rotation)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d837      	bhi.n	8002480 <ILI9341_Set_Rotation+0x90>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <ILI9341_Set_Rotation+0x28>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	08002429 	.word	0x08002429
 800241c:	0800243f 	.word	0x0800243f
 8002420:	08002455 	.word	0x08002455
 8002424:	0800246b 	.word	0x0800246b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8002428:	2048      	movs	r0, #72	; 0x48
 800242a:	f7ff ff55 	bl	80022d8 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <ILI9341_Set_Rotation+0x9c>)
 8002430:	22f0      	movs	r2, #240	; 0xf0
 8002432:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <ILI9341_Set_Rotation+0xa0>)
 8002436:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800243a:	801a      	strh	r2, [r3, #0]
		break;
 800243c:	e021      	b.n	8002482 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 800243e:	2028      	movs	r0, #40	; 0x28
 8002440:	f7ff ff4a 	bl	80022d8 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <ILI9341_Set_Rotation+0x9c>)
 8002446:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800244a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <ILI9341_Set_Rotation+0xa0>)
 800244e:	22f0      	movs	r2, #240	; 0xf0
 8002450:	801a      	strh	r2, [r3, #0]
		break;
 8002452:	e016      	b.n	8002482 <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8002454:	2088      	movs	r0, #136	; 0x88
 8002456:	f7ff ff3f 	bl	80022d8 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <ILI9341_Set_Rotation+0x9c>)
 800245c:	22f0      	movs	r2, #240	; 0xf0
 800245e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <ILI9341_Set_Rotation+0xa0>)
 8002462:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002466:	801a      	strh	r2, [r3, #0]
		break;
 8002468:	e00b      	b.n	8002482 <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 800246a:	20e8      	movs	r0, #232	; 0xe8
 800246c:	f7ff ff34 	bl	80022d8 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <ILI9341_Set_Rotation+0x9c>)
 8002472:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002476:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <ILI9341_Set_Rotation+0xa0>)
 800247a:	22f0      	movs	r2, #240	; 0xf0
 800247c:	801a      	strh	r2, [r3, #0]
		break;
 800247e:	e000      	b.n	8002482 <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8002480:	bf00      	nop
	}
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000006 	.word	0x20000006
 8002490:	20000004 	.word	0x20000004

08002494 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249e:	4802      	ldr	r0, [pc, #8]	; (80024a8 <ILI9341_Enable+0x14>)
 80024a0:	f000 ff74 	bl	800338c <HAL_GPIO_WritePin>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40020800 	.word	0x40020800

080024ac <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 80024b0:	f7ff fff0 	bl	8002494 <ILI9341_Enable>
	ILI9341_SPI_Init();
 80024b4:	f7ff fecc 	bl	8002250 <ILI9341_SPI_Init>
	ILI9341_Reset();
 80024b8:	f7ff ff7c 	bl	80023b4 <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7ff fee9 	bl	8002294 <ILI9341_Write_Command>
	HAL_Delay(1000);
 80024c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c6:	f000 fc93 	bl	8002df0 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 80024ca:	20cb      	movs	r0, #203	; 0xcb
 80024cc:	f7ff fee2 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 80024d0:	2039      	movs	r0, #57	; 0x39
 80024d2:	f7ff ff01 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 80024d6:	202c      	movs	r0, #44	; 0x2c
 80024d8:	f7ff fefe 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fefb 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 80024e2:	2034      	movs	r0, #52	; 0x34
 80024e4:	f7ff fef8 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 80024e8:	2002      	movs	r0, #2
 80024ea:	f7ff fef5 	bl	80022d8 <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80024ee:	20cf      	movs	r0, #207	; 0xcf
 80024f0:	f7ff fed0 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff feef 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80024fa:	20c1      	movs	r0, #193	; 0xc1
 80024fc:	f7ff feec 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8002500:	2030      	movs	r0, #48	; 0x30
 8002502:	f7ff fee9 	bl	80022d8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8002506:	20e8      	movs	r0, #232	; 0xe8
 8002508:	f7ff fec4 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 800250c:	2085      	movs	r0, #133	; 0x85
 800250e:	f7ff fee3 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff fee0 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8002518:	2078      	movs	r0, #120	; 0x78
 800251a:	f7ff fedd 	bl	80022d8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800251e:	20ea      	movs	r0, #234	; 0xea
 8002520:	f7ff feb8 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff fed7 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff fed4 	bl	80022d8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8002530:	20ed      	movs	r0, #237	; 0xed
 8002532:	f7ff feaf 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8002536:	2064      	movs	r0, #100	; 0x64
 8002538:	f7ff fece 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800253c:	2003      	movs	r0, #3
 800253e:	f7ff fecb 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8002542:	2012      	movs	r0, #18
 8002544:	f7ff fec8 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8002548:	2081      	movs	r0, #129	; 0x81
 800254a:	f7ff fec5 	bl	80022d8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800254e:	20f7      	movs	r0, #247	; 0xf7
 8002550:	f7ff fea0 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8002554:	2020      	movs	r0, #32
 8002556:	f7ff febf 	bl	80022d8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 800255a:	20c0      	movs	r0, #192	; 0xc0
 800255c:	f7ff fe9a 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8002560:	2023      	movs	r0, #35	; 0x23
 8002562:	f7ff feb9 	bl	80022d8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8002566:	20c1      	movs	r0, #193	; 0xc1
 8002568:	f7ff fe94 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 800256c:	2010      	movs	r0, #16
 800256e:	f7ff feb3 	bl	80022d8 <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8002572:	20c5      	movs	r0, #197	; 0xc5
 8002574:	f7ff fe8e 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8002578:	203e      	movs	r0, #62	; 0x3e
 800257a:	f7ff fead 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 800257e:	2028      	movs	r0, #40	; 0x28
 8002580:	f7ff feaa 	bl	80022d8 <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8002584:	20c7      	movs	r0, #199	; 0xc7
 8002586:	f7ff fe85 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 800258a:	2086      	movs	r0, #134	; 0x86
 800258c:	f7ff fea4 	bl	80022d8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8002590:	2036      	movs	r0, #54	; 0x36
 8002592:	f7ff fe7f 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8002596:	2048      	movs	r0, #72	; 0x48
 8002598:	f7ff fe9e 	bl	80022d8 <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 800259c:	203a      	movs	r0, #58	; 0x3a
 800259e:	f7ff fe79 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 80025a2:	2055      	movs	r0, #85	; 0x55
 80025a4:	f7ff fe98 	bl	80022d8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80025a8:	20b1      	movs	r0, #177	; 0xb1
 80025aa:	f7ff fe73 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff fe92 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 80025b4:	2018      	movs	r0, #24
 80025b6:	f7ff fe8f 	bl	80022d8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 80025ba:	20b6      	movs	r0, #182	; 0xb6
 80025bc:	f7ff fe6a 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 80025c0:	2008      	movs	r0, #8
 80025c2:	f7ff fe89 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 80025c6:	2082      	movs	r0, #130	; 0x82
 80025c8:	f7ff fe86 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 80025cc:	2027      	movs	r0, #39	; 0x27
 80025ce:	f7ff fe83 	bl	80022d8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 80025d2:	20f2      	movs	r0, #242	; 0xf2
 80025d4:	f7ff fe5e 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fe7d 	bl	80022d8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80025de:	2026      	movs	r0, #38	; 0x26
 80025e0:	f7ff fe58 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7ff fe77 	bl	80022d8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80025ea:	20e0      	movs	r0, #224	; 0xe0
 80025ec:	f7ff fe52 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 80025f0:	200f      	movs	r0, #15
 80025f2:	f7ff fe71 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80025f6:	2031      	movs	r0, #49	; 0x31
 80025f8:	f7ff fe6e 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80025fc:	202b      	movs	r0, #43	; 0x2b
 80025fe:	f7ff fe6b 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002602:	200c      	movs	r0, #12
 8002604:	f7ff fe68 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002608:	200e      	movs	r0, #14
 800260a:	f7ff fe65 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800260e:	2008      	movs	r0, #8
 8002610:	f7ff fe62 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8002614:	204e      	movs	r0, #78	; 0x4e
 8002616:	f7ff fe5f 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 800261a:	20f1      	movs	r0, #241	; 0xf1
 800261c:	f7ff fe5c 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8002620:	2037      	movs	r0, #55	; 0x37
 8002622:	f7ff fe59 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002626:	2007      	movs	r0, #7
 8002628:	f7ff fe56 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 800262c:	2010      	movs	r0, #16
 800262e:	f7ff fe53 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002632:	2003      	movs	r0, #3
 8002634:	f7ff fe50 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002638:	200e      	movs	r0, #14
 800263a:	f7ff fe4d 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 800263e:	2009      	movs	r0, #9
 8002640:	f7ff fe4a 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff fe47 	bl	80022d8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 800264a:	20e1      	movs	r0, #225	; 0xe1
 800264c:	f7ff fe22 	bl	8002294 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff fe41 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002656:	200e      	movs	r0, #14
 8002658:	f7ff fe3e 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 800265c:	2014      	movs	r0, #20
 800265e:	f7ff fe3b 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002662:	2003      	movs	r0, #3
 8002664:	f7ff fe38 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8002668:	2011      	movs	r0, #17
 800266a:	f7ff fe35 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800266e:	2007      	movs	r0, #7
 8002670:	f7ff fe32 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002674:	2031      	movs	r0, #49	; 0x31
 8002676:	f7ff fe2f 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800267a:	20c1      	movs	r0, #193	; 0xc1
 800267c:	f7ff fe2c 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8002680:	2048      	movs	r0, #72	; 0x48
 8002682:	f7ff fe29 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002686:	2008      	movs	r0, #8
 8002688:	f7ff fe26 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 800268c:	200f      	movs	r0, #15
 800268e:	f7ff fe23 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002692:	200c      	movs	r0, #12
 8002694:	f7ff fe20 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002698:	2031      	movs	r0, #49	; 0x31
 800269a:	f7ff fe1d 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 800269e:	2036      	movs	r0, #54	; 0x36
 80026a0:	f7ff fe1a 	bl	80022d8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80026a4:	200f      	movs	r0, #15
 80026a6:	f7ff fe17 	bl	80022d8 <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80026aa:	2011      	movs	r0, #17
 80026ac:	f7ff fdf2 	bl	8002294 <ILI9341_Write_Command>
	HAL_Delay(120);
 80026b0:	2078      	movs	r0, #120	; 0x78
 80026b2:	f000 fb9d 	bl	8002df0 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80026b6:	2029      	movs	r0, #41	; 0x29
 80026b8:	f7ff fdec 	bl	8002294 <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fe97 	bl	80023f0 <ILI9341_Set_Rotation>
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80026c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026cc:	b08d      	sub	sp, #52	; 0x34
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	6039      	str	r1, [r7, #0]
 80026d4:	80fb      	strh	r3, [r7, #6]
 80026d6:	466b      	mov	r3, sp
 80026d8:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026e6:	d202      	bcs.n	80026ee <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ec:	e002      	b.n	80026f4 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80026ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026fa:	4840      	ldr	r0, [pc, #256]	; (80027fc <ILI9341_Draw_Colour_Burst+0x134>)
 80026fc:	f000 fe46 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002706:	483d      	ldr	r0, [pc, #244]	; (80027fc <ILI9341_Draw_Colour_Burst+0x134>)
 8002708:	f000 fe40 	bl	800338c <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	b29b      	uxth	r3, r3
 8002712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 8002716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002718:	460b      	mov	r3, r1
 800271a:	3b01      	subs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	4688      	mov	r8, r1
 8002722:	4699      	mov	r9, r3
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002738:	2300      	movs	r3, #0
 800273a:	460c      	mov	r4, r1
 800273c:	461d      	mov	r5, r3
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	00eb      	lsls	r3, r5, #3
 8002748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274c:	00e2      	lsls	r2, r4, #3
 800274e:	1dcb      	adds	r3, r1, #7
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	ebad 0d03 	sub.w	sp, sp, r3
 8002758:	466b      	mov	r3, sp
 800275a:	3300      	adds	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 800275e:	2300      	movs	r3, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	e00e      	b.n	8002782 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	4413      	add	r3, r2
 800276a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800276e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	3301      	adds	r3, #1
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	b2d1      	uxtb	r1, r2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	3302      	adds	r3, #2
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	429a      	cmp	r2, r3
 8002788:	d3ec      	bcc.n	8002764 <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279e:	fbb3 f2f2 	udiv	r2, r3, r2
 80027a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027a4:	fb01 f202 	mul.w	r2, r1, r2
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e009      	b.n	80027cc <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	230a      	movs	r3, #10
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	480f      	ldr	r0, [pc, #60]	; (8002800 <ILI9341_Draw_Colour_Burst+0x138>)
 80027c2:	f002 f82e 	bl	8004822 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3301      	adds	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3f1      	bcc.n	80027b8 <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	230a      	movs	r3, #10
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <ILI9341_Draw_Colour_Burst+0x138>)
 80027de:	f002 f820 	bl	8004822 <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80027e2:	2201      	movs	r2, #1
 80027e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <ILI9341_Draw_Colour_Burst+0x134>)
 80027ea:	f000 fdcf 	bl	800338c <HAL_GPIO_WritePin>
 80027ee:	46b5      	mov	sp, r6
}
 80027f0:	bf00      	nop
 80027f2:	3734      	adds	r7, #52	; 0x34
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027fa:	bf00      	nop
 80027fc:	40020800 	.word	0x40020800
 8002800:	20000204 	.word	0x20000204

08002804 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <ILI9341_Fill_Screen+0x44>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <ILI9341_Fill_Screen+0x48>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	2100      	movs	r1, #0
 800281c:	2000      	movs	r0, #0
 800281e:	f7ff fd7d 	bl	800231c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <ILI9341_Fill_Screen+0x44>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <ILI9341_Fill_Screen+0x48>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	461a      	mov	r2, r3
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff44 	bl	80026c8 <ILI9341_Draw_Colour_Burst>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000006 	.word	0x20000006
 800284c:	20000004 	.word	0x20000004

08002850 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
 800285a:	460b      	mov	r3, r1
 800285c:	80bb      	strh	r3, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <ILI9341_Draw_Pixel+0x1a4>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	429a      	cmp	r2, r3
 800286c:	f080 80be 	bcs.w	80029ec <ILI9341_Draw_Pixel+0x19c>
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <ILI9341_Draw_Pixel+0x1a8>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	88ba      	ldrh	r2, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	f080 80b7 	bcs.w	80029ec <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002884:	485d      	ldr	r0, [pc, #372]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002886:	f000 fd81 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002890:	485a      	ldr	r0, [pc, #360]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002892:	f000 fd7b 	bl	800338c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8002896:	202a      	movs	r0, #42	; 0x2a
 8002898:	f7ff fcea 	bl	8002270 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028a2:	4856      	ldr	r0, [pc, #344]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80028a4:	f000 fd72 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ae:	4853      	ldr	r0, [pc, #332]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80028b0:	f000 fd6c 	bl	800338c <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ba:	4850      	ldr	r0, [pc, #320]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80028bc:	f000 fd66 	bl	800338c <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	753b      	strb	r3, [r7, #20]
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	3301      	adds	r3, #1
 80028d4:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 80028e2:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80028e4:	f107 0114 	add.w	r1, r7, #20
 80028e8:	2301      	movs	r3, #1
 80028ea:	2204      	movs	r2, #4
 80028ec:	4844      	ldr	r0, [pc, #272]	; (8002a00 <ILI9341_Draw_Pixel+0x1b0>)
 80028ee:	f001 ff98 	bl	8004822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f8:	4840      	ldr	r0, [pc, #256]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80028fa:	f000 fd47 	bl	800338c <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002904:	483d      	ldr	r0, [pc, #244]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002906:	f000 fd41 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002910:	483a      	ldr	r0, [pc, #232]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002912:	f000 fd3b 	bl	800338c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8002916:	202b      	movs	r0, #43	; 0x2b
 8002918:	f7ff fcaa 	bl	8002270 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002922:	4836      	ldr	r0, [pc, #216]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002924:	f000 fd32 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800292e:	4833      	ldr	r0, [pc, #204]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002930:	f000 fd2c 	bl	800338c <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293a:	4830      	ldr	r0, [pc, #192]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 800293c:	f000 fd26 	bl	800338c <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 8002940:	88bb      	ldrh	r3, [r7, #4]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29b      	uxth	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	743b      	strb	r3, [r7, #16]
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	3301      	adds	r3, #1
 8002954:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 8002956:	b2db      	uxtb	r3, r3
 8002958:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 8002962:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002964:	f107 0110 	add.w	r1, r7, #16
 8002968:	2301      	movs	r3, #1
 800296a:	2204      	movs	r2, #4
 800296c:	4824      	ldr	r0, [pc, #144]	; (8002a00 <ILI9341_Draw_Pixel+0x1b0>)
 800296e:	f001 ff58 	bl	8004822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002978:	4820      	ldr	r0, [pc, #128]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 800297a:	f000 fd07 	bl	800338c <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002984:	481d      	ldr	r0, [pc, #116]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002986:	f000 fd01 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002990:	481a      	ldr	r0, [pc, #104]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 8002992:	f000 fcfb 	bl	800338c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8002996:	202c      	movs	r0, #44	; 0x2c
 8002998:	f7ff fc6a 	bl	8002270 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a2:	4816      	ldr	r0, [pc, #88]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80029a4:	f000 fcf2 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029a8:	2201      	movs	r2, #1
 80029aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ae:	4813      	ldr	r0, [pc, #76]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80029b0:	f000 fcec 	bl	800338c <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80029bc:	f000 fce6 	bl	800338c <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	733b      	strb	r3, [r7, #12]
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80029d0:	f107 010c 	add.w	r1, r7, #12
 80029d4:	2301      	movs	r3, #1
 80029d6:	2202      	movs	r2, #2
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <ILI9341_Draw_Pixel+0x1b0>)
 80029da:	f001 ff22 	bl	8004822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e4:	4805      	ldr	r0, [pc, #20]	; (80029fc <ILI9341_Draw_Pixel+0x1ac>)
 80029e6:	f000 fcd1 	bl	800338c <HAL_GPIO_WritePin>
 80029ea:	e000      	b.n	80029ee <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 80029ec:	bf00      	nop

}
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000006 	.word	0x20000006
 80029f8:	20000004 	.word	0x20000004
 80029fc:	40020800 	.word	0x40020800
 8002a00:	20000204 	.word	0x20000204

08002a04 <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	80fb      	strh	r3, [r7, #6]
 8002a16:	4603      	mov	r3, r0
 8002a18:	80bb      	strh	r3, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <ILI9341_Draw_Rectangle+0xb0>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d23d      	bcs.n	8002aaa <ILI9341_Draw_Rectangle+0xa6>
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <ILI9341_Draw_Rectangle+0xb4>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	88ba      	ldrh	r2, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d237      	bcs.n	8002aaa <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <ILI9341_Draw_Rectangle+0xb0>)
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	b292      	uxth	r2, r2
 8002a46:	4293      	cmp	r3, r2
 8002a48:	dd05      	ble.n	8002a56 <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <ILI9341_Draw_Rectangle+0xb0>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8002a56:	88ba      	ldrh	r2, [r7, #4]
 8002a58:	883b      	ldrh	r3, [r7, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <ILI9341_Draw_Rectangle+0xb4>)
 8002a5e:	8812      	ldrh	r2, [r2, #0]
 8002a60:	b292      	uxth	r2, r2
 8002a62:	4293      	cmp	r3, r2
 8002a64:	dd05      	ble.n	8002a72 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <ILI9341_Draw_Rectangle+0xb4>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	4413      	add	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29c      	uxth	r4, r3
 8002a7e:	88ba      	ldrh	r2, [r7, #4]
 8002a80:	883b      	ldrh	r3, [r7, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	88b9      	ldrh	r1, [r7, #4]
 8002a8c:	88f8      	ldrh	r0, [r7, #6]
 8002a8e:	4622      	mov	r2, r4
 8002a90:	f7ff fc44 	bl	800231c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8002a94:	883b      	ldrh	r3, [r7, #0]
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	8b3b      	ldrh	r3, [r7, #24]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fe10 	bl	80026c8 <ILI9341_Draw_Colour_Burst>
 8002aa8:	e000      	b.n	8002aac <ILI9341_Draw_Rectangle+0xa8>
		return;
 8002aaa:	bf00      	nop
}
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000006 	.word	0x20000006
 8002ab8:	20000004 	.word	0x20000004

08002abc <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 8002aca:	e019      	b.n	8002b00 <TP_Read+0x44>
	{
		value <<= 1;
 8002acc:	88bb      	ldrh	r3, [r7, #4]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	2108      	movs	r1, #8
 8002ad6:	480e      	ldr	r0, [pc, #56]	; (8002b10 <TP_Read+0x54>)
 8002ad8:	f000 fc58 	bl	800338c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2108      	movs	r1, #8
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <TP_Read+0x54>)
 8002ae2:	f000 fc53 	bl	800338c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <TP_Read+0x54>)
 8002aea:	f000 fc37 	bl	800335c <HAL_GPIO_ReadPin>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <TP_Read+0x3e>
		{
			value++;
 8002af4:	88bb      	ldrh	r3, [r7, #4]
 8002af6:	3301      	adds	r3, #1
 8002af8:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e2      	bne.n	8002acc <TP_Read+0x10>
	};

	return value;
 8002b06:	88bb      	ldrh	r3, [r7, #4]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000

08002b14 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2108      	movs	r1, #8
 8002b26:	4815      	ldr	r0, [pc, #84]	; (8002b7c <TP_Write+0x68>)
 8002b28:	f000 fc30 	bl	800338c <HAL_GPIO_WritePin>

	while (i > 0)
 8002b2c:	e01e      	b.n	8002b6c <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	da05      	bge.n	8002b42 <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	2120      	movs	r1, #32
 8002b3a:	4810      	ldr	r0, [pc, #64]	; (8002b7c <TP_Write+0x68>)
 8002b3c:	f000 fc26 	bl	800338c <HAL_GPIO_WritePin>
 8002b40:	e004      	b.n	8002b4c <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2120      	movs	r1, #32
 8002b46:	480d      	ldr	r0, [pc, #52]	; (8002b7c <TP_Write+0x68>)
 8002b48:	f000 fc20 	bl	800338c <HAL_GPIO_WritePin>
		}

		value <<= 1;
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002b52:	2201      	movs	r2, #1
 8002b54:	2108      	movs	r1, #8
 8002b56:	4809      	ldr	r0, [pc, #36]	; (8002b7c <TP_Write+0x68>)
 8002b58:	f000 fc18 	bl	800338c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2108      	movs	r1, #8
 8002b60:	4806      	ldr	r0, [pc, #24]	; (8002b7c <TP_Write+0x68>)
 8002b62:	f000 fc13 	bl	800338c <HAL_GPIO_WritePin>
		i--;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1dd      	bne.n	8002b2e <TP_Write+0x1a>
	};
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2108      	movs	r1, #8
 8002b8c:	485a      	ldr	r0, [pc, #360]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002b8e:	f000 fbfd 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2120      	movs	r1, #32
 8002b96:	4858      	ldr	r0, [pc, #352]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002b98:	f000 fbf8 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2140      	movs	r1, #64	; 0x40
 8002ba0:	4855      	ldr	r0, [pc, #340]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002ba2:	f000 fbf3 	bl	800338c <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb6:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2140      	movs	r1, #64	; 0x40
 8002bc0:	484d      	ldr	r0, [pc, #308]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002bc2:	f000 fbe3 	bl	800338c <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002bc6:	e023      	b.n	8002c10 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 8002bc8:	2090      	movs	r0, #144	; 0x90
 8002bca:	f7ff ffa3 	bl	8002b14 <TP_Write>

		rawy = TP_Read();
 8002bce:	f7ff ff75 	bl	8002abc <TP_Read>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	4413      	add	r3, r2
 8002bdc:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4413      	add	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 8002be6:	20d0      	movs	r0, #208	; 0xd0
 8002be8:	f7ff ff94 	bl	8002b14 <TP_Write>
		rawx = TP_Read();
 8002bec:	f7ff ff66 	bl	8002abc <TP_Read>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 8002bf4:	89bb      	ldrh	r3, [r7, #12]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4413      	add	r3, r2
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 8002bfc:	89bb      	ldrh	r3, [r7, #12]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	61fb      	str	r3, [r7, #28]
		samples--;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
		counted_samples++;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <TP_Read_Coordinates+0xa4>
 8002c16:	2104      	movs	r1, #4
 8002c18:	4837      	ldr	r0, [pc, #220]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002c1a:	f000 fb9f 	bl	800335c <HAL_GPIO_ReadPin>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0d1      	beq.n	8002bc8 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002c24:	2201      	movs	r2, #1
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	4833      	ldr	r0, [pc, #204]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002c2a:	f000 fbaf 	bl	800338c <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c34:	d14d      	bne.n	8002cd2 <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002c36:	2104      	movs	r1, #4
 8002c38:	482f      	ldr	r0, [pc, #188]	; (8002cf8 <TP_Read_Coordinates+0x178>)
 8002c3a:	f000 fb8f 	bl	800335c <HAL_GPIO_ReadPin>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d146      	bne.n	8002cd2 <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8002c60:	89bb      	ldrh	r3, [r7, #12]
 8002c62:	425b      	negs	r3, r3
 8002c64:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	425b      	negs	r3, r3
 8002c6a:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8002c6c:	89ba      	ldrh	r2, [r7, #12]
 8002c6e:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <TP_Read_Coordinates+0x17c>)
 8002c70:	fba3 1302 	umull	r1, r3, r3, r2
 8002c74:	1ad2      	subs	r2, r2, r3
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c8a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002cf0 <TP_Read_Coordinates+0x170>
 8002c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8002c92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c96:	ee17 3a90 	vmov	r3, s15
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8002ca0:	89fb      	ldrh	r3, [r7, #14]
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <TP_Read_Coordinates+0x180>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	09db      	lsrs	r3, r3, #7
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b0f      	subs	r3, #15
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cb6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002cf0 <TP_Read_Coordinates+0x170>
 8002cba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cc6:	ee17 2a90 	vmov	r2, s15
 8002cca:	b292      	uxth	r2, r2
 8002ccc:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e007      	b.n	8002ce2 <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3302      	adds	r3, #2
 8002cdc:	2200      	movs	r2, #0
 8002cde:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 8002ce0:	2300      	movs	r3, #0
	}
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3728      	adds	r7, #40	; 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	f3af 8000 	nop.w
 8002cf0:	28f5c28f 	.word	0x28f5c28f
 8002cf4:	3ff28f5c 	.word	0x3ff28f5c
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	e01e01e1 	.word	0xe01e01e1
 8002d00:	a0a0a0a1 	.word	0xa0a0a0a1

08002d04 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002d08:	2104      	movs	r1, #4
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <TP_Touchpad_Pressed+0x1c>)
 8002d0c:	f000 fb26 	bl	800335c <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002d1a:	2300      	movs	r3, #0
	}
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_Init+0x28>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <HAL_Init+0x28>)
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d34:	2003      	movs	r0, #3
 8002d36:	f000 f931 	bl	8002f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f000 f808 	bl	8002d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d40:	f7fe fea6 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023c00 	.word	0x40023c00

08002d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_InitTick+0x54>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_InitTick+0x58>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f93b 	bl	8002fea <HAL_SYSTICK_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00e      	b.n	8002d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d80a      	bhi.n	8002d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d84:	2200      	movs	r2, #0
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f000 f911 	bl	8002fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <HAL_InitTick+0x5c>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000000 	.word	0x20000000
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20000008 	.word	0x20000008

08002db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x20>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_IncTick+0x24>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_IncTick+0x24>)
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c
 8002dd4:	20000340 	.word	0x20000340

08002dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return uwTick;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_GetTick+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000340 	.word	0x20000340

08002df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff ffee 	bl	8002dd8 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d005      	beq.n	8002e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_Delay+0x44>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e16:	bf00      	nop
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d8f7      	bhi.n	8002e18 <HAL_Delay+0x28>
  {
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c

08002e38 <__NVIC_SetPriorityGrouping>:
	{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]
		reg_value = SCB->AIRCR; /* read old register configuration    */
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <__NVIC_SetPriorityGrouping+0x40>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	431a      	orrs	r2, r3
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <__NVIC_SetPriorityGrouping+0x40>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
	}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00
 8002e7c:	05fa0000 	.word	0x05fa0000

08002e80 <__NVIC_GetPriorityGrouping>:
	{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <__NVIC_GetPriorityGrouping+0x18>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 0307 	and.w	r3, r3, #7
	}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_SetPriority>:
	{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0)
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db0a      	blt.n	8002ec6 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	490c      	ldr	r1, [pc, #48]	; (8002ee8 <__NVIC_SetPriority+0x4c>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
 8002ec4:	e00a      	b.n	8002edc <__NVIC_SetPriority+0x40>
			SCB->SHPR[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4908      	ldr	r1, [pc, #32]	; (8002eec <__NVIC_SetPriority+0x50>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3b04      	subs	r3, #4
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	440b      	add	r3, r1
 8002eda:	761a      	strb	r2, [r3, #24]
	}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000e100 	.word	0xe000e100
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <NVIC_EncodePriority>:
	{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	61fb      	str	r3, [r7, #28]
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	bf28      	it	cs
 8002f0e:	2304      	movcs	r3, #4
 8002f10:	61bb      	str	r3, [r7, #24]
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3304      	adds	r3, #4
						(uint32_t) 0UL :
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d902      	bls.n	8002f20 <NVIC_EncodePriority+0x30>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3b03      	subs	r3, #3
 8002f1e:	e000      	b.n	8002f22 <NVIC_EncodePriority+0x32>
 8002f20:	2300      	movs	r3, #0
		SubPriorityBits =
 8002f22:	617b      	str	r3, [r7, #20]
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43d9      	mvns	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	400b      	ands	r3, r1
 8002f48:	4313      	orrs	r3, r2
	}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f68:	d301      	bcc.n	8002f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00f      	b.n	8002f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <SysTick_Config+0x40>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f76:	210f      	movs	r1, #15
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f7ff ff8e 	bl	8002e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <SysTick_Config+0x40>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f86:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <SysTick_Config+0x40>)
 8002f88:	2207      	movs	r2, #7
 8002f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	e000e010 	.word	0xe000e010

08002f9c <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff47 	bl	8002e38 <__NVIC_SetPriorityGrouping>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_SetPriority>:
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002fc4:	f7ff ff5c 	bl	8002e80 <__NVIC_GetPriorityGrouping>
 8002fc8:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff8e 	bl	8002ef0 <NVIC_EncodePriority>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5d 	bl	8002e9c <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffb0 	bl	8002f58 <SysTick_Config>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e175      	b.n	8003310 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8164 	bne.w	800330a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d005      	beq.n	800305a <HAL_GPIO_Init+0x56>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d130      	bne.n	80030bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d017      	beq.n	80030f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d123      	bne.n	800314c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80be 	beq.w	800330a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_GPIO_Init+0x324>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	4a65      	ldr	r2, [pc, #404]	; (8003328 <HAL_GPIO_Init+0x324>)
 8003194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003198:	6453      	str	r3, [r2, #68]	; 0x44
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_GPIO_Init+0x324>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031a6:	4a61      	ldr	r2, [pc, #388]	; (800332c <HAL_GPIO_Init+0x328>)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a58      	ldr	r2, [pc, #352]	; (8003330 <HAL_GPIO_Init+0x32c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d037      	beq.n	8003242 <HAL_GPIO_Init+0x23e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x330>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_GPIO_Init+0x23a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a56      	ldr	r2, [pc, #344]	; (8003338 <HAL_GPIO_Init+0x334>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x236>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a55      	ldr	r2, [pc, #340]	; (800333c <HAL_GPIO_Init+0x338>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x232>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_GPIO_Init+0x33c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x22e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a53      	ldr	r2, [pc, #332]	; (8003344 <HAL_GPIO_Init+0x340>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x22a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_GPIO_Init+0x344>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x226>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a51      	ldr	r2, [pc, #324]	; (800334c <HAL_GPIO_Init+0x348>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x222>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a50      	ldr	r2, [pc, #320]	; (8003350 <HAL_GPIO_Init+0x34c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x21e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4f      	ldr	r2, [pc, #316]	; (8003354 <HAL_GPIO_Init+0x350>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x21a>
 800321a:	2309      	movs	r3, #9
 800321c:	e012      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800321e:	230a      	movs	r3, #10
 8003220:	e010      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003222:	2308      	movs	r3, #8
 8003224:	e00e      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003226:	2307      	movs	r3, #7
 8003228:	e00c      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800322a:	2306      	movs	r3, #6
 800322c:	e00a      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800322e:	2305      	movs	r3, #5
 8003230:	e008      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003232:	2304      	movs	r3, #4
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003236:	2303      	movs	r3, #3
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003242:	2300      	movs	r3, #0
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003254:	4935      	ldr	r1, [pc, #212]	; (800332c <HAL_GPIO_Init+0x328>)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <HAL_GPIO_Init+0x354>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_GPIO_Init+0x354>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <HAL_GPIO_Init+0x354>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032da:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <HAL_GPIO_Init+0x354>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	f67f ae86 	bls.w	8003024 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40013800 	.word	0x40013800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40020800 	.word	0x40020800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40021400 	.word	0x40021400
 8003348:	40021800 	.word	0x40021800
 800334c:	40021c00 	.word	0x40021c00
 8003350:	40022000 	.word	0x40022000
 8003354:	40022400 	.word	0x40022400
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033a8:	e003      	b.n	80033b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_PWR_EnableBkUpAccess>:
 * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 *         Backup Domain Access should be kept enabled.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
	/* Enable access to RTC and backup registers */
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40007000 	.word	0x40007000

080033e0 <HAL_PWREx_EnableOverDrive>:
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
	uint32_t tickstart = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]

	__HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_PWREx_EnableOverDrive+0x98>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	683b      	ldr	r3, [r7, #0]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 800340e:	f7ff fce3 	bl	8002dd8 <HAL_GetTick>
 8003412:	6078      	str	r0, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003414:	e009      	b.n	800342a <HAL_PWREx_EnableOverDrive+0x4a>
	{
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003416:	f7ff fcdf 	bl	8002dd8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003424:	d901      	bls.n	800342a <HAL_PWREx_EnableOverDrive+0x4a>
		{
			return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e022      	b.n	8003470 <HAL_PWREx_EnableOverDrive+0x90>
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d1ee      	bne.n	8003416 <HAL_PWREx_EnableOverDrive+0x36>
		}
	}

	/* Enable the Over-drive switch */
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003442:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8003444:	f7ff fcc8 	bl	8002dd8 <HAL_GetTick>
 8003448:	6078      	str	r0, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800344a:	e009      	b.n	8003460 <HAL_PWREx_EnableOverDrive+0x80>
	{
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800344c:	f7ff fcc4 	bl	8002dd8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800345a:	d901      	bls.n	8003460 <HAL_PWREx_EnableOverDrive+0x80>
		{
			return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e007      	b.n	8003470 <HAL_PWREx_EnableOverDrive+0x90>
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346c:	d1ee      	bne.n	800344c <HAL_PWREx_EnableOverDrive+0x6c>
		}
	}
	return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_RCC_OscConfig>:
 *         supported by this function. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x16>
	{
		return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e29b      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8087 	beq.w	80035b2 <HAL_RCC_OscConfig+0x132>
			== RCC_OSCILLATORTYPE_HSE)
	{
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a4:	4b96      	ldr	r3, [pc, #600]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d00c      	beq.n	80034ca <HAL_RCC_OscConfig+0x4a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80034b0:	4b93      	ldr	r3, [pc, #588]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d112      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80034bc:	4b90      	ldr	r3, [pc, #576]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d10b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62>
								== RCC_PLLCFGR_PLLSRC_HSE)))
		{
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d06c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x130>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d168      	bne.n	80035b0 <HAL_RCC_OscConfig+0x130>
			{
				return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e275      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			}
		}
		else
		{
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x7a>
 80034ec:	4b84      	ldr	r3, [pc, #528]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a83      	ldr	r2, [pc, #524]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e02e      	b.n	8003558 <HAL_RCC_OscConfig+0xd8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x9c>
 8003502:	4b7f      	ldr	r3, [pc, #508]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7e      	ldr	r2, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7b      	ldr	r2, [pc, #492]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xd8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0xc0>
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b73      	ldr	r3, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a72      	ldr	r2, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xd8>
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003556:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0x108>
			{
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003560:	f7ff fc3a 	bl	8002dd8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xfa>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7ff fc36 	bl	8002dd8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xfa>
					{
						return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e229      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xe8>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x132>
				}
			}
			else
			{
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003588:	f7ff fc26 	bl	8002dd8 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x122>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7ff fc22 	bl	8002dd8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x122>
					{
						return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e215      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x110>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x132>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b0:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d069      	beq.n	8003692 <HAL_RCC_OscConfig+0x212>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x162>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80035ca:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11c      	bne.n	8003610 <HAL_RCC_OscConfig+0x190>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_RCC_OscConfig+0x190>
								== RCC_PLLCFGR_PLLSRC_HSI)))
		{
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x17a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x17a>
			{
				return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1e9      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			}
			/* Otherwise, just the calibration is allowed */
			else
			{
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	493d      	ldr	r1, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	e040      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
			}
		}
		else
		{
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d023      	beq.n	8003660 <HAL_RCC_OscConfig+0x1e0>
			{
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8003618:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a38      	ldr	r2, [pc, #224]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003624:	f7ff fbd8 	bl	8002dd8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1be>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362c:	f7ff fbd4 	bl	8002dd8 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1be>
					{
						return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x1ac>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800364a:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4929      	ldr	r1, [pc, #164]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
 800365e:	e018      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			}
			else
			{
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800366c:	f7ff fbb4 	bl	8002dd8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x206>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003674:	f7ff fbb0 	bl	8002dd8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x206>
					{
						return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1a3      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1f4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d038      	beq.n	8003710 <HAL_RCC_OscConfig+0x290>
	{
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d019      	beq.n	80036da <HAL_RCC_OscConfig+0x25a>
		{
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80036b2:	f7ff fb91 	bl	8002dd8 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x24c>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7ff fb8d 	bl	8002dd8 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x24c>
				{
					return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e180      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x23a>
 80036d8:	e01a      	b.n	8003710 <HAL_RCC_OscConfig+0x290>
			}
		}
		else
		{
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80036e6:	f7ff fb77 	bl	8002dd8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x284>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7ff fb73 	bl	8002dd8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d903      	bls.n	8003704 <HAL_RCC_OscConfig+0x284>
				{
					return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e166      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
 8003700:	40023800 	.word	0x40023800
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x26e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a4 	beq.w	8003866 <HAL_RCC_OscConfig+0x3e6>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4b8c      	ldr	r3, [pc, #560]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <HAL_RCC_OscConfig+0x2c6>
		{
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a88      	ldr	r2, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b86      	ldr	r3, [pc, #536]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	4b83      	ldr	r3, [pc, #524]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d118      	bne.n	8003784 <HAL_RCC_OscConfig+0x304>
		{
			/* Enable write access to Backup domain */
			PWR->CR1 |= PWR_CR1_DBP;
 8003752:	4b80      	ldr	r3, [pc, #512]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7f      	ldr	r2, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800375e:	f7ff fb3b 	bl	8002dd8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x2f8>
			{
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003766:	f7ff fb37 	bl	8002dd8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x2f8>
				{
					return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e12a      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x2e6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x31a>
 800378c:	4b70      	ldr	r3, [pc, #448]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a6f      	ldr	r2, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	e02d      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x33c>
 80037a2:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	4b68      	ldr	r3, [pc, #416]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	e01c      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_OscConfig+0x35e>
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a61      	ldr	r2, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e00b      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
 80037de:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a5b      	ldr	r2, [pc, #364]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a58      	ldr	r2, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d015      	beq.n	800382a <HAL_RCC_OscConfig+0x3aa>
		{
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80037fe:	f7ff faeb 	bl	8002dd8 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x39c>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7ff fae7 	bl	8002dd8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x39c>
				{
					return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0d8      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ee      	beq.n	8003806 <HAL_RCC_OscConfig+0x386>
 8003828:	e014      	b.n	8003854 <HAL_RCC_OscConfig+0x3d4>
			}
		}
		else
		{
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800382a:	f7ff fad5 	bl	8002dd8 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x3c8>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7ff fad1 	bl	8002dd8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x3c8>
				{
					return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0c2      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_OscConfig+0x3b2>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET)
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d105      	bne.n	8003866 <HAL_RCC_OscConfig+0x3e6>
		{
			__HAL_RCC_PWR_CLK_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80ae 	beq.w	80039cc <HAL_RCC_OscConfig+0x54c>
	{
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d06d      	beq.n	8003958 <HAL_RCC_OscConfig+0x4d8>
		{
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d14b      	bne.n	800391c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a31      	ldr	r2, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003890:	f7ff faa2 	bl	8002dd8 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x42a>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7ff fa9e 	bl	8002dd8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x42a>
					{
						return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e091      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x418>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80038f4:	f7ff fa70 	bl	8002dd8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x48e>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7ff fa6c 	bl	8002dd8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x48e>
					{
						return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e05f      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x47c>
 800391a:	e057      	b.n	80039cc <HAL_RCC_OscConfig+0x54c>
				}
			}
			else
			{
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003928:	f7ff fa56 	bl	8002dd8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x4c2>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7ff fa52 	bl	8002dd8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x4c2>
					{
						return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x4b0>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x54c>
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000
			}
		}
		else
		{
			/* Do not return HAL_ERROR if request repeats the current configuration */
			pll_config = RCC->PLLCFGR;
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x558>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
							!= (RCC_OscInitStruct->PLL.PLLN
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
									<< RCC_PLLCFGR_PLLN_Pos))
 800398e:	0192      	lsls	r2, r2, #6
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003990:	4293      	cmp	r3, r2
 8003992:	d119      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLP_Pos))
 80039a2:	041b      	lsls	r3, r3, #16
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
									<< RCC_PLLCFGR_PLLQ_Pos))
 80039b2:	061b      	lsls	r3, r3, #24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
									<< RCC_PLLCFGR_PLLR_Pos)))
 80039c2:	071b      	lsls	r3, r3, #28
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
			{
				return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
			}
		}
	}
	return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x18>
	{
		return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0d0      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d910      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x48>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 020f 	bic.w	r2, r3, #15
 8003a0a:	4965      	ldr	r1, [pc, #404]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x48>
		{
			return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x96>
			== RCC_CLOCKTYPE_HCLK)
	{
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x6c>
				== RCC_CLOCKTYPE_PCLK1)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x84>
				== RCC_CLOCKTYPE_PCLK2)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d040      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x124>
			== RCC_CLOCKTYPE_SYSCLK)
	{
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xba>
		{
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d115      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
			{
				return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xd2>
		{
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
			{
				return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e073      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
		}
		/* HSI is selected as System Clock Source */
		else
		{
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
			{
				return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06b      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4936      	ldr	r1, [pc, #216]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8003ad0:	f7ff f982 	bl	8002dd8 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x112>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
		{
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7ff f97e 	bl	8002dd8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x112>
			{
				return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e053      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003aee:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xfc>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d210      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x154>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x154>
		{
			return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x172>
			== RCC_CLOCKTYPE_PCLK1)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x192>
			== RCC_CLOCKTYPE_PCLK2)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1d0>)
 8003b88:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1d4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f8de 	bl	8002d50 <HAL_InitTick>

	return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	0800a328 	.word	0x0800a328
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <HAL_RCC_GetSysClockFreq>:
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b094      	sub	sp, #80	; 0x50
 8003bba:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sysclockfreq = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bcc:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	f200 80e1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3a>
 8003be6:	e0db      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
	{
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8003be8:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003bec:	e0db      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8003bee:	4b73      	ldr	r3, [pc, #460]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	647b      	str	r3, [r7, #68]	; 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x11e>
		{
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003c0e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003c10:	2200      	movs	r2, #0
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
 8003c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	0159      	lsls	r1, r3, #5
 8003c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c38:	0150      	lsls	r0, r2, #5
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4621      	mov	r1, r4
 8003c40:	1a51      	subs	r1, r2, r1
 8003c42:	6139      	str	r1, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c62:	4651      	mov	r1, sl
 8003c64:	018a      	lsls	r2, r1, #6
 8003c66:	4651      	mov	r1, sl
 8003c68:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c86:	4690      	mov	r8, r2
 8003c88:	4699      	mov	r9, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	eb18 0303 	adds.w	r3, r8, r3
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	462b      	mov	r3, r5
 8003c94:	eb49 0303 	adc.w	r3, r9, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	024b      	lsls	r3, r1, #9
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	024a      	lsls	r2, r1, #9
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cc4:	f7fc fcd0 	bl	8000668 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003ccc:	4613      	mov	r3, r2
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	e058      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1d0>
		}
		else
		{
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003cd2:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003cd6:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfe:	0150      	lsls	r0, r2, #5
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4641      	mov	r1, r8
 8003d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d24:	ebb2 040a 	subs.w	r4, r2, sl
 8003d28:	eb63 050b 	sbc.w	r5, r3, fp
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	00eb      	lsls	r3, r5, #3
 8003d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	461d      	mov	r5, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	18e3      	adds	r3, r4, r3
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb45 0303 	adc.w	r3, r5, r3
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	028b      	lsls	r3, r1, #10
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d64:	4621      	mov	r1, r4
 8003d66:	028a      	lsls	r2, r1, #10
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	61fa      	str	r2, [r7, #28]
 8003d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d78:	f7fc fc76 	bl	8000668 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003d80:	4613      	mov	r3, r2
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
						+ 1) * 2);
 8003d8e:	3301      	adds	r3, #1
		pllp =
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40

		sysclockfreq = pllvco / pllp;
 8003d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default:
	{
		sysclockfreq = HSI_VALUE;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003da2:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003da4:	bf00      	nop
	}
	}
	return sysclockfreq;
 8003da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3750      	adds	r7, #80	; 0x50
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003ddc:	f7ff fff0 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0a9b      	lsrs	r3, r3, #10
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4903      	ldr	r1, [pc, #12]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	0800a338 	.word	0x0800a338

08003e00 <HAL_RCC_GetPCLK2Freq>:
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003e04:	f7ff ffdc 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0b5b      	lsrs	r3, r3, #13
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	0800a338 	.word	0x0800a338

08003e28 <HAL_RCCEx_PeriphCLKConfig>:
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg0 = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg1 = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
	uint32_t plli2sused = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
	uint32_t pllsaiused = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*----------------------------------- I2S configuration ----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d012      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

		/* Configure I2S Clock source */
		__HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a68      	ldr	r2, [pc, #416]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e5a:	6093      	str	r3, [r2, #8]
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	4964      	ldr	r1, [pc, #400]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]

		/* Enable the PLLI2S when it's used as clock source for I2S */
		if (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
		{
			plli2sused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
		}
	}

	/*------------------------------------ SAI1 configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d017      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
	{
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

		/* Configure SAI1 Clock source */
		__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	4959      	ldr	r1, [pc, #356]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		/* Enable the PLLI2S when it's used as clock source for SAI */
		if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
		{
			plli2sused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
		}
		/* Enable the PLLSAI when it's used as clock source for SAI */
		if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
		{
			pllsaiused = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61bb      	str	r3, [r7, #24]
		}
	}

	/*------------------------------------ SAI2 configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc6>
	{
		/* Check the parameters */
		assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

		/* Configure SAI2 Clock source */
		__HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ebe:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	494a      	ldr	r1, [pc, #296]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		/* Enable the PLLI2S when it's used as clock source for SAI */
		if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xba>
		{
			plli2sused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
		}
		/* Enable the PLLSAI when it's used as clock source for SAI */
		if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc6>
		{
			pllsaiused = 1;
 8003eea:	2301      	movs	r3, #1
 8003eec:	61bb      	str	r3, [r7, #24]
		}
	}

	/*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd6>
			== RCC_PERIPHCLK_SPDIFRX)
	{
		plli2sused = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
	}

	/*------------------------------------ RTC configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 808b 	beq.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
	{
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8003f0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	4a39      	ldr	r2, [pc, #228]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
 8003f18:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]

		/* Enable write access to Backup domain */
		PWR->CR1 |= PWR_CR1_DBP;
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2e:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8003f30:	f7fe ff52 	bl	8002dd8 <HAL_GetTick>
 8003f34:	6178      	str	r0, [r7, #20]

		/* Wait for Backup domain Write protection disable */
		while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x122>
		{
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f38:	f7fe ff4e 	bl	8002dd8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x122>
			{
				return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e38f      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x842>
		while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f4a:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified */
		tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f56:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	613b      	str	r3, [r7, #16]

		if ((tmpreg0 != 0x00000000U)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d035      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				&& (tmpreg0
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
				&& (tmpreg0
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d02e      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		{
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	613b      	str	r3, [r7, #16]

			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
			__HAL_RCC_BACKUPRESET_RELEASE();
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70

			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg0;
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d114      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
			{
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003fa8:	f7fe ff16 	bl	8002dd8 <HAL_GetTick>
 8003fac:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
				{
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe ff12 	bl	8002dd8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
					{
						return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e351      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x842>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ee      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fde:	d111      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fee:	400b      	ands	r3, r1
 8003ff0:	4901      	ldr	r1, [pc, #4]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40007000 	.word	0x40007000
 8004000:	0ffffcff 	.word	0x0ffffcff
 8004004:	4bac      	ldr	r3, [pc, #688]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4aab      	ldr	r2, [pc, #684]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800400e:	6093      	str	r3, [r2, #8]
 8004010:	4ba9      	ldr	r3, [pc, #676]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	49a6      	ldr	r1, [pc, #664]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	4313      	orrs	r3, r2
 8004020:	670b      	str	r3, [r1, #112]	; 0x70
	}

	/*------------------------------------ TIM configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d010      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x228>
	{
		/* Check the parameters */
		assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

		/* Configure Timer Prescaler */
		__HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800402e:	4ba2      	ldr	r3, [pc, #648]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004034:	4aa0      	ldr	r2, [pc, #640]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800403e:	4b9e      	ldr	r3, [pc, #632]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004040:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	499b      	ldr	r1, [pc, #620]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}

	/*-------------------------------------- I2C1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x24a>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800405c:	4b96      	ldr	r3, [pc, #600]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406a:	4993      	ldr	r1, [pc, #588]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C2 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800407e:	4b8e      	ldr	r3, [pc, #568]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800408c:	498a      	ldr	r1, [pc, #552]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C3 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a0:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ae:	4982      	ldr	r1, [pc, #520]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C4 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
	{
		/* Check the parameters */
		assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

		/* Configure the I2C4 clock source */
		__HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c2:	4b7d      	ldr	r3, [pc, #500]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4979      	ldr	r1, [pc, #484]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e4:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	4971      	ldr	r1, [pc, #452]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART2 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004106:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f023 020c 	bic.w	r2, r3, #12
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	4968      	ldr	r1, [pc, #416]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART3 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x316>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004128:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	4960      	ldr	r1, [pc, #384]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART4 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x338>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800414a:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	4957      	ldr	r1, [pc, #348]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART5 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x35a>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800416c:	4b52      	ldr	r3, [pc, #328]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	494f      	ldr	r1, [pc, #316]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART6 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

		/* Configure the USART6 clock source */
		__HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800418e:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4946      	ldr	r1, [pc, #280]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART7 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

		/* Configure the UART7 clock source */
		__HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041b0:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	493e      	ldr	r1, [pc, #248]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART8 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
	{
		/* Check the parameters */
		assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

		/* Configure the UART8 clock source */
		__HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041d2:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	4935      	ldr	r1, [pc, #212]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*--------------------------------------- CEC Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
	{
		/* Check the parameters */
		assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004202:	492d      	ldr	r1, [pc, #180]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- CK48 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d011      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x412>
	{
		/* Check the parameters */
		assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

		/* Configure the CLK48 source */
		__HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004216:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004224:	4924      	ldr	r1, [pc, #144]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

		/* Enable the PLLSAI when it's used as clock source for CK48 */
		if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x412>
		{
			pllsaiused = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
		}
	}

	/*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x422>
			== RCC_PERIPHCLK_LTDC)
	{
		pllsaiused = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	61bb      	str	r3, [r7, #24]
	}
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

	/*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x444>
	{
		/* Check the parameters */
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

		/* Configure the LTPIM1 clock source */
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	4914      	ldr	r1, [pc, #80]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*------------------------------------- SDMMC1 Configuration ------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x468>
		/* Check the parameters */
		assert_param(
				IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

		/* Configure the SDMMC1 clock source */
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
	/*------------------------------------- SDMMC2 Configuration ------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x494>
		/* Check the parameters */
		assert_param(
				IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

		/* Configure the SDMMC2 clock source */
		__HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ac:	4902      	ldr	r1, [pc, #8]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
	}

	/*------------------------------------- DFSDM1 Configuration -------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

		/* Configure the DFSDM1 interface clock source */
		__HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042c8:	4b8a      	ldr	r3, [pc, #552]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	4986      	ldr	r1, [pc, #536]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}

	/*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

		/* Configure the DFSDM interface clock source */
		__HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042ec:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	497d      	ldr	r1, [pc, #500]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

	/*-------------------------------------- PLLI2S Configuration ---------------------------------*/
	/* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
	if ((plli2sused == 1)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d006      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
			|| ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80d6 	beq.w	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
					== RCC_PERIPHCLK_PLLI2S))
	{
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8004318:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a75      	ldr	r2, [pc, #468]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8004324:	f7fe fd58 	bl	8002dd8 <HAL_GetTick>
 8004328:	6178      	str	r0, [r7, #20]

		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x516>
		{
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800432c:	f7fe fd54 	bl	8002dd8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x516>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e195      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 800433e:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x504>

		/* check for common PLLI2S Parameters */
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

		/*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d021      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x572>
				== RCC_PERIPHCLK_I2S)
				&& (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11d      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x572>
		{
			/* check for Parameters */
			assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

			/* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004364:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 800436c:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004372:	0e1b      	lsrs	r3, r3, #24
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
			/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	4958      	ldr	r1, [pc, #352]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
		}

		/*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
				== RCC_PERIPHCLK_SAI1)
				&& (PeriphClkInit->Sai1ClockSelection
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
						== RCC_SAI1CLKSOURCE_PLLI2S))
				|| ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02e      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
						== RCC_PERIPHCLK_SAI2)
						&& (PeriphClkInit->Sai2ClockSelection
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c4:	d129      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
			assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
			/* Check for PLLI2S/DIVQ parameters */
			assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

			/* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043cc:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80043d4:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043da:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	019a      	lsls	r2, r3, #6
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	493e      	ldr	r1, [pc, #248]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);

			/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
			__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004402:	4b3c      	ldr	r3, [pc, #240]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004408:	f023 021f 	bic.w	r2, r3, #31
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	3b01      	subs	r3, #1
 8004412:	4938      	ldr	r1, [pc, #224]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}

		/*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
		if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01d      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x63a>
		{
			/* check for Parameters */
			assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

			/* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800442c:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 8004434:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800443a:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
			/* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	019a      	lsls	r2, r3, #6
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	4926      	ldr	r1, [pc, #152]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
		}

		/*----------------- In Case of PLLI2S is just selected  -----------------*/
		if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d011      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x66a>
			assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
			/* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	019a      	lsls	r2, r3, #6
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	491a      	ldr	r1, [pc, #104]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SQ,
					PeriphClkInit->PLLI2S.PLLI2SR);
		}

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8004492:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800449c:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 800449e:	f7fe fc9b 	bl	8002dd8 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
		{
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044a6:	f7fe fc97 	bl	8002dd8 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	; 0x64
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0d8      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
		}
	}

	/*-------------------------------------- PLLSAI Configuration ---------------------------------*/
	/* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
	if (pllsaiused == 1)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	f040 80ce 	bne.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x840>
	{
		/* Disable PLLSAI Clock */
		__HAL_RCC_PLLSAI_DISABLE();
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80044d8:	f7fe fc7e 	bl	8002dd8 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]

		/* Wait till PLLSAI is disabled */
		while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044de:	e00b      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
		{
			if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044e0:	f7fe fc7a 	bl	8002dd8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d904      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0bb      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
		while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044f8:	4b5e      	ldr	r3, [pc, #376]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004504:	d0ec      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

		/* Check the PLLSAI division factors */
		assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

		/*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
				== RCC_PERIPHCLK_SAI1)
				&& (PeriphClkInit->Sai1ClockSelection
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x706>
						== RCC_SAI1CLKSOURCE_PLLSAI))
				|| ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d02e      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x75c>
						== RCC_PERIPHCLK_SAI2)
						&& (PeriphClkInit->Sai2ClockSelection
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d12a      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x75c>
			assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
			/* check for PLLSAI/DIVQ Parameter */
			assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

			/* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 800452e:	4b51      	ldr	r3, [pc, #324]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004534:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR)
 800453c:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004542:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR)
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	60fb      	str	r3, [r7, #12]
			/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
			/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg0,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	019a      	lsls	r2, r3, #6
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	061b      	lsls	r3, r3, #24
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	071b      	lsls	r3, r3, #28
 8004562:	4944      	ldr	r1, [pc, #272]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);

			/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
			__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800456a:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004570:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	493d      	ldr	r1, [pc, #244]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}

		/*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
		/* In Case of PLLI2S is selected as source clock for CK48 */
		if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d022      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
				== RCC_PERIPHCLK_CLK48)
				&& (PeriphClkInit->Clk48ClockSelection
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004598:	d11d      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
						== RCC_CLK48SOURCE_PLLSAIP))
		{
			/* check for Parameters */
			assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
			/* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 800459a:	4b36      	ldr	r3, [pc, #216]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045a0:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR)
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045ae:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR)
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]

			/* Configure the PLLSAI division factors */
			/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
			/* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	019a      	lsls	r2, r3, #6
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	431a      	orrs	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	4929      	ldr	r1, [pc, #164]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
		}

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
		/*---------------------------- LTDC configuration -------------------------------*/
		if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d028      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x80c>
		{
			assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
			assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

			/* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045e8:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 80045f0:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045f6:	0c1b      	lsrs	r3, r3, #16
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	60fb      	str	r3, [r7, #12]

			/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
			/* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	019a      	lsls	r2, r3, #6
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	431a      	orrs	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	071b      	lsls	r3, r3, #28
 8004616:	4917      	ldr	r1, [pc, #92]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);

			/* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
			__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4911      	ldr	r1, [pc, #68]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

		/* Enable PLLSAI Clock */
		__HAL_RCC_PLLSAI_ENABLE();
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8004640:	f7fe fbca 	bl	8002dd8 <HAL_GetTick>
 8004644:	6178      	str	r0, [r7, #20]

		/* Wait till PLLSAI is ready */
		while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x832>
		{
			if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004648:	f7fe fbc6 	bl	8002dd8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x832>
			{
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e007      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004666:	d1ef      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x820>
			}
		}
	}
	return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800

08004678 <HAL_RNG_Init>:
 * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
 *                the configuration information for RNG.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	/* Check the RNG handle allocation */
	if (hrng == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RNG_Init+0x12>
	{
		return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e01c      	b.n	80046c4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
	if (hrng->State == HAL_RNG_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_RNG_Init+0x28>
	{
		/* Allocate lock resource and initialize it */
		hrng->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	711a      	strb	r2, [r3, #4]

		/* Init the low level hardware */
		HAL_RNG_MspInit(hrng);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd f942 	bl	8001924 <HAL_RNG_MspInit>
	}
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

	/* Change RNG peripheral state */
	hrng->State = HAL_RNG_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	715a      	strb	r2, [r3, #5]

	/* Enable the RNG Peripheral */
	__HAL_RNG_ENABLE(hrng);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0204 	orr.w	r2, r2, #4
 80046b4:	601a      	str	r2, [r3, #0]

	/* Initialize the RNG state */
	hrng->State = HAL_RNG_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	715a      	strb	r2, [r3, #5]

	/* Initialise the error code */
	hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]

	/* Return function status */
	return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_SPI_Init>:
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	uint32_t frxth;

	/* Check the SPI handle allocation */
	if (hspi == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_SPI_Init+0x12>
	{
		return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e09d      	b.n	800481a <HAL_SPI_Init+0x14e>
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <HAL_SPI_Init+0x2c>
	{
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ee:	d009      	beq.n	8004704 <HAL_SPI_Init+0x38>
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		}
		else
		{
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]
 80046f6:	e005      	b.n	8004704 <HAL_SPI_Init+0x38>
	else
	{
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_SPI_Init+0x58>
	{
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd f972 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473a:	601a      	str	r2, [r3, #0]

	/* Align by default the rs fifo threshold on the data size */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004744:	d902      	bls.n	800474c <HAL_SPI_Init+0x80>
	{
		frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e002      	b.n	8004752 <HAL_SPI_Init+0x86>
	}
	else
	{
		frxth = SPI_RXFIFO_THRESHOLD_QF;
 800474c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004750:	60fb      	str	r3, [r7, #12]
	}

	/* CRC calculation is valid only for 16Bit and 8 Bit */
	if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800475a:	d007      	beq.n	800476c <HAL_SPI_Init+0xa0>
			&& (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004764:	d002      	beq.n	800476c <HAL_SPI_Init+0xa0>
	{
		/* CRC must be disabled */
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	ea42 0103 	orr.w	r1, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

	/* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
	WRITE_REG(hspi->Instance->CR2,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	0c1b      	lsrs	r3, r3, #16
 80047c8:	f003 0204 	and.w	r2, r3, #4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047e8:	ea42 0103 	orr.w	r1, r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->State = HAL_SPI_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SPI_Transmit>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData,
		uint16_t Size, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b088      	sub	sp, #32
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	77fb      	strb	r3, [r7, #31]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_SPI_Transmit+0x22>
 8004840:	2302      	movs	r3, #2
 8004842:	e158      	b.n	8004af6 <HAL_SPI_Transmit+0x2d4>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 800484c:	f7fe fac4 	bl	8002dd8 <HAL_GetTick>
 8004850:	61b8      	str	r0, [r7, #24]
	initial_TxXferCount = Size;
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	82fb      	strh	r3, [r7, #22]

	if (hspi->State != HAL_SPI_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Transmit+0x46>
	{
		errorcode = HAL_BUSY;
 8004862:	2302      	movs	r3, #2
 8004864:	77fb      	strb	r3, [r7, #31]
		goto error;
 8004866:	e13d      	b.n	8004ae4 <HAL_SPI_Transmit+0x2c2>
	}

	if ((pData == NULL) || (Size == 0U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_Transmit+0x52>
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_SPI_Transmit+0x58>
	{
		errorcode = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
		goto error;
 8004878:	e134      	b.n	8004ae4 <HAL_SPI_Transmit+0x2c2>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2203      	movs	r2, #3
 800487e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pTxBuffPtr = (uint8_t*) pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t*) NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferSize = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->TxISR = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50
	hspi->RxISR = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c4:	d10f      	bne.n	80048e6 <HAL_SPI_Transmit+0xc4>
	{
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d4:	601a      	str	r2, [r3, #0]
		SPI_1LINE_TX(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d007      	beq.n	8004904 <HAL_SPI_Transmit+0xe2>
	{
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004902:	601a      	str	r2, [r3, #0]
	}

	/* Transmit data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800490c:	d94b      	bls.n	80049a6 <HAL_SPI_Transmit+0x184>
	{
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Transmit+0xfa>
				|| (initial_TxXferCount == 0x01U))
 8004916:	8afb      	ldrh	r3, [r7, #22]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d13e      	bne.n	800499a <HAL_SPI_Transmit+0x178>
		{
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	881a      	ldrh	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	1c9a      	adds	r2, r3, #2
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
		/* Transmit data in 16 Bit mode */
		while (hspi->TxXferCount > 0U)
 8004940:	e02b      	b.n	800499a <HAL_SPI_Transmit+0x178>
		{
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d112      	bne.n	8004976 <HAL_SPI_Transmit+0x154>
			{
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004974:	e011      	b.n	800499a <HAL_SPI_Transmit+0x178>
			}
			else
			{
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 8004976:	f7fe fa2f 	bl	8002dd8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d803      	bhi.n	800498e <HAL_SPI_Transmit+0x16c>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d102      	bne.n	8004994 <HAL_SPI_Transmit+0x172>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <HAL_SPI_Transmit+0x178>
				{
					errorcode = HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	77fb      	strb	r3, [r7, #31]
					goto error;
 8004998:	e0a4      	b.n	8004ae4 <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ce      	bne.n	8004942 <HAL_SPI_Transmit+0x120>
 80049a4:	e07c      	b.n	8004aa0 <HAL_SPI_Transmit+0x27e>
		}
	}
	/* Transmit data in 8 Bit mode */
	else
	{
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_SPI_Transmit+0x192>
				|| (initial_TxXferCount == 0x01U))
 80049ae:	8afb      	ldrh	r3, [r7, #22]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d170      	bne.n	8004a96 <HAL_SPI_Transmit+0x274>
		{
			if (hspi->TxXferCount > 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d912      	bls.n	80049e4 <HAL_SPI_Transmit+0x1c2>
			{
				/* write on the data register in packing mode */
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	881a      	ldrh	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount -= 2U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b02      	subs	r3, #2
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e2:	e058      	b.n	8004a96 <HAL_SPI_Transmit+0x274>
			}
			else
			{
				*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
		}
		while (hspi->TxXferCount > 0U)
 8004a0a:	e044      	b.n	8004a96 <HAL_SPI_Transmit+0x274>
		{
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d12b      	bne.n	8004a72 <HAL_SPI_Transmit+0x250>
			{
				if (hspi->TxXferCount > 1U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d912      	bls.n	8004a4a <HAL_SPI_Transmit+0x228>
				{
					/* write on the data register in packing mode */
					hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	1c9a      	adds	r2, r3, #2
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount -= 2U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b02      	subs	r3, #2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a48:	e025      	b.n	8004a96 <HAL_SPI_Transmit+0x274>
				}
				else
				{
					*((__IO uint8_t*) &hspi->Instance->DR) =
							(*hspi->pTxBuffPtr);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
					*((__IO uint8_t*) &hspi->Instance->DR) =
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
							(*hspi->pTxBuffPtr);
 8004a54:	7812      	ldrb	r2, [r2, #0]
					*((__IO uint8_t*) &hspi->Instance->DR) =
 8004a56:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a70:	e011      	b.n	8004a96 <HAL_SPI_Transmit+0x274>
				}
			}
			else
			{
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 8004a72:	f7fe f9b1 	bl	8002dd8 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d803      	bhi.n	8004a8a <HAL_SPI_Transmit+0x268>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d102      	bne.n	8004a90 <HAL_SPI_Transmit+0x26e>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x274>
				{
					errorcode = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	77fb      	strb	r3, [r7, #31]
					goto error;
 8004a94:	e026      	b.n	8004ae4 <HAL_SPI_Transmit+0x2c2>
		while (hspi->TxXferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1b5      	bne.n	8004a0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f949 	bl	8004d3c <SPI_EndRxTxTransaction>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_SPI_Transmit+0x294>
	{
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <HAL_SPI_Transmit+0x2b2>
	{
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
	}

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x2c0>
	{
		errorcode = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e000      	b.n	8004ae4 <HAL_SPI_Transmit+0x2c2>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8004ae2:	bf00      	nop
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <SPI_WaitFlagStateUntilTimeout>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, FlagStatus State, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b10:	f7fe f962 	bl	8002dd8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61fb      	str	r3, [r7, #28]
	tmp_tickstart = HAL_GetTick();
 8004b20:	f7fe f95a 	bl	8002dd8 <HAL_GetTick>
 8004b24:	61b8      	str	r0, [r7, #24]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b26:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	015b      	lsls	r3, r3, #5
 8004b2c:	0d1b      	lsrs	r3, r3, #20
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]

	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b36:	e054      	b.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
	{
		if (Timeout != HAL_MAX_DELAY)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d050      	beq.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
		{
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout)
 8004b40:	f7fe f94a 	bl	8002dd8 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d902      	bls.n	8004b56 <SPI_WaitFlagStateUntilTimeout+0x56>
					|| (tmp_timeout == 0U))
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d13d      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b64:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6e:	d111      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0x94>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b78:	d004      	beq.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x84>
								|| (hspi->Init.Direction
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b82:	d107      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0x94>
										== SPI_DIRECTION_2LINES_RXONLY)))
				{
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9c:	d10f      	bne.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
				{
					SPI_RESET_CRC(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bbc:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e017      	b.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0x102>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
			{
				tmp_timeout = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
			}
			count--;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d19b      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x38>
		}
	}

	return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000000 	.word	0x20000000

08004c10 <SPI_WaitFifoStateUntilTimeout>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Fifo, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;
	__IO uint8_t *ptmpreg8;
	__IO uint8_t tmpreg8 = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c22:	f7fe f8d9 	bl	8002dd8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	4413      	add	r3, r2
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
	tmp_tickstart = HAL_GetTick();
 8004c32:	f7fe f8d1 	bl	8002dd8 <HAL_GetTick>
 8004c36:	6238      	str	r0, [r7, #32]

	/* Initialize the 8bit temporary pointer */
	ptmpreg8 = (__IO uint8_t*) &hspi->Instance->DR;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	61fb      	str	r3, [r7, #28]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c40:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00da      	lsls	r2, r3, #3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	0d1b      	lsrs	r3, r3, #20
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	61bb      	str	r3, [r7, #24]

	while ((hspi->Instance->SR & Fifo) != State)
 8004c58:	e060      	b.n	8004d1c <SPI_WaitFifoStateUntilTimeout+0x10c>
	{
		if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c60:	d107      	bne.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0x62>
		{
			/* Flush Data Register by a blank read */
			tmpreg8 = *ptmpreg8;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	75fb      	strb	r3, [r7, #23]
			/* To avoid GCC warning */
			UNUSED(tmpreg8);
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
		}

		if (Timeout != HAL_MAX_DELAY)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d050      	beq.n	8004d1c <SPI_WaitFifoStateUntilTimeout+0x10c>
		{
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout)
 8004c7a:	f7fe f8ad 	bl	8002dd8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d902      	bls.n	8004c90 <SPI_WaitFifoStateUntilTimeout+0x80>
					|| (tmp_timeout == 0U))
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d13d      	bne.n	8004d0c <SPI_WaitFifoStateUntilTimeout+0xfc>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c9e:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca8:	d111      	bne.n	8004cce <SPI_WaitFifoStateUntilTimeout+0xbe>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb2:	d004      	beq.n	8004cbe <SPI_WaitFifoStateUntilTimeout+0xae>
								|| (hspi->Init.Direction
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbc:	d107      	bne.n	8004cce <SPI_WaitFifoStateUntilTimeout+0xbe>
										== SPI_DIRECTION_2LINES_RXONLY)))
				{
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ccc:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd6:	d10f      	bne.n	8004cf8 <SPI_WaitFifoStateUntilTimeout+0xe8>
				{
					SPI_RESET_CRC(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf6:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e010      	b.n	8004d2e <SPI_WaitFifoStateUntilTimeout+0x11e>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0x106>
			{
				tmp_timeout = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
			}
			count--;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]
	while ((hspi->Instance->SR & Fifo) != State)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d196      	bne.n	8004c5a <SPI_WaitFifoStateUntilTimeout+0x4a>
		}
	}

	return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000

08004d3c <SPI_EndRxTxTransaction>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
	/* Control if the TX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff ff5b 	bl	8004c10 <SPI_WaitFifoStateUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <SPI_EndRxTxTransaction+0x34>
			Timeout, Tickstart) != HAL_OK)
	{
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e046      	b.n	8004dfe <SPI_EndRxTxTransaction+0xc2>
	}

	/* Timeout in µs */
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT
			* (SystemCoreClock / 24U / 1000000U);
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <SPI_EndRxTxTransaction+0xcc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <SPI_EndRxTxTransaction+0xd0>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	0d5b      	lsrs	r3, r3, #21
 8004d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT
 8004d84:	617b      	str	r3, [r7, #20]
	/* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
	if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8e:	d112      	bne.n	8004db6 <SPI_EndRxTxTransaction+0x7a>
	{
		/* Control the BSY flag */
		if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff feb0 	bl	8004b00 <SPI_WaitFlagStateUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <SPI_EndRxTxTransaction+0x98>
				Tickstart) != HAL_OK)
		{
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	661a      	str	r2, [r3, #96]	; 0x60
			return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e023      	b.n	8004dfe <SPI_EndRxTxTransaction+0xc2>
		 * User have to calculate the timeout value to fit with the time of 1 byte transfer.
		 * This time is directly link with the SPI clock from Master device.
		 */
		do
		{
			if (count == 0U)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <SPI_EndRxTxTransaction+0x96>
			{
				break;
			}
			count--;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
		} while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d0f2      	beq.n	8004db6 <SPI_EndRxTxTransaction+0x7a>
 8004dd0:	e000      	b.n	8004dd4 <SPI_EndRxTxTransaction+0x98>
				break;
 8004dd2:	bf00      	nop
	}

	/* Control if the RX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff ff15 	bl	8004c10 <SPI_WaitFifoStateUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <SPI_EndRxTxTransaction+0xc0>
			Timeout, Tickstart) != HAL_OK)
	{
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e000      	b.n	8004dfe <SPI_EndRxTxTransaction+0xc2>
	}

	return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	165e9f81 	.word	0x165e9f81

08004e10 <HAL_TIM_Base_Init>:
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
	{
		return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_Base_Init+0xa6>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc ff80 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 f900 	bl	8005054 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_ConfigClockSource+0x1c>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e0b4      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x186>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4b56      	ldr	r3, [pc, #344]	; (8005050 <HAL_TIM_ConfigClockSource+0x190>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f02:	60bb      	str	r3, [r7, #8]
	htim->Instance->SMCR = tmpsmcr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f14:	d03e      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0xd4>
 8004f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1a:	f200 8087 	bhi.w	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	f000 8086 	beq.w	8005032 <HAL_TIM_ConfigClockSource+0x172>
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	d87f      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b70      	cmp	r3, #112	; 0x70
 8004f2e:	d01a      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0xa6>
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d87b      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b60      	cmp	r3, #96	; 0x60
 8004f36:	d050      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x11a>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d877      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b50      	cmp	r3, #80	; 0x50
 8004f3e:	d03c      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0xfa>
 8004f40:	2b50      	cmp	r3, #80	; 0x50
 8004f42:	d873      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d058      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x13a>
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d86f      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d064      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d86b      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d060      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d867      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d05c      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d05a      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	e062      	b.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004f76:	f000 f987 	bl	8005288 <TIM_ETR_SetConfig>

		/* Select the External clock mode1 and the ETRF trigger */
		tmpsmcr = htim->Instance->SMCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60bb      	str	r3, [r7, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f88:	60bb      	str	r3, [r7, #8]
		/* Write to TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	609a      	str	r2, [r3, #8]
		break;
 8004f92:	e04f      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004fa4:	f000 f970 	bl	8005288 <TIM_ETR_SetConfig>
		/* Enable the External clock mode2 */
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb6:	609a      	str	r2, [r3, #8]
		break;
 8004fb8:	e03c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 f8e4 	bl	8005194 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2150      	movs	r1, #80	; 0x50
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f93d 	bl	8005252 <TIM_ITRx_SetConfig>
		break;
 8004fd8:	e02c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI2 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI2_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
		TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 f903 	bl	80051f2 <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2160      	movs	r1, #96	; 0x60
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f92d 	bl	8005252 <TIM_ITRx_SetConfig>
		break;
 8004ff8:	e01c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	461a      	mov	r2, r3
 8005008:	f000 f8c4 	bl	8005194 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2140      	movs	r1, #64	; 0x40
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f91d 	bl	8005252 <TIM_ITRx_SetConfig>
		break;
 8005018:	e00c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
	case TIM_CLOCKSOURCE_ITR3:
	{
		/* Check whether or not the timer instance supports internal trigger input */
		assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f000 f914 	bl	8005252 <TIM_ITRx_SetConfig>
		break;
 800502a:	e003      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
	}

	default:
		status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
		break;
 8005030:	e000      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
		break;
 8005032:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	fffeff88 	.word	0xfffeff88

08005054 <TIM_Base_SetConfig>:
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
		const TIM_Base_InitTypeDef *Structure)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a40      	ldr	r2, [pc, #256]	; (8005168 <TIM_Base_SetConfig+0x114>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d00f      	beq.n	8005094 <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a3d      	ldr	r2, [pc, #244]	; (800516c <TIM_Base_SetConfig+0x118>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00b      	beq.n	8005094 <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a3c      	ldr	r2, [pc, #240]	; (8005170 <TIM_Base_SetConfig+0x11c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a3b      	ldr	r2, [pc, #236]	; (8005174 <TIM_Base_SetConfig+0x120>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a3a      	ldr	r2, [pc, #232]	; (8005178 <TIM_Base_SetConfig+0x124>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d108      	bne.n	80050a6 <TIM_Base_SetConfig+0x52>
	{
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <TIM_Base_SetConfig+0x114>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02b      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d027      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2c      	ldr	r2, [pc, #176]	; (800516c <TIM_Base_SetConfig+0x118>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d023      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <TIM_Base_SetConfig+0x11c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01f      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a2a      	ldr	r2, [pc, #168]	; (8005174 <TIM_Base_SetConfig+0x120>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01b      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a29      	ldr	r2, [pc, #164]	; (8005178 <TIM_Base_SetConfig+0x124>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d017      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a28      	ldr	r2, [pc, #160]	; (800517c <TIM_Base_SetConfig+0x128>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a27      	ldr	r2, [pc, #156]	; (8005180 <TIM_Base_SetConfig+0x12c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00f      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a26      	ldr	r2, [pc, #152]	; (8005184 <TIM_Base_SetConfig+0x130>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00b      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a25      	ldr	r2, [pc, #148]	; (8005188 <TIM_Base_SetConfig+0x134>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d007      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a24      	ldr	r2, [pc, #144]	; (800518c <TIM_Base_SetConfig+0x138>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d003      	beq.n	8005106 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a23      	ldr	r2, [pc, #140]	; (8005190 <TIM_Base_SetConfig+0x13c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d108      	bne.n	8005118 <TIM_Base_SetConfig+0xc4>
	{
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510c:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <TIM_Base_SetConfig+0x114>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0xf8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <TIM_Base_SetConfig+0x124>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d103      	bne.n	8005154 <TIM_Base_SetConfig+0x100>
	{
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	615a      	str	r2, [r3, #20]
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	40001800 	.word	0x40001800
 800518c:	40001c00 	.word	0x40001c00
 8005190:	40002000 	.word	0x40002000

08005194 <TIM_TI1_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051be:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 030a 	bic.w	r3, r3, #10
 80051d0:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_TI2_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b087      	sub	sp, #28
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0210 	bic.w	r2, r3, #16
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800521c:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	031b      	lsls	r3, r3, #12
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800522e:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	f043 0307 	orr.w	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a2:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_MasterConfigSynchronization>:
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e06d      	b.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]

	/* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
	if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a30      	ldr	r2, [pc, #192]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
	{
		/* Check the parameters */
		assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

		/* Clear the MMS2 bits */
		tmpcr2 &= ~TIM_CR2_MMS2;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800531a:	60fb      	str	r3, [r7, #12]
		/* Select the TRGO2 source*/
		tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
	}

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d022      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d01d      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a15      	ldr	r2, [pc, #84]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10c      	bne.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
	{
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005396:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e040      	b.n	8005478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc fce8 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f82c 	bl	8005480 <UART_SetConfig>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e022      	b.n	8005478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa84 	bl	8005948 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800544e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800545e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fb0b 	bl	8005a8c <UART_CheckIdleState>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4ba6      	ldr	r3, [pc, #664]	; (8005744 <UART_SetConfig+0x2c4>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a94      	ldr	r2, [pc, #592]	; (8005748 <UART_SetConfig+0x2c8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d120      	bne.n	800553e <UART_SetConfig+0xbe>
 80054fc:	4b93      	ldr	r3, [pc, #588]	; (800574c <UART_SetConfig+0x2cc>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b03      	cmp	r3, #3
 8005508:	d816      	bhi.n	8005538 <UART_SetConfig+0xb8>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x90>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005521 	.word	0x08005521
 8005514:	0800552d 	.word	0x0800552d
 8005518:	08005527 	.word	0x08005527
 800551c:	08005533 	.word	0x08005533
 8005520:	2301      	movs	r3, #1
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e150      	b.n	80057c8 <UART_SetConfig+0x348>
 8005526:	2302      	movs	r3, #2
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e14d      	b.n	80057c8 <UART_SetConfig+0x348>
 800552c:	2304      	movs	r3, #4
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e14a      	b.n	80057c8 <UART_SetConfig+0x348>
 8005532:	2308      	movs	r3, #8
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e147      	b.n	80057c8 <UART_SetConfig+0x348>
 8005538:	2310      	movs	r3, #16
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e144      	b.n	80057c8 <UART_SetConfig+0x348>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a83      	ldr	r2, [pc, #524]	; (8005750 <UART_SetConfig+0x2d0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d132      	bne.n	80055ae <UART_SetConfig+0x12e>
 8005548:	4b80      	ldr	r3, [pc, #512]	; (800574c <UART_SetConfig+0x2cc>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b0c      	cmp	r3, #12
 8005554:	d828      	bhi.n	80055a8 <UART_SetConfig+0x128>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0xdc>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005591 	.word	0x08005591
 8005560:	080055a9 	.word	0x080055a9
 8005564:	080055a9 	.word	0x080055a9
 8005568:	080055a9 	.word	0x080055a9
 800556c:	0800559d 	.word	0x0800559d
 8005570:	080055a9 	.word	0x080055a9
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055a9 	.word	0x080055a9
 800557c:	08005597 	.word	0x08005597
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055a9 	.word	0x080055a9
 800558c:	080055a3 	.word	0x080055a3
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e118      	b.n	80057c8 <UART_SetConfig+0x348>
 8005596:	2302      	movs	r3, #2
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e115      	b.n	80057c8 <UART_SetConfig+0x348>
 800559c:	2304      	movs	r3, #4
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e112      	b.n	80057c8 <UART_SetConfig+0x348>
 80055a2:	2308      	movs	r3, #8
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e10f      	b.n	80057c8 <UART_SetConfig+0x348>
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e10c      	b.n	80057c8 <UART_SetConfig+0x348>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a68      	ldr	r2, [pc, #416]	; (8005754 <UART_SetConfig+0x2d4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d120      	bne.n	80055fa <UART_SetConfig+0x17a>
 80055b8:	4b64      	ldr	r3, [pc, #400]	; (800574c <UART_SetConfig+0x2cc>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055c2:	2b30      	cmp	r3, #48	; 0x30
 80055c4:	d013      	beq.n	80055ee <UART_SetConfig+0x16e>
 80055c6:	2b30      	cmp	r3, #48	; 0x30
 80055c8:	d814      	bhi.n	80055f4 <UART_SetConfig+0x174>
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d009      	beq.n	80055e2 <UART_SetConfig+0x162>
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d810      	bhi.n	80055f4 <UART_SetConfig+0x174>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <UART_SetConfig+0x15c>
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d006      	beq.n	80055e8 <UART_SetConfig+0x168>
 80055da:	e00b      	b.n	80055f4 <UART_SetConfig+0x174>
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e0f2      	b.n	80057c8 <UART_SetConfig+0x348>
 80055e2:	2302      	movs	r3, #2
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e0ef      	b.n	80057c8 <UART_SetConfig+0x348>
 80055e8:	2304      	movs	r3, #4
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e0ec      	b.n	80057c8 <UART_SetConfig+0x348>
 80055ee:	2308      	movs	r3, #8
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e0e9      	b.n	80057c8 <UART_SetConfig+0x348>
 80055f4:	2310      	movs	r3, #16
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e0e6      	b.n	80057c8 <UART_SetConfig+0x348>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a56      	ldr	r2, [pc, #344]	; (8005758 <UART_SetConfig+0x2d8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d120      	bne.n	8005646 <UART_SetConfig+0x1c6>
 8005604:	4b51      	ldr	r3, [pc, #324]	; (800574c <UART_SetConfig+0x2cc>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800560e:	2bc0      	cmp	r3, #192	; 0xc0
 8005610:	d013      	beq.n	800563a <UART_SetConfig+0x1ba>
 8005612:	2bc0      	cmp	r3, #192	; 0xc0
 8005614:	d814      	bhi.n	8005640 <UART_SetConfig+0x1c0>
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d009      	beq.n	800562e <UART_SetConfig+0x1ae>
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d810      	bhi.n	8005640 <UART_SetConfig+0x1c0>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <UART_SetConfig+0x1a8>
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d006      	beq.n	8005634 <UART_SetConfig+0x1b4>
 8005626:	e00b      	b.n	8005640 <UART_SetConfig+0x1c0>
 8005628:	2300      	movs	r3, #0
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e0cc      	b.n	80057c8 <UART_SetConfig+0x348>
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e0c9      	b.n	80057c8 <UART_SetConfig+0x348>
 8005634:	2304      	movs	r3, #4
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e0c6      	b.n	80057c8 <UART_SetConfig+0x348>
 800563a:	2308      	movs	r3, #8
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e0c3      	b.n	80057c8 <UART_SetConfig+0x348>
 8005640:	2310      	movs	r3, #16
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0c0      	b.n	80057c8 <UART_SetConfig+0x348>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a44      	ldr	r2, [pc, #272]	; (800575c <UART_SetConfig+0x2dc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d125      	bne.n	800569c <UART_SetConfig+0x21c>
 8005650:	4b3e      	ldr	r3, [pc, #248]	; (800574c <UART_SetConfig+0x2cc>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800565e:	d017      	beq.n	8005690 <UART_SetConfig+0x210>
 8005660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005664:	d817      	bhi.n	8005696 <UART_SetConfig+0x216>
 8005666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566a:	d00b      	beq.n	8005684 <UART_SetConfig+0x204>
 800566c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005670:	d811      	bhi.n	8005696 <UART_SetConfig+0x216>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <UART_SetConfig+0x1fe>
 8005676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567a:	d006      	beq.n	800568a <UART_SetConfig+0x20a>
 800567c:	e00b      	b.n	8005696 <UART_SetConfig+0x216>
 800567e:	2300      	movs	r3, #0
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e0a1      	b.n	80057c8 <UART_SetConfig+0x348>
 8005684:	2302      	movs	r3, #2
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e09e      	b.n	80057c8 <UART_SetConfig+0x348>
 800568a:	2304      	movs	r3, #4
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e09b      	b.n	80057c8 <UART_SetConfig+0x348>
 8005690:	2308      	movs	r3, #8
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e098      	b.n	80057c8 <UART_SetConfig+0x348>
 8005696:	2310      	movs	r3, #16
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e095      	b.n	80057c8 <UART_SetConfig+0x348>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2f      	ldr	r2, [pc, #188]	; (8005760 <UART_SetConfig+0x2e0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d125      	bne.n	80056f2 <UART_SetConfig+0x272>
 80056a6:	4b29      	ldr	r3, [pc, #164]	; (800574c <UART_SetConfig+0x2cc>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056b4:	d017      	beq.n	80056e6 <UART_SetConfig+0x266>
 80056b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ba:	d817      	bhi.n	80056ec <UART_SetConfig+0x26c>
 80056bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c0:	d00b      	beq.n	80056da <UART_SetConfig+0x25a>
 80056c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c6:	d811      	bhi.n	80056ec <UART_SetConfig+0x26c>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <UART_SetConfig+0x254>
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d006      	beq.n	80056e0 <UART_SetConfig+0x260>
 80056d2:	e00b      	b.n	80056ec <UART_SetConfig+0x26c>
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e076      	b.n	80057c8 <UART_SetConfig+0x348>
 80056da:	2302      	movs	r3, #2
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e073      	b.n	80057c8 <UART_SetConfig+0x348>
 80056e0:	2304      	movs	r3, #4
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e070      	b.n	80057c8 <UART_SetConfig+0x348>
 80056e6:	2308      	movs	r3, #8
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e06d      	b.n	80057c8 <UART_SetConfig+0x348>
 80056ec:	2310      	movs	r3, #16
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e06a      	b.n	80057c8 <UART_SetConfig+0x348>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <UART_SetConfig+0x2e4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d138      	bne.n	800576e <UART_SetConfig+0x2ee>
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <UART_SetConfig+0x2cc>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800570a:	d017      	beq.n	800573c <UART_SetConfig+0x2bc>
 800570c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005710:	d82a      	bhi.n	8005768 <UART_SetConfig+0x2e8>
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d00b      	beq.n	8005730 <UART_SetConfig+0x2b0>
 8005718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571c:	d824      	bhi.n	8005768 <UART_SetConfig+0x2e8>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <UART_SetConfig+0x2aa>
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005726:	d006      	beq.n	8005736 <UART_SetConfig+0x2b6>
 8005728:	e01e      	b.n	8005768 <UART_SetConfig+0x2e8>
 800572a:	2300      	movs	r3, #0
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e04b      	b.n	80057c8 <UART_SetConfig+0x348>
 8005730:	2302      	movs	r3, #2
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e048      	b.n	80057c8 <UART_SetConfig+0x348>
 8005736:	2304      	movs	r3, #4
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e045      	b.n	80057c8 <UART_SetConfig+0x348>
 800573c:	2308      	movs	r3, #8
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e042      	b.n	80057c8 <UART_SetConfig+0x348>
 8005742:	bf00      	nop
 8005744:	efff69f3 	.word	0xefff69f3
 8005748:	40011000 	.word	0x40011000
 800574c:	40023800 	.word	0x40023800
 8005750:	40004400 	.word	0x40004400
 8005754:	40004800 	.word	0x40004800
 8005758:	40004c00 	.word	0x40004c00
 800575c:	40005000 	.word	0x40005000
 8005760:	40011400 	.word	0x40011400
 8005764:	40007800 	.word	0x40007800
 8005768:	2310      	movs	r3, #16
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e02c      	b.n	80057c8 <UART_SetConfig+0x348>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a72      	ldr	r2, [pc, #456]	; (800593c <UART_SetConfig+0x4bc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d125      	bne.n	80057c4 <UART_SetConfig+0x344>
 8005778:	4b71      	ldr	r3, [pc, #452]	; (8005940 <UART_SetConfig+0x4c0>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005782:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005786:	d017      	beq.n	80057b8 <UART_SetConfig+0x338>
 8005788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800578c:	d817      	bhi.n	80057be <UART_SetConfig+0x33e>
 800578e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005792:	d00b      	beq.n	80057ac <UART_SetConfig+0x32c>
 8005794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005798:	d811      	bhi.n	80057be <UART_SetConfig+0x33e>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <UART_SetConfig+0x326>
 800579e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057a2:	d006      	beq.n	80057b2 <UART_SetConfig+0x332>
 80057a4:	e00b      	b.n	80057be <UART_SetConfig+0x33e>
 80057a6:	2300      	movs	r3, #0
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e00d      	b.n	80057c8 <UART_SetConfig+0x348>
 80057ac:	2302      	movs	r3, #2
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e00a      	b.n	80057c8 <UART_SetConfig+0x348>
 80057b2:	2304      	movs	r3, #4
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e007      	b.n	80057c8 <UART_SetConfig+0x348>
 80057b8:	2308      	movs	r3, #8
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e004      	b.n	80057c8 <UART_SetConfig+0x348>
 80057be:	2310      	movs	r3, #16
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	e001      	b.n	80057c8 <UART_SetConfig+0x348>
 80057c4:	2310      	movs	r3, #16
 80057c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d0:	d15b      	bne.n	800588a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057d2:	7ffb      	ldrb	r3, [r7, #31]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d828      	bhi.n	800582a <UART_SetConfig+0x3aa>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x360>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	0800582b 	.word	0x0800582b
 80057f0:	0800581b 	.word	0x0800581b
 80057f4:	0800582b 	.word	0x0800582b
 80057f8:	0800582b 	.word	0x0800582b
 80057fc:	0800582b 	.word	0x0800582b
 8005800:	08005823 	.word	0x08005823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005804:	f7fe fae8 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8005808:	61b8      	str	r0, [r7, #24]
        break;
 800580a:	e013      	b.n	8005834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800580c:	f7fe faf8 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 8005810:	61b8      	str	r0, [r7, #24]
        break;
 8005812:	e00f      	b.n	8005834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005814:	4b4b      	ldr	r3, [pc, #300]	; (8005944 <UART_SetConfig+0x4c4>)
 8005816:	61bb      	str	r3, [r7, #24]
        break;
 8005818:	e00c      	b.n	8005834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581a:	f7fe f9cb 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 800581e:	61b8      	str	r0, [r7, #24]
        break;
 8005820:	e008      	b.n	8005834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005826:	61bb      	str	r3, [r7, #24]
        break;
 8005828:	e004      	b.n	8005834 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	77bb      	strb	r3, [r7, #30]
        break;
 8005832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d074      	beq.n	8005924 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	005a      	lsls	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	fbb2 f3f3 	udiv	r3, r2, r3
 800584e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b0f      	cmp	r3, #15
 8005854:	d916      	bls.n	8005884 <UART_SetConfig+0x404>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585c:	d212      	bcs.n	8005884 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f023 030f 	bic.w	r3, r3, #15
 8005866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	b29b      	uxth	r3, r3
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	b29a      	uxth	r2, r3
 8005874:	89fb      	ldrh	r3, [r7, #14]
 8005876:	4313      	orrs	r3, r2
 8005878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	89fa      	ldrh	r2, [r7, #14]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	e04f      	b.n	8005924 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	77bb      	strb	r3, [r7, #30]
 8005888:	e04c      	b.n	8005924 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800588a:	7ffb      	ldrb	r3, [r7, #31]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d828      	bhi.n	80058e2 <UART_SetConfig+0x462>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x418>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fe fa8c 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 80058c0:	61b8      	str	r0, [r7, #24]
        break;
 80058c2:	e013      	b.n	80058ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fe fa9c 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 80058c8:	61b8      	str	r0, [r7, #24]
        break;
 80058ca:	e00f      	b.n	80058ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <UART_SetConfig+0x4c4>)
 80058ce:	61bb      	str	r3, [r7, #24]
        break;
 80058d0:	e00c      	b.n	80058ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fe f96f 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 80058d6:	61b8      	str	r0, [r7, #24]
        break;
 80058d8:	e008      	b.n	80058ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058de:	61bb      	str	r3, [r7, #24]
        break;
 80058e0:	e004      	b.n	80058ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	77bb      	strb	r3, [r7, #30]
        break;
 80058ea:	bf00      	nop
    }

    if (pclk != 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d018      	beq.n	8005924 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	085a      	lsrs	r2, r3, #1
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	441a      	add	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b0f      	cmp	r3, #15
 800590a:	d909      	bls.n	8005920 <UART_SetConfig+0x4a0>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005912:	d205      	bcs.n	8005920 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e001      	b.n	8005924 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005930:	7fbb      	ldrb	r3, [r7, #30]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40007c00 	.word	0x40007c00
 8005940:	40023800 	.word	0x40023800
 8005944:	00f42400 	.word	0x00f42400

08005948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a46:	d10a      	bne.n	8005a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a9c:	f7fd f99c 	bl	8002dd8 <HAL_GetTick>
 8005aa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d10e      	bne.n	8005ace <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f831 	bl	8005b26 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e027      	b.n	8005b1e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d10e      	bne.n	8005afa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f81b 	bl	8005b26 <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e011      	b.n	8005b1e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b09c      	sub	sp, #112	; 0x70
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b36:	e0a7      	b.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	f000 80a3 	beq.w	8005c88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b42:	f7fd f949 	bl	8002dd8 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d13f      	bne.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	64fb      	str	r3, [r7, #76]	; 0x4c
	return (result);
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	657b      	str	r3, [r7, #84]	; 0x54
	return (result);
 8005b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e6      	bne.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
	return (result);
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005baa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	643b      	str	r3, [r7, #64]	; 0x40
	return (result);
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e068      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d050      	beq.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf4:	d148      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c20:	633a      	str	r2, [r7, #48]	; 0x30
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	613b      	str	r3, [r7, #16]
	return (result);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c52:	623a      	str	r2, [r7, #32]
 8005c54:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	69f9      	ldr	r1, [r7, #28]
 8005c58:	6a3a      	ldr	r2, [r7, #32]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	61bb      	str	r3, [r7, #24]
	return (result);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e010      	b.n	8005caa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	f43f af48 	beq.w	8005b38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3770      	adds	r7, #112	; 0x70
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <__cvt>:
 8005cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb4:	ed2d 8b02 	vpush	{d8}
 8005cb8:	eeb0 8b40 	vmov.f64	d8, d0
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	4617      	mov	r7, r2
 8005cc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005cc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005cc4:	ee18 2a90 	vmov	r2, s17
 8005cc8:	f025 0520 	bic.w	r5, r5, #32
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	bfb6      	itet	lt
 8005cd0:	222d      	movlt	r2, #45	; 0x2d
 8005cd2:	2200      	movge	r2, #0
 8005cd4:	eeb1 8b40 	vneglt.f64	d8, d0
 8005cd8:	2d46      	cmp	r5, #70	; 0x46
 8005cda:	460c      	mov	r4, r1
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	d004      	beq.n	8005cea <__cvt+0x38>
 8005ce0:	2d45      	cmp	r5, #69	; 0x45
 8005ce2:	d100      	bne.n	8005ce6 <__cvt+0x34>
 8005ce4:	3401      	adds	r4, #1
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	e000      	b.n	8005cec <__cvt+0x3a>
 8005cea:	2103      	movs	r1, #3
 8005cec:	ab03      	add	r3, sp, #12
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	ab02      	add	r3, sp, #8
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	4633      	mov	r3, r6
 8005cf8:	eeb0 0b48 	vmov.f64	d0, d8
 8005cfc:	f001 f850 	bl	8006da0 <_dtoa_r>
 8005d00:	2d47      	cmp	r5, #71	; 0x47
 8005d02:	d101      	bne.n	8005d08 <__cvt+0x56>
 8005d04:	07fb      	lsls	r3, r7, #31
 8005d06:	d51a      	bpl.n	8005d3e <__cvt+0x8c>
 8005d08:	2d46      	cmp	r5, #70	; 0x46
 8005d0a:	eb00 0204 	add.w	r2, r0, r4
 8005d0e:	d10c      	bne.n	8005d2a <__cvt+0x78>
 8005d10:	7803      	ldrb	r3, [r0, #0]
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d107      	bne.n	8005d26 <__cvt+0x74>
 8005d16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1e:	bf1c      	itt	ne
 8005d20:	f1c4 0401 	rsbne	r4, r4, #1
 8005d24:	6034      	strne	r4, [r6, #0]
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	441a      	add	r2, r3
 8005d2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	bf08      	it	eq
 8005d34:	9203      	streq	r2, [sp, #12]
 8005d36:	2130      	movs	r1, #48	; 0x30
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d307      	bcc.n	8005d4e <__cvt+0x9c>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d42:	1a1b      	subs	r3, r3, r0
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	b005      	add	sp, #20
 8005d48:	ecbd 8b02 	vpop	{d8}
 8005d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4e:	1c5c      	adds	r4, r3, #1
 8005d50:	9403      	str	r4, [sp, #12]
 8005d52:	7019      	strb	r1, [r3, #0]
 8005d54:	e7f0      	b.n	8005d38 <__cvt+0x86>

08005d56 <__exponent>:
 8005d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	bfb8      	it	lt
 8005d5e:	4249      	neglt	r1, r1
 8005d60:	f803 2b02 	strb.w	r2, [r3], #2
 8005d64:	bfb4      	ite	lt
 8005d66:	222d      	movlt	r2, #45	; 0x2d
 8005d68:	222b      	movge	r2, #43	; 0x2b
 8005d6a:	2909      	cmp	r1, #9
 8005d6c:	7042      	strb	r2, [r0, #1]
 8005d6e:	dd2a      	ble.n	8005dc6 <__exponent+0x70>
 8005d70:	f10d 0207 	add.w	r2, sp, #7
 8005d74:	4617      	mov	r7, r2
 8005d76:	260a      	movs	r6, #10
 8005d78:	4694      	mov	ip, r2
 8005d7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d7e:	fb06 1415 	mls	r4, r6, r5, r1
 8005d82:	3430      	adds	r4, #48	; 0x30
 8005d84:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d88:	460c      	mov	r4, r1
 8005d8a:	2c63      	cmp	r4, #99	; 0x63
 8005d8c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d90:	4629      	mov	r1, r5
 8005d92:	dcf1      	bgt.n	8005d78 <__exponent+0x22>
 8005d94:	3130      	adds	r1, #48	; 0x30
 8005d96:	f1ac 0402 	sub.w	r4, ip, #2
 8005d9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d9e:	1c41      	adds	r1, r0, #1
 8005da0:	4622      	mov	r2, r4
 8005da2:	42ba      	cmp	r2, r7
 8005da4:	d30a      	bcc.n	8005dbc <__exponent+0x66>
 8005da6:	f10d 0209 	add.w	r2, sp, #9
 8005daa:	eba2 020c 	sub.w	r2, r2, ip
 8005dae:	42bc      	cmp	r4, r7
 8005db0:	bf88      	it	hi
 8005db2:	2200      	movhi	r2, #0
 8005db4:	4413      	add	r3, r2
 8005db6:	1a18      	subs	r0, r3, r0
 8005db8:	b003      	add	sp, #12
 8005dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dc0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dc4:	e7ed      	b.n	8005da2 <__exponent+0x4c>
 8005dc6:	2330      	movs	r3, #48	; 0x30
 8005dc8:	3130      	adds	r1, #48	; 0x30
 8005dca:	7083      	strb	r3, [r0, #2]
 8005dcc:	70c1      	strb	r1, [r0, #3]
 8005dce:	1d03      	adds	r3, r0, #4
 8005dd0:	e7f1      	b.n	8005db6 <__exponent+0x60>
 8005dd2:	0000      	movs	r0, r0
 8005dd4:	0000      	movs	r0, r0
	...

08005dd8 <_printf_float>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	b08b      	sub	sp, #44	; 0x2c
 8005dde:	460c      	mov	r4, r1
 8005de0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005de4:	4616      	mov	r6, r2
 8005de6:	461f      	mov	r7, r3
 8005de8:	4605      	mov	r5, r0
 8005dea:	f000 fed1 	bl	8006b90 <_localeconv_r>
 8005dee:	f8d0 b000 	ldr.w	fp, [r0]
 8005df2:	4658      	mov	r0, fp
 8005df4:	f7fa fa74 	bl	80002e0 <strlen>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9308      	str	r3, [sp, #32]
 8005dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8005e00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	3307      	adds	r3, #7
 8005e08:	f023 0307 	bic.w	r3, r3, #7
 8005e0c:	f103 0108 	add.w	r1, r3, #8
 8005e10:	f8c8 1000 	str.w	r1, [r8]
 8005e14:	ed93 0b00 	vldr	d0, [r3]
 8005e18:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006078 <_printf_float+0x2a0>
 8005e1c:	eeb0 7bc0 	vabs.f64	d7, d0
 8005e20:	eeb4 7b46 	vcmp.f64	d7, d6
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	dd24      	ble.n	8005e7a <_printf_float+0xa2>
 8005e30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	d502      	bpl.n	8005e40 <_printf_float+0x68>
 8005e3a:	232d      	movs	r3, #45	; 0x2d
 8005e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e40:	498f      	ldr	r1, [pc, #572]	; (8006080 <_printf_float+0x2a8>)
 8005e42:	4b90      	ldr	r3, [pc, #576]	; (8006084 <_printf_float+0x2ac>)
 8005e44:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e48:	bf94      	ite	ls
 8005e4a:	4688      	movls	r8, r1
 8005e4c:	4698      	movhi	r8, r3
 8005e4e:	2303      	movs	r3, #3
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	f022 0204 	bic.w	r2, r2, #4
 8005e56:	2300      	movs	r3, #0
 8005e58:	6022      	str	r2, [r4, #0]
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	9700      	str	r7, [sp, #0]
 8005e5e:	4633      	mov	r3, r6
 8005e60:	aa09      	add	r2, sp, #36	; 0x24
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 f9d1 	bl	800620c <_printf_common>
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f040 808a 	bne.w	8005f84 <_printf_float+0x1ac>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	b00b      	add	sp, #44	; 0x2c
 8005e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7a:	eeb4 0b40 	vcmp.f64	d0, d0
 8005e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e82:	d709      	bvc.n	8005e98 <_printf_float+0xc0>
 8005e84:	ee10 3a90 	vmov	r3, s1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bfbc      	itt	lt
 8005e8c:	232d      	movlt	r3, #45	; 0x2d
 8005e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e92:	497d      	ldr	r1, [pc, #500]	; (8006088 <_printf_float+0x2b0>)
 8005e94:	4b7d      	ldr	r3, [pc, #500]	; (800608c <_printf_float+0x2b4>)
 8005e96:	e7d5      	b.n	8005e44 <_printf_float+0x6c>
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005e9e:	9104      	str	r1, [sp, #16]
 8005ea0:	1c59      	adds	r1, r3, #1
 8005ea2:	d13c      	bne.n	8005f1e <_printf_float+0x146>
 8005ea4:	2306      	movs	r3, #6
 8005ea6:	6063      	str	r3, [r4, #4]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9303      	str	r3, [sp, #12]
 8005eac:	ab08      	add	r3, sp, #32
 8005eae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005eb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eb6:	ab07      	add	r3, sp, #28
 8005eb8:	6861      	ldr	r1, [r4, #4]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	f10d 031b 	add.w	r3, sp, #27
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f7ff fef5 	bl	8005cb2 <__cvt>
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	9907      	ldr	r1, [sp, #28]
 8005ecc:	2b47      	cmp	r3, #71	; 0x47
 8005ece:	4680      	mov	r8, r0
 8005ed0:	d108      	bne.n	8005ee4 <_printf_float+0x10c>
 8005ed2:	1cc8      	adds	r0, r1, #3
 8005ed4:	db02      	blt.n	8005edc <_printf_float+0x104>
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	dd41      	ble.n	8005f60 <_printf_float+0x188>
 8005edc:	f1a9 0902 	sub.w	r9, r9, #2
 8005ee0:	fa5f f989 	uxtb.w	r9, r9
 8005ee4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ee8:	d820      	bhi.n	8005f2c <_printf_float+0x154>
 8005eea:	3901      	subs	r1, #1
 8005eec:	464a      	mov	r2, r9
 8005eee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ef2:	9107      	str	r1, [sp, #28]
 8005ef4:	f7ff ff2f 	bl	8005d56 <__exponent>
 8005ef8:	9a08      	ldr	r2, [sp, #32]
 8005efa:	9004      	str	r0, [sp, #16]
 8005efc:	1813      	adds	r3, r2, r0
 8005efe:	2a01      	cmp	r2, #1
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	dc02      	bgt.n	8005f0a <_printf_float+0x132>
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	07d2      	lsls	r2, r2, #31
 8005f08:	d501      	bpl.n	8005f0e <_printf_float+0x136>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0a2      	beq.n	8005e5c <_printf_float+0x84>
 8005f16:	232d      	movs	r3, #45	; 0x2d
 8005f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f1c:	e79e      	b.n	8005e5c <_printf_float+0x84>
 8005f1e:	9904      	ldr	r1, [sp, #16]
 8005f20:	2947      	cmp	r1, #71	; 0x47
 8005f22:	d1c1      	bne.n	8005ea8 <_printf_float+0xd0>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1bf      	bne.n	8005ea8 <_printf_float+0xd0>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7bc      	b.n	8005ea6 <_printf_float+0xce>
 8005f2c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f30:	d118      	bne.n	8005f64 <_printf_float+0x18c>
 8005f32:	2900      	cmp	r1, #0
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	dd0b      	ble.n	8005f50 <_printf_float+0x178>
 8005f38:	6121      	str	r1, [r4, #16]
 8005f3a:	b913      	cbnz	r3, 8005f42 <_printf_float+0x16a>
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	07d0      	lsls	r0, r2, #31
 8005f40:	d502      	bpl.n	8005f48 <_printf_float+0x170>
 8005f42:	3301      	adds	r3, #1
 8005f44:	440b      	add	r3, r1
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	e7de      	b.n	8005f0e <_printf_float+0x136>
 8005f50:	b913      	cbnz	r3, 8005f58 <_printf_float+0x180>
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	07d2      	lsls	r2, r2, #31
 8005f56:	d501      	bpl.n	8005f5c <_printf_float+0x184>
 8005f58:	3302      	adds	r3, #2
 8005f5a:	e7f4      	b.n	8005f46 <_printf_float+0x16e>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e7f2      	b.n	8005f46 <_printf_float+0x16e>
 8005f60:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f64:	9b08      	ldr	r3, [sp, #32]
 8005f66:	4299      	cmp	r1, r3
 8005f68:	db05      	blt.n	8005f76 <_printf_float+0x19e>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6121      	str	r1, [r4, #16]
 8005f6e:	07d8      	lsls	r0, r3, #31
 8005f70:	d5ea      	bpl.n	8005f48 <_printf_float+0x170>
 8005f72:	1c4b      	adds	r3, r1, #1
 8005f74:	e7e7      	b.n	8005f46 <_printf_float+0x16e>
 8005f76:	2900      	cmp	r1, #0
 8005f78:	bfd4      	ite	le
 8005f7a:	f1c1 0202 	rsble	r2, r1, #2
 8005f7e:	2201      	movgt	r2, #1
 8005f80:	4413      	add	r3, r2
 8005f82:	e7e0      	b.n	8005f46 <_printf_float+0x16e>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	055a      	lsls	r2, r3, #21
 8005f88:	d407      	bmi.n	8005f9a <_printf_float+0x1c2>
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	d12a      	bne.n	8005fee <_printf_float+0x216>
 8005f98:	e76a      	b.n	8005e70 <_printf_float+0x98>
 8005f9a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f9e:	f240 80e0 	bls.w	8006162 <_printf_float+0x38a>
 8005fa2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005fa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fae:	d133      	bne.n	8006018 <_printf_float+0x240>
 8005fb0:	4a37      	ldr	r2, [pc, #220]	; (8006090 <_printf_float+0x2b8>)
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f af58 	beq.w	8005e70 <_printf_float+0x98>
 8005fc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	db02      	blt.n	8005fce <_printf_float+0x1f6>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	07d8      	lsls	r0, r3, #31
 8005fcc:	d50f      	bpl.n	8005fee <_printf_float+0x216>
 8005fce:	4653      	mov	r3, sl
 8005fd0:	465a      	mov	r2, fp
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f af49 	beq.w	8005e70 <_printf_float+0x98>
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	f104 091a 	add.w	r9, r4, #26
 8005fe6:	9b08      	ldr	r3, [sp, #32]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	4543      	cmp	r3, r8
 8005fec:	dc09      	bgt.n	8006002 <_printf_float+0x22a>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	079b      	lsls	r3, r3, #30
 8005ff2:	f100 8106 	bmi.w	8006202 <_printf_float+0x42a>
 8005ff6:	68e0      	ldr	r0, [r4, #12]
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	bfb8      	it	lt
 8005ffe:	4618      	movlt	r0, r3
 8006000:	e738      	b.n	8005e74 <_printf_float+0x9c>
 8006002:	2301      	movs	r3, #1
 8006004:	464a      	mov	r2, r9
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f af2f 	beq.w	8005e70 <_printf_float+0x98>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	e7e6      	b.n	8005fe6 <_printf_float+0x20e>
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	dc3a      	bgt.n	8006094 <_printf_float+0x2bc>
 800601e:	4a1c      	ldr	r2, [pc, #112]	; (8006090 <_printf_float+0x2b8>)
 8006020:	2301      	movs	r3, #1
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	f43f af21 	beq.w	8005e70 <_printf_float+0x98>
 800602e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006032:	4313      	orrs	r3, r2
 8006034:	d102      	bne.n	800603c <_printf_float+0x264>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	07d9      	lsls	r1, r3, #31
 800603a:	d5d8      	bpl.n	8005fee <_printf_float+0x216>
 800603c:	4653      	mov	r3, sl
 800603e:	465a      	mov	r2, fp
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	f43f af12 	beq.w	8005e70 <_printf_float+0x98>
 800604c:	f04f 0900 	mov.w	r9, #0
 8006050:	f104 0a1a 	add.w	sl, r4, #26
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	425b      	negs	r3, r3
 8006058:	454b      	cmp	r3, r9
 800605a:	dc01      	bgt.n	8006060 <_printf_float+0x288>
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	e795      	b.n	8005f8c <_printf_float+0x1b4>
 8006060:	2301      	movs	r3, #1
 8006062:	4652      	mov	r2, sl
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	f43f af00 	beq.w	8005e70 <_printf_float+0x98>
 8006070:	f109 0901 	add.w	r9, r9, #1
 8006074:	e7ee      	b.n	8006054 <_printf_float+0x27c>
 8006076:	bf00      	nop
 8006078:	ffffffff 	.word	0xffffffff
 800607c:	7fefffff 	.word	0x7fefffff
 8006080:	0800a580 	.word	0x0800a580
 8006084:	0800a584 	.word	0x0800a584
 8006088:	0800a588 	.word	0x0800a588
 800608c:	0800a58c 	.word	0x0800a58c
 8006090:	0800a590 	.word	0x0800a590
 8006094:	9a08      	ldr	r2, [sp, #32]
 8006096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006098:	429a      	cmp	r2, r3
 800609a:	bfa8      	it	ge
 800609c:	461a      	movge	r2, r3
 800609e:	2a00      	cmp	r2, #0
 80060a0:	4691      	mov	r9, r2
 80060a2:	dc38      	bgt.n	8006116 <_printf_float+0x33e>
 80060a4:	2300      	movs	r3, #0
 80060a6:	9305      	str	r3, [sp, #20]
 80060a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ac:	f104 021a 	add.w	r2, r4, #26
 80060b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060b2:	9905      	ldr	r1, [sp, #20]
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	eba3 0309 	sub.w	r3, r3, r9
 80060ba:	428b      	cmp	r3, r1
 80060bc:	dc33      	bgt.n	8006126 <_printf_float+0x34e>
 80060be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	db3c      	blt.n	8006140 <_printf_float+0x368>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	07da      	lsls	r2, r3, #31
 80060ca:	d439      	bmi.n	8006140 <_printf_float+0x368>
 80060cc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80060d0:	eba2 0903 	sub.w	r9, r2, r3
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	1ad2      	subs	r2, r2, r3
 80060d8:	4591      	cmp	r9, r2
 80060da:	bfa8      	it	ge
 80060dc:	4691      	movge	r9, r2
 80060de:	f1b9 0f00 	cmp.w	r9, #0
 80060e2:	dc35      	bgt.n	8006150 <_printf_float+0x378>
 80060e4:	f04f 0800 	mov.w	r8, #0
 80060e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ec:	f104 0a1a 	add.w	sl, r4, #26
 80060f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	eba3 0309 	sub.w	r3, r3, r9
 80060fa:	4543      	cmp	r3, r8
 80060fc:	f77f af77 	ble.w	8005fee <_printf_float+0x216>
 8006100:	2301      	movs	r3, #1
 8006102:	4652      	mov	r2, sl
 8006104:	4631      	mov	r1, r6
 8006106:	4628      	mov	r0, r5
 8006108:	47b8      	blx	r7
 800610a:	3001      	adds	r0, #1
 800610c:	f43f aeb0 	beq.w	8005e70 <_printf_float+0x98>
 8006110:	f108 0801 	add.w	r8, r8, #1
 8006114:	e7ec      	b.n	80060f0 <_printf_float+0x318>
 8006116:	4613      	mov	r3, r2
 8006118:	4631      	mov	r1, r6
 800611a:	4642      	mov	r2, r8
 800611c:	4628      	mov	r0, r5
 800611e:	47b8      	blx	r7
 8006120:	3001      	adds	r0, #1
 8006122:	d1bf      	bne.n	80060a4 <_printf_float+0x2cc>
 8006124:	e6a4      	b.n	8005e70 <_printf_float+0x98>
 8006126:	2301      	movs	r3, #1
 8006128:	4631      	mov	r1, r6
 800612a:	4628      	mov	r0, r5
 800612c:	9204      	str	r2, [sp, #16]
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f ae9d 	beq.w	8005e70 <_printf_float+0x98>
 8006136:	9b05      	ldr	r3, [sp, #20]
 8006138:	9a04      	ldr	r2, [sp, #16]
 800613a:	3301      	adds	r3, #1
 800613c:	9305      	str	r3, [sp, #20]
 800613e:	e7b7      	b.n	80060b0 <_printf_float+0x2d8>
 8006140:	4653      	mov	r3, sl
 8006142:	465a      	mov	r2, fp
 8006144:	4631      	mov	r1, r6
 8006146:	4628      	mov	r0, r5
 8006148:	47b8      	blx	r7
 800614a:	3001      	adds	r0, #1
 800614c:	d1be      	bne.n	80060cc <_printf_float+0x2f4>
 800614e:	e68f      	b.n	8005e70 <_printf_float+0x98>
 8006150:	9a04      	ldr	r2, [sp, #16]
 8006152:	464b      	mov	r3, r9
 8006154:	4442      	add	r2, r8
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	d1c1      	bne.n	80060e4 <_printf_float+0x30c>
 8006160:	e686      	b.n	8005e70 <_printf_float+0x98>
 8006162:	9a08      	ldr	r2, [sp, #32]
 8006164:	2a01      	cmp	r2, #1
 8006166:	dc01      	bgt.n	800616c <_printf_float+0x394>
 8006168:	07db      	lsls	r3, r3, #31
 800616a:	d537      	bpl.n	80061dc <_printf_float+0x404>
 800616c:	2301      	movs	r3, #1
 800616e:	4642      	mov	r2, r8
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	f43f ae7a 	beq.w	8005e70 <_printf_float+0x98>
 800617c:	4653      	mov	r3, sl
 800617e:	465a      	mov	r2, fp
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f ae72 	beq.w	8005e70 <_printf_float+0x98>
 800618c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006190:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	d01a      	beq.n	80061d2 <_printf_float+0x3fa>
 800619c:	3b01      	subs	r3, #1
 800619e:	f108 0201 	add.w	r2, r8, #1
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	d10e      	bne.n	80061ca <_printf_float+0x3f2>
 80061ac:	e660      	b.n	8005e70 <_printf_float+0x98>
 80061ae:	2301      	movs	r3, #1
 80061b0:	464a      	mov	r2, r9
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f ae59 	beq.w	8005e70 <_printf_float+0x98>
 80061be:	f108 0801 	add.w	r8, r8, #1
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4543      	cmp	r3, r8
 80061c8:	dcf1      	bgt.n	80061ae <_printf_float+0x3d6>
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061d0:	e6dd      	b.n	8005f8e <_printf_float+0x1b6>
 80061d2:	f04f 0800 	mov.w	r8, #0
 80061d6:	f104 091a 	add.w	r9, r4, #26
 80061da:	e7f2      	b.n	80061c2 <_printf_float+0x3ea>
 80061dc:	2301      	movs	r3, #1
 80061de:	4642      	mov	r2, r8
 80061e0:	e7df      	b.n	80061a2 <_printf_float+0x3ca>
 80061e2:	2301      	movs	r3, #1
 80061e4:	464a      	mov	r2, r9
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f ae3f 	beq.w	8005e70 <_printf_float+0x98>
 80061f2:	f108 0801 	add.w	r8, r8, #1
 80061f6:	68e3      	ldr	r3, [r4, #12]
 80061f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061fa:	1a5b      	subs	r3, r3, r1
 80061fc:	4543      	cmp	r3, r8
 80061fe:	dcf0      	bgt.n	80061e2 <_printf_float+0x40a>
 8006200:	e6f9      	b.n	8005ff6 <_printf_float+0x21e>
 8006202:	f04f 0800 	mov.w	r8, #0
 8006206:	f104 0919 	add.w	r9, r4, #25
 800620a:	e7f4      	b.n	80061f6 <_printf_float+0x41e>

0800620c <_printf_common>:
 800620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	4616      	mov	r6, r2
 8006212:	4699      	mov	r9, r3
 8006214:	688a      	ldr	r2, [r1, #8]
 8006216:	690b      	ldr	r3, [r1, #16]
 8006218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800621c:	4293      	cmp	r3, r2
 800621e:	bfb8      	it	lt
 8006220:	4613      	movlt	r3, r2
 8006222:	6033      	str	r3, [r6, #0]
 8006224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006228:	4607      	mov	r7, r0
 800622a:	460c      	mov	r4, r1
 800622c:	b10a      	cbz	r2, 8006232 <_printf_common+0x26>
 800622e:	3301      	adds	r3, #1
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	0699      	lsls	r1, r3, #26
 8006236:	bf42      	ittt	mi
 8006238:	6833      	ldrmi	r3, [r6, #0]
 800623a:	3302      	addmi	r3, #2
 800623c:	6033      	strmi	r3, [r6, #0]
 800623e:	6825      	ldr	r5, [r4, #0]
 8006240:	f015 0506 	ands.w	r5, r5, #6
 8006244:	d106      	bne.n	8006254 <_printf_common+0x48>
 8006246:	f104 0a19 	add.w	sl, r4, #25
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	6832      	ldr	r2, [r6, #0]
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	42ab      	cmp	r3, r5
 8006252:	dc26      	bgt.n	80062a2 <_printf_common+0x96>
 8006254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006258:	1e13      	subs	r3, r2, #0
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	bf18      	it	ne
 800625e:	2301      	movne	r3, #1
 8006260:	0692      	lsls	r2, r2, #26
 8006262:	d42b      	bmi.n	80062bc <_printf_common+0xb0>
 8006264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006268:	4649      	mov	r1, r9
 800626a:	4638      	mov	r0, r7
 800626c:	47c0      	blx	r8
 800626e:	3001      	adds	r0, #1
 8006270:	d01e      	beq.n	80062b0 <_printf_common+0xa4>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	6922      	ldr	r2, [r4, #16]
 8006276:	f003 0306 	and.w	r3, r3, #6
 800627a:	2b04      	cmp	r3, #4
 800627c:	bf02      	ittt	eq
 800627e:	68e5      	ldreq	r5, [r4, #12]
 8006280:	6833      	ldreq	r3, [r6, #0]
 8006282:	1aed      	subeq	r5, r5, r3
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	bf0c      	ite	eq
 8006288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800628c:	2500      	movne	r5, #0
 800628e:	4293      	cmp	r3, r2
 8006290:	bfc4      	itt	gt
 8006292:	1a9b      	subgt	r3, r3, r2
 8006294:	18ed      	addgt	r5, r5, r3
 8006296:	2600      	movs	r6, #0
 8006298:	341a      	adds	r4, #26
 800629a:	42b5      	cmp	r5, r6
 800629c:	d11a      	bne.n	80062d4 <_printf_common+0xc8>
 800629e:	2000      	movs	r0, #0
 80062a0:	e008      	b.n	80062b4 <_printf_common+0xa8>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4652      	mov	r2, sl
 80062a6:	4649      	mov	r1, r9
 80062a8:	4638      	mov	r0, r7
 80062aa:	47c0      	blx	r8
 80062ac:	3001      	adds	r0, #1
 80062ae:	d103      	bne.n	80062b8 <_printf_common+0xac>
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b8:	3501      	adds	r5, #1
 80062ba:	e7c6      	b.n	800624a <_printf_common+0x3e>
 80062bc:	18e1      	adds	r1, r4, r3
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	2030      	movs	r0, #48	; 0x30
 80062c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062c6:	4422      	add	r2, r4
 80062c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062d0:	3302      	adds	r3, #2
 80062d2:	e7c7      	b.n	8006264 <_printf_common+0x58>
 80062d4:	2301      	movs	r3, #1
 80062d6:	4622      	mov	r2, r4
 80062d8:	4649      	mov	r1, r9
 80062da:	4638      	mov	r0, r7
 80062dc:	47c0      	blx	r8
 80062de:	3001      	adds	r0, #1
 80062e0:	d0e6      	beq.n	80062b0 <_printf_common+0xa4>
 80062e2:	3601      	adds	r6, #1
 80062e4:	e7d9      	b.n	800629a <_printf_common+0x8e>
	...

080062e8 <_printf_i>:
 80062e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	7e0f      	ldrb	r7, [r1, #24]
 80062ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062f0:	2f78      	cmp	r7, #120	; 0x78
 80062f2:	4691      	mov	r9, r2
 80062f4:	4680      	mov	r8, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	469a      	mov	sl, r3
 80062fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062fe:	d807      	bhi.n	8006310 <_printf_i+0x28>
 8006300:	2f62      	cmp	r7, #98	; 0x62
 8006302:	d80a      	bhi.n	800631a <_printf_i+0x32>
 8006304:	2f00      	cmp	r7, #0
 8006306:	f000 80d4 	beq.w	80064b2 <_printf_i+0x1ca>
 800630a:	2f58      	cmp	r7, #88	; 0x58
 800630c:	f000 80c0 	beq.w	8006490 <_printf_i+0x1a8>
 8006310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006318:	e03a      	b.n	8006390 <_printf_i+0xa8>
 800631a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800631e:	2b15      	cmp	r3, #21
 8006320:	d8f6      	bhi.n	8006310 <_printf_i+0x28>
 8006322:	a101      	add	r1, pc, #4	; (adr r1, 8006328 <_printf_i+0x40>)
 8006324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006328:	08006381 	.word	0x08006381
 800632c:	08006395 	.word	0x08006395
 8006330:	08006311 	.word	0x08006311
 8006334:	08006311 	.word	0x08006311
 8006338:	08006311 	.word	0x08006311
 800633c:	08006311 	.word	0x08006311
 8006340:	08006395 	.word	0x08006395
 8006344:	08006311 	.word	0x08006311
 8006348:	08006311 	.word	0x08006311
 800634c:	08006311 	.word	0x08006311
 8006350:	08006311 	.word	0x08006311
 8006354:	08006499 	.word	0x08006499
 8006358:	080063c1 	.word	0x080063c1
 800635c:	08006453 	.word	0x08006453
 8006360:	08006311 	.word	0x08006311
 8006364:	08006311 	.word	0x08006311
 8006368:	080064bb 	.word	0x080064bb
 800636c:	08006311 	.word	0x08006311
 8006370:	080063c1 	.word	0x080063c1
 8006374:	08006311 	.word	0x08006311
 8006378:	08006311 	.word	0x08006311
 800637c:	0800645b 	.word	0x0800645b
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	602a      	str	r2, [r5, #0]
 8006388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800638c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006390:	2301      	movs	r3, #1
 8006392:	e09f      	b.n	80064d4 <_printf_i+0x1ec>
 8006394:	6820      	ldr	r0, [r4, #0]
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	0607      	lsls	r7, r0, #24
 800639a:	f103 0104 	add.w	r1, r3, #4
 800639e:	6029      	str	r1, [r5, #0]
 80063a0:	d501      	bpl.n	80063a6 <_printf_i+0xbe>
 80063a2:	681e      	ldr	r6, [r3, #0]
 80063a4:	e003      	b.n	80063ae <_printf_i+0xc6>
 80063a6:	0646      	lsls	r6, r0, #25
 80063a8:	d5fb      	bpl.n	80063a2 <_printf_i+0xba>
 80063aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	da03      	bge.n	80063ba <_printf_i+0xd2>
 80063b2:	232d      	movs	r3, #45	; 0x2d
 80063b4:	4276      	negs	r6, r6
 80063b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ba:	485a      	ldr	r0, [pc, #360]	; (8006524 <_printf_i+0x23c>)
 80063bc:	230a      	movs	r3, #10
 80063be:	e012      	b.n	80063e6 <_printf_i+0xfe>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	6029      	str	r1, [r5, #0]
 80063c8:	0605      	lsls	r5, r0, #24
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0xe8>
 80063cc:	681e      	ldr	r6, [r3, #0]
 80063ce:	e002      	b.n	80063d6 <_printf_i+0xee>
 80063d0:	0641      	lsls	r1, r0, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0xe4>
 80063d4:	881e      	ldrh	r6, [r3, #0]
 80063d6:	4853      	ldr	r0, [pc, #332]	; (8006524 <_printf_i+0x23c>)
 80063d8:	2f6f      	cmp	r7, #111	; 0x6f
 80063da:	bf0c      	ite	eq
 80063dc:	2308      	moveq	r3, #8
 80063de:	230a      	movne	r3, #10
 80063e0:	2100      	movs	r1, #0
 80063e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063e6:	6865      	ldr	r5, [r4, #4]
 80063e8:	60a5      	str	r5, [r4, #8]
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	bfa2      	ittt	ge
 80063ee:	6821      	ldrge	r1, [r4, #0]
 80063f0:	f021 0104 	bicge.w	r1, r1, #4
 80063f4:	6021      	strge	r1, [r4, #0]
 80063f6:	b90e      	cbnz	r6, 80063fc <_printf_i+0x114>
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	d04b      	beq.n	8006494 <_printf_i+0x1ac>
 80063fc:	4615      	mov	r5, r2
 80063fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006402:	fb03 6711 	mls	r7, r3, r1, r6
 8006406:	5dc7      	ldrb	r7, [r0, r7]
 8006408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800640c:	4637      	mov	r7, r6
 800640e:	42bb      	cmp	r3, r7
 8006410:	460e      	mov	r6, r1
 8006412:	d9f4      	bls.n	80063fe <_printf_i+0x116>
 8006414:	2b08      	cmp	r3, #8
 8006416:	d10b      	bne.n	8006430 <_printf_i+0x148>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	07de      	lsls	r6, r3, #31
 800641c:	d508      	bpl.n	8006430 <_printf_i+0x148>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	6861      	ldr	r1, [r4, #4]
 8006422:	4299      	cmp	r1, r3
 8006424:	bfde      	ittt	le
 8006426:	2330      	movle	r3, #48	; 0x30
 8006428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800642c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006430:	1b52      	subs	r2, r2, r5
 8006432:	6122      	str	r2, [r4, #16]
 8006434:	f8cd a000 	str.w	sl, [sp]
 8006438:	464b      	mov	r3, r9
 800643a:	aa03      	add	r2, sp, #12
 800643c:	4621      	mov	r1, r4
 800643e:	4640      	mov	r0, r8
 8006440:	f7ff fee4 	bl	800620c <_printf_common>
 8006444:	3001      	adds	r0, #1
 8006446:	d14a      	bne.n	80064de <_printf_i+0x1f6>
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	b004      	add	sp, #16
 800644e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	f043 0320 	orr.w	r3, r3, #32
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	4833      	ldr	r0, [pc, #204]	; (8006528 <_printf_i+0x240>)
 800645c:	2778      	movs	r7, #120	; 0x78
 800645e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	061f      	lsls	r7, r3, #24
 8006468:	f851 6b04 	ldr.w	r6, [r1], #4
 800646c:	d402      	bmi.n	8006474 <_printf_i+0x18c>
 800646e:	065f      	lsls	r7, r3, #25
 8006470:	bf48      	it	mi
 8006472:	b2b6      	uxthmi	r6, r6
 8006474:	07df      	lsls	r7, r3, #31
 8006476:	bf48      	it	mi
 8006478:	f043 0320 	orrmi.w	r3, r3, #32
 800647c:	6029      	str	r1, [r5, #0]
 800647e:	bf48      	it	mi
 8006480:	6023      	strmi	r3, [r4, #0]
 8006482:	b91e      	cbnz	r6, 800648c <_printf_i+0x1a4>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	f023 0320 	bic.w	r3, r3, #32
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	2310      	movs	r3, #16
 800648e:	e7a7      	b.n	80063e0 <_printf_i+0xf8>
 8006490:	4824      	ldr	r0, [pc, #144]	; (8006524 <_printf_i+0x23c>)
 8006492:	e7e4      	b.n	800645e <_printf_i+0x176>
 8006494:	4615      	mov	r5, r2
 8006496:	e7bd      	b.n	8006414 <_printf_i+0x12c>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	6826      	ldr	r6, [r4, #0]
 800649c:	6961      	ldr	r1, [r4, #20]
 800649e:	1d18      	adds	r0, r3, #4
 80064a0:	6028      	str	r0, [r5, #0]
 80064a2:	0635      	lsls	r5, r6, #24
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	d501      	bpl.n	80064ac <_printf_i+0x1c4>
 80064a8:	6019      	str	r1, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <_printf_i+0x1ca>
 80064ac:	0670      	lsls	r0, r6, #25
 80064ae:	d5fb      	bpl.n	80064a8 <_printf_i+0x1c0>
 80064b0:	8019      	strh	r1, [r3, #0]
 80064b2:	2300      	movs	r3, #0
 80064b4:	6123      	str	r3, [r4, #16]
 80064b6:	4615      	mov	r5, r2
 80064b8:	e7bc      	b.n	8006434 <_printf_i+0x14c>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	1d1a      	adds	r2, r3, #4
 80064be:	602a      	str	r2, [r5, #0]
 80064c0:	681d      	ldr	r5, [r3, #0]
 80064c2:	6862      	ldr	r2, [r4, #4]
 80064c4:	2100      	movs	r1, #0
 80064c6:	4628      	mov	r0, r5
 80064c8:	f7f9 feba 	bl	8000240 <memchr>
 80064cc:	b108      	cbz	r0, 80064d2 <_printf_i+0x1ea>
 80064ce:	1b40      	subs	r0, r0, r5
 80064d0:	6060      	str	r0, [r4, #4]
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	2300      	movs	r3, #0
 80064d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064dc:	e7aa      	b.n	8006434 <_printf_i+0x14c>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4649      	mov	r1, r9
 80064e4:	4640      	mov	r0, r8
 80064e6:	47d0      	blx	sl
 80064e8:	3001      	adds	r0, #1
 80064ea:	d0ad      	beq.n	8006448 <_printf_i+0x160>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	079b      	lsls	r3, r3, #30
 80064f0:	d413      	bmi.n	800651a <_printf_i+0x232>
 80064f2:	68e0      	ldr	r0, [r4, #12]
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	4298      	cmp	r0, r3
 80064f8:	bfb8      	it	lt
 80064fa:	4618      	movlt	r0, r3
 80064fc:	e7a6      	b.n	800644c <_printf_i+0x164>
 80064fe:	2301      	movs	r3, #1
 8006500:	4632      	mov	r2, r6
 8006502:	4649      	mov	r1, r9
 8006504:	4640      	mov	r0, r8
 8006506:	47d0      	blx	sl
 8006508:	3001      	adds	r0, #1
 800650a:	d09d      	beq.n	8006448 <_printf_i+0x160>
 800650c:	3501      	adds	r5, #1
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	9903      	ldr	r1, [sp, #12]
 8006512:	1a5b      	subs	r3, r3, r1
 8006514:	42ab      	cmp	r3, r5
 8006516:	dcf2      	bgt.n	80064fe <_printf_i+0x216>
 8006518:	e7eb      	b.n	80064f2 <_printf_i+0x20a>
 800651a:	2500      	movs	r5, #0
 800651c:	f104 0619 	add.w	r6, r4, #25
 8006520:	e7f5      	b.n	800650e <_printf_i+0x226>
 8006522:	bf00      	nop
 8006524:	0800a592 	.word	0x0800a592
 8006528:	0800a5a3 	.word	0x0800a5a3

0800652c <_scanf_float>:
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	b087      	sub	sp, #28
 8006532:	4617      	mov	r7, r2
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	688b      	ldr	r3, [r1, #8]
 8006538:	1e5a      	subs	r2, r3, #1
 800653a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800653e:	bf83      	ittte	hi
 8006540:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006544:	195b      	addhi	r3, r3, r5
 8006546:	9302      	strhi	r3, [sp, #8]
 8006548:	2300      	movls	r3, #0
 800654a:	bf86      	itte	hi
 800654c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006550:	608b      	strhi	r3, [r1, #8]
 8006552:	9302      	strls	r3, [sp, #8]
 8006554:	680b      	ldr	r3, [r1, #0]
 8006556:	468b      	mov	fp, r1
 8006558:	2500      	movs	r5, #0
 800655a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800655e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006562:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006566:	4680      	mov	r8, r0
 8006568:	460c      	mov	r4, r1
 800656a:	465e      	mov	r6, fp
 800656c:	46aa      	mov	sl, r5
 800656e:	46a9      	mov	r9, r5
 8006570:	9501      	str	r5, [sp, #4]
 8006572:	68a2      	ldr	r2, [r4, #8]
 8006574:	b152      	cbz	r2, 800658c <_scanf_float+0x60>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b4e      	cmp	r3, #78	; 0x4e
 800657c:	d864      	bhi.n	8006648 <_scanf_float+0x11c>
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d83c      	bhi.n	80065fc <_scanf_float+0xd0>
 8006582:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006586:	b2c8      	uxtb	r0, r1
 8006588:	280e      	cmp	r0, #14
 800658a:	d93a      	bls.n	8006602 <_scanf_float+0xd6>
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	d003      	beq.n	800659a <_scanf_float+0x6e>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800659e:	f1ba 0f01 	cmp.w	sl, #1
 80065a2:	f200 8113 	bhi.w	80067cc <_scanf_float+0x2a0>
 80065a6:	455e      	cmp	r6, fp
 80065a8:	f200 8105 	bhi.w	80067b6 <_scanf_float+0x28a>
 80065ac:	2501      	movs	r5, #1
 80065ae:	4628      	mov	r0, r5
 80065b0:	b007      	add	sp, #28
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065ba:	2a0d      	cmp	r2, #13
 80065bc:	d8e6      	bhi.n	800658c <_scanf_float+0x60>
 80065be:	a101      	add	r1, pc, #4	; (adr r1, 80065c4 <_scanf_float+0x98>)
 80065c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065c4:	08006703 	.word	0x08006703
 80065c8:	0800658d 	.word	0x0800658d
 80065cc:	0800658d 	.word	0x0800658d
 80065d0:	0800658d 	.word	0x0800658d
 80065d4:	08006763 	.word	0x08006763
 80065d8:	0800673b 	.word	0x0800673b
 80065dc:	0800658d 	.word	0x0800658d
 80065e0:	0800658d 	.word	0x0800658d
 80065e4:	08006711 	.word	0x08006711
 80065e8:	0800658d 	.word	0x0800658d
 80065ec:	0800658d 	.word	0x0800658d
 80065f0:	0800658d 	.word	0x0800658d
 80065f4:	0800658d 	.word	0x0800658d
 80065f8:	080066c9 	.word	0x080066c9
 80065fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006600:	e7db      	b.n	80065ba <_scanf_float+0x8e>
 8006602:	290e      	cmp	r1, #14
 8006604:	d8c2      	bhi.n	800658c <_scanf_float+0x60>
 8006606:	a001      	add	r0, pc, #4	; (adr r0, 800660c <_scanf_float+0xe0>)
 8006608:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800660c:	080066bb 	.word	0x080066bb
 8006610:	0800658d 	.word	0x0800658d
 8006614:	080066bb 	.word	0x080066bb
 8006618:	0800674f 	.word	0x0800674f
 800661c:	0800658d 	.word	0x0800658d
 8006620:	08006669 	.word	0x08006669
 8006624:	080066a5 	.word	0x080066a5
 8006628:	080066a5 	.word	0x080066a5
 800662c:	080066a5 	.word	0x080066a5
 8006630:	080066a5 	.word	0x080066a5
 8006634:	080066a5 	.word	0x080066a5
 8006638:	080066a5 	.word	0x080066a5
 800663c:	080066a5 	.word	0x080066a5
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080066a5 	.word	0x080066a5
 8006648:	2b6e      	cmp	r3, #110	; 0x6e
 800664a:	d809      	bhi.n	8006660 <_scanf_float+0x134>
 800664c:	2b60      	cmp	r3, #96	; 0x60
 800664e:	d8b2      	bhi.n	80065b6 <_scanf_float+0x8a>
 8006650:	2b54      	cmp	r3, #84	; 0x54
 8006652:	d077      	beq.n	8006744 <_scanf_float+0x218>
 8006654:	2b59      	cmp	r3, #89	; 0x59
 8006656:	d199      	bne.n	800658c <_scanf_float+0x60>
 8006658:	2d07      	cmp	r5, #7
 800665a:	d197      	bne.n	800658c <_scanf_float+0x60>
 800665c:	2508      	movs	r5, #8
 800665e:	e029      	b.n	80066b4 <_scanf_float+0x188>
 8006660:	2b74      	cmp	r3, #116	; 0x74
 8006662:	d06f      	beq.n	8006744 <_scanf_float+0x218>
 8006664:	2b79      	cmp	r3, #121	; 0x79
 8006666:	e7f6      	b.n	8006656 <_scanf_float+0x12a>
 8006668:	6821      	ldr	r1, [r4, #0]
 800666a:	05c8      	lsls	r0, r1, #23
 800666c:	d51a      	bpl.n	80066a4 <_scanf_float+0x178>
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006674:	6021      	str	r1, [r4, #0]
 8006676:	f109 0901 	add.w	r9, r9, #1
 800667a:	b11b      	cbz	r3, 8006684 <_scanf_float+0x158>
 800667c:	3b01      	subs	r3, #1
 800667e:	3201      	adds	r2, #1
 8006680:	9302      	str	r3, [sp, #8]
 8006682:	60a2      	str	r2, [r4, #8]
 8006684:	68a3      	ldr	r3, [r4, #8]
 8006686:	3b01      	subs	r3, #1
 8006688:	60a3      	str	r3, [r4, #8]
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	3301      	adds	r3, #1
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3b01      	subs	r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	f340 8084 	ble.w	80067a4 <_scanf_float+0x278>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	e766      	b.n	8006572 <_scanf_float+0x46>
 80066a4:	eb1a 0f05 	cmn.w	sl, r5
 80066a8:	f47f af70 	bne.w	800658c <_scanf_float+0x60>
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80066b2:	6022      	str	r2, [r4, #0]
 80066b4:	f806 3b01 	strb.w	r3, [r6], #1
 80066b8:	e7e4      	b.n	8006684 <_scanf_float+0x158>
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	0610      	lsls	r0, r2, #24
 80066be:	f57f af65 	bpl.w	800658c <_scanf_float+0x60>
 80066c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c6:	e7f4      	b.n	80066b2 <_scanf_float+0x186>
 80066c8:	f1ba 0f00 	cmp.w	sl, #0
 80066cc:	d10e      	bne.n	80066ec <_scanf_float+0x1c0>
 80066ce:	f1b9 0f00 	cmp.w	r9, #0
 80066d2:	d10e      	bne.n	80066f2 <_scanf_float+0x1c6>
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066de:	d108      	bne.n	80066f2 <_scanf_float+0x1c6>
 80066e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066e4:	6022      	str	r2, [r4, #0]
 80066e6:	f04f 0a01 	mov.w	sl, #1
 80066ea:	e7e3      	b.n	80066b4 <_scanf_float+0x188>
 80066ec:	f1ba 0f02 	cmp.w	sl, #2
 80066f0:	d055      	beq.n	800679e <_scanf_float+0x272>
 80066f2:	2d01      	cmp	r5, #1
 80066f4:	d002      	beq.n	80066fc <_scanf_float+0x1d0>
 80066f6:	2d04      	cmp	r5, #4
 80066f8:	f47f af48 	bne.w	800658c <_scanf_float+0x60>
 80066fc:	3501      	adds	r5, #1
 80066fe:	b2ed      	uxtb	r5, r5
 8006700:	e7d8      	b.n	80066b4 <_scanf_float+0x188>
 8006702:	f1ba 0f01 	cmp.w	sl, #1
 8006706:	f47f af41 	bne.w	800658c <_scanf_float+0x60>
 800670a:	f04f 0a02 	mov.w	sl, #2
 800670e:	e7d1      	b.n	80066b4 <_scanf_float+0x188>
 8006710:	b97d      	cbnz	r5, 8006732 <_scanf_float+0x206>
 8006712:	f1b9 0f00 	cmp.w	r9, #0
 8006716:	f47f af3c 	bne.w	8006592 <_scanf_float+0x66>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006720:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006724:	f47f af39 	bne.w	800659a <_scanf_float+0x6e>
 8006728:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800672c:	6022      	str	r2, [r4, #0]
 800672e:	2501      	movs	r5, #1
 8006730:	e7c0      	b.n	80066b4 <_scanf_float+0x188>
 8006732:	2d03      	cmp	r5, #3
 8006734:	d0e2      	beq.n	80066fc <_scanf_float+0x1d0>
 8006736:	2d05      	cmp	r5, #5
 8006738:	e7de      	b.n	80066f8 <_scanf_float+0x1cc>
 800673a:	2d02      	cmp	r5, #2
 800673c:	f47f af26 	bne.w	800658c <_scanf_float+0x60>
 8006740:	2503      	movs	r5, #3
 8006742:	e7b7      	b.n	80066b4 <_scanf_float+0x188>
 8006744:	2d06      	cmp	r5, #6
 8006746:	f47f af21 	bne.w	800658c <_scanf_float+0x60>
 800674a:	2507      	movs	r5, #7
 800674c:	e7b2      	b.n	80066b4 <_scanf_float+0x188>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	0591      	lsls	r1, r2, #22
 8006752:	f57f af1b 	bpl.w	800658c <_scanf_float+0x60>
 8006756:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006760:	e7a8      	b.n	80066b4 <_scanf_float+0x188>
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006768:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800676c:	d006      	beq.n	800677c <_scanf_float+0x250>
 800676e:	0550      	lsls	r0, r2, #21
 8006770:	f57f af0c 	bpl.w	800658c <_scanf_float+0x60>
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	f43f af0f 	beq.w	800659a <_scanf_float+0x6e>
 800677c:	0591      	lsls	r1, r2, #22
 800677e:	bf58      	it	pl
 8006780:	9901      	ldrpl	r1, [sp, #4]
 8006782:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006786:	bf58      	it	pl
 8006788:	eba9 0101 	subpl.w	r1, r9, r1
 800678c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006790:	bf58      	it	pl
 8006792:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	f04f 0900 	mov.w	r9, #0
 800679c:	e78a      	b.n	80066b4 <_scanf_float+0x188>
 800679e:	f04f 0a03 	mov.w	sl, #3
 80067a2:	e787      	b.n	80066b4 <_scanf_float+0x188>
 80067a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067a8:	4639      	mov	r1, r7
 80067aa:	4640      	mov	r0, r8
 80067ac:	4798      	blx	r3
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f43f aedf 	beq.w	8006572 <_scanf_float+0x46>
 80067b4:	e6ea      	b.n	800658c <_scanf_float+0x60>
 80067b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067be:	463a      	mov	r2, r7
 80067c0:	4640      	mov	r0, r8
 80067c2:	4798      	blx	r3
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	6123      	str	r3, [r4, #16]
 80067ca:	e6ec      	b.n	80065a6 <_scanf_float+0x7a>
 80067cc:	1e6b      	subs	r3, r5, #1
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d825      	bhi.n	800681e <_scanf_float+0x2f2>
 80067d2:	2d02      	cmp	r5, #2
 80067d4:	d836      	bhi.n	8006844 <_scanf_float+0x318>
 80067d6:	455e      	cmp	r6, fp
 80067d8:	f67f aee8 	bls.w	80065ac <_scanf_float+0x80>
 80067dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067e4:	463a      	mov	r2, r7
 80067e6:	4640      	mov	r0, r8
 80067e8:	4798      	blx	r3
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	e7f1      	b.n	80067d6 <_scanf_float+0x2aa>
 80067f2:	9802      	ldr	r0, [sp, #8]
 80067f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	463a      	mov	r2, r7
 8006800:	4640      	mov	r0, r8
 8006802:	4798      	blx	r3
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	3b01      	subs	r3, #1
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800680e:	fa5f fa8a 	uxtb.w	sl, sl
 8006812:	f1ba 0f02 	cmp.w	sl, #2
 8006816:	d1ec      	bne.n	80067f2 <_scanf_float+0x2c6>
 8006818:	3d03      	subs	r5, #3
 800681a:	b2ed      	uxtb	r5, r5
 800681c:	1b76      	subs	r6, r6, r5
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	05da      	lsls	r2, r3, #23
 8006822:	d52f      	bpl.n	8006884 <_scanf_float+0x358>
 8006824:	055b      	lsls	r3, r3, #21
 8006826:	d510      	bpl.n	800684a <_scanf_float+0x31e>
 8006828:	455e      	cmp	r6, fp
 800682a:	f67f aebf 	bls.w	80065ac <_scanf_float+0x80>
 800682e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006836:	463a      	mov	r2, r7
 8006838:	4640      	mov	r0, r8
 800683a:	4798      	blx	r3
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	3b01      	subs	r3, #1
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	e7f1      	b.n	8006828 <_scanf_float+0x2fc>
 8006844:	46aa      	mov	sl, r5
 8006846:	9602      	str	r6, [sp, #8]
 8006848:	e7df      	b.n	800680a <_scanf_float+0x2de>
 800684a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	2965      	cmp	r1, #101	; 0x65
 8006852:	f103 33ff 	add.w	r3, r3, #4294967295
 8006856:	f106 35ff 	add.w	r5, r6, #4294967295
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	d00c      	beq.n	8006878 <_scanf_float+0x34c>
 800685e:	2945      	cmp	r1, #69	; 0x45
 8006860:	d00a      	beq.n	8006878 <_scanf_float+0x34c>
 8006862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006866:	463a      	mov	r2, r7
 8006868:	4640      	mov	r0, r8
 800686a:	4798      	blx	r3
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006872:	3b01      	subs	r3, #1
 8006874:	1eb5      	subs	r5, r6, #2
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800687c:	463a      	mov	r2, r7
 800687e:	4640      	mov	r0, r8
 8006880:	4798      	blx	r3
 8006882:	462e      	mov	r6, r5
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	f015 0510 	ands.w	r5, r5, #16
 800688a:	d14d      	bne.n	8006928 <_scanf_float+0x3fc>
 800688c:	7035      	strb	r5, [r6, #0]
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006898:	d11a      	bne.n	80068d0 <_scanf_float+0x3a4>
 800689a:	9b01      	ldr	r3, [sp, #4]
 800689c:	454b      	cmp	r3, r9
 800689e:	eba3 0209 	sub.w	r2, r3, r9
 80068a2:	d122      	bne.n	80068ea <_scanf_float+0x3be>
 80068a4:	2200      	movs	r2, #0
 80068a6:	4659      	mov	r1, fp
 80068a8:	4640      	mov	r0, r8
 80068aa:	f002 fb5b 	bl	8008f64 <_strtod_r>
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	6821      	ldr	r1, [r4, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f011 0f02 	tst.w	r1, #2
 80068b8:	f103 0204 	add.w	r2, r3, #4
 80068bc:	d020      	beq.n	8006900 <_scanf_float+0x3d4>
 80068be:	9903      	ldr	r1, [sp, #12]
 80068c0:	600a      	str	r2, [r1, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	ed83 0b00 	vstr	d0, [r3]
 80068c8:	68e3      	ldr	r3, [r4, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60e3      	str	r3, [r4, #12]
 80068ce:	e66e      	b.n	80065ae <_scanf_float+0x82>
 80068d0:	9b04      	ldr	r3, [sp, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0e6      	beq.n	80068a4 <_scanf_float+0x378>
 80068d6:	9905      	ldr	r1, [sp, #20]
 80068d8:	230a      	movs	r3, #10
 80068da:	462a      	mov	r2, r5
 80068dc:	3101      	adds	r1, #1
 80068de:	4640      	mov	r0, r8
 80068e0:	f002 fbc8 	bl	8009074 <_strtol_r>
 80068e4:	9b04      	ldr	r3, [sp, #16]
 80068e6:	9e05      	ldr	r6, [sp, #20]
 80068e8:	1ac2      	subs	r2, r0, r3
 80068ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80068ee:	429e      	cmp	r6, r3
 80068f0:	bf28      	it	cs
 80068f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80068f6:	490d      	ldr	r1, [pc, #52]	; (800692c <_scanf_float+0x400>)
 80068f8:	4630      	mov	r0, r6
 80068fa:	f000 f8dd 	bl	8006ab8 <siprintf>
 80068fe:	e7d1      	b.n	80068a4 <_scanf_float+0x378>
 8006900:	f011 0f04 	tst.w	r1, #4
 8006904:	9903      	ldr	r1, [sp, #12]
 8006906:	600a      	str	r2, [r1, #0]
 8006908:	d1db      	bne.n	80068c2 <_scanf_float+0x396>
 800690a:	eeb4 0b40 	vcmp.f64	d0, d0
 800690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006912:	681e      	ldr	r6, [r3, #0]
 8006914:	d705      	bvc.n	8006922 <_scanf_float+0x3f6>
 8006916:	4806      	ldr	r0, [pc, #24]	; (8006930 <_scanf_float+0x404>)
 8006918:	f000 f9b2 	bl	8006c80 <nanf>
 800691c:	ed86 0a00 	vstr	s0, [r6]
 8006920:	e7d2      	b.n	80068c8 <_scanf_float+0x39c>
 8006922:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006926:	e7f9      	b.n	800691c <_scanf_float+0x3f0>
 8006928:	2500      	movs	r5, #0
 800692a:	e640      	b.n	80065ae <_scanf_float+0x82>
 800692c:	0800a5b4 	.word	0x0800a5b4
 8006930:	0800a945 	.word	0x0800a945

08006934 <std>:
 8006934:	2300      	movs	r3, #0
 8006936:	b510      	push	{r4, lr}
 8006938:	4604      	mov	r4, r0
 800693a:	e9c0 3300 	strd	r3, r3, [r0]
 800693e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006942:	6083      	str	r3, [r0, #8]
 8006944:	8181      	strh	r1, [r0, #12]
 8006946:	6643      	str	r3, [r0, #100]	; 0x64
 8006948:	81c2      	strh	r2, [r0, #14]
 800694a:	6183      	str	r3, [r0, #24]
 800694c:	4619      	mov	r1, r3
 800694e:	2208      	movs	r2, #8
 8006950:	305c      	adds	r0, #92	; 0x5c
 8006952:	f000 f914 	bl	8006b7e <memset>
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <std+0x58>)
 8006958:	6263      	str	r3, [r4, #36]	; 0x24
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <std+0x5c>)
 800695c:	62a3      	str	r3, [r4, #40]	; 0x28
 800695e:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <std+0x60>)
 8006960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006962:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <std+0x64>)
 8006964:	6323      	str	r3, [r4, #48]	; 0x30
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <std+0x68>)
 8006968:	6224      	str	r4, [r4, #32]
 800696a:	429c      	cmp	r4, r3
 800696c:	d006      	beq.n	800697c <std+0x48>
 800696e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006972:	4294      	cmp	r4, r2
 8006974:	d002      	beq.n	800697c <std+0x48>
 8006976:	33d0      	adds	r3, #208	; 0xd0
 8006978:	429c      	cmp	r4, r3
 800697a:	d105      	bne.n	8006988 <std+0x54>
 800697c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f000 b978 	b.w	8006c78 <__retarget_lock_init_recursive>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	08006af9 	.word	0x08006af9
 8006990:	08006b1b 	.word	0x08006b1b
 8006994:	08006b53 	.word	0x08006b53
 8006998:	08006b77 	.word	0x08006b77
 800699c:	20000344 	.word	0x20000344

080069a0 <stdio_exit_handler>:
 80069a0:	4a02      	ldr	r2, [pc, #8]	; (80069ac <stdio_exit_handler+0xc>)
 80069a2:	4903      	ldr	r1, [pc, #12]	; (80069b0 <stdio_exit_handler+0x10>)
 80069a4:	4803      	ldr	r0, [pc, #12]	; (80069b4 <stdio_exit_handler+0x14>)
 80069a6:	f000 b869 	b.w	8006a7c <_fwalk_sglue>
 80069aa:	bf00      	nop
 80069ac:	20000010 	.word	0x20000010
 80069b0:	08009435 	.word	0x08009435
 80069b4:	2000001c 	.word	0x2000001c

080069b8 <cleanup_stdio>:
 80069b8:	6841      	ldr	r1, [r0, #4]
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <cleanup_stdio+0x34>)
 80069bc:	4299      	cmp	r1, r3
 80069be:	b510      	push	{r4, lr}
 80069c0:	4604      	mov	r4, r0
 80069c2:	d001      	beq.n	80069c8 <cleanup_stdio+0x10>
 80069c4:	f002 fd36 	bl	8009434 <_fflush_r>
 80069c8:	68a1      	ldr	r1, [r4, #8]
 80069ca:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <cleanup_stdio+0x38>)
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d002      	beq.n	80069d6 <cleanup_stdio+0x1e>
 80069d0:	4620      	mov	r0, r4
 80069d2:	f002 fd2f 	bl	8009434 <_fflush_r>
 80069d6:	68e1      	ldr	r1, [r4, #12]
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <cleanup_stdio+0x3c>)
 80069da:	4299      	cmp	r1, r3
 80069dc:	d004      	beq.n	80069e8 <cleanup_stdio+0x30>
 80069de:	4620      	mov	r0, r4
 80069e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e4:	f002 bd26 	b.w	8009434 <_fflush_r>
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	bf00      	nop
 80069ec:	20000344 	.word	0x20000344
 80069f0:	200003ac 	.word	0x200003ac
 80069f4:	20000414 	.word	0x20000414

080069f8 <global_stdio_init.part.0>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <global_stdio_init.part.0+0x30>)
 80069fc:	4c0b      	ldr	r4, [pc, #44]	; (8006a2c <global_stdio_init.part.0+0x34>)
 80069fe:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <global_stdio_init.part.0+0x38>)
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	4620      	mov	r0, r4
 8006a04:	2200      	movs	r2, #0
 8006a06:	2104      	movs	r1, #4
 8006a08:	f7ff ff94 	bl	8006934 <std>
 8006a0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a10:	2201      	movs	r2, #1
 8006a12:	2109      	movs	r1, #9
 8006a14:	f7ff ff8e 	bl	8006934 <std>
 8006a18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a22:	2112      	movs	r1, #18
 8006a24:	f7ff bf86 	b.w	8006934 <std>
 8006a28:	2000047c 	.word	0x2000047c
 8006a2c:	20000344 	.word	0x20000344
 8006a30:	080069a1 	.word	0x080069a1

08006a34 <__sfp_lock_acquire>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__sfp_lock_acquire+0x8>)
 8006a36:	f000 b920 	b.w	8006c7a <__retarget_lock_acquire_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20000485 	.word	0x20000485

08006a40 <__sfp_lock_release>:
 8006a40:	4801      	ldr	r0, [pc, #4]	; (8006a48 <__sfp_lock_release+0x8>)
 8006a42:	f000 b91b 	b.w	8006c7c <__retarget_lock_release_recursive>
 8006a46:	bf00      	nop
 8006a48:	20000485 	.word	0x20000485

08006a4c <__sinit>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4604      	mov	r4, r0
 8006a50:	f7ff fff0 	bl	8006a34 <__sfp_lock_acquire>
 8006a54:	6a23      	ldr	r3, [r4, #32]
 8006a56:	b11b      	cbz	r3, 8006a60 <__sinit+0x14>
 8006a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a5c:	f7ff bff0 	b.w	8006a40 <__sfp_lock_release>
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <__sinit+0x28>)
 8006a62:	6223      	str	r3, [r4, #32]
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <__sinit+0x2c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f5      	bne.n	8006a58 <__sinit+0xc>
 8006a6c:	f7ff ffc4 	bl	80069f8 <global_stdio_init.part.0>
 8006a70:	e7f2      	b.n	8006a58 <__sinit+0xc>
 8006a72:	bf00      	nop
 8006a74:	080069b9 	.word	0x080069b9
 8006a78:	2000047c 	.word	0x2000047c

08006a7c <_fwalk_sglue>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	4607      	mov	r7, r0
 8006a82:	4688      	mov	r8, r1
 8006a84:	4614      	mov	r4, r2
 8006a86:	2600      	movs	r6, #0
 8006a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a90:	d505      	bpl.n	8006a9e <_fwalk_sglue+0x22>
 8006a92:	6824      	ldr	r4, [r4, #0]
 8006a94:	2c00      	cmp	r4, #0
 8006a96:	d1f7      	bne.n	8006a88 <_fwalk_sglue+0xc>
 8006a98:	4630      	mov	r0, r6
 8006a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	89ab      	ldrh	r3, [r5, #12]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d907      	bls.n	8006ab4 <_fwalk_sglue+0x38>
 8006aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	d003      	beq.n	8006ab4 <_fwalk_sglue+0x38>
 8006aac:	4629      	mov	r1, r5
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	4306      	orrs	r6, r0
 8006ab4:	3568      	adds	r5, #104	; 0x68
 8006ab6:	e7e9      	b.n	8006a8c <_fwalk_sglue+0x10>

08006ab8 <siprintf>:
 8006ab8:	b40e      	push	{r1, r2, r3}
 8006aba:	b500      	push	{lr}
 8006abc:	b09c      	sub	sp, #112	; 0x70
 8006abe:	ab1d      	add	r3, sp, #116	; 0x74
 8006ac0:	9002      	str	r0, [sp, #8]
 8006ac2:	9006      	str	r0, [sp, #24]
 8006ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ac8:	4809      	ldr	r0, [pc, #36]	; (8006af0 <siprintf+0x38>)
 8006aca:	9107      	str	r1, [sp, #28]
 8006acc:	9104      	str	r1, [sp, #16]
 8006ace:	4909      	ldr	r1, [pc, #36]	; (8006af4 <siprintf+0x3c>)
 8006ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad4:	9105      	str	r1, [sp, #20]
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	a902      	add	r1, sp, #8
 8006adc:	f002 fb26 	bl	800912c <_svfiprintf_r>
 8006ae0:	9b02      	ldr	r3, [sp, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	b01c      	add	sp, #112	; 0x70
 8006ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aec:	b003      	add	sp, #12
 8006aee:	4770      	bx	lr
 8006af0:	20000068 	.word	0x20000068
 8006af4:	ffff0208 	.word	0xffff0208

08006af8 <__sread>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	460c      	mov	r4, r1
 8006afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b00:	f000 f86c 	bl	8006bdc <_read_r>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	bfab      	itete	ge
 8006b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b0c:	181b      	addge	r3, r3, r0
 8006b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b12:	bfac      	ite	ge
 8006b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b16:	81a3      	strhlt	r3, [r4, #12]
 8006b18:	bd10      	pop	{r4, pc}

08006b1a <__swrite>:
 8006b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1e:	461f      	mov	r7, r3
 8006b20:	898b      	ldrh	r3, [r1, #12]
 8006b22:	05db      	lsls	r3, r3, #23
 8006b24:	4605      	mov	r5, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	4616      	mov	r6, r2
 8006b2a:	d505      	bpl.n	8006b38 <__swrite+0x1e>
 8006b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b30:	2302      	movs	r3, #2
 8006b32:	2200      	movs	r2, #0
 8006b34:	f000 f840 	bl	8006bb8 <_lseek_r>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	4632      	mov	r2, r6
 8006b46:	463b      	mov	r3, r7
 8006b48:	4628      	mov	r0, r5
 8006b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4e:	f000 b857 	b.w	8006c00 <_write_r>

08006b52 <__sseek>:
 8006b52:	b510      	push	{r4, lr}
 8006b54:	460c      	mov	r4, r1
 8006b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5a:	f000 f82d 	bl	8006bb8 <_lseek_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	bf15      	itete	ne
 8006b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b6e:	81a3      	strheq	r3, [r4, #12]
 8006b70:	bf18      	it	ne
 8006b72:	81a3      	strhne	r3, [r4, #12]
 8006b74:	bd10      	pop	{r4, pc}

08006b76 <__sclose>:
 8006b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7a:	f000 b80d 	b.w	8006b98 <_close_r>

08006b7e <memset>:
 8006b7e:	4402      	add	r2, r0
 8006b80:	4603      	mov	r3, r0
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d100      	bne.n	8006b88 <memset+0xa>
 8006b86:	4770      	bx	lr
 8006b88:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8c:	e7f9      	b.n	8006b82 <memset+0x4>
	...

08006b90 <_localeconv_r>:
 8006b90:	4800      	ldr	r0, [pc, #0]	; (8006b94 <_localeconv_r+0x4>)
 8006b92:	4770      	bx	lr
 8006b94:	2000015c 	.word	0x2000015c

08006b98 <_close_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d06      	ldr	r5, [pc, #24]	; (8006bb4 <_close_r+0x1c>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	f7fa fff9 	bl	8001b9a <_close>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_close_r+0x1a>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_close_r+0x1a>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20000480 	.word	0x20000480

08006bb8 <_lseek_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	; (8006bd8 <_lseek_r+0x20>)
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f7fb f80e 	bl	8001be8 <_lseek>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_lseek_r+0x1e>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_lseek_r+0x1e>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20000480 	.word	0x20000480

08006bdc <_read_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d07      	ldr	r5, [pc, #28]	; (8006bfc <_read_r+0x20>)
 8006be0:	4604      	mov	r4, r0
 8006be2:	4608      	mov	r0, r1
 8006be4:	4611      	mov	r1, r2
 8006be6:	2200      	movs	r2, #0
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7fa ff9c 	bl	8001b28 <_read>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_read_r+0x1e>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_read_r+0x1e>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20000480 	.word	0x20000480

08006c00 <_write_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	; (8006c20 <_write_r+0x20>)
 8006c04:	4604      	mov	r4, r0
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f7fa ffa7 	bl	8001b62 <_write>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_write_r+0x1e>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_write_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	20000480 	.word	0x20000480

08006c24 <__errno>:
 8006c24:	4b01      	ldr	r3, [pc, #4]	; (8006c2c <__errno+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000068 	.word	0x20000068

08006c30 <__libc_init_array>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	4d0d      	ldr	r5, [pc, #52]	; (8006c68 <__libc_init_array+0x38>)
 8006c34:	4c0d      	ldr	r4, [pc, #52]	; (8006c6c <__libc_init_array+0x3c>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	42a6      	cmp	r6, r4
 8006c3e:	d109      	bne.n	8006c54 <__libc_init_array+0x24>
 8006c40:	4d0b      	ldr	r5, [pc, #44]	; (8006c70 <__libc_init_array+0x40>)
 8006c42:	4c0c      	ldr	r4, [pc, #48]	; (8006c74 <__libc_init_array+0x44>)
 8006c44:	f003 fb0c 	bl	800a260 <_init>
 8006c48:	1b64      	subs	r4, r4, r5
 8006c4a:	10a4      	asrs	r4, r4, #2
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	42a6      	cmp	r6, r4
 8006c50:	d105      	bne.n	8006c5e <__libc_init_array+0x2e>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c58:	4798      	blx	r3
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7ee      	b.n	8006c3c <__libc_init_array+0xc>
 8006c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c62:	4798      	blx	r3
 8006c64:	3601      	adds	r6, #1
 8006c66:	e7f2      	b.n	8006c4e <__libc_init_array+0x1e>
 8006c68:	0800a9b0 	.word	0x0800a9b0
 8006c6c:	0800a9b0 	.word	0x0800a9b0
 8006c70:	0800a9b0 	.word	0x0800a9b0
 8006c74:	0800a9b4 	.word	0x0800a9b4

08006c78 <__retarget_lock_init_recursive>:
 8006c78:	4770      	bx	lr

08006c7a <__retarget_lock_acquire_recursive>:
 8006c7a:	4770      	bx	lr

08006c7c <__retarget_lock_release_recursive>:
 8006c7c:	4770      	bx	lr
	...

08006c80 <nanf>:
 8006c80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c88 <nanf+0x8>
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	7fc00000 	.word	0x7fc00000

08006c8c <quorem>:
 8006c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	6903      	ldr	r3, [r0, #16]
 8006c92:	690c      	ldr	r4, [r1, #16]
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	4607      	mov	r7, r0
 8006c98:	db7e      	blt.n	8006d98 <quorem+0x10c>
 8006c9a:	3c01      	subs	r4, #1
 8006c9c:	f101 0814 	add.w	r8, r1, #20
 8006ca0:	f100 0514 	add.w	r5, r0, #20
 8006ca4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cc2:	d331      	bcc.n	8006d28 <quorem+0x9c>
 8006cc4:	f04f 0e00 	mov.w	lr, #0
 8006cc8:	4640      	mov	r0, r8
 8006cca:	46ac      	mov	ip, r5
 8006ccc:	46f2      	mov	sl, lr
 8006cce:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cd2:	b293      	uxth	r3, r2
 8006cd4:	fb06 e303 	mla	r3, r6, r3, lr
 8006cd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cdc:	0c1a      	lsrs	r2, r3, #16
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ce4:	f8dc a000 	ldr.w	sl, [ip]
 8006ce8:	fa13 f38a 	uxtah	r3, r3, sl
 8006cec:	fb06 220e 	mla	r2, r6, lr, r2
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	9b00      	ldr	r3, [sp, #0]
 8006cf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cf8:	b292      	uxth	r2, r2
 8006cfa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d02:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d06:	4581      	cmp	r9, r0
 8006d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d0c:	f84c 3b04 	str.w	r3, [ip], #4
 8006d10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d14:	d2db      	bcs.n	8006cce <quorem+0x42>
 8006d16:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d1a:	b92b      	cbnz	r3, 8006d28 <quorem+0x9c>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	429d      	cmp	r5, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	d32c      	bcc.n	8006d80 <quorem+0xf4>
 8006d26:	613c      	str	r4, [r7, #16]
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f001 f96b 	bl	8008004 <__mcmp>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	db22      	blt.n	8006d78 <quorem+0xec>
 8006d32:	3601      	adds	r6, #1
 8006d34:	4629      	mov	r1, r5
 8006d36:	2000      	movs	r0, #0
 8006d38:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d3c:	f8d1 c000 	ldr.w	ip, [r1]
 8006d40:	b293      	uxth	r3, r2
 8006d42:	1ac3      	subs	r3, r0, r3
 8006d44:	0c12      	lsrs	r2, r2, #16
 8006d46:	fa13 f38c 	uxtah	r3, r3, ip
 8006d4a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006d4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d58:	45c1      	cmp	r9, r8
 8006d5a:	f841 3b04 	str.w	r3, [r1], #4
 8006d5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d62:	d2e9      	bcs.n	8006d38 <quorem+0xac>
 8006d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d6c:	b922      	cbnz	r2, 8006d78 <quorem+0xec>
 8006d6e:	3b04      	subs	r3, #4
 8006d70:	429d      	cmp	r5, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	d30a      	bcc.n	8006d8c <quorem+0x100>
 8006d76:	613c      	str	r4, [r7, #16]
 8006d78:	4630      	mov	r0, r6
 8006d7a:	b003      	add	sp, #12
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	6812      	ldr	r2, [r2, #0]
 8006d82:	3b04      	subs	r3, #4
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d1ce      	bne.n	8006d26 <quorem+0x9a>
 8006d88:	3c01      	subs	r4, #1
 8006d8a:	e7c9      	b.n	8006d20 <quorem+0x94>
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	3b04      	subs	r3, #4
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d1f0      	bne.n	8006d76 <quorem+0xea>
 8006d94:	3c01      	subs	r4, #1
 8006d96:	e7eb      	b.n	8006d70 <quorem+0xe4>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	e7ee      	b.n	8006d7a <quorem+0xee>
 8006d9c:	0000      	movs	r0, r0
	...

08006da0 <_dtoa_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	ed2d 8b02 	vpush	{d8}
 8006da8:	69c5      	ldr	r5, [r0, #28]
 8006daa:	b091      	sub	sp, #68	; 0x44
 8006dac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006db0:	ec59 8b10 	vmov	r8, r9, d0
 8006db4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006db6:	9106      	str	r1, [sp, #24]
 8006db8:	4606      	mov	r6, r0
 8006dba:	9208      	str	r2, [sp, #32]
 8006dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8006dbe:	b975      	cbnz	r5, 8006dde <_dtoa_r+0x3e>
 8006dc0:	2010      	movs	r0, #16
 8006dc2:	f000 fda5 	bl	8007910 <malloc>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	61f0      	str	r0, [r6, #28]
 8006dca:	b920      	cbnz	r0, 8006dd6 <_dtoa_r+0x36>
 8006dcc:	4ba6      	ldr	r3, [pc, #664]	; (8007068 <_dtoa_r+0x2c8>)
 8006dce:	21ef      	movs	r1, #239	; 0xef
 8006dd0:	48a6      	ldr	r0, [pc, #664]	; (800706c <_dtoa_r+0x2cc>)
 8006dd2:	f002 fba9 	bl	8009528 <__assert_func>
 8006dd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dda:	6005      	str	r5, [r0, #0]
 8006ddc:	60c5      	str	r5, [r0, #12]
 8006dde:	69f3      	ldr	r3, [r6, #28]
 8006de0:	6819      	ldr	r1, [r3, #0]
 8006de2:	b151      	cbz	r1, 8006dfa <_dtoa_r+0x5a>
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	604a      	str	r2, [r1, #4]
 8006de8:	2301      	movs	r3, #1
 8006dea:	4093      	lsls	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 fe82 	bl	8007af8 <_Bfree>
 8006df4:	69f3      	ldr	r3, [r6, #28]
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	f1b9 0300 	subs.w	r3, r9, #0
 8006dfe:	bfbb      	ittet	lt
 8006e00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	9303      	strlt	r3, [sp, #12]
 8006e06:	2300      	movge	r3, #0
 8006e08:	2201      	movlt	r2, #1
 8006e0a:	bfac      	ite	ge
 8006e0c:	6023      	strge	r3, [r4, #0]
 8006e0e:	6022      	strlt	r2, [r4, #0]
 8006e10:	4b97      	ldr	r3, [pc, #604]	; (8007070 <_dtoa_r+0x2d0>)
 8006e12:	9c03      	ldr	r4, [sp, #12]
 8006e14:	43a3      	bics	r3, r4
 8006e16:	d11c      	bne.n	8006e52 <_dtoa_r+0xb2>
 8006e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006e24:	ea53 0308 	orrs.w	r3, r3, r8
 8006e28:	f000 84fb 	beq.w	8007822 <_dtoa_r+0xa82>
 8006e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e2e:	b963      	cbnz	r3, 8006e4a <_dtoa_r+0xaa>
 8006e30:	4b90      	ldr	r3, [pc, #576]	; (8007074 <_dtoa_r+0x2d4>)
 8006e32:	e020      	b.n	8006e76 <_dtoa_r+0xd6>
 8006e34:	4b90      	ldr	r3, [pc, #576]	; (8007078 <_dtoa_r+0x2d8>)
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	9801      	ldr	r0, [sp, #4]
 8006e40:	b011      	add	sp, #68	; 0x44
 8006e42:	ecbd 8b02 	vpop	{d8}
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	4b8a      	ldr	r3, [pc, #552]	; (8007074 <_dtoa_r+0x2d4>)
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	3303      	adds	r3, #3
 8006e50:	e7f3      	b.n	8006e3a <_dtoa_r+0x9a>
 8006e52:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006e56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5e:	d10c      	bne.n	8006e7a <_dtoa_r+0xda>
 8006e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e62:	2301      	movs	r3, #1
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 84d7 	beq.w	800781c <_dtoa_r+0xa7c>
 8006e6e:	4b83      	ldr	r3, [pc, #524]	; (800707c <_dtoa_r+0x2dc>)
 8006e70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	e7e1      	b.n	8006e3e <_dtoa_r+0x9e>
 8006e7a:	aa0e      	add	r2, sp, #56	; 0x38
 8006e7c:	a90f      	add	r1, sp, #60	; 0x3c
 8006e7e:	4630      	mov	r0, r6
 8006e80:	eeb0 0b48 	vmov.f64	d0, d8
 8006e84:	f001 f9d4 	bl	8008230 <__d2b>
 8006e88:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e8e:	4605      	mov	r5, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d046      	beq.n	8006f22 <_dtoa_r+0x182>
 8006e94:	eeb0 7b48 	vmov.f64	d7, d8
 8006e98:	ee18 1a90 	vmov	r1, s17
 8006e9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006ea0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006ea4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006eac:	2000      	movs	r0, #0
 8006eae:	ee07 1a90 	vmov	s15, r1
 8006eb2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006eb6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007050 <_dtoa_r+0x2b0>
 8006eba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ebe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007058 <_dtoa_r+0x2b8>
 8006ec2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006ec6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007060 <_dtoa_r+0x2c0>
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006ed2:	eeb0 7b46 	vmov.f64	d7, d6
 8006ed6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006eda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006ede:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	ee16 ba90 	vmov	fp, s13
 8006eea:	9009      	str	r0, [sp, #36]	; 0x24
 8006eec:	d508      	bpl.n	8006f00 <_dtoa_r+0x160>
 8006eee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006ef2:	eeb4 6b47 	vcmp.f64	d6, d7
 8006ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efa:	bf18      	it	ne
 8006efc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006f00:	f1bb 0f16 	cmp.w	fp, #22
 8006f04:	d82b      	bhi.n	8006f5e <_dtoa_r+0x1be>
 8006f06:	495e      	ldr	r1, [pc, #376]	; (8007080 <_dtoa_r+0x2e0>)
 8006f08:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006f0c:	ed91 7b00 	vldr	d7, [r1]
 8006f10:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f18:	d501      	bpl.n	8006f1e <_dtoa_r+0x17e>
 8006f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f1e:	2100      	movs	r1, #0
 8006f20:	e01e      	b.n	8006f60 <_dtoa_r+0x1c0>
 8006f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f24:	4413      	add	r3, r2
 8006f26:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8006f2a:	2920      	cmp	r1, #32
 8006f2c:	bfc1      	itttt	gt
 8006f2e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8006f32:	408c      	lslgt	r4, r1
 8006f34:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006f38:	fa28 f101 	lsrgt.w	r1, r8, r1
 8006f3c:	bfd6      	itet	le
 8006f3e:	f1c1 0120 	rsble	r1, r1, #32
 8006f42:	4321      	orrgt	r1, r4
 8006f44:	fa08 f101 	lslle.w	r1, r8, r1
 8006f48:	ee07 1a90 	vmov	s15, r1
 8006f4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f50:	3b01      	subs	r3, #1
 8006f52:	ee17 1a90 	vmov	r1, s15
 8006f56:	2001      	movs	r0, #1
 8006f58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006f5c:	e7a7      	b.n	8006eae <_dtoa_r+0x10e>
 8006f5e:	2101      	movs	r1, #1
 8006f60:	1ad2      	subs	r2, r2, r3
 8006f62:	1e53      	subs	r3, r2, #1
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	bf45      	ittet	mi
 8006f68:	f1c2 0301 	rsbmi	r3, r2, #1
 8006f6c:	9304      	strmi	r3, [sp, #16]
 8006f6e:	2300      	movpl	r3, #0
 8006f70:	2300      	movmi	r3, #0
 8006f72:	bf4c      	ite	mi
 8006f74:	9305      	strmi	r3, [sp, #20]
 8006f76:	9304      	strpl	r3, [sp, #16]
 8006f78:	f1bb 0f00 	cmp.w	fp, #0
 8006f7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f7e:	db18      	blt.n	8006fb2 <_dtoa_r+0x212>
 8006f80:	9b05      	ldr	r3, [sp, #20]
 8006f82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006f86:	445b      	add	r3, fp
 8006f88:	9305      	str	r3, [sp, #20]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9a06      	ldr	r2, [sp, #24]
 8006f8e:	2a09      	cmp	r2, #9
 8006f90:	d848      	bhi.n	8007024 <_dtoa_r+0x284>
 8006f92:	2a05      	cmp	r2, #5
 8006f94:	bfc4      	itt	gt
 8006f96:	3a04      	subgt	r2, #4
 8006f98:	9206      	strgt	r2, [sp, #24]
 8006f9a:	9a06      	ldr	r2, [sp, #24]
 8006f9c:	f1a2 0202 	sub.w	r2, r2, #2
 8006fa0:	bfcc      	ite	gt
 8006fa2:	2400      	movgt	r4, #0
 8006fa4:	2401      	movle	r4, #1
 8006fa6:	2a03      	cmp	r2, #3
 8006fa8:	d847      	bhi.n	800703a <_dtoa_r+0x29a>
 8006faa:	e8df f002 	tbb	[pc, r2]
 8006fae:	2d0b      	.short	0x2d0b
 8006fb0:	392b      	.short	0x392b
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	eba3 030b 	sub.w	r3, r3, fp
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8006fbe:	f1cb 0300 	rsb	r3, fp, #0
 8006fc2:	e7e3      	b.n	8006f8c <_dtoa_r+0x1ec>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	9207      	str	r2, [sp, #28]
 8006fc8:	9a08      	ldr	r2, [sp, #32]
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	dc38      	bgt.n	8007040 <_dtoa_r+0x2a0>
 8006fce:	f04f 0a01 	mov.w	sl, #1
 8006fd2:	46d1      	mov	r9, sl
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	f8cd a020 	str.w	sl, [sp, #32]
 8006fda:	69f7      	ldr	r7, [r6, #28]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	2004      	movs	r0, #4
 8006fe0:	f100 0c14 	add.w	ip, r0, #20
 8006fe4:	4594      	cmp	ip, r2
 8006fe6:	d930      	bls.n	800704a <_dtoa_r+0x2aa>
 8006fe8:	6079      	str	r1, [r7, #4]
 8006fea:	4630      	mov	r0, r6
 8006fec:	930d      	str	r3, [sp, #52]	; 0x34
 8006fee:	f000 fd43 	bl	8007a78 <_Balloc>
 8006ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff4:	9001      	str	r0, [sp, #4]
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d145      	bne.n	8007088 <_dtoa_r+0x2e8>
 8006ffc:	4b21      	ldr	r3, [pc, #132]	; (8007084 <_dtoa_r+0x2e4>)
 8006ffe:	f240 11af 	movw	r1, #431	; 0x1af
 8007002:	e6e5      	b.n	8006dd0 <_dtoa_r+0x30>
 8007004:	2201      	movs	r2, #1
 8007006:	e7de      	b.n	8006fc6 <_dtoa_r+0x226>
 8007008:	2200      	movs	r2, #0
 800700a:	9207      	str	r2, [sp, #28]
 800700c:	9a08      	ldr	r2, [sp, #32]
 800700e:	eb0b 0a02 	add.w	sl, fp, r2
 8007012:	f10a 0901 	add.w	r9, sl, #1
 8007016:	464a      	mov	r2, r9
 8007018:	2a01      	cmp	r2, #1
 800701a:	bfb8      	it	lt
 800701c:	2201      	movlt	r2, #1
 800701e:	e7dc      	b.n	8006fda <_dtoa_r+0x23a>
 8007020:	2201      	movs	r2, #1
 8007022:	e7f2      	b.n	800700a <_dtoa_r+0x26a>
 8007024:	2401      	movs	r4, #1
 8007026:	2200      	movs	r2, #0
 8007028:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800702c:	f04f 3aff 	mov.w	sl, #4294967295
 8007030:	2100      	movs	r1, #0
 8007032:	46d1      	mov	r9, sl
 8007034:	2212      	movs	r2, #18
 8007036:	9108      	str	r1, [sp, #32]
 8007038:	e7cf      	b.n	8006fda <_dtoa_r+0x23a>
 800703a:	2201      	movs	r2, #1
 800703c:	9207      	str	r2, [sp, #28]
 800703e:	e7f5      	b.n	800702c <_dtoa_r+0x28c>
 8007040:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007044:	46d1      	mov	r9, sl
 8007046:	4652      	mov	r2, sl
 8007048:	e7c7      	b.n	8006fda <_dtoa_r+0x23a>
 800704a:	3101      	adds	r1, #1
 800704c:	0040      	lsls	r0, r0, #1
 800704e:	e7c7      	b.n	8006fe0 <_dtoa_r+0x240>
 8007050:	636f4361 	.word	0x636f4361
 8007054:	3fd287a7 	.word	0x3fd287a7
 8007058:	8b60c8b3 	.word	0x8b60c8b3
 800705c:	3fc68a28 	.word	0x3fc68a28
 8007060:	509f79fb 	.word	0x509f79fb
 8007064:	3fd34413 	.word	0x3fd34413
 8007068:	0800a5c6 	.word	0x0800a5c6
 800706c:	0800a5dd 	.word	0x0800a5dd
 8007070:	7ff00000 	.word	0x7ff00000
 8007074:	0800a5c2 	.word	0x0800a5c2
 8007078:	0800a5b9 	.word	0x0800a5b9
 800707c:	0800a591 	.word	0x0800a591
 8007080:	0800a6c8 	.word	0x0800a6c8
 8007084:	0800a635 	.word	0x0800a635
 8007088:	69f2      	ldr	r2, [r6, #28]
 800708a:	9901      	ldr	r1, [sp, #4]
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	f1b9 0f0e 	cmp.w	r9, #14
 8007092:	d86c      	bhi.n	800716e <_dtoa_r+0x3ce>
 8007094:	2c00      	cmp	r4, #0
 8007096:	d06a      	beq.n	800716e <_dtoa_r+0x3ce>
 8007098:	f1bb 0f00 	cmp.w	fp, #0
 800709c:	f340 80a0 	ble.w	80071e0 <_dtoa_r+0x440>
 80070a0:	4ac1      	ldr	r2, [pc, #772]	; (80073a8 <_dtoa_r+0x608>)
 80070a2:	f00b 010f 	and.w	r1, fp, #15
 80070a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80070aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80070ae:	ed92 7b00 	vldr	d7, [r2]
 80070b2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80070b6:	f000 8087 	beq.w	80071c8 <_dtoa_r+0x428>
 80070ba:	49bc      	ldr	r1, [pc, #752]	; (80073ac <_dtoa_r+0x60c>)
 80070bc:	ed91 6b08 	vldr	d6, [r1, #32]
 80070c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80070c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80070c8:	f002 020f 	and.w	r2, r2, #15
 80070cc:	2103      	movs	r1, #3
 80070ce:	48b7      	ldr	r0, [pc, #732]	; (80073ac <_dtoa_r+0x60c>)
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d17b      	bne.n	80071cc <_dtoa_r+0x42c>
 80070d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80070d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80070dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	f000 80a0 	beq.w	800722c <_dtoa_r+0x48c>
 80070ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80070f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	f140 8098 	bpl.w	800722c <_dtoa_r+0x48c>
 80070fc:	f1b9 0f00 	cmp.w	r9, #0
 8007100:	f000 8094 	beq.w	800722c <_dtoa_r+0x48c>
 8007104:	f1ba 0f00 	cmp.w	sl, #0
 8007108:	dd2f      	ble.n	800716a <_dtoa_r+0x3ca>
 800710a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800710e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007112:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007116:	f10b 32ff 	add.w	r2, fp, #4294967295
 800711a:	3101      	adds	r1, #1
 800711c:	4654      	mov	r4, sl
 800711e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007122:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007126:	ee07 1a90 	vmov	s15, r1
 800712a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800712e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007132:	ee15 7a90 	vmov	r7, s11
 8007136:	ec51 0b15 	vmov	r0, r1, d5
 800713a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800713e:	2c00      	cmp	r4, #0
 8007140:	d177      	bne.n	8007232 <_dtoa_r+0x492>
 8007142:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007146:	ee36 6b47 	vsub.f64	d6, d6, d7
 800714a:	ec41 0b17 	vmov	d7, r0, r1
 800714e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	f300 826a 	bgt.w	800762e <_dtoa_r+0x88e>
 800715a:	eeb1 7b47 	vneg.f64	d7, d7
 800715e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007166:	f100 8260 	bmi.w	800762a <_dtoa_r+0x88a>
 800716a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800716e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007170:	2a00      	cmp	r2, #0
 8007172:	f2c0 811d 	blt.w	80073b0 <_dtoa_r+0x610>
 8007176:	f1bb 0f0e 	cmp.w	fp, #14
 800717a:	f300 8119 	bgt.w	80073b0 <_dtoa_r+0x610>
 800717e:	4b8a      	ldr	r3, [pc, #552]	; (80073a8 <_dtoa_r+0x608>)
 8007180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007184:	ed93 6b00 	vldr	d6, [r3]
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	f280 80b7 	bge.w	80072fe <_dtoa_r+0x55e>
 8007190:	f1b9 0f00 	cmp.w	r9, #0
 8007194:	f300 80b3 	bgt.w	80072fe <_dtoa_r+0x55e>
 8007198:	f040 8246 	bne.w	8007628 <_dtoa_r+0x888>
 800719c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80071a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80071a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80071ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b0:	464c      	mov	r4, r9
 80071b2:	464f      	mov	r7, r9
 80071b4:	f280 821c 	bge.w	80075f0 <_dtoa_r+0x850>
 80071b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80071bc:	2331      	movs	r3, #49	; 0x31
 80071be:	f808 3b01 	strb.w	r3, [r8], #1
 80071c2:	f10b 0b01 	add.w	fp, fp, #1
 80071c6:	e218      	b.n	80075fa <_dtoa_r+0x85a>
 80071c8:	2102      	movs	r1, #2
 80071ca:	e780      	b.n	80070ce <_dtoa_r+0x32e>
 80071cc:	07d4      	lsls	r4, r2, #31
 80071ce:	d504      	bpl.n	80071da <_dtoa_r+0x43a>
 80071d0:	ed90 6b00 	vldr	d6, [r0]
 80071d4:	3101      	adds	r1, #1
 80071d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071da:	1052      	asrs	r2, r2, #1
 80071dc:	3008      	adds	r0, #8
 80071de:	e777      	b.n	80070d0 <_dtoa_r+0x330>
 80071e0:	d022      	beq.n	8007228 <_dtoa_r+0x488>
 80071e2:	f1cb 0200 	rsb	r2, fp, #0
 80071e6:	4970      	ldr	r1, [pc, #448]	; (80073a8 <_dtoa_r+0x608>)
 80071e8:	f002 000f 	and.w	r0, r2, #15
 80071ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80071f0:	ed91 7b00 	vldr	d7, [r1]
 80071f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80071f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071fc:	486b      	ldr	r0, [pc, #428]	; (80073ac <_dtoa_r+0x60c>)
 80071fe:	1112      	asrs	r2, r2, #4
 8007200:	2400      	movs	r4, #0
 8007202:	2102      	movs	r1, #2
 8007204:	b92a      	cbnz	r2, 8007212 <_dtoa_r+0x472>
 8007206:	2c00      	cmp	r4, #0
 8007208:	f43f af6a 	beq.w	80070e0 <_dtoa_r+0x340>
 800720c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007210:	e766      	b.n	80070e0 <_dtoa_r+0x340>
 8007212:	07d7      	lsls	r7, r2, #31
 8007214:	d505      	bpl.n	8007222 <_dtoa_r+0x482>
 8007216:	ed90 6b00 	vldr	d6, [r0]
 800721a:	3101      	adds	r1, #1
 800721c:	2401      	movs	r4, #1
 800721e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007222:	1052      	asrs	r2, r2, #1
 8007224:	3008      	adds	r0, #8
 8007226:	e7ed      	b.n	8007204 <_dtoa_r+0x464>
 8007228:	2102      	movs	r1, #2
 800722a:	e759      	b.n	80070e0 <_dtoa_r+0x340>
 800722c:	465a      	mov	r2, fp
 800722e:	464c      	mov	r4, r9
 8007230:	e775      	b.n	800711e <_dtoa_r+0x37e>
 8007232:	ec41 0b17 	vmov	d7, r0, r1
 8007236:	495c      	ldr	r1, [pc, #368]	; (80073a8 <_dtoa_r+0x608>)
 8007238:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800723c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007240:	9901      	ldr	r1, [sp, #4]
 8007242:	440c      	add	r4, r1
 8007244:	9907      	ldr	r1, [sp, #28]
 8007246:	b351      	cbz	r1, 800729e <_dtoa_r+0x4fe>
 8007248:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800724c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007250:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007254:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800725c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007260:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007264:	ee14 1a90 	vmov	r1, s9
 8007268:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800726c:	3130      	adds	r1, #48	; 0x30
 800726e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007272:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727a:	f808 1b01 	strb.w	r1, [r8], #1
 800727e:	d439      	bmi.n	80072f4 <_dtoa_r+0x554>
 8007280:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007284:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	d472      	bmi.n	8007374 <_dtoa_r+0x5d4>
 800728e:	45a0      	cmp	r8, r4
 8007290:	f43f af6b 	beq.w	800716a <_dtoa_r+0x3ca>
 8007294:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007298:	ee26 6b03 	vmul.f64	d6, d6, d3
 800729c:	e7e0      	b.n	8007260 <_dtoa_r+0x4c0>
 800729e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072a6:	4620      	mov	r0, r4
 80072a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80072ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80072b0:	ee14 1a90 	vmov	r1, s9
 80072b4:	3130      	adds	r1, #48	; 0x30
 80072b6:	f808 1b01 	strb.w	r1, [r8], #1
 80072ba:	45a0      	cmp	r8, r4
 80072bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80072c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80072c4:	d118      	bne.n	80072f8 <_dtoa_r+0x558>
 80072c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80072ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80072ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80072d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d6:	dc4d      	bgt.n	8007374 <_dtoa_r+0x5d4>
 80072d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80072dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80072e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e4:	f57f af41 	bpl.w	800716a <_dtoa_r+0x3ca>
 80072e8:	4680      	mov	r8, r0
 80072ea:	3801      	subs	r0, #1
 80072ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80072f0:	2b30      	cmp	r3, #48	; 0x30
 80072f2:	d0f9      	beq.n	80072e8 <_dtoa_r+0x548>
 80072f4:	4693      	mov	fp, r2
 80072f6:	e02a      	b.n	800734e <_dtoa_r+0x5ae>
 80072f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80072fc:	e7d6      	b.n	80072ac <_dtoa_r+0x50c>
 80072fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007302:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007306:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800730a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800730e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007312:	ee15 3a10 	vmov	r3, s10
 8007316:	3330      	adds	r3, #48	; 0x30
 8007318:	f808 3b01 	strb.w	r3, [r8], #1
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	eba8 0303 	sub.w	r3, r8, r3
 8007322:	4599      	cmp	r9, r3
 8007324:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007328:	eea3 7b46 	vfms.f64	d7, d3, d6
 800732c:	d133      	bne.n	8007396 <_dtoa_r+0x5f6>
 800732e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007332:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733a:	dc1a      	bgt.n	8007372 <_dtoa_r+0x5d2>
 800733c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007344:	d103      	bne.n	800734e <_dtoa_r+0x5ae>
 8007346:	ee15 3a10 	vmov	r3, s10
 800734a:	07d9      	lsls	r1, r3, #31
 800734c:	d411      	bmi.n	8007372 <_dtoa_r+0x5d2>
 800734e:	4629      	mov	r1, r5
 8007350:	4630      	mov	r0, r6
 8007352:	f000 fbd1 	bl	8007af8 <_Bfree>
 8007356:	2300      	movs	r3, #0
 8007358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800735a:	f888 3000 	strb.w	r3, [r8]
 800735e:	f10b 0301 	add.w	r3, fp, #1
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007366:	2b00      	cmp	r3, #0
 8007368:	f43f ad69 	beq.w	8006e3e <_dtoa_r+0x9e>
 800736c:	f8c3 8000 	str.w	r8, [r3]
 8007370:	e565      	b.n	8006e3e <_dtoa_r+0x9e>
 8007372:	465a      	mov	r2, fp
 8007374:	4643      	mov	r3, r8
 8007376:	4698      	mov	r8, r3
 8007378:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800737c:	2939      	cmp	r1, #57	; 0x39
 800737e:	d106      	bne.n	800738e <_dtoa_r+0x5ee>
 8007380:	9901      	ldr	r1, [sp, #4]
 8007382:	4299      	cmp	r1, r3
 8007384:	d1f7      	bne.n	8007376 <_dtoa_r+0x5d6>
 8007386:	9801      	ldr	r0, [sp, #4]
 8007388:	2130      	movs	r1, #48	; 0x30
 800738a:	3201      	adds	r2, #1
 800738c:	7001      	strb	r1, [r0, #0]
 800738e:	7819      	ldrb	r1, [r3, #0]
 8007390:	3101      	adds	r1, #1
 8007392:	7019      	strb	r1, [r3, #0]
 8007394:	e7ae      	b.n	80072f4 <_dtoa_r+0x554>
 8007396:	ee27 7b04 	vmul.f64	d7, d7, d4
 800739a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a2:	d1b2      	bne.n	800730a <_dtoa_r+0x56a>
 80073a4:	e7d3      	b.n	800734e <_dtoa_r+0x5ae>
 80073a6:	bf00      	nop
 80073a8:	0800a6c8 	.word	0x0800a6c8
 80073ac:	0800a6a0 	.word	0x0800a6a0
 80073b0:	9907      	ldr	r1, [sp, #28]
 80073b2:	2900      	cmp	r1, #0
 80073b4:	f000 80d0 	beq.w	8007558 <_dtoa_r+0x7b8>
 80073b8:	9906      	ldr	r1, [sp, #24]
 80073ba:	2901      	cmp	r1, #1
 80073bc:	f300 80b4 	bgt.w	8007528 <_dtoa_r+0x788>
 80073c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073c2:	2900      	cmp	r1, #0
 80073c4:	f000 80ac 	beq.w	8007520 <_dtoa_r+0x780>
 80073c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80073d0:	461c      	mov	r4, r3
 80073d2:	9309      	str	r3, [sp, #36]	; 0x24
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	4413      	add	r3, r2
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	2101      	movs	r1, #1
 80073de:	4413      	add	r3, r2
 80073e0:	4630      	mov	r0, r6
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	f000 fc88 	bl	8007cf8 <__i2b>
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	4607      	mov	r7, r0
 80073ec:	f1b8 0f00 	cmp.w	r8, #0
 80073f0:	d00d      	beq.n	800740e <_dtoa_r+0x66e>
 80073f2:	9a05      	ldr	r2, [sp, #20]
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	dd0a      	ble.n	800740e <_dtoa_r+0x66e>
 80073f8:	4542      	cmp	r2, r8
 80073fa:	9904      	ldr	r1, [sp, #16]
 80073fc:	bfa8      	it	ge
 80073fe:	4642      	movge	r2, r8
 8007400:	1a89      	subs	r1, r1, r2
 8007402:	9104      	str	r1, [sp, #16]
 8007404:	9905      	ldr	r1, [sp, #20]
 8007406:	eba8 0802 	sub.w	r8, r8, r2
 800740a:	1a8a      	subs	r2, r1, r2
 800740c:	9205      	str	r2, [sp, #20]
 800740e:	b303      	cbz	r3, 8007452 <_dtoa_r+0x6b2>
 8007410:	9a07      	ldr	r2, [sp, #28]
 8007412:	2a00      	cmp	r2, #0
 8007414:	f000 80a5 	beq.w	8007562 <_dtoa_r+0x7c2>
 8007418:	2c00      	cmp	r4, #0
 800741a:	dd13      	ble.n	8007444 <_dtoa_r+0x6a4>
 800741c:	4639      	mov	r1, r7
 800741e:	4622      	mov	r2, r4
 8007420:	4630      	mov	r0, r6
 8007422:	930d      	str	r3, [sp, #52]	; 0x34
 8007424:	f000 fd28 	bl	8007e78 <__pow5mult>
 8007428:	462a      	mov	r2, r5
 800742a:	4601      	mov	r1, r0
 800742c:	4607      	mov	r7, r0
 800742e:	4630      	mov	r0, r6
 8007430:	f000 fc78 	bl	8007d24 <__multiply>
 8007434:	4629      	mov	r1, r5
 8007436:	9009      	str	r0, [sp, #36]	; 0x24
 8007438:	4630      	mov	r0, r6
 800743a:	f000 fb5d 	bl	8007af8 <_Bfree>
 800743e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007442:	4615      	mov	r5, r2
 8007444:	1b1a      	subs	r2, r3, r4
 8007446:	d004      	beq.n	8007452 <_dtoa_r+0x6b2>
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f000 fd14 	bl	8007e78 <__pow5mult>
 8007450:	4605      	mov	r5, r0
 8007452:	2101      	movs	r1, #1
 8007454:	4630      	mov	r0, r6
 8007456:	f000 fc4f 	bl	8007cf8 <__i2b>
 800745a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745c:	2b00      	cmp	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	f340 8081 	ble.w	8007566 <_dtoa_r+0x7c6>
 8007464:	461a      	mov	r2, r3
 8007466:	4601      	mov	r1, r0
 8007468:	4630      	mov	r0, r6
 800746a:	f000 fd05 	bl	8007e78 <__pow5mult>
 800746e:	9b06      	ldr	r3, [sp, #24]
 8007470:	2b01      	cmp	r3, #1
 8007472:	4604      	mov	r4, r0
 8007474:	dd7a      	ble.n	800756c <_dtoa_r+0x7cc>
 8007476:	2300      	movs	r3, #0
 8007478:	9309      	str	r3, [sp, #36]	; 0x24
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007480:	6910      	ldr	r0, [r2, #16]
 8007482:	f000 fbeb 	bl	8007c5c <__hi0bits>
 8007486:	f1c0 0020 	rsb	r0, r0, #32
 800748a:	9b05      	ldr	r3, [sp, #20]
 800748c:	4418      	add	r0, r3
 800748e:	f010 001f 	ands.w	r0, r0, #31
 8007492:	f000 8093 	beq.w	80075bc <_dtoa_r+0x81c>
 8007496:	f1c0 0220 	rsb	r2, r0, #32
 800749a:	2a04      	cmp	r2, #4
 800749c:	f340 8085 	ble.w	80075aa <_dtoa_r+0x80a>
 80074a0:	9b04      	ldr	r3, [sp, #16]
 80074a2:	f1c0 001c 	rsb	r0, r0, #28
 80074a6:	4403      	add	r3, r0
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	4480      	add	r8, r0
 80074ae:	4403      	add	r3, r0
 80074b0:	9305      	str	r3, [sp, #20]
 80074b2:	9b04      	ldr	r3, [sp, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd05      	ble.n	80074c4 <_dtoa_r+0x724>
 80074b8:	4629      	mov	r1, r5
 80074ba:	461a      	mov	r2, r3
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 fd35 	bl	8007f2c <__lshift>
 80074c2:	4605      	mov	r5, r0
 80074c4:	9b05      	ldr	r3, [sp, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dd05      	ble.n	80074d6 <_dtoa_r+0x736>
 80074ca:	4621      	mov	r1, r4
 80074cc:	461a      	mov	r2, r3
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 fd2c 	bl	8007f2c <__lshift>
 80074d4:	4604      	mov	r4, r0
 80074d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d071      	beq.n	80075c0 <_dtoa_r+0x820>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fd90 	bl	8008004 <__mcmp>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	da6b      	bge.n	80075c0 <_dtoa_r+0x820>
 80074e8:	2300      	movs	r3, #0
 80074ea:	4629      	mov	r1, r5
 80074ec:	220a      	movs	r2, #10
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 fb24 	bl	8007b3c <__multadd>
 80074f4:	9b07      	ldr	r3, [sp, #28]
 80074f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074fa:	4605      	mov	r5, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8197 	beq.w	8007830 <_dtoa_r+0xa90>
 8007502:	4639      	mov	r1, r7
 8007504:	2300      	movs	r3, #0
 8007506:	220a      	movs	r2, #10
 8007508:	4630      	mov	r0, r6
 800750a:	f000 fb17 	bl	8007b3c <__multadd>
 800750e:	f1ba 0f00 	cmp.w	sl, #0
 8007512:	4607      	mov	r7, r0
 8007514:	f300 8093 	bgt.w	800763e <_dtoa_r+0x89e>
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	2b02      	cmp	r3, #2
 800751c:	dc57      	bgt.n	80075ce <_dtoa_r+0x82e>
 800751e:	e08e      	b.n	800763e <_dtoa_r+0x89e>
 8007520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007522:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007526:	e751      	b.n	80073cc <_dtoa_r+0x62c>
 8007528:	f109 34ff 	add.w	r4, r9, #4294967295
 800752c:	42a3      	cmp	r3, r4
 800752e:	bfbf      	itttt	lt
 8007530:	1ae2      	sublt	r2, r4, r3
 8007532:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007534:	189b      	addlt	r3, r3, r2
 8007536:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007538:	bfae      	itee	ge
 800753a:	1b1c      	subge	r4, r3, r4
 800753c:	4623      	movlt	r3, r4
 800753e:	2400      	movlt	r4, #0
 8007540:	f1b9 0f00 	cmp.w	r9, #0
 8007544:	bfb5      	itete	lt
 8007546:	9a04      	ldrlt	r2, [sp, #16]
 8007548:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800754c:	eba2 0809 	sublt.w	r8, r2, r9
 8007550:	464a      	movge	r2, r9
 8007552:	bfb8      	it	lt
 8007554:	2200      	movlt	r2, #0
 8007556:	e73c      	b.n	80073d2 <_dtoa_r+0x632>
 8007558:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800755c:	9f07      	ldr	r7, [sp, #28]
 800755e:	461c      	mov	r4, r3
 8007560:	e744      	b.n	80073ec <_dtoa_r+0x64c>
 8007562:	461a      	mov	r2, r3
 8007564:	e770      	b.n	8007448 <_dtoa_r+0x6a8>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	2b01      	cmp	r3, #1
 800756a:	dc18      	bgt.n	800759e <_dtoa_r+0x7fe>
 800756c:	9b02      	ldr	r3, [sp, #8]
 800756e:	b9b3      	cbnz	r3, 800759e <_dtoa_r+0x7fe>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007576:	b9a2      	cbnz	r2, 80075a2 <_dtoa_r+0x802>
 8007578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800757c:	0d12      	lsrs	r2, r2, #20
 800757e:	0512      	lsls	r2, r2, #20
 8007580:	b18a      	cbz	r2, 80075a6 <_dtoa_r+0x806>
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	3301      	adds	r3, #1
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	3301      	adds	r3, #1
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	2301      	movs	r3, #1
 8007590:	9309      	str	r3, [sp, #36]	; 0x24
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f af70 	bne.w	800747a <_dtoa_r+0x6da>
 800759a:	2001      	movs	r0, #1
 800759c:	e775      	b.n	800748a <_dtoa_r+0x6ea>
 800759e:	2300      	movs	r3, #0
 80075a0:	e7f6      	b.n	8007590 <_dtoa_r+0x7f0>
 80075a2:	9b02      	ldr	r3, [sp, #8]
 80075a4:	e7f4      	b.n	8007590 <_dtoa_r+0x7f0>
 80075a6:	9209      	str	r2, [sp, #36]	; 0x24
 80075a8:	e7f3      	b.n	8007592 <_dtoa_r+0x7f2>
 80075aa:	d082      	beq.n	80074b2 <_dtoa_r+0x712>
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	321c      	adds	r2, #28
 80075b0:	4413      	add	r3, r2
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9b05      	ldr	r3, [sp, #20]
 80075b6:	4490      	add	r8, r2
 80075b8:	4413      	add	r3, r2
 80075ba:	e779      	b.n	80074b0 <_dtoa_r+0x710>
 80075bc:	4602      	mov	r2, r0
 80075be:	e7f5      	b.n	80075ac <_dtoa_r+0x80c>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	dc36      	bgt.n	8007634 <_dtoa_r+0x894>
 80075c6:	9b06      	ldr	r3, [sp, #24]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	dd33      	ble.n	8007634 <_dtoa_r+0x894>
 80075cc:	46ca      	mov	sl, r9
 80075ce:	f1ba 0f00 	cmp.w	sl, #0
 80075d2:	d10d      	bne.n	80075f0 <_dtoa_r+0x850>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4653      	mov	r3, sl
 80075d8:	2205      	movs	r2, #5
 80075da:	4630      	mov	r0, r6
 80075dc:	f000 faae 	bl	8007b3c <__multadd>
 80075e0:	4601      	mov	r1, r0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 fd0d 	bl	8008004 <__mcmp>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f73f ade4 	bgt.w	80071b8 <_dtoa_r+0x418>
 80075f0:	9b08      	ldr	r3, [sp, #32]
 80075f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075f6:	ea6f 0b03 	mvn.w	fp, r3
 80075fa:	f04f 0900 	mov.w	r9, #0
 80075fe:	4621      	mov	r1, r4
 8007600:	4630      	mov	r0, r6
 8007602:	f000 fa79 	bl	8007af8 <_Bfree>
 8007606:	2f00      	cmp	r7, #0
 8007608:	f43f aea1 	beq.w	800734e <_dtoa_r+0x5ae>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	d005      	beq.n	800761e <_dtoa_r+0x87e>
 8007612:	45b9      	cmp	r9, r7
 8007614:	d003      	beq.n	800761e <_dtoa_r+0x87e>
 8007616:	4649      	mov	r1, r9
 8007618:	4630      	mov	r0, r6
 800761a:	f000 fa6d 	bl	8007af8 <_Bfree>
 800761e:	4639      	mov	r1, r7
 8007620:	4630      	mov	r0, r6
 8007622:	f000 fa69 	bl	8007af8 <_Bfree>
 8007626:	e692      	b.n	800734e <_dtoa_r+0x5ae>
 8007628:	2400      	movs	r4, #0
 800762a:	4627      	mov	r7, r4
 800762c:	e7e0      	b.n	80075f0 <_dtoa_r+0x850>
 800762e:	4693      	mov	fp, r2
 8007630:	4627      	mov	r7, r4
 8007632:	e5c1      	b.n	80071b8 <_dtoa_r+0x418>
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	46ca      	mov	sl, r9
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8100 	beq.w	800783e <_dtoa_r+0xa9e>
 800763e:	f1b8 0f00 	cmp.w	r8, #0
 8007642:	dd05      	ble.n	8007650 <_dtoa_r+0x8b0>
 8007644:	4639      	mov	r1, r7
 8007646:	4642      	mov	r2, r8
 8007648:	4630      	mov	r0, r6
 800764a:	f000 fc6f 	bl	8007f2c <__lshift>
 800764e:	4607      	mov	r7, r0
 8007650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d05d      	beq.n	8007712 <_dtoa_r+0x972>
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4630      	mov	r0, r6
 800765a:	f000 fa0d 	bl	8007a78 <_Balloc>
 800765e:	4680      	mov	r8, r0
 8007660:	b928      	cbnz	r0, 800766e <_dtoa_r+0x8ce>
 8007662:	4b82      	ldr	r3, [pc, #520]	; (800786c <_dtoa_r+0xacc>)
 8007664:	4602      	mov	r2, r0
 8007666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800766a:	f7ff bbb1 	b.w	8006dd0 <_dtoa_r+0x30>
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	3202      	adds	r2, #2
 8007672:	0092      	lsls	r2, r2, #2
 8007674:	f107 010c 	add.w	r1, r7, #12
 8007678:	300c      	adds	r0, #12
 800767a:	f001 ff3f 	bl	80094fc <memcpy>
 800767e:	2201      	movs	r2, #1
 8007680:	4641      	mov	r1, r8
 8007682:	4630      	mov	r0, r6
 8007684:	f000 fc52 	bl	8007f2c <__lshift>
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	3301      	adds	r3, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	4453      	add	r3, sl
 8007692:	9308      	str	r3, [sp, #32]
 8007694:	9b02      	ldr	r3, [sp, #8]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	46b9      	mov	r9, r7
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	4607      	mov	r7, r0
 80076a0:	9b04      	ldr	r3, [sp, #16]
 80076a2:	4621      	mov	r1, r4
 80076a4:	3b01      	subs	r3, #1
 80076a6:	4628      	mov	r0, r5
 80076a8:	9302      	str	r3, [sp, #8]
 80076aa:	f7ff faef 	bl	8006c8c <quorem>
 80076ae:	4603      	mov	r3, r0
 80076b0:	3330      	adds	r3, #48	; 0x30
 80076b2:	9005      	str	r0, [sp, #20]
 80076b4:	4649      	mov	r1, r9
 80076b6:	4628      	mov	r0, r5
 80076b8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ba:	f000 fca3 	bl	8008004 <__mcmp>
 80076be:	463a      	mov	r2, r7
 80076c0:	4682      	mov	sl, r0
 80076c2:	4621      	mov	r1, r4
 80076c4:	4630      	mov	r0, r6
 80076c6:	f000 fcb9 	bl	800803c <__mdiff>
 80076ca:	68c2      	ldr	r2, [r0, #12]
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	4680      	mov	r8, r0
 80076d0:	bb0a      	cbnz	r2, 8007716 <_dtoa_r+0x976>
 80076d2:	4601      	mov	r1, r0
 80076d4:	4628      	mov	r0, r5
 80076d6:	f000 fc95 	bl	8008004 <__mcmp>
 80076da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076dc:	4602      	mov	r2, r0
 80076de:	4641      	mov	r1, r8
 80076e0:	4630      	mov	r0, r6
 80076e2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80076e6:	f000 fa07 	bl	8007af8 <_Bfree>
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80076f2:	ea43 0102 	orr.w	r1, r3, r2
 80076f6:	9b07      	ldr	r3, [sp, #28]
 80076f8:	4319      	orrs	r1, r3
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	d10d      	bne.n	800771a <_dtoa_r+0x97a>
 80076fe:	2b39      	cmp	r3, #57	; 0x39
 8007700:	d029      	beq.n	8007756 <_dtoa_r+0x9b6>
 8007702:	f1ba 0f00 	cmp.w	sl, #0
 8007706:	dd01      	ble.n	800770c <_dtoa_r+0x96c>
 8007708:	9b05      	ldr	r3, [sp, #20]
 800770a:	3331      	adds	r3, #49	; 0x31
 800770c:	9a02      	ldr	r2, [sp, #8]
 800770e:	7013      	strb	r3, [r2, #0]
 8007710:	e775      	b.n	80075fe <_dtoa_r+0x85e>
 8007712:	4638      	mov	r0, r7
 8007714:	e7b8      	b.n	8007688 <_dtoa_r+0x8e8>
 8007716:	2201      	movs	r2, #1
 8007718:	e7e1      	b.n	80076de <_dtoa_r+0x93e>
 800771a:	f1ba 0f00 	cmp.w	sl, #0
 800771e:	db06      	blt.n	800772e <_dtoa_r+0x98e>
 8007720:	9906      	ldr	r1, [sp, #24]
 8007722:	ea41 0a0a 	orr.w	sl, r1, sl
 8007726:	9907      	ldr	r1, [sp, #28]
 8007728:	ea5a 0a01 	orrs.w	sl, sl, r1
 800772c:	d120      	bne.n	8007770 <_dtoa_r+0x9d0>
 800772e:	2a00      	cmp	r2, #0
 8007730:	ddec      	ble.n	800770c <_dtoa_r+0x96c>
 8007732:	4629      	mov	r1, r5
 8007734:	2201      	movs	r2, #1
 8007736:	4630      	mov	r0, r6
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	f000 fbf7 	bl	8007f2c <__lshift>
 800773e:	4621      	mov	r1, r4
 8007740:	4605      	mov	r5, r0
 8007742:	f000 fc5f 	bl	8008004 <__mcmp>
 8007746:	2800      	cmp	r0, #0
 8007748:	9b04      	ldr	r3, [sp, #16]
 800774a:	dc02      	bgt.n	8007752 <_dtoa_r+0x9b2>
 800774c:	d1de      	bne.n	800770c <_dtoa_r+0x96c>
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	d5dc      	bpl.n	800770c <_dtoa_r+0x96c>
 8007752:	2b39      	cmp	r3, #57	; 0x39
 8007754:	d1d8      	bne.n	8007708 <_dtoa_r+0x968>
 8007756:	9a02      	ldr	r2, [sp, #8]
 8007758:	2339      	movs	r3, #57	; 0x39
 800775a:	7013      	strb	r3, [r2, #0]
 800775c:	4643      	mov	r3, r8
 800775e:	4698      	mov	r8, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007766:	2a39      	cmp	r2, #57	; 0x39
 8007768:	d051      	beq.n	800780e <_dtoa_r+0xa6e>
 800776a:	3201      	adds	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	e746      	b.n	80075fe <_dtoa_r+0x85e>
 8007770:	2a00      	cmp	r2, #0
 8007772:	dd03      	ble.n	800777c <_dtoa_r+0x9dc>
 8007774:	2b39      	cmp	r3, #57	; 0x39
 8007776:	d0ee      	beq.n	8007756 <_dtoa_r+0x9b6>
 8007778:	3301      	adds	r3, #1
 800777a:	e7c7      	b.n	800770c <_dtoa_r+0x96c>
 800777c:	9a04      	ldr	r2, [sp, #16]
 800777e:	9908      	ldr	r1, [sp, #32]
 8007780:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007784:	428a      	cmp	r2, r1
 8007786:	d02b      	beq.n	80077e0 <_dtoa_r+0xa40>
 8007788:	4629      	mov	r1, r5
 800778a:	2300      	movs	r3, #0
 800778c:	220a      	movs	r2, #10
 800778e:	4630      	mov	r0, r6
 8007790:	f000 f9d4 	bl	8007b3c <__multadd>
 8007794:	45b9      	cmp	r9, r7
 8007796:	4605      	mov	r5, r0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	f04f 020a 	mov.w	r2, #10
 80077a0:	4649      	mov	r1, r9
 80077a2:	4630      	mov	r0, r6
 80077a4:	d107      	bne.n	80077b6 <_dtoa_r+0xa16>
 80077a6:	f000 f9c9 	bl	8007b3c <__multadd>
 80077aa:	4681      	mov	r9, r0
 80077ac:	4607      	mov	r7, r0
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	3301      	adds	r3, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	e774      	b.n	80076a0 <_dtoa_r+0x900>
 80077b6:	f000 f9c1 	bl	8007b3c <__multadd>
 80077ba:	4639      	mov	r1, r7
 80077bc:	4681      	mov	r9, r0
 80077be:	2300      	movs	r3, #0
 80077c0:	220a      	movs	r2, #10
 80077c2:	4630      	mov	r0, r6
 80077c4:	f000 f9ba 	bl	8007b3c <__multadd>
 80077c8:	4607      	mov	r7, r0
 80077ca:	e7f0      	b.n	80077ae <_dtoa_r+0xa0e>
 80077cc:	f1ba 0f00 	cmp.w	sl, #0
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	bfcc      	ite	gt
 80077d4:	46d0      	movgt	r8, sl
 80077d6:	f04f 0801 	movle.w	r8, #1
 80077da:	4490      	add	r8, r2
 80077dc:	f04f 0900 	mov.w	r9, #0
 80077e0:	4629      	mov	r1, r5
 80077e2:	2201      	movs	r2, #1
 80077e4:	4630      	mov	r0, r6
 80077e6:	9302      	str	r3, [sp, #8]
 80077e8:	f000 fba0 	bl	8007f2c <__lshift>
 80077ec:	4621      	mov	r1, r4
 80077ee:	4605      	mov	r5, r0
 80077f0:	f000 fc08 	bl	8008004 <__mcmp>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	dcb1      	bgt.n	800775c <_dtoa_r+0x9bc>
 80077f8:	d102      	bne.n	8007800 <_dtoa_r+0xa60>
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	07db      	lsls	r3, r3, #31
 80077fe:	d4ad      	bmi.n	800775c <_dtoa_r+0x9bc>
 8007800:	4643      	mov	r3, r8
 8007802:	4698      	mov	r8, r3
 8007804:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007808:	2a30      	cmp	r2, #48	; 0x30
 800780a:	d0fa      	beq.n	8007802 <_dtoa_r+0xa62>
 800780c:	e6f7      	b.n	80075fe <_dtoa_r+0x85e>
 800780e:	9a01      	ldr	r2, [sp, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d1a4      	bne.n	800775e <_dtoa_r+0x9be>
 8007814:	f10b 0b01 	add.w	fp, fp, #1
 8007818:	2331      	movs	r3, #49	; 0x31
 800781a:	e778      	b.n	800770e <_dtoa_r+0x96e>
 800781c:	4b14      	ldr	r3, [pc, #80]	; (8007870 <_dtoa_r+0xad0>)
 800781e:	f7ff bb2a 	b.w	8006e76 <_dtoa_r+0xd6>
 8007822:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f ab05 	bne.w	8006e34 <_dtoa_r+0x94>
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <_dtoa_r+0xad4>)
 800782c:	f7ff bb23 	b.w	8006e76 <_dtoa_r+0xd6>
 8007830:	f1ba 0f00 	cmp.w	sl, #0
 8007834:	dc03      	bgt.n	800783e <_dtoa_r+0xa9e>
 8007836:	9b06      	ldr	r3, [sp, #24]
 8007838:	2b02      	cmp	r3, #2
 800783a:	f73f aec8 	bgt.w	80075ce <_dtoa_r+0x82e>
 800783e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f7ff fa21 	bl	8006c8c <quorem>
 800784a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800784e:	f808 3b01 	strb.w	r3, [r8], #1
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	eba8 0202 	sub.w	r2, r8, r2
 8007858:	4592      	cmp	sl, r2
 800785a:	ddb7      	ble.n	80077cc <_dtoa_r+0xa2c>
 800785c:	4629      	mov	r1, r5
 800785e:	2300      	movs	r3, #0
 8007860:	220a      	movs	r2, #10
 8007862:	4630      	mov	r0, r6
 8007864:	f000 f96a 	bl	8007b3c <__multadd>
 8007868:	4605      	mov	r5, r0
 800786a:	e7ea      	b.n	8007842 <_dtoa_r+0xaa2>
 800786c:	0800a635 	.word	0x0800a635
 8007870:	0800a590 	.word	0x0800a590
 8007874:	0800a5b9 	.word	0x0800a5b9

08007878 <_free_r>:
 8007878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800787a:	2900      	cmp	r1, #0
 800787c:	d044      	beq.n	8007908 <_free_r+0x90>
 800787e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007882:	9001      	str	r0, [sp, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f1a1 0404 	sub.w	r4, r1, #4
 800788a:	bfb8      	it	lt
 800788c:	18e4      	addlt	r4, r4, r3
 800788e:	f000 f8e7 	bl	8007a60 <__malloc_lock>
 8007892:	4a1e      	ldr	r2, [pc, #120]	; (800790c <_free_r+0x94>)
 8007894:	9801      	ldr	r0, [sp, #4]
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	b933      	cbnz	r3, 80078a8 <_free_r+0x30>
 800789a:	6063      	str	r3, [r4, #4]
 800789c:	6014      	str	r4, [r2, #0]
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078a4:	f000 b8e2 	b.w	8007a6c <__malloc_unlock>
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d908      	bls.n	80078be <_free_r+0x46>
 80078ac:	6825      	ldr	r5, [r4, #0]
 80078ae:	1961      	adds	r1, r4, r5
 80078b0:	428b      	cmp	r3, r1
 80078b2:	bf01      	itttt	eq
 80078b4:	6819      	ldreq	r1, [r3, #0]
 80078b6:	685b      	ldreq	r3, [r3, #4]
 80078b8:	1949      	addeq	r1, r1, r5
 80078ba:	6021      	streq	r1, [r4, #0]
 80078bc:	e7ed      	b.n	800789a <_free_r+0x22>
 80078be:	461a      	mov	r2, r3
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	b10b      	cbz	r3, 80078c8 <_free_r+0x50>
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d9fa      	bls.n	80078be <_free_r+0x46>
 80078c8:	6811      	ldr	r1, [r2, #0]
 80078ca:	1855      	adds	r5, r2, r1
 80078cc:	42a5      	cmp	r5, r4
 80078ce:	d10b      	bne.n	80078e8 <_free_r+0x70>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	4421      	add	r1, r4
 80078d4:	1854      	adds	r4, r2, r1
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	d1e0      	bne.n	800789e <_free_r+0x26>
 80078dc:	681c      	ldr	r4, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	6053      	str	r3, [r2, #4]
 80078e2:	440c      	add	r4, r1
 80078e4:	6014      	str	r4, [r2, #0]
 80078e6:	e7da      	b.n	800789e <_free_r+0x26>
 80078e8:	d902      	bls.n	80078f0 <_free_r+0x78>
 80078ea:	230c      	movs	r3, #12
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	e7d6      	b.n	800789e <_free_r+0x26>
 80078f0:	6825      	ldr	r5, [r4, #0]
 80078f2:	1961      	adds	r1, r4, r5
 80078f4:	428b      	cmp	r3, r1
 80078f6:	bf04      	itt	eq
 80078f8:	6819      	ldreq	r1, [r3, #0]
 80078fa:	685b      	ldreq	r3, [r3, #4]
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	bf04      	itt	eq
 8007900:	1949      	addeq	r1, r1, r5
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	6054      	str	r4, [r2, #4]
 8007906:	e7ca      	b.n	800789e <_free_r+0x26>
 8007908:	b003      	add	sp, #12
 800790a:	bd30      	pop	{r4, r5, pc}
 800790c:	20000488 	.word	0x20000488

08007910 <malloc>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <malloc+0xc>)
 8007912:	4601      	mov	r1, r0
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	f000 b823 	b.w	8007960 <_malloc_r>
 800791a:	bf00      	nop
 800791c:	20000068 	.word	0x20000068

08007920 <sbrk_aligned>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4e0e      	ldr	r6, [pc, #56]	; (800795c <sbrk_aligned+0x3c>)
 8007924:	460c      	mov	r4, r1
 8007926:	6831      	ldr	r1, [r6, #0]
 8007928:	4605      	mov	r5, r0
 800792a:	b911      	cbnz	r1, 8007932 <sbrk_aligned+0x12>
 800792c:	f001 fdd6 	bl	80094dc <_sbrk_r>
 8007930:	6030      	str	r0, [r6, #0]
 8007932:	4621      	mov	r1, r4
 8007934:	4628      	mov	r0, r5
 8007936:	f001 fdd1 	bl	80094dc <_sbrk_r>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d00a      	beq.n	8007954 <sbrk_aligned+0x34>
 800793e:	1cc4      	adds	r4, r0, #3
 8007940:	f024 0403 	bic.w	r4, r4, #3
 8007944:	42a0      	cmp	r0, r4
 8007946:	d007      	beq.n	8007958 <sbrk_aligned+0x38>
 8007948:	1a21      	subs	r1, r4, r0
 800794a:	4628      	mov	r0, r5
 800794c:	f001 fdc6 	bl	80094dc <_sbrk_r>
 8007950:	3001      	adds	r0, #1
 8007952:	d101      	bne.n	8007958 <sbrk_aligned+0x38>
 8007954:	f04f 34ff 	mov.w	r4, #4294967295
 8007958:	4620      	mov	r0, r4
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	2000048c 	.word	0x2000048c

08007960 <_malloc_r>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	1ccd      	adds	r5, r1, #3
 8007966:	f025 0503 	bic.w	r5, r5, #3
 800796a:	3508      	adds	r5, #8
 800796c:	2d0c      	cmp	r5, #12
 800796e:	bf38      	it	cc
 8007970:	250c      	movcc	r5, #12
 8007972:	2d00      	cmp	r5, #0
 8007974:	4607      	mov	r7, r0
 8007976:	db01      	blt.n	800797c <_malloc_r+0x1c>
 8007978:	42a9      	cmp	r1, r5
 800797a:	d905      	bls.n	8007988 <_malloc_r+0x28>
 800797c:	230c      	movs	r3, #12
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	2600      	movs	r6, #0
 8007982:	4630      	mov	r0, r6
 8007984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a5c <_malloc_r+0xfc>
 800798c:	f000 f868 	bl	8007a60 <__malloc_lock>
 8007990:	f8d8 3000 	ldr.w	r3, [r8]
 8007994:	461c      	mov	r4, r3
 8007996:	bb5c      	cbnz	r4, 80079f0 <_malloc_r+0x90>
 8007998:	4629      	mov	r1, r5
 800799a:	4638      	mov	r0, r7
 800799c:	f7ff ffc0 	bl	8007920 <sbrk_aligned>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	4604      	mov	r4, r0
 80079a4:	d155      	bne.n	8007a52 <_malloc_r+0xf2>
 80079a6:	f8d8 4000 	ldr.w	r4, [r8]
 80079aa:	4626      	mov	r6, r4
 80079ac:	2e00      	cmp	r6, #0
 80079ae:	d145      	bne.n	8007a3c <_malloc_r+0xdc>
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	d048      	beq.n	8007a46 <_malloc_r+0xe6>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	4631      	mov	r1, r6
 80079b8:	4638      	mov	r0, r7
 80079ba:	eb04 0903 	add.w	r9, r4, r3
 80079be:	f001 fd8d 	bl	80094dc <_sbrk_r>
 80079c2:	4581      	cmp	r9, r0
 80079c4:	d13f      	bne.n	8007a46 <_malloc_r+0xe6>
 80079c6:	6821      	ldr	r1, [r4, #0]
 80079c8:	1a6d      	subs	r5, r5, r1
 80079ca:	4629      	mov	r1, r5
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff ffa7 	bl	8007920 <sbrk_aligned>
 80079d2:	3001      	adds	r0, #1
 80079d4:	d037      	beq.n	8007a46 <_malloc_r+0xe6>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	442b      	add	r3, r5
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	f8d8 3000 	ldr.w	r3, [r8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d038      	beq.n	8007a56 <_malloc_r+0xf6>
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	42a2      	cmp	r2, r4
 80079e8:	d12b      	bne.n	8007a42 <_malloc_r+0xe2>
 80079ea:	2200      	movs	r2, #0
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	e00f      	b.n	8007a10 <_malloc_r+0xb0>
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	1b52      	subs	r2, r2, r5
 80079f4:	d41f      	bmi.n	8007a36 <_malloc_r+0xd6>
 80079f6:	2a0b      	cmp	r2, #11
 80079f8:	d917      	bls.n	8007a2a <_malloc_r+0xca>
 80079fa:	1961      	adds	r1, r4, r5
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	6025      	str	r5, [r4, #0]
 8007a00:	bf18      	it	ne
 8007a02:	6059      	strne	r1, [r3, #4]
 8007a04:	6863      	ldr	r3, [r4, #4]
 8007a06:	bf08      	it	eq
 8007a08:	f8c8 1000 	streq.w	r1, [r8]
 8007a0c:	5162      	str	r2, [r4, r5]
 8007a0e:	604b      	str	r3, [r1, #4]
 8007a10:	4638      	mov	r0, r7
 8007a12:	f104 060b 	add.w	r6, r4, #11
 8007a16:	f000 f829 	bl	8007a6c <__malloc_unlock>
 8007a1a:	f026 0607 	bic.w	r6, r6, #7
 8007a1e:	1d23      	adds	r3, r4, #4
 8007a20:	1af2      	subs	r2, r6, r3
 8007a22:	d0ae      	beq.n	8007982 <_malloc_r+0x22>
 8007a24:	1b9b      	subs	r3, r3, r6
 8007a26:	50a3      	str	r3, [r4, r2]
 8007a28:	e7ab      	b.n	8007982 <_malloc_r+0x22>
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	d1dd      	bne.n	80079ec <_malloc_r+0x8c>
 8007a30:	f8c8 2000 	str.w	r2, [r8]
 8007a34:	e7ec      	b.n	8007a10 <_malloc_r+0xb0>
 8007a36:	4623      	mov	r3, r4
 8007a38:	6864      	ldr	r4, [r4, #4]
 8007a3a:	e7ac      	b.n	8007996 <_malloc_r+0x36>
 8007a3c:	4634      	mov	r4, r6
 8007a3e:	6876      	ldr	r6, [r6, #4]
 8007a40:	e7b4      	b.n	80079ac <_malloc_r+0x4c>
 8007a42:	4613      	mov	r3, r2
 8007a44:	e7cc      	b.n	80079e0 <_malloc_r+0x80>
 8007a46:	230c      	movs	r3, #12
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	f000 f80e 	bl	8007a6c <__malloc_unlock>
 8007a50:	e797      	b.n	8007982 <_malloc_r+0x22>
 8007a52:	6025      	str	r5, [r4, #0]
 8007a54:	e7dc      	b.n	8007a10 <_malloc_r+0xb0>
 8007a56:	605b      	str	r3, [r3, #4]
 8007a58:	deff      	udf	#255	; 0xff
 8007a5a:	bf00      	nop
 8007a5c:	20000488 	.word	0x20000488

08007a60 <__malloc_lock>:
 8007a60:	4801      	ldr	r0, [pc, #4]	; (8007a68 <__malloc_lock+0x8>)
 8007a62:	f7ff b90a 	b.w	8006c7a <__retarget_lock_acquire_recursive>
 8007a66:	bf00      	nop
 8007a68:	20000484 	.word	0x20000484

08007a6c <__malloc_unlock>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__malloc_unlock+0x8>)
 8007a6e:	f7ff b905 	b.w	8006c7c <__retarget_lock_release_recursive>
 8007a72:	bf00      	nop
 8007a74:	20000484 	.word	0x20000484

08007a78 <_Balloc>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	69c6      	ldr	r6, [r0, #28]
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	b976      	cbnz	r6, 8007aa0 <_Balloc+0x28>
 8007a82:	2010      	movs	r0, #16
 8007a84:	f7ff ff44 	bl	8007910 <malloc>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	61e0      	str	r0, [r4, #28]
 8007a8c:	b920      	cbnz	r0, 8007a98 <_Balloc+0x20>
 8007a8e:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <_Balloc+0x78>)
 8007a90:	4818      	ldr	r0, [pc, #96]	; (8007af4 <_Balloc+0x7c>)
 8007a92:	216b      	movs	r1, #107	; 0x6b
 8007a94:	f001 fd48 	bl	8009528 <__assert_func>
 8007a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a9c:	6006      	str	r6, [r0, #0]
 8007a9e:	60c6      	str	r6, [r0, #12]
 8007aa0:	69e6      	ldr	r6, [r4, #28]
 8007aa2:	68f3      	ldr	r3, [r6, #12]
 8007aa4:	b183      	cbz	r3, 8007ac8 <_Balloc+0x50>
 8007aa6:	69e3      	ldr	r3, [r4, #28]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007aae:	b9b8      	cbnz	r0, 8007ae0 <_Balloc+0x68>
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ab6:	1d72      	adds	r2, r6, #5
 8007ab8:	0092      	lsls	r2, r2, #2
 8007aba:	4620      	mov	r0, r4
 8007abc:	f001 fd52 	bl	8009564 <_calloc_r>
 8007ac0:	b160      	cbz	r0, 8007adc <_Balloc+0x64>
 8007ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ac6:	e00e      	b.n	8007ae6 <_Balloc+0x6e>
 8007ac8:	2221      	movs	r2, #33	; 0x21
 8007aca:	2104      	movs	r1, #4
 8007acc:	4620      	mov	r0, r4
 8007ace:	f001 fd49 	bl	8009564 <_calloc_r>
 8007ad2:	69e3      	ldr	r3, [r4, #28]
 8007ad4:	60f0      	str	r0, [r6, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e4      	bne.n	8007aa6 <_Balloc+0x2e>
 8007adc:	2000      	movs	r0, #0
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	6802      	ldr	r2, [r0, #0]
 8007ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007aec:	e7f7      	b.n	8007ade <_Balloc+0x66>
 8007aee:	bf00      	nop
 8007af0:	0800a5c6 	.word	0x0800a5c6
 8007af4:	0800a646 	.word	0x0800a646

08007af8 <_Bfree>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	69c6      	ldr	r6, [r0, #28]
 8007afc:	4605      	mov	r5, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	b976      	cbnz	r6, 8007b20 <_Bfree+0x28>
 8007b02:	2010      	movs	r0, #16
 8007b04:	f7ff ff04 	bl	8007910 <malloc>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	61e8      	str	r0, [r5, #28]
 8007b0c:	b920      	cbnz	r0, 8007b18 <_Bfree+0x20>
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <_Bfree+0x3c>)
 8007b10:	4809      	ldr	r0, [pc, #36]	; (8007b38 <_Bfree+0x40>)
 8007b12:	218f      	movs	r1, #143	; 0x8f
 8007b14:	f001 fd08 	bl	8009528 <__assert_func>
 8007b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b1c:	6006      	str	r6, [r0, #0]
 8007b1e:	60c6      	str	r6, [r0, #12]
 8007b20:	b13c      	cbz	r4, 8007b32 <_Bfree+0x3a>
 8007b22:	69eb      	ldr	r3, [r5, #28]
 8007b24:	6862      	ldr	r2, [r4, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b2c:	6021      	str	r1, [r4, #0]
 8007b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	0800a5c6 	.word	0x0800a5c6
 8007b38:	0800a646 	.word	0x0800a646

08007b3c <__multadd>:
 8007b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b40:	690d      	ldr	r5, [r1, #16]
 8007b42:	4607      	mov	r7, r0
 8007b44:	460c      	mov	r4, r1
 8007b46:	461e      	mov	r6, r3
 8007b48:	f101 0c14 	add.w	ip, r1, #20
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b52:	b299      	uxth	r1, r3
 8007b54:	fb02 6101 	mla	r1, r2, r1, r6
 8007b58:	0c1e      	lsrs	r6, r3, #16
 8007b5a:	0c0b      	lsrs	r3, r1, #16
 8007b5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b60:	b289      	uxth	r1, r1
 8007b62:	3001      	adds	r0, #1
 8007b64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b68:	4285      	cmp	r5, r0
 8007b6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b72:	dcec      	bgt.n	8007b4e <__multadd+0x12>
 8007b74:	b30e      	cbz	r6, 8007bba <__multadd+0x7e>
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	dc19      	bgt.n	8007bb0 <__multadd+0x74>
 8007b7c:	6861      	ldr	r1, [r4, #4]
 8007b7e:	4638      	mov	r0, r7
 8007b80:	3101      	adds	r1, #1
 8007b82:	f7ff ff79 	bl	8007a78 <_Balloc>
 8007b86:	4680      	mov	r8, r0
 8007b88:	b928      	cbnz	r0, 8007b96 <__multadd+0x5a>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <__multadd+0x84>)
 8007b8e:	480d      	ldr	r0, [pc, #52]	; (8007bc4 <__multadd+0x88>)
 8007b90:	21ba      	movs	r1, #186	; 0xba
 8007b92:	f001 fcc9 	bl	8009528 <__assert_func>
 8007b96:	6922      	ldr	r2, [r4, #16]
 8007b98:	3202      	adds	r2, #2
 8007b9a:	f104 010c 	add.w	r1, r4, #12
 8007b9e:	0092      	lsls	r2, r2, #2
 8007ba0:	300c      	adds	r0, #12
 8007ba2:	f001 fcab 	bl	80094fc <memcpy>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa5 	bl	8007af8 <_Bfree>
 8007bae:	4644      	mov	r4, r8
 8007bb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	615e      	str	r6, [r3, #20]
 8007bb8:	6125      	str	r5, [r4, #16]
 8007bba:	4620      	mov	r0, r4
 8007bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc0:	0800a635 	.word	0x0800a635
 8007bc4:	0800a646 	.word	0x0800a646

08007bc8 <__s2b>:
 8007bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	460c      	mov	r4, r1
 8007bce:	4615      	mov	r5, r2
 8007bd0:	461f      	mov	r7, r3
 8007bd2:	2209      	movs	r2, #9
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bdc:	2100      	movs	r1, #0
 8007bde:	2201      	movs	r2, #1
 8007be0:	429a      	cmp	r2, r3
 8007be2:	db09      	blt.n	8007bf8 <__s2b+0x30>
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff ff47 	bl	8007a78 <_Balloc>
 8007bea:	b940      	cbnz	r0, 8007bfe <__s2b+0x36>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <__s2b+0x8c>)
 8007bf0:	4819      	ldr	r0, [pc, #100]	; (8007c58 <__s2b+0x90>)
 8007bf2:	21d3      	movs	r1, #211	; 0xd3
 8007bf4:	f001 fc98 	bl	8009528 <__assert_func>
 8007bf8:	0052      	lsls	r2, r2, #1
 8007bfa:	3101      	adds	r1, #1
 8007bfc:	e7f0      	b.n	8007be0 <__s2b+0x18>
 8007bfe:	9b08      	ldr	r3, [sp, #32]
 8007c00:	6143      	str	r3, [r0, #20]
 8007c02:	2d09      	cmp	r5, #9
 8007c04:	f04f 0301 	mov.w	r3, #1
 8007c08:	6103      	str	r3, [r0, #16]
 8007c0a:	dd16      	ble.n	8007c3a <__s2b+0x72>
 8007c0c:	f104 0909 	add.w	r9, r4, #9
 8007c10:	46c8      	mov	r8, r9
 8007c12:	442c      	add	r4, r5
 8007c14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c18:	4601      	mov	r1, r0
 8007c1a:	3b30      	subs	r3, #48	; 0x30
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff ff8c 	bl	8007b3c <__multadd>
 8007c24:	45a0      	cmp	r8, r4
 8007c26:	d1f5      	bne.n	8007c14 <__s2b+0x4c>
 8007c28:	f1a5 0408 	sub.w	r4, r5, #8
 8007c2c:	444c      	add	r4, r9
 8007c2e:	1b2d      	subs	r5, r5, r4
 8007c30:	1963      	adds	r3, r4, r5
 8007c32:	42bb      	cmp	r3, r7
 8007c34:	db04      	blt.n	8007c40 <__s2b+0x78>
 8007c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3a:	340a      	adds	r4, #10
 8007c3c:	2509      	movs	r5, #9
 8007c3e:	e7f6      	b.n	8007c2e <__s2b+0x66>
 8007c40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c44:	4601      	mov	r1, r0
 8007c46:	3b30      	subs	r3, #48	; 0x30
 8007c48:	220a      	movs	r2, #10
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff ff76 	bl	8007b3c <__multadd>
 8007c50:	e7ee      	b.n	8007c30 <__s2b+0x68>
 8007c52:	bf00      	nop
 8007c54:	0800a635 	.word	0x0800a635
 8007c58:	0800a646 	.word	0x0800a646

08007c5c <__hi0bits>:
 8007c5c:	0c03      	lsrs	r3, r0, #16
 8007c5e:	041b      	lsls	r3, r3, #16
 8007c60:	b9d3      	cbnz	r3, 8007c98 <__hi0bits+0x3c>
 8007c62:	0400      	lsls	r0, r0, #16
 8007c64:	2310      	movs	r3, #16
 8007c66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c6a:	bf04      	itt	eq
 8007c6c:	0200      	lsleq	r0, r0, #8
 8007c6e:	3308      	addeq	r3, #8
 8007c70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c74:	bf04      	itt	eq
 8007c76:	0100      	lsleq	r0, r0, #4
 8007c78:	3304      	addeq	r3, #4
 8007c7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c7e:	bf04      	itt	eq
 8007c80:	0080      	lsleq	r0, r0, #2
 8007c82:	3302      	addeq	r3, #2
 8007c84:	2800      	cmp	r0, #0
 8007c86:	db05      	blt.n	8007c94 <__hi0bits+0x38>
 8007c88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c8c:	f103 0301 	add.w	r3, r3, #1
 8007c90:	bf08      	it	eq
 8007c92:	2320      	moveq	r3, #32
 8007c94:	4618      	mov	r0, r3
 8007c96:	4770      	bx	lr
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e7e4      	b.n	8007c66 <__hi0bits+0xa>

08007c9c <__lo0bits>:
 8007c9c:	6803      	ldr	r3, [r0, #0]
 8007c9e:	f013 0207 	ands.w	r2, r3, #7
 8007ca2:	d00c      	beq.n	8007cbe <__lo0bits+0x22>
 8007ca4:	07d9      	lsls	r1, r3, #31
 8007ca6:	d422      	bmi.n	8007cee <__lo0bits+0x52>
 8007ca8:	079a      	lsls	r2, r3, #30
 8007caa:	bf49      	itett	mi
 8007cac:	085b      	lsrmi	r3, r3, #1
 8007cae:	089b      	lsrpl	r3, r3, #2
 8007cb0:	6003      	strmi	r3, [r0, #0]
 8007cb2:	2201      	movmi	r2, #1
 8007cb4:	bf5c      	itt	pl
 8007cb6:	6003      	strpl	r3, [r0, #0]
 8007cb8:	2202      	movpl	r2, #2
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4770      	bx	lr
 8007cbe:	b299      	uxth	r1, r3
 8007cc0:	b909      	cbnz	r1, 8007cc6 <__lo0bits+0x2a>
 8007cc2:	0c1b      	lsrs	r3, r3, #16
 8007cc4:	2210      	movs	r2, #16
 8007cc6:	b2d9      	uxtb	r1, r3
 8007cc8:	b909      	cbnz	r1, 8007cce <__lo0bits+0x32>
 8007cca:	3208      	adds	r2, #8
 8007ccc:	0a1b      	lsrs	r3, r3, #8
 8007cce:	0719      	lsls	r1, r3, #28
 8007cd0:	bf04      	itt	eq
 8007cd2:	091b      	lsreq	r3, r3, #4
 8007cd4:	3204      	addeq	r2, #4
 8007cd6:	0799      	lsls	r1, r3, #30
 8007cd8:	bf04      	itt	eq
 8007cda:	089b      	lsreq	r3, r3, #2
 8007cdc:	3202      	addeq	r2, #2
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d403      	bmi.n	8007cea <__lo0bits+0x4e>
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	f102 0201 	add.w	r2, r2, #1
 8007ce8:	d003      	beq.n	8007cf2 <__lo0bits+0x56>
 8007cea:	6003      	str	r3, [r0, #0]
 8007cec:	e7e5      	b.n	8007cba <__lo0bits+0x1e>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	e7e3      	b.n	8007cba <__lo0bits+0x1e>
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	e7e1      	b.n	8007cba <__lo0bits+0x1e>
	...

08007cf8 <__i2b>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	f7ff febb 	bl	8007a78 <_Balloc>
 8007d02:	4602      	mov	r2, r0
 8007d04:	b928      	cbnz	r0, 8007d12 <__i2b+0x1a>
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <__i2b+0x24>)
 8007d08:	4805      	ldr	r0, [pc, #20]	; (8007d20 <__i2b+0x28>)
 8007d0a:	f240 1145 	movw	r1, #325	; 0x145
 8007d0e:	f001 fc0b 	bl	8009528 <__assert_func>
 8007d12:	2301      	movs	r3, #1
 8007d14:	6144      	str	r4, [r0, #20]
 8007d16:	6103      	str	r3, [r0, #16]
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	bf00      	nop
 8007d1c:	0800a635 	.word	0x0800a635
 8007d20:	0800a646 	.word	0x0800a646

08007d24 <__multiply>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4691      	mov	r9, r2
 8007d2a:	690a      	ldr	r2, [r1, #16]
 8007d2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	bfb8      	it	lt
 8007d34:	460b      	movlt	r3, r1
 8007d36:	460c      	mov	r4, r1
 8007d38:	bfbc      	itt	lt
 8007d3a:	464c      	movlt	r4, r9
 8007d3c:	4699      	movlt	r9, r3
 8007d3e:	6927      	ldr	r7, [r4, #16]
 8007d40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d44:	68a3      	ldr	r3, [r4, #8]
 8007d46:	6861      	ldr	r1, [r4, #4]
 8007d48:	eb07 060a 	add.w	r6, r7, sl
 8007d4c:	42b3      	cmp	r3, r6
 8007d4e:	b085      	sub	sp, #20
 8007d50:	bfb8      	it	lt
 8007d52:	3101      	addlt	r1, #1
 8007d54:	f7ff fe90 	bl	8007a78 <_Balloc>
 8007d58:	b930      	cbnz	r0, 8007d68 <__multiply+0x44>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	4b44      	ldr	r3, [pc, #272]	; (8007e70 <__multiply+0x14c>)
 8007d5e:	4845      	ldr	r0, [pc, #276]	; (8007e74 <__multiply+0x150>)
 8007d60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d64:	f001 fbe0 	bl	8009528 <__assert_func>
 8007d68:	f100 0514 	add.w	r5, r0, #20
 8007d6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d70:	462b      	mov	r3, r5
 8007d72:	2200      	movs	r2, #0
 8007d74:	4543      	cmp	r3, r8
 8007d76:	d321      	bcc.n	8007dbc <__multiply+0x98>
 8007d78:	f104 0314 	add.w	r3, r4, #20
 8007d7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d80:	f109 0314 	add.w	r3, r9, #20
 8007d84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d88:	9202      	str	r2, [sp, #8]
 8007d8a:	1b3a      	subs	r2, r7, r4
 8007d8c:	3a15      	subs	r2, #21
 8007d8e:	f022 0203 	bic.w	r2, r2, #3
 8007d92:	3204      	adds	r2, #4
 8007d94:	f104 0115 	add.w	r1, r4, #21
 8007d98:	428f      	cmp	r7, r1
 8007d9a:	bf38      	it	cc
 8007d9c:	2204      	movcc	r2, #4
 8007d9e:	9201      	str	r2, [sp, #4]
 8007da0:	9a02      	ldr	r2, [sp, #8]
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d80c      	bhi.n	8007dc2 <__multiply+0x9e>
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	dd03      	ble.n	8007db4 <__multiply+0x90>
 8007dac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d05b      	beq.n	8007e6c <__multiply+0x148>
 8007db4:	6106      	str	r6, [r0, #16]
 8007db6:	b005      	add	sp, #20
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	f843 2b04 	str.w	r2, [r3], #4
 8007dc0:	e7d8      	b.n	8007d74 <__multiply+0x50>
 8007dc2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dc6:	f1ba 0f00 	cmp.w	sl, #0
 8007dca:	d024      	beq.n	8007e16 <__multiply+0xf2>
 8007dcc:	f104 0e14 	add.w	lr, r4, #20
 8007dd0:	46a9      	mov	r9, r5
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007dda:	f8d9 1000 	ldr.w	r1, [r9]
 8007dde:	fa1f fb82 	uxth.w	fp, r2
 8007de2:	b289      	uxth	r1, r1
 8007de4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007de8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007dec:	f8d9 2000 	ldr.w	r2, [r9]
 8007df0:	4461      	add	r1, ip
 8007df2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007df6:	fb0a c20b 	mla	r2, sl, fp, ip
 8007dfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dfe:	b289      	uxth	r1, r1
 8007e00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e04:	4577      	cmp	r7, lr
 8007e06:	f849 1b04 	str.w	r1, [r9], #4
 8007e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e0e:	d8e2      	bhi.n	8007dd6 <__multiply+0xb2>
 8007e10:	9a01      	ldr	r2, [sp, #4]
 8007e12:	f845 c002 	str.w	ip, [r5, r2]
 8007e16:	9a03      	ldr	r2, [sp, #12]
 8007e18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	f1b9 0f00 	cmp.w	r9, #0
 8007e22:	d021      	beq.n	8007e68 <__multiply+0x144>
 8007e24:	6829      	ldr	r1, [r5, #0]
 8007e26:	f104 0c14 	add.w	ip, r4, #20
 8007e2a:	46ae      	mov	lr, r5
 8007e2c:	f04f 0a00 	mov.w	sl, #0
 8007e30:	f8bc b000 	ldrh.w	fp, [ip]
 8007e34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e38:	fb09 220b 	mla	r2, r9, fp, r2
 8007e3c:	4452      	add	r2, sl
 8007e3e:	b289      	uxth	r1, r1
 8007e40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e44:	f84e 1b04 	str.w	r1, [lr], #4
 8007e48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e50:	f8be 1000 	ldrh.w	r1, [lr]
 8007e54:	fb09 110a 	mla	r1, r9, sl, r1
 8007e58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e5c:	4567      	cmp	r7, ip
 8007e5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e62:	d8e5      	bhi.n	8007e30 <__multiply+0x10c>
 8007e64:	9a01      	ldr	r2, [sp, #4]
 8007e66:	50a9      	str	r1, [r5, r2]
 8007e68:	3504      	adds	r5, #4
 8007e6a:	e799      	b.n	8007da0 <__multiply+0x7c>
 8007e6c:	3e01      	subs	r6, #1
 8007e6e:	e79b      	b.n	8007da8 <__multiply+0x84>
 8007e70:	0800a635 	.word	0x0800a635
 8007e74:	0800a646 	.word	0x0800a646

08007e78 <__pow5mult>:
 8007e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	4615      	mov	r5, r2
 8007e7e:	f012 0203 	ands.w	r2, r2, #3
 8007e82:	4606      	mov	r6, r0
 8007e84:	460f      	mov	r7, r1
 8007e86:	d007      	beq.n	8007e98 <__pow5mult+0x20>
 8007e88:	4c25      	ldr	r4, [pc, #148]	; (8007f20 <__pow5mult+0xa8>)
 8007e8a:	3a01      	subs	r2, #1
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e92:	f7ff fe53 	bl	8007b3c <__multadd>
 8007e96:	4607      	mov	r7, r0
 8007e98:	10ad      	asrs	r5, r5, #2
 8007e9a:	d03d      	beq.n	8007f18 <__pow5mult+0xa0>
 8007e9c:	69f4      	ldr	r4, [r6, #28]
 8007e9e:	b97c      	cbnz	r4, 8007ec0 <__pow5mult+0x48>
 8007ea0:	2010      	movs	r0, #16
 8007ea2:	f7ff fd35 	bl	8007910 <malloc>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	61f0      	str	r0, [r6, #28]
 8007eaa:	b928      	cbnz	r0, 8007eb8 <__pow5mult+0x40>
 8007eac:	4b1d      	ldr	r3, [pc, #116]	; (8007f24 <__pow5mult+0xac>)
 8007eae:	481e      	ldr	r0, [pc, #120]	; (8007f28 <__pow5mult+0xb0>)
 8007eb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007eb4:	f001 fb38 	bl	8009528 <__assert_func>
 8007eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ebc:	6004      	str	r4, [r0, #0]
 8007ebe:	60c4      	str	r4, [r0, #12]
 8007ec0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ec8:	b94c      	cbnz	r4, 8007ede <__pow5mult+0x66>
 8007eca:	f240 2171 	movw	r1, #625	; 0x271
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f7ff ff12 	bl	8007cf8 <__i2b>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eda:	4604      	mov	r4, r0
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	f04f 0900 	mov.w	r9, #0
 8007ee2:	07eb      	lsls	r3, r5, #31
 8007ee4:	d50a      	bpl.n	8007efc <__pow5mult+0x84>
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	4622      	mov	r2, r4
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7ff ff1a 	bl	8007d24 <__multiply>
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	4680      	mov	r8, r0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff fdff 	bl	8007af8 <_Bfree>
 8007efa:	4647      	mov	r7, r8
 8007efc:	106d      	asrs	r5, r5, #1
 8007efe:	d00b      	beq.n	8007f18 <__pow5mult+0xa0>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	b938      	cbnz	r0, 8007f14 <__pow5mult+0x9c>
 8007f04:	4622      	mov	r2, r4
 8007f06:	4621      	mov	r1, r4
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff ff0b 	bl	8007d24 <__multiply>
 8007f0e:	6020      	str	r0, [r4, #0]
 8007f10:	f8c0 9000 	str.w	r9, [r0]
 8007f14:	4604      	mov	r4, r0
 8007f16:	e7e4      	b.n	8007ee2 <__pow5mult+0x6a>
 8007f18:	4638      	mov	r0, r7
 8007f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1e:	bf00      	nop
 8007f20:	0800a790 	.word	0x0800a790
 8007f24:	0800a5c6 	.word	0x0800a5c6
 8007f28:	0800a646 	.word	0x0800a646

08007f2c <__lshift>:
 8007f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	6849      	ldr	r1, [r1, #4]
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f3a:	68a3      	ldr	r3, [r4, #8]
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	4691      	mov	r9, r2
 8007f40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f44:	f108 0601 	add.w	r6, r8, #1
 8007f48:	42b3      	cmp	r3, r6
 8007f4a:	db0b      	blt.n	8007f64 <__lshift+0x38>
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7ff fd93 	bl	8007a78 <_Balloc>
 8007f52:	4605      	mov	r5, r0
 8007f54:	b948      	cbnz	r0, 8007f6a <__lshift+0x3e>
 8007f56:	4602      	mov	r2, r0
 8007f58:	4b28      	ldr	r3, [pc, #160]	; (8007ffc <__lshift+0xd0>)
 8007f5a:	4829      	ldr	r0, [pc, #164]	; (8008000 <__lshift+0xd4>)
 8007f5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f60:	f001 fae2 	bl	8009528 <__assert_func>
 8007f64:	3101      	adds	r1, #1
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	e7ee      	b.n	8007f48 <__lshift+0x1c>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f100 0114 	add.w	r1, r0, #20
 8007f70:	f100 0210 	add.w	r2, r0, #16
 8007f74:	4618      	mov	r0, r3
 8007f76:	4553      	cmp	r3, sl
 8007f78:	db33      	blt.n	8007fe2 <__lshift+0xb6>
 8007f7a:	6920      	ldr	r0, [r4, #16]
 8007f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f80:	f104 0314 	add.w	r3, r4, #20
 8007f84:	f019 091f 	ands.w	r9, r9, #31
 8007f88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f90:	d02b      	beq.n	8007fea <__lshift+0xbe>
 8007f92:	f1c9 0e20 	rsb	lr, r9, #32
 8007f96:	468a      	mov	sl, r1
 8007f98:	2200      	movs	r2, #0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	fa00 f009 	lsl.w	r0, r0, r9
 8007fa0:	4310      	orrs	r0, r2
 8007fa2:	f84a 0b04 	str.w	r0, [sl], #4
 8007fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007faa:	459c      	cmp	ip, r3
 8007fac:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fb0:	d8f3      	bhi.n	8007f9a <__lshift+0x6e>
 8007fb2:	ebac 0304 	sub.w	r3, ip, r4
 8007fb6:	3b15      	subs	r3, #21
 8007fb8:	f023 0303 	bic.w	r3, r3, #3
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	f104 0015 	add.w	r0, r4, #21
 8007fc2:	4584      	cmp	ip, r0
 8007fc4:	bf38      	it	cc
 8007fc6:	2304      	movcc	r3, #4
 8007fc8:	50ca      	str	r2, [r1, r3]
 8007fca:	b10a      	cbz	r2, 8007fd0 <__lshift+0xa4>
 8007fcc:	f108 0602 	add.w	r6, r8, #2
 8007fd0:	3e01      	subs	r6, #1
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	612e      	str	r6, [r5, #16]
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	f7ff fd8e 	bl	8007af8 <_Bfree>
 8007fdc:	4628      	mov	r0, r5
 8007fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	e7c5      	b.n	8007f76 <__lshift+0x4a>
 8007fea:	3904      	subs	r1, #4
 8007fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ff4:	459c      	cmp	ip, r3
 8007ff6:	d8f9      	bhi.n	8007fec <__lshift+0xc0>
 8007ff8:	e7ea      	b.n	8007fd0 <__lshift+0xa4>
 8007ffa:	bf00      	nop
 8007ffc:	0800a635 	.word	0x0800a635
 8008000:	0800a646 	.word	0x0800a646

08008004 <__mcmp>:
 8008004:	b530      	push	{r4, r5, lr}
 8008006:	6902      	ldr	r2, [r0, #16]
 8008008:	690c      	ldr	r4, [r1, #16]
 800800a:	1b12      	subs	r2, r2, r4
 800800c:	d10e      	bne.n	800802c <__mcmp+0x28>
 800800e:	f100 0314 	add.w	r3, r0, #20
 8008012:	3114      	adds	r1, #20
 8008014:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800801c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008020:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008024:	42a5      	cmp	r5, r4
 8008026:	d003      	beq.n	8008030 <__mcmp+0x2c>
 8008028:	d305      	bcc.n	8008036 <__mcmp+0x32>
 800802a:	2201      	movs	r2, #1
 800802c:	4610      	mov	r0, r2
 800802e:	bd30      	pop	{r4, r5, pc}
 8008030:	4283      	cmp	r3, r0
 8008032:	d3f3      	bcc.n	800801c <__mcmp+0x18>
 8008034:	e7fa      	b.n	800802c <__mcmp+0x28>
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	e7f7      	b.n	800802c <__mcmp+0x28>

0800803c <__mdiff>:
 800803c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	460c      	mov	r4, r1
 8008042:	4606      	mov	r6, r0
 8008044:	4611      	mov	r1, r2
 8008046:	4620      	mov	r0, r4
 8008048:	4690      	mov	r8, r2
 800804a:	f7ff ffdb 	bl	8008004 <__mcmp>
 800804e:	1e05      	subs	r5, r0, #0
 8008050:	d110      	bne.n	8008074 <__mdiff+0x38>
 8008052:	4629      	mov	r1, r5
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff fd0f 	bl	8007a78 <_Balloc>
 800805a:	b930      	cbnz	r0, 800806a <__mdiff+0x2e>
 800805c:	4b3a      	ldr	r3, [pc, #232]	; (8008148 <__mdiff+0x10c>)
 800805e:	4602      	mov	r2, r0
 8008060:	f240 2137 	movw	r1, #567	; 0x237
 8008064:	4839      	ldr	r0, [pc, #228]	; (800814c <__mdiff+0x110>)
 8008066:	f001 fa5f 	bl	8009528 <__assert_func>
 800806a:	2301      	movs	r3, #1
 800806c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008074:	bfa4      	itt	ge
 8008076:	4643      	movge	r3, r8
 8008078:	46a0      	movge	r8, r4
 800807a:	4630      	mov	r0, r6
 800807c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008080:	bfa6      	itte	ge
 8008082:	461c      	movge	r4, r3
 8008084:	2500      	movge	r5, #0
 8008086:	2501      	movlt	r5, #1
 8008088:	f7ff fcf6 	bl	8007a78 <_Balloc>
 800808c:	b920      	cbnz	r0, 8008098 <__mdiff+0x5c>
 800808e:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <__mdiff+0x10c>)
 8008090:	4602      	mov	r2, r0
 8008092:	f240 2145 	movw	r1, #581	; 0x245
 8008096:	e7e5      	b.n	8008064 <__mdiff+0x28>
 8008098:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800809c:	6926      	ldr	r6, [r4, #16]
 800809e:	60c5      	str	r5, [r0, #12]
 80080a0:	f104 0914 	add.w	r9, r4, #20
 80080a4:	f108 0514 	add.w	r5, r8, #20
 80080a8:	f100 0e14 	add.w	lr, r0, #20
 80080ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080b4:	f108 0210 	add.w	r2, r8, #16
 80080b8:	46f2      	mov	sl, lr
 80080ba:	2100      	movs	r1, #0
 80080bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80080c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080c4:	fa11 f88b 	uxtah	r8, r1, fp
 80080c8:	b299      	uxth	r1, r3
 80080ca:	0c1b      	lsrs	r3, r3, #16
 80080cc:	eba8 0801 	sub.w	r8, r8, r1
 80080d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080d8:	fa1f f888 	uxth.w	r8, r8
 80080dc:	1419      	asrs	r1, r3, #16
 80080de:	454e      	cmp	r6, r9
 80080e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080e4:	f84a 3b04 	str.w	r3, [sl], #4
 80080e8:	d8e8      	bhi.n	80080bc <__mdiff+0x80>
 80080ea:	1b33      	subs	r3, r6, r4
 80080ec:	3b15      	subs	r3, #21
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	3304      	adds	r3, #4
 80080f4:	3415      	adds	r4, #21
 80080f6:	42a6      	cmp	r6, r4
 80080f8:	bf38      	it	cc
 80080fa:	2304      	movcc	r3, #4
 80080fc:	441d      	add	r5, r3
 80080fe:	4473      	add	r3, lr
 8008100:	469e      	mov	lr, r3
 8008102:	462e      	mov	r6, r5
 8008104:	4566      	cmp	r6, ip
 8008106:	d30e      	bcc.n	8008126 <__mdiff+0xea>
 8008108:	f10c 0203 	add.w	r2, ip, #3
 800810c:	1b52      	subs	r2, r2, r5
 800810e:	f022 0203 	bic.w	r2, r2, #3
 8008112:	3d03      	subs	r5, #3
 8008114:	45ac      	cmp	ip, r5
 8008116:	bf38      	it	cc
 8008118:	2200      	movcc	r2, #0
 800811a:	4413      	add	r3, r2
 800811c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008120:	b17a      	cbz	r2, 8008142 <__mdiff+0x106>
 8008122:	6107      	str	r7, [r0, #16]
 8008124:	e7a4      	b.n	8008070 <__mdiff+0x34>
 8008126:	f856 8b04 	ldr.w	r8, [r6], #4
 800812a:	fa11 f288 	uxtah	r2, r1, r8
 800812e:	1414      	asrs	r4, r2, #16
 8008130:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008134:	b292      	uxth	r2, r2
 8008136:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800813a:	f84e 2b04 	str.w	r2, [lr], #4
 800813e:	1421      	asrs	r1, r4, #16
 8008140:	e7e0      	b.n	8008104 <__mdiff+0xc8>
 8008142:	3f01      	subs	r7, #1
 8008144:	e7ea      	b.n	800811c <__mdiff+0xe0>
 8008146:	bf00      	nop
 8008148:	0800a635 	.word	0x0800a635
 800814c:	0800a646 	.word	0x0800a646

08008150 <__ulp>:
 8008150:	b082      	sub	sp, #8
 8008152:	ed8d 0b00 	vstr	d0, [sp]
 8008156:	9a01      	ldr	r2, [sp, #4]
 8008158:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <__ulp+0x48>)
 800815a:	4013      	ands	r3, r2
 800815c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008160:	2b00      	cmp	r3, #0
 8008162:	dc08      	bgt.n	8008176 <__ulp+0x26>
 8008164:	425b      	negs	r3, r3
 8008166:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800816a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800816e:	da04      	bge.n	800817a <__ulp+0x2a>
 8008170:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008174:	4113      	asrs	r3, r2
 8008176:	2200      	movs	r2, #0
 8008178:	e008      	b.n	800818c <__ulp+0x3c>
 800817a:	f1a2 0314 	sub.w	r3, r2, #20
 800817e:	2b1e      	cmp	r3, #30
 8008180:	bfda      	itte	le
 8008182:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008186:	40da      	lsrle	r2, r3
 8008188:	2201      	movgt	r2, #1
 800818a:	2300      	movs	r3, #0
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	ec41 0b10 	vmov	d0, r0, r1
 8008194:	b002      	add	sp, #8
 8008196:	4770      	bx	lr
 8008198:	7ff00000 	.word	0x7ff00000

0800819c <__b2d>:
 800819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a0:	6906      	ldr	r6, [r0, #16]
 80081a2:	f100 0814 	add.w	r8, r0, #20
 80081a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80081aa:	1f37      	subs	r7, r6, #4
 80081ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7ff fd53 	bl	8007c5c <__hi0bits>
 80081b6:	f1c0 0320 	rsb	r3, r0, #32
 80081ba:	280a      	cmp	r0, #10
 80081bc:	600b      	str	r3, [r1, #0]
 80081be:	491b      	ldr	r1, [pc, #108]	; (800822c <__b2d+0x90>)
 80081c0:	dc15      	bgt.n	80081ee <__b2d+0x52>
 80081c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80081c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80081ca:	45b8      	cmp	r8, r7
 80081cc:	ea43 0501 	orr.w	r5, r3, r1
 80081d0:	bf34      	ite	cc
 80081d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081d6:	2300      	movcs	r3, #0
 80081d8:	3015      	adds	r0, #21
 80081da:	fa02 f000 	lsl.w	r0, r2, r0
 80081de:	fa23 f30c 	lsr.w	r3, r3, ip
 80081e2:	4303      	orrs	r3, r0
 80081e4:	461c      	mov	r4, r3
 80081e6:	ec45 4b10 	vmov	d0, r4, r5
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ee:	45b8      	cmp	r8, r7
 80081f0:	bf3a      	itte	cc
 80081f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80081fa:	2300      	movcs	r3, #0
 80081fc:	380b      	subs	r0, #11
 80081fe:	d012      	beq.n	8008226 <__b2d+0x8a>
 8008200:	f1c0 0120 	rsb	r1, r0, #32
 8008204:	fa23 f401 	lsr.w	r4, r3, r1
 8008208:	4082      	lsls	r2, r0
 800820a:	4322      	orrs	r2, r4
 800820c:	4547      	cmp	r7, r8
 800820e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008212:	bf8c      	ite	hi
 8008214:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008218:	2200      	movls	r2, #0
 800821a:	4083      	lsls	r3, r0
 800821c:	40ca      	lsrs	r2, r1
 800821e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008222:	4313      	orrs	r3, r2
 8008224:	e7de      	b.n	80081e4 <__b2d+0x48>
 8008226:	ea42 0501 	orr.w	r5, r2, r1
 800822a:	e7db      	b.n	80081e4 <__b2d+0x48>
 800822c:	3ff00000 	.word	0x3ff00000

08008230 <__d2b>:
 8008230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008234:	460f      	mov	r7, r1
 8008236:	2101      	movs	r1, #1
 8008238:	ec59 8b10 	vmov	r8, r9, d0
 800823c:	4616      	mov	r6, r2
 800823e:	f7ff fc1b 	bl	8007a78 <_Balloc>
 8008242:	4604      	mov	r4, r0
 8008244:	b930      	cbnz	r0, 8008254 <__d2b+0x24>
 8008246:	4602      	mov	r2, r0
 8008248:	4b24      	ldr	r3, [pc, #144]	; (80082dc <__d2b+0xac>)
 800824a:	4825      	ldr	r0, [pc, #148]	; (80082e0 <__d2b+0xb0>)
 800824c:	f240 310f 	movw	r1, #783	; 0x30f
 8008250:	f001 f96a 	bl	8009528 <__assert_func>
 8008254:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800825c:	bb2d      	cbnz	r5, 80082aa <__d2b+0x7a>
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f1b8 0300 	subs.w	r3, r8, #0
 8008264:	d026      	beq.n	80082b4 <__d2b+0x84>
 8008266:	4668      	mov	r0, sp
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	f7ff fd17 	bl	8007c9c <__lo0bits>
 800826e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008272:	b1e8      	cbz	r0, 80082b0 <__d2b+0x80>
 8008274:	f1c0 0320 	rsb	r3, r0, #32
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	430b      	orrs	r3, r1
 800827e:	40c2      	lsrs	r2, r0
 8008280:	6163      	str	r3, [r4, #20]
 8008282:	9201      	str	r2, [sp, #4]
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	61a3      	str	r3, [r4, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf14      	ite	ne
 800828c:	2202      	movne	r2, #2
 800828e:	2201      	moveq	r2, #1
 8008290:	6122      	str	r2, [r4, #16]
 8008292:	b1bd      	cbz	r5, 80082c4 <__d2b+0x94>
 8008294:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008298:	4405      	add	r5, r0
 800829a:	603d      	str	r5, [r7, #0]
 800829c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082a0:	6030      	str	r0, [r6, #0]
 80082a2:	4620      	mov	r0, r4
 80082a4:	b003      	add	sp, #12
 80082a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ae:	e7d6      	b.n	800825e <__d2b+0x2e>
 80082b0:	6161      	str	r1, [r4, #20]
 80082b2:	e7e7      	b.n	8008284 <__d2b+0x54>
 80082b4:	a801      	add	r0, sp, #4
 80082b6:	f7ff fcf1 	bl	8007c9c <__lo0bits>
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	6163      	str	r3, [r4, #20]
 80082be:	3020      	adds	r0, #32
 80082c0:	2201      	movs	r2, #1
 80082c2:	e7e5      	b.n	8008290 <__d2b+0x60>
 80082c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082cc:	6038      	str	r0, [r7, #0]
 80082ce:	6918      	ldr	r0, [r3, #16]
 80082d0:	f7ff fcc4 	bl	8007c5c <__hi0bits>
 80082d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082d8:	e7e2      	b.n	80082a0 <__d2b+0x70>
 80082da:	bf00      	nop
 80082dc:	0800a635 	.word	0x0800a635
 80082e0:	0800a646 	.word	0x0800a646

080082e4 <__ratio>:
 80082e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	4688      	mov	r8, r1
 80082ea:	4669      	mov	r1, sp
 80082ec:	4681      	mov	r9, r0
 80082ee:	f7ff ff55 	bl	800819c <__b2d>
 80082f2:	a901      	add	r1, sp, #4
 80082f4:	4640      	mov	r0, r8
 80082f6:	ec55 4b10 	vmov	r4, r5, d0
 80082fa:	ee10 aa10 	vmov	sl, s0
 80082fe:	f7ff ff4d 	bl	800819c <__b2d>
 8008302:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008306:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008310:	1a5b      	subs	r3, r3, r1
 8008312:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008316:	ec57 6b10 	vmov	r6, r7, d0
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfd6      	itet	le
 800831e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008322:	462a      	movgt	r2, r5
 8008324:	463a      	movle	r2, r7
 8008326:	46ab      	mov	fp, r5
 8008328:	bfd6      	itet	le
 800832a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800832e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008332:	ee00 3a90 	vmovle	s1, r3
 8008336:	ec4b ab17 	vmov	d7, sl, fp
 800833a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800833e:	b003      	add	sp, #12
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008344 <__copybits>:
 8008344:	3901      	subs	r1, #1
 8008346:	b570      	push	{r4, r5, r6, lr}
 8008348:	1149      	asrs	r1, r1, #5
 800834a:	6914      	ldr	r4, [r2, #16]
 800834c:	3101      	adds	r1, #1
 800834e:	f102 0314 	add.w	r3, r2, #20
 8008352:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800835a:	1f05      	subs	r5, r0, #4
 800835c:	42a3      	cmp	r3, r4
 800835e:	d30c      	bcc.n	800837a <__copybits+0x36>
 8008360:	1aa3      	subs	r3, r4, r2
 8008362:	3b11      	subs	r3, #17
 8008364:	f023 0303 	bic.w	r3, r3, #3
 8008368:	3211      	adds	r2, #17
 800836a:	42a2      	cmp	r2, r4
 800836c:	bf88      	it	hi
 800836e:	2300      	movhi	r3, #0
 8008370:	4418      	add	r0, r3
 8008372:	2300      	movs	r3, #0
 8008374:	4288      	cmp	r0, r1
 8008376:	d305      	bcc.n	8008384 <__copybits+0x40>
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	f853 6b04 	ldr.w	r6, [r3], #4
 800837e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008382:	e7eb      	b.n	800835c <__copybits+0x18>
 8008384:	f840 3b04 	str.w	r3, [r0], #4
 8008388:	e7f4      	b.n	8008374 <__copybits+0x30>

0800838a <__any_on>:
 800838a:	f100 0214 	add.w	r2, r0, #20
 800838e:	6900      	ldr	r0, [r0, #16]
 8008390:	114b      	asrs	r3, r1, #5
 8008392:	4298      	cmp	r0, r3
 8008394:	b510      	push	{r4, lr}
 8008396:	db11      	blt.n	80083bc <__any_on+0x32>
 8008398:	dd0a      	ble.n	80083b0 <__any_on+0x26>
 800839a:	f011 011f 	ands.w	r1, r1, #31
 800839e:	d007      	beq.n	80083b0 <__any_on+0x26>
 80083a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083a4:	fa24 f001 	lsr.w	r0, r4, r1
 80083a8:	fa00 f101 	lsl.w	r1, r0, r1
 80083ac:	428c      	cmp	r4, r1
 80083ae:	d10b      	bne.n	80083c8 <__any_on+0x3e>
 80083b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d803      	bhi.n	80083c0 <__any_on+0x36>
 80083b8:	2000      	movs	r0, #0
 80083ba:	bd10      	pop	{r4, pc}
 80083bc:	4603      	mov	r3, r0
 80083be:	e7f7      	b.n	80083b0 <__any_on+0x26>
 80083c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d0f5      	beq.n	80083b4 <__any_on+0x2a>
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7f6      	b.n	80083ba <__any_on+0x30>

080083cc <sulp>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	4616      	mov	r6, r2
 80083d4:	ec45 4b10 	vmov	d0, r4, r5
 80083d8:	f7ff feba 	bl	8008150 <__ulp>
 80083dc:	b17e      	cbz	r6, 80083fe <sulp+0x32>
 80083de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd09      	ble.n	80083fe <sulp+0x32>
 80083ea:	051b      	lsls	r3, r3, #20
 80083ec:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80083f0:	2000      	movs	r0, #0
 80083f2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80083f6:	ec41 0b17 	vmov	d7, r0, r1
 80083fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80083fe:	bd70      	pop	{r4, r5, r6, pc}

08008400 <_strtod_l>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	ed2d 8b0e 	vpush	{d8-d14}
 8008408:	b097      	sub	sp, #92	; 0x5c
 800840a:	4604      	mov	r4, r0
 800840c:	920d      	str	r2, [sp, #52]	; 0x34
 800840e:	2200      	movs	r2, #0
 8008410:	9212      	str	r2, [sp, #72]	; 0x48
 8008412:	468a      	mov	sl, r1
 8008414:	f04f 0800 	mov.w	r8, #0
 8008418:	f04f 0900 	mov.w	r9, #0
 800841c:	460a      	mov	r2, r1
 800841e:	9211      	str	r2, [sp, #68]	; 0x44
 8008420:	7811      	ldrb	r1, [r2, #0]
 8008422:	292b      	cmp	r1, #43	; 0x2b
 8008424:	d04c      	beq.n	80084c0 <_strtod_l+0xc0>
 8008426:	d839      	bhi.n	800849c <_strtod_l+0x9c>
 8008428:	290d      	cmp	r1, #13
 800842a:	d833      	bhi.n	8008494 <_strtod_l+0x94>
 800842c:	2908      	cmp	r1, #8
 800842e:	d833      	bhi.n	8008498 <_strtod_l+0x98>
 8008430:	2900      	cmp	r1, #0
 8008432:	d03c      	beq.n	80084ae <_strtod_l+0xae>
 8008434:	2200      	movs	r2, #0
 8008436:	9208      	str	r2, [sp, #32]
 8008438:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800843a:	7832      	ldrb	r2, [r6, #0]
 800843c:	2a30      	cmp	r2, #48	; 0x30
 800843e:	f040 80b8 	bne.w	80085b2 <_strtod_l+0x1b2>
 8008442:	7872      	ldrb	r2, [r6, #1]
 8008444:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008448:	2a58      	cmp	r2, #88	; 0x58
 800844a:	d170      	bne.n	800852e <_strtod_l+0x12e>
 800844c:	9302      	str	r3, [sp, #8]
 800844e:	9b08      	ldr	r3, [sp, #32]
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	ab12      	add	r3, sp, #72	; 0x48
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4a91      	ldr	r2, [pc, #580]	; (800869c <_strtod_l+0x29c>)
 8008458:	ab13      	add	r3, sp, #76	; 0x4c
 800845a:	a911      	add	r1, sp, #68	; 0x44
 800845c:	4620      	mov	r0, r4
 800845e:	f001 f8ff 	bl	8009660 <__gethex>
 8008462:	f010 070f 	ands.w	r7, r0, #15
 8008466:	4605      	mov	r5, r0
 8008468:	d005      	beq.n	8008476 <_strtod_l+0x76>
 800846a:	2f06      	cmp	r7, #6
 800846c:	d12a      	bne.n	80084c4 <_strtod_l+0xc4>
 800846e:	3601      	adds	r6, #1
 8008470:	2300      	movs	r3, #0
 8008472:	9611      	str	r6, [sp, #68]	; 0x44
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	f040 8555 	bne.w	8008f28 <_strtod_l+0xb28>
 800847e:	9b08      	ldr	r3, [sp, #32]
 8008480:	ec49 8b10 	vmov	d0, r8, r9
 8008484:	b1cb      	cbz	r3, 80084ba <_strtod_l+0xba>
 8008486:	eeb1 0b40 	vneg.f64	d0, d0
 800848a:	b017      	add	sp, #92	; 0x5c
 800848c:	ecbd 8b0e 	vpop	{d8-d14}
 8008490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008494:	2920      	cmp	r1, #32
 8008496:	d1cd      	bne.n	8008434 <_strtod_l+0x34>
 8008498:	3201      	adds	r2, #1
 800849a:	e7c0      	b.n	800841e <_strtod_l+0x1e>
 800849c:	292d      	cmp	r1, #45	; 0x2d
 800849e:	d1c9      	bne.n	8008434 <_strtod_l+0x34>
 80084a0:	2101      	movs	r1, #1
 80084a2:	9108      	str	r1, [sp, #32]
 80084a4:	1c51      	adds	r1, r2, #1
 80084a6:	9111      	str	r1, [sp, #68]	; 0x44
 80084a8:	7852      	ldrb	r2, [r2, #1]
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	d1c4      	bne.n	8008438 <_strtod_l+0x38>
 80084ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f040 8535 	bne.w	8008f24 <_strtod_l+0xb24>
 80084ba:	ec49 8b10 	vmov	d0, r8, r9
 80084be:	e7e4      	b.n	800848a <_strtod_l+0x8a>
 80084c0:	2100      	movs	r1, #0
 80084c2:	e7ee      	b.n	80084a2 <_strtod_l+0xa2>
 80084c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084c6:	b13a      	cbz	r2, 80084d8 <_strtod_l+0xd8>
 80084c8:	2135      	movs	r1, #53	; 0x35
 80084ca:	a814      	add	r0, sp, #80	; 0x50
 80084cc:	f7ff ff3a 	bl	8008344 <__copybits>
 80084d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7ff fb10 	bl	8007af8 <_Bfree>
 80084d8:	1e7b      	subs	r3, r7, #1
 80084da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d806      	bhi.n	80084ee <_strtod_l+0xee>
 80084e0:	e8df f003 	tbb	[pc, r3]
 80084e4:	201d0314 	.word	0x201d0314
 80084e8:	14          	.byte	0x14
 80084e9:	00          	.byte	0x00
 80084ea:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80084ee:	05eb      	lsls	r3, r5, #23
 80084f0:	bf48      	it	mi
 80084f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80084f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084fa:	0d1b      	lsrs	r3, r3, #20
 80084fc:	051b      	lsls	r3, r3, #20
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1b9      	bne.n	8008476 <_strtod_l+0x76>
 8008502:	f7fe fb8f 	bl	8006c24 <__errno>
 8008506:	2322      	movs	r3, #34	; 0x22
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	e7b4      	b.n	8008476 <_strtod_l+0x76>
 800850c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008510:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008514:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008518:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800851c:	e7e7      	b.n	80084ee <_strtod_l+0xee>
 800851e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80086a4 <_strtod_l+0x2a4>
 8008522:	e7e4      	b.n	80084ee <_strtod_l+0xee>
 8008524:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008528:	f04f 38ff 	mov.w	r8, #4294967295
 800852c:	e7df      	b.n	80084ee <_strtod_l+0xee>
 800852e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	9211      	str	r2, [sp, #68]	; 0x44
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b30      	cmp	r3, #48	; 0x30
 8008538:	d0f9      	beq.n	800852e <_strtod_l+0x12e>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d09b      	beq.n	8008476 <_strtod_l+0x76>
 800853e:	2301      	movs	r3, #1
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008544:	9309      	str	r3, [sp, #36]	; 0x24
 8008546:	2300      	movs	r3, #0
 8008548:	9305      	str	r3, [sp, #20]
 800854a:	9307      	str	r3, [sp, #28]
 800854c:	461e      	mov	r6, r3
 800854e:	220a      	movs	r2, #10
 8008550:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008552:	7805      	ldrb	r5, [r0, #0]
 8008554:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008558:	b2d9      	uxtb	r1, r3
 800855a:	2909      	cmp	r1, #9
 800855c:	d92b      	bls.n	80085b6 <_strtod_l+0x1b6>
 800855e:	4950      	ldr	r1, [pc, #320]	; (80086a0 <_strtod_l+0x2a0>)
 8008560:	2201      	movs	r2, #1
 8008562:	f000 ffa9 	bl	80094b8 <strncmp>
 8008566:	2800      	cmp	r0, #0
 8008568:	d035      	beq.n	80085d6 <_strtod_l+0x1d6>
 800856a:	2000      	movs	r0, #0
 800856c:	462a      	mov	r2, r5
 800856e:	4633      	mov	r3, r6
 8008570:	4683      	mov	fp, r0
 8008572:	4601      	mov	r1, r0
 8008574:	2a65      	cmp	r2, #101	; 0x65
 8008576:	d001      	beq.n	800857c <_strtod_l+0x17c>
 8008578:	2a45      	cmp	r2, #69	; 0x45
 800857a:	d118      	bne.n	80085ae <_strtod_l+0x1ae>
 800857c:	b91b      	cbnz	r3, 8008586 <_strtod_l+0x186>
 800857e:	9b06      	ldr	r3, [sp, #24]
 8008580:	4303      	orrs	r3, r0
 8008582:	d094      	beq.n	80084ae <_strtod_l+0xae>
 8008584:	2300      	movs	r3, #0
 8008586:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800858a:	f10a 0201 	add.w	r2, sl, #1
 800858e:	9211      	str	r2, [sp, #68]	; 0x44
 8008590:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008594:	2a2b      	cmp	r2, #43	; 0x2b
 8008596:	d075      	beq.n	8008684 <_strtod_l+0x284>
 8008598:	2a2d      	cmp	r2, #45	; 0x2d
 800859a:	d07b      	beq.n	8008694 <_strtod_l+0x294>
 800859c:	f04f 0e00 	mov.w	lr, #0
 80085a0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80085a4:	2d09      	cmp	r5, #9
 80085a6:	f240 8083 	bls.w	80086b0 <_strtod_l+0x2b0>
 80085aa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80085ae:	2500      	movs	r5, #0
 80085b0:	e09e      	b.n	80086f0 <_strtod_l+0x2f0>
 80085b2:	2300      	movs	r3, #0
 80085b4:	e7c4      	b.n	8008540 <_strtod_l+0x140>
 80085b6:	2e08      	cmp	r6, #8
 80085b8:	bfd5      	itete	le
 80085ba:	9907      	ldrle	r1, [sp, #28]
 80085bc:	9905      	ldrgt	r1, [sp, #20]
 80085be:	fb02 3301 	mlale	r3, r2, r1, r3
 80085c2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80085c6:	f100 0001 	add.w	r0, r0, #1
 80085ca:	bfd4      	ite	le
 80085cc:	9307      	strle	r3, [sp, #28]
 80085ce:	9305      	strgt	r3, [sp, #20]
 80085d0:	3601      	adds	r6, #1
 80085d2:	9011      	str	r0, [sp, #68]	; 0x44
 80085d4:	e7bc      	b.n	8008550 <_strtod_l+0x150>
 80085d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	9211      	str	r2, [sp, #68]	; 0x44
 80085dc:	785a      	ldrb	r2, [r3, #1]
 80085de:	b3ae      	cbz	r6, 800864c <_strtod_l+0x24c>
 80085e0:	4683      	mov	fp, r0
 80085e2:	4633      	mov	r3, r6
 80085e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80085e8:	2909      	cmp	r1, #9
 80085ea:	d912      	bls.n	8008612 <_strtod_l+0x212>
 80085ec:	2101      	movs	r1, #1
 80085ee:	e7c1      	b.n	8008574 <_strtod_l+0x174>
 80085f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	9211      	str	r2, [sp, #68]	; 0x44
 80085f6:	785a      	ldrb	r2, [r3, #1]
 80085f8:	3001      	adds	r0, #1
 80085fa:	2a30      	cmp	r2, #48	; 0x30
 80085fc:	d0f8      	beq.n	80085f0 <_strtod_l+0x1f0>
 80085fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008602:	2b08      	cmp	r3, #8
 8008604:	f200 8495 	bhi.w	8008f32 <_strtod_l+0xb32>
 8008608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800860a:	9309      	str	r3, [sp, #36]	; 0x24
 800860c:	4683      	mov	fp, r0
 800860e:	2000      	movs	r0, #0
 8008610:	4603      	mov	r3, r0
 8008612:	3a30      	subs	r2, #48	; 0x30
 8008614:	f100 0101 	add.w	r1, r0, #1
 8008618:	d012      	beq.n	8008640 <_strtod_l+0x240>
 800861a:	448b      	add	fp, r1
 800861c:	eb00 0c03 	add.w	ip, r0, r3
 8008620:	4619      	mov	r1, r3
 8008622:	250a      	movs	r5, #10
 8008624:	4561      	cmp	r1, ip
 8008626:	d113      	bne.n	8008650 <_strtod_l+0x250>
 8008628:	1819      	adds	r1, r3, r0
 800862a:	2908      	cmp	r1, #8
 800862c:	f103 0301 	add.w	r3, r3, #1
 8008630:	4403      	add	r3, r0
 8008632:	dc1b      	bgt.n	800866c <_strtod_l+0x26c>
 8008634:	9807      	ldr	r0, [sp, #28]
 8008636:	210a      	movs	r1, #10
 8008638:	fb01 2200 	mla	r2, r1, r0, r2
 800863c:	9207      	str	r2, [sp, #28]
 800863e:	2100      	movs	r1, #0
 8008640:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008642:	1c50      	adds	r0, r2, #1
 8008644:	9011      	str	r0, [sp, #68]	; 0x44
 8008646:	7852      	ldrb	r2, [r2, #1]
 8008648:	4608      	mov	r0, r1
 800864a:	e7cb      	b.n	80085e4 <_strtod_l+0x1e4>
 800864c:	4630      	mov	r0, r6
 800864e:	e7d4      	b.n	80085fa <_strtod_l+0x1fa>
 8008650:	2908      	cmp	r1, #8
 8008652:	f101 0101 	add.w	r1, r1, #1
 8008656:	dc03      	bgt.n	8008660 <_strtod_l+0x260>
 8008658:	9f07      	ldr	r7, [sp, #28]
 800865a:	436f      	muls	r7, r5
 800865c:	9707      	str	r7, [sp, #28]
 800865e:	e7e1      	b.n	8008624 <_strtod_l+0x224>
 8008660:	2910      	cmp	r1, #16
 8008662:	bfde      	ittt	le
 8008664:	9f05      	ldrle	r7, [sp, #20]
 8008666:	436f      	mulle	r7, r5
 8008668:	9705      	strle	r7, [sp, #20]
 800866a:	e7db      	b.n	8008624 <_strtod_l+0x224>
 800866c:	2b10      	cmp	r3, #16
 800866e:	bfdf      	itttt	le
 8008670:	9805      	ldrle	r0, [sp, #20]
 8008672:	210a      	movle	r1, #10
 8008674:	fb01 2200 	mlale	r2, r1, r0, r2
 8008678:	9205      	strle	r2, [sp, #20]
 800867a:	e7e0      	b.n	800863e <_strtod_l+0x23e>
 800867c:	f04f 0b00 	mov.w	fp, #0
 8008680:	2101      	movs	r1, #1
 8008682:	e77c      	b.n	800857e <_strtod_l+0x17e>
 8008684:	f04f 0e00 	mov.w	lr, #0
 8008688:	f10a 0202 	add.w	r2, sl, #2
 800868c:	9211      	str	r2, [sp, #68]	; 0x44
 800868e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008692:	e785      	b.n	80085a0 <_strtod_l+0x1a0>
 8008694:	f04f 0e01 	mov.w	lr, #1
 8008698:	e7f6      	b.n	8008688 <_strtod_l+0x288>
 800869a:	bf00      	nop
 800869c:	0800a7a0 	.word	0x0800a7a0
 80086a0:	0800a79c 	.word	0x0800a79c
 80086a4:	7ff00000 	.word	0x7ff00000
 80086a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086aa:	1c55      	adds	r5, r2, #1
 80086ac:	9511      	str	r5, [sp, #68]	; 0x44
 80086ae:	7852      	ldrb	r2, [r2, #1]
 80086b0:	2a30      	cmp	r2, #48	; 0x30
 80086b2:	d0f9      	beq.n	80086a8 <_strtod_l+0x2a8>
 80086b4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80086b8:	2d08      	cmp	r5, #8
 80086ba:	f63f af78 	bhi.w	80085ae <_strtod_l+0x1ae>
 80086be:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80086c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086c4:	920a      	str	r2, [sp, #40]	; 0x28
 80086c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086c8:	1c55      	adds	r5, r2, #1
 80086ca:	9511      	str	r5, [sp, #68]	; 0x44
 80086cc:	7852      	ldrb	r2, [r2, #1]
 80086ce:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80086d2:	2f09      	cmp	r7, #9
 80086d4:	d937      	bls.n	8008746 <_strtod_l+0x346>
 80086d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80086d8:	1bed      	subs	r5, r5, r7
 80086da:	2d08      	cmp	r5, #8
 80086dc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80086e0:	dc02      	bgt.n	80086e8 <_strtod_l+0x2e8>
 80086e2:	4565      	cmp	r5, ip
 80086e4:	bfa8      	it	ge
 80086e6:	4665      	movge	r5, ip
 80086e8:	f1be 0f00 	cmp.w	lr, #0
 80086ec:	d000      	beq.n	80086f0 <_strtod_l+0x2f0>
 80086ee:	426d      	negs	r5, r5
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d14d      	bne.n	8008790 <_strtod_l+0x390>
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	4303      	orrs	r3, r0
 80086f8:	f47f aebd 	bne.w	8008476 <_strtod_l+0x76>
 80086fc:	2900      	cmp	r1, #0
 80086fe:	f47f aed6 	bne.w	80084ae <_strtod_l+0xae>
 8008702:	2a69      	cmp	r2, #105	; 0x69
 8008704:	d027      	beq.n	8008756 <_strtod_l+0x356>
 8008706:	dc24      	bgt.n	8008752 <_strtod_l+0x352>
 8008708:	2a49      	cmp	r2, #73	; 0x49
 800870a:	d024      	beq.n	8008756 <_strtod_l+0x356>
 800870c:	2a4e      	cmp	r2, #78	; 0x4e
 800870e:	f47f aece 	bne.w	80084ae <_strtod_l+0xae>
 8008712:	4995      	ldr	r1, [pc, #596]	; (8008968 <_strtod_l+0x568>)
 8008714:	a811      	add	r0, sp, #68	; 0x44
 8008716:	f001 f9e3 	bl	8009ae0 <__match>
 800871a:	2800      	cmp	r0, #0
 800871c:	f43f aec7 	beq.w	80084ae <_strtod_l+0xae>
 8008720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b28      	cmp	r3, #40	; 0x28
 8008726:	d12d      	bne.n	8008784 <_strtod_l+0x384>
 8008728:	4990      	ldr	r1, [pc, #576]	; (800896c <_strtod_l+0x56c>)
 800872a:	aa14      	add	r2, sp, #80	; 0x50
 800872c:	a811      	add	r0, sp, #68	; 0x44
 800872e:	f001 f9eb 	bl	8009b08 <__hexnan>
 8008732:	2805      	cmp	r0, #5
 8008734:	d126      	bne.n	8008784 <_strtod_l+0x384>
 8008736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008738:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800873c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008740:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008744:	e697      	b.n	8008476 <_strtod_l+0x76>
 8008746:	250a      	movs	r5, #10
 8008748:	fb05 2c0c 	mla	ip, r5, ip, r2
 800874c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008750:	e7b9      	b.n	80086c6 <_strtod_l+0x2c6>
 8008752:	2a6e      	cmp	r2, #110	; 0x6e
 8008754:	e7db      	b.n	800870e <_strtod_l+0x30e>
 8008756:	4986      	ldr	r1, [pc, #536]	; (8008970 <_strtod_l+0x570>)
 8008758:	a811      	add	r0, sp, #68	; 0x44
 800875a:	f001 f9c1 	bl	8009ae0 <__match>
 800875e:	2800      	cmp	r0, #0
 8008760:	f43f aea5 	beq.w	80084ae <_strtod_l+0xae>
 8008764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008766:	4983      	ldr	r1, [pc, #524]	; (8008974 <_strtod_l+0x574>)
 8008768:	3b01      	subs	r3, #1
 800876a:	a811      	add	r0, sp, #68	; 0x44
 800876c:	9311      	str	r3, [sp, #68]	; 0x44
 800876e:	f001 f9b7 	bl	8009ae0 <__match>
 8008772:	b910      	cbnz	r0, 800877a <_strtod_l+0x37a>
 8008774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008776:	3301      	adds	r3, #1
 8008778:	9311      	str	r3, [sp, #68]	; 0x44
 800877a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8008988 <_strtod_l+0x588>
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	e678      	b.n	8008476 <_strtod_l+0x76>
 8008784:	487c      	ldr	r0, [pc, #496]	; (8008978 <_strtod_l+0x578>)
 8008786:	f000 fec7 	bl	8009518 <nan>
 800878a:	ec59 8b10 	vmov	r8, r9, d0
 800878e:	e672      	b.n	8008476 <_strtod_l+0x76>
 8008790:	eddd 7a07 	vldr	s15, [sp, #28]
 8008794:	eba5 020b 	sub.w	r2, r5, fp
 8008798:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800879c:	2e00      	cmp	r6, #0
 800879e:	bf08      	it	eq
 80087a0:	461e      	moveq	r6, r3
 80087a2:	2b10      	cmp	r3, #16
 80087a4:	9206      	str	r2, [sp, #24]
 80087a6:	461a      	mov	r2, r3
 80087a8:	bfa8      	it	ge
 80087aa:	2210      	movge	r2, #16
 80087ac:	2b09      	cmp	r3, #9
 80087ae:	ec59 8b17 	vmov	r8, r9, d7
 80087b2:	dd0c      	ble.n	80087ce <_strtod_l+0x3ce>
 80087b4:	4971      	ldr	r1, [pc, #452]	; (800897c <_strtod_l+0x57c>)
 80087b6:	eddd 6a05 	vldr	s13, [sp, #20]
 80087ba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80087be:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80087c2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80087c6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80087ca:	ec59 8b16 	vmov	r8, r9, d6
 80087ce:	2b0f      	cmp	r3, #15
 80087d0:	dc37      	bgt.n	8008842 <_strtod_l+0x442>
 80087d2:	9906      	ldr	r1, [sp, #24]
 80087d4:	2900      	cmp	r1, #0
 80087d6:	f43f ae4e 	beq.w	8008476 <_strtod_l+0x76>
 80087da:	dd23      	ble.n	8008824 <_strtod_l+0x424>
 80087dc:	2916      	cmp	r1, #22
 80087de:	dc0b      	bgt.n	80087f8 <_strtod_l+0x3f8>
 80087e0:	4b66      	ldr	r3, [pc, #408]	; (800897c <_strtod_l+0x57c>)
 80087e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80087e6:	ed93 7b00 	vldr	d7, [r3]
 80087ea:	ec49 8b16 	vmov	d6, r8, r9
 80087ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087f2:	ec59 8b17 	vmov	r8, r9, d7
 80087f6:	e63e      	b.n	8008476 <_strtod_l+0x76>
 80087f8:	9806      	ldr	r0, [sp, #24]
 80087fa:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80087fe:	4281      	cmp	r1, r0
 8008800:	db1f      	blt.n	8008842 <_strtod_l+0x442>
 8008802:	4a5e      	ldr	r2, [pc, #376]	; (800897c <_strtod_l+0x57c>)
 8008804:	f1c3 030f 	rsb	r3, r3, #15
 8008808:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800880c:	ed91 7b00 	vldr	d7, [r1]
 8008810:	ec49 8b16 	vmov	d6, r8, r9
 8008814:	1ac3      	subs	r3, r0, r3
 8008816:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800881a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800881e:	ed92 6b00 	vldr	d6, [r2]
 8008822:	e7e4      	b.n	80087ee <_strtod_l+0x3ee>
 8008824:	9906      	ldr	r1, [sp, #24]
 8008826:	3116      	adds	r1, #22
 8008828:	db0b      	blt.n	8008842 <_strtod_l+0x442>
 800882a:	4b54      	ldr	r3, [pc, #336]	; (800897c <_strtod_l+0x57c>)
 800882c:	ebab 0505 	sub.w	r5, fp, r5
 8008830:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008834:	ed95 7b00 	vldr	d7, [r5]
 8008838:	ec49 8b16 	vmov	d6, r8, r9
 800883c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008840:	e7d7      	b.n	80087f2 <_strtod_l+0x3f2>
 8008842:	9906      	ldr	r1, [sp, #24]
 8008844:	1a9a      	subs	r2, r3, r2
 8008846:	440a      	add	r2, r1
 8008848:	2a00      	cmp	r2, #0
 800884a:	dd6e      	ble.n	800892a <_strtod_l+0x52a>
 800884c:	f012 000f 	ands.w	r0, r2, #15
 8008850:	d00a      	beq.n	8008868 <_strtod_l+0x468>
 8008852:	494a      	ldr	r1, [pc, #296]	; (800897c <_strtod_l+0x57c>)
 8008854:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008858:	ed91 7b00 	vldr	d7, [r1]
 800885c:	ec49 8b16 	vmov	d6, r8, r9
 8008860:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008864:	ec59 8b17 	vmov	r8, r9, d7
 8008868:	f032 020f 	bics.w	r2, r2, #15
 800886c:	d04e      	beq.n	800890c <_strtod_l+0x50c>
 800886e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008872:	dd22      	ble.n	80088ba <_strtod_l+0x4ba>
 8008874:	2500      	movs	r5, #0
 8008876:	462e      	mov	r6, r5
 8008878:	9507      	str	r5, [sp, #28]
 800887a:	462f      	mov	r7, r5
 800887c:	2322      	movs	r3, #34	; 0x22
 800887e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008988 <_strtod_l+0x588>
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	f04f 0800 	mov.w	r8, #0
 8008888:	9b07      	ldr	r3, [sp, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f43f adf3 	beq.w	8008476 <_strtod_l+0x76>
 8008890:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008892:	4620      	mov	r0, r4
 8008894:	f7ff f930 	bl	8007af8 <_Bfree>
 8008898:	4639      	mov	r1, r7
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff f92c 	bl	8007af8 <_Bfree>
 80088a0:	4631      	mov	r1, r6
 80088a2:	4620      	mov	r0, r4
 80088a4:	f7ff f928 	bl	8007af8 <_Bfree>
 80088a8:	9907      	ldr	r1, [sp, #28]
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff f924 	bl	8007af8 <_Bfree>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff f920 	bl	8007af8 <_Bfree>
 80088b8:	e5dd      	b.n	8008476 <_strtod_l+0x76>
 80088ba:	2000      	movs	r0, #0
 80088bc:	ec49 8b17 	vmov	d7, r8, r9
 80088c0:	4f2f      	ldr	r7, [pc, #188]	; (8008980 <_strtod_l+0x580>)
 80088c2:	1112      	asrs	r2, r2, #4
 80088c4:	4601      	mov	r1, r0
 80088c6:	2a01      	cmp	r2, #1
 80088c8:	dc23      	bgt.n	8008912 <_strtod_l+0x512>
 80088ca:	b108      	cbz	r0, 80088d0 <_strtod_l+0x4d0>
 80088cc:	ec59 8b17 	vmov	r8, r9, d7
 80088d0:	4a2b      	ldr	r2, [pc, #172]	; (8008980 <_strtod_l+0x580>)
 80088d2:	482c      	ldr	r0, [pc, #176]	; (8008984 <_strtod_l+0x584>)
 80088d4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80088d8:	ed92 7b00 	vldr	d7, [r2]
 80088dc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80088e0:	ec49 8b16 	vmov	d6, r8, r9
 80088e4:	4a28      	ldr	r2, [pc, #160]	; (8008988 <_strtod_l+0x588>)
 80088e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088ea:	ee17 1a90 	vmov	r1, s15
 80088ee:	400a      	ands	r2, r1
 80088f0:	4282      	cmp	r2, r0
 80088f2:	ec59 8b17 	vmov	r8, r9, d7
 80088f6:	d8bd      	bhi.n	8008874 <_strtod_l+0x474>
 80088f8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80088fc:	4282      	cmp	r2, r0
 80088fe:	bf86      	itte	hi
 8008900:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800898c <_strtod_l+0x58c>
 8008904:	f04f 38ff 	movhi.w	r8, #4294967295
 8008908:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800890c:	2200      	movs	r2, #0
 800890e:	9205      	str	r2, [sp, #20]
 8008910:	e076      	b.n	8008a00 <_strtod_l+0x600>
 8008912:	f012 0f01 	tst.w	r2, #1
 8008916:	d004      	beq.n	8008922 <_strtod_l+0x522>
 8008918:	ed97 6b00 	vldr	d6, [r7]
 800891c:	2001      	movs	r0, #1
 800891e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008922:	3101      	adds	r1, #1
 8008924:	1052      	asrs	r2, r2, #1
 8008926:	3708      	adds	r7, #8
 8008928:	e7cd      	b.n	80088c6 <_strtod_l+0x4c6>
 800892a:	d0ef      	beq.n	800890c <_strtod_l+0x50c>
 800892c:	4252      	negs	r2, r2
 800892e:	f012 000f 	ands.w	r0, r2, #15
 8008932:	d00a      	beq.n	800894a <_strtod_l+0x54a>
 8008934:	4911      	ldr	r1, [pc, #68]	; (800897c <_strtod_l+0x57c>)
 8008936:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800893a:	ed91 7b00 	vldr	d7, [r1]
 800893e:	ec49 8b16 	vmov	d6, r8, r9
 8008942:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008946:	ec59 8b17 	vmov	r8, r9, d7
 800894a:	1112      	asrs	r2, r2, #4
 800894c:	d0de      	beq.n	800890c <_strtod_l+0x50c>
 800894e:	2a1f      	cmp	r2, #31
 8008950:	dd1e      	ble.n	8008990 <_strtod_l+0x590>
 8008952:	2500      	movs	r5, #0
 8008954:	462e      	mov	r6, r5
 8008956:	9507      	str	r5, [sp, #28]
 8008958:	462f      	mov	r7, r5
 800895a:	2322      	movs	r3, #34	; 0x22
 800895c:	f04f 0800 	mov.w	r8, #0
 8008960:	f04f 0900 	mov.w	r9, #0
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	e78f      	b.n	8008888 <_strtod_l+0x488>
 8008968:	0800a58d 	.word	0x0800a58d
 800896c:	0800a7b4 	.word	0x0800a7b4
 8008970:	0800a585 	.word	0x0800a585
 8008974:	0800a5bc 	.word	0x0800a5bc
 8008978:	0800a945 	.word	0x0800a945
 800897c:	0800a6c8 	.word	0x0800a6c8
 8008980:	0800a6a0 	.word	0x0800a6a0
 8008984:	7ca00000 	.word	0x7ca00000
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	7fefffff 	.word	0x7fefffff
 8008990:	f012 0110 	ands.w	r1, r2, #16
 8008994:	bf18      	it	ne
 8008996:	216a      	movne	r1, #106	; 0x6a
 8008998:	9105      	str	r1, [sp, #20]
 800899a:	ec49 8b17 	vmov	d7, r8, r9
 800899e:	49be      	ldr	r1, [pc, #760]	; (8008c98 <_strtod_l+0x898>)
 80089a0:	2000      	movs	r0, #0
 80089a2:	07d7      	lsls	r7, r2, #31
 80089a4:	d504      	bpl.n	80089b0 <_strtod_l+0x5b0>
 80089a6:	ed91 6b00 	vldr	d6, [r1]
 80089aa:	2001      	movs	r0, #1
 80089ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089b0:	1052      	asrs	r2, r2, #1
 80089b2:	f101 0108 	add.w	r1, r1, #8
 80089b6:	d1f4      	bne.n	80089a2 <_strtod_l+0x5a2>
 80089b8:	b108      	cbz	r0, 80089be <_strtod_l+0x5be>
 80089ba:	ec59 8b17 	vmov	r8, r9, d7
 80089be:	9a05      	ldr	r2, [sp, #20]
 80089c0:	b1ba      	cbz	r2, 80089f2 <_strtod_l+0x5f2>
 80089c2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80089c6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	4648      	mov	r0, r9
 80089ce:	dd10      	ble.n	80089f2 <_strtod_l+0x5f2>
 80089d0:	2a1f      	cmp	r2, #31
 80089d2:	f340 812c 	ble.w	8008c2e <_strtod_l+0x82e>
 80089d6:	2a34      	cmp	r2, #52	; 0x34
 80089d8:	bfde      	ittt	le
 80089da:	f04f 32ff 	movle.w	r2, #4294967295
 80089de:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80089e2:	408a      	lslle	r2, r1
 80089e4:	f04f 0800 	mov.w	r8, #0
 80089e8:	bfcc      	ite	gt
 80089ea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80089ee:	ea02 0900 	andle.w	r9, r2, r0
 80089f2:	ec49 8b17 	vmov	d7, r8, r9
 80089f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	d0a8      	beq.n	8008952 <_strtod_l+0x552>
 8008a00:	9a07      	ldr	r2, [sp, #28]
 8008a02:	9200      	str	r2, [sp, #0]
 8008a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a06:	4632      	mov	r2, r6
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff f8dd 	bl	8007bc8 <__s2b>
 8008a0e:	9007      	str	r0, [sp, #28]
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f af2f 	beq.w	8008874 <_strtod_l+0x474>
 8008a16:	9a06      	ldr	r2, [sp, #24]
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	ebab 0305 	sub.w	r3, fp, r5
 8008a1e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8008c78 <_strtod_l+0x878>
 8008a22:	bfa8      	it	ge
 8008a24:	2300      	movge	r3, #0
 8008a26:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008c80 <_strtod_l+0x880>
 8008a2a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008c88 <_strtod_l+0x888>
 8008a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a30:	2500      	movs	r5, #0
 8008a32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a36:	930c      	str	r3, [sp, #48]	; 0x30
 8008a38:	462e      	mov	r6, r5
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	6859      	ldr	r1, [r3, #4]
 8008a40:	f7ff f81a 	bl	8007a78 <_Balloc>
 8008a44:	4607      	mov	r7, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f af18 	beq.w	800887c <_strtod_l+0x47c>
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	3202      	adds	r2, #2
 8008a52:	f103 010c 	add.w	r1, r3, #12
 8008a56:	0092      	lsls	r2, r2, #2
 8008a58:	300c      	adds	r0, #12
 8008a5a:	f000 fd4f 	bl	80094fc <memcpy>
 8008a5e:	ec49 8b10 	vmov	d0, r8, r9
 8008a62:	aa14      	add	r2, sp, #80	; 0x50
 8008a64:	a913      	add	r1, sp, #76	; 0x4c
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fbe2 	bl	8008230 <__d2b>
 8008a6c:	ec49 8b18 	vmov	d8, r8, r9
 8008a70:	9012      	str	r0, [sp, #72]	; 0x48
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f43f af02 	beq.w	800887c <_strtod_l+0x47c>
 8008a78:	2101      	movs	r1, #1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f7ff f93c 	bl	8007cf8 <__i2b>
 8008a80:	4606      	mov	r6, r0
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f43f aefa 	beq.w	800887c <_strtod_l+0x47c>
 8008a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a8a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bfab      	itete	ge
 8008a90:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008a92:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008a94:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008a98:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008a9c:	bfac      	ite	ge
 8008a9e:	eb03 0b02 	addge.w	fp, r3, r2
 8008aa2:	eba2 0a03 	sublt.w	sl, r2, r3
 8008aa6:	9a05      	ldr	r2, [sp, #20]
 8008aa8:	1a9b      	subs	r3, r3, r2
 8008aaa:	440b      	add	r3, r1
 8008aac:	4a7b      	ldr	r2, [pc, #492]	; (8008c9c <_strtod_l+0x89c>)
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008ab6:	f280 80cd 	bge.w	8008c54 <_strtod_l+0x854>
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	2a1f      	cmp	r2, #31
 8008abe:	eba1 0102 	sub.w	r1, r1, r2
 8008ac2:	f04f 0001 	mov.w	r0, #1
 8008ac6:	f300 80b9 	bgt.w	8008c3c <_strtod_l+0x83c>
 8008aca:	fa00 f302 	lsl.w	r3, r0, r2
 8008ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ad4:	eb0b 0301 	add.w	r3, fp, r1
 8008ad8:	9a05      	ldr	r2, [sp, #20]
 8008ada:	459b      	cmp	fp, r3
 8008adc:	448a      	add	sl, r1
 8008ade:	4492      	add	sl, r2
 8008ae0:	465a      	mov	r2, fp
 8008ae2:	bfa8      	it	ge
 8008ae4:	461a      	movge	r2, r3
 8008ae6:	4552      	cmp	r2, sl
 8008ae8:	bfa8      	it	ge
 8008aea:	4652      	movge	r2, sl
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	bfc2      	ittt	gt
 8008af0:	1a9b      	subgt	r3, r3, r2
 8008af2:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008af6:	ebab 0b02 	subgt.w	fp, fp, r2
 8008afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afc:	2a00      	cmp	r2, #0
 8008afe:	dd18      	ble.n	8008b32 <_strtod_l+0x732>
 8008b00:	4631      	mov	r1, r6
 8008b02:	4620      	mov	r0, r4
 8008b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b06:	f7ff f9b7 	bl	8007e78 <__pow5mult>
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f43f aeb5 	beq.w	800887c <_strtod_l+0x47c>
 8008b12:	4601      	mov	r1, r0
 8008b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7ff f904 	bl	8007d24 <__multiply>
 8008b1c:	900e      	str	r0, [sp, #56]	; 0x38
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f43f aeac 	beq.w	800887c <_strtod_l+0x47c>
 8008b24:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7fe ffe6 	bl	8007af8 <_Bfree>
 8008b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b30:	9212      	str	r2, [sp, #72]	; 0x48
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f300 8093 	bgt.w	8008c5e <_strtod_l+0x85e>
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dd08      	ble.n	8008b50 <_strtod_l+0x750>
 8008b3e:	4639      	mov	r1, r7
 8008b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff f998 	bl	8007e78 <__pow5mult>
 8008b48:	4607      	mov	r7, r0
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f43f ae96 	beq.w	800887c <_strtod_l+0x47c>
 8008b50:	f1ba 0f00 	cmp.w	sl, #0
 8008b54:	dd08      	ble.n	8008b68 <_strtod_l+0x768>
 8008b56:	4639      	mov	r1, r7
 8008b58:	4652      	mov	r2, sl
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7ff f9e6 	bl	8007f2c <__lshift>
 8008b60:	4607      	mov	r7, r0
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f ae8a 	beq.w	800887c <_strtod_l+0x47c>
 8008b68:	f1bb 0f00 	cmp.w	fp, #0
 8008b6c:	dd08      	ble.n	8008b80 <_strtod_l+0x780>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	465a      	mov	r2, fp
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff f9da 	bl	8007f2c <__lshift>
 8008b78:	4606      	mov	r6, r0
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f43f ae7e 	beq.w	800887c <_strtod_l+0x47c>
 8008b80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b82:	463a      	mov	r2, r7
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7ff fa59 	bl	800803c <__mdiff>
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f43f ae75 	beq.w	800887c <_strtod_l+0x47c>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008b98:	60c3      	str	r3, [r0, #12]
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	f7ff fa32 	bl	8008004 <__mcmp>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	da7f      	bge.n	8008ca4 <_strtod_l+0x8a4>
 8008ba4:	ea5a 0a08 	orrs.w	sl, sl, r8
 8008ba8:	f040 80a5 	bne.w	8008cf6 <_strtod_l+0x8f6>
 8008bac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 80a0 	bne.w	8008cf6 <_strtod_l+0x8f6>
 8008bb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bba:	0d1b      	lsrs	r3, r3, #20
 8008bbc:	051b      	lsls	r3, r3, #20
 8008bbe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bc2:	f240 8098 	bls.w	8008cf6 <_strtod_l+0x8f6>
 8008bc6:	696b      	ldr	r3, [r5, #20]
 8008bc8:	b91b      	cbnz	r3, 8008bd2 <_strtod_l+0x7d2>
 8008bca:	692b      	ldr	r3, [r5, #16]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	f340 8092 	ble.w	8008cf6 <_strtod_l+0x8f6>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7ff f9a8 	bl	8007f2c <__lshift>
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4605      	mov	r5, r0
 8008be0:	f7ff fa10 	bl	8008004 <__mcmp>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f340 8086 	ble.w	8008cf6 <_strtod_l+0x8f6>
 8008bea:	9905      	ldr	r1, [sp, #20]
 8008bec:	4a2c      	ldr	r2, [pc, #176]	; (8008ca0 <_strtod_l+0x8a0>)
 8008bee:	464b      	mov	r3, r9
 8008bf0:	2900      	cmp	r1, #0
 8008bf2:	f000 809f 	beq.w	8008d34 <_strtod_l+0x934>
 8008bf6:	ea02 0109 	and.w	r1, r2, r9
 8008bfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bfe:	f300 8099 	bgt.w	8008d34 <_strtod_l+0x934>
 8008c02:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c06:	f77f aea8 	ble.w	800895a <_strtod_l+0x55a>
 8008c0a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008c90 <_strtod_l+0x890>
 8008c0e:	ec49 8b16 	vmov	d6, r8, r9
 8008c12:	4b23      	ldr	r3, [pc, #140]	; (8008ca0 <_strtod_l+0x8a0>)
 8008c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c18:	ee17 2a90 	vmov	r2, s15
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	ec59 8b17 	vmov	r8, r9, d7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f47f ae34 	bne.w	8008890 <_strtod_l+0x490>
 8008c28:	2322      	movs	r3, #34	; 0x22
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	e630      	b.n	8008890 <_strtod_l+0x490>
 8008c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c32:	fa01 f202 	lsl.w	r2, r1, r2
 8008c36:	ea02 0808 	and.w	r8, r2, r8
 8008c3a:	e6da      	b.n	80089f2 <_strtod_l+0x5f2>
 8008c3c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008c40:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008c44:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008c48:	33e2      	adds	r3, #226	; 0xe2
 8008c4a:	fa00 f303 	lsl.w	r3, r0, r3
 8008c4e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008c52:	e73f      	b.n	8008ad4 <_strtod_l+0x6d4>
 8008c54:	2200      	movs	r2, #0
 8008c56:	2301      	movs	r3, #1
 8008c58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c5c:	e73a      	b.n	8008ad4 <_strtod_l+0x6d4>
 8008c5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008c60:	461a      	mov	r2, r3
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7ff f962 	bl	8007f2c <__lshift>
 8008c68:	9012      	str	r0, [sp, #72]	; 0x48
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f47f af64 	bne.w	8008b38 <_strtod_l+0x738>
 8008c70:	e604      	b.n	800887c <_strtod_l+0x47c>
 8008c72:	bf00      	nop
 8008c74:	f3af 8000 	nop.w
 8008c78:	94a03595 	.word	0x94a03595
 8008c7c:	3fcfffff 	.word	0x3fcfffff
 8008c80:	94a03595 	.word	0x94a03595
 8008c84:	3fdfffff 	.word	0x3fdfffff
 8008c88:	35afe535 	.word	0x35afe535
 8008c8c:	3fe00000 	.word	0x3fe00000
 8008c90:	00000000 	.word	0x00000000
 8008c94:	39500000 	.word	0x39500000
 8008c98:	0800a7c8 	.word	0x0800a7c8
 8008c9c:	fffffc02 	.word	0xfffffc02
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	46cb      	mov	fp, r9
 8008ca6:	d15f      	bne.n	8008d68 <_strtod_l+0x968>
 8008ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cac:	f1ba 0f00 	cmp.w	sl, #0
 8008cb0:	d02a      	beq.n	8008d08 <_strtod_l+0x908>
 8008cb2:	4aa7      	ldr	r2, [pc, #668]	; (8008f50 <_strtod_l+0xb50>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d12b      	bne.n	8008d10 <_strtod_l+0x910>
 8008cb8:	9b05      	ldr	r3, [sp, #20]
 8008cba:	4642      	mov	r2, r8
 8008cbc:	b1fb      	cbz	r3, 8008cfe <_strtod_l+0x8fe>
 8008cbe:	4ba5      	ldr	r3, [pc, #660]	; (8008f54 <_strtod_l+0xb54>)
 8008cc0:	ea09 0303 	and.w	r3, r9, r3
 8008cc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ccc:	d81a      	bhi.n	8008d04 <_strtod_l+0x904>
 8008cce:	0d1b      	lsrs	r3, r3, #20
 8008cd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d119      	bne.n	8008d10 <_strtod_l+0x910>
 8008cdc:	4b9e      	ldr	r3, [pc, #632]	; (8008f58 <_strtod_l+0xb58>)
 8008cde:	459b      	cmp	fp, r3
 8008ce0:	d102      	bne.n	8008ce8 <_strtod_l+0x8e8>
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	f43f adca 	beq.w	800887c <_strtod_l+0x47c>
 8008ce8:	4b9a      	ldr	r3, [pc, #616]	; (8008f54 <_strtod_l+0xb54>)
 8008cea:	ea0b 0303 	and.w	r3, fp, r3
 8008cee:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	9b05      	ldr	r3, [sp, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d186      	bne.n	8008c0a <_strtod_l+0x80a>
 8008cfc:	e5c8      	b.n	8008890 <_strtod_l+0x490>
 8008cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008d02:	e7e9      	b.n	8008cd8 <_strtod_l+0x8d8>
 8008d04:	460b      	mov	r3, r1
 8008d06:	e7e7      	b.n	8008cd8 <_strtod_l+0x8d8>
 8008d08:	ea53 0308 	orrs.w	r3, r3, r8
 8008d0c:	f43f af6d 	beq.w	8008bea <_strtod_l+0x7ea>
 8008d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d12:	b1cb      	cbz	r3, 8008d48 <_strtod_l+0x948>
 8008d14:	ea13 0f0b 	tst.w	r3, fp
 8008d18:	d0ed      	beq.n	8008cf6 <_strtod_l+0x8f6>
 8008d1a:	9a05      	ldr	r2, [sp, #20]
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	4649      	mov	r1, r9
 8008d20:	f1ba 0f00 	cmp.w	sl, #0
 8008d24:	d014      	beq.n	8008d50 <_strtod_l+0x950>
 8008d26:	f7ff fb51 	bl	80083cc <sulp>
 8008d2a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008d2e:	ec59 8b17 	vmov	r8, r9, d7
 8008d32:	e7e0      	b.n	8008cf6 <_strtod_l+0x8f6>
 8008d34:	4013      	ands	r3, r2
 8008d36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d3a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008d3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008d42:	f04f 38ff 	mov.w	r8, #4294967295
 8008d46:	e7d6      	b.n	8008cf6 <_strtod_l+0x8f6>
 8008d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4a:	ea13 0f08 	tst.w	r3, r8
 8008d4e:	e7e3      	b.n	8008d18 <_strtod_l+0x918>
 8008d50:	f7ff fb3c 	bl	80083cc <sulp>
 8008d54:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008d58:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d60:	ec59 8b10 	vmov	r8, r9, d0
 8008d64:	d1c7      	bne.n	8008cf6 <_strtod_l+0x8f6>
 8008d66:	e5f8      	b.n	800895a <_strtod_l+0x55a>
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7ff faba 	bl	80082e4 <__ratio>
 8008d70:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008d74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7c:	d85f      	bhi.n	8008e3e <_strtod_l+0xa3e>
 8008d7e:	f1ba 0f00 	cmp.w	sl, #0
 8008d82:	d166      	bne.n	8008e52 <_strtod_l+0xa52>
 8008d84:	f1b8 0f00 	cmp.w	r8, #0
 8008d88:	d14d      	bne.n	8008e26 <_strtod_l+0xa26>
 8008d8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d8e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d162      	bne.n	8008e5c <_strtod_l+0xa5c>
 8008d96:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8008d9a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da2:	d401      	bmi.n	8008da8 <_strtod_l+0x9a8>
 8008da4:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008da8:	eeb1 cb4d 	vneg.f64	d12, d13
 8008dac:	4869      	ldr	r0, [pc, #420]	; (8008f54 <_strtod_l+0xb54>)
 8008dae:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8008f60 <_strtod_l+0xb60>
 8008db2:	ea0b 0100 	and.w	r1, fp, r0
 8008db6:	4561      	cmp	r1, ip
 8008db8:	ec53 2b1c 	vmov	r2, r3, d12
 8008dbc:	d17a      	bne.n	8008eb4 <_strtod_l+0xab4>
 8008dbe:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008dc2:	ec49 8b10 	vmov	d0, r8, r9
 8008dc6:	910a      	str	r1, [sp, #40]	; 0x28
 8008dc8:	f7ff f9c2 	bl	8008150 <__ulp>
 8008dcc:	ec49 8b1e 	vmov	d14, r8, r9
 8008dd0:	4860      	ldr	r0, [pc, #384]	; (8008f54 <_strtod_l+0xb54>)
 8008dd2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8008dd6:	ee1e 3a90 	vmov	r3, s29
 8008dda:	4a60      	ldr	r2, [pc, #384]	; (8008f5c <_strtod_l+0xb5c>)
 8008ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008dde:	4018      	ands	r0, r3
 8008de0:	4290      	cmp	r0, r2
 8008de2:	ec59 8b1e 	vmov	r8, r9, d14
 8008de6:	d93c      	bls.n	8008e62 <_strtod_l+0xa62>
 8008de8:	ee18 2a90 	vmov	r2, s17
 8008dec:	4b5a      	ldr	r3, [pc, #360]	; (8008f58 <_strtod_l+0xb58>)
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d104      	bne.n	8008dfc <_strtod_l+0x9fc>
 8008df2:	ee18 3a10 	vmov	r3, s16
 8008df6:	3301      	adds	r3, #1
 8008df8:	f43f ad40 	beq.w	800887c <_strtod_l+0x47c>
 8008dfc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8008f58 <_strtod_l+0xb58>
 8008e00:	f04f 38ff 	mov.w	r8, #4294967295
 8008e04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e06:	4620      	mov	r0, r4
 8008e08:	f7fe fe76 	bl	8007af8 <_Bfree>
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f7fe fe72 	bl	8007af8 <_Bfree>
 8008e14:	4631      	mov	r1, r6
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7fe fe6e 	bl	8007af8 <_Bfree>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7fe fe6a 	bl	8007af8 <_Bfree>
 8008e24:	e609      	b.n	8008a3a <_strtod_l+0x63a>
 8008e26:	f1b8 0f01 	cmp.w	r8, #1
 8008e2a:	d103      	bne.n	8008e34 <_strtod_l+0xa34>
 8008e2c:	f1b9 0f00 	cmp.w	r9, #0
 8008e30:	f43f ad93 	beq.w	800895a <_strtod_l+0x55a>
 8008e34:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8008e38:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008e3c:	e7b6      	b.n	8008dac <_strtod_l+0x9ac>
 8008e3e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008e42:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008e46:	f1ba 0f00 	cmp.w	sl, #0
 8008e4a:	d0ad      	beq.n	8008da8 <_strtod_l+0x9a8>
 8008e4c:	eeb0 cb4d 	vmov.f64	d12, d13
 8008e50:	e7ac      	b.n	8008dac <_strtod_l+0x9ac>
 8008e52:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8008e56:	eeb0 db4c 	vmov.f64	d13, d12
 8008e5a:	e7a7      	b.n	8008dac <_strtod_l+0x9ac>
 8008e5c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8008e60:	e7a4      	b.n	8008dac <_strtod_l+0x9ac>
 8008e62:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008e66:	9b05      	ldr	r3, [sp, #20]
 8008e68:	46cb      	mov	fp, r9
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1ca      	bne.n	8008e04 <_strtod_l+0xa04>
 8008e6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e72:	0d1b      	lsrs	r3, r3, #20
 8008e74:	051b      	lsls	r3, r3, #20
 8008e76:	4299      	cmp	r1, r3
 8008e78:	d1c4      	bne.n	8008e04 <_strtod_l+0xa04>
 8008e7a:	ec51 0b1d 	vmov	r0, r1, d13
 8008e7e:	f7f7 fc0b 	bl	8000698 <__aeabi_d2lz>
 8008e82:	f7f7 fbc3 	bl	800060c <__aeabi_l2d>
 8008e86:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8008e8a:	ec41 0b17 	vmov	d7, r0, r1
 8008e8e:	ea4b 0b08 	orr.w	fp, fp, r8
 8008e92:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8008e96:	ee3d db47 	vsub.f64	d13, d13, d7
 8008e9a:	d03c      	beq.n	8008f16 <_strtod_l+0xb16>
 8008e9c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea4:	f53f acf4 	bmi.w	8008890 <_strtod_l+0x490>
 8008ea8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb0:	dda8      	ble.n	8008e04 <_strtod_l+0xa04>
 8008eb2:	e4ed      	b.n	8008890 <_strtod_l+0x490>
 8008eb4:	9805      	ldr	r0, [sp, #20]
 8008eb6:	b1f0      	cbz	r0, 8008ef6 <_strtod_l+0xaf6>
 8008eb8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008ebc:	d81b      	bhi.n	8008ef6 <_strtod_l+0xaf6>
 8008ebe:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8008f48 <_strtod_l+0xb48>
 8008ec2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eca:	d811      	bhi.n	8008ef0 <_strtod_l+0xaf0>
 8008ecc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008ed0:	ee1d 3a10 	vmov	r3, s26
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	bf38      	it	cc
 8008ed8:	2301      	movcc	r3, #1
 8008eda:	ee0d 3a10 	vmov	s26, r3
 8008ede:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008ee2:	f1ba 0f00 	cmp.w	sl, #0
 8008ee6:	d113      	bne.n	8008f10 <_strtod_l+0xb10>
 8008ee8:	eeb1 7b4d 	vneg.f64	d7, d13
 8008eec:	ec53 2b17 	vmov	r2, r3, d7
 8008ef0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008ef4:	1a43      	subs	r3, r0, r1
 8008ef6:	eeb0 0b48 	vmov.f64	d0, d8
 8008efa:	ec43 2b1c 	vmov	d12, r2, r3
 8008efe:	910a      	str	r1, [sp, #40]	; 0x28
 8008f00:	f7ff f926 	bl	8008150 <__ulp>
 8008f04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f06:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008f0a:	ec59 8b18 	vmov	r8, r9, d8
 8008f0e:	e7aa      	b.n	8008e66 <_strtod_l+0xa66>
 8008f10:	eeb0 7b4d 	vmov.f64	d7, d13
 8008f14:	e7ea      	b.n	8008eec <_strtod_l+0xaec>
 8008f16:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1e:	f57f af71 	bpl.w	8008e04 <_strtod_l+0xa04>
 8008f22:	e4b5      	b.n	8008890 <_strtod_l+0x490>
 8008f24:	2300      	movs	r3, #0
 8008f26:	9308      	str	r3, [sp, #32]
 8008f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	f7ff baa6 	b.w	800847e <_strtod_l+0x7e>
 8008f32:	2a65      	cmp	r2, #101	; 0x65
 8008f34:	f43f aba2 	beq.w	800867c <_strtod_l+0x27c>
 8008f38:	2a45      	cmp	r2, #69	; 0x45
 8008f3a:	f43f ab9f 	beq.w	800867c <_strtod_l+0x27c>
 8008f3e:	2101      	movs	r1, #1
 8008f40:	f7ff bbd8 	b.w	80086f4 <_strtod_l+0x2f4>
 8008f44:	f3af 8000 	nop.w
 8008f48:	ffc00000 	.word	0xffc00000
 8008f4c:	41dfffff 	.word	0x41dfffff
 8008f50:	000fffff 	.word	0x000fffff
 8008f54:	7ff00000 	.word	0x7ff00000
 8008f58:	7fefffff 	.word	0x7fefffff
 8008f5c:	7c9fffff 	.word	0x7c9fffff
 8008f60:	7fe00000 	.word	0x7fe00000

08008f64 <_strtod_r>:
 8008f64:	4b01      	ldr	r3, [pc, #4]	; (8008f6c <_strtod_r+0x8>)
 8008f66:	f7ff ba4b 	b.w	8008400 <_strtod_l>
 8008f6a:	bf00      	nop
 8008f6c:	2000006c 	.word	0x2000006c

08008f70 <_strtol_l.constprop.0>:
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f76:	d001      	beq.n	8008f7c <_strtol_l.constprop.0+0xc>
 8008f78:	2b24      	cmp	r3, #36	; 0x24
 8008f7a:	d906      	bls.n	8008f8a <_strtol_l.constprop.0+0x1a>
 8008f7c:	f7fd fe52 	bl	8006c24 <__errno>
 8008f80:	2316      	movs	r3, #22
 8008f82:	6003      	str	r3, [r0, #0]
 8008f84:	2000      	movs	r0, #0
 8008f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009070 <_strtol_l.constprop.0+0x100>
 8008f8e:	460d      	mov	r5, r1
 8008f90:	462e      	mov	r6, r5
 8008f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f96:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f9a:	f017 0708 	ands.w	r7, r7, #8
 8008f9e:	d1f7      	bne.n	8008f90 <_strtol_l.constprop.0+0x20>
 8008fa0:	2c2d      	cmp	r4, #45	; 0x2d
 8008fa2:	d132      	bne.n	800900a <_strtol_l.constprop.0+0x9a>
 8008fa4:	782c      	ldrb	r4, [r5, #0]
 8008fa6:	2701      	movs	r7, #1
 8008fa8:	1cb5      	adds	r5, r6, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d05b      	beq.n	8009066 <_strtol_l.constprop.0+0xf6>
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d109      	bne.n	8008fc6 <_strtol_l.constprop.0+0x56>
 8008fb2:	2c30      	cmp	r4, #48	; 0x30
 8008fb4:	d107      	bne.n	8008fc6 <_strtol_l.constprop.0+0x56>
 8008fb6:	782c      	ldrb	r4, [r5, #0]
 8008fb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008fbc:	2c58      	cmp	r4, #88	; 0x58
 8008fbe:	d14d      	bne.n	800905c <_strtol_l.constprop.0+0xec>
 8008fc0:	786c      	ldrb	r4, [r5, #1]
 8008fc2:	2310      	movs	r3, #16
 8008fc4:	3502      	adds	r5, #2
 8008fc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008fca:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fce:	f04f 0e00 	mov.w	lr, #0
 8008fd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fd6:	4676      	mov	r6, lr
 8008fd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fdc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fe0:	f1bc 0f09 	cmp.w	ip, #9
 8008fe4:	d816      	bhi.n	8009014 <_strtol_l.constprop.0+0xa4>
 8008fe6:	4664      	mov	r4, ip
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	dd24      	ble.n	8009036 <_strtol_l.constprop.0+0xc6>
 8008fec:	f1be 3fff 	cmp.w	lr, #4294967295
 8008ff0:	d008      	beq.n	8009004 <_strtol_l.constprop.0+0x94>
 8008ff2:	45b1      	cmp	r9, r6
 8008ff4:	d31c      	bcc.n	8009030 <_strtol_l.constprop.0+0xc0>
 8008ff6:	d101      	bne.n	8008ffc <_strtol_l.constprop.0+0x8c>
 8008ff8:	45a2      	cmp	sl, r4
 8008ffa:	db19      	blt.n	8009030 <_strtol_l.constprop.0+0xc0>
 8008ffc:	fb06 4603 	mla	r6, r6, r3, r4
 8009000:	f04f 0e01 	mov.w	lr, #1
 8009004:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009008:	e7e8      	b.n	8008fdc <_strtol_l.constprop.0+0x6c>
 800900a:	2c2b      	cmp	r4, #43	; 0x2b
 800900c:	bf04      	itt	eq
 800900e:	782c      	ldrbeq	r4, [r5, #0]
 8009010:	1cb5      	addeq	r5, r6, #2
 8009012:	e7ca      	b.n	8008faa <_strtol_l.constprop.0+0x3a>
 8009014:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009018:	f1bc 0f19 	cmp.w	ip, #25
 800901c:	d801      	bhi.n	8009022 <_strtol_l.constprop.0+0xb2>
 800901e:	3c37      	subs	r4, #55	; 0x37
 8009020:	e7e2      	b.n	8008fe8 <_strtol_l.constprop.0+0x78>
 8009022:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009026:	f1bc 0f19 	cmp.w	ip, #25
 800902a:	d804      	bhi.n	8009036 <_strtol_l.constprop.0+0xc6>
 800902c:	3c57      	subs	r4, #87	; 0x57
 800902e:	e7db      	b.n	8008fe8 <_strtol_l.constprop.0+0x78>
 8009030:	f04f 3eff 	mov.w	lr, #4294967295
 8009034:	e7e6      	b.n	8009004 <_strtol_l.constprop.0+0x94>
 8009036:	f1be 3fff 	cmp.w	lr, #4294967295
 800903a:	d105      	bne.n	8009048 <_strtol_l.constprop.0+0xd8>
 800903c:	2322      	movs	r3, #34	; 0x22
 800903e:	6003      	str	r3, [r0, #0]
 8009040:	4646      	mov	r6, r8
 8009042:	b942      	cbnz	r2, 8009056 <_strtol_l.constprop.0+0xe6>
 8009044:	4630      	mov	r0, r6
 8009046:	e79e      	b.n	8008f86 <_strtol_l.constprop.0+0x16>
 8009048:	b107      	cbz	r7, 800904c <_strtol_l.constprop.0+0xdc>
 800904a:	4276      	negs	r6, r6
 800904c:	2a00      	cmp	r2, #0
 800904e:	d0f9      	beq.n	8009044 <_strtol_l.constprop.0+0xd4>
 8009050:	f1be 0f00 	cmp.w	lr, #0
 8009054:	d000      	beq.n	8009058 <_strtol_l.constprop.0+0xe8>
 8009056:	1e69      	subs	r1, r5, #1
 8009058:	6011      	str	r1, [r2, #0]
 800905a:	e7f3      	b.n	8009044 <_strtol_l.constprop.0+0xd4>
 800905c:	2430      	movs	r4, #48	; 0x30
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1b1      	bne.n	8008fc6 <_strtol_l.constprop.0+0x56>
 8009062:	2308      	movs	r3, #8
 8009064:	e7af      	b.n	8008fc6 <_strtol_l.constprop.0+0x56>
 8009066:	2c30      	cmp	r4, #48	; 0x30
 8009068:	d0a5      	beq.n	8008fb6 <_strtol_l.constprop.0+0x46>
 800906a:	230a      	movs	r3, #10
 800906c:	e7ab      	b.n	8008fc6 <_strtol_l.constprop.0+0x56>
 800906e:	bf00      	nop
 8009070:	0800a7f1 	.word	0x0800a7f1

08009074 <_strtol_r>:
 8009074:	f7ff bf7c 	b.w	8008f70 <_strtol_l.constprop.0>

08009078 <__ssputs_r>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	688e      	ldr	r6, [r1, #8]
 800907e:	461f      	mov	r7, r3
 8009080:	42be      	cmp	r6, r7
 8009082:	680b      	ldr	r3, [r1, #0]
 8009084:	4682      	mov	sl, r0
 8009086:	460c      	mov	r4, r1
 8009088:	4690      	mov	r8, r2
 800908a:	d82c      	bhi.n	80090e6 <__ssputs_r+0x6e>
 800908c:	898a      	ldrh	r2, [r1, #12]
 800908e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009092:	d026      	beq.n	80090e2 <__ssputs_r+0x6a>
 8009094:	6965      	ldr	r5, [r4, #20]
 8009096:	6909      	ldr	r1, [r1, #16]
 8009098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800909c:	eba3 0901 	sub.w	r9, r3, r1
 80090a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a4:	1c7b      	adds	r3, r7, #1
 80090a6:	444b      	add	r3, r9
 80090a8:	106d      	asrs	r5, r5, #1
 80090aa:	429d      	cmp	r5, r3
 80090ac:	bf38      	it	cc
 80090ae:	461d      	movcc	r5, r3
 80090b0:	0553      	lsls	r3, r2, #21
 80090b2:	d527      	bpl.n	8009104 <__ssputs_r+0x8c>
 80090b4:	4629      	mov	r1, r5
 80090b6:	f7fe fc53 	bl	8007960 <_malloc_r>
 80090ba:	4606      	mov	r6, r0
 80090bc:	b360      	cbz	r0, 8009118 <__ssputs_r+0xa0>
 80090be:	6921      	ldr	r1, [r4, #16]
 80090c0:	464a      	mov	r2, r9
 80090c2:	f000 fa1b 	bl	80094fc <memcpy>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	6126      	str	r6, [r4, #16]
 80090d4:	6165      	str	r5, [r4, #20]
 80090d6:	444e      	add	r6, r9
 80090d8:	eba5 0509 	sub.w	r5, r5, r9
 80090dc:	6026      	str	r6, [r4, #0]
 80090de:	60a5      	str	r5, [r4, #8]
 80090e0:	463e      	mov	r6, r7
 80090e2:	42be      	cmp	r6, r7
 80090e4:	d900      	bls.n	80090e8 <__ssputs_r+0x70>
 80090e6:	463e      	mov	r6, r7
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	4632      	mov	r2, r6
 80090ec:	4641      	mov	r1, r8
 80090ee:	f000 f9c9 	bl	8009484 <memmove>
 80090f2:	68a3      	ldr	r3, [r4, #8]
 80090f4:	1b9b      	subs	r3, r3, r6
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	4433      	add	r3, r6
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	2000      	movs	r0, #0
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	462a      	mov	r2, r5
 8009106:	f000 fdac 	bl	8009c62 <_realloc_r>
 800910a:	4606      	mov	r6, r0
 800910c:	2800      	cmp	r0, #0
 800910e:	d1e0      	bne.n	80090d2 <__ssputs_r+0x5a>
 8009110:	6921      	ldr	r1, [r4, #16]
 8009112:	4650      	mov	r0, sl
 8009114:	f7fe fbb0 	bl	8007878 <_free_r>
 8009118:	230c      	movs	r3, #12
 800911a:	f8ca 3000 	str.w	r3, [sl]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009124:	81a3      	strh	r3, [r4, #12]
 8009126:	f04f 30ff 	mov.w	r0, #4294967295
 800912a:	e7e9      	b.n	8009100 <__ssputs_r+0x88>

0800912c <_svfiprintf_r>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4698      	mov	r8, r3
 8009132:	898b      	ldrh	r3, [r1, #12]
 8009134:	061b      	lsls	r3, r3, #24
 8009136:	b09d      	sub	sp, #116	; 0x74
 8009138:	4607      	mov	r7, r0
 800913a:	460d      	mov	r5, r1
 800913c:	4614      	mov	r4, r2
 800913e:	d50e      	bpl.n	800915e <_svfiprintf_r+0x32>
 8009140:	690b      	ldr	r3, [r1, #16]
 8009142:	b963      	cbnz	r3, 800915e <_svfiprintf_r+0x32>
 8009144:	2140      	movs	r1, #64	; 0x40
 8009146:	f7fe fc0b 	bl	8007960 <_malloc_r>
 800914a:	6028      	str	r0, [r5, #0]
 800914c:	6128      	str	r0, [r5, #16]
 800914e:	b920      	cbnz	r0, 800915a <_svfiprintf_r+0x2e>
 8009150:	230c      	movs	r3, #12
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	e0d0      	b.n	80092fc <_svfiprintf_r+0x1d0>
 800915a:	2340      	movs	r3, #64	; 0x40
 800915c:	616b      	str	r3, [r5, #20]
 800915e:	2300      	movs	r3, #0
 8009160:	9309      	str	r3, [sp, #36]	; 0x24
 8009162:	2320      	movs	r3, #32
 8009164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009168:	f8cd 800c 	str.w	r8, [sp, #12]
 800916c:	2330      	movs	r3, #48	; 0x30
 800916e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009314 <_svfiprintf_r+0x1e8>
 8009172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009176:	f04f 0901 	mov.w	r9, #1
 800917a:	4623      	mov	r3, r4
 800917c:	469a      	mov	sl, r3
 800917e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009182:	b10a      	cbz	r2, 8009188 <_svfiprintf_r+0x5c>
 8009184:	2a25      	cmp	r2, #37	; 0x25
 8009186:	d1f9      	bne.n	800917c <_svfiprintf_r+0x50>
 8009188:	ebba 0b04 	subs.w	fp, sl, r4
 800918c:	d00b      	beq.n	80091a6 <_svfiprintf_r+0x7a>
 800918e:	465b      	mov	r3, fp
 8009190:	4622      	mov	r2, r4
 8009192:	4629      	mov	r1, r5
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff ff6f 	bl	8009078 <__ssputs_r>
 800919a:	3001      	adds	r0, #1
 800919c:	f000 80a9 	beq.w	80092f2 <_svfiprintf_r+0x1c6>
 80091a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a2:	445a      	add	r2, fp
 80091a4:	9209      	str	r2, [sp, #36]	; 0x24
 80091a6:	f89a 3000 	ldrb.w	r3, [sl]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 80a1 	beq.w	80092f2 <_svfiprintf_r+0x1c6>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ba:	f10a 0a01 	add.w	sl, sl, #1
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	9307      	str	r3, [sp, #28]
 80091c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c6:	931a      	str	r3, [sp, #104]	; 0x68
 80091c8:	4654      	mov	r4, sl
 80091ca:	2205      	movs	r2, #5
 80091cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d0:	4850      	ldr	r0, [pc, #320]	; (8009314 <_svfiprintf_r+0x1e8>)
 80091d2:	f7f7 f835 	bl	8000240 <memchr>
 80091d6:	9a04      	ldr	r2, [sp, #16]
 80091d8:	b9d8      	cbnz	r0, 8009212 <_svfiprintf_r+0xe6>
 80091da:	06d0      	lsls	r0, r2, #27
 80091dc:	bf44      	itt	mi
 80091de:	2320      	movmi	r3, #32
 80091e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e4:	0711      	lsls	r1, r2, #28
 80091e6:	bf44      	itt	mi
 80091e8:	232b      	movmi	r3, #43	; 0x2b
 80091ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ee:	f89a 3000 	ldrb.w	r3, [sl]
 80091f2:	2b2a      	cmp	r3, #42	; 0x2a
 80091f4:	d015      	beq.n	8009222 <_svfiprintf_r+0xf6>
 80091f6:	9a07      	ldr	r2, [sp, #28]
 80091f8:	4654      	mov	r4, sl
 80091fa:	2000      	movs	r0, #0
 80091fc:	f04f 0c0a 	mov.w	ip, #10
 8009200:	4621      	mov	r1, r4
 8009202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009206:	3b30      	subs	r3, #48	; 0x30
 8009208:	2b09      	cmp	r3, #9
 800920a:	d94d      	bls.n	80092a8 <_svfiprintf_r+0x17c>
 800920c:	b1b0      	cbz	r0, 800923c <_svfiprintf_r+0x110>
 800920e:	9207      	str	r2, [sp, #28]
 8009210:	e014      	b.n	800923c <_svfiprintf_r+0x110>
 8009212:	eba0 0308 	sub.w	r3, r0, r8
 8009216:	fa09 f303 	lsl.w	r3, r9, r3
 800921a:	4313      	orrs	r3, r2
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	46a2      	mov	sl, r4
 8009220:	e7d2      	b.n	80091c8 <_svfiprintf_r+0x9c>
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	1d19      	adds	r1, r3, #4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	9103      	str	r1, [sp, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfbb      	ittet	lt
 800922e:	425b      	neglt	r3, r3
 8009230:	f042 0202 	orrlt.w	r2, r2, #2
 8009234:	9307      	strge	r3, [sp, #28]
 8009236:	9307      	strlt	r3, [sp, #28]
 8009238:	bfb8      	it	lt
 800923a:	9204      	strlt	r2, [sp, #16]
 800923c:	7823      	ldrb	r3, [r4, #0]
 800923e:	2b2e      	cmp	r3, #46	; 0x2e
 8009240:	d10c      	bne.n	800925c <_svfiprintf_r+0x130>
 8009242:	7863      	ldrb	r3, [r4, #1]
 8009244:	2b2a      	cmp	r3, #42	; 0x2a
 8009246:	d134      	bne.n	80092b2 <_svfiprintf_r+0x186>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1d1a      	adds	r2, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9203      	str	r2, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfb8      	it	lt
 8009254:	f04f 33ff 	movlt.w	r3, #4294967295
 8009258:	3402      	adds	r4, #2
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009324 <_svfiprintf_r+0x1f8>
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	2203      	movs	r2, #3
 8009264:	4650      	mov	r0, sl
 8009266:	f7f6 ffeb 	bl	8000240 <memchr>
 800926a:	b138      	cbz	r0, 800927c <_svfiprintf_r+0x150>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	eba0 000a 	sub.w	r0, r0, sl
 8009272:	2240      	movs	r2, #64	; 0x40
 8009274:	4082      	lsls	r2, r0
 8009276:	4313      	orrs	r3, r2
 8009278:	3401      	adds	r4, #1
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	4825      	ldr	r0, [pc, #148]	; (8009318 <_svfiprintf_r+0x1ec>)
 8009282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009286:	2206      	movs	r2, #6
 8009288:	f7f6 ffda 	bl	8000240 <memchr>
 800928c:	2800      	cmp	r0, #0
 800928e:	d038      	beq.n	8009302 <_svfiprintf_r+0x1d6>
 8009290:	4b22      	ldr	r3, [pc, #136]	; (800931c <_svfiprintf_r+0x1f0>)
 8009292:	bb1b      	cbnz	r3, 80092dc <_svfiprintf_r+0x1b0>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	3307      	adds	r3, #7
 8009298:	f023 0307 	bic.w	r3, r3, #7
 800929c:	3308      	adds	r3, #8
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a2:	4433      	add	r3, r6
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
 80092a6:	e768      	b.n	800917a <_svfiprintf_r+0x4e>
 80092a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ac:	460c      	mov	r4, r1
 80092ae:	2001      	movs	r0, #1
 80092b0:	e7a6      	b.n	8009200 <_svfiprintf_r+0xd4>
 80092b2:	2300      	movs	r3, #0
 80092b4:	3401      	adds	r4, #1
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f04f 0c0a 	mov.w	ip, #10
 80092be:	4620      	mov	r0, r4
 80092c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c4:	3a30      	subs	r2, #48	; 0x30
 80092c6:	2a09      	cmp	r2, #9
 80092c8:	d903      	bls.n	80092d2 <_svfiprintf_r+0x1a6>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0c6      	beq.n	800925c <_svfiprintf_r+0x130>
 80092ce:	9105      	str	r1, [sp, #20]
 80092d0:	e7c4      	b.n	800925c <_svfiprintf_r+0x130>
 80092d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d6:	4604      	mov	r4, r0
 80092d8:	2301      	movs	r3, #1
 80092da:	e7f0      	b.n	80092be <_svfiprintf_r+0x192>
 80092dc:	ab03      	add	r3, sp, #12
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	462a      	mov	r2, r5
 80092e2:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <_svfiprintf_r+0x1f4>)
 80092e4:	a904      	add	r1, sp, #16
 80092e6:	4638      	mov	r0, r7
 80092e8:	f7fc fd76 	bl	8005dd8 <_printf_float>
 80092ec:	1c42      	adds	r2, r0, #1
 80092ee:	4606      	mov	r6, r0
 80092f0:	d1d6      	bne.n	80092a0 <_svfiprintf_r+0x174>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	065b      	lsls	r3, r3, #25
 80092f6:	f53f af2d 	bmi.w	8009154 <_svfiprintf_r+0x28>
 80092fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092fc:	b01d      	add	sp, #116	; 0x74
 80092fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009302:	ab03      	add	r3, sp, #12
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	462a      	mov	r2, r5
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <_svfiprintf_r+0x1f4>)
 800930a:	a904      	add	r1, sp, #16
 800930c:	4638      	mov	r0, r7
 800930e:	f7fc ffeb 	bl	80062e8 <_printf_i>
 8009312:	e7eb      	b.n	80092ec <_svfiprintf_r+0x1c0>
 8009314:	0800a8f1 	.word	0x0800a8f1
 8009318:	0800a8fb 	.word	0x0800a8fb
 800931c:	08005dd9 	.word	0x08005dd9
 8009320:	08009079 	.word	0x08009079
 8009324:	0800a8f7 	.word	0x0800a8f7

08009328 <__sflush_r>:
 8009328:	898a      	ldrh	r2, [r1, #12]
 800932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	4605      	mov	r5, r0
 8009330:	0710      	lsls	r0, r2, #28
 8009332:	460c      	mov	r4, r1
 8009334:	d458      	bmi.n	80093e8 <__sflush_r+0xc0>
 8009336:	684b      	ldr	r3, [r1, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	dc05      	bgt.n	8009348 <__sflush_r+0x20>
 800933c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	dc02      	bgt.n	8009348 <__sflush_r+0x20>
 8009342:	2000      	movs	r0, #0
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800934a:	2e00      	cmp	r6, #0
 800934c:	d0f9      	beq.n	8009342 <__sflush_r+0x1a>
 800934e:	2300      	movs	r3, #0
 8009350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009354:	682f      	ldr	r7, [r5, #0]
 8009356:	6a21      	ldr	r1, [r4, #32]
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	d032      	beq.n	80093c2 <__sflush_r+0x9a>
 800935c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	075a      	lsls	r2, r3, #29
 8009362:	d505      	bpl.n	8009370 <__sflush_r+0x48>
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	1ac0      	subs	r0, r0, r3
 8009368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800936a:	b10b      	cbz	r3, 8009370 <__sflush_r+0x48>
 800936c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800936e:	1ac0      	subs	r0, r0, r3
 8009370:	2300      	movs	r3, #0
 8009372:	4602      	mov	r2, r0
 8009374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009376:	6a21      	ldr	r1, [r4, #32]
 8009378:	4628      	mov	r0, r5
 800937a:	47b0      	blx	r6
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	d106      	bne.n	8009390 <__sflush_r+0x68>
 8009382:	6829      	ldr	r1, [r5, #0]
 8009384:	291d      	cmp	r1, #29
 8009386:	d82b      	bhi.n	80093e0 <__sflush_r+0xb8>
 8009388:	4a29      	ldr	r2, [pc, #164]	; (8009430 <__sflush_r+0x108>)
 800938a:	410a      	asrs	r2, r1
 800938c:	07d6      	lsls	r6, r2, #31
 800938e:	d427      	bmi.n	80093e0 <__sflush_r+0xb8>
 8009390:	2200      	movs	r2, #0
 8009392:	6062      	str	r2, [r4, #4]
 8009394:	04d9      	lsls	r1, r3, #19
 8009396:	6922      	ldr	r2, [r4, #16]
 8009398:	6022      	str	r2, [r4, #0]
 800939a:	d504      	bpl.n	80093a6 <__sflush_r+0x7e>
 800939c:	1c42      	adds	r2, r0, #1
 800939e:	d101      	bne.n	80093a4 <__sflush_r+0x7c>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	b903      	cbnz	r3, 80093a6 <__sflush_r+0x7e>
 80093a4:	6560      	str	r0, [r4, #84]	; 0x54
 80093a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a8:	602f      	str	r7, [r5, #0]
 80093aa:	2900      	cmp	r1, #0
 80093ac:	d0c9      	beq.n	8009342 <__sflush_r+0x1a>
 80093ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b2:	4299      	cmp	r1, r3
 80093b4:	d002      	beq.n	80093bc <__sflush_r+0x94>
 80093b6:	4628      	mov	r0, r5
 80093b8:	f7fe fa5e 	bl	8007878 <_free_r>
 80093bc:	2000      	movs	r0, #0
 80093be:	6360      	str	r0, [r4, #52]	; 0x34
 80093c0:	e7c0      	b.n	8009344 <__sflush_r+0x1c>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4628      	mov	r0, r5
 80093c6:	47b0      	blx	r6
 80093c8:	1c41      	adds	r1, r0, #1
 80093ca:	d1c8      	bne.n	800935e <__sflush_r+0x36>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0c5      	beq.n	800935e <__sflush_r+0x36>
 80093d2:	2b1d      	cmp	r3, #29
 80093d4:	d001      	beq.n	80093da <__sflush_r+0xb2>
 80093d6:	2b16      	cmp	r3, #22
 80093d8:	d101      	bne.n	80093de <__sflush_r+0xb6>
 80093da:	602f      	str	r7, [r5, #0]
 80093dc:	e7b1      	b.n	8009342 <__sflush_r+0x1a>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	e7ad      	b.n	8009344 <__sflush_r+0x1c>
 80093e8:	690f      	ldr	r7, [r1, #16]
 80093ea:	2f00      	cmp	r7, #0
 80093ec:	d0a9      	beq.n	8009342 <__sflush_r+0x1a>
 80093ee:	0793      	lsls	r3, r2, #30
 80093f0:	680e      	ldr	r6, [r1, #0]
 80093f2:	bf08      	it	eq
 80093f4:	694b      	ldreq	r3, [r1, #20]
 80093f6:	600f      	str	r7, [r1, #0]
 80093f8:	bf18      	it	ne
 80093fa:	2300      	movne	r3, #0
 80093fc:	eba6 0807 	sub.w	r8, r6, r7
 8009400:	608b      	str	r3, [r1, #8]
 8009402:	f1b8 0f00 	cmp.w	r8, #0
 8009406:	dd9c      	ble.n	8009342 <__sflush_r+0x1a>
 8009408:	6a21      	ldr	r1, [r4, #32]
 800940a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800940c:	4643      	mov	r3, r8
 800940e:	463a      	mov	r2, r7
 8009410:	4628      	mov	r0, r5
 8009412:	47b0      	blx	r6
 8009414:	2800      	cmp	r0, #0
 8009416:	dc06      	bgt.n	8009426 <__sflush_r+0xfe>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e78e      	b.n	8009344 <__sflush_r+0x1c>
 8009426:	4407      	add	r7, r0
 8009428:	eba8 0800 	sub.w	r8, r8, r0
 800942c:	e7e9      	b.n	8009402 <__sflush_r+0xda>
 800942e:	bf00      	nop
 8009430:	dfbffffe 	.word	0xdfbffffe

08009434 <_fflush_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	690b      	ldr	r3, [r1, #16]
 8009438:	4605      	mov	r5, r0
 800943a:	460c      	mov	r4, r1
 800943c:	b913      	cbnz	r3, 8009444 <_fflush_r+0x10>
 800943e:	2500      	movs	r5, #0
 8009440:	4628      	mov	r0, r5
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	b118      	cbz	r0, 800944e <_fflush_r+0x1a>
 8009446:	6a03      	ldr	r3, [r0, #32]
 8009448:	b90b      	cbnz	r3, 800944e <_fflush_r+0x1a>
 800944a:	f7fd faff 	bl	8006a4c <__sinit>
 800944e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f3      	beq.n	800943e <_fflush_r+0xa>
 8009456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009458:	07d0      	lsls	r0, r2, #31
 800945a:	d404      	bmi.n	8009466 <_fflush_r+0x32>
 800945c:	0599      	lsls	r1, r3, #22
 800945e:	d402      	bmi.n	8009466 <_fflush_r+0x32>
 8009460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009462:	f7fd fc0a 	bl	8006c7a <__retarget_lock_acquire_recursive>
 8009466:	4628      	mov	r0, r5
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff ff5d 	bl	8009328 <__sflush_r>
 800946e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009470:	07da      	lsls	r2, r3, #31
 8009472:	4605      	mov	r5, r0
 8009474:	d4e4      	bmi.n	8009440 <_fflush_r+0xc>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	059b      	lsls	r3, r3, #22
 800947a:	d4e1      	bmi.n	8009440 <_fflush_r+0xc>
 800947c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947e:	f7fd fbfd 	bl	8006c7c <__retarget_lock_release_recursive>
 8009482:	e7dd      	b.n	8009440 <_fflush_r+0xc>

08009484 <memmove>:
 8009484:	4288      	cmp	r0, r1
 8009486:	b510      	push	{r4, lr}
 8009488:	eb01 0402 	add.w	r4, r1, r2
 800948c:	d902      	bls.n	8009494 <memmove+0x10>
 800948e:	4284      	cmp	r4, r0
 8009490:	4623      	mov	r3, r4
 8009492:	d807      	bhi.n	80094a4 <memmove+0x20>
 8009494:	1e43      	subs	r3, r0, #1
 8009496:	42a1      	cmp	r1, r4
 8009498:	d008      	beq.n	80094ac <memmove+0x28>
 800949a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800949e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094a2:	e7f8      	b.n	8009496 <memmove+0x12>
 80094a4:	4402      	add	r2, r0
 80094a6:	4601      	mov	r1, r0
 80094a8:	428a      	cmp	r2, r1
 80094aa:	d100      	bne.n	80094ae <memmove+0x2a>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094b6:	e7f7      	b.n	80094a8 <memmove+0x24>

080094b8 <strncmp>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	b16a      	cbz	r2, 80094d8 <strncmp+0x20>
 80094bc:	3901      	subs	r1, #1
 80094be:	1884      	adds	r4, r0, r2
 80094c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d103      	bne.n	80094d4 <strncmp+0x1c>
 80094cc:	42a0      	cmp	r0, r4
 80094ce:	d001      	beq.n	80094d4 <strncmp+0x1c>
 80094d0:	2a00      	cmp	r2, #0
 80094d2:	d1f5      	bne.n	80094c0 <strncmp+0x8>
 80094d4:	1ad0      	subs	r0, r2, r3
 80094d6:	bd10      	pop	{r4, pc}
 80094d8:	4610      	mov	r0, r2
 80094da:	e7fc      	b.n	80094d6 <strncmp+0x1e>

080094dc <_sbrk_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d06      	ldr	r5, [pc, #24]	; (80094f8 <_sbrk_r+0x1c>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	f7f8 fb8c 	bl	8001c04 <_sbrk>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_sbrk_r+0x1a>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_sbrk_r+0x1a>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20000480 	.word	0x20000480

080094fc <memcpy>:
 80094fc:	440a      	add	r2, r1
 80094fe:	4291      	cmp	r1, r2
 8009500:	f100 33ff 	add.w	r3, r0, #4294967295
 8009504:	d100      	bne.n	8009508 <memcpy+0xc>
 8009506:	4770      	bx	lr
 8009508:	b510      	push	{r4, lr}
 800950a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800950e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009512:	4291      	cmp	r1, r2
 8009514:	d1f9      	bne.n	800950a <memcpy+0xe>
 8009516:	bd10      	pop	{r4, pc}

08009518 <nan>:
 8009518:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009520 <nan+0x8>
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	00000000 	.word	0x00000000
 8009524:	7ff80000 	.word	0x7ff80000

08009528 <__assert_func>:
 8009528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800952a:	4614      	mov	r4, r2
 800952c:	461a      	mov	r2, r3
 800952e:	4b09      	ldr	r3, [pc, #36]	; (8009554 <__assert_func+0x2c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4605      	mov	r5, r0
 8009534:	68d8      	ldr	r0, [r3, #12]
 8009536:	b14c      	cbz	r4, 800954c <__assert_func+0x24>
 8009538:	4b07      	ldr	r3, [pc, #28]	; (8009558 <__assert_func+0x30>)
 800953a:	9100      	str	r1, [sp, #0]
 800953c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009540:	4906      	ldr	r1, [pc, #24]	; (800955c <__assert_func+0x34>)
 8009542:	462b      	mov	r3, r5
 8009544:	f000 fbca 	bl	8009cdc <fiprintf>
 8009548:	f000 fbda 	bl	8009d00 <abort>
 800954c:	4b04      	ldr	r3, [pc, #16]	; (8009560 <__assert_func+0x38>)
 800954e:	461c      	mov	r4, r3
 8009550:	e7f3      	b.n	800953a <__assert_func+0x12>
 8009552:	bf00      	nop
 8009554:	20000068 	.word	0x20000068
 8009558:	0800a90a 	.word	0x0800a90a
 800955c:	0800a917 	.word	0x0800a917
 8009560:	0800a945 	.word	0x0800a945

08009564 <_calloc_r>:
 8009564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009566:	fba1 2402 	umull	r2, r4, r1, r2
 800956a:	b94c      	cbnz	r4, 8009580 <_calloc_r+0x1c>
 800956c:	4611      	mov	r1, r2
 800956e:	9201      	str	r2, [sp, #4]
 8009570:	f7fe f9f6 	bl	8007960 <_malloc_r>
 8009574:	9a01      	ldr	r2, [sp, #4]
 8009576:	4605      	mov	r5, r0
 8009578:	b930      	cbnz	r0, 8009588 <_calloc_r+0x24>
 800957a:	4628      	mov	r0, r5
 800957c:	b003      	add	sp, #12
 800957e:	bd30      	pop	{r4, r5, pc}
 8009580:	220c      	movs	r2, #12
 8009582:	6002      	str	r2, [r0, #0]
 8009584:	2500      	movs	r5, #0
 8009586:	e7f8      	b.n	800957a <_calloc_r+0x16>
 8009588:	4621      	mov	r1, r4
 800958a:	f7fd faf8 	bl	8006b7e <memset>
 800958e:	e7f4      	b.n	800957a <_calloc_r+0x16>

08009590 <rshift>:
 8009590:	6903      	ldr	r3, [r0, #16]
 8009592:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800959a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800959e:	f100 0414 	add.w	r4, r0, #20
 80095a2:	dd45      	ble.n	8009630 <rshift+0xa0>
 80095a4:	f011 011f 	ands.w	r1, r1, #31
 80095a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095b0:	d10c      	bne.n	80095cc <rshift+0x3c>
 80095b2:	f100 0710 	add.w	r7, r0, #16
 80095b6:	4629      	mov	r1, r5
 80095b8:	42b1      	cmp	r1, r6
 80095ba:	d334      	bcc.n	8009626 <rshift+0x96>
 80095bc:	1a9b      	subs	r3, r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	1eea      	subs	r2, r5, #3
 80095c2:	4296      	cmp	r6, r2
 80095c4:	bf38      	it	cc
 80095c6:	2300      	movcc	r3, #0
 80095c8:	4423      	add	r3, r4
 80095ca:	e015      	b.n	80095f8 <rshift+0x68>
 80095cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095d0:	f1c1 0820 	rsb	r8, r1, #32
 80095d4:	40cf      	lsrs	r7, r1
 80095d6:	f105 0e04 	add.w	lr, r5, #4
 80095da:	46a1      	mov	r9, r4
 80095dc:	4576      	cmp	r6, lr
 80095de:	46f4      	mov	ip, lr
 80095e0:	d815      	bhi.n	800960e <rshift+0x7e>
 80095e2:	1a9a      	subs	r2, r3, r2
 80095e4:	0092      	lsls	r2, r2, #2
 80095e6:	3a04      	subs	r2, #4
 80095e8:	3501      	adds	r5, #1
 80095ea:	42ae      	cmp	r6, r5
 80095ec:	bf38      	it	cc
 80095ee:	2200      	movcc	r2, #0
 80095f0:	18a3      	adds	r3, r4, r2
 80095f2:	50a7      	str	r7, [r4, r2]
 80095f4:	b107      	cbz	r7, 80095f8 <rshift+0x68>
 80095f6:	3304      	adds	r3, #4
 80095f8:	1b1a      	subs	r2, r3, r4
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009600:	bf08      	it	eq
 8009602:	2300      	moveq	r3, #0
 8009604:	6102      	str	r2, [r0, #16]
 8009606:	bf08      	it	eq
 8009608:	6143      	streq	r3, [r0, #20]
 800960a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800960e:	f8dc c000 	ldr.w	ip, [ip]
 8009612:	fa0c fc08 	lsl.w	ip, ip, r8
 8009616:	ea4c 0707 	orr.w	r7, ip, r7
 800961a:	f849 7b04 	str.w	r7, [r9], #4
 800961e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009622:	40cf      	lsrs	r7, r1
 8009624:	e7da      	b.n	80095dc <rshift+0x4c>
 8009626:	f851 cb04 	ldr.w	ip, [r1], #4
 800962a:	f847 cf04 	str.w	ip, [r7, #4]!
 800962e:	e7c3      	b.n	80095b8 <rshift+0x28>
 8009630:	4623      	mov	r3, r4
 8009632:	e7e1      	b.n	80095f8 <rshift+0x68>

08009634 <__hexdig_fun>:
 8009634:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009638:	2b09      	cmp	r3, #9
 800963a:	d802      	bhi.n	8009642 <__hexdig_fun+0xe>
 800963c:	3820      	subs	r0, #32
 800963e:	b2c0      	uxtb	r0, r0
 8009640:	4770      	bx	lr
 8009642:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009646:	2b05      	cmp	r3, #5
 8009648:	d801      	bhi.n	800964e <__hexdig_fun+0x1a>
 800964a:	3847      	subs	r0, #71	; 0x47
 800964c:	e7f7      	b.n	800963e <__hexdig_fun+0xa>
 800964e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009652:	2b05      	cmp	r3, #5
 8009654:	d801      	bhi.n	800965a <__hexdig_fun+0x26>
 8009656:	3827      	subs	r0, #39	; 0x27
 8009658:	e7f1      	b.n	800963e <__hexdig_fun+0xa>
 800965a:	2000      	movs	r0, #0
 800965c:	4770      	bx	lr
	...

08009660 <__gethex>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	4617      	mov	r7, r2
 8009666:	680a      	ldr	r2, [r1, #0]
 8009668:	b085      	sub	sp, #20
 800966a:	f102 0b02 	add.w	fp, r2, #2
 800966e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009672:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009676:	4681      	mov	r9, r0
 8009678:	468a      	mov	sl, r1
 800967a:	9302      	str	r3, [sp, #8]
 800967c:	32fe      	adds	r2, #254	; 0xfe
 800967e:	eb02 030b 	add.w	r3, r2, fp
 8009682:	46d8      	mov	r8, fp
 8009684:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	2830      	cmp	r0, #48	; 0x30
 800968c:	d0f7      	beq.n	800967e <__gethex+0x1e>
 800968e:	f7ff ffd1 	bl	8009634 <__hexdig_fun>
 8009692:	4604      	mov	r4, r0
 8009694:	2800      	cmp	r0, #0
 8009696:	d138      	bne.n	800970a <__gethex+0xaa>
 8009698:	49a7      	ldr	r1, [pc, #668]	; (8009938 <__gethex+0x2d8>)
 800969a:	2201      	movs	r2, #1
 800969c:	4640      	mov	r0, r8
 800969e:	f7ff ff0b 	bl	80094b8 <strncmp>
 80096a2:	4606      	mov	r6, r0
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d169      	bne.n	800977c <__gethex+0x11c>
 80096a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80096ac:	465d      	mov	r5, fp
 80096ae:	f7ff ffc1 	bl	8009634 <__hexdig_fun>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d064      	beq.n	8009780 <__gethex+0x120>
 80096b6:	465a      	mov	r2, fp
 80096b8:	7810      	ldrb	r0, [r2, #0]
 80096ba:	2830      	cmp	r0, #48	; 0x30
 80096bc:	4690      	mov	r8, r2
 80096be:	f102 0201 	add.w	r2, r2, #1
 80096c2:	d0f9      	beq.n	80096b8 <__gethex+0x58>
 80096c4:	f7ff ffb6 	bl	8009634 <__hexdig_fun>
 80096c8:	2301      	movs	r3, #1
 80096ca:	fab0 f480 	clz	r4, r0
 80096ce:	0964      	lsrs	r4, r4, #5
 80096d0:	465e      	mov	r6, fp
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	4642      	mov	r2, r8
 80096d6:	4615      	mov	r5, r2
 80096d8:	3201      	adds	r2, #1
 80096da:	7828      	ldrb	r0, [r5, #0]
 80096dc:	f7ff ffaa 	bl	8009634 <__hexdig_fun>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1f8      	bne.n	80096d6 <__gethex+0x76>
 80096e4:	4994      	ldr	r1, [pc, #592]	; (8009938 <__gethex+0x2d8>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7ff fee5 	bl	80094b8 <strncmp>
 80096ee:	b978      	cbnz	r0, 8009710 <__gethex+0xb0>
 80096f0:	b946      	cbnz	r6, 8009704 <__gethex+0xa4>
 80096f2:	1c6e      	adds	r6, r5, #1
 80096f4:	4632      	mov	r2, r6
 80096f6:	4615      	mov	r5, r2
 80096f8:	3201      	adds	r2, #1
 80096fa:	7828      	ldrb	r0, [r5, #0]
 80096fc:	f7ff ff9a 	bl	8009634 <__hexdig_fun>
 8009700:	2800      	cmp	r0, #0
 8009702:	d1f8      	bne.n	80096f6 <__gethex+0x96>
 8009704:	1b73      	subs	r3, r6, r5
 8009706:	009e      	lsls	r6, r3, #2
 8009708:	e004      	b.n	8009714 <__gethex+0xb4>
 800970a:	2400      	movs	r4, #0
 800970c:	4626      	mov	r6, r4
 800970e:	e7e1      	b.n	80096d4 <__gethex+0x74>
 8009710:	2e00      	cmp	r6, #0
 8009712:	d1f7      	bne.n	8009704 <__gethex+0xa4>
 8009714:	782b      	ldrb	r3, [r5, #0]
 8009716:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800971a:	2b50      	cmp	r3, #80	; 0x50
 800971c:	d13d      	bne.n	800979a <__gethex+0x13a>
 800971e:	786b      	ldrb	r3, [r5, #1]
 8009720:	2b2b      	cmp	r3, #43	; 0x2b
 8009722:	d02f      	beq.n	8009784 <__gethex+0x124>
 8009724:	2b2d      	cmp	r3, #45	; 0x2d
 8009726:	d031      	beq.n	800978c <__gethex+0x12c>
 8009728:	1c69      	adds	r1, r5, #1
 800972a:	f04f 0b00 	mov.w	fp, #0
 800972e:	7808      	ldrb	r0, [r1, #0]
 8009730:	f7ff ff80 	bl	8009634 <__hexdig_fun>
 8009734:	1e42      	subs	r2, r0, #1
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	2a18      	cmp	r2, #24
 800973a:	d82e      	bhi.n	800979a <__gethex+0x13a>
 800973c:	f1a0 0210 	sub.w	r2, r0, #16
 8009740:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009744:	f7ff ff76 	bl	8009634 <__hexdig_fun>
 8009748:	f100 3cff 	add.w	ip, r0, #4294967295
 800974c:	fa5f fc8c 	uxtb.w	ip, ip
 8009750:	f1bc 0f18 	cmp.w	ip, #24
 8009754:	d91d      	bls.n	8009792 <__gethex+0x132>
 8009756:	f1bb 0f00 	cmp.w	fp, #0
 800975a:	d000      	beq.n	800975e <__gethex+0xfe>
 800975c:	4252      	negs	r2, r2
 800975e:	4416      	add	r6, r2
 8009760:	f8ca 1000 	str.w	r1, [sl]
 8009764:	b1dc      	cbz	r4, 800979e <__gethex+0x13e>
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	bf14      	ite	ne
 800976c:	f04f 0800 	movne.w	r8, #0
 8009770:	f04f 0806 	moveq.w	r8, #6
 8009774:	4640      	mov	r0, r8
 8009776:	b005      	add	sp, #20
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	4645      	mov	r5, r8
 800977e:	4626      	mov	r6, r4
 8009780:	2401      	movs	r4, #1
 8009782:	e7c7      	b.n	8009714 <__gethex+0xb4>
 8009784:	f04f 0b00 	mov.w	fp, #0
 8009788:	1ca9      	adds	r1, r5, #2
 800978a:	e7d0      	b.n	800972e <__gethex+0xce>
 800978c:	f04f 0b01 	mov.w	fp, #1
 8009790:	e7fa      	b.n	8009788 <__gethex+0x128>
 8009792:	230a      	movs	r3, #10
 8009794:	fb03 0002 	mla	r0, r3, r2, r0
 8009798:	e7d0      	b.n	800973c <__gethex+0xdc>
 800979a:	4629      	mov	r1, r5
 800979c:	e7e0      	b.n	8009760 <__gethex+0x100>
 800979e:	eba5 0308 	sub.w	r3, r5, r8
 80097a2:	3b01      	subs	r3, #1
 80097a4:	4621      	mov	r1, r4
 80097a6:	2b07      	cmp	r3, #7
 80097a8:	dc0a      	bgt.n	80097c0 <__gethex+0x160>
 80097aa:	4648      	mov	r0, r9
 80097ac:	f7fe f964 	bl	8007a78 <_Balloc>
 80097b0:	4604      	mov	r4, r0
 80097b2:	b940      	cbnz	r0, 80097c6 <__gethex+0x166>
 80097b4:	4b61      	ldr	r3, [pc, #388]	; (800993c <__gethex+0x2dc>)
 80097b6:	4602      	mov	r2, r0
 80097b8:	21e4      	movs	r1, #228	; 0xe4
 80097ba:	4861      	ldr	r0, [pc, #388]	; (8009940 <__gethex+0x2e0>)
 80097bc:	f7ff feb4 	bl	8009528 <__assert_func>
 80097c0:	3101      	adds	r1, #1
 80097c2:	105b      	asrs	r3, r3, #1
 80097c4:	e7ef      	b.n	80097a6 <__gethex+0x146>
 80097c6:	f100 0a14 	add.w	sl, r0, #20
 80097ca:	2300      	movs	r3, #0
 80097cc:	495a      	ldr	r1, [pc, #360]	; (8009938 <__gethex+0x2d8>)
 80097ce:	f8cd a004 	str.w	sl, [sp, #4]
 80097d2:	469b      	mov	fp, r3
 80097d4:	45a8      	cmp	r8, r5
 80097d6:	d342      	bcc.n	800985e <__gethex+0x1fe>
 80097d8:	9801      	ldr	r0, [sp, #4]
 80097da:	f840 bb04 	str.w	fp, [r0], #4
 80097de:	eba0 000a 	sub.w	r0, r0, sl
 80097e2:	1080      	asrs	r0, r0, #2
 80097e4:	6120      	str	r0, [r4, #16]
 80097e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80097ea:	4658      	mov	r0, fp
 80097ec:	f7fe fa36 	bl	8007c5c <__hi0bits>
 80097f0:	683d      	ldr	r5, [r7, #0]
 80097f2:	eba8 0000 	sub.w	r0, r8, r0
 80097f6:	42a8      	cmp	r0, r5
 80097f8:	dd59      	ble.n	80098ae <__gethex+0x24e>
 80097fa:	eba0 0805 	sub.w	r8, r0, r5
 80097fe:	4641      	mov	r1, r8
 8009800:	4620      	mov	r0, r4
 8009802:	f7fe fdc2 	bl	800838a <__any_on>
 8009806:	4683      	mov	fp, r0
 8009808:	b1b8      	cbz	r0, 800983a <__gethex+0x1da>
 800980a:	f108 33ff 	add.w	r3, r8, #4294967295
 800980e:	1159      	asrs	r1, r3, #5
 8009810:	f003 021f 	and.w	r2, r3, #31
 8009814:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009818:	f04f 0b01 	mov.w	fp, #1
 800981c:	fa0b f202 	lsl.w	r2, fp, r2
 8009820:	420a      	tst	r2, r1
 8009822:	d00a      	beq.n	800983a <__gethex+0x1da>
 8009824:	455b      	cmp	r3, fp
 8009826:	dd06      	ble.n	8009836 <__gethex+0x1d6>
 8009828:	f1a8 0102 	sub.w	r1, r8, #2
 800982c:	4620      	mov	r0, r4
 800982e:	f7fe fdac 	bl	800838a <__any_on>
 8009832:	2800      	cmp	r0, #0
 8009834:	d138      	bne.n	80098a8 <__gethex+0x248>
 8009836:	f04f 0b02 	mov.w	fp, #2
 800983a:	4641      	mov	r1, r8
 800983c:	4620      	mov	r0, r4
 800983e:	f7ff fea7 	bl	8009590 <rshift>
 8009842:	4446      	add	r6, r8
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	42b3      	cmp	r3, r6
 8009848:	da41      	bge.n	80098ce <__gethex+0x26e>
 800984a:	4621      	mov	r1, r4
 800984c:	4648      	mov	r0, r9
 800984e:	f7fe f953 	bl	8007af8 <_Bfree>
 8009852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009854:	2300      	movs	r3, #0
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800985c:	e78a      	b.n	8009774 <__gethex+0x114>
 800985e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009862:	2a2e      	cmp	r2, #46	; 0x2e
 8009864:	d014      	beq.n	8009890 <__gethex+0x230>
 8009866:	2b20      	cmp	r3, #32
 8009868:	d106      	bne.n	8009878 <__gethex+0x218>
 800986a:	9b01      	ldr	r3, [sp, #4]
 800986c:	f843 bb04 	str.w	fp, [r3], #4
 8009870:	f04f 0b00 	mov.w	fp, #0
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	465b      	mov	r3, fp
 8009878:	7828      	ldrb	r0, [r5, #0]
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	f7ff feda 	bl	8009634 <__hexdig_fun>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	f000 000f 	and.w	r0, r0, #15
 8009886:	4098      	lsls	r0, r3
 8009888:	ea4b 0b00 	orr.w	fp, fp, r0
 800988c:	3304      	adds	r3, #4
 800988e:	e7a1      	b.n	80097d4 <__gethex+0x174>
 8009890:	45a8      	cmp	r8, r5
 8009892:	d8e8      	bhi.n	8009866 <__gethex+0x206>
 8009894:	2201      	movs	r2, #1
 8009896:	4628      	mov	r0, r5
 8009898:	9303      	str	r3, [sp, #12]
 800989a:	f7ff fe0d 	bl	80094b8 <strncmp>
 800989e:	4926      	ldr	r1, [pc, #152]	; (8009938 <__gethex+0x2d8>)
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1df      	bne.n	8009866 <__gethex+0x206>
 80098a6:	e795      	b.n	80097d4 <__gethex+0x174>
 80098a8:	f04f 0b03 	mov.w	fp, #3
 80098ac:	e7c5      	b.n	800983a <__gethex+0x1da>
 80098ae:	da0b      	bge.n	80098c8 <__gethex+0x268>
 80098b0:	eba5 0800 	sub.w	r8, r5, r0
 80098b4:	4621      	mov	r1, r4
 80098b6:	4642      	mov	r2, r8
 80098b8:	4648      	mov	r0, r9
 80098ba:	f7fe fb37 	bl	8007f2c <__lshift>
 80098be:	eba6 0608 	sub.w	r6, r6, r8
 80098c2:	4604      	mov	r4, r0
 80098c4:	f100 0a14 	add.w	sl, r0, #20
 80098c8:	f04f 0b00 	mov.w	fp, #0
 80098cc:	e7ba      	b.n	8009844 <__gethex+0x1e4>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	42b3      	cmp	r3, r6
 80098d2:	dd73      	ble.n	80099bc <__gethex+0x35c>
 80098d4:	1b9e      	subs	r6, r3, r6
 80098d6:	42b5      	cmp	r5, r6
 80098d8:	dc34      	bgt.n	8009944 <__gethex+0x2e4>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d023      	beq.n	8009928 <__gethex+0x2c8>
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d025      	beq.n	8009930 <__gethex+0x2d0>
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d115      	bne.n	8009914 <__gethex+0x2b4>
 80098e8:	42b5      	cmp	r5, r6
 80098ea:	d113      	bne.n	8009914 <__gethex+0x2b4>
 80098ec:	2d01      	cmp	r5, #1
 80098ee:	d10b      	bne.n	8009908 <__gethex+0x2a8>
 80098f0:	9a02      	ldr	r2, [sp, #8]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	2301      	movs	r3, #1
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	f8ca 3000 	str.w	r3, [sl]
 80098fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009900:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009904:	601c      	str	r4, [r3, #0]
 8009906:	e735      	b.n	8009774 <__gethex+0x114>
 8009908:	1e69      	subs	r1, r5, #1
 800990a:	4620      	mov	r0, r4
 800990c:	f7fe fd3d 	bl	800838a <__any_on>
 8009910:	2800      	cmp	r0, #0
 8009912:	d1ed      	bne.n	80098f0 <__gethex+0x290>
 8009914:	4621      	mov	r1, r4
 8009916:	4648      	mov	r0, r9
 8009918:	f7fe f8ee 	bl	8007af8 <_Bfree>
 800991c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800991e:	2300      	movs	r3, #0
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009926:	e725      	b.n	8009774 <__gethex+0x114>
 8009928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f2      	bne.n	8009914 <__gethex+0x2b4>
 800992e:	e7df      	b.n	80098f0 <__gethex+0x290>
 8009930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1dc      	bne.n	80098f0 <__gethex+0x290>
 8009936:	e7ed      	b.n	8009914 <__gethex+0x2b4>
 8009938:	0800a79c 	.word	0x0800a79c
 800993c:	0800a635 	.word	0x0800a635
 8009940:	0800a946 	.word	0x0800a946
 8009944:	f106 38ff 	add.w	r8, r6, #4294967295
 8009948:	f1bb 0f00 	cmp.w	fp, #0
 800994c:	d133      	bne.n	80099b6 <__gethex+0x356>
 800994e:	f1b8 0f00 	cmp.w	r8, #0
 8009952:	d004      	beq.n	800995e <__gethex+0x2fe>
 8009954:	4641      	mov	r1, r8
 8009956:	4620      	mov	r0, r4
 8009958:	f7fe fd17 	bl	800838a <__any_on>
 800995c:	4683      	mov	fp, r0
 800995e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009962:	2301      	movs	r3, #1
 8009964:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009968:	f008 081f 	and.w	r8, r8, #31
 800996c:	fa03 f308 	lsl.w	r3, r3, r8
 8009970:	4213      	tst	r3, r2
 8009972:	4631      	mov	r1, r6
 8009974:	4620      	mov	r0, r4
 8009976:	bf18      	it	ne
 8009978:	f04b 0b02 	orrne.w	fp, fp, #2
 800997c:	1bad      	subs	r5, r5, r6
 800997e:	f7ff fe07 	bl	8009590 <rshift>
 8009982:	687e      	ldr	r6, [r7, #4]
 8009984:	f04f 0802 	mov.w	r8, #2
 8009988:	f1bb 0f00 	cmp.w	fp, #0
 800998c:	d04a      	beq.n	8009a24 <__gethex+0x3c4>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d016      	beq.n	80099c2 <__gethex+0x362>
 8009994:	2b03      	cmp	r3, #3
 8009996:	d018      	beq.n	80099ca <__gethex+0x36a>
 8009998:	2b01      	cmp	r3, #1
 800999a:	d109      	bne.n	80099b0 <__gethex+0x350>
 800999c:	f01b 0f02 	tst.w	fp, #2
 80099a0:	d006      	beq.n	80099b0 <__gethex+0x350>
 80099a2:	f8da 3000 	ldr.w	r3, [sl]
 80099a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80099aa:	f01b 0f01 	tst.w	fp, #1
 80099ae:	d10f      	bne.n	80099d0 <__gethex+0x370>
 80099b0:	f048 0810 	orr.w	r8, r8, #16
 80099b4:	e036      	b.n	8009a24 <__gethex+0x3c4>
 80099b6:	f04f 0b01 	mov.w	fp, #1
 80099ba:	e7d0      	b.n	800995e <__gethex+0x2fe>
 80099bc:	f04f 0801 	mov.w	r8, #1
 80099c0:	e7e2      	b.n	8009988 <__gethex+0x328>
 80099c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099c4:	f1c3 0301 	rsb	r3, r3, #1
 80099c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d0ef      	beq.n	80099b0 <__gethex+0x350>
 80099d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099d4:	f104 0214 	add.w	r2, r4, #20
 80099d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80099e2:	2300      	movs	r3, #0
 80099e4:	4694      	mov	ip, r2
 80099e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80099ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80099ee:	d01e      	beq.n	8009a2e <__gethex+0x3ce>
 80099f0:	3101      	adds	r1, #1
 80099f2:	f8cc 1000 	str.w	r1, [ip]
 80099f6:	f1b8 0f02 	cmp.w	r8, #2
 80099fa:	f104 0214 	add.w	r2, r4, #20
 80099fe:	d13d      	bne.n	8009a7c <__gethex+0x41c>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	42ab      	cmp	r3, r5
 8009a06:	d10b      	bne.n	8009a20 <__gethex+0x3c0>
 8009a08:	1169      	asrs	r1, r5, #5
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f005 051f 	and.w	r5, r5, #31
 8009a10:	fa03 f505 	lsl.w	r5, r3, r5
 8009a14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a18:	421d      	tst	r5, r3
 8009a1a:	bf18      	it	ne
 8009a1c:	f04f 0801 	movne.w	r8, #1
 8009a20:	f048 0820 	orr.w	r8, r8, #32
 8009a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a26:	601c      	str	r4, [r3, #0]
 8009a28:	9b02      	ldr	r3, [sp, #8]
 8009a2a:	601e      	str	r6, [r3, #0]
 8009a2c:	e6a2      	b.n	8009774 <__gethex+0x114>
 8009a2e:	4290      	cmp	r0, r2
 8009a30:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a34:	d8d6      	bhi.n	80099e4 <__gethex+0x384>
 8009a36:	68a2      	ldr	r2, [r4, #8]
 8009a38:	4593      	cmp	fp, r2
 8009a3a:	db17      	blt.n	8009a6c <__gethex+0x40c>
 8009a3c:	6861      	ldr	r1, [r4, #4]
 8009a3e:	4648      	mov	r0, r9
 8009a40:	3101      	adds	r1, #1
 8009a42:	f7fe f819 	bl	8007a78 <_Balloc>
 8009a46:	4682      	mov	sl, r0
 8009a48:	b918      	cbnz	r0, 8009a52 <__gethex+0x3f2>
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <__gethex+0x458>)
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	2184      	movs	r1, #132	; 0x84
 8009a50:	e6b3      	b.n	80097ba <__gethex+0x15a>
 8009a52:	6922      	ldr	r2, [r4, #16]
 8009a54:	3202      	adds	r2, #2
 8009a56:	f104 010c 	add.w	r1, r4, #12
 8009a5a:	0092      	lsls	r2, r2, #2
 8009a5c:	300c      	adds	r0, #12
 8009a5e:	f7ff fd4d 	bl	80094fc <memcpy>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4648      	mov	r0, r9
 8009a66:	f7fe f847 	bl	8007af8 <_Bfree>
 8009a6a:	4654      	mov	r4, sl
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	1c51      	adds	r1, r2, #1
 8009a70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a74:	6121      	str	r1, [r4, #16]
 8009a76:	2101      	movs	r1, #1
 8009a78:	6151      	str	r1, [r2, #20]
 8009a7a:	e7bc      	b.n	80099f6 <__gethex+0x396>
 8009a7c:	6921      	ldr	r1, [r4, #16]
 8009a7e:	4559      	cmp	r1, fp
 8009a80:	dd0b      	ble.n	8009a9a <__gethex+0x43a>
 8009a82:	2101      	movs	r1, #1
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7ff fd83 	bl	8009590 <rshift>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	3601      	adds	r6, #1
 8009a8e:	42b3      	cmp	r3, r6
 8009a90:	f6ff aedb 	blt.w	800984a <__gethex+0x1ea>
 8009a94:	f04f 0801 	mov.w	r8, #1
 8009a98:	e7c2      	b.n	8009a20 <__gethex+0x3c0>
 8009a9a:	f015 051f 	ands.w	r5, r5, #31
 8009a9e:	d0f9      	beq.n	8009a94 <__gethex+0x434>
 8009aa0:	9b01      	ldr	r3, [sp, #4]
 8009aa2:	441a      	add	r2, r3
 8009aa4:	f1c5 0520 	rsb	r5, r5, #32
 8009aa8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009aac:	f7fe f8d6 	bl	8007c5c <__hi0bits>
 8009ab0:	42a8      	cmp	r0, r5
 8009ab2:	dbe6      	blt.n	8009a82 <__gethex+0x422>
 8009ab4:	e7ee      	b.n	8009a94 <__gethex+0x434>
 8009ab6:	bf00      	nop
 8009ab8:	0800a635 	.word	0x0800a635

08009abc <L_shift>:
 8009abc:	f1c2 0208 	rsb	r2, r2, #8
 8009ac0:	0092      	lsls	r2, r2, #2
 8009ac2:	b570      	push	{r4, r5, r6, lr}
 8009ac4:	f1c2 0620 	rsb	r6, r2, #32
 8009ac8:	6843      	ldr	r3, [r0, #4]
 8009aca:	6804      	ldr	r4, [r0, #0]
 8009acc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ad0:	432c      	orrs	r4, r5
 8009ad2:	40d3      	lsrs	r3, r2
 8009ad4:	6004      	str	r4, [r0, #0]
 8009ad6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ada:	4288      	cmp	r0, r1
 8009adc:	d3f4      	bcc.n	8009ac8 <L_shift+0xc>
 8009ade:	bd70      	pop	{r4, r5, r6, pc}

08009ae0 <__match>:
 8009ae0:	b530      	push	{r4, r5, lr}
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aea:	b914      	cbnz	r4, 8009af2 <__match+0x12>
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	2001      	movs	r0, #1
 8009af0:	bd30      	pop	{r4, r5, pc}
 8009af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009afa:	2d19      	cmp	r5, #25
 8009afc:	bf98      	it	ls
 8009afe:	3220      	addls	r2, #32
 8009b00:	42a2      	cmp	r2, r4
 8009b02:	d0f0      	beq.n	8009ae6 <__match+0x6>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7f3      	b.n	8009af0 <__match+0x10>

08009b08 <__hexnan>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	680b      	ldr	r3, [r1, #0]
 8009b0e:	6801      	ldr	r1, [r0, #0]
 8009b10:	115e      	asrs	r6, r3, #5
 8009b12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b16:	f013 031f 	ands.w	r3, r3, #31
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	bf18      	it	ne
 8009b1e:	3604      	addne	r6, #4
 8009b20:	2500      	movs	r5, #0
 8009b22:	1f37      	subs	r7, r6, #4
 8009b24:	4682      	mov	sl, r0
 8009b26:	4690      	mov	r8, r2
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b2e:	46b9      	mov	r9, r7
 8009b30:	463c      	mov	r4, r7
 8009b32:	9502      	str	r5, [sp, #8]
 8009b34:	46ab      	mov	fp, r5
 8009b36:	784a      	ldrb	r2, [r1, #1]
 8009b38:	1c4b      	adds	r3, r1, #1
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	b342      	cbz	r2, 8009b90 <__hexnan+0x88>
 8009b3e:	4610      	mov	r0, r2
 8009b40:	9105      	str	r1, [sp, #20]
 8009b42:	9204      	str	r2, [sp, #16]
 8009b44:	f7ff fd76 	bl	8009634 <__hexdig_fun>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d14f      	bne.n	8009bec <__hexnan+0xe4>
 8009b4c:	9a04      	ldr	r2, [sp, #16]
 8009b4e:	9905      	ldr	r1, [sp, #20]
 8009b50:	2a20      	cmp	r2, #32
 8009b52:	d818      	bhi.n	8009b86 <__hexnan+0x7e>
 8009b54:	9b02      	ldr	r3, [sp, #8]
 8009b56:	459b      	cmp	fp, r3
 8009b58:	dd13      	ble.n	8009b82 <__hexnan+0x7a>
 8009b5a:	454c      	cmp	r4, r9
 8009b5c:	d206      	bcs.n	8009b6c <__hexnan+0x64>
 8009b5e:	2d07      	cmp	r5, #7
 8009b60:	dc04      	bgt.n	8009b6c <__hexnan+0x64>
 8009b62:	462a      	mov	r2, r5
 8009b64:	4649      	mov	r1, r9
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7ff ffa8 	bl	8009abc <L_shift>
 8009b6c:	4544      	cmp	r4, r8
 8009b6e:	d950      	bls.n	8009c12 <__hexnan+0x10a>
 8009b70:	2300      	movs	r3, #0
 8009b72:	f1a4 0904 	sub.w	r9, r4, #4
 8009b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b7a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b7e:	464c      	mov	r4, r9
 8009b80:	461d      	mov	r5, r3
 8009b82:	9903      	ldr	r1, [sp, #12]
 8009b84:	e7d7      	b.n	8009b36 <__hexnan+0x2e>
 8009b86:	2a29      	cmp	r2, #41	; 0x29
 8009b88:	d155      	bne.n	8009c36 <__hexnan+0x12e>
 8009b8a:	3102      	adds	r1, #2
 8009b8c:	f8ca 1000 	str.w	r1, [sl]
 8009b90:	f1bb 0f00 	cmp.w	fp, #0
 8009b94:	d04f      	beq.n	8009c36 <__hexnan+0x12e>
 8009b96:	454c      	cmp	r4, r9
 8009b98:	d206      	bcs.n	8009ba8 <__hexnan+0xa0>
 8009b9a:	2d07      	cmp	r5, #7
 8009b9c:	dc04      	bgt.n	8009ba8 <__hexnan+0xa0>
 8009b9e:	462a      	mov	r2, r5
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f7ff ff8a 	bl	8009abc <L_shift>
 8009ba8:	4544      	cmp	r4, r8
 8009baa:	d934      	bls.n	8009c16 <__hexnan+0x10e>
 8009bac:	f1a8 0204 	sub.w	r2, r8, #4
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bba:	429f      	cmp	r7, r3
 8009bbc:	d2f9      	bcs.n	8009bb2 <__hexnan+0xaa>
 8009bbe:	1b3b      	subs	r3, r7, r4
 8009bc0:	f023 0303 	bic.w	r3, r3, #3
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	3e03      	subs	r6, #3
 8009bc8:	3401      	adds	r4, #1
 8009bca:	42a6      	cmp	r6, r4
 8009bcc:	bf38      	it	cc
 8009bce:	2304      	movcc	r3, #4
 8009bd0:	4443      	add	r3, r8
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f843 2b04 	str.w	r2, [r3], #4
 8009bd8:	429f      	cmp	r7, r3
 8009bda:	d2fb      	bcs.n	8009bd4 <__hexnan+0xcc>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	b91b      	cbnz	r3, 8009be8 <__hexnan+0xe0>
 8009be0:	4547      	cmp	r7, r8
 8009be2:	d126      	bne.n	8009c32 <__hexnan+0x12a>
 8009be4:	2301      	movs	r3, #1
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	2005      	movs	r0, #5
 8009bea:	e025      	b.n	8009c38 <__hexnan+0x130>
 8009bec:	3501      	adds	r5, #1
 8009bee:	2d08      	cmp	r5, #8
 8009bf0:	f10b 0b01 	add.w	fp, fp, #1
 8009bf4:	dd06      	ble.n	8009c04 <__hexnan+0xfc>
 8009bf6:	4544      	cmp	r4, r8
 8009bf8:	d9c3      	bls.n	8009b82 <__hexnan+0x7a>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c00:	2501      	movs	r5, #1
 8009c02:	3c04      	subs	r4, #4
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	f000 000f 	and.w	r0, r0, #15
 8009c0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c0e:	6020      	str	r0, [r4, #0]
 8009c10:	e7b7      	b.n	8009b82 <__hexnan+0x7a>
 8009c12:	2508      	movs	r5, #8
 8009c14:	e7b5      	b.n	8009b82 <__hexnan+0x7a>
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0df      	beq.n	8009bdc <__hexnan+0xd4>
 8009c1c:	f1c3 0320 	rsb	r3, r3, #32
 8009c20:	f04f 32ff 	mov.w	r2, #4294967295
 8009c24:	40da      	lsrs	r2, r3
 8009c26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c30:	e7d4      	b.n	8009bdc <__hexnan+0xd4>
 8009c32:	3f04      	subs	r7, #4
 8009c34:	e7d2      	b.n	8009bdc <__hexnan+0xd4>
 8009c36:	2004      	movs	r0, #4
 8009c38:	b007      	add	sp, #28
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c3e <__ascii_mbtowc>:
 8009c3e:	b082      	sub	sp, #8
 8009c40:	b901      	cbnz	r1, 8009c44 <__ascii_mbtowc+0x6>
 8009c42:	a901      	add	r1, sp, #4
 8009c44:	b142      	cbz	r2, 8009c58 <__ascii_mbtowc+0x1a>
 8009c46:	b14b      	cbz	r3, 8009c5c <__ascii_mbtowc+0x1e>
 8009c48:	7813      	ldrb	r3, [r2, #0]
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	7812      	ldrb	r2, [r2, #0]
 8009c4e:	1e10      	subs	r0, r2, #0
 8009c50:	bf18      	it	ne
 8009c52:	2001      	movne	r0, #1
 8009c54:	b002      	add	sp, #8
 8009c56:	4770      	bx	lr
 8009c58:	4610      	mov	r0, r2
 8009c5a:	e7fb      	b.n	8009c54 <__ascii_mbtowc+0x16>
 8009c5c:	f06f 0001 	mvn.w	r0, #1
 8009c60:	e7f8      	b.n	8009c54 <__ascii_mbtowc+0x16>

08009c62 <_realloc_r>:
 8009c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	4680      	mov	r8, r0
 8009c68:	4614      	mov	r4, r2
 8009c6a:	460e      	mov	r6, r1
 8009c6c:	b921      	cbnz	r1, 8009c78 <_realloc_r+0x16>
 8009c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c72:	4611      	mov	r1, r2
 8009c74:	f7fd be74 	b.w	8007960 <_malloc_r>
 8009c78:	b92a      	cbnz	r2, 8009c86 <_realloc_r+0x24>
 8009c7a:	f7fd fdfd 	bl	8007878 <_free_r>
 8009c7e:	4625      	mov	r5, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c86:	f000 f842 	bl	8009d0e <_malloc_usable_size_r>
 8009c8a:	4284      	cmp	r4, r0
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	d802      	bhi.n	8009c96 <_realloc_r+0x34>
 8009c90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c94:	d812      	bhi.n	8009cbc <_realloc_r+0x5a>
 8009c96:	4621      	mov	r1, r4
 8009c98:	4640      	mov	r0, r8
 8009c9a:	f7fd fe61 	bl	8007960 <_malloc_r>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d0ed      	beq.n	8009c80 <_realloc_r+0x1e>
 8009ca4:	42bc      	cmp	r4, r7
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	4631      	mov	r1, r6
 8009caa:	bf28      	it	cs
 8009cac:	463a      	movcs	r2, r7
 8009cae:	f7ff fc25 	bl	80094fc <memcpy>
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	f7fd fddf 	bl	8007878 <_free_r>
 8009cba:	e7e1      	b.n	8009c80 <_realloc_r+0x1e>
 8009cbc:	4635      	mov	r5, r6
 8009cbe:	e7df      	b.n	8009c80 <_realloc_r+0x1e>

08009cc0 <__ascii_wctomb>:
 8009cc0:	b149      	cbz	r1, 8009cd6 <__ascii_wctomb+0x16>
 8009cc2:	2aff      	cmp	r2, #255	; 0xff
 8009cc4:	bf85      	ittet	hi
 8009cc6:	238a      	movhi	r3, #138	; 0x8a
 8009cc8:	6003      	strhi	r3, [r0, #0]
 8009cca:	700a      	strbls	r2, [r1, #0]
 8009ccc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cd0:	bf98      	it	ls
 8009cd2:	2001      	movls	r0, #1
 8009cd4:	4770      	bx	lr
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4770      	bx	lr
	...

08009cdc <fiprintf>:
 8009cdc:	b40e      	push	{r1, r2, r3}
 8009cde:	b503      	push	{r0, r1, lr}
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	ab03      	add	r3, sp, #12
 8009ce4:	4805      	ldr	r0, [pc, #20]	; (8009cfc <fiprintf+0x20>)
 8009ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cea:	6800      	ldr	r0, [r0, #0]
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	f000 f83f 	bl	8009d70 <_vfiprintf_r>
 8009cf2:	b002      	add	sp, #8
 8009cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cf8:	b003      	add	sp, #12
 8009cfa:	4770      	bx	lr
 8009cfc:	20000068 	.word	0x20000068

08009d00 <abort>:
 8009d00:	b508      	push	{r3, lr}
 8009d02:	2006      	movs	r0, #6
 8009d04:	f000 fa0c 	bl	800a120 <raise>
 8009d08:	2001      	movs	r0, #1
 8009d0a:	f7f7 ff03 	bl	8001b14 <_exit>

08009d0e <_malloc_usable_size_r>:
 8009d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d12:	1f18      	subs	r0, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bfbc      	itt	lt
 8009d18:	580b      	ldrlt	r3, [r1, r0]
 8009d1a:	18c0      	addlt	r0, r0, r3
 8009d1c:	4770      	bx	lr

08009d1e <__sfputc_r>:
 8009d1e:	6893      	ldr	r3, [r2, #8]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	b410      	push	{r4}
 8009d26:	6093      	str	r3, [r2, #8]
 8009d28:	da08      	bge.n	8009d3c <__sfputc_r+0x1e>
 8009d2a:	6994      	ldr	r4, [r2, #24]
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	db01      	blt.n	8009d34 <__sfputc_r+0x16>
 8009d30:	290a      	cmp	r1, #10
 8009d32:	d103      	bne.n	8009d3c <__sfputc_r+0x1e>
 8009d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d38:	f000 b934 	b.w	8009fa4 <__swbuf_r>
 8009d3c:	6813      	ldr	r3, [r2, #0]
 8009d3e:	1c58      	adds	r0, r3, #1
 8009d40:	6010      	str	r0, [r2, #0]
 8009d42:	7019      	strb	r1, [r3, #0]
 8009d44:	4608      	mov	r0, r1
 8009d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <__sfputs_r>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	4606      	mov	r6, r0
 8009d50:	460f      	mov	r7, r1
 8009d52:	4614      	mov	r4, r2
 8009d54:	18d5      	adds	r5, r2, r3
 8009d56:	42ac      	cmp	r4, r5
 8009d58:	d101      	bne.n	8009d5e <__sfputs_r+0x12>
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e007      	b.n	8009d6e <__sfputs_r+0x22>
 8009d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d62:	463a      	mov	r2, r7
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff ffda 	bl	8009d1e <__sfputc_r>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d1f3      	bne.n	8009d56 <__sfputs_r+0xa>
 8009d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d70 <_vfiprintf_r>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	460d      	mov	r5, r1
 8009d76:	b09d      	sub	sp, #116	; 0x74
 8009d78:	4614      	mov	r4, r2
 8009d7a:	4698      	mov	r8, r3
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	b118      	cbz	r0, 8009d88 <_vfiprintf_r+0x18>
 8009d80:	6a03      	ldr	r3, [r0, #32]
 8009d82:	b90b      	cbnz	r3, 8009d88 <_vfiprintf_r+0x18>
 8009d84:	f7fc fe62 	bl	8006a4c <__sinit>
 8009d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d405      	bmi.n	8009d9a <_vfiprintf_r+0x2a>
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	059a      	lsls	r2, r3, #22
 8009d92:	d402      	bmi.n	8009d9a <_vfiprintf_r+0x2a>
 8009d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d96:	f7fc ff70 	bl	8006c7a <__retarget_lock_acquire_recursive>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	071b      	lsls	r3, r3, #28
 8009d9e:	d501      	bpl.n	8009da4 <_vfiprintf_r+0x34>
 8009da0:	692b      	ldr	r3, [r5, #16]
 8009da2:	b99b      	cbnz	r3, 8009dcc <_vfiprintf_r+0x5c>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4630      	mov	r0, r6
 8009da8:	f000 f93a 	bl	800a020 <__swsetup_r>
 8009dac:	b170      	cbz	r0, 8009dcc <_vfiprintf_r+0x5c>
 8009dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db0:	07dc      	lsls	r4, r3, #31
 8009db2:	d504      	bpl.n	8009dbe <_vfiprintf_r+0x4e>
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	b01d      	add	sp, #116	; 0x74
 8009dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	0598      	lsls	r0, r3, #22
 8009dc2:	d4f7      	bmi.n	8009db4 <_vfiprintf_r+0x44>
 8009dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc6:	f7fc ff59 	bl	8006c7c <__retarget_lock_release_recursive>
 8009dca:	e7f3      	b.n	8009db4 <_vfiprintf_r+0x44>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dda:	2330      	movs	r3, #48	; 0x30
 8009ddc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f90 <_vfiprintf_r+0x220>
 8009de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009de4:	f04f 0901 	mov.w	r9, #1
 8009de8:	4623      	mov	r3, r4
 8009dea:	469a      	mov	sl, r3
 8009dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df0:	b10a      	cbz	r2, 8009df6 <_vfiprintf_r+0x86>
 8009df2:	2a25      	cmp	r2, #37	; 0x25
 8009df4:	d1f9      	bne.n	8009dea <_vfiprintf_r+0x7a>
 8009df6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dfa:	d00b      	beq.n	8009e14 <_vfiprintf_r+0xa4>
 8009dfc:	465b      	mov	r3, fp
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7ff ffa2 	bl	8009d4c <__sfputs_r>
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f000 80a9 	beq.w	8009f60 <_vfiprintf_r+0x1f0>
 8009e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e10:	445a      	add	r2, fp
 8009e12:	9209      	str	r2, [sp, #36]	; 0x24
 8009e14:	f89a 3000 	ldrb.w	r3, [sl]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 80a1 	beq.w	8009f60 <_vfiprintf_r+0x1f0>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e28:	f10a 0a01 	add.w	sl, sl, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e34:	931a      	str	r3, [sp, #104]	; 0x68
 8009e36:	4654      	mov	r4, sl
 8009e38:	2205      	movs	r2, #5
 8009e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3e:	4854      	ldr	r0, [pc, #336]	; (8009f90 <_vfiprintf_r+0x220>)
 8009e40:	f7f6 f9fe 	bl	8000240 <memchr>
 8009e44:	9a04      	ldr	r2, [sp, #16]
 8009e46:	b9d8      	cbnz	r0, 8009e80 <_vfiprintf_r+0x110>
 8009e48:	06d1      	lsls	r1, r2, #27
 8009e4a:	bf44      	itt	mi
 8009e4c:	2320      	movmi	r3, #32
 8009e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e52:	0713      	lsls	r3, r2, #28
 8009e54:	bf44      	itt	mi
 8009e56:	232b      	movmi	r3, #43	; 0x2b
 8009e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e60:	2b2a      	cmp	r3, #42	; 0x2a
 8009e62:	d015      	beq.n	8009e90 <_vfiprintf_r+0x120>
 8009e64:	9a07      	ldr	r2, [sp, #28]
 8009e66:	4654      	mov	r4, sl
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4621      	mov	r1, r4
 8009e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e74:	3b30      	subs	r3, #48	; 0x30
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d94d      	bls.n	8009f16 <_vfiprintf_r+0x1a6>
 8009e7a:	b1b0      	cbz	r0, 8009eaa <_vfiprintf_r+0x13a>
 8009e7c:	9207      	str	r2, [sp, #28]
 8009e7e:	e014      	b.n	8009eaa <_vfiprintf_r+0x13a>
 8009e80:	eba0 0308 	sub.w	r3, r0, r8
 8009e84:	fa09 f303 	lsl.w	r3, r9, r3
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	46a2      	mov	sl, r4
 8009e8e:	e7d2      	b.n	8009e36 <_vfiprintf_r+0xc6>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	1d19      	adds	r1, r3, #4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	9103      	str	r1, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfbb      	ittet	lt
 8009e9c:	425b      	neglt	r3, r3
 8009e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea2:	9307      	strge	r3, [sp, #28]
 8009ea4:	9307      	strlt	r3, [sp, #28]
 8009ea6:	bfb8      	it	lt
 8009ea8:	9204      	strlt	r2, [sp, #16]
 8009eaa:	7823      	ldrb	r3, [r4, #0]
 8009eac:	2b2e      	cmp	r3, #46	; 0x2e
 8009eae:	d10c      	bne.n	8009eca <_vfiprintf_r+0x15a>
 8009eb0:	7863      	ldrb	r3, [r4, #1]
 8009eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb4:	d134      	bne.n	8009f20 <_vfiprintf_r+0x1b0>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	9203      	str	r2, [sp, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfb8      	it	lt
 8009ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ec6:	3402      	adds	r4, #2
 8009ec8:	9305      	str	r3, [sp, #20]
 8009eca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009fa0 <_vfiprintf_r+0x230>
 8009ece:	7821      	ldrb	r1, [r4, #0]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	f7f6 f9b4 	bl	8000240 <memchr>
 8009ed8:	b138      	cbz	r0, 8009eea <_vfiprintf_r+0x17a>
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	eba0 000a 	sub.w	r0, r0, sl
 8009ee0:	2240      	movs	r2, #64	; 0x40
 8009ee2:	4082      	lsls	r2, r0
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	3401      	adds	r4, #1
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	4829      	ldr	r0, [pc, #164]	; (8009f94 <_vfiprintf_r+0x224>)
 8009ef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ef4:	2206      	movs	r2, #6
 8009ef6:	f7f6 f9a3 	bl	8000240 <memchr>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d03f      	beq.n	8009f7e <_vfiprintf_r+0x20e>
 8009efe:	4b26      	ldr	r3, [pc, #152]	; (8009f98 <_vfiprintf_r+0x228>)
 8009f00:	bb1b      	cbnz	r3, 8009f4a <_vfiprintf_r+0x1da>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	3307      	adds	r3, #7
 8009f06:	f023 0307 	bic.w	r3, r3, #7
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	9303      	str	r3, [sp, #12]
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	443b      	add	r3, r7
 8009f12:	9309      	str	r3, [sp, #36]	; 0x24
 8009f14:	e768      	b.n	8009de8 <_vfiprintf_r+0x78>
 8009f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	e7a6      	b.n	8009e6e <_vfiprintf_r+0xfe>
 8009f20:	2300      	movs	r3, #0
 8009f22:	3401      	adds	r4, #1
 8009f24:	9305      	str	r3, [sp, #20]
 8009f26:	4619      	mov	r1, r3
 8009f28:	f04f 0c0a 	mov.w	ip, #10
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f32:	3a30      	subs	r2, #48	; 0x30
 8009f34:	2a09      	cmp	r2, #9
 8009f36:	d903      	bls.n	8009f40 <_vfiprintf_r+0x1d0>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0c6      	beq.n	8009eca <_vfiprintf_r+0x15a>
 8009f3c:	9105      	str	r1, [sp, #20]
 8009f3e:	e7c4      	b.n	8009eca <_vfiprintf_r+0x15a>
 8009f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f44:	4604      	mov	r4, r0
 8009f46:	2301      	movs	r3, #1
 8009f48:	e7f0      	b.n	8009f2c <_vfiprintf_r+0x1bc>
 8009f4a:	ab03      	add	r3, sp, #12
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <_vfiprintf_r+0x22c>)
 8009f52:	a904      	add	r1, sp, #16
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7fb ff3f 	bl	8005dd8 <_printf_float>
 8009f5a:	4607      	mov	r7, r0
 8009f5c:	1c78      	adds	r0, r7, #1
 8009f5e:	d1d6      	bne.n	8009f0e <_vfiprintf_r+0x19e>
 8009f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f62:	07d9      	lsls	r1, r3, #31
 8009f64:	d405      	bmi.n	8009f72 <_vfiprintf_r+0x202>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	059a      	lsls	r2, r3, #22
 8009f6a:	d402      	bmi.n	8009f72 <_vfiprintf_r+0x202>
 8009f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f6e:	f7fc fe85 	bl	8006c7c <__retarget_lock_release_recursive>
 8009f72:	89ab      	ldrh	r3, [r5, #12]
 8009f74:	065b      	lsls	r3, r3, #25
 8009f76:	f53f af1d 	bmi.w	8009db4 <_vfiprintf_r+0x44>
 8009f7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f7c:	e71c      	b.n	8009db8 <_vfiprintf_r+0x48>
 8009f7e:	ab03      	add	r3, sp, #12
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	462a      	mov	r2, r5
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <_vfiprintf_r+0x22c>)
 8009f86:	a904      	add	r1, sp, #16
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7fc f9ad 	bl	80062e8 <_printf_i>
 8009f8e:	e7e4      	b.n	8009f5a <_vfiprintf_r+0x1ea>
 8009f90:	0800a8f1 	.word	0x0800a8f1
 8009f94:	0800a8fb 	.word	0x0800a8fb
 8009f98:	08005dd9 	.word	0x08005dd9
 8009f9c:	08009d4d 	.word	0x08009d4d
 8009fa0:	0800a8f7 	.word	0x0800a8f7

08009fa4 <__swbuf_r>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	460e      	mov	r6, r1
 8009fa8:	4614      	mov	r4, r2
 8009faa:	4605      	mov	r5, r0
 8009fac:	b118      	cbz	r0, 8009fb6 <__swbuf_r+0x12>
 8009fae:	6a03      	ldr	r3, [r0, #32]
 8009fb0:	b90b      	cbnz	r3, 8009fb6 <__swbuf_r+0x12>
 8009fb2:	f7fc fd4b 	bl	8006a4c <__sinit>
 8009fb6:	69a3      	ldr	r3, [r4, #24]
 8009fb8:	60a3      	str	r3, [r4, #8]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	071a      	lsls	r2, r3, #28
 8009fbe:	d525      	bpl.n	800a00c <__swbuf_r+0x68>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	b31b      	cbz	r3, 800a00c <__swbuf_r+0x68>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	6922      	ldr	r2, [r4, #16]
 8009fc8:	1a98      	subs	r0, r3, r2
 8009fca:	6963      	ldr	r3, [r4, #20]
 8009fcc:	b2f6      	uxtb	r6, r6
 8009fce:	4283      	cmp	r3, r0
 8009fd0:	4637      	mov	r7, r6
 8009fd2:	dc04      	bgt.n	8009fde <__swbuf_r+0x3a>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7ff fa2c 	bl	8009434 <_fflush_r>
 8009fdc:	b9e0      	cbnz	r0, 800a018 <__swbuf_r+0x74>
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	60a3      	str	r3, [r4, #8]
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	6022      	str	r2, [r4, #0]
 8009fea:	701e      	strb	r6, [r3, #0]
 8009fec:	6962      	ldr	r2, [r4, #20]
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d004      	beq.n	8009ffe <__swbuf_r+0x5a>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	07db      	lsls	r3, r3, #31
 8009ff8:	d506      	bpl.n	800a008 <__swbuf_r+0x64>
 8009ffa:	2e0a      	cmp	r6, #10
 8009ffc:	d104      	bne.n	800a008 <__swbuf_r+0x64>
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	f7ff fa17 	bl	8009434 <_fflush_r>
 800a006:	b938      	cbnz	r0, 800a018 <__swbuf_r+0x74>
 800a008:	4638      	mov	r0, r7
 800a00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00c:	4621      	mov	r1, r4
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 f806 	bl	800a020 <__swsetup_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	d0d5      	beq.n	8009fc4 <__swbuf_r+0x20>
 800a018:	f04f 37ff 	mov.w	r7, #4294967295
 800a01c:	e7f4      	b.n	800a008 <__swbuf_r+0x64>
	...

0800a020 <__swsetup_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4b2a      	ldr	r3, [pc, #168]	; (800a0cc <__swsetup_r+0xac>)
 800a024:	4605      	mov	r5, r0
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	460c      	mov	r4, r1
 800a02a:	b118      	cbz	r0, 800a034 <__swsetup_r+0x14>
 800a02c:	6a03      	ldr	r3, [r0, #32]
 800a02e:	b90b      	cbnz	r3, 800a034 <__swsetup_r+0x14>
 800a030:	f7fc fd0c 	bl	8006a4c <__sinit>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a03a:	0718      	lsls	r0, r3, #28
 800a03c:	d422      	bmi.n	800a084 <__swsetup_r+0x64>
 800a03e:	06d9      	lsls	r1, r3, #27
 800a040:	d407      	bmi.n	800a052 <__swsetup_r+0x32>
 800a042:	2309      	movs	r3, #9
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	e034      	b.n	800a0bc <__swsetup_r+0x9c>
 800a052:	0758      	lsls	r0, r3, #29
 800a054:	d512      	bpl.n	800a07c <__swsetup_r+0x5c>
 800a056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a058:	b141      	cbz	r1, 800a06c <__swsetup_r+0x4c>
 800a05a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a05e:	4299      	cmp	r1, r3
 800a060:	d002      	beq.n	800a068 <__swsetup_r+0x48>
 800a062:	4628      	mov	r0, r5
 800a064:	f7fd fc08 	bl	8007878 <_free_r>
 800a068:	2300      	movs	r3, #0
 800a06a:	6363      	str	r3, [r4, #52]	; 0x34
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	2300      	movs	r3, #0
 800a076:	6063      	str	r3, [r4, #4]
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	f043 0308 	orr.w	r3, r3, #8
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	b94b      	cbnz	r3, 800a09c <__swsetup_r+0x7c>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a08e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a092:	d003      	beq.n	800a09c <__swsetup_r+0x7c>
 800a094:	4621      	mov	r1, r4
 800a096:	4628      	mov	r0, r5
 800a098:	f000 f884 	bl	800a1a4 <__smakebuf_r>
 800a09c:	89a0      	ldrh	r0, [r4, #12]
 800a09e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0a2:	f010 0301 	ands.w	r3, r0, #1
 800a0a6:	d00a      	beq.n	800a0be <__swsetup_r+0x9e>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60a3      	str	r3, [r4, #8]
 800a0ac:	6963      	ldr	r3, [r4, #20]
 800a0ae:	425b      	negs	r3, r3
 800a0b0:	61a3      	str	r3, [r4, #24]
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	b943      	cbnz	r3, 800a0c8 <__swsetup_r+0xa8>
 800a0b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0ba:	d1c4      	bne.n	800a046 <__swsetup_r+0x26>
 800a0bc:	bd38      	pop	{r3, r4, r5, pc}
 800a0be:	0781      	lsls	r1, r0, #30
 800a0c0:	bf58      	it	pl
 800a0c2:	6963      	ldrpl	r3, [r4, #20]
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	e7f4      	b.n	800a0b2 <__swsetup_r+0x92>
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e7f7      	b.n	800a0bc <__swsetup_r+0x9c>
 800a0cc:	20000068 	.word	0x20000068

0800a0d0 <_raise_r>:
 800a0d0:	291f      	cmp	r1, #31
 800a0d2:	b538      	push	{r3, r4, r5, lr}
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	d904      	bls.n	800a0e4 <_raise_r+0x14>
 800a0da:	2316      	movs	r3, #22
 800a0dc:	6003      	str	r3, [r0, #0]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a0e6:	b112      	cbz	r2, 800a0ee <_raise_r+0x1e>
 800a0e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0ec:	b94b      	cbnz	r3, 800a102 <_raise_r+0x32>
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 f830 	bl	800a154 <_getpid_r>
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fe:	f000 b817 	b.w	800a130 <_kill_r>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d00a      	beq.n	800a11c <_raise_r+0x4c>
 800a106:	1c59      	adds	r1, r3, #1
 800a108:	d103      	bne.n	800a112 <_raise_r+0x42>
 800a10a:	2316      	movs	r3, #22
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	2001      	movs	r0, #1
 800a110:	e7e7      	b.n	800a0e2 <_raise_r+0x12>
 800a112:	2400      	movs	r4, #0
 800a114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a118:	4628      	mov	r0, r5
 800a11a:	4798      	blx	r3
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7e0      	b.n	800a0e2 <_raise_r+0x12>

0800a120 <raise>:
 800a120:	4b02      	ldr	r3, [pc, #8]	; (800a12c <raise+0xc>)
 800a122:	4601      	mov	r1, r0
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	f7ff bfd3 	b.w	800a0d0 <_raise_r>
 800a12a:	bf00      	nop
 800a12c:	20000068 	.word	0x20000068

0800a130 <_kill_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d07      	ldr	r5, [pc, #28]	; (800a150 <_kill_r+0x20>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	f7f7 fcd9 	bl	8001af4 <_kill>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d102      	bne.n	800a14c <_kill_r+0x1c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b103      	cbz	r3, 800a14c <_kill_r+0x1c>
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	20000480 	.word	0x20000480

0800a154 <_getpid_r>:
 800a154:	f7f7 bcc6 	b.w	8001ae4 <_getpid>

0800a158 <__swhatbuf_r>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	460c      	mov	r4, r1
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	2900      	cmp	r1, #0
 800a162:	b096      	sub	sp, #88	; 0x58
 800a164:	4615      	mov	r5, r2
 800a166:	461e      	mov	r6, r3
 800a168:	da0d      	bge.n	800a186 <__swhatbuf_r+0x2e>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a170:	f04f 0100 	mov.w	r1, #0
 800a174:	bf0c      	ite	eq
 800a176:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a17a:	2340      	movne	r3, #64	; 0x40
 800a17c:	2000      	movs	r0, #0
 800a17e:	6031      	str	r1, [r6, #0]
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	b016      	add	sp, #88	; 0x58
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	466a      	mov	r2, sp
 800a188:	f000 f848 	bl	800a21c <_fstat_r>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	dbec      	blt.n	800a16a <__swhatbuf_r+0x12>
 800a190:	9901      	ldr	r1, [sp, #4]
 800a192:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a196:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a19a:	4259      	negs	r1, r3
 800a19c:	4159      	adcs	r1, r3
 800a19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a2:	e7eb      	b.n	800a17c <__swhatbuf_r+0x24>

0800a1a4 <__smakebuf_r>:
 800a1a4:	898b      	ldrh	r3, [r1, #12]
 800a1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1a8:	079d      	lsls	r5, r3, #30
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	d507      	bpl.n	800a1c0 <__smakebuf_r+0x1c>
 800a1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	6163      	str	r3, [r4, #20]
 800a1bc:	b002      	add	sp, #8
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	ab01      	add	r3, sp, #4
 800a1c2:	466a      	mov	r2, sp
 800a1c4:	f7ff ffc8 	bl	800a158 <__swhatbuf_r>
 800a1c8:	9900      	ldr	r1, [sp, #0]
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7fd fbc7 	bl	8007960 <_malloc_r>
 800a1d2:	b948      	cbnz	r0, 800a1e8 <__smakebuf_r+0x44>
 800a1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d8:	059a      	lsls	r2, r3, #22
 800a1da:	d4ef      	bmi.n	800a1bc <__smakebuf_r+0x18>
 800a1dc:	f023 0303 	bic.w	r3, r3, #3
 800a1e0:	f043 0302 	orr.w	r3, r3, #2
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	e7e3      	b.n	800a1b0 <__smakebuf_r+0xc>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	6020      	str	r0, [r4, #0]
 800a1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	6163      	str	r3, [r4, #20]
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	6120      	str	r0, [r4, #16]
 800a1fa:	b15b      	cbz	r3, 800a214 <__smakebuf_r+0x70>
 800a1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a200:	4630      	mov	r0, r6
 800a202:	f000 f81d 	bl	800a240 <_isatty_r>
 800a206:	b128      	cbz	r0, 800a214 <__smakebuf_r+0x70>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	f043 0301 	orr.w	r3, r3, #1
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	431d      	orrs	r5, r3
 800a218:	81a5      	strh	r5, [r4, #12]
 800a21a:	e7cf      	b.n	800a1bc <__smakebuf_r+0x18>

0800a21c <_fstat_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d07      	ldr	r5, [pc, #28]	; (800a23c <_fstat_r+0x20>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	4611      	mov	r1, r2
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	f7f7 fcc2 	bl	8001bb2 <_fstat>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	d102      	bne.n	800a238 <_fstat_r+0x1c>
 800a232:	682b      	ldr	r3, [r5, #0]
 800a234:	b103      	cbz	r3, 800a238 <_fstat_r+0x1c>
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	bd38      	pop	{r3, r4, r5, pc}
 800a23a:	bf00      	nop
 800a23c:	20000480 	.word	0x20000480

0800a240 <_isatty_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4d06      	ldr	r5, [pc, #24]	; (800a25c <_isatty_r+0x1c>)
 800a244:	2300      	movs	r3, #0
 800a246:	4604      	mov	r4, r0
 800a248:	4608      	mov	r0, r1
 800a24a:	602b      	str	r3, [r5, #0]
 800a24c:	f7f7 fcc1 	bl	8001bd2 <_isatty>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_isatty_r+0x1a>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_isatty_r+0x1a>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	20000480 	.word	0x20000480

0800a260 <_init>:
 800a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a262:	bf00      	nop
 800a264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a266:	bc08      	pop	{r3}
 800a268:	469e      	mov	lr, r3
 800a26a:	4770      	bx	lr

0800a26c <_fini>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	bf00      	nop
 800a270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a272:	bc08      	pop	{r3}
 800a274:	469e      	mov	lr, r3
 800a276:	4770      	bx	lr
